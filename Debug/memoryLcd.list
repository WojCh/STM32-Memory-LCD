
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c904  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000572c8  0801cab8  0801cab8  0002cab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08073d80  08073d80  00090458  2**0
                  CONTENTS
  4 .ARM          00000008  08073d80  08073d80  00083d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08073d88  08073d88  00090458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08073d88  08073d88  00083d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08073d8c  08073d8c  00083d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08073d90  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00090458  2**0
                  CONTENTS
 10 .bss          00005a24  20000458  20000458  00090458  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005e7c  20005e7c  00090458  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00090458  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031bcb  00000000  00000000  00090488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008639  00000000  00000000  000c2053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002510  00000000  00000000  000ca690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c8  00000000  00000000  000ccba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000320dc  00000000  00000000  000ced68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b427  00000000  00000000  00100e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f076c  00000000  00000000  0013c26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022c9d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b414  00000000  00000000  0022ca28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000458 	.word	0x20000458
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ca9c 	.word	0x0801ca9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000045c 	.word	0x2000045c
 80001ec:	0801ca9c 	.word	0x0801ca9c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <SD_logger+0x24>)
 8001042:	f000 fa5b 	bl	80014fc <Create_Dir>
	Create_File("logs/LOG.TXT");
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <SD_logger+0x28>)
 8001048:	f000 f918 	bl	800127c <Create_File>
	Update_File("logs/LOG.TXT", msg);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <SD_logger+0x28>)
 8001050:	f000 f9a0 	bl	8001394 <Update_File>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801cab8 	.word	0x0801cab8
 8001060:	0801cac0 	.word	0x0801cac0

08001064 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <Mount_SD+0x30>)
 8001072:	f012 fb15 	bl	80136a0 <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Mount_SD+0x34>)
 800107c:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Mount_SD+0x34>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <Mount_SD+0x26>
		return SD_ERROR;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 800108a:	2301      	movs	r3, #1
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000474 	.word	0x20000474
 8001098:	200024f0 	.word	0x200024f0

0800109c <Scan_SD_my>:
	else return SD_ERROR;
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD_my (DIR *dir, char *filename)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

    if (fresult == FR_OK)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <Scan_SD_my+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d123      	bne.n	80010f6 <Scan_SD_my+0x5a>
    {
		fresult = f_readdir(dir, &fno);                   /* Read a directory item */
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <Scan_SD_my+0x6c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f013 f93b 	bl	801432c <f_readdir>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Scan_SD_my+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || fno.fname[0] == 0)  return fresult;  /* Break on error or end of dir */
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Scan_SD_my+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <Scan_SD_my+0x32>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Scan_SD_my+0x6c>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <Scan_SD_my+0x38>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <Scan_SD_my+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	e012      	b.n	80010fa <Scan_SD_my+0x5e>
		if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <Scan_SD_my+0x6c>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <Scan_SD_my+0x50>
		{
			sprintf (filename, "Dir: %s\r\n", fno.fname);
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Scan_SD_my+0x70>)
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <Scan_SD_my+0x74>)
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f014 fdab 	bl	8015c40 <siprintf>
 80010ea:	e004      	b.n	80010f6 <Scan_SD_my+0x5a>
		}
		else
		{   /* It is a file. */
		   sprintf(filename,"File: %s\n", fno.fname);
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <Scan_SD_my+0x70>)
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <Scan_SD_my+0x78>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f014 fda5 	bl	8015c40 <siprintf>
		}
    }
    return fresult;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <Scan_SD_my+0x68>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200024f0 	.word	0x200024f0
 8001108:	200024d8 	.word	0x200024d8
 800110c:	200024e1 	.word	0x200024e1
 8001110:	0801cad0 	.word	0x0801cad0
 8001114:	0801cadc 	.word	0x0801cadc

08001118 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001122:	494d      	ldr	r1, [pc, #308]	; (8001258 <Read_File+0x140>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f013 f93e 	bl	80143a6 <f_stat>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Read_File+0x144>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <Read_File+0x144>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f013 fc34 	bl	80149a8 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <Read_File+0x148>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f014 fd79 	bl	8015c40 <siprintf>
//		Send_Uart (buf);
		free(buf);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f013 fc32 	bl	80149b8 <free>
	    return fresult;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Read_File+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e07a      	b.n	8001250 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800115a:	2201      	movs	r2, #1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <Read_File+0x14c>)
 8001160:	f012 fae4 	bl	801372c <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Read_File+0x144>)
 800116a:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <Read_File+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f013 fc17 	bl	80149a8 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <Read_File+0x144>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <Read_File+0x150>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f014 fd59 	bl	8015c40 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f013 fc12 	bl	80149b8 <free>
		    return fresult;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Read_File+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e05a      	b.n	8001250 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800119a:	2004      	movs	r0, #4
 800119c:	f013 fc04 	bl	80149a8 <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <Read_File+0x14c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <Read_File+0x154>)
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <Read_File+0x14c>)
 80011ae:	f012 fc89 	bl	8013ac4 <f_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <Read_File+0x144>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Read_File+0x144>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f013 fbf0 	bl	80149a8 <malloc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
			free(buffer);
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f013 fbf3 	bl	80149b8 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Read_File+0x144>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <Read_File+0x158>)
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f014 fd2f 	bl	8015c40 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f013 fbe8 	bl	80149b8 <free>
 80011e8:	e030      	b.n	800124c <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80011ea:	2231      	movs	r2, #49	; 0x31
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f014 fdbf 	bl	8015d72 <strncpy>
			free(buffer);
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f013 fbdf 	bl	80149b8 <free>

			/* Close file */
			fresult = f_close(&fil);
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <Read_File+0x14c>)
 80011fc:	f012 ffd3 	bl	80141a6 <f_close>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Read_File+0x144>)
 8001206:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Read_File+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f013 fbc9 	bl	80149a8 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Read_File+0x144>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <Read_File+0x15c>)
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f014 fd0b 	bl	8015c40 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f013 fbc4 	bl	80149b8 <free>
 8001230:	e00c      	b.n	800124c <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f013 fbb8 	bl	80149a8 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <Read_File+0x160>)
 8001240:	69b8      	ldr	r0, [r7, #24]
 8001242:	f014 fcfd 	bl	8015c40 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001246:	69b8      	ldr	r0, [r7, #24]
 8001248:	f013 fbb6 	bl	80149b8 <free>
			}
		}
	    return fresult;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <Read_File+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200024d8 	.word	0x200024d8
 800125c:	200024f0 	.word	0x200024f0
 8001260:	0801cbf4 	.word	0x0801cbf4
 8001264:	200014a8 	.word	0x200014a8
 8001268:	0801cb30 	.word	0x0801cb30
 800126c:	200024f4 	.word	0x200024f4
 8001270:	0801cc18 	.word	0x0801cc18
 8001274:	0801cc40 	.word	0x0801cc40
 8001278:	0801cc68 	.word	0x0801cc68

0800127c <Create_File>:

FRESULT Create_File (char *name)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <Create_File+0xf8>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f013 f88d 	bl	80143a6 <f_stat>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Create_File+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <Create_File+0xfc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f013 fb83 	bl	80149a8 <malloc>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <Create_File+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f014 fcc8 	bl	8015c40 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f013 fb81 	bl	80149b8 <free>
	    return fresult;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Create_File+0xfc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e057      	b.n	800136c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012bc:	220b      	movs	r2, #11
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <Create_File+0x104>)
 80012c2:	f012 fa33 	bl	801372c <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Create_File+0xfc>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <Create_File+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f013 fb66 	bl	80149a8 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Create_File+0xfc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4926      	ldr	r1, [pc, #152]	; (8001384 <Create_File+0x108>)
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f014 fca8 	bl	8015c40 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80012f0:	6938      	ldr	r0, [r7, #16]
 80012f2:	f013 fb61 	bl	80149b8 <free>
		    return fresult;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <Create_File+0xfc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e037      	b.n	800136c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f013 fb53 	bl	80149a8 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Create_File+0x10c>)
 800130a:	69f8      	ldr	r0, [r7, #28]
 800130c:	f014 fc98 	bl	8015c40 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f013 fb51 	bl	80149b8 <free>
		}

		fresult = f_close(&fil);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Create_File+0x104>)
 8001318:	f012 ff45 	bl	80141a6 <f_close>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <Create_File+0xfc>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <Create_File+0xfc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f013 fb3b 	bl	80149a8 <malloc>
 8001332:	4603      	mov	r3, r0
 8001334:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <Create_File+0xfc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4913      	ldr	r1, [pc, #76]	; (800138c <Create_File+0x110>)
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f014 fc7d 	bl	8015c40 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f013 fb36 	bl	80149b8 <free>
 800134c:	e00c      	b.n	8001368 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f013 fb2a 	bl	80149a8 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <Create_File+0x114>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f014 fc6f 	bl	8015c40 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001362:	69b8      	ldr	r0, [r7, #24]
 8001364:	f013 fb28 	bl	80149b8 <free>
		}
	}
    return fresult;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Create_File+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200024d8 	.word	0x200024d8
 8001378:	200024f0 	.word	0x200024f0
 800137c:	0801cc88 	.word	0x0801cc88
 8001380:	200014a8 	.word	0x200014a8
 8001384:	0801ccc0 	.word	0x0801ccc0
 8001388:	0801cce8 	.word	0x0801cce8
 800138c:	0801cd28 	.word	0x0801cd28
 8001390:	0801cc68 	.word	0x0801cc68

08001394 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800139e:	494d      	ldr	r1, [pc, #308]	; (80014d4 <Update_File+0x140>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f013 f800 	bl	80143a6 <f_stat>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <Update_File+0x144>)
 80013ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Update_File+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f013 faf6 	bl	80149a8 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4946      	ldr	r1, [pc, #280]	; (80014dc <Update_File+0x148>)
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f014 fc3b 	bl	8015c40 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f013 faf4 	bl	80149b8 <free>
	    return fresult;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <Update_File+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	e079      	b.n	80014ca <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <Update_File+0x14c>)
 80013dc:	f012 f9a6 	bl	801372c <f_open>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Update_File+0x144>)
 80013e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <Update_File+0x144>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f013 fad9 	bl	80149a8 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Update_File+0x144>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <Update_File+0x150>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f014 fc1b 	bl	8015c40 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f013 fad4 	bl	80149b8 <free>
	        return fresult;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <Update_File+0x144>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	e059      	b.n	80014ca <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7fe fef4 	bl	8000204 <strlen>
 800141c:	4602      	mov	r2, r0
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Update_File+0x154>)
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <Update_File+0x14c>)
 8001424:	f012 fcad 	bl	8013d82 <f_write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <Update_File+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Update_File+0x144>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f013 fab5 	bl	80149a8 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Update_File+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <Update_File+0x158>)
 800144c:	69b8      	ldr	r0, [r7, #24]
 800144e:	f014 fbf7 	bl	8015c40 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f013 fab0 	bl	80149b8 <free>
 8001458:	e00c      	b.n	8001474 <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f013 faa4 	bl	80149a8 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <Update_File+0x15c>)
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f014 fbe9 	bl	8015c40 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f013 faa2 	bl	80149b8 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <Update_File+0x14c>)
 8001476:	f012 fe96 	bl	80141a6 <f_close>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Update_File+0x144>)
 8001480:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Update_File+0x144>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f013 fa8c 	bl	80149a8 <malloc>
 8001490:	4603      	mov	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <Update_File+0x144>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Update_File+0x160>)
 800149e:	6938      	ldr	r0, [r7, #16]
 80014a0:	f014 fbce 	bl	8015c40 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f013 fa87 	bl	80149b8 <free>
 80014aa:	e00c      	b.n	80014c6 <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f013 fa7b 	bl	80149a8 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <Update_File+0x164>)
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f014 fbc0 	bl	8015c40 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f013 fa79 	bl	80149b8 <free>
	     }
	}
    return fresult;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <Update_File+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200024d8 	.word	0x200024d8
 80014d8:	200024f0 	.word	0x200024f0
 80014dc:	0801cb10 	.word	0x0801cb10
 80014e0:	200014a8 	.word	0x200014a8
 80014e4:	0801cb30 	.word	0x0801cb30
 80014e8:	200024f8 	.word	0x200024f8
 80014ec:	0801cd4c 	.word	0x0801cd4c
 80014f0:	0801cd74 	.word	0x0801cd74
 80014f4:	0801cc40 	.word	0x0801cc40
 80014f8:	0801cc68 	.word	0x0801cc68

080014fc <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f013 f83c 	bl	8014582 <f_mkdir>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Create_Dir+0x68>)
 8001510:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Create_Dir+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f013 fa44 	bl	80149a8 <malloc>
 8001520:	4603      	mov	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4910      	ldr	r1, [pc, #64]	; (8001568 <Create_Dir+0x6c>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f014 fb89 	bl	8015c40 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f013 fa42 	bl	80149b8 <free>
 8001534:	e00f      	b.n	8001556 <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f013 fa36 	bl	80149a8 <malloc>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Create_Dir+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <Create_Dir+0x70>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f014 fb78 	bl	8015c40 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f013 fa31 	bl	80149b8 <free>
    }
    return fresult;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Create_Dir+0x68>)
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200024f0 	.word	0x200024f0
 8001568:	0801cdd4 	.word	0x0801cdd4
 800156c:	0801cdf8 	.word	0x0801cdf8

08001570 <Check_SD_Space>:

void Check_SD_Space (char* free_total)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <Check_SD_Space+0xcc>)
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <Check_SD_Space+0xd0>)
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <Check_SD_Space+0xd4>)
 800157e:	f012 ff4b 	bl	8014418 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Check_SD_Space+0xcc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <Check_SD_Space+0xcc>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	8952      	ldrh	r2, [r2, #10]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Check_SD_Space+0xd8>)
 80015a0:	f7ff f84a 	bl	8000638 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <Check_SD_Space+0xdc>)
 80015b4:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80015b6:	201e      	movs	r0, #30
 80015b8:	f013 f9f6 	bl	80149a8 <malloc>
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <Check_SD_Space+0xdc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_SD_Space+0xe0>)
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f014 fb39 	bl	8015c40 <siprintf>
//    Send_Uart(buf);
    free(buf);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f013 f9f2 	bl	80149b8 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <Check_SD_Space+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <Check_SD_Space+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Check_SD_Space+0xd8>)
 80015f0:	f7ff f822 	bl	8000638 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <Check_SD_Space+0xe4>)
 8001604:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001606:	201e      	movs	r0, #30
 8001608:	f013 f9ce 	bl	80149a8 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Check_SD_Space+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4910      	ldr	r1, [pc, #64]	; (8001658 <Check_SD_Space+0xe8>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f014 fb11 	bl	8015c40 <siprintf>
//    Send_Uart(buf);
    free(buf);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f013 f9ca 	bl	80149b8 <free>
    sprintf (free_total, "%lu/%lu", free_space, total);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Check_SD_Space+0xe4>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <Check_SD_Space+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <Check_SD_Space+0xec>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f014 fb06 	bl	8015c40 <siprintf>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200024fc 	.word	0x200024fc
 8001640:	20002500 	.word	0x20002500
 8001644:	0801ce24 	.word	0x0801ce24
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	20002504 	.word	0x20002504
 8001650:	0801ce28 	.word	0x0801ce28
 8001654:	20002508 	.word	0x20002508
 8001658:	0801ce44 	.word	0x0801ce44
 800165c:	0801ce60 	.word	0x0801ce60

08001660 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	22d0      	movs	r2, #208	; 0xd0
 800167e:	21ef      	movs	r1, #239	; 0xef
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <read_chip_id+0x3c>)
 8001682:	f00a fb51 	bl	800bd28 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b55      	cmp	r3, #85	; 0x55
 800168a:	d001      	beq.n	8001690 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002718 	.word	0x20002718

080016a0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d81a      	bhi.n	80016ec <set_oss+0x4c>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_oss+0x1c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	705a      	strb	r2, [r3, #1]
			break;
 80016d2:	e00f      	b.n	80016f4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	705a      	strb	r2, [r3, #1]
			break;
 80016da:	e00b      	b.n	80016f4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	220e      	movs	r2, #14
 80016e0:	705a      	strb	r2, [r3, #1]
			break;
 80016e2:	e007      	b.n	80016f4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	221a      	movs	r2, #26
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e003      	b.n	80016f4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	705a      	strb	r2, [r3, #1]
			break;
 80016f2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001704:	2332      	movs	r3, #50	; 0x32
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	22f4      	movs	r2, #244	; 0xf4
 8001716:	21ee      	movs	r1, #238	; 0xee
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <set_oss+0x88>)
 800171a:	f00a fa0b 	bl	800bb34 <HAL_I2C_Mem_Write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002718 	.word	0x20002718

0800172c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800175a:	2332      	movs	r3, #50	; 0x32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2316      	movs	r3, #22
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	22aa      	movs	r2, #170	; 0xaa
 800176c:	21ef      	movs	r1, #239	; 0xef
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <read_calib_data+0xe0>)
 8001770:	f00a fada 	bl	800bd28 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177a:	e03c      	b.n	80017f6 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800177c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	443b      	add	r3, r7
 8001786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001792:	3328      	adds	r3, #40	; 0x28
 8001794:	443b      	add	r3, r7
 8001796:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4403      	add	r3, r0
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b212      	sxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80017ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d9be      	bls.n	800177c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80017fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001802:	4618      	mov	r0, r3
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002718 	.word	0x20002718

08001810 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f013 f8e0 	bl	80149e4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001824:	687c      	ldr	r4, [r7, #4]
 8001826:	f7ff ff1b 	bl	8001660 <read_chip_id>
 800182a:	4603      	mov	r3, r0
 800182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687c      	ldr	r4, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <read_calib_data>
 800183a:	4603      	mov	r3, r0
 800183c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff2a 	bl	80016a0 <set_oss>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800185a:	232e      	movs	r3, #46	; 0x2e
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <get_ut+0x50>)
 8001872:	f00a f95f 	bl	800bb34 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001876:	2005      	movs	r0, #5
 8001878:	f009 fc40 	bl	800b0fc <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800187c:	2332      	movs	r3, #50	; 0x32
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	22f6      	movs	r2, #246	; 0xf6
 800188c:	21ef      	movs	r1, #239	; 0xef
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <get_ut+0x50>)
 8001890:	f00a fa4a 	bl	800bd28 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4313      	orrs	r3, r2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20002718 	.word	0x20002718

080018a8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	13db      	asrs	r3, r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e4:	02da      	lsls	r2, r3, #11
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	440b      	add	r3, r1
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	3308      	adds	r3, #8
 8001908:	111b      	asrs	r3, r3, #4
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001960 <get_temp+0xb8>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001964 <get_temp+0xbc>
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d908      	bls.n	8001942 <get_temp+0x9a>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001968 <get_temp+0xc0>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	db03      	blt.n	800194a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	3dcccccd 	.word	0x3dcccccd
 8001964:	c2200000 	.word	0xc2200000
 8001968:	42aa0000 	.word	0x42aa0000

0800196c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <get_up+0x7c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	22f4      	movs	r2, #244	; 0xf4
 8001998:	21ee      	movs	r1, #238	; 0xee
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <get_up+0x80>)
 800199c:	f00a f8ca 	bl	800bb34 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f009 fbaa 	bl	800b0fc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2303      	movs	r3, #3
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	22f6      	movs	r2, #246	; 0xf6
 80019ba:	21ef      	movs	r1, #239	; 0xef
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <get_up+0x80>)
 80019be:	f00a f9b3 	bl	800bd28 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4413      	add	r3, r2
 80019cc:	7aba      	ldrb	r2, [r7, #10]
 80019ce:	441a      	add	r2, r3
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	f1c3 0308 	rsb	r3, r3, #8
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	return up;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0801ce68 	.word	0x0801ce68
 80019ec:	20002718 	.word	0x20002718

080019f0 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a0e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001a10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fb03 f303 	mul.w	r3, r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <get_pressure+0x34>
 8001a20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a24:	131b      	asrs	r3, r3, #12
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da01      	bge.n	8001a32 <get_pressure+0x42>
 8001a2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a32:	12db      	asrs	r3, r3, #11
 8001a34:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <get_pressure+0x5a>
 8001a46:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a4a:	12db      	asrs	r3, r3, #11
 8001a4c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <get_pressure+0x7e>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <get_pressure+0x98>
 8001a82:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a86:	331f      	adds	r3, #31
 8001a88:	135b      	asrs	r3, r3, #13
 8001a8a:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fb03 f303 	mul.w	r3, r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <get_pressure+0xb0>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <get_pressure+0xc0>
 8001aaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <get_pressure+0xd2>
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	109b      	asrs	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	0bdb      	lsrs	r3, r3, #15
 8001ad6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aea:	410a      	asrs	r2, r1
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db06      	blt.n	8001b06 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005a      	lsls	r2, r3, #1
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e005      	b.n	8001b12 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <get_pressure+0x12a>
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	121b      	asrs	r3, r3, #8
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <get_pressure+0x136>
 8001b24:	33ff      	adds	r3, #255	; 0xff
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <get_pressure+0x152>
 8001b3c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	141b      	asrs	r3, r3, #16
 8001b44:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <get_pressure+0x198>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <get_pressure+0x168>
 8001b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	141b      	asrs	r3, r3, #16
 8001b5a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <get_pressure+0x17c>
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

	return p;
 8001b76:	69fb      	ldr	r3, [r7, #28]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	ffffe343 	.word	0xffffe343
 8001b8c:	00000000 	.word	0x00000000

08001b90 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <get_altitude+0xb8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb4:	ee16 0a90 	vmov	r0, s13
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001c38 <get_altitude+0xa8>
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f018 fc4e 	bl	801a468 <pow>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	491d      	ldr	r1, [pc, #116]	; (8001c4c <get_altitude+0xbc>)
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <get_altitude+0xb0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f818 	bl	8000c28 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <get_altitude+0xc0>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d908      	bls.n	8001c20 <get_altitude+0x90>
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c54 <get_altitude+0xc4>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db03      	blt.n	8001c28 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	ccd9456c 	.word	0xccd9456c
 8001c3c:	3fc85b95 	.word	0x3fc85b95
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40e5a540 	.word	0x40e5a540
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	c3fa0000 	.word	0xc3fa0000
 8001c54:	460ca000 	.word	0x460ca000

08001c58 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_i2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get_slp+0x80>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cdc <get_slp+0x84>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001cd0 <get_slp+0x78>
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f018 fbe3 	bl	801a468 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ffb7 	bl	8000c28 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

	return slp;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
}
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	4015051e 	.word	0x4015051e
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	472d2a00 	.word	0x472d2a00

08001ce0 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b095      	sub	sp, #84	; 0x54
 8001ce4:	af0e      	add	r7, sp, #56	; 0x38
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001cea:	f7ff fdb3 	bl	8001854 <get_ut>
 8001cee:	ee07 0a90 	vmov	s15, r0
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff fdd3 	bl	80018a8 <get_temp>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d10:	f7ff fe2c 	bl	800196c <get_up>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001d1a:	683e      	ldr	r6, [r7, #0]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d36:	f7ff fe5b 	bl	80019f0 <get_pressure>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001d40:	6838      	ldr	r0, [r7, #0]
 8001d42:	f7ff ff89 	bl	8001c58 <get_slp>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff ff1d 	bl	8001b90 <get_altitude>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	617b      	str	r3, [r7, #20]
	return result;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d90 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001d9c:	e0ad      	b.n	8001efa <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	440b      	add	r3, r1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4959      	ldr	r1, [pc, #356]	; (8001f10 <initButtons+0x180>)
 8001dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4955      	ldr	r1, [pc, #340]	; (8001f14 <initButtons+0x184>)
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	7993      	ldrb	r3, [r2, #6]
 8001dd2:	f36f 0300 	bfc	r3, #0, #1
 8001dd6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	7993      	ldrb	r3, [r2, #6]
 8001de4:	f36f 0341 	bfc	r3, #1, #1
 8001de8:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	f67f af4e 	bls.w	8001d9e <initButtons+0xe>
	}
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	20000020 	.word	0x20000020
 8001f14:	20000008 	.word	0x20000008

08001f18 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8001f22:	e044      	b.n	8001fae <resetButtonHandlers+0x96>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
		// new handlers
		btnsPtrs[i]->onPress = NULL;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
		btnsPtrs[i]->onRelease = NULL;
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
		btnsPtrs[i]->onShortPress = NULL;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	2200      	movs	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
		btnsPtrs[i]->onLongPress = NULL;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
		btnsPtrs[i]->onContinuousPress = NULL;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
		btnsPtrs[i]->onRepeatedPress = NULL;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <resetButtonHandlers+0xac>)
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40

		i++;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	3301      	adds	r3, #1
 8001fac:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d9b7      	bls.n	8001f24 <resetButtonHandlers+0xc>
	}
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000002c 	.word	0x2000002c

08001fc8 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	889b      	ldrh	r3, [r3, #4]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f009 fbf6 	bl	800b7cc <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <scanButton>:

void scanButton(Button* btn){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	799b      	ldrb	r3, [r3, #6]
 8002000:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	b2d9      	uxtb	r1, r3
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	7993      	ldrb	r3, [r2, #6]
 8002014:	f361 0300 	bfi	r3, r1, #0, #1
 8002018:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffd4 	bl	8001fc8 <readButton>
 8002020:	4603      	mov	r3, r0
 8002022:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	b2d9      	uxtb	r1, r3
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	7993      	ldrb	r3, [r2, #6]
 8002030:	f361 0341 	bfi	r3, r1, #1, #1
 8002034:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8002036:	7bba      	ldrb	r2, [r7, #14]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	429a      	cmp	r2, r3
 800203c:	d158      	bne.n	80020f0 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d14e      	bne.n	80020e2 <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204a:	3301      	adds	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7a9b      	ldrb	r3, [r3, #10]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2000      	movs	r0, #0
 800206e:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7a9b      	ldrb	r3, [r3, #10]
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <scanButton+0x17c>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d32d      	bcc.n	80020da <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b5b      	ldrb	r3, [r3, #13]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d110      	bne.n	80020a8 <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2000      	movs	r0, #0
 8002094:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7a5b      	ldrb	r3, [r3, #9]
 800209a:	3301      	adds	r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7a9b      	ldrb	r3, [r3, #10]
 80020ac:	4a30      	ldr	r2, [pc, #192]	; (8002170 <scanButton+0x17c>)
 80020ae:	8852      	ldrh	r2, [r2, #2]
 80020b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80020b4:	fb01 f202 	mul.w	r2, r1, r2
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2000      	movs	r0, #0
 80020cc:	4798      	blx	r3
					}
					btn->longContinuous++;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7adb      	ldrb	r3, [r3, #11]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 80020e0:	e042      	b.n	8002168 <scanButton+0x174>
			btn->shortSingleHandled = 0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	735a      	strb	r2, [r3, #13]
}
 80020ee:	e03b      	b.n	8002168 <scanButton+0x174>
		if(currStatus == 1){
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11f      	bne.n	8002136 <scanButton+0x142>
			btn->shortContinuous = 0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7b1b      	ldrb	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12e      	bne.n	8002168 <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <scanButton+0x12e>
					pulseVib(5, 75);
 8002112:	214b      	movs	r1, #75	; 0x4b
 8002114:	2005      	movs	r0, #5
 8002116:	f003 f8f3 	bl	8005300 <pulseVib>
					btn->onSinglePressHandler(NULL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2000      	movs	r0, #0
 8002120:	4798      	blx	r3
				btn->shortSingleOn++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	79db      	ldrb	r3, [r3, #7]
 8002126:	3301      	adds	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	731a      	strb	r2, [r3, #12]
}
 8002134:	e018      	b.n	8002168 <scanButton+0x174>
			if(btn->releaseHandled == 0){
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b9b      	ldrb	r3, [r3, #14]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d114      	bne.n	8002168 <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2000      	movs	r0, #0
 800214c:	4798      	blx	r3
				btn->pressedFor = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7a1b      	ldrb	r3, [r3, #8]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	739a      	strb	r2, [r3, #14]
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000044 	.word	0x20000044

08002174 <scanButtons>:


void scanButtons(Button* btns[6]){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8002180:	e00a      	b.n	8002198 <scanButtons+0x24>
		scanButton(btns[i]);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <scanButton>
		i++;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d9f1      	bls.n	8002182 <scanButtons+0xe>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	791b      	ldrb	r3, [r3, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <setTimer>:

void setTimer(countdown_t *cnt, uint16_t seconds){
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
	cnt->setpoint = seconds;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	801a      	strh	r2, [r3, #0]
	cnt->isRunning = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	711a      	strb	r2, [r3, #4]
	cnt->remainingSec = seconds;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	805a      	strh	r2, [r3, #2]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <startTimer>:
void startTimer(countdown_t *cnt){
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	711a      	strb	r2, [r3, #4]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <pauseTimer>:
void pauseTimer(countdown_t *cnt){
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	711a      	strb	r2, [r3, #4]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <resetTimer>:
void resetTimer(countdown_t *cnt){
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	711a      	strb	r2, [r3, #4]
	cnt->remainingSec = cnt->setpoint;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	805a      	strh	r2, [r3, #2]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	; 0x38
 8002244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <MX_GPIO_Init+0x1e4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <MX_GPIO_Init+0x1e4>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b68      	ldr	r3, [pc, #416]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	4b64      	ldr	r3, [pc, #400]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a63      	ldr	r2, [pc, #396]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b61      	ldr	r3, [pc, #388]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b5a      	ldr	r3, [pc, #360]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b56      	ldr	r3, [pc, #344]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a55      	ldr	r2, [pc, #340]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <MX_GPIO_Init+0x1e4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b48      	ldr	r3, [pc, #288]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a47      	ldr	r2, [pc, #284]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a40      	ldr	r2, [pc, #256]	; (8002424 <MX_GPIO_Init+0x1e4>)
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <MX_GPIO_Init+0x1e4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	483b      	ldr	r0, [pc, #236]	; (8002428 <MX_GPIO_Init+0x1e8>)
 800233c:	f009 fa5e 	bl	800b7fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	f244 0181 	movw	r1, #16513	; 0x4081
 8002346:	4839      	ldr	r0, [pc, #228]	; (800242c <MX_GPIO_Init+0x1ec>)
 8002348:	f009 fa58 	bl	800b7fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	4837      	ldr	r0, [pc, #220]	; (8002430 <MX_GPIO_Init+0x1f0>)
 8002352:	f009 fa53 	bl	800b7fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800235c:	4835      	ldr	r0, [pc, #212]	; (8002434 <MX_GPIO_Init+0x1f4>)
 800235e:	f009 fa4d 	bl	800b7fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002362:	2340      	movs	r3, #64	; 0x40
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	2301      	movs	r3, #1
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	4619      	mov	r1, r3
 8002378:	482b      	ldr	r0, [pc, #172]	; (8002428 <MX_GPIO_Init+0x1e8>)
 800237a:	f009 f87b 	bl	800b474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800237e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	4825      	ldr	r0, [pc, #148]	; (800242c <MX_GPIO_Init+0x1ec>)
 8002398:	f009 f86c 	bl	800b474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 800239c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023a2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	4821      	ldr	r0, [pc, #132]	; (8002438 <MX_GPIO_Init+0x1f8>)
 80023b4:	f009 f85e 	bl	800b474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4818      	ldr	r0, [pc, #96]	; (8002430 <MX_GPIO_Init+0x1f0>)
 80023d0:	f009 f850 	bl	800b474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4812      	ldr	r0, [pc, #72]	; (8002430 <MX_GPIO_Init+0x1f0>)
 80023e8:	f009 f844 	bl	800b474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80023ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	480b      	ldr	r0, [pc, #44]	; (8002434 <MX_GPIO_Init+0x1f4>)
 8002406:	f009 f835 	bl	800b474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	2028      	movs	r0, #40	; 0x28
 8002410:	f008 ff73 	bl	800b2fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002414:	2028      	movs	r0, #40	; 0x28
 8002416:	f008 ff8c 	bl	800b332 <HAL_NVIC_EnableIRQ>

}
 800241a:	bf00      	nop
 800241c:	3738      	adds	r7, #56	; 0x38
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40021800 	.word	0x40021800
 8002434:	40020800 	.word	0x40020800
 8002438:	40021000 	.word	0x40021000

0800243c <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b2f      	cmp	r3, #47	; 0x2f
 800244e:	bf8c      	ite	hi
 8002450:	2301      	movhi	r3, #1
 8002452:	2300      	movls	r3, #0
 8002454:	b2da      	uxtb	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b39      	cmp	r3, #57	; 0x39
 800245c:	bf94      	ite	ls
 800245e:	2301      	movls	r3, #1
 8002460:	2300      	movhi	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4013      	ands	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <hexCharToInt+0x3a>
		msb = *value - 48;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	3b30      	subs	r3, #48	; 0x30
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e003      	b.n	800247e <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3b37      	subs	r3, #55	; 0x37
 800247c:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3301      	adds	r3, #1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b2f      	cmp	r3, #47	; 0x2f
 800248a:	bf8c      	ite	hi
 800248c:	2301      	movhi	r3, #1
 800248e:	2300      	movls	r3, #0
 8002490:	b2da      	uxtb	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b39      	cmp	r3, #57	; 0x39
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4013      	ands	r3, r2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3301      	adds	r3, #1
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b30      	subs	r3, #48	; 0x30
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e004      	b.n	80024c0 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3b37      	subs	r3, #55	; 0x37
 80024be:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
	return(result)
 80024ca:	68fb      	ldr	r3, [r7, #12]
;}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80024e8:	4619      	mov	r1, r3
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <getDataFromUart+0x20>)
 80024ec:	f00d fe8f 	bl	801020e <HAL_UART_Receive_DMA>

}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20005d2c 	.word	0x20005d2c

080024fc <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002502:	af00      	add	r7, sp, #0
 8002504:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002508:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800250c:	6018      	str	r0, [r3, #0]
 800250e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002512:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002516:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002518:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800251c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002520:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002524:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	3304      	adds	r3, #4
 8002532:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f013 fc1a 	bl	8015d72 <strncpy>
	gpsModule.getData = &getDataFromUart;
 800253e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002542:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <initGps+0x90>)
 8002548:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 800254c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002550:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 800255a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800255e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002568:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f44f 7319 	mov.w	r3, #612	; 0x264
 8002574:	461a      	mov	r2, r3
 8002576:	f012 fa27 	bl	80149c8 <memcpy>
}
 800257a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800257e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	080024d9 	.word	0x080024d9

08002590 <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <strtoke+0x1a>
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <strtoke+0x60>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <strtoke+0x60>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <strtoke+0x26>
 80025b2:	2300      	movs	r3, #0
 80025b4:	e017      	b.n	80025e6 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <strtoke+0x60>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <strtoke+0x60>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f013 fbe8 	bl	8015d98 <strpbrk>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <strtoke+0x60>)
 80025cc:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <strtoke+0x60>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <strtoke+0x54>
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <strtoke+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <strtoke+0x60>)
 80025de:	600a      	str	r2, [r1, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20002710 	.word	0x20002710

080025f4 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002604:	e009      	b.n	800261a <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	4053      	eors	r3, r2
 8002612:	73fb      	strb	r3, [r7, #15]
		i++;
 8002614:	7bbb      	ldrb	r3, [r7, #14]
 8002616:	3301      	adds	r3, #1
 8002618:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 800261a:	7bbb      	ldrb	r3, [r7, #14]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b2a      	cmp	r3, #42	; 0x2a
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2da      	uxtb	r2, r3
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	440b      	add	r3, r1
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4013      	ands	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1df      	bne.n	8002606 <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	3301      	adds	r3, #1
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fef4 	bl	800243c <hexCharToInt>
 8002654:	4602      	mov	r2, r0
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	429a      	cmp	r2, r3
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <getMessage+0x68>)
 8002686:	4413      	add	r3, r2
 8002688:	4619      	mov	r1, r3
 800268a:	68b8      	ldr	r0, [r7, #8]
 800268c:	f013 fb9e 	bl	8015dcc <strstr>
 8002690:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <getMessage+0x30>
 8002698:	2300      	movs	r3, #0
 800269a:	e016      	b.n	80026ca <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <getMessage+0x6c>)
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f014 f9d8 	bl	8016a54 <strtok>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <getMessage+0x42>
 80026aa:	2300      	movs	r3, #0
 80026ac:	e00d      	b.n	80026ca <getMessage+0x5e>
	if(validateChecksum(start)){
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ffa0 	bl	80025f4 <validateChecksum>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <getMessage+0x5c>
		return strcpy(destination,start);
 80026ba:	6979      	ldr	r1, [r7, #20]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f013 fb50 	bl	8015d62 <strcpy>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e000      	b.n	80026ca <getMessage+0x5e>
	} else {
		return NULL;
 80026c8:	2300      	movs	r3, #0
	}
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0801e068 	.word	0x0801e068
 80026d8:	0801ce6c 	.word	0x0801ce6c

080026dc <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026e8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80026ec:	6018      	str	r0, [r3, #0]
 80026ee:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026f2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026f6:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 80026f8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026fc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8002708:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800270c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1d19      	adds	r1, r3, #4
 8002714:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002718:	f44f 7216 	mov.w	r2, #600	; 0x258
 800271c:	4618      	mov	r0, r3
 800271e:	f013 fb28 	bl	8015d72 <strncpy>
	dev->isReady = 1;
 8002722:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002726:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 8002732:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	2200      	movs	r2, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff95 	bl	800266c <getMessage>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d113      	bne.n	8002770 <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 8002748:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800274c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a06      	ldr	r2, [pc, #24]	; (800276c <getLocation+0x90>)
 8002754:	461d      	mov	r5, r3
 8002756:	4614      	mov	r4, r2
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	6028      	str	r0, [r5, #0]
 800275c:	6069      	str	r1, [r5, #4]
 800275e:	60aa      	str	r2, [r5, #8]
 8002760:	60eb      	str	r3, [r5, #12]
 8002762:	7823      	ldrb	r3, [r4, #0]
 8002764:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 8002766:	2300      	movs	r3, #0
 8002768:	e1ff      	b.n	8002b6a <getLocation+0x48e>
 800276a:	bf00      	nop
 800276c:	0801ce74 	.word	0x0801ce74
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 8002770:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002774:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f107 020c 	add.w	r2, r7, #12
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f013 faee 	bl	8015d62 <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	49dd      	ldr	r1, [pc, #884]	; (8002b00 <getLocation+0x424>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff feff 	bl	8002590 <strtoke>
 8002792:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 8002796:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800279a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027a4:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027a8:	4618      	mov	r0, r3
 80027aa:	f013 fada 	bl	8015d62 <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 80027ae:	49d4      	ldr	r1, [pc, #848]	; (8002b00 <getLocation+0x424>)
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff feed 	bl	8002590 <strtoke>
 80027b6:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 80027ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027be:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80027c8:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 fac8 	bl	8015d62 <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 80027d2:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80027d6:	f012 f8a6 	bl	8014926 <atoi>
 80027da:	4603      	mov	r3, r0
 80027dc:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 80027e0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80027e4:	4ac7      	ldr	r2, [pc, #796]	; (8002b04 <getLocation+0x428>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0b5a      	lsrs	r2, r3, #13
 80027ec:	4bc6      	ldr	r3, [pc, #792]	; (8002b08 <getLocation+0x42c>)
 80027ee:	fba3 1302 	umull	r1, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2164      	movs	r1, #100	; 0x64
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002802:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 800280c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002810:	4abd      	ldr	r2, [pc, #756]	; (8002b08 <getLocation+0x42c>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095a      	lsrs	r2, r3, #5
 8002818:	4bbb      	ldr	r3, [pc, #748]	; (8002b08 <getLocation+0x42c>)
 800281a:	fba3 1302 	umull	r1, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2164      	movs	r1, #100	; 0x64
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	b2da      	uxtb	r2, r3
 800282a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800282e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 8002838:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800283c:	4bb2      	ldr	r3, [pc, #712]	; (8002b08 <getLocation+0x42c>)
 800283e:	fba3 1302 	umull	r1, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2164      	movs	r1, #100	; 0x64
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b2da      	uxtb	r2, r3
 800284e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002852:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 800285c:	49a8      	ldr	r1, [pc, #672]	; (8002b00 <getLocation+0x424>)
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff fe96 	bl	8002590 <strtoke>
 8002864:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 8002868:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800286c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002876:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800287a:	4618      	mov	r0, r3
 800287c:	f013 fa71 	bl	8015d62 <strcpy>
	double latitude = atof(parsePointer);
 8002880:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002884:	f012 f84c 	bl	8014920 <atof>
 8002888:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b9e      	ldr	r3, [pc, #632]	; (8002b0c <getLocation+0x430>)
 8002892:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002896:	f7fd fff9 	bl	800088c <__aeabi_ddiv>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f9a1 	bl	8000be8 <__aeabi_d2uiz>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028ae:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 80028b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028bc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80028c6:	461a      	mov	r2, r3
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe48 	bl	8000564 <__aeabi_i2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80028dc:	f7fd fcf4 	bl	80002c8 <__aeabi_dsub>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80028e8:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 80028ec:	6809      	ldr	r1, [r1, #0]
 80028ee:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 80028f2:	4983      	ldr	r1, [pc, #524]	; (8002b00 <getLocation+0x424>)
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7ff fe4b 	bl	8002590 <strtoke>
 80028fa:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 80028fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002902:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800290c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002910:	4618      	mov	r0, r3
 8002912:	f013 fa26 	bl	8015d62 <strcpy>
	position->n_s = *parsePointer;
 8002916:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002920:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 800292a:	4975      	ldr	r1, [pc, #468]	; (8002b00 <getLocation+0x424>)
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff fe2f 	bl	8002590 <strtoke>
 8002932:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 8002936:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800293a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002944:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002948:	4618      	mov	r0, r3
 800294a:	f013 fa0a 	bl	8015d62 <strcpy>
	double longitude = atof(parsePointer);
 800294e:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002952:	f011 ffe5 	bl	8014920 <atof>
 8002956:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <getLocation+0x430>)
 8002960:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8002964:	f7fd ff92 	bl	800088c <__aeabi_ddiv>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f93a 	bl	8000be8 <__aeabi_d2uiz>
 8002974:	4603      	mov	r3, r0
 8002976:	b2da      	uxtb	r2, r3
 8002978:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800297c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 8002986:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800298a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8002994:	461a      	mov	r2, r3
 8002996:	2364      	movs	r3, #100	; 0x64
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fde1 	bl	8000564 <__aeabi_i2d>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80029aa:	f7fd fc8d 	bl	80002c8 <__aeabi_dsub>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80029b6:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 80029c0:	494f      	ldr	r1, [pc, #316]	; (8002b00 <getLocation+0x424>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fde4 	bl	8002590 <strtoke>
 80029c8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 80029cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029d0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80029da:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029de:	4618      	mov	r0, r3
 80029e0:	f013 f9bf 	bl	8015d62 <strcpy>
	position->w_e = *parsePointer;
 80029e4:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029ee:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 80029f8:	4941      	ldr	r1, [pc, #260]	; (8002b00 <getLocation+0x424>)
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fdc8 	bl	8002590 <strtoke>
 8002a00:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 8002a04:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a08:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002a12:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a16:	4618      	mov	r0, r3
 8002a18:	f013 f9a3 	bl	8015d62 <strcpy>
	if(*parsePointer=='0'){
 8002a1c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b30      	cmp	r3, #48	; 0x30
 8002a24:	d007      	beq.n	8002a36 <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 8002a26:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a2a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 8002a36:	4932      	ldr	r1, [pc, #200]	; (8002b00 <getLocation+0x424>)
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff fda9 	bl	8002590 <strtoke>
 8002a3e:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 8002a42:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a46:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002a50:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a54:	4618      	mov	r0, r3
 8002a56:	f013 f984 	bl	8015d62 <strcpy>
	position->satNum = atoi(parsePointer);
 8002a5a:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002a5e:	f011 ff62 	bl	8014926 <atoi>
 8002a62:	4603      	mov	r3, r0
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a6a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 8002a74:	4922      	ldr	r1, [pc, #136]	; (8002b00 <getLocation+0x424>)
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fd8a 	bl	8002590 <strtoke>
 8002a7c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 8002a80:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a84:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8002a8e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a92:	4618      	mov	r0, r3
 8002a94:	f013 f965 	bl	8015d62 <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 8002a98:	4919      	ldr	r1, [pc, #100]	; (8002b00 <getLocation+0x424>)
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff fd78 	bl	8002590 <strtoke>
 8002aa0:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 8002aa4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002aa8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8002ab2:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f013 f953 	bl	8015d62 <strcpy>
	position->elevation = atof(parsePointer);
 8002abc:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002ac0:	f011 ff2e 	bl	8014920 <atof>
 8002ac4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ac8:	eef0 7a60 	vmov.f32	s15, s1
 8002acc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002ad0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 8002ada:	4909      	ldr	r1, [pc, #36]	; (8002b00 <getLocation+0x424>)
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff fd57 	bl	8002590 <strtoke>
 8002ae2:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 8002ae6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002aea:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002af4:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002af8:	4618      	mov	r0, r3
 8002afa:	f013 f932 	bl	8015d62 <strcpy>
 8002afe:	e007      	b.n	8002b10 <getLocation+0x434>
 8002b00:	0801ce70 	.word	0x0801ce70
 8002b04:	d1b71759 	.word	0xd1b71759
 8002b08:	51eb851f 	.word	0x51eb851f
 8002b0c:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 8002b10:	4918      	ldr	r1, [pc, #96]	; (8002b74 <getLocation+0x498>)
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fd3c 	bl	8002590 <strtoke>
 8002b18:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 8002b1c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002b20:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8002b2a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f013 f917 	bl	8015d62 <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 8002b34:	490f      	ldr	r1, [pc, #60]	; (8002b74 <getLocation+0x498>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fd2a 	bl	8002590 <strtoke>
 8002b3c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 8002b40:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002b44:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002b4e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002b52:	4618      	mov	r0, r3
 8002b54:	f013 f905 	bl	8015d62 <strcpy>

	//	mark position as valid
	position->isValid = 1;
 8002b58:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002b5c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bdb0      	pop	{r4, r5, r7, pc}
 8002b74:	0801ce70 	.word	0x0801ce70

08002b78 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	if(position>0){
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <prevPos+0x2c>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <prevPos+0x1a>
		position--;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <prevPos+0x2c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <prevPos+0x2c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002b90:	e002      	b.n	8002b98 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <prevPos+0x2c>)
 8002b94:	220b      	movs	r2, #11
 8002b96:	701a      	strb	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000048 	.word	0x20000048

08002ba8 <nextPos>:

void nextPos(void){
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <nextPos+0x2c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b0a      	cmp	r3, #10
 8002bb2:	d806      	bhi.n	8002bc2 <nextPos+0x1a>
		position++;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <nextPos+0x2c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <nextPos+0x2c>)
 8002bbe:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002bc0:	e002      	b.n	8002bc8 <nextPos+0x20>
		position=0;
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <nextPos+0x2c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000048 	.word	0x20000048

08002bd8 <nextScreen>:

void nextScreen(void){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	nextPos();
 8002bdc:	f7ff ffe4 	bl	8002ba8 <nextPos>
	applySelectedScreen();
 8002be0:	f000 f82c 	bl	8002c3c <applySelectedScreen>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prevScreen>:
void prevScreen(void){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	prevPos();
 8002bec:	f7ff ffc4 	bl	8002b78 <prevPos>
	applySelectedScreen();
 8002bf0:	f000 f824 	bl	8002c3c <applySelectedScreen>
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <resetPos>:
void resetPos(void){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	position=0;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <resetPos+0x14>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002c02:	f000 f81b 	bl	8002c3c <applySelectedScreen>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000048 	.word	0x20000048

08002c10 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <guiApplyView+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <guiApplyView+0x28>)
 8002c26:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002c28:	f000 f830 	bl	8002c8c <selectScreen>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000050 	.word	0x20000050
 8002c38:	2000004c 	.word	0x2000004c

08002c3c <applySelectedScreen>:

void applySelectedScreen(void){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <applySelectedScreen+0x40>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <applySelectedScreen+0x44>)
 8002c48:	460b      	mov	r3, r1
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	3320      	adds	r3, #32
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <applySelectedScreen+0x48>)
 8002c58:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <applySelectedScreen+0x40>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <applySelectedScreen+0x44>)
 8002c62:	460b      	mov	r3, r1
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3324      	adds	r3, #36	; 0x24
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <applySelectedScreen+0x4c>)
 8002c72:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002c74:	f000 f80a 	bl	8002c8c <selectScreen>
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000048 	.word	0x20000048
 8002c80:	0801e0a0 	.word	0x0801e0a0
 8002c84:	20000050 	.word	0x20000050
 8002c88:	2000004c 	.word	0x2000004c

08002c8c <selectScreen>:

void selectScreen(void){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002c90:	f7ff f942 	bl	8001f18 <resetButtonHandlers>
	isModuleSet = 0;
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <selectScreen+0x1c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <selectScreen+0x20>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <selectScreen+0x24>)
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20002714 	.word	0x20002714
 8002cac:	2000004c 	.word	0x2000004c
 8002cb0:	20000054 	.word	0x20000054

08002cb4 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <showGui+0x2c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <showGui+0x18>
		moduleSetupPtr();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <showGui+0x30>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4798      	blx	r3
		isModuleSet = 1;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <showGui+0x2c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <showGui+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <showGui+0x26>
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <showGui+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4798      	blx	r3
//	lcdRefresh();
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20002714 	.word	0x20002714
 8002ce4:	20000050 	.word	0x20000050
 8002ce8:	20000054 	.word	0x20000054

08002cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <MX_I2C1_Init+0x78>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <MX_I2C1_Init+0x7c>)
 8002cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d2a:	f008 fdbf 	bl	800b8ac <HAL_I2C_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d34:	f001 fc28 	bl	8004588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4809      	ldr	r0, [pc, #36]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d3c:	f009 fd75 	bl	800c82a <HAL_I2CEx_ConfigAnalogFilter>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002d46:	f001 fc1f 	bl	8004588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <MX_I2C1_Init+0x74>)
 8002d4e:	f009 fda8 	bl	800c8a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002d58:	f001 fc16 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20002718 	.word	0x20002718
 8002d64:	40005400 	.word	0x40005400
 8002d68:	000186a0 	.word	0x000186a0

08002d6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_I2C_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db0:	2312      	movs	r3, #18
 8002db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	480c      	ldr	r0, [pc, #48]	; (8002df8 <HAL_I2C_MspInit+0x8c>)
 8002dc8:	f008 fb54 	bl	800b474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dda:	6413      	str	r3, [r2, #64]	; 0x40
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_I2C_MspInit+0x88>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40005400 	.word	0x40005400
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400

08002dfc <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002e06:	2307      	movs	r3, #7
 8002e08:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002e16:	e010      	b.n	8002e3a <reverse_uint8+0x3e>
		result = result << 1;
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002e2c:	7bba      	ldrb	r2, [r7, #14]
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	73bb      	strb	r3, [r7, #14]
		times--;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1eb      	bne.n	8002e18 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f000 f824 	bl	8002ea4 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	e014      	b.n	8002e8c <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002e62:	2300      	movs	r3, #0
 8002e64:	80bb      	strh	r3, [r7, #4]
 8002e66:	e00b      	b.n	8002e80 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2232      	movs	r2, #50	; 0x32
 8002e6c:	fb03 f202 	mul.w	r2, r3, r2
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <lcdClearBuffer+0x50>)
 8002e76:	21ff      	movs	r1, #255	; 0xff
 8002e78:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002e7a:	88bb      	ldrh	r3, [r7, #4]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	80bb      	strh	r3, [r7, #4]
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	2b31      	cmp	r3, #49	; 0x31
 8002e84:	d9f0      	bls.n	8002e68 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	71fb      	strb	r3, [r7, #7]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2bef      	cmp	r3, #239	; 0xef
 8002e90:	d9e7      	bls.n	8002e62 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 f806 	bl	8002ea4 <updateSetting>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20002770 	.word	0x20002770

08002ea4 <updateSetting>:

void updateSetting(uint8_t state){
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002eae:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <updateSetting+0x1c>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	7013      	strb	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	20000058 	.word	0x20000058

08002ec4 <lcdPutPix>:

void lcdPutPix(uint16_t x, uint8_t y, uint8_t val){
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	717b      	strb	r3, [r7, #5]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	713b      	strb	r3, [r7, #4]
	uint8_t xBlock = x/8;
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	73bb      	strb	r3, [r7, #14]
	uint8_t finalVal = lcdBuffer[y*SCR_W/8 + xBlock];
 8002ede:	797b      	ldrb	r3, [r7, #5]
 8002ee0:	2232      	movs	r2, #50	; 0x32
 8002ee2:	fb03 f202 	mul.w	r2, r3, r2
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <lcdPutPix+0x98>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (1 << (8 - x%8 - 1));
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2201      	movs	r2, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	737b      	strb	r3, [r7, #13]
	switch(val){
 8002f00:	793b      	ldrb	r3, [r7, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d015      	beq.n	8002f32 <lcdPutPix+0x6e>
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	dc18      	bgt.n	8002f3c <lcdPutPix+0x78>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <lcdPutPix+0x50>
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d005      	beq.n	8002f1e <lcdPutPix+0x5a>
 8002f12:	e013      	b.n	8002f3c <lcdPutPix+0x78>
	case 0:
		finalVal |= offset;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	73fb      	strb	r3, [r7, #15]
		break;
 8002f1c:	e00e      	b.n	8002f3c <lcdPutPix+0x78>
	case 1:
		finalVal &= ~offset;
 8002f1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	b25a      	sxtb	r2, r3
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	73fb      	strb	r3, [r7, #15]
		break;
 8002f30:	e004      	b.n	8002f3c <lcdPutPix+0x78>
	case 2:
		finalVal ^= offset;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	7b7b      	ldrb	r3, [r7, #13]
 8002f36:	4053      	eors	r3, r2
 8002f38:	73fb      	strb	r3, [r7, #15]
		break;
 8002f3a:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
 8002f3c:	797b      	ldrb	r3, [r7, #5]
 8002f3e:	2232      	movs	r2, #50	; 0x32
 8002f40:	fb03 f202 	mul.w	r2, r3, r2
 8002f44:	7bbb      	ldrb	r3, [r7, #14]
 8002f46:	4413      	add	r3, r2
 8002f48:	4904      	ldr	r1, [pc, #16]	; (8002f5c <lcdPutPix+0x98>)
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	54ca      	strb	r2, [r1, r3]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20002770 	.word	0x20002770

08002f60 <lcdPutChar>:

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4603      	mov	r3, r0
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	717b      	strb	r3, [r7, #5]
 8002f70:	4613      	mov	r3, r2
 8002f72:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	793a      	ldrb	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d304      	bcc.n	8002f88 <lcdPutChar+0x28>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	799b      	ldrb	r3, [r3, #6]
 8002f82:	793a      	ldrb	r2, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d902      	bls.n	8002f8e <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	79db      	ldrb	r3, [r3, #7]
 8002f8c:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	08db      	lsrs	r3, r3, #3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	885b      	ldrh	r3, [r3, #2]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fae:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	75fb      	strb	r3, [r7, #23]
 8002fb4:	e09b      	b.n	80030ee <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002fb6:	797a      	ldrb	r2, [r7, #5]
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	0091      	lsls	r1, r2, #2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4413      	add	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002fda:	793b      	ldrb	r3, [r7, #4]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	7952      	ldrb	r2, [r2, #5]
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	8852      	ldrh	r2, [r2, #2]
 8002fe6:	fb03 f202 	mul.w	r2, r3, r2
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	7cb9      	ldrb	r1, [r7, #18]
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	7d3b      	ldrb	r3, [r7, #20]
 8003004:	fa42 f303 	asr.w	r3, r2, r3
 8003008:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800300a:	8a3b      	ldrh	r3, [r7, #16]
 800300c:	4a3e      	ldr	r2, [pc, #248]	; (8003108 <lcdPutChar+0x1a8>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	b25a      	sxtb	r2, r3
 8003012:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003016:	43db      	mvns	r3, r3
 8003018:	b25b      	sxtb	r3, r3
 800301a:	4013      	ands	r3, r2
 800301c:	b25a      	sxtb	r2, r3
 800301e:	8a3b      	ldrh	r3, [r7, #16]
 8003020:	b2d1      	uxtb	r1, r2
 8003022:	4a39      	ldr	r2, [pc, #228]	; (8003108 <lcdPutChar+0x1a8>)
 8003024:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	3308      	adds	r3, #8
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b25a      	sxtb	r2, r3
 8003032:	7d3b      	ldrb	r3, [r7, #20]
 8003034:	f1c3 0308 	rsb	r3, r3, #8
 8003038:	21ff      	movs	r1, #255	; 0xff
 800303a:	fa41 f303 	asr.w	r3, r1, r3
 800303e:	b25b      	sxtb	r3, r3
 8003040:	4013      	ands	r3, r2
 8003042:	b25b      	sxtb	r3, r3
 8003044:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8003046:	2301      	movs	r3, #1
 8003048:	757b      	strb	r3, [r7, #21]
 800304a:	e029      	b.n	80030a0 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 800304c:	7d7a      	ldrb	r2, [r7, #21]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	4413      	add	r3, r2
 8003056:	7a1b      	ldrb	r3, [r3, #8]
 8003058:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 800305a:	8a3a      	ldrh	r2, [r7, #16]
 800305c:	7d7b      	ldrb	r3, [r7, #21]
 800305e:	4413      	add	r3, r2
 8003060:	4a29      	ldr	r2, [pc, #164]	; (8003108 <lcdPutChar+0x1a8>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	b25a      	sxtb	r2, r3
 8003066:	7db9      	ldrb	r1, [r7, #22]
 8003068:	7d3b      	ldrb	r3, [r7, #20]
 800306a:	f1c3 0308 	rsb	r3, r3, #8
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	b259      	sxtb	r1, r3
 8003074:	7af8      	ldrb	r0, [r7, #11]
 8003076:	7d3b      	ldrb	r3, [r7, #20]
 8003078:	fa40 f303 	asr.w	r3, r0, r3
 800307c:	b25b      	sxtb	r3, r3
 800307e:	430b      	orrs	r3, r1
 8003080:	b25b      	sxtb	r3, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	b25b      	sxtb	r3, r3
 8003086:	4013      	ands	r3, r2
 8003088:	b259      	sxtb	r1, r3
 800308a:	8a3a      	ldrh	r2, [r7, #16]
 800308c:	7d7b      	ldrb	r3, [r7, #21]
 800308e:	4413      	add	r3, r2
 8003090:	b2c9      	uxtb	r1, r1
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <lcdPutChar+0x1a8>)
 8003094:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800309a:	7d7b      	ldrb	r3, [r7, #21]
 800309c:	3301      	adds	r3, #1
 800309e:	757b      	strb	r3, [r7, #21]
 80030a0:	7d7a      	ldrb	r2, [r7, #21]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	3307      	adds	r3, #7
 80030a8:	10db      	asrs	r3, r3, #3
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dbce      	blt.n	800304c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 80030ae:	8a3a      	ldrh	r2, [r7, #16]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	3307      	adds	r3, #7
 80030b6:	10db      	asrs	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	4a13      	ldr	r2, [pc, #76]	; (8003108 <lcdPutChar+0x1a8>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	b25a      	sxtb	r2, r3
 80030c0:	7db9      	ldrb	r1, [r7, #22]
 80030c2:	7d3b      	ldrb	r3, [r7, #20]
 80030c4:	f1c3 0308 	rsb	r3, r3, #8
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	4013      	ands	r3, r2
 80030d4:	b259      	sxtb	r1, r3
 80030d6:	8a3a      	ldrh	r2, [r7, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3307      	adds	r3, #7
 80030de:	10db      	asrs	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	b2c9      	uxtb	r1, r1
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <lcdPutChar+0x1a8>)
 80030e6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	3301      	adds	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	7dfa      	ldrb	r2, [r7, #23]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f4ff af5e 	bcc.w	8002fb6 <lcdPutChar+0x56>
	}
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	20002770 	.word	0x20002770

0800310c <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	603a      	str	r2, [r7, #0]
 8003116:	80fb      	strh	r3, [r7, #6]
 8003118:	460b      	mov	r3, r1
 800311a:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3305      	adds	r3, #5
 800312c:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	b29b      	uxth	r3, r3
 800313e:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	885b      	ldrh	r3, [r3, #2]
 8003144:	461a      	mov	r2, r3
 8003146:	7efb      	ldrb	r3, [r7, #27]
 8003148:	fb92 f3f3 	sdiv	r3, r2, r3
 800314c:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 800314e:	2300      	movs	r3, #0
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e094      	b.n	800327e <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8003154:	797a      	ldrb	r2, [r7, #5]
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	4413      	add	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4413      	add	r3, r2
 8003162:	461a      	mov	r2, r3
 8003164:	0091      	lsls	r1, r2, #2
 8003166:	461a      	mov	r2, r3
 8003168:	460b      	mov	r3, r1
 800316a:	4413      	add	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	7cbb      	ldrb	r3, [r7, #18]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4413      	add	r3, r2
 8003176:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	7c7a      	ldrb	r2, [r7, #17]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	461a      	mov	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4413      	add	r3, r2
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	fa42 f303 	asr.w	r3, r2, r3
 8003190:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	4a40      	ldr	r2, [pc, #256]	; (8003298 <lcdPutIcon+0x18c>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	b25a      	sxtb	r2, r3
 800319a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800319e:	43db      	mvns	r3, r3
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	4013      	ands	r3, r2
 80031a4:	b25a      	sxtb	r2, r3
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	b2d1      	uxtb	r1, r2
 80031aa:	4a3b      	ldr	r2, [pc, #236]	; (8003298 <lcdPutIcon+0x18c>)
 80031ac:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	7c7a      	ldrb	r2, [r7, #17]
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b25a      	sxtb	r2, r3
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	f1c3 0308 	rsb	r3, r3, #8
 80031c6:	21ff      	movs	r1, #255	; 0xff
 80031c8:	fa41 f303 	asr.w	r3, r1, r3
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4013      	ands	r3, r2
 80031d0:	b25b      	sxtb	r3, r3
 80031d2:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 80031d4:	2301      	movs	r3, #1
 80031d6:	777b      	strb	r3, [r7, #29]
 80031d8:	e02d      	b.n	8003236 <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	7c7a      	ldrb	r2, [r7, #17]
 80031de:	fb03 f202 	mul.w	r2, r3, r2
 80031e2:	7f7b      	ldrb	r3, [r7, #29]
 80031e4:	4413      	add	r3, r2
 80031e6:	461a      	mov	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80031f0:	89fa      	ldrh	r2, [r7, #14]
 80031f2:	7f7b      	ldrb	r3, [r7, #29]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a28      	ldr	r2, [pc, #160]	; (8003298 <lcdPutIcon+0x18c>)
 80031f8:	5cd3      	ldrb	r3, [r2, r3]
 80031fa:	b25a      	sxtb	r2, r3
 80031fc:	7fb9      	ldrb	r1, [r7, #30]
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	f1c3 0308 	rsb	r3, r3, #8
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	b259      	sxtb	r1, r3
 800320a:	7b78      	ldrb	r0, [r7, #13]
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	fa40 f303 	asr.w	r3, r0, r3
 8003212:	b25b      	sxtb	r3, r3
 8003214:	430b      	orrs	r3, r1
 8003216:	b25b      	sxtb	r3, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	b25b      	sxtb	r3, r3
 800321c:	4013      	ands	r3, r2
 800321e:	b259      	sxtb	r1, r3
 8003220:	89fa      	ldrh	r2, [r7, #14]
 8003222:	7f7b      	ldrb	r3, [r7, #29]
 8003224:	4413      	add	r3, r2
 8003226:	b2c9      	uxtb	r1, r1
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <lcdPutIcon+0x18c>)
 800322a:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 800322c:	7b7b      	ldrb	r3, [r7, #13]
 800322e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8003230:	7f7b      	ldrb	r3, [r7, #29]
 8003232:	3301      	adds	r3, #1
 8003234:	777b      	strb	r3, [r7, #29]
 8003236:	7f3b      	ldrb	r3, [r7, #28]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	7f7a      	ldrb	r2, [r7, #29]
 800323e:	429a      	cmp	r2, r3
 8003240:	d9cb      	bls.n	80031da <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	7f3b      	ldrb	r3, [r7, #28]
 8003246:	3307      	adds	r3, #7
 8003248:	10db      	asrs	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <lcdPutIcon+0x18c>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	b25a      	sxtb	r2, r3
 8003252:	7fb9      	ldrb	r1, [r7, #30]
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	f1c3 0308 	rsb	r3, r3, #8
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	b25b      	sxtb	r3, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	b25b      	sxtb	r3, r3
 8003264:	4013      	ands	r3, r2
 8003266:	b259      	sxtb	r1, r3
 8003268:	89fa      	ldrh	r2, [r7, #14]
 800326a:	7f3b      	ldrb	r3, [r7, #28]
 800326c:	3307      	adds	r3, #7
 800326e:	10db      	asrs	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	b2c9      	uxtb	r1, r1
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <lcdPutIcon+0x18c>)
 8003276:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	3301      	adds	r3, #1
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	7ffa      	ldrb	r2, [r7, #31]
 8003280:	7efb      	ldrb	r3, [r7, #27]
 8003282:	429a      	cmp	r2, r3
 8003284:	f4ff af66 	bcc.w	8003154 <lcdPutIcon+0x48>
	}
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20002770 	.word	0x20002770

0800329c <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60ba      	str	r2, [r7, #8]
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	4603      	mov	r3, r0
 80032a8:	81fb      	strh	r3, [r7, #14]
 80032aa:	460b      	mov	r3, r1
 80032ac:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
 80032b2:	e015      	b.n	80032e0 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	fb12 f303 	smulbb	r3, r2, r3
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	89fb      	ldrh	r3, [r7, #14]
 80032c6:	4413      	add	r3, r2
 80032c8:	b298      	uxth	r0, r3
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	4413      	add	r3, r2
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	7b79      	ldrb	r1, [r7, #13]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f7ff fe43 	bl	8002f60 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	3301      	adds	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
 80032e0:	7dfc      	ldrb	r4, [r7, #23]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7fc ff8e 	bl	8000204 <strlen>
 80032e8:	4603      	mov	r3, r0
 80032ea:	429c      	cmp	r4, r3
 80032ec:	d3e2      	bcc.n	80032b4 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}

080032f8 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4603      	mov	r3, r0
 8003304:	81fb      	strh	r3, [r7, #14]
 8003306:	460b      	mov	r3, r1
 8003308:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	fb93 f3f2 	sdiv	r3, r3, r2
 8003318:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 800331a:	7b7b      	ldrb	r3, [r7, #13]
 800331c:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8003322:	2300      	movs	r3, #0
 8003324:	827b      	strh	r3, [r7, #18]
 8003326:	e02d      	b.n	8003384 <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8003328:	8aba      	ldrh	r2, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8003332:	429a      	cmp	r2, r3
 8003334:	dd06      	ble.n	8003344 <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	785a      	ldrb	r2, [r3, #1]
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	4413      	add	r3, r2
 800333e:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b0a      	cmp	r3, #10
 800334e:	d107      	bne.n	8003360 <lcdPutStrML+0x68>
			xPos = x;
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	785a      	ldrb	r2, [r3, #1]
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	4413      	add	r3, r2
 800335c:	75fb      	strb	r3, [r7, #23]
 800335e:	e00e      	b.n	800337e <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 8003360:	8a7b      	ldrh	r3, [r7, #18]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	7df9      	ldrb	r1, [r7, #23]
 800336a:	8ab8      	ldrh	r0, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f7ff fdf7 	bl	8002f60 <lcdPutChar>
			xPos += font->font_Width;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	8abb      	ldrh	r3, [r7, #20]
 800337a:	4413      	add	r3, r2
 800337c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 800337e:	8a7b      	ldrh	r3, [r7, #18]
 8003380:	3301      	adds	r3, #1
 8003382:	827b      	strh	r3, [r7, #18]
 8003384:	8a7c      	ldrh	r4, [r7, #18]
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f7fc ff3c 	bl	8000204 <strlen>
 800338c:	4603      	mov	r3, r0
 800338e:	429c      	cmp	r4, r3
 8003390:	d3ca      	bcc.n	8003328 <lcdPutStrML+0x30>
		}

	}
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 800339c:	b490      	push	{r4, r7}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	4603      	mov	r3, r0
 80033b0:	80bb      	strh	r3, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	70fb      	strb	r3, [r7, #3]
 80033b6:	4613      	mov	r3, r2
 80033b8:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	88ba      	ldrh	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d905      	bls.n	80033e2 <lcdVLine+0x46>
		uint8_t temp = y1;
 80033d6:	88bb      	ldrh	r3, [r7, #4]
 80033d8:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 80033e2:	88bb      	ldrh	r3, [r7, #4]
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e04e      	b.n	8003486 <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2232      	movs	r2, #50	; 0x32
 80033ec:	fb03 f202 	mul.w	r2, r3, r2
 80033f0:	7b7b      	ldrb	r3, [r7, #13]
 80033f2:	4413      	add	r3, r2
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <lcdVLine+0x100>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 80033fa:	78bb      	ldrb	r3, [r7, #2]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d01e      	beq.n	800343e <lcdVLine+0xa2>
 8003400:	2b02      	cmp	r3, #2
 8003402:	dc27      	bgt.n	8003454 <lcdVLine+0xb8>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <lcdVLine+0x72>
 8003408:	2b01      	cmp	r3, #1
 800340a:	d00b      	beq.n	8003424 <lcdVLine+0x88>
 800340c:	e022      	b.n	8003454 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 800340e:	7b3b      	ldrb	r3, [r7, #12]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	fa42 f303 	asr.w	r3, r2, r3
 8003416:	b25a      	sxtb	r2, r3
 8003418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800341c:	4313      	orrs	r3, r2
 800341e:	b25b      	sxtb	r3, r3
 8003420:	73bb      	strb	r3, [r7, #14]
				break;
 8003422:	e024      	b.n	800346e <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8003424:	7b3b      	ldrb	r3, [r7, #12]
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	fa42 f303 	asr.w	r3, r2, r3
 800342c:	b25b      	sxtb	r3, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	b25a      	sxtb	r2, r3
 8003432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003436:	4013      	ands	r3, r2
 8003438:	b25b      	sxtb	r3, r3
 800343a:	73bb      	strb	r3, [r7, #14]
				break;
 800343c:	e017      	b.n	800346e <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	fa42 f303 	asr.w	r3, r2, r3
 8003446:	b25a      	sxtb	r2, r3
 8003448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800344c:	4053      	eors	r3, r2
 800344e:	b25b      	sxtb	r3, r3
 8003450:	73bb      	strb	r3, [r7, #14]
				break;
 8003452:	e00c      	b.n	800346e <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8003454:	7b3b      	ldrb	r3, [r7, #12]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	fa42 f303 	asr.w	r3, r2, r3
 800345c:	b25b      	sxtb	r3, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	b25a      	sxtb	r2, r3
 8003462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003466:	4013      	ands	r3, r2
 8003468:	b25b      	sxtb	r3, r3
 800346a:	73bb      	strb	r3, [r7, #14]
				break;
 800346c:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2232      	movs	r2, #50	; 0x32
 8003472:	fb03 f202 	mul.w	r2, r3, r2
 8003476:	7b7b      	ldrb	r3, [r7, #13]
 8003478:	4413      	add	r3, r2
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <lcdVLine+0x100>)
 800347c:	7bba      	ldrb	r2, [r7, #14]
 800347e:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	429a      	cmp	r2, r3
 800348c:	d9ac      	bls.n	80033e8 <lcdVLine+0x4c>
	}
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20002770 	.word	0x20002770

080034a0 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80034a0:	b490      	push	{r4, r7}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	80fb      	strh	r3, [r7, #6]
 80034b2:	4603      	mov	r3, r0
 80034b4:	80bb      	strh	r3, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
 80034ba:	4613      	mov	r3, r2
 80034bc:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80034be:	23ff      	movs	r3, #255	; 0xff
 80034c0:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80034c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c6:	2b14      	cmp	r3, #20
 80034c8:	f200 8208 	bhi.w	80038dc <lcdHLine2+0x43c>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <lcdHLine2+0x34>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003529 	.word	0x08003529
 80034d8:	0800352f 	.word	0x0800352f
 80034dc:	08003535 	.word	0x08003535
 80034e0:	0800353b 	.word	0x0800353b
 80034e4:	08003553 	.word	0x08003553
 80034e8:	0800356b 	.word	0x0800356b
 80034ec:	08003583 	.word	0x08003583
 80034f0:	080035cd 	.word	0x080035cd
 80034f4:	08003611 	.word	0x08003611
 80034f8:	08003655 	.word	0x08003655
 80034fc:	08003693 	.word	0x08003693
 8003500:	080036b9 	.word	0x080036b9
 8003504:	080036e3 	.word	0x080036e3
 8003508:	08003719 	.word	0x08003719
 800350c:	08003731 	.word	0x08003731
 8003510:	08003757 	.word	0x08003757
 8003514:	0800378d 	.word	0x0800378d
 8003518:	080037c3 	.word	0x080037c3
 800351c:	08003805 	.word	0x08003805
 8003520:	0800385f 	.word	0x0800385f
 8003524:	0800389b 	.word	0x0800389b
		case 0:	// clear
			pattern = 0x00;
 8003528:	2300      	movs	r3, #0
 800352a:	75fb      	strb	r3, [r7, #23]
			break;
 800352c:	e1ea      	b.n	8003904 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800352e:	23ff      	movs	r3, #255	; 0xff
 8003530:	75fb      	strb	r3, [r7, #23]
			break;
 8003532:	e1e7      	b.n	8003904 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8003534:	2355      	movs	r3, #85	; 0x55
 8003536:	75fb      	strb	r3, [r7, #23]
			break;
 8003538:	e1e4      	b.n	8003904 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <lcdHLine2+0xac>
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800354a:	e1db      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0xFF;
 800354c:	23ff      	movs	r3, #255	; 0xff
 800354e:	75fb      	strb	r3, [r7, #23]
			break;
 8003550:	e1d8      	b.n	8003904 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <lcdHLine2+0xc4>
 800355e:	23aa      	movs	r3, #170	; 0xaa
 8003560:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8003562:	e1cf      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x55;
 8003564:	2355      	movs	r3, #85	; 0x55
 8003566:	75fb      	strb	r3, [r7, #23]
			break;
 8003568:	e1cc      	b.n	8003904 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <lcdHLine2+0xdc>
 8003576:	2388      	movs	r3, #136	; 0x88
 8003578:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 800357a:	e1c3      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 800357c:	2322      	movs	r3, #34	; 0x22
 800357e:	75fb      	strb	r3, [r7, #23]
			break;
 8003580:	e1c0      	b.n	8003904 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <lcdHLine2+0xf4>
 800358e:	2388      	movs	r3, #136	; 0x88
 8003590:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8003592:	e1a6      	b.n	80038e2 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <lcdHLine2+0x106>
 80035a0:	2344      	movs	r3, #68	; 0x44
 80035a2:	75fb      	strb	r3, [r7, #23]
			break;
 80035a4:	e19d      	b.n	80038e2 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d102      	bne.n	80035b8 <lcdHLine2+0x118>
 80035b2:	2322      	movs	r3, #34	; 0x22
 80035b4:	75fb      	strb	r3, [r7, #23]
			break;
 80035b6:	e194      	b.n	80038e2 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	f040 818e 	bne.w	80038e2 <lcdHLine2+0x442>
 80035c6:	2311      	movs	r3, #17
 80035c8:	75fb      	strb	r3, [r7, #23]
			break;
 80035ca:	e18a      	b.n	80038e2 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <lcdHLine2+0x144>
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d102      	bne.n	80035ea <lcdHLine2+0x14a>
 80035e4:	23aa      	movs	r3, #170	; 0xaa
 80035e6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 80035e8:	e17d      	b.n	80038e6 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <lcdHLine2+0x15c>
 80035f6:	2322      	movs	r3, #34	; 0x22
 80035f8:	75fb      	strb	r3, [r7, #23]
			break;
 80035fa:	e174      	b.n	80038e6 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b03      	cmp	r3, #3
 8003606:	f040 816e 	bne.w	80038e6 <lcdHLine2+0x446>
 800360a:	2388      	movs	r3, #136	; 0x88
 800360c:	75fb      	strb	r3, [r7, #23]
			break;
 800360e:	e16a      	b.n	80038e6 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <lcdHLine2+0x188>
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b03      	cmp	r3, #3
 8003626:	d102      	bne.n	800362e <lcdHLine2+0x18e>
 8003628:	2355      	movs	r3, #85	; 0x55
 800362a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 800362c:	e15d      	b.n	80038ea <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <lcdHLine2+0x1a0>
 800363a:	2388      	movs	r3, #136	; 0x88
 800363c:	75fb      	strb	r3, [r7, #23]
			break;
 800363e:	e154      	b.n	80038ea <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	f040 814e 	bne.w	80038ea <lcdHLine2+0x44a>
 800364e:	2322      	movs	r3, #34	; 0x22
 8003650:	75fb      	strb	r3, [r7, #23]
			break;
 8003652:	e14a      	b.n	80038ea <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <lcdHLine2+0x1cc>
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d102      	bne.n	8003672 <lcdHLine2+0x1d2>
 800366c:	23cc      	movs	r3, #204	; 0xcc
 800366e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8003670:	e13d      	b.n	80038ee <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d006      	beq.n	800368c <lcdHLine2+0x1ec>
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b03      	cmp	r3, #3
 8003688:	f040 8131 	bne.w	80038ee <lcdHLine2+0x44e>
 800368c:	2333      	movs	r3, #51	; 0x33
 800368e:	75fb      	strb	r3, [r7, #23]
			break;
 8003690:	e12d      	b.n	80038ee <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <lcdHLine2+0x204>
 800369e:	2355      	movs	r3, #85	; 0x55
 80036a0:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80036a2:	e126      	b.n	80038f2 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8120 	beq.w	80038f2 <lcdHLine2+0x452>
 80036b2:	23ff      	movs	r3, #255	; 0xff
 80036b4:	75fb      	strb	r3, [r7, #23]
			break;
 80036b6:	e11c      	b.n	80038f2 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <lcdHLine2+0x22a>
 80036c4:	23cc      	movs	r3, #204	; 0xcc
 80036c6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80036c8:	e11c      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <lcdHLine2+0x23c>
 80036d6:	2344      	movs	r3, #68	; 0x44
 80036d8:	75fb      	strb	r3, [r7, #23]
			break;
 80036da:	e113      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x00;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]
			break;
 80036e0:	e110      	b.n	8003904 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <lcdHLine2+0x254>
 80036ee:	23ee      	movs	r3, #238	; 0xee
 80036f0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 80036f2:	e107      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d005      	beq.n	800370c <lcdHLine2+0x26c>
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d102      	bne.n	8003712 <lcdHLine2+0x272>
 800370c:	2322      	movs	r3, #34	; 0x22
 800370e:	75fb      	strb	r3, [r7, #23]
			break;
 8003710:	e0f8      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]
			break;
 8003716:	e0f5      	b.n	8003904 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <lcdHLine2+0x28a>
 8003724:	23ff      	movs	r3, #255	; 0xff
 8003726:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003728:	e0ec      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800372a:	2388      	movs	r3, #136	; 0x88
 800372c:	75fb      	strb	r3, [r7, #23]
			break;
 800372e:	e0e9      	b.n	8003904 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <lcdHLine2+0x2a2>
 800373c:	23aa      	movs	r3, #170	; 0xaa
 800373e:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8003740:	e0d9      	b.n	80038f6 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80d3 	beq.w	80038f6 <lcdHLine2+0x456>
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
			break;
 8003754:	e0cf      	b.n	80038f6 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <lcdHLine2+0x2ce>
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d102      	bne.n	8003774 <lcdHLine2+0x2d4>
 800376e:	23aa      	movs	r3, #170	; 0xaa
 8003770:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003772:	e0c7      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <lcdHLine2+0x2e6>
 8003780:	2344      	movs	r3, #68	; 0x44
 8003782:	75fb      	strb	r3, [r7, #23]
			break;
 8003784:	e0be      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
			break;
 800378a:	e0bb      	b.n	8003904 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <lcdHLine2+0x304>
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d102      	bne.n	80037aa <lcdHLine2+0x30a>
 80037a4:	23ee      	movs	r3, #238	; 0xee
 80037a6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80037a8:	e0ac      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <lcdHLine2+0x31c>
 80037b6:	23aa      	movs	r3, #170	; 0xaa
 80037b8:	75fb      	strb	r3, [r7, #23]
			break;
 80037ba:	e0a3      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x00;
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]
			break;
 80037c0:	e0a0      	b.n	8003904 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <lcdHLine2+0x33a>
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d102      	bne.n	80037e0 <lcdHLine2+0x340>
 80037da:	2344      	movs	r3, #68	; 0x44
 80037dc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80037de:	e08c      	b.n	80038fa <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <lcdHLine2+0x352>
 80037ec:	23aa      	movs	r3, #170	; 0xaa
 80037ee:	75fb      	strb	r3, [r7, #23]
			break;
 80037f0:	e083      	b.n	80038fa <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d17d      	bne.n	80038fa <lcdHLine2+0x45a>
 80037fe:	2311      	movs	r3, #17
 8003800:	75fb      	strb	r3, [r7, #23]
			break;
 8003802:	e07a      	b.n	80038fa <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <lcdHLine2+0x624>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	0859      	lsrs	r1, r3, #1
 800380e:	460b      	mov	r3, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <lcdHLine2+0x382>
 800381c:	2355      	movs	r3, #85	; 0x55
 800381e:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8003820:	e06d      	b.n	80038fe <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4ba7      	ldr	r3, [pc, #668]	; (8003ac4 <lcdHLine2+0x624>)
 8003826:	fba3 1302 	umull	r1, r3, r3, r2
 800382a:	0859      	lsrs	r1, r3, #1
 800382c:	460b      	mov	r3, r1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	440b      	add	r3, r1
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <lcdHLine2+0x3a0>
 800383a:	23aa      	movs	r3, #170	; 0xaa
 800383c:	75fb      	strb	r3, [r7, #23]
			break;
 800383e:	e05e      	b.n	80038fe <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4ba0      	ldr	r3, [pc, #640]	; (8003ac4 <lcdHLine2+0x624>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	0859      	lsrs	r1, r3, #1
 800384a:	460b      	mov	r3, r1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	440b      	add	r3, r1
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d152      	bne.n	80038fe <lcdHLine2+0x45e>
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
			break;
 800385c:	e04f      	b.n	80038fe <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <lcdHLine2+0x3d0>
 800386a:	2322      	movs	r3, #34	; 0x22
 800386c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 800386e:	e049      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d102      	bne.n	8003882 <lcdHLine2+0x3e2>
 800387c:	2355      	movs	r3, #85	; 0x55
 800387e:	75fb      	strb	r3, [r7, #23]
			break;
 8003880:	e040      	b.n	8003904 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d102      	bne.n	8003894 <lcdHLine2+0x3f4>
 800388e:	2388      	movs	r3, #136	; 0x88
 8003890:	75fb      	strb	r3, [r7, #23]
			break;
 8003892:	e037      	b.n	8003904 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003894:	2300      	movs	r3, #0
 8003896:	75fb      	strb	r3, [r7, #23]
			break;
 8003898:	e034      	b.n	8003904 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d005      	beq.n	80038b2 <lcdHLine2+0x412>
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d102      	bne.n	80038b8 <lcdHLine2+0x418>
 80038b2:	2388      	movs	r3, #136	; 0x88
 80038b4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 80038b6:	e024      	b.n	8003902 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <lcdHLine2+0x42a>
 80038c4:	2377      	movs	r3, #119	; 0x77
 80038c6:	75fb      	strb	r3, [r7, #23]
			break;
 80038c8:	e01b      	b.n	8003902 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d115      	bne.n	8003902 <lcdHLine2+0x462>
 80038d6:	23aa      	movs	r3, #170	; 0xaa
 80038d8:	75fb      	strb	r3, [r7, #23]
			break;
 80038da:	e012      	b.n	8003902 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
			break;
 80038e0:	e010      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038e2:	bf00      	nop
 80038e4:	e00e      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038e6:	bf00      	nop
 80038e8:	e00c      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038ea:	bf00      	nop
 80038ec:	e00a      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038ee:	bf00      	nop
 80038f0:	e008      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038f2:	bf00      	nop
 80038f4:	e006      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038f6:	bf00      	nop
 80038f8:	e004      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <lcdHLine2+0x464>
			break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <lcdHLine2+0x464>
			break;
 8003902:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	08db      	lsrs	r3, r3, #3
 8003908:	b29b      	uxth	r3, r3
 800390a:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8003916:	88bb      	ldrh	r3, [r7, #4]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	b29b      	uxth	r3, r3
 800391c:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800391e:	88bb      	ldrh	r3, [r7, #4]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2232      	movs	r2, #50	; 0x32
 800392c:	fb03 f202 	mul.w	r2, r3, r2
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	4413      	add	r3, r2
 8003934:	4a64      	ldr	r2, [pc, #400]	; (8003ac8 <lcdHLine2+0x628>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	2232      	movs	r2, #50	; 0x32
 800393e:	fb03 f202 	mul.w	r2, r3, r2
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	4413      	add	r3, r2
 8003946:	4a60      	ldr	r2, [pc, #384]	; (8003ac8 <lcdHLine2+0x628>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	f1c3 0208 	rsb	r2, r3, #8
 8003956:	88b9      	ldrh	r1, [r7, #4]
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	1acb      	subs	r3, r1, r3
 800395c:	3301      	adds	r3, #1
 800395e:	429a      	cmp	r2, r3
 8003960:	dd11      	ble.n	8003986 <lcdHLine2+0x4e6>
 8003962:	88ba      	ldrh	r2, [r7, #4]
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	3301      	adds	r3, #1
 800396a:	22ff      	movs	r2, #255	; 0xff
 800396c:	fa42 f303 	asr.w	r3, r2, r3
 8003970:	43da      	mvns	r2, r3
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	fa42 f303 	asr.w	r3, r2, r3
 8003978:	b25a      	sxtb	r2, r3
 800397a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800397e:	4013      	ands	r3, r2
 8003980:	b25b      	sxtb	r3, r3
 8003982:	753b      	strb	r3, [r7, #20]
 8003984:	e001      	b.n	800398a <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	753b      	strb	r3, [r7, #20]
		switch(mode){
 800398a:	78bb      	ldrb	r3, [r7, #2]
 800398c:	2b03      	cmp	r3, #3
 800398e:	f200 8130 	bhi.w	8003bf2 <lcdHLine2+0x752>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <lcdHLine2+0x4f8>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	08003a2d 	.word	0x08003a2d
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003b51 	.word	0x08003b51
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	fa42 f303 	asr.w	r3, r2, r3
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b25a      	sxtb	r2, r3
 80039ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039be:	4313      	orrs	r3, r2
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80039c4:	7b3b      	ldrb	r3, [r7, #12]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	22ff      	movs	r2, #255	; 0xff
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	b25a      	sxtb	r2, r3
 80039d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80039de:	4313      	orrs	r3, r2
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039e4:	2301      	movs	r3, #1
 80039e6:	74fb      	strb	r3, [r7, #19]
 80039e8:	e019      	b.n	8003a1e <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	2232      	movs	r2, #50	; 0x32
 80039ee:	fb03 f202 	mul.w	r2, r3, r2
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	441a      	add	r2, r3
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	4413      	add	r3, r2
 80039fa:	4a33      	ldr	r2, [pc, #204]	; (8003ac8 <lcdHLine2+0x628>)
 80039fc:	5cd1      	ldrb	r1, [r2, r3]
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	2232      	movs	r2, #50	; 0x32
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	441a      	add	r2, r3
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	7dfa      	ldrb	r2, [r7, #23]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <lcdHLine2+0x628>)
 8003a16:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	74fb      	strb	r3, [r7, #19]
 8003a1e:	7cfa      	ldrb	r2, [r7, #19]
 8003a20:	7b79      	ldrb	r1, [r7, #13]
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	1acb      	subs	r3, r1, r3
 8003a26:	429a      	cmp	r2, r3
 8003a28:	dbdf      	blt.n	80039ea <lcdHLine2+0x54a>
			}
			break;
 8003a2a:	e0e2      	b.n	8003bf2 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	fa42 f303 	asr.w	r3, r2, r3
 8003a34:	b25a      	sxtb	r2, r3
 8003a36:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	b25a      	sxtb	r2, r3
 8003a42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8003a4c:	7b3b      	ldrb	r3, [r7, #12]
 8003a4e:	f1c3 0307 	rsb	r3, r3, #7
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	b25a      	sxtb	r2, r3
 8003a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	b25a      	sxtb	r2, r3
 8003a66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a70:	2301      	movs	r3, #1
 8003a72:	74bb      	strb	r3, [r7, #18]
 8003a74:	e01e      	b.n	8003ab4 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	2232      	movs	r2, #50	; 0x32
 8003a7a:	fb03 f202 	mul.w	r2, r3, r2
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	441a      	add	r2, r3
 8003a82:	7cbb      	ldrb	r3, [r7, #18]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <lcdHLine2+0x628>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	b25a      	sxtb	r2, r3
 8003a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	4013      	ands	r3, r2
 8003a96:	b259      	sxtb	r1, r3
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	2232      	movs	r2, #50	; 0x32
 8003a9c:	fb03 f202 	mul.w	r2, r3, r2
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	7cbb      	ldrb	r3, [r7, #18]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b2c9      	uxtb	r1, r1
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <lcdHLine2+0x628>)
 8003aac:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003aae:	7cbb      	ldrb	r3, [r7, #18]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	74bb      	strb	r3, [r7, #18]
 8003ab4:	7cba      	ldrb	r2, [r7, #18]
 8003ab6:	7b79      	ldrb	r1, [r7, #13]
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	1acb      	subs	r3, r1, r3
 8003abc:	429a      	cmp	r2, r3
 8003abe:	dbda      	blt.n	8003a76 <lcdHLine2+0x5d6>
			}
			break;
 8003ac0:	e097      	b.n	8003bf2 <lcdHLine2+0x752>
 8003ac2:	bf00      	nop
 8003ac4:	aaaaaaab 	.word	0xaaaaaaab
 8003ac8:	20002770 	.word	0x20002770
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	22ff      	movs	r2, #255	; 0xff
 8003ad0:	fa42 f303 	asr.w	r3, r2, r3
 8003ad4:	b25a      	sxtb	r2, r3
 8003ad6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003ada:	4013      	ands	r3, r2
 8003adc:	b25a      	sxtb	r2, r3
 8003ade:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ae2:	4053      	eors	r3, r2
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003ae8:	7b3b      	ldrb	r3, [r7, #12]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	b25a      	sxtb	r2, r3
 8003af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003afa:	4013      	ands	r3, r2
 8003afc:	b25a      	sxtb	r2, r3
 8003afe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003b02:	4053      	eors	r3, r2
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003b08:	2301      	movs	r3, #1
 8003b0a:	747b      	strb	r3, [r7, #17]
 8003b0c:	e019      	b.n	8003b42 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	2232      	movs	r2, #50	; 0x32
 8003b12:	fb03 f202 	mul.w	r2, r3, r2
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	441a      	add	r2, r3
 8003b1a:	7c7b      	ldrb	r3, [r7, #17]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <lcdHLine2+0x788>)
 8003b20:	5cd1      	ldrb	r1, [r2, r3]
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	2232      	movs	r2, #50	; 0x32
 8003b26:	fb03 f202 	mul.w	r2, r3, r2
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	7c7b      	ldrb	r3, [r7, #17]
 8003b30:	4413      	add	r3, r2
 8003b32:	7dfa      	ldrb	r2, [r7, #23]
 8003b34:	404a      	eors	r2, r1
 8003b36:	b2d1      	uxtb	r1, r2
 8003b38:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <lcdHLine2+0x788>)
 8003b3a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003b3c:	7c7b      	ldrb	r3, [r7, #17]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	747b      	strb	r3, [r7, #17]
 8003b42:	7c7a      	ldrb	r2, [r7, #17]
 8003b44:	7b79      	ldrb	r1, [r7, #13]
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	1acb      	subs	r3, r1, r3
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	dbdf      	blt.n	8003b0e <lcdHLine2+0x66e>
			}
			break;
 8003b4e:	e050      	b.n	8003bf2 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	22ff      	movs	r2, #255	; 0xff
 8003b54:	fa42 f303 	asr.w	r3, r2, r3
 8003b58:	b25a      	sxtb	r2, r3
 8003b5a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	b25a      	sxtb	r2, r3
 8003b62:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	b259      	sxtb	r1, r3
 8003b6a:	7bbb      	ldrb	r3, [r7, #14]
 8003b6c:	f1c3 0308 	rsb	r3, r3, #8
 8003b70:	20ff      	movs	r0, #255	; 0xff
 8003b72:	fa00 f303 	lsl.w	r3, r0, r3
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	400b      	ands	r3, r1
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8003b86:	7b3b      	ldrb	r3, [r7, #12]
 8003b88:	f1c3 0307 	rsb	r3, r3, #7
 8003b8c:	22ff      	movs	r2, #255	; 0xff
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	b25a      	sxtb	r2, r3
 8003b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b25a      	sxtb	r2, r3
 8003b9c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	b259      	sxtb	r1, r3
 8003ba4:	7b3b      	ldrb	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	20ff      	movs	r0, #255	; 0xff
 8003baa:	fa40 f303 	asr.w	r3, r0, r3
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	b25b      	sxtb	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	743b      	strb	r3, [r7, #16]
 8003bc2:	e00f      	b.n	8003be4 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2232      	movs	r2, #50	; 0x32
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	441a      	add	r2, r3
 8003bd0:	7c3b      	ldrb	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	7dfa      	ldrb	r2, [r7, #23]
 8003bd6:	43d2      	mvns	r2, r2
 8003bd8:	b2d1      	uxtb	r1, r2
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <lcdHLine2+0x788>)
 8003bdc:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003bde:	7c3b      	ldrb	r3, [r7, #16]
 8003be0:	3301      	adds	r3, #1
 8003be2:	743b      	strb	r3, [r7, #16]
 8003be4:	7c3a      	ldrb	r2, [r7, #16]
 8003be6:	7b79      	ldrb	r1, [r7, #13]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	1acb      	subs	r3, r1, r3
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbe9      	blt.n	8003bc4 <lcdHLine2+0x724>
			}
			break;
 8003bf0:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	2232      	movs	r2, #50	; 0x32
 8003bf6:	fb03 f202 	mul.w	r2, r3, r2
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	490a      	ldr	r1, [pc, #40]	; (8003c28 <lcdHLine2+0x788>)
 8003c00:	7dba      	ldrb	r2, [r7, #22]
 8003c02:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003c04:	7b7a      	ldrb	r2, [r7, #13]
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d908      	bls.n	8003c1e <lcdHLine2+0x77e>
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	2232      	movs	r2, #50	; 0x32
 8003c10:	fb03 f202 	mul.w	r2, r3, r2
 8003c14:	7b7b      	ldrb	r3, [r7, #13]
 8003c16:	4413      	add	r3, r2
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <lcdHLine2+0x788>)
 8003c1a:	7d7a      	ldrb	r2, [r7, #21]
 8003c1c:	54ca      	strb	r2, [r1, r3]
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc90      	pop	{r4, r7}
 8003c26:	4770      	bx	lr
 8003c28:	20002770 	.word	0x20002770

08003c2c <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003c2c:	b490      	push	{r4, r7}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	80fb      	strh	r3, [r7, #6]
 8003c3e:	4603      	mov	r3, r0
 8003c40:	80bb      	strh	r3, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	70fb      	strb	r3, [r7, #3]
 8003c46:	4613      	mov	r3, r2
 8003c48:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003c5c:	88bb      	ldrh	r3, [r7, #4]
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8003c64:	88bb      	ldrh	r3, [r7, #4]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	2232      	movs	r2, #50	; 0x32
 8003c72:	fb03 f202 	mul.w	r2, r3, r2
 8003c76:	7c7b      	ldrb	r3, [r7, #17]
 8003c78:	4413      	add	r3, r2
 8003c7a:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <lcdHLine+0x214>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2232      	movs	r2, #50	; 0x32
 8003c84:	fb03 f202 	mul.w	r2, r3, r2
 8003c88:	7c7b      	ldrb	r3, [r7, #17]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	4413      	add	r3, r2
 8003c90:	4a6b      	ldr	r2, [pc, #428]	; (8003e40 <lcdHLine+0x214>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8003c96:	23ff      	movs	r3, #255	; 0xff
 8003c98:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8003c9a:	7c3b      	ldrb	r3, [r7, #16]
 8003c9c:	f1c3 0208 	rsb	r2, r3, #8
 8003ca0:	88b9      	ldrh	r1, [r7, #4]
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	1acb      	subs	r3, r1, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	dd09      	ble.n	8003cc0 <lcdHLine+0x94>
 8003cac:	88ba      	ldrh	r2, [r7, #4]
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	fa42 f303 	asr.w	r3, r2, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8003cc0:	78bb      	ldrb	r3, [r7, #2]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d067      	beq.n	8003d96 <lcdHLine+0x16a>
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f300 809e 	bgt.w	8003e08 <lcdHLine+0x1dc>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <lcdHLine+0xaa>
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d02e      	beq.n	8003d32 <lcdHLine+0x106>
 8003cd4:	e098      	b.n	8003e08 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003cd6:	7d7a      	ldrb	r2, [r7, #21]
 8003cd8:	7c3b      	ldrb	r3, [r7, #16]
 8003cda:	fa42 f303 	asr.w	r3, r2, r3
 8003cde:	b25a      	sxtb	r2, r3
 8003ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003cea:	7bbb      	ldrb	r3, [r7, #14]
 8003cec:	f1c3 0307 	rsb	r3, r3, #7
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	b25a      	sxtb	r2, r3
 8003cf8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d02:	2301      	movs	r3, #1
 8003d04:	753b      	strb	r3, [r7, #20]
 8003d06:	e00d      	b.n	8003d24 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	2232      	movs	r2, #50	; 0x32
 8003d0c:	fb03 f202 	mul.w	r2, r3, r2
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	441a      	add	r2, r3
 8003d14:	7d3b      	ldrb	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a49      	ldr	r2, [pc, #292]	; (8003e40 <lcdHLine+0x214>)
 8003d1a:	21ff      	movs	r1, #255	; 0xff
 8003d1c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d1e:	7d3b      	ldrb	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	753b      	strb	r3, [r7, #20]
 8003d24:	7d3a      	ldrb	r2, [r7, #20]
 8003d26:	7bf9      	ldrb	r1, [r7, #15]
 8003d28:	7c7b      	ldrb	r3, [r7, #17]
 8003d2a:	1acb      	subs	r3, r1, r3
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dbeb      	blt.n	8003d08 <lcdHLine+0xdc>
		}
		break;
 8003d30:	e06a      	b.n	8003e08 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003d32:	7d7a      	ldrb	r2, [r7, #21]
 8003d34:	7c3b      	ldrb	r3, [r7, #16]
 8003d36:	fa42 f303 	asr.w	r3, r2, r3
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	b25a      	sxtb	r2, r3
 8003d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	f1c3 0307 	rsb	r3, r3, #7
 8003d50:	22ff      	movs	r2, #255	; 0xff
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	b25a      	sxtb	r2, r3
 8003d5c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d66:	2301      	movs	r3, #1
 8003d68:	74fb      	strb	r3, [r7, #19]
 8003d6a:	e00d      	b.n	8003d88 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	2232      	movs	r2, #50	; 0x32
 8003d70:	fb03 f202 	mul.w	r2, r3, r2
 8003d74:	7c7b      	ldrb	r3, [r7, #17]
 8003d76:	441a      	add	r2, r3
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <lcdHLine+0x214>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	3301      	adds	r3, #1
 8003d86:	74fb      	strb	r3, [r7, #19]
 8003d88:	7cfa      	ldrb	r2, [r7, #19]
 8003d8a:	7bf9      	ldrb	r1, [r7, #15]
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	1acb      	subs	r3, r1, r3
 8003d90:	429a      	cmp	r2, r3
 8003d92:	dbeb      	blt.n	8003d6c <lcdHLine+0x140>
		}
		break;
 8003d94:	e038      	b.n	8003e08 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003d96:	7d7a      	ldrb	r2, [r7, #21]
 8003d98:	7c3b      	ldrb	r3, [r7, #16]
 8003d9a:	fa42 f303 	asr.w	r3, r2, r3
 8003d9e:	b25a      	sxtb	r2, r3
 8003da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003da4:	4053      	eors	r3, r2
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	f1c3 0307 	rsb	r3, r3, #7
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	b25a      	sxtb	r2, r3
 8003db8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003dbc:	4053      	eors	r3, r2
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	74bb      	strb	r3, [r7, #18]
 8003dc6:	e018      	b.n	8003dfa <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	2232      	movs	r2, #50	; 0x32
 8003dcc:	fb03 f202 	mul.w	r2, r3, r2
 8003dd0:	7c7b      	ldrb	r3, [r7, #17]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	7cbb      	ldrb	r3, [r7, #18]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <lcdHLine+0x214>)
 8003dda:	5cd2      	ldrb	r2, [r2, r3]
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	2132      	movs	r1, #50	; 0x32
 8003de0:	fb03 f101 	mul.w	r1, r3, r1
 8003de4:	7c7b      	ldrb	r3, [r7, #17]
 8003de6:	4419      	add	r1, r3
 8003de8:	7cbb      	ldrb	r3, [r7, #18]
 8003dea:	440b      	add	r3, r1
 8003dec:	43d2      	mvns	r2, r2
 8003dee:	b2d1      	uxtb	r1, r2
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <lcdHLine+0x214>)
 8003df2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003df4:	7cbb      	ldrb	r3, [r7, #18]
 8003df6:	3301      	adds	r3, #1
 8003df8:	74bb      	strb	r3, [r7, #18]
 8003dfa:	7cba      	ldrb	r2, [r7, #18]
 8003dfc:	7bf9      	ldrb	r1, [r7, #15]
 8003dfe:	7c7b      	ldrb	r3, [r7, #17]
 8003e00:	1acb      	subs	r3, r1, r3
 8003e02:	429a      	cmp	r2, r3
 8003e04:	dbe0      	blt.n	8003dc8 <lcdHLine+0x19c>
		}
		break;
 8003e06:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2232      	movs	r2, #50	; 0x32
 8003e0c:	fb03 f202 	mul.w	r2, r3, r2
 8003e10:	7c7b      	ldrb	r3, [r7, #17]
 8003e12:	4413      	add	r3, r2
 8003e14:	490a      	ldr	r1, [pc, #40]	; (8003e40 <lcdHLine+0x214>)
 8003e16:	7dfa      	ldrb	r2, [r7, #23]
 8003e18:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	7c7b      	ldrb	r3, [r7, #17]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d908      	bls.n	8003e34 <lcdHLine+0x208>
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	2232      	movs	r2, #50	; 0x32
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <lcdHLine+0x214>)
 8003e30:	7dba      	ldrb	r2, [r7, #22]
 8003e32:	54ca      	strb	r2, [r1, r3]
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc90      	pop	{r4, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20002770 	.word	0x20002770

08003e44 <lcdRefresh>:

void lcdRefresh(void){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <lcdRefresh+0x7c>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d032      	beq.n	8003eb8 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003e52:	2201      	movs	r2, #1
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	481b      	ldr	r0, [pc, #108]	; (8003ec4 <lcdRefresh+0x80>)
 8003e58:	f007 fcd0 	bl	800b7fc <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	71fb      	strb	r3, [r7, #7]
 8003e60:	e01c      	b.n	8003e9c <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe ffc9 	bl	8002dfc <reverse_uint8>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <lcdRefresh+0x84>)
 8003e70:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003e72:	2396      	movs	r3, #150	; 0x96
 8003e74:	2202      	movs	r2, #2
 8003e76:	4914      	ldr	r1, [pc, #80]	; (8003ec8 <lcdRefresh+0x84>)
 8003e78:	4814      	ldr	r0, [pc, #80]	; (8003ecc <lcdRefresh+0x88>)
 8003e7a:	f00a feb8 	bl	800ebee <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	2232      	movs	r2, #50	; 0x32
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <lcdRefresh+0x8c>)
 8003e8a:	1899      	adds	r1, r3, r2
 8003e8c:	2396      	movs	r3, #150	; 0x96
 8003e8e:	2232      	movs	r2, #50	; 0x32
 8003e90:	480e      	ldr	r0, [pc, #56]	; (8003ecc <lcdRefresh+0x88>)
 8003e92:	f00a feac 	bl	800ebee <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2bf1      	cmp	r3, #241	; 0xf1
 8003ea0:	d9df      	bls.n	8003e62 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003ea2:	2396      	movs	r3, #150	; 0x96
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	490b      	ldr	r1, [pc, #44]	; (8003ed4 <lcdRefresh+0x90>)
 8003ea8:	4808      	ldr	r0, [pc, #32]	; (8003ecc <lcdRefresh+0x88>)
 8003eaa:	f00a fea0 	bl	800ebee <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <lcdRefresh+0x80>)
 8003eb4:	f007 fca2 	bl	800b7fc <HAL_GPIO_WritePin>
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000058 	.word	0x20000058
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	2000005c 	.word	0x2000005c
 8003ecc:	20005b1c 	.word	0x20005b1c
 8003ed0:	20002770 	.word	0x20002770
 8003ed4:	2000276c 	.word	0x2000276c

08003ed8 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	80fb      	strh	r3, [r7, #6]
 8003eea:	4603      	mov	r3, r0
 8003eec:	80bb      	strh	r3, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	70fb      	strb	r3, [r7, #3]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	e009      	b.n	8003f10 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	88b9      	ldrh	r1, [r7, #4]
 8003f04:	88f8      	ldrh	r0, [r7, #6]
 8003f06:	f7ff fe91 	bl	8003c2c <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	78bb      	ldrb	r3, [r7, #2]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d9f1      	bls.n	8003efc <lcdRect+0x24>
	}
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}

08003f22 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003f22:	b590      	push	{r4, r7, lr}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af02      	add	r7, sp, #8
 8003f28:	4604      	mov	r4, r0
 8003f2a:	4608      	mov	r0, r1
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	80fb      	strh	r3, [r7, #6]
 8003f34:	4603      	mov	r3, r0
 8003f36:	80bb      	strh	r3, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	88bb      	ldrh	r3, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d046      	beq.n	8003fd6 <lcdRect2+0xb4>
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	78bb      	ldrb	r3, [r7, #2]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d042      	beq.n	8003fd6 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e00d      	b.n	8003f72 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003f56:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	88b9      	ldrh	r1, [r7, #4]
 8003f5e:	88f8      	ldrh	r0, [r7, #6]
 8003f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4623      	mov	r3, r4
 8003f68:	f7ff fa9a 	bl	80034a0 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	78bb      	ldrb	r3, [r7, #2]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d9ed      	bls.n	8003f56 <lcdRect2+0x34>
		}
		if(outline){
 8003f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d029      	beq.n	8003fd6 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	88b9      	ldrh	r1, [r7, #4]
 8003f8a:	88f8      	ldrh	r0, [r7, #6]
 8003f8c:	2401      	movs	r4, #1
 8003f8e:	9400      	str	r4, [sp, #0]
 8003f90:	f7ff fa86 	bl	80034a0 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003f94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f98:	78ba      	ldrb	r2, [r7, #2]
 8003f9a:	88b9      	ldrh	r1, [r7, #4]
 8003f9c:	88f8      	ldrh	r0, [r7, #6]
 8003f9e:	2401      	movs	r4, #1
 8003fa0:	9400      	str	r4, [sp, #0]
 8003fa2:	f7ff fa7d 	bl	80034a0 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	b299      	uxth	r1, r3
 8003fae:	78bb      	ldrb	r3, [r7, #2]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fb8:	88f8      	ldrh	r0, [r7, #6]
 8003fba:	f7ff f9ef 	bl	800339c <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b299      	uxth	r1, r3
 8003fc6:	78bb      	ldrb	r3, [r7, #2]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fd0:	88b8      	ldrh	r0, [r7, #4]
 8003fd2:	f7ff f9e3 	bl	800339c <lcdVLine>
		}
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}

08003fde <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fe6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fea:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003ff6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ffa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ffe:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004006:	e000      	b.n	800400a <ITM_SendChar+0x2c>
    {
      __NOP();
 8004008:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800400a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f9      	beq.n	8004008 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800401e:	687b      	ldr	r3, [r7, #4]
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ffd1 	bl	8003fde <ITM_SendChar>
	return(ch);
 800403c:	687b      	ldr	r3, [r7, #4]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <setTimeout+0x30>)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <setTimeout+0x34>)
 800405c:	2200      	movs	r2, #0
 800405e:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8004060:	4a07      	ldr	r2, [pc, #28]	; (8004080 <setTimeout+0x38>)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <setTimeout+0x3c>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20005a6c 	.word	0x20005a6c
 800407c:	20005a6a 	.word	0x20005a6a
 8004080:	20005a70 	.word	0x20005a70
 8004084:	20005a69 	.word	0x20005a69

08004088 <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 800408e:	2301      	movs	r3, #1
 8004090:	9302      	str	r3, [sp, #8]
 8004092:	2300      	movs	r3, #0
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2303      	movs	r3, #3
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	23be      	movs	r3, #190	; 0xbe
 800409c:	2232      	movs	r2, #50	; 0x32
 800409e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80040a2:	2032      	movs	r0, #50	; 0x32
 80040a4:	f7ff ff3d 	bl	8003f22 <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <showAlert+0x34>)
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <showAlert+0x38>)
 80040ac:	215a      	movs	r1, #90	; 0x5a
 80040ae:	205a      	movs	r0, #90	; 0x5a
 80040b0:	f7ff f8f4 	bl	800329c <lcdPutStr>
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	0801e280 	.word	0x0801e280
 80040c0:	0801cf40 	.word	0x0801cf40

080040c4 <hideAlert>:
void hideAlert(void){
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	alertFlag = 0;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <hideAlert+0x14>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20005a74 	.word	0x20005a74

080040dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 80040e2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040e4:	f006 ff98 	bl	800b018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040e8:	f000 f902 	bl	80042f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040ec:	f7fe f8a8 	bl	8002240 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80040f0:	f001 f818 	bl	8005124 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80040f4:	f000 fb38 	bl	8004768 <MX_SPI1_Init>
  MX_TIM1_Init();
 80040f8:	f000 fdb4 	bl	8004c64 <MX_TIM1_Init>
  MX_TIM10_Init();
 80040fc:	f000 fe54 	bl	8004da8 <MX_TIM10_Init>
  MX_I2C1_Init();
 8004100:	f7fe fdf4 	bl	8002cec <MX_I2C1_Init>
  MX_TIM11_Init();
 8004104:	f000 fe74 	bl	8004df0 <MX_TIM11_Init>
  MX_RTC_Init();
 8004108:	f000 fa4c 	bl	80045a4 <MX_RTC_Init>
  MX_TIM13_Init();
 800410c:	f000 fe94 	bl	8004e38 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8004110:	f000 faa2 	bl	8004658 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8004114:	f00d fa94 	bl	8011640 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8004118:	f001 f82e 	bl	8005178 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 800411c:	f000 feb0 	bl	8004e80 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8004120:	485a      	ldr	r0, [pc, #360]	; (800428c <main+0x1b0>)
 8004122:	f00a ff6b 	bl	800effc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8004126:	4859      	ldr	r0, [pc, #356]	; (800428c <main+0x1b0>)
 8004128:	f00a ffb8 	bl	800f09c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800412c:	2100      	movs	r1, #0
 800412e:	4857      	ldr	r0, [pc, #348]	; (800428c <main+0x1b0>)
 8004130:	f00b f8ac 	bl	800f28c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8004134:	2100      	movs	r1, #0
 8004136:	4856      	ldr	r0, [pc, #344]	; (8004290 <main+0x1b4>)
 8004138:	f00b f8a8 	bl	800f28c <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 800413c:	4855      	ldr	r0, [pc, #340]	; (8004294 <main+0x1b8>)
 800413e:	f00a ffad 	bl	800f09c <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8004142:	4855      	ldr	r0, [pc, #340]	; (8004298 <main+0x1bc>)
 8004144:	f7fd fe24 	bl	8001d90 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8004148:	4854      	ldr	r0, [pc, #336]	; (800429c <main+0x1c0>)
 800414a:	f00a ffa7 	bl	800f09c <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 800414e:	4c54      	ldr	r4, [pc, #336]	; (80042a0 <main+0x1c4>)
 8004150:	463b      	mov	r3, r7
 8004152:	4954      	ldr	r1, [pc, #336]	; (80042a4 <main+0x1c8>)
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe f9d1 	bl	80024fc <initGps>
 800415a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800415e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8004162:	4620      	mov	r0, r4
 8004164:	4619      	mov	r1, r3
 8004166:	f44f 7319 	mov.w	r3, #612	; 0x264
 800416a:	461a      	mov	r2, r3
 800416c:	f010 fc2c 	bl	80149c8 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8004170:	484d      	ldr	r0, [pc, #308]	; (80042a8 <main+0x1cc>)
 8004172:	f7fd fb4d 	bl	8001810 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8004176:	f240 118f 	movw	r1, #399	; 0x18f
 800417a:	484c      	ldr	r0, [pc, #304]	; (80042ac <main+0x1d0>)
 800417c:	f006 fe06 	bl	800ad8c <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8004180:	f240 128f 	movw	r2, #399	; 0x18f
 8004184:	2102      	movs	r1, #2
 8004186:	484a      	ldr	r0, [pc, #296]	; (80042b0 <main+0x1d4>)
 8004188:	f006 fcaa 	bl	800aae0 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800418c:	2201      	movs	r2, #1
 800418e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004192:	4848      	ldr	r0, [pc, #288]	; (80042b4 <main+0x1d8>)
 8004194:	f007 fb32 	bl	800b7fc <HAL_GPIO_WritePin>
  	Mount_SD("/");
 8004198:	4847      	ldr	r0, [pc, #284]	; (80042b8 <main+0x1dc>)
 800419a:	f7fc ff63 	bl	8001064 <Mount_SD>
  	Create_File("FILE1.TXT");
 800419e:	4847      	ldr	r0, [pc, #284]	; (80042bc <main+0x1e0>)
 80041a0:	f7fd f86c 	bl	800127c <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 80041a4:	4946      	ldr	r1, [pc, #280]	; (80042c0 <main+0x1e4>)
 80041a6:	4845      	ldr	r0, [pc, #276]	; (80042bc <main+0x1e0>)
 80041a8:	f7fd f8f4 	bl	8001394 <Update_File>
  	Create_File("FILE4.TXT");
 80041ac:	4845      	ldr	r0, [pc, #276]	; (80042c4 <main+0x1e8>)
 80041ae:	f7fd f865 	bl	800127c <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 80041b2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80041b6:	4619      	mov	r1, r3
 80041b8:	4843      	ldr	r0, [pc, #268]	; (80042c8 <main+0x1ec>)
 80041ba:	f7fc ffad 	bl	8001118 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80041be:	2200      	movs	r2, #0
 80041c0:	4942      	ldr	r1, [pc, #264]	; (80042cc <main+0x1f0>)
 80041c2:	4843      	ldr	r0, [pc, #268]	; (80042d0 <main+0x1f4>)
 80041c4:	f009 fb14 	bl	800d7f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80041c8:	2200      	movs	r2, #0
 80041ca:	4942      	ldr	r1, [pc, #264]	; (80042d4 <main+0x1f8>)
 80041cc:	4840      	ldr	r0, [pc, #256]	; (80042d0 <main+0x1f4>)
 80041ce:	f009 fbf1 	bl	800d9b4 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80041d8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80041dc:	222e      	movs	r2, #46	; 0x2e
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f010 fbff 	bl	80149e4 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <main+0x1f0>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b37      	ldr	r3, [pc, #220]	; (80042cc <main+0x1f0>)
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	4619      	mov	r1, r3
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <main+0x1f0>)
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	f507 701a 	add.w	r0, r7, #616	; 0x268
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	460b      	mov	r3, r1
 80041fe:	4936      	ldr	r1, [pc, #216]	; (80042d8 <main+0x1fc>)
 8004200:	f011 fd1e 	bl	8015c40 <siprintf>
	SD_logger(tmpl);
 8004204:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc ff15 	bl	8001038 <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 800420e:	f7fe fe1f 	bl	8002e50 <lcdClearBuffer>
  lcdRefresh();
 8004212:	f7ff fe17 	bl	8003e44 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <main+0x200>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00f      	beq.n	800423e <main+0x162>
		bmpData = getBmpData(&bmp180module);
 800421e:	4c30      	ldr	r4, [pc, #192]	; (80042e0 <main+0x204>)
 8004220:	463b      	mov	r3, r7
 8004222:	4921      	ldr	r1, [pc, #132]	; (80042a8 <main+0x1cc>)
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd fd5b 	bl	8001ce0 <getBmpData>
 800422a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800422e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8004232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <main+0x200>)
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800423e:	2200      	movs	r2, #0
 8004240:	4922      	ldr	r1, [pc, #136]	; (80042cc <main+0x1f0>)
 8004242:	4823      	ldr	r0, [pc, #140]	; (80042d0 <main+0x1f4>)
 8004244:	f009 fad4 	bl	800d7f0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8004248:	2200      	movs	r2, #0
 800424a:	4922      	ldr	r1, [pc, #136]	; (80042d4 <main+0x1f8>)
 800424c:	4820      	ldr	r0, [pc, #128]	; (80042d0 <main+0x1f4>)
 800424e:	f009 fbb1 	bl	800d9b4 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <main+0x1f0>)
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <main+0x18e>
 800425a:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <main+0x1f0>)
 800425c:	789b      	ldrb	r3, [r3, #2]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <main+0x18e>
			pulseVib(40, 60);
 8004262:	213c      	movs	r1, #60	; 0x3c
 8004264:	2028      	movs	r0, #40	; 0x28
 8004266:	f001 f84b 	bl	8005300 <pulseVib>
		}
	  lcdClearBuffer();
 800426a:	f7fe fdf1 	bl	8002e50 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 800426e:	f7fe fd21 	bl	8002cb4 <showGui>

	  if(alertFlag){
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <main+0x208>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <main+0x1a8>
		  showAlert();
 800427a:	f7ff ff05 	bl	8004088 <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <main+0x20c>)
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <main+0x210>)
 8004282:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 8004284:	f7ff fdde 	bl	8003e44 <lcdRefresh>
	  if(updateBmpData_flag){
 8004288:	e7c5      	b.n	8004216 <main+0x13a>
 800428a:	bf00      	nop
 800428c:	20005b80 	.word	0x20005b80
 8004290:	20005ca0 	.word	0x20005ca0
 8004294:	20005c10 	.word	0x20005c10
 8004298:	2000002c 	.word	0x2000002c
 800429c:	20005c58 	.word	0x20005c58
 80042a0:	20005804 	.word	0x20005804
 80042a4:	20005d2c 	.word	0x20005d2c
 80042a8:	2000250c 	.word	0x2000250c
 80042ac:	200057f4 	.word	0x200057f4
 80042b0:	200057e0 	.word	0x200057e0
 80042b4:	40020800 	.word	0x40020800
 80042b8:	0801cf48 	.word	0x0801cf48
 80042bc:	0801cf4c 	.word	0x0801cf4c
 80042c0:	0801cf58 	.word	0x0801cf58
 80042c4:	0801cf78 	.word	0x0801cf78
 80042c8:	0801cf84 	.word	0x0801cf84
 80042cc:	200057c8 	.word	0x200057c8
 80042d0:	20005a78 	.word	0x20005a78
 80042d4:	200057dc 	.word	0x200057dc
 80042d8:	0801cf90 	.word	0x0801cf90
 80042dc:	20000065 	.word	0x20000065
 80042e0:	20002550 	.word	0x20002550
 80042e4:	20005a74 	.word	0x20005a74
 80042e8:	20002680 	.word	0x20002680
 80042ec:	080040c5 	.word	0x080040c5

080042f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b094      	sub	sp, #80	; 0x50
 80042f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042f6:	f107 0320 	add.w	r3, r7, #32
 80042fa:	2230      	movs	r2, #48	; 0x30
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f010 fb70 	bl	80149e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <SystemClock_Config+0xd0>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <SystemClock_Config+0xd0>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6413      	str	r3, [r2, #64]	; 0x40
 8004324:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <SystemClock_Config+0xd0>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004330:	2300      	movs	r3, #0
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <SystemClock_Config+0xd4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <SystemClock_Config+0xd4>)
 800433a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <SystemClock_Config+0xd4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800434c:	2305      	movs	r3, #5
 800434e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004350:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004356:	2301      	movs	r3, #1
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800435a:	2302      	movs	r3, #2
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800435e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004364:	2304      	movs	r3, #4
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004368:	23a8      	movs	r3, #168	; 0xa8
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800436c:	2302      	movs	r3, #2
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004370:	2307      	movs	r3, #7
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004374:	f107 0320 	add.w	r3, r7, #32
 8004378:	4618      	mov	r0, r3
 800437a:	f008 fad1 	bl	800c920 <HAL_RCC_OscConfig>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004384:	f000 f900 	bl	8004588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004388:	230f      	movs	r3, #15
 800438a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800438c:	2302      	movs	r3, #2
 800438e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004394:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	2105      	movs	r1, #5
 80043a6:	4618      	mov	r0, r3
 80043a8:	f008 fd32 	bl	800ce10 <HAL_RCC_ClockConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80043b2:	f000 f8e9 	bl	8004588 <Error_Handler>
  }
}
 80043b6:	bf00      	nop
 80043b8:	3750      	adds	r7, #80	; 0x50
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000

080043c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a4c      	ldr	r2, [pc, #304]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_PeriodElapsedCallback+0x30>
		if(stwS.state){
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80043dc:	78db      	ldrb	r3, [r3, #3]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 80043e8:	f000 fb10 	bl	8004a0c <stwTick>
		}
		animationFrameNum++;
 80043ec:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80043f6:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a45      	ldr	r2, [pc, #276]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d119      	bne.n	8004436 <HAL_TIM_PeriodElapsedCallback+0x6e>
		scanButtons(btnsPtrs);
 8004402:	4845      	ldr	r0, [pc, #276]	; (8004518 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004404:	f7fd feb6 	bl	8002174 <scanButtons>
		// check timeouts
		if(timeoutState){
 8004408:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(timeoutValue == timeoutSetpoint){
 8004410:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	4b43      	ldr	r3, [pc, #268]	; (8004524 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d106      	bne.n	800442a <HAL_TIM_PeriodElapsedCallback+0x62>
				(*timeoutClbkPtr)();
 800441c:	4b42      	ldr	r3, [pc, #264]	; (8004528 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4798      	blx	r3
				timeoutState = 0;
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e005      	b.n	8004436 <HAL_TIM_PeriodElapsedCallback+0x6e>
			} else {
				timeoutValue++;
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004434:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d15e      	bne.n	80044fe <HAL_TIM_PeriodElapsedCallback+0x136>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8004440:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004442:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800444c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8004450:	4837      	ldr	r0, [pc, #220]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004452:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8004454:	2101      	movs	r1, #1
 8004456:	4837      	ldr	r0, [pc, #220]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004458:	f007 f9e9 	bl	800b82e <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800445e:	7b1b      	ldrb	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8004464:	4b35      	ldr	r3, [pc, #212]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800446e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004476:	ee17 1a90 	vmov	r1, s15
 800447a:	482f      	ldr	r0, [pc, #188]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800447c:	f006 fcbc 	bl	800adf8 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	08db      	lsrs	r3, r3, #3
 800448c:	b29b      	uxth	r3, r3
 800448e:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004492:	7c1b      	ldrb	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8004498:	f107 030e 	add.w	r3, r7, #14
 800449c:	4619      	mov	r1, r3
 800449e:	4829      	ldr	r0, [pc, #164]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80044a0:	f006 fb5b 	bl	800ab5a <cbuf_ovw>

		tim13_counter++;
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80044ae:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PeriodElapsedCallback+0x108>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	481d      	ldr	r0, [pc, #116]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80044c0:	f007 f9b5 	bl	800b82e <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]

		}
		if(isTimerRunning(&countDown1)){
 80044d0:	4820      	ldr	r0, [pc, #128]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80044d2:	f7fd fe69 	bl	80021a8 <isTimerRunning>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_TIM_PeriodElapsedCallback+0x136>
			if(countDown1.remainingSec == 0){
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80044de:	885b      	ldrh	r3, [r3, #2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <HAL_TIM_PeriodElapsedCallback+0x12a>
				alertFlag = 1;
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 80044ea:	481a      	ldr	r0, [pc, #104]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80044ec:	f7fd fe8a 	bl	8002204 <pauseTimer>
				countDown1.remainingSec--;
			}
		}

	}
}
 80044f0:	e005      	b.n	80044fe <HAL_TIM_PeriodElapsedCallback+0x136>
				countDown1.remainingSec--;
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80044f4:	885b      	ldrh	r3, [r3, #2]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80044fc:	805a      	strh	r2, [r3, #2]
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40014400 	.word	0x40014400
 800450c:	20005b74 	.word	0x20005b74
 8004510:	20005df3 	.word	0x20005df3
 8004514:	40014800 	.word	0x40014800
 8004518:	2000002c 	.word	0x2000002c
 800451c:	20005a69 	.word	0x20005a69
 8004520:	20005a6a 	.word	0x20005a6a
 8004524:	20005a6c 	.word	0x20005a6c
 8004528:	20005a70 	.word	0x20005a70
 800452c:	40001c00 	.word	0x40001c00
 8004530:	20005804 	.word	0x20005804
 8004534:	40020400 	.word	0x40020400
 8004538:	200057f4 	.word	0x200057f4
 800453c:	20002550 	.word	0x20002550
 8004540:	cccccccd 	.word	0xcccccccd
 8004544:	200057e0 	.word	0x200057e0
 8004548:	20005a68 	.word	0x20005a68
 800454c:	20000064 	.word	0x20000064
 8004550:	20000065 	.word	0x20000065
 8004554:	20000068 	.word	0x20000068
 8004558:	20005a74 	.word	0x20005a74

0800455c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a05      	ldr	r2, [pc, #20]	; (8004580 <HAL_UART_RxCpltCallback+0x24>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d103      	bne.n	8004576 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800456e:	2180      	movs	r1, #128	; 0x80
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <HAL_UART_RxCpltCallback+0x28>)
 8004572:	f007 f95c 	bl	800b82e <HAL_GPIO_TogglePin>

	}
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40011400 	.word	0x40011400
 8004584:	40020400 	.word	0x40020400

08004588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800458c:	b672      	cpsid	i
}
 800458e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004590:	2201      	movs	r2, #1
 8004592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004596:	4802      	ldr	r0, [pc, #8]	; (80045a0 <Error_Handler+0x18>)
 8004598:	f007 f930 	bl	800b7fc <HAL_GPIO_WritePin>
  while (1)
 800459c:	e7fe      	b.n	800459c <Error_Handler+0x14>
 800459e:	bf00      	nop
 80045a0:	40020400 	.word	0x40020400

080045a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80045b8:	2300      	movs	r3, #0
 80045ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <MX_RTC_Init+0x58>)
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <MX_RTC_Init+0x5c>)
 80045c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <MX_RTC_Init+0x58>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <MX_RTC_Init+0x58>)
 80045ca:	227f      	movs	r2, #127	; 0x7f
 80045cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <MX_RTC_Init+0x58>)
 80045d0:	22ff      	movs	r2, #255	; 0xff
 80045d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <MX_RTC_Init+0x58>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <MX_RTC_Init+0x58>)
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <MX_RTC_Init+0x58>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	; (80045fc <MX_RTC_Init+0x58>)
 80045e8:	f008 fff2 	bl	800d5d0 <HAL_RTC_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80045f2:	f7ff ffc9 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20005a78 	.word	0x20005a78
 8004600:	40002800 	.word	0x40002800

08004604 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	; 0x38
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	2230      	movs	r2, #48	; 0x30
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f010 f9e5 	bl	80149e4 <memset>
  if(rtcHandle->Instance==RTC)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <HAL_RTC_MspInit+0x4c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004624:	2320      	movs	r3, #32
 8004626:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f008 fe0c 	bl	800d250 <HAL_RCCEx_PeriphCLKConfig>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800463e:	f7ff ffa3 	bl	8004588 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_RTC_MspInit+0x50>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004648:	bf00      	nop
 800464a:	3738      	adds	r7, #56	; 0x38
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40002800 	.word	0x40002800
 8004654:	42470e3c 	.word	0x42470e3c

08004658 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 800465e:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <MX_SDIO_SD_Init+0x3c>)
 8004660:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 8004664:	2200      	movs	r2, #0
 8004666:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 800467c:	2200      	movs	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <MX_SDIO_SD_Init+0x38>)
 8004682:	2204      	movs	r2, #4
 8004684:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20005a98 	.word	0x20005a98
 8004694:	40012c00 	.word	0x40012c00

08004698 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a28      	ldr	r2, [pc, #160]	; (8004758 <HAL_SD_MspInit+0xc0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d14a      	bne.n	8004750 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046c8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_SD_MspInit+0xc4>)
 80046fc:	f043 0308 	orr.w	r3, r3, #8
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b16      	ldr	r3, [pc, #88]	; (800475c <HAL_SD_MspInit+0xc4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800470e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471c:	2303      	movs	r3, #3
 800471e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004720:	230c      	movs	r3, #12
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	4619      	mov	r1, r3
 800472a:	480d      	ldr	r0, [pc, #52]	; (8004760 <HAL_SD_MspInit+0xc8>)
 800472c:	f006 fea2 	bl	800b474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004730:	2304      	movs	r3, #4
 8004732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473c:	2303      	movs	r3, #3
 800473e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004740:	230c      	movs	r3, #12
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	4619      	mov	r1, r3
 800474a:	4806      	ldr	r0, [pc, #24]	; (8004764 <HAL_SD_MspInit+0xcc>)
 800474c:	f006 fe92 	bl	800b474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004750:	bf00      	nop
 8004752:	3728      	adds	r7, #40	; 0x28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40023800 	.word	0x40023800
 8004760:	40020800 	.word	0x40020800
 8004764:	40020c00 	.word	0x40020c00

08004768 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <MX_SPI1_Init+0x64>)
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <MX_SPI1_Init+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <MX_SPI1_Init+0x64>)
 8004774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <MX_SPI1_Init+0x64>)
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004780:	4b12      	ldr	r3, [pc, #72]	; (80047cc <MX_SPI1_Init+0x64>)
 8004782:	2200      	movs	r2, #0
 8004784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <MX_SPI1_Init+0x64>)
 8004788:	2200      	movs	r2, #0
 800478a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <MX_SPI1_Init+0x64>)
 800478e:	2200      	movs	r2, #0
 8004790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <MX_SPI1_Init+0x64>)
 8004794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <MX_SPI1_Init+0x64>)
 800479c:	2220      	movs	r2, #32
 800479e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <MX_SPI1_Init+0x64>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <MX_SPI1_Init+0x64>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <MX_SPI1_Init+0x64>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <MX_SPI1_Init+0x64>)
 80047b4:	220a      	movs	r2, #10
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047b8:	4804      	ldr	r0, [pc, #16]	; (80047cc <MX_SPI1_Init+0x64>)
 80047ba:	f00a f98f 	bl	800eadc <HAL_SPI_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80047c4:	f7ff fee0 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20005b1c 	.word	0x20005b1c
 80047d0:	40013000 	.word	0x40013000

080047d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_SPI_MspInit+0x84>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d12b      	bne.n	800484e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_SPI_MspInit+0x88>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_SPI_MspInit+0x88>)
 8004800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004804:	6453      	str	r3, [r2, #68]	; 0x44
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_SPI_MspInit+0x88>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_SPI_MspInit+0x88>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <HAL_SPI_MspInit+0x88>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6313      	str	r3, [r2, #48]	; 0x30
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_SPI_MspInit+0x88>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800482e:	23a0      	movs	r3, #160	; 0xa0
 8004830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004832:	2302      	movs	r3, #2
 8004834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483a:	2303      	movs	r3, #3
 800483c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800483e:	2305      	movs	r3, #5
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4619      	mov	r1, r3
 8004848:	4805      	ldr	r0, [pc, #20]	; (8004860 <HAL_SPI_MspInit+0x8c>)
 800484a:	f006 fe13 	bl	800b474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800484e:	bf00      	nop
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40013000 	.word	0x40013000
 800485c:	40023800 	.word	0x40023800
 8004860:	40020000 	.word	0x40020000

08004864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <HAL_MspInit+0x4c>)
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <HAL_MspInit+0x4c>)
 8004874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004878:	6453      	str	r3, [r2, #68]	; 0x44
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_MspInit+0x4c>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_MspInit+0x4c>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <HAL_MspInit+0x4c>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	; 0x40
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_MspInit+0x4c>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800

080048b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <NMI_Handler+0x4>

080048ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 80048be:	f7ff fe63 	bl	8004588 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048c2:	e7fe      	b.n	80048c2 <HardFault_Handler+0x8>

080048c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <MemManage_Handler+0x4>

080048ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ce:	e7fe      	b.n	80048ce <BusFault_Handler+0x4>

080048d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048d4:	e7fe      	b.n	80048d4 <UsageFault_Handler+0x4>

080048d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004904:	f006 fbda 	bl	800b0bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}

0800490c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004910:	4803      	ldr	r0, [pc, #12]	; (8004920 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004912:	f00a fd83 	bl	800f41c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004916:	4803      	ldr	r0, [pc, #12]	; (8004924 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004918:	f00a fd80 	bl	800f41c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20005b80 	.word	0x20005b80
 8004924:	20005bc8 	.word	0x20005bc8

08004928 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800492c:	4803      	ldr	r0, [pc, #12]	; (800493c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800492e:	f00a fd75 	bl	800f41c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004932:	4803      	ldr	r0, [pc, #12]	; (8004940 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004934:	f00a fd72 	bl	800f41c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20005b80 	.word	0x20005b80
 8004940:	20005c10 	.word	0x20005c10

08004944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8004948:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800494c:	f006 ff8a 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8004950:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004954:	f006 ff86 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004958:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800495c:	f006 ff82 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8004960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004964:	f006 ff7e 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004968:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800496c:	f006 ff7a 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004974:	f006 ff76 	bl	800b864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}

0800497c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004982:	f00a fd4b 	bl	800f41c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20005c58 	.word	0x20005c58

08004990 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8004994:	2228      	movs	r2, #40	; 0x28
 8004996:	2100      	movs	r1, #0
 8004998:	4804      	ldr	r0, [pc, #16]	; (80049ac <clearTable+0x1c>)
 800499a:	f010 f823 	bl	80149e4 <memset>
	stwT.position = 0;
 800499e:	4b03      	ldr	r3, [pc, #12]	; (80049ac <clearTable+0x1c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000070 	.word	0x20000070

080049b0 <addItem>:
void addItem(stw_struct stwS){
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <addItem+0x38>)
 80049c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <addItem+0x38>)
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <addItem+0x38>)
 80049ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <addItem+0x38>)
 80049d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	20000070 	.word	0x20000070

080049ec <stwStart>:

void stwStart(void){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 80049f0:	4804      	ldr	r0, [pc, #16]	; (8004a04 <stwStart+0x18>)
 80049f2:	f00a fb53 	bl	800f09c <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 80049f6:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <stwStart+0x1c>)
 80049f8:	78d3      	ldrb	r3, [r2, #3]
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	70d3      	strb	r3, [r2, #3]
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20005bc8 	.word	0x20005bc8
 8004a08:	20005b74 	.word	0x20005b74

08004a0c <stwTick>:
void stwTick(void){
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <stwTick+0x28>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a1e:	4905      	ldr	r1, [pc, #20]	; (8004a34 <stwTick+0x28>)
 8004a20:	680b      	ldr	r3, [r1, #0]
 8004a22:	f362 0317 	bfi	r3, r2, #0, #24
 8004a26:	600b      	str	r3, [r1, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20005b74 	.word	0x20005b74

08004a38 <stwStop>:
void stwStop(void){
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <stwStop+0x18>)
 8004a3e:	78d3      	ldrb	r3, [r2, #3]
 8004a40:	f36f 0300 	bfc	r3, #0, #1
 8004a44:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8004a46:	4803      	ldr	r0, [pc, #12]	; (8004a54 <stwStop+0x1c>)
 8004a48:	f00a fb98 	bl	800f17c <HAL_TIM_Base_Stop_IT>

}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20005b74 	.word	0x20005b74
 8004a54:	20005bc8 	.word	0x20005bc8

08004a58 <stwClear>:
void stwClear(void){
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <stwClear+0x20>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2200      	movs	r2, #0
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <stwClear+0x24>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	f36f 0317 	bfc	r3, #0, #24
 8004a6c:	6013      	str	r3, [r2, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20005bc8 	.word	0x20005bc8
 8004a7c:	20005b74 	.word	0x20005b74

08004a80 <stwSave>:
void stwSave(void){
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <stwSave+0x18>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <stwSave+0x1c>)
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000070 	.word	0x20000070
 8004a9c:	20005b74 	.word	0x20005b74

08004aa0 <getStw>:

uint16_t getStw(void){
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <getStw+0x20>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <getStw+0x24>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b29b      	uxth	r3, r3
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20005bc8 	.word	0x20005bc8
 8004ac4:	51eb851f 	.word	0x51eb851f

08004ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	return 1;
 8004acc:	2301      	movs	r3, #1
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <_kill>:

int _kill(int pid, int sig)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ae2:	f00f ff25 	bl	8014930 <__errno>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2216      	movs	r2, #22
 8004aea:	601a      	str	r2, [r3, #0]
	return -1;
 8004aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_exit>:

void _exit (int status)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b00:	f04f 31ff 	mov.w	r1, #4294967295
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffe7 	bl	8004ad8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b0a:	e7fe      	b.n	8004b0a <_exit+0x12>

08004b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e00a      	b.n	8004b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b1e:	f3af 8000 	nop.w
 8004b22:	4601      	mov	r1, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	60ba      	str	r2, [r7, #8]
 8004b2a:	b2ca      	uxtb	r2, r1
 8004b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	dbf0      	blt.n	8004b1e <_read+0x12>
	}

return len;
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e009      	b.n	8004b6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	60ba      	str	r2, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fa63 	bl	800402c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	dbf1      	blt.n	8004b58 <_write+0x12>
	}
	return len;
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <_close>:

int _close(int file)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
	return -1;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <_isatty>:

int _isatty(int file)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8004bbe:	2301      	movs	r3, #1
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <_sbrk+0x50>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <_sbrk+0x16>
		heap_end = &end;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <_sbrk+0x50>)
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <_sbrk+0x54>)
 8004bfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <_sbrk+0x50>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <_sbrk+0x50>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	466a      	mov	r2, sp
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d907      	bls.n	8004c22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c12:	f00f fe8d 	bl	8014930 <__errno>
 8004c16:	4603      	mov	r3, r0
 8004c18:	220c      	movs	r2, #12
 8004c1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e006      	b.n	8004c30 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <_sbrk+0x50>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	4a03      	ldr	r2, [pc, #12]	; (8004c38 <_sbrk+0x50>)
 8004c2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20005b7c 	.word	0x20005b7c
 8004c3c:	20005e80 	.word	0x20005e80

08004c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <SystemInit+0x20>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <SystemInit+0x20>)
 8004c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b096      	sub	sp, #88	; 0x58
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	615a      	str	r2, [r3, #20]
 8004c94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	2220      	movs	r2, #32
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00f fea1 	bl	80149e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004ca4:	4a3f      	ldr	r2, [pc, #252]	; (8004da4 <MX_TIM1_Init+0x140>)
 8004ca6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004ca8:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004caa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004cae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cca:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004ccc:	2280      	movs	r2, #128	; 0x80
 8004cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cd0:	4833      	ldr	r0, [pc, #204]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cd2:	f00a f993 	bl	800effc <HAL_TIM_Base_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004cdc:	f7ff fc54 	bl	8004588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cea:	4619      	mov	r1, r3
 8004cec:	482c      	ldr	r0, [pc, #176]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cee:	f00a fd5f 	bl	800f7b0 <HAL_TIM_ConfigClockSource>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004cf8:	f7ff fc46 	bl	8004588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cfc:	4828      	ldr	r0, [pc, #160]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004cfe:	f00a fa6c 	bl	800f1da <HAL_TIM_PWM_Init>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004d08:	f7ff fc3e 	bl	8004588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4821      	ldr	r0, [pc, #132]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004d1c:	f00b f948 	bl	800ffb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004d26:	f7ff fc2f 	bl	8004588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d2a:	2360      	movs	r3, #96	; 0x60
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d32:	2300      	movs	r3, #0
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d36:	2300      	movs	r3, #0
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4814      	ldr	r0, [pc, #80]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004d50:	f00a fc6c 	bl	800f62c <HAL_TIM_PWM_ConfigChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004d5a:	f7ff fc15 	bl	8004588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4807      	ldr	r0, [pc, #28]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004d82:	f00b f991 	bl	80100a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004d8c:	f7ff fbfc 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <MX_TIM1_Init+0x13c>)
 8004d92:	f000 f963 	bl	800505c <HAL_TIM_MspPostInit>

}
 8004d96:	bf00      	nop
 8004d98:	3758      	adds	r7, #88	; 0x58
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20005b80 	.word	0x20005b80
 8004da4:	40010000 	.word	0x40010000

08004da8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dae:	4a0f      	ldr	r2, [pc, #60]	; (8004dec <MX_TIM10_Init+0x44>)
 8004db0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004db4:	f244 129f 	movw	r2, #16799	; 0x419f
 8004db8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004dc6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dd0:	2280      	movs	r2, #128	; 0x80
 8004dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004dd4:	4804      	ldr	r0, [pc, #16]	; (8004de8 <MX_TIM10_Init+0x40>)
 8004dd6:	f00a f911 	bl	800effc <HAL_TIM_Base_Init>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004de0:	f7ff fbd2 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20005bc8 	.word	0x20005bc8
 8004dec:	40014400 	.word	0x40014400

08004df0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <MX_TIM11_Init+0x44>)
 8004df8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004dfc:	f244 129f 	movw	r2, #16799	; 0x419f
 8004e00:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004e0a:	2263      	movs	r2, #99	; 0x63
 8004e0c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004e1a:	4805      	ldr	r0, [pc, #20]	; (8004e30 <MX_TIM11_Init+0x40>)
 8004e1c:	f00a f8ee 	bl	800effc <HAL_TIM_Base_Init>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004e26:	f7ff fbaf 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20005c10 	.word	0x20005c10
 8004e34:	40014800 	.word	0x40014800

08004e38 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <MX_TIM13_Init+0x44>)
 8004e40:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004e48:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e52:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e56:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e58:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e60:	2280      	movs	r2, #128	; 0x80
 8004e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004e64:	4804      	ldr	r0, [pc, #16]	; (8004e78 <MX_TIM13_Init+0x40>)
 8004e66:	f00a f8c9 	bl	800effc <HAL_TIM_Base_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004e70:	f7ff fb8a 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004e74:	bf00      	nop
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20005c58 	.word	0x20005c58
 8004e7c:	40001c00 	.word	0x40001c00

08004e80 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
 8004e94:	615a      	str	r2, [r3, #20]
 8004e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <MX_TIM14_Init+0x98>)
 8004e9c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004ea0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004ea4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004eae:	2263      	movs	r2, #99	; 0x63
 8004eb0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004ebe:	4815      	ldr	r0, [pc, #84]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004ec0:	f00a f89c 	bl	800effc <HAL_TIM_Base_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004eca:	f7ff fb5d 	bl	8004588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004ece:	4811      	ldr	r0, [pc, #68]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004ed0:	f00a f983 	bl	800f1da <HAL_TIM_PWM_Init>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004eda:	f7ff fb55 	bl	8004588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ede:	2360      	movs	r3, #96	; 0x60
 8004ee0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4807      	ldr	r0, [pc, #28]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004ef6:	f00a fb99 	bl	800f62c <HAL_TIM_PWM_ConfigChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004f00:	f7ff fb42 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004f04:	4803      	ldr	r0, [pc, #12]	; (8004f14 <MX_TIM14_Init+0x94>)
 8004f06:	f000 f8a9 	bl	800505c <HAL_TIM_MspPostInit>

}
 8004f0a:	bf00      	nop
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20005ca0 	.word	0x20005ca0
 8004f18:	40002000 	.word	0x40002000

08004f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a46      	ldr	r2, [pc, #280]	; (8005044 <HAL_TIM_Base_MspInit+0x128>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d11e      	bne.n	8004f6c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	4b45      	ldr	r3, [pc, #276]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	4a44      	ldr	r2, [pc, #272]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3e:	4b42      	ldr	r3, [pc, #264]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2019      	movs	r0, #25
 8004f50:	f006 f9d3 	bl	800b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f54:	2019      	movs	r0, #25
 8004f56:	f006 f9ec 	bl	800b332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	201a      	movs	r0, #26
 8004f60:	f006 f9cb 	bl	800b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f64:	201a      	movs	r0, #26
 8004f66:	f006 f9e4 	bl	800b332 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004f6a:	e066      	b.n	800503a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a36      	ldr	r2, [pc, #216]	; (800504c <HAL_TIM_Base_MspInit+0x130>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d116      	bne.n	8004fa4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	4b33      	ldr	r3, [pc, #204]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	4a32      	ldr	r2, [pc, #200]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f84:	6453      	str	r3, [r2, #68]	; 0x44
 8004f86:	4b30      	ldr	r3, [pc, #192]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004f92:	2200      	movs	r2, #0
 8004f94:	2100      	movs	r1, #0
 8004f96:	2019      	movs	r0, #25
 8004f98:	f006 f9af 	bl	800b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f9c:	2019      	movs	r0, #25
 8004f9e:	f006 f9c8 	bl	800b332 <HAL_NVIC_EnableIRQ>
}
 8004fa2:	e04a      	b.n	800503a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_TIM_Base_MspInit+0x134>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d116      	bne.n	8004fdc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	201a      	movs	r0, #26
 8004fd0:	f006 f993 	bl	800b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004fd4:	201a      	movs	r0, #26
 8004fd6:	f006 f9ac 	bl	800b332 <HAL_NVIC_EnableIRQ>
}
 8004fda:	e02e      	b.n	800503a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_TIM_Base_MspInit+0x138>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d116      	bne.n	8005014 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	202c      	movs	r0, #44	; 0x2c
 8005008:	f006 f977 	bl	800b2fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800500c:	202c      	movs	r0, #44	; 0x2c
 800500e:	f006 f990 	bl	800b332 <HAL_NVIC_EnableIRQ>
}
 8005012:	e012      	b.n	800503a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a0f      	ldr	r2, [pc, #60]	; (8005058 <HAL_TIM_Base_MspInit+0x13c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d10d      	bne.n	800503a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4a08      	ldr	r2, [pc, #32]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_TIM_Base_MspInit+0x12c>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
}
 800503a:	bf00      	nop
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40023800 	.word	0x40023800
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800
 8005054:	40001c00 	.word	0x40001c00
 8005058:	40002000 	.word	0x40002000

0800505c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	60da      	str	r2, [r3, #12]
 8005072:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <HAL_TIM_MspPostInit+0xb4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d11f      	bne.n	80050be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	4a23      	ldr	r2, [pc, #140]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 8005088:	f043 0310 	orr.w	r3, r3, #16
 800508c:	6313      	str	r3, [r2, #48]	; 0x30
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800509a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800509e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	2300      	movs	r3, #0
 80050aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050ac:	2301      	movs	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	4619      	mov	r1, r3
 80050b6:	4818      	ldr	r0, [pc, #96]	; (8005118 <HAL_TIM_MspPostInit+0xbc>)
 80050b8:	f006 f9dc 	bl	800b474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80050bc:	e023      	b.n	8005106 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_TIM_MspPostInit+0xc0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d11e      	bne.n	8005106 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4a10      	ldr	r2, [pc, #64]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6313      	str	r3, [r2, #48]	; 0x30
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <HAL_TIM_MspPostInit+0xb8>)
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ea:	2302      	movs	r3, #2
 80050ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80050f6:	2309      	movs	r3, #9
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	4807      	ldr	r0, [pc, #28]	; (8005120 <HAL_TIM_MspPostInit+0xc4>)
 8005102:	f006 f9b7 	bl	800b474 <HAL_GPIO_Init>
}
 8005106:	bf00      	nop
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40023800 	.word	0x40023800
 8005118:	40021000 	.word	0x40021000
 800511c:	40002000 	.word	0x40002000
 8005120:	40021400 	.word	0x40021400

08005124 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <MX_USART3_UART_Init+0x50>)
 800512c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 8005130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 8005138:	2200      	movs	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 800513e:	2200      	movs	r2, #0
 8005140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 8005144:	2200      	movs	r2, #0
 8005146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 800514a:	220c      	movs	r2, #12
 800514c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 8005150:	2200      	movs	r2, #0
 8005152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800515a:	4805      	ldr	r0, [pc, #20]	; (8005170 <MX_USART3_UART_Init+0x4c>)
 800515c:	f00b f80a 	bl	8010174 <HAL_UART_Init>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005166:	f7ff fa0f 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20005ce8 	.word	0x20005ce8
 8005174:	40004800 	.word	0x40004800

08005178 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800517e:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <MX_USART6_UART_Init+0x50>)
 8005180:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005188:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800518a:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 800519e:	220c      	movs	r2, #12
 80051a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80051ae:	4805      	ldr	r0, [pc, #20]	; (80051c4 <MX_USART6_UART_Init+0x4c>)
 80051b0:	f00a ffe0 	bl	8010174 <HAL_UART_Init>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80051ba:	f7ff f9e5 	bl	8004588 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20005d2c 	.word	0x20005d2c
 80051c8:	40011400 	.word	0x40011400

080051cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	; 0x30
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d4:	f107 031c 	add.w	r3, r7, #28
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	60da      	str	r2, [r3, #12]
 80051e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <HAL_UART_MspInit+0xe8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d12d      	bne.n	800524a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_UART_MspInit+0xec>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <HAL_UART_MspInit+0xec>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051fc:	6413      	str	r3, [r2, #64]	; 0x40
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	6313      	str	r3, [r2, #48]	; 0x30
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_UART_MspInit+0xec>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800522a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	2302      	movs	r3, #2
 800522e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005234:	2303      	movs	r3, #3
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005238:	2307      	movs	r3, #7
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800523c:	f107 031c 	add.w	r3, r7, #28
 8005240:	4619      	mov	r1, r3
 8005242:	481e      	ldr	r0, [pc, #120]	; (80052bc <HAL_UART_MspInit+0xf0>)
 8005244:	f006 f916 	bl	800b474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005248:	e030      	b.n	80052ac <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_UART_MspInit+0xf4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d12b      	bne.n	80052ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_UART_MspInit+0xec>)
 800525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <HAL_UART_MspInit+0xec>)
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	6453      	str	r3, [r2, #68]	; 0x44
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_UART_MspInit+0xec>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	6313      	str	r3, [r2, #48]	; 0x30
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <HAL_UART_MspInit+0xec>)
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800528c:	23c0      	movs	r3, #192	; 0xc0
 800528e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005290:	2302      	movs	r3, #2
 8005292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005298:	2303      	movs	r3, #3
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800529c:	2308      	movs	r3, #8
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052a0:	f107 031c 	add.w	r3, r7, #28
 80052a4:	4619      	mov	r1, r3
 80052a6:	4807      	ldr	r0, [pc, #28]	; (80052c4 <HAL_UART_MspInit+0xf8>)
 80052a8:	f006 f8e4 	bl	800b474 <HAL_GPIO_Init>
}
 80052ac:	bf00      	nop
 80052ae:	3730      	adds	r7, #48	; 0x30
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40004800 	.word	0x40004800
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40020c00 	.word	0x40020c00
 80052c0:	40011400 	.word	0x40011400
 80052c4:	40020800 	.word	0x40020800

080052c8 <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <enableVib+0x18>)
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <enableVib+0x1c>)
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	200000ac 	.word	0x200000ac
 80052e4:	40002000 	.word	0x40002000

080052e8 <disableVib>:
void disableVib(void){
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <disableVib+0x14>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80052f2:	bf00      	nop
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40002000 	.word	0x40002000

08005300 <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	460a      	mov	r2, r1
 800530a:	80fb      	strh	r3, [r7, #6]
 800530c:	4613      	mov	r3, r2
 800530e:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 8005310:	4a06      	ldr	r2, [pc, #24]	; (800532c <pulseVib+0x2c>)
 8005312:	797b      	ldrb	r3, [r7, #5]
 8005314:	7013      	strb	r3, [r2, #0]
	enableVib();
 8005316:	f7ff ffd7 	bl	80052c8 <enableVib>
	setTimeout(duration, &disableVib);
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	4904      	ldr	r1, [pc, #16]	; (8005330 <pulseVib+0x30>)
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fe92 	bl	8004048 <setTimeout>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	200000ac 	.word	0x200000ac
 8005330:	080052e9 	.word	0x080052e9

08005334 <addAlarm>:
#include "fonts/fonts.h"
#include "../Src/pageModules/guiUtils/valueSelector.h"


//struct alarmType alarmList[5];
void addAlarm(uint8_t hour, uint8_t min){
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	460a      	mov	r2, r1
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	4613      	mov	r3, r2
 8005342:	71bb      	strb	r3, [r7, #6]
	if(alarmCount < 5){
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <addAlarm+0x48>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d812      	bhi.n	8005372 <addAlarm+0x3e>
		alarmList[alarmCount] = createAlarm(hour, min);
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <addAlarm+0x48>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	461c      	mov	r4, r3
 8005352:	79ba      	ldrb	r2, [r7, #6]
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f813 	bl	8005384 <createAlarm>
 800535e:	4603      	mov	r3, r0
 8005360:	4a07      	ldr	r2, [pc, #28]	; (8005380 <addAlarm+0x4c>)
 8005362:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		alarmCount++;
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <addAlarm+0x48>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b03      	ldr	r3, [pc, #12]	; (800537c <addAlarm+0x48>)
 8005370:	701a      	strb	r2, [r3, #0]
	}
//	else {
////		return ERROR_FAIL;
//	}
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop
 800537c:	20005d70 	.word	0x20005d70
 8005380:	20005d74 	.word	0x20005d74

08005384 <createAlarm>:

struct alarmType *createAlarm(uint8_t hour, uint8_t min){
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	460a      	mov	r2, r1
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	4613      	mov	r3, r2
 8005392:	71bb      	strb	r3, [r7, #6]
	struct alarmType *alm;
	alm = malloc(sizeof (struct alarmType));
 8005394:	2003      	movs	r0, #3
 8005396:	f00f fb07 	bl	80149a8 <malloc>
 800539a:	4603      	mov	r3, r0
 800539c:	60fb      	str	r3, [r7, #12]
	alm->hour = hour;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	79fa      	ldrb	r2, [r7, #7]
 80053a2:	701a      	strb	r2, [r3, #0]
	alm->min = min;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	79ba      	ldrb	r2, [r7, #6]
 80053a8:	705a      	strb	r2, [r3, #1]
	return alm;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <nextPosition>:
}

uint8_t alarmPosition;
uint8_t isAlarmEditModeOn = 0;

void nextPosition(void){
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
	if(alarmPosition < alarmCount){
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <nextPosition+0x30>)
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <nextPosition+0x34>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d206      	bcs.n	80053d2 <nextPosition+0x1e>
		alarmPosition++;
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <nextPosition+0x30>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <nextPosition+0x30>)
 80053ce:	701a      	strb	r2, [r3, #0]
	} else {
		alarmPosition = 0;
	}
}
 80053d0:	e002      	b.n	80053d8 <nextPosition+0x24>
		alarmPosition = 0;
 80053d2:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <nextPosition+0x30>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20005d88 	.word	0x20005d88
 80053e8:	20005d70 	.word	0x20005d70

080053ec <prevPosition>:
void prevPosition(void){
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
	if(alarmPosition > 0){
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <prevPosition+0x2c>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <prevPosition+0x1a>
		alarmPosition--;
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <prevPosition+0x2c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <prevPosition+0x2c>)
 8005402:	701a      	strb	r2, [r3, #0]
	} else {
		alarmPosition = alarmCount;
	}
}
 8005404:	e003      	b.n	800540e <prevPosition+0x22>
		alarmPosition = alarmCount;
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <prevPosition+0x30>)
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <prevPosition+0x2c>)
 800540c:	701a      	strb	r2, [r3, #0]
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20005d88 	.word	0x20005d88
 800541c:	20005d70 	.word	0x20005d70

08005420 <toggleEditAlarmMode>:
void toggleEditAlarmMode(void){
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	isAlarmEditModeOn = !isAlarmEditModeOn;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <toggleEditAlarmMode+0x40>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <toggleEditAlarmMode+0x40>)
 8005436:	701a      	strb	r2, [r3, #0]
	if(isAlarmEditModeOn){
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <toggleEditAlarmMode+0x40>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <toggleEditAlarmMode+0x36>
		setEditModeClbcks();
 8005440:	f000 f812 	bl	8005468 <setEditModeClbcks>
		if(alarmCount == 0){
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <toggleEditAlarmMode+0x44>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <toggleEditAlarmMode+0x3a>
			addAlarm(1, 23);
 800544c:	2117      	movs	r1, #23
 800544e:	2001      	movs	r0, #1
 8005450:	f7ff ff70 	bl	8005334 <addAlarm>
		}
	} else {
		setDefaultClbcks();
	}
}
 8005454:	e001      	b.n	800545a <toggleEditAlarmMode+0x3a>
		setDefaultClbcks();
 8005456:	f000 f823 	bl	80054a0 <setDefaultClbcks>
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20005d89 	.word	0x20005d89
 8005464:	20005d70 	.word	0x20005d70

08005468 <setEditModeClbcks>:

void setEditModeClbcks(void){
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	resetButtonHandlers();
 800546c:	f7fc fd54 	bl	8001f18 <resetButtonHandlers>
	btn_BA.onSinglePressHandler = &nextPosition;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <setEditModeClbcks+0x20>)
 8005472:	4a06      	ldr	r2, [pc, #24]	; (800548c <setEditModeClbcks+0x24>)
 8005474:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevPosition;
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <setEditModeClbcks+0x28>)
 8005478:	4a06      	ldr	r2, [pc, #24]	; (8005494 <setEditModeClbcks+0x2c>)
 800547a:	611a      	str	r2, [r3, #16]


	btn_B1.onSinglePressHandler = &toggleEditAlarmMode;
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <setEditModeClbcks+0x30>)
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <setEditModeClbcks+0x34>)
 8005480:	611a      	str	r2, [r3, #16]
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20002560 	.word	0x20002560
 800548c:	080053b5 	.word	0x080053b5
 8005490:	200025f0 	.word	0x200025f0
 8005494:	080053ed 	.word	0x080053ed
 8005498:	20002638 	.word	0x20002638
 800549c:	08005421 	.word	0x08005421

080054a0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <setDefaultClbcks+0x20>)
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <setDefaultClbcks+0x24>)
 80054a8:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <setDefaultClbcks+0x28>)
 80054ac:	4a07      	ldr	r2, [pc, #28]	; (80054cc <setDefaultClbcks+0x2c>)
 80054ae:	611a      	str	r2, [r3, #16]

	btn_BB.onSinglePressHandler = &toggleEditAlarmMode;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <setDefaultClbcks+0x30>)
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <setDefaultClbcks+0x34>)
 80054b4:	611a      	str	r2, [r3, #16]
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20002560 	.word	0x20002560
 80054c4:	08002bd9 	.word	0x08002bd9
 80054c8:	200025f0 	.word	0x200025f0
 80054cc:	08002be9 	.word	0x08002be9
 80054d0:	200025a8 	.word	0x200025a8
 80054d4:	08005421 	.word	0x08005421

080054d8 <alarmSetup>:

void alarmSetup(void){
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80054dc:	f7ff ffe0 	bl	80054a0 <setDefaultClbcks>
	isAlarmEditModeOn = 0;
 80054e0:	4b02      	ldr	r3, [pc, #8]	; (80054ec <alarmSetup+0x14>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20005d89 	.word	0x20005d89

080054f0 <alarmMain>:

void alarmMain(void){
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b090      	sub	sp, #64	; 0x40
 80054f4:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	f107 0308 	add.w	r3, r7, #8
 80054fe:	222f      	movs	r2, #47	; 0x2f
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f00f fa6e 	bl	80149e4 <memset>
	sprintf(&tempStr, "Alarms");
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	4950      	ldr	r1, [pc, #320]	; (800564c <alarmMain+0x15c>)
 800550c:	4618      	mov	r0, r3
 800550e:	f010 fb97 	bl	8015c40 <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 8005512:	1d3a      	adds	r2, r7, #4
 8005514:	4b4e      	ldr	r3, [pc, #312]	; (8005650 <alarmMain+0x160>)
 8005516:	210a      	movs	r1, #10
 8005518:	200a      	movs	r0, #10
 800551a:	f7fd febf 	bl	800329c <lcdPutStr>
	lcdHLine2(10, 390, 40, 1, 2);
 800551e:	2302      	movs	r3, #2
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2301      	movs	r3, #1
 8005524:	2228      	movs	r2, #40	; 0x28
 8005526:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800552a:	200a      	movs	r0, #10
 800552c:	f7fd ffb8 	bl	80034a0 <lcdHLine2>

	if(alarmCount == 0){
 8005530:	4b48      	ldr	r3, [pc, #288]	; (8005654 <alarmMain+0x164>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <alarmMain+0x60>
		sprintf(&tempStr, "No alarms");
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	4947      	ldr	r1, [pc, #284]	; (8005658 <alarmMain+0x168>)
 800553c:	4618      	mov	r0, r3
 800553e:	f010 fb7f 	bl	8015c40 <siprintf>
		lcdPutStr(170, 120, tempStr, font_12_zekton);
 8005542:	1d3a      	adds	r2, r7, #4
 8005544:	4b45      	ldr	r3, [pc, #276]	; (800565c <alarmMain+0x16c>)
 8005546:	2178      	movs	r1, #120	; 0x78
 8005548:	20aa      	movs	r0, #170	; 0xaa
 800554a:	f7fd fea7 	bl	800329c <lcdPutStr>
 800554e:	e069      	b.n	8005624 <alarmMain+0x134>
	} else {
		// could be removed from /else/ cause for alarmCount==0 loop will not execute
		for(uint8_t i = 0; i < alarmCount; i++){
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005556:	e046      	b.n	80055e6 <alarmMain+0xf6>
			sprintf(&tempStr, "%d:%d", alarmList[i]->hour, alarmList[i]->min);
 8005558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800555c:	4a40      	ldr	r2, [pc, #256]	; (8005660 <alarmMain+0x170>)
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	4619      	mov	r1, r3
 8005566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800556a:	4a3d      	ldr	r2, [pc, #244]	; (8005660 <alarmMain+0x170>)
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	1d38      	adds	r0, r7, #4
 8005574:	460a      	mov	r2, r1
 8005576:	493b      	ldr	r1, [pc, #236]	; (8005664 <alarmMain+0x174>)
 8005578:	f010 fb62 	bl	8015c40 <siprintf>
			lcdPutStr(250, 45+i*30, tempStr, zekton24font);
 800557c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005580:	461a      	mov	r2, r3
 8005582:	0112      	lsls	r2, r2, #4
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	332d      	adds	r3, #45	; 0x2d
 800558c:	b2d9      	uxtb	r1, r3
 800558e:	1d3a      	adds	r2, r7, #4
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <alarmMain+0x160>)
 8005592:	20fa      	movs	r0, #250	; 0xfa
 8005594:	f7fd fe82 	bl	800329c <lcdPutStr>
			if(alarmList[i]->isActive){
 8005598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800559c:	4a30      	ldr	r2, [pc, #192]	; (8005660 <alarmMain+0x170>)
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	789b      	ldrb	r3, [r3, #2]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <alarmMain+0xc4>
				sprintf(&tempStr, "on");
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	492f      	ldr	r1, [pc, #188]	; (8005668 <alarmMain+0x178>)
 80055ac:	4618      	mov	r0, r3
 80055ae:	f010 fb47 	bl	8015c40 <siprintf>
 80055b2:	e004      	b.n	80055be <alarmMain+0xce>
			} else {
				sprintf(&tempStr, "off");
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	492d      	ldr	r1, [pc, #180]	; (800566c <alarmMain+0x17c>)
 80055b8:	4618      	mov	r0, r3
 80055ba:	f010 fb41 	bl	8015c40 <siprintf>
			}
			lcdPutStr(350, 45+i*30, tempStr, font_12_zekton);
 80055be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055c2:	461a      	mov	r2, r3
 80055c4:	0112      	lsls	r2, r2, #4
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	332d      	adds	r3, #45	; 0x2d
 80055ce:	b2d9      	uxtb	r1, r3
 80055d0:	1d3a      	adds	r2, r7, #4
 80055d2:	4b22      	ldr	r3, [pc, #136]	; (800565c <alarmMain+0x16c>)
 80055d4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055d8:	f7fd fe60 	bl	800329c <lcdPutStr>
		for(uint8_t i = 0; i < alarmCount; i++){
 80055dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055e0:	3301      	adds	r3, #1
 80055e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055e6:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <alarmMain+0x164>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3b2      	bcc.n	8005558 <alarmMain+0x68>

		}
	lcdRect(350, 375, 63+alarmPosition*30, 65+alarmPosition*30, 1);
 80055f2:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <alarmMain+0x180>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8005604:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <alarmMain+0x180>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	4619      	mov	r1, r3
 800560a:	460b      	mov	r3, r1
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	3341      	adds	r3, #65	; 0x41
 8005614:	2101      	movs	r1, #1
 8005616:	9100      	str	r1, [sp, #0]
 8005618:	f240 1177 	movw	r1, #375	; 0x177
 800561c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005620:	f7fe fc5a 	bl	8003ed8 <lcdRect>
	}
	if(alarmCount < 5){
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <alarmMain+0x164>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d80b      	bhi.n	8005644 <alarmMain+0x154>
		sprintf(&tempStr, "+");
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	4911      	ldr	r1, [pc, #68]	; (8005674 <alarmMain+0x184>)
 8005630:	4618      	mov	r0, r3
 8005632:	f010 fb05 	bl	8015c40 <siprintf>
		lcdPutStr(375, 110, tempStr, zekton24font);
 8005636:	1d3a      	adds	r2, r7, #4
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <alarmMain+0x160>)
 800563a:	216e      	movs	r1, #110	; 0x6e
 800563c:	f240 1077 	movw	r0, #375	; 0x177
 8005640:	f7fd fe2c 	bl	800329c <lcdPutStr>
//	numSelector.valPtr = &AdjVar;
//	numSelector.draw();

//	drawNumberSelector(&AdjVar);

}
 8005644:	bf00      	nop
 8005646:	3738      	adds	r7, #56	; 0x38
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0801d06c 	.word	0x0801d06c
 8005650:	08020b88 	.word	0x08020b88
 8005654:	20005d70 	.word	0x20005d70
 8005658:	0801d074 	.word	0x0801d074
 800565c:	08020100 	.word	0x08020100
 8005660:	20005d74 	.word	0x20005d74
 8005664:	0801d080 	.word	0x0801d080
 8005668:	0801d088 	.word	0x0801d088
 800566c:	0801d08c 	.word	0x0801d08c
 8005670:	20005d88 	.word	0x20005d88
 8005674:	0801d090 	.word	0x0801d090

08005678 <setDefaultClbcks>:
#include "fonts/fonts.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t altitudeMode = 1;

static void setDefaultClbcks(void){
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <setDefaultClbcks+0x38>)
 800567e:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <setDefaultClbcks+0x3c>)
 8005680:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <setDefaultClbcks+0x40>)
 8005684:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <setDefaultClbcks+0x44>)
 8005686:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &changeAltiMode;
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <setDefaultClbcks+0x48>)
 800568a:	4a0e      	ldr	r2, [pc, #56]	; (80056c4 <setDefaultClbcks+0x4c>)
 800568c:	611a      	str	r2, [r3, #16]
	btn_B3.onContinuousShortPressHandler = &increaseAltitude;
 800568e:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <setDefaultClbcks+0x50>)
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <setDefaultClbcks+0x54>)
 8005692:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &decreaseAltitude;
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <setDefaultClbcks+0x58>)
 8005696:	4a0f      	ldr	r2, [pc, #60]	; (80056d4 <setDefaultClbcks+0x5c>)
 8005698:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = &setRefAltitude;
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <setDefaultClbcks+0x60>)
 800569c:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <setDefaultClbcks+0x64>)
 800569e:	611a      	str	r2, [r3, #16]
	btn_B2.onSingleLongPressHandler = &clearRefAltitude;
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <setDefaultClbcks+0x60>)
 80056a2:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <setDefaultClbcks+0x68>)
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20002560 	.word	0x20002560
 80056b4:	08002bd9 	.word	0x08002bd9
 80056b8:	200025f0 	.word	0x200025f0
 80056bc:	08002be9 	.word	0x08002be9
 80056c0:	200025a8 	.word	0x200025a8
 80056c4:	08005d25 	.word	0x08005d25
 80056c8:	200026c8 	.word	0x200026c8
 80056cc:	08005d69 	.word	0x08005d69
 80056d0:	20002638 	.word	0x20002638
 80056d4:	08005db5 	.word	0x08005db5
 80056d8:	20002680 	.word	0x20002680
 80056dc:	08005ce9 	.word	0x08005ce9
 80056e0:	08005d09 	.word	0x08005d09

080056e4 <altiSetup>:

// function executed once on module load
void altiSetup(void){
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80056e8:	f7ff ffc6 	bl	8005678 <setDefaultClbcks>
	minAltitude = bmpData.altitude;
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <altiSetup+0x1c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <altiSetup+0x20>)
 80056f2:	6013      	str	r3, [r2, #0]
	minPressure = bmpData.slpress;
 80056f4:	4b02      	ldr	r3, [pc, #8]	; (8005700 <altiSetup+0x1c>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a03      	ldr	r2, [pc, #12]	; (8005708 <altiSetup+0x24>)
 80056fa:	6013      	str	r3, [r2, #0]
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20002550 	.word	0x20002550
 8005704:	20005d90 	.word	0x20005d90
 8005708:	20005d98 	.word	0x20005d98

0800570c <altiMain>:

// main function
void altiMain(void){
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b096      	sub	sp, #88	; 0x58
 8005710:	af02      	add	r7, sp, #8
	bmpData = getBmpData(&bmp180module);
 8005712:	4cab      	ldr	r4, [pc, #684]	; (80059c0 <altiMain+0x2b4>)
 8005714:	463b      	mov	r3, r7
 8005716:	49ab      	ldr	r1, [pc, #684]	; (80059c4 <altiMain+0x2b8>)
 8005718:	4618      	mov	r0, r3
 800571a:	f7fc fae1 	bl	8001ce0 <getBmpData>
 800571e:	463b      	mov	r3, r7
 8005720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// header bar temperature - time
	char guiPos[6] = {0};
 8005726:	2300      	movs	r3, #0
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
 800572a:	2300      	movs	r3, #0
 800572c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005730:	4ba5      	ldr	r3, [pc, #660]	; (80059c8 <altiMain+0x2bc>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	4ba4      	ldr	r3, [pc, #656]	; (80059c8 <altiMain+0x2bc>)
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800573e:	49a3      	ldr	r1, [pc, #652]	; (80059cc <altiMain+0x2c0>)
 8005740:	f010 fa7e 	bl	8015c40 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8005744:	2314      	movs	r3, #20
 8005746:	b29c      	uxth	r4, r3
 8005748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800574c:	4618      	mov	r0, r3
 800574e:	f7fa fd59 	bl	8000204 <strlen>
 8005752:	4603      	mov	r3, r0
 8005754:	b29b      	uxth	r3, r3
 8005756:	fb14 f303 	smulbb	r3, r4, r3
 800575a:	b29b      	uxth	r3, r3
 800575c:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8005760:	b298      	uxth	r0, r3
 8005762:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005766:	4b9a      	ldr	r3, [pc, #616]	; (80059d0 <altiMain+0x2c4>)
 8005768:	210a      	movs	r1, #10
 800576a:	f7fd fd97 	bl	800329c <lcdPutStr>
	sprintf(&guiPos, "%02.1f`C", bmpData.temperature);
 800576e:	4b94      	ldr	r3, [pc, #592]	; (80059c0 <altiMain+0x2b4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fa ff08 	bl	8000588 <__aeabi_f2d>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005780:	4994      	ldr	r1, [pc, #592]	; (80059d4 <altiMain+0x2c8>)
 8005782:	f010 fa5d 	bl	8015c40 <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 8005786:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800578a:	4b91      	ldr	r3, [pc, #580]	; (80059d0 <altiMain+0x2c4>)
 800578c:	210a      	movs	r1, #10
 800578e:	200a      	movs	r0, #10
 8005790:	f7fd fd84 	bl	800329c <lcdPutStr>

	if(altitudeMode){
 8005794:	4b90      	ldr	r3, [pc, #576]	; (80059d8 <altiMain+0x2cc>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 813d 	beq.w	8005a18 <altiMain+0x30c>
		// altitude - pressure at the sea level
		char tmpStr[50] = {0};
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	f107 0318 	add.w	r3, r7, #24
 80057a6:	222e      	movs	r2, #46	; 0x2e
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00f f91a 	bl	80149e4 <memset>
		sprintf(&tmpStr, "%d", (int16_t)bmpData.altitude);
 80057b0:	4b83      	ldr	r3, [pc, #524]	; (80059c0 <altiMain+0x2b4>)
 80057b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80057b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ba:	ee17 3a90 	vmov	r3, s15
 80057be:	b21b      	sxth	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	4985      	ldr	r1, [pc, #532]	; (80059dc <altiMain+0x2d0>)
 80057c8:	4618      	mov	r0, r3
 80057ca:	f010 fa39 	bl	8015c40 <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 80057ce:	2342      	movs	r3, #66	; 0x42
 80057d0:	b29c      	uxth	r4, r3
 80057d2:	f107 0314 	add.w	r3, r7, #20
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fa fd14 	bl	8000204 <strlen>
 80057dc:	4603      	mov	r3, r0
 80057de:	3301      	adds	r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	fb14 f303 	smulbb	r3, r4, r3
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 80057ec:	b298      	uxth	r0, r3
 80057ee:	f107 0214 	add.w	r2, r7, #20
 80057f2:	4b7b      	ldr	r3, [pc, #492]	; (80059e0 <altiMain+0x2d4>)
 80057f4:	2142      	movs	r1, #66	; 0x42
 80057f6:	f7fd fd51 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, ".%1um", ((uint16_t)(fabs(bmpData.altitude)*10))%10);
 80057fa:	4b71      	ldr	r3, [pc, #452]	; (80059c0 <altiMain+0x2b4>)
 80057fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005800:	eef0 7ae7 	vabs.f32	s15, s15
 8005804:	ee17 0a90 	vmov	r0, s15
 8005808:	f7fa febe 	bl	8000588 <__aeabi_f2d>
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	4b74      	ldr	r3, [pc, #464]	; (80059e4 <altiMain+0x2d8>)
 8005812:	f7fa ff11 	bl	8000638 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f7fb f9e3 	bl	8000be8 <__aeabi_d2uiz>
 8005822:	4603      	mov	r3, r0
 8005824:	b29a      	uxth	r2, r3
 8005826:	4b70      	ldr	r3, [pc, #448]	; (80059e8 <altiMain+0x2dc>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	08d9      	lsrs	r1, r3, #3
 800582e:	460b      	mov	r3, r1
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	496a      	ldr	r1, [pc, #424]	; (80059ec <altiMain+0x2e0>)
 8005842:	4618      	mov	r0, r3
 8005844:	f010 f9fc 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8005848:	2322      	movs	r3, #34	; 0x22
 800584a:	b29c      	uxth	r4, r3
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4618      	mov	r0, r3
 8005852:	f7fa fcd7 	bl	8000204 <strlen>
 8005856:	4603      	mov	r3, r0
 8005858:	3301      	adds	r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	fb14 f303 	smulbb	r3, r4, r3
 8005860:	b29b      	uxth	r3, r3
 8005862:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8005866:	b298      	uxth	r0, r3
 8005868:	f107 0214 	add.w	r2, r7, #20
 800586c:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <altiMain+0x2e4>)
 800586e:	2142      	movs	r1, #66	; 0x42
 8005870:	f7fd fd14 	bl	800329c <lcdPutStr>
//		sprintf(&tmpStr, "m ", bmpData.pressure%100/10);
//		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
		sprintf(&tmpStr, "ASL %4.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005874:	4b5f      	ldr	r3, [pc, #380]	; (80059f4 <altiMain+0x2e8>)
 8005876:	edd3 7a00 	vldr	s15, [r3]
 800587a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80059f8 <altiMain+0x2ec>
 800587e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005882:	ee16 0a90 	vmov	r0, s13
 8005886:	f7fa fe7f 	bl	8000588 <__aeabi_f2d>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	f107 0014 	add.w	r0, r7, #20
 8005892:	495a      	ldr	r1, [pc, #360]	; (80059fc <altiMain+0x2f0>)
 8005894:	f010 f9d4 	bl	8015c40 <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 8005898:	2309      	movs	r3, #9
 800589a:	b29c      	uxth	r4, r3
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fa fcaf 	bl	8000204 <strlen>
 80058a6:	4603      	mov	r3, r0
 80058a8:	3301      	adds	r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	fb14 f303 	smulbb	r3, r4, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 80058b6:	3301      	adds	r3, #1
 80058b8:	b298      	uxth	r0, r3
 80058ba:	f107 0214 	add.w	r2, r7, #20
 80058be:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <altiMain+0x2f4>)
 80058c0:	21a5      	movs	r1, #165	; 0xa5
 80058c2:	f7fd fceb 	bl	800329c <lcdPutStr>

		// update minimum/maximum/diff
		if(bmpData.altitude < minAltitude) minAltitude = bmpData.altitude;
 80058c6:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <altiMain+0x2b4>)
 80058c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80058cc:	4b4d      	ldr	r3, [pc, #308]	; (8005a04 <altiMain+0x2f8>)
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	d503      	bpl.n	80058e4 <altiMain+0x1d8>
 80058dc:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <altiMain+0x2b4>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a48      	ldr	r2, [pc, #288]	; (8005a04 <altiMain+0x2f8>)
 80058e2:	6013      	str	r3, [r2, #0]
		if(bmpData.altitude > maxAltitude) maxAltitude = bmpData.altitude;
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <altiMain+0x2b4>)
 80058e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <altiMain+0x2fc>)
 80058ec:	edd3 7a00 	vldr	s15, [r3]
 80058f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f8:	dd03      	ble.n	8005902 <altiMain+0x1f6>
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <altiMain+0x2b4>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4a42      	ldr	r2, [pc, #264]	; (8005a08 <altiMain+0x2fc>)
 8005900:	6013      	str	r3, [r2, #0]

//		sprintf(&tmpStr, "ref(diff) %.1fm(%+.1fm)", refAltitude, bmpData.altitude-refAltitude);
		if(refAltitude != 0){
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <altiMain+0x300>)
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	eef5 7a40 	vcmp.f32	s15, #0.0
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	d028      	beq.n	8005964 <altiMain+0x258>
			sprintf(&tmpStr, "%+.1fm", bmpData.altitude-refAltitude);
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <altiMain+0x2b4>)
 8005914:	ed93 7a02 	vldr	s14, [r3, #8]
 8005918:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <altiMain+0x300>)
 800591a:	edd3 7a00 	vldr	s15, [r3]
 800591e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005922:	ee17 0a90 	vmov	r0, s15
 8005926:	f7fa fe2f 	bl	8000588 <__aeabi_f2d>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	f107 0014 	add.w	r0, r7, #20
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <altiMain+0x304>)
 8005934:	f010 f984 	bl	8015c40 <siprintf>
			lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 184, tmpStr, zekton24font);
 8005938:	2314      	movs	r3, #20
 800593a:	b29c      	uxth	r4, r3
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	4618      	mov	r0, r3
 8005942:	f7fa fc5f 	bl	8000204 <strlen>
 8005946:	4603      	mov	r3, r0
 8005948:	3301      	adds	r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	fb14 f303 	smulbb	r3, r4, r3
 8005950:	b29b      	uxth	r3, r3
 8005952:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8005956:	b298      	uxth	r0, r3
 8005958:	f107 0214 	add.w	r2, r7, #20
 800595c:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <altiMain+0x2c4>)
 800595e:	21b8      	movs	r1, #184	; 0xb8
 8005960:	f7fd fc9c 	bl	800329c <lcdPutStr>
		}
		sprintf(&tmpStr, "%.1fm/%.1fm", minAltitude, maxAltitude);
 8005964:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <altiMain+0x2f8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fa fe0d 	bl	8000588 <__aeabi_f2d>
 800596e:	4604      	mov	r4, r0
 8005970:	460d      	mov	r5, r1
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <altiMain+0x2fc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fe06 	bl	8000588 <__aeabi_f2d>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	f107 0014 	add.w	r0, r7, #20
 8005984:	e9cd 2300 	strd	r2, r3, [sp]
 8005988:	4622      	mov	r2, r4
 800598a:	462b      	mov	r3, r5
 800598c:	4921      	ldr	r1, [pc, #132]	; (8005a14 <altiMain+0x308>)
 800598e:	f010 f957 	bl	8015c40 <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 8005992:	2314      	movs	r3, #20
 8005994:	b29c      	uxth	r4, r3
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fc32 	bl	8000204 <strlen>
 80059a0:	4603      	mov	r3, r0
 80059a2:	3301      	adds	r3, #1
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	fb14 f303 	smulbb	r3, r4, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 80059b0:	b298      	uxth	r0, r3
 80059b2:	f107 0214 	add.w	r2, r7, #20
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <altiMain+0x2c4>)
 80059b8:	21d2      	movs	r1, #210	; 0xd2
 80059ba:	f7fd fc6f 	bl	800329c <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
	}
}
 80059be:	e169      	b.n	8005c94 <altiMain+0x588>
 80059c0:	20002550 	.word	0x20002550
 80059c4:	2000250c 	.word	0x2000250c
 80059c8:	200057c8 	.word	0x200057c8
 80059cc:	0801d14c 	.word	0x0801d14c
 80059d0:	08023478 	.word	0x08023478
 80059d4:	0801d158 	.word	0x0801d158
 80059d8:	200000ad 	.word	0x200000ad
 80059dc:	0801d164 	.word	0x0801d164
 80059e0:	0802a928 	.word	0x0802a928
 80059e4:	40240000 	.word	0x40240000
 80059e8:	cccccccd 	.word	0xcccccccd
 80059ec:	0801d168 	.word	0x0801d168
 80059f0:	080252e0 	.word	0x080252e0
 80059f4:	20000000 	.word	0x20000000
 80059f8:	42c80000 	.word	0x42c80000
 80059fc:	0801d170 	.word	0x0801d170
 8005a00:	080229f0 	.word	0x080229f0
 8005a04:	20005d90 	.word	0x20005d90
 8005a08:	20005d94 	.word	0x20005d94
 8005a0c:	20005d8c 	.word	0x20005d8c
 8005a10:	0801d180 	.word	0x0801d180
 8005a14:	0801d188 	.word	0x0801d188
		char tmpStr[50] = {0};
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	f107 0318 	add.w	r3, r7, #24
 8005a20:	222e      	movs	r2, #46	; 0x2e
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f00e ffdd 	bl	80149e4 <memset>
		sprintf(&tmpStr, "%d", (uint16_t)(bmpData.slpress/100));
 8005a2a:	4b9c      	ldr	r3, [pc, #624]	; (8005c9c <altiMain+0x590>)
 8005a2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a30:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8005ca0 <altiMain+0x594>
 8005a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3c:	ee17 3a90 	vmov	r3, s15
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4996      	ldr	r1, [pc, #600]	; (8005ca4 <altiMain+0x598>)
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f010 f8f8 	bl	8015c40 <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 8005a50:	2342      	movs	r3, #66	; 0x42
 8005a52:	b29c      	uxth	r4, r3
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fa fbd3 	bl	8000204 <strlen>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	3301      	adds	r3, #1
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	fb14 f303 	smulbb	r3, r4, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8005a6e:	b298      	uxth	r0, r3
 8005a70:	f107 0214 	add.w	r2, r7, #20
 8005a74:	4b8c      	ldr	r3, [pc, #560]	; (8005ca8 <altiMain+0x59c>)
 8005a76:	2142      	movs	r1, #66	; 0x42
 8005a78:	f7fd fc10 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, ".%d ", ((uint16_t)(bmpData.slpress/10))%10);
 8005a7c:	4b87      	ldr	r3, [pc, #540]	; (8005c9c <altiMain+0x590>)
 8005a7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a82:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 3a90 	vmov	r3, s15
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	4b85      	ldr	r3, [pc, #532]	; (8005cac <altiMain+0x5a0>)
 8005a96:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9a:	08d9      	lsrs	r1, r3, #3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f107 0314 	add.w	r3, r7, #20
 8005aae:	4980      	ldr	r1, [pc, #512]	; (8005cb0 <altiMain+0x5a4>)
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f010 f8c5 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8005ab6:	2322      	movs	r3, #34	; 0x22
 8005ab8:	b29c      	uxth	r4, r3
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fa fba0 	bl	8000204 <strlen>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	fb14 f303 	smulbb	r3, r4, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8005ad4:	b298      	uxth	r0, r3
 8005ad6:	f107 0214 	add.w	r2, r7, #20
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <altiMain+0x5a8>)
 8005adc:	2142      	movs	r1, #66	; 0x42
 8005ade:	f7fd fbdd 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, "hpa", bmpData.pressure%100/10);
 8005ae2:	4b6e      	ldr	r3, [pc, #440]	; (8005c9c <altiMain+0x590>)
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <altiMain+0x5ac>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	4a6d      	ldr	r2, [pc, #436]	; (8005cac <altiMain+0x5a0>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	08da      	lsrs	r2, r3, #3
 8005afe:	f107 0314 	add.w	r3, r7, #20
 8005b02:	496e      	ldr	r1, [pc, #440]	; (8005cbc <altiMain+0x5b0>)
 8005b04:	4618      	mov	r0, r3
 8005b06:	f010 f89b 	bl	8015c40 <siprintf>
		lcdPutStr(432-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
 8005b0a:	2322      	movs	r3, #34	; 0x22
 8005b0c:	b29c      	uxth	r4, r3
 8005b0e:	f107 0314 	add.w	r3, r7, #20
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fa fb76 	bl	8000204 <strlen>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	fb14 f303 	smulbb	r3, r4, r3
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 8005b28:	b298      	uxth	r0, r3
 8005b2a:	f107 0214 	add.w	r2, r7, #20
 8005b2e:	4b61      	ldr	r3, [pc, #388]	; (8005cb4 <altiMain+0x5a8>)
 8005b30:	2170      	movs	r1, #112	; 0x70
 8005b32:	f7fd fbb3 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, "ambient: %6.1f hPa", ((float)bmpData.pressure/100));
 8005b36:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <altiMain+0x590>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005ca0 <altiMain+0x594>
 8005b46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b4a:	ee16 0a90 	vmov	r0, s13
 8005b4e:	f7fa fd1b 	bl	8000588 <__aeabi_f2d>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	f107 0014 	add.w	r0, r7, #20
 8005b5a:	4959      	ldr	r1, [pc, #356]	; (8005cc0 <altiMain+0x5b4>)
 8005b5c:	f010 f870 	bl	8015c40 <siprintf>
		lcdPutStr(0, 165, tmpStr, font_12_zekton);
 8005b60:	f107 0214 	add.w	r2, r7, #20
 8005b64:	4b57      	ldr	r3, [pc, #348]	; (8005cc4 <altiMain+0x5b8>)
 8005b66:	21a5      	movs	r1, #165	; 0xa5
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f7fd fb97 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, "elevation: %.1fm", fixedAltitude);
 8005b6e:	4b56      	ldr	r3, [pc, #344]	; (8005cc8 <altiMain+0x5bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fa fd08 	bl	8000588 <__aeabi_f2d>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	f107 0014 	add.w	r0, r7, #20
 8005b80:	4952      	ldr	r1, [pc, #328]	; (8005ccc <altiMain+0x5c0>)
 8005b82:	f010 f85d 	bl	8015c40 <siprintf>
		lcdPutStr(0, 180, tmpStr, font_12_zekton);
 8005b86:	f107 0214 	add.w	r2, r7, #20
 8005b8a:	4b4e      	ldr	r3, [pc, #312]	; (8005cc4 <altiMain+0x5b8>)
 8005b8c:	21b4      	movs	r1, #180	; 0xb4
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fd fb84 	bl	800329c <lcdPutStr>
		sprintf(&tmpStr, "ASL: %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005b94:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <altiMain+0x5c4>)
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005ca0 <altiMain+0x594>
 8005b9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ba2:	ee16 0a90 	vmov	r0, s13
 8005ba6:	f7fa fcef 	bl	8000588 <__aeabi_f2d>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	f107 0014 	add.w	r0, r7, #20
 8005bb2:	4948      	ldr	r1, [pc, #288]	; (8005cd4 <altiMain+0x5c8>)
 8005bb4:	f010 f844 	bl	8015c40 <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 8005bb8:	2309      	movs	r3, #9
 8005bba:	b29c      	uxth	r4, r3
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fa fb1f 	bl	8000204 <strlen>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	3301      	adds	r3, #1
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	fb14 f303 	smulbb	r3, r4, r3
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	b298      	uxth	r0, r3
 8005bda:	f107 0214 	add.w	r2, r7, #20
 8005bde:	4b39      	ldr	r3, [pc, #228]	; (8005cc4 <altiMain+0x5b8>)
 8005be0:	21a5      	movs	r1, #165	; 0xa5
 8005be2:	f7fd fb5b 	bl	800329c <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
 8005be6:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <altiMain+0x590>)
 8005be8:	ed93 7a03 	vldr	s14, [r3, #12]
 8005bec:	4b3a      	ldr	r3, [pc, #232]	; (8005cd8 <altiMain+0x5cc>)
 8005bee:	edd3 7a00 	vldr	s15, [r3]
 8005bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfa:	d503      	bpl.n	8005c04 <altiMain+0x4f8>
 8005bfc:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <altiMain+0x590>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4a35      	ldr	r2, [pc, #212]	; (8005cd8 <altiMain+0x5cc>)
 8005c02:	6013      	str	r3, [r2, #0]
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
 8005c04:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <altiMain+0x590>)
 8005c06:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <altiMain+0x5d0>)
 8005c0c:	edd3 7a00 	vldr	s15, [r3]
 8005c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c18:	dd03      	ble.n	8005c22 <altiMain+0x516>
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <altiMain+0x590>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	; (8005cdc <altiMain+0x5d0>)
 8005c20:	6013      	str	r3, [r2, #0]
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <altiMain+0x5cc>)
 8005c24:	edd3 7a00 	vldr	s15, [r3]
 8005c28:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005ca0 <altiMain+0x594>
 8005c2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c30:	ee16 0a90 	vmov	r0, s13
 8005c34:	f7fa fca8 	bl	8000588 <__aeabi_f2d>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <altiMain+0x5d0>)
 8005c3e:	edd3 7a00 	vldr	s15, [r3]
 8005c42:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005ca0 <altiMain+0x594>
 8005c46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c4a:	ee16 0a90 	vmov	r0, s13
 8005c4e:	f7fa fc9b 	bl	8000588 <__aeabi_f2d>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	f107 0014 	add.w	r0, r7, #20
 8005c5a:	e9cd 2300 	strd	r2, r3, [sp]
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	491f      	ldr	r1, [pc, #124]	; (8005ce0 <altiMain+0x5d4>)
 8005c64:	f00f ffec 	bl	8015c40 <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 8005c68:	2314      	movs	r3, #20
 8005c6a:	b29c      	uxth	r4, r3
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fa fac7 	bl	8000204 <strlen>
 8005c76:	4603      	mov	r3, r0
 8005c78:	3301      	adds	r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	fb14 f303 	smulbb	r3, r4, r3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8005c86:	b298      	uxth	r0, r3
 8005c88:	f107 0214 	add.w	r2, r7, #20
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <altiMain+0x5d8>)
 8005c8e:	21d2      	movs	r1, #210	; 0xd2
 8005c90:	f7fd fb04 	bl	800329c <lcdPutStr>
}
 8005c94:	bf00      	nop
 8005c96:	3750      	adds	r7, #80	; 0x50
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9c:	20002550 	.word	0x20002550
 8005ca0:	42c80000 	.word	0x42c80000
 8005ca4:	0801d164 	.word	0x0801d164
 8005ca8:	0802a928 	.word	0x0802a928
 8005cac:	cccccccd 	.word	0xcccccccd
 8005cb0:	0801d194 	.word	0x0801d194
 8005cb4:	080252e0 	.word	0x080252e0
 8005cb8:	51eb851f 	.word	0x51eb851f
 8005cbc:	0801d19c 	.word	0x0801d19c
 8005cc0:	0801d1a0 	.word	0x0801d1a0
 8005cc4:	080229f0 	.word	0x080229f0
 8005cc8:	20000004 	.word	0x20000004
 8005ccc:	0801d1b4 	.word	0x0801d1b4
 8005cd0:	20000000 	.word	0x20000000
 8005cd4:	0801d1c8 	.word	0x0801d1c8
 8005cd8:	20005d98 	.word	0x20005d98
 8005cdc:	20005d9c 	.word	0x20005d9c
 8005ce0:	0801d1d8 	.word	0x0801d1d8
 8005ce4:	08023478 	.word	0x08023478

08005ce8 <setRefAltitude>:

void setRefAltitude(void){
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
	refAltitude = bmpData.altitude;
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <setRefAltitude+0x18>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <setRefAltitude+0x1c>)
 8005cf2:	6013      	str	r3, [r2, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20002550 	.word	0x20002550
 8005d04:	20005d8c 	.word	0x20005d8c

08005d08 <clearRefAltitude>:
void clearRefAltitude(void){
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
	refAltitude = 0;
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <clearRefAltitude+0x18>)
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20005d8c 	.word	0x20005d8c

08005d24 <changeAltiMode>:
void changeAltiMode(void){
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <changeAltiMode+0x34>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d107      	bne.n	8005d40 <changeAltiMode+0x1c>
		fixedAltitude = bmpData.altitude;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <changeAltiMode+0x38>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <changeAltiMode+0x3c>)
 8005d36:	6013      	str	r3, [r2, #0]
		altitudeMode = 0;
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <changeAltiMode+0x34>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
	} else {
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
		altitudeMode = 1;
	}
}
 8005d3e:	e006      	b.n	8005d4e <changeAltiMode+0x2a>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <changeAltiMode+0x38>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a07      	ldr	r2, [pc, #28]	; (8005d64 <changeAltiMode+0x40>)
 8005d46:	6013      	str	r3, [r2, #0]
		altitudeMode = 1;
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <changeAltiMode+0x34>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	200000ad 	.word	0x200000ad
 8005d5c:	20002550 	.word	0x20002550
 8005d60:	20000004 	.word	0x20000004
 8005d64:	20000000 	.word	0x20000000

08005d68 <increaseAltitude>:
void increaseAltitude(void){
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <increaseAltitude+0x40>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10a      	bne.n	8005d8a <increaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL += 1;
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <increaseAltitude+0x44>)
 8005d76:	edd3 7a00 	vldr	s15, [r3]
 8005d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <increaseAltitude+0x44>)
 8005d84:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude += 1;
	}
}
 8005d88:	e009      	b.n	8005d9e <increaseAltitude+0x36>
		fixedAltitude += 1;
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <increaseAltitude+0x48>)
 8005d8c:	edd3 7a00 	vldr	s15, [r3]
 8005d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <increaseAltitude+0x48>)
 8005d9a:	edc3 7a00 	vstr	s15, [r3]
}
 8005d9e:	bf00      	nop
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	200000ad 	.word	0x200000ad
 8005dac:	20000000 	.word	0x20000000
 8005db0:	20000004 	.word	0x20000004

08005db4 <decreaseAltitude>:
void decreaseAltitude(void){
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <decreaseAltitude+0x40>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10a      	bne.n	8005dd6 <decreaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL -= 1;
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <decreaseAltitude+0x44>)
 8005dc2:	edd3 7a00 	vldr	s15, [r3]
 8005dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <decreaseAltitude+0x44>)
 8005dd0:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude -= 1;
	}
}
 8005dd4:	e009      	b.n	8005dea <decreaseAltitude+0x36>
		fixedAltitude -= 1;
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <decreaseAltitude+0x48>)
 8005dd8:	edd3 7a00 	vldr	s15, [r3]
 8005ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <decreaseAltitude+0x48>)
 8005de6:	edc3 7a00 	vstr	s15, [r3]
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	200000ad 	.word	0x200000ad
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	20000004 	.word	0x20000004

08005e00 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <setDefaultClbcks+0x34>)
 8005e06:	4a0c      	ldr	r2, [pc, #48]	; (8005e38 <setDefaultClbcks+0x38>)
 8005e08:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <setDefaultClbcks+0x3c>)
 8005e0c:	4a0c      	ldr	r2, [pc, #48]	; (8005e40 <setDefaultClbcks+0x40>)
 8005e0e:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <setDefaultClbcks+0x44>)
 8005e12:	4a0d      	ldr	r2, [pc, #52]	; (8005e48 <setDefaultClbcks+0x48>)
 8005e14:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8005e16:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <setDefaultClbcks+0x4c>)
 8005e18:	4a0d      	ldr	r2, [pc, #52]	; (8005e50 <setDefaultClbcks+0x50>)
 8005e1a:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <setDefaultClbcks+0x54>)
 8005e1e:	4a0e      	ldr	r2, [pc, #56]	; (8005e58 <setDefaultClbcks+0x58>)
 8005e20:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <setDefaultClbcks+0x5c>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	611a      	str	r2, [r3, #16]
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20002560 	.word	0x20002560
 8005e38:	08002bd9 	.word	0x08002bd9
 8005e3c:	200025f0 	.word	0x200025f0
 8005e40:	08002be9 	.word	0x08002be9
 8005e44:	200025a8 	.word	0x200025a8
 8005e48:	08006371 	.word	0x08006371
 8005e4c:	200026c8 	.word	0x200026c8
 8005e50:	080063b5 	.word	0x080063b5
 8005e54:	20002638 	.word	0x20002638
 8005e58:	08006401 	.word	0x08006401
 8005e5c:	20002680 	.word	0x20002680

08005e60 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005e64:	f7ff ffcc 	bl	8005e00 <setDefaultClbcks>
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8005e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e70:	b0b6      	sub	sp, #216	; 0xd8
 8005e72:	af04      	add	r7, sp, #16
	// update data
	bmpData = getBmpData(&bmp180module);
 8005e74:	4c92      	ldr	r4, [pc, #584]	; (80060c0 <baroMain+0x254>)
 8005e76:	463b      	mov	r3, r7
 8005e78:	4992      	ldr	r1, [pc, #584]	; (80060c4 <baroMain+0x258>)
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fb ff30 	bl	8001ce0 <getBmpData>
 8005e80:	463b      	mov	r3, r7
 8005e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005e88:	2100      	movs	r1, #0
 8005e8a:	488f      	ldr	r0, [pc, #572]	; (80060c8 <baroMain+0x25c>)
 8005e8c:	f004 fec3 	bl	800ac16 <cbuf_readn>
 8005e90:	4603      	mov	r3, r0
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005e98:	2100      	movs	r1, #0
 8005e9a:	488b      	ldr	r0, [pc, #556]	; (80060c8 <baroMain+0x25c>)
 8005e9c:	f004 febb 	bl	800ac16 <cbuf_readn>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4888      	ldr	r0, [pc, #544]	; (80060cc <baroMain+0x260>)
 8005eac:	f004 fff2 	bl	800ae94 <read_nth_ring_buffer>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4884      	ldr	r0, [pc, #528]	; (80060cc <baroMain+0x260>)
 8005eba:	f004 ffeb 	bl	800ae94 <read_nth_ring_buffer>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	char str1[50] = {0};
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ecc:	222e      	movs	r2, #46	; 0x2e
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f00e fd87 	bl	80149e4 <memset>
	char str3[50] = {0};
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ede:	222e      	movs	r2, #46	; 0x2e
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f00e fd7e 	bl	80149e4 <memset>
	char str4[50] = {0};
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	f107 0318 	add.w	r3, r7, #24
 8005ef0:	222e      	movs	r2, #46	; 0x2e
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00e fd75 	bl	80149e4 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8005efa:	4b71      	ldr	r3, [pc, #452]	; (80060c0 <baroMain+0x254>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fa fb42 	bl	8000588 <__aeabi_f2d>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005f0c:	4970      	ldr	r1, [pc, #448]	; (80060d0 <baroMain+0x264>)
 8005f0e:	f00f fe97 	bl	8015c40 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8005f12:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005f16:	4b6f      	ldr	r3, [pc, #444]	; (80060d4 <baroMain+0x268>)
 8005f18:	210e      	movs	r1, #14
 8005f1a:	200a      	movs	r0, #10
 8005f1c:	f7fd f9be 	bl	800329c <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8005f20:	4b67      	ldr	r3, [pc, #412]	; (80060c0 <baroMain+0x254>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80060d8 <baroMain+0x26c>
 8005f30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f34:	ee16 0a90 	vmov	r0, s13
 8005f38:	f7fa fb26 	bl	8000588 <__aeabi_f2d>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005f44:	4965      	ldr	r1, [pc, #404]	; (80060dc <baroMain+0x270>)
 8005f46:	f00f fe7b 	bl	8015c40 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8005f4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005f4e:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <baroMain+0x268>)
 8005f50:	211e      	movs	r1, #30
 8005f52:	200a      	movs	r0, #10
 8005f54:	f7fd f9a2 	bl	800329c <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005f58:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <baroMain+0x274>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d124      	bne.n	8005faa <baroMain+0x13e>
		sprintf(&str4, "Fixed altitude mode");
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	495f      	ldr	r1, [pc, #380]	; (80060e4 <baroMain+0x278>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f00f fe6a 	bl	8015c40 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8005f6c:	4b54      	ldr	r3, [pc, #336]	; (80060c0 <baroMain+0x254>)
 8005f6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f72:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80060d8 <baroMain+0x26c>
 8005f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f7a:	ee16 0a90 	vmov	r0, s13
 8005f7e:	f7fa fb03 	bl	8000588 <__aeabi_f2d>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005f8a:	4957      	ldr	r1, [pc, #348]	; (80060e8 <baroMain+0x27c>)
 8005f8c:	f00f fe58 	bl	8015c40 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8005f90:	4b56      	ldr	r3, [pc, #344]	; (80060ec <baroMain+0x280>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fa faf7 	bl	8000588 <__aeabi_f2d>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005fa2:	4953      	ldr	r1, [pc, #332]	; (80060f0 <baroMain+0x284>)
 8005fa4:	f00f fe4c 	bl	8015c40 <siprintf>
 8005fa8:	e023      	b.n	8005ff2 <baroMain+0x186>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	4951      	ldr	r1, [pc, #324]	; (80060f4 <baroMain+0x288>)
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f00f fe45 	bl	8015c40 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8005fb6:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <baroMain+0x254>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fa fae4 	bl	8000588 <__aeabi_f2d>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005fc8:	494b      	ldr	r1, [pc, #300]	; (80060f8 <baroMain+0x28c>)
 8005fca:	f00f fe39 	bl	8015c40 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005fce:	4b4b      	ldr	r3, [pc, #300]	; (80060fc <baroMain+0x290>)
 8005fd0:	edd3 7a00 	vldr	s15, [r3]
 8005fd4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80060d8 <baroMain+0x26c>
 8005fd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fdc:	ee16 0a90 	vmov	r0, s13
 8005fe0:	f7fa fad2 	bl	8000588 <__aeabi_f2d>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005fec:	4944      	ldr	r1, [pc, #272]	; (8006100 <baroMain+0x294>)
 8005fee:	f00f fe27 	bl	8015c40 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8005ff2:	f107 0214 	add.w	r2, r7, #20
 8005ff6:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <baroMain+0x268>)
 8005ff8:	2132      	movs	r1, #50	; 0x32
 8005ffa:	200a      	movs	r0, #10
 8005ffc:	f7fd f94e 	bl	800329c <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8006000:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006004:	4b33      	ldr	r3, [pc, #204]	; (80060d4 <baroMain+0x268>)
 8006006:	2142      	movs	r1, #66	; 0x42
 8006008:	200a      	movs	r0, #10
 800600a:	f7fd f947 	bl	800329c <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 800600e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006012:	4b30      	ldr	r3, [pc, #192]	; (80060d4 <baroMain+0x268>)
 8006014:	2152      	movs	r1, #82	; 0x52
 8006016:	200a      	movs	r0, #10
 8006018:	f7fd f940 	bl	800329c <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 800601c:	2300      	movs	r3, #0
 800601e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8006022:	e041      	b.n	80060a8 <baroMain+0x23c>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8006024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006028:	4619      	mov	r1, r3
 800602a:	4827      	ldr	r0, [pc, #156]	; (80060c8 <baroMain+0x25c>)
 800602c:	f004 fdf3 	bl	800ac16 <cbuf_readn>
 8006030:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8006034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006038:	4619      	mov	r1, r3
 800603a:	4824      	ldr	r0, [pc, #144]	; (80060cc <baroMain+0x260>)
 800603c:	f004 ff2a 	bl	800ae94 <read_nth_ring_buffer>
 8006040:	4603      	mov	r3, r0
 8006042:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		if(*currB>=maxBaro) maxBaro = *currB;
 8006046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8006050:	429a      	cmp	r2, r3
 8006052:	d804      	bhi.n	800605e <baroMain+0x1f2>
 8006054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		if(*currB<=minBaro) minBaro = *currB;
 800605e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8006068:	429a      	cmp	r2, r3
 800606a:	d304      	bcc.n	8006076 <baroMain+0x20a>
 800606c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		if(currT>=maxTemp) maxTemp = currT;
 8006076:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800607a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800607e:	429a      	cmp	r2, r3
 8006080:	d303      	bcc.n	800608a <baroMain+0x21e>
 8006082:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8006086:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		if(currT<=minTemp) minTemp = currT;
 800608a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800608e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8006092:	429a      	cmp	r2, r3
 8006094:	d803      	bhi.n	800609e <baroMain+0x232>
 8006096:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800609a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 800609e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060a2:	3301      	adds	r3, #1
 80060a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <baroMain+0x260>)
 80060aa:	891b      	ldrh	r3, [r3, #8]
 80060ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d3b7      	bcc.n	8006024 <baroMain+0x1b8>
	}
	for(uint16_t j=minX; j<maxX; j++){
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <baroMain+0x298>)
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80060bc:	e0bd      	b.n	800623a <baroMain+0x3ce>
 80060be:	bf00      	nop
 80060c0:	20002550 	.word	0x20002550
 80060c4:	2000250c 	.word	0x2000250c
 80060c8:	200057e0 	.word	0x200057e0
 80060cc:	200057f4 	.word	0x200057f4
 80060d0:	0801d2a0 	.word	0x0801d2a0
 80060d4:	0802cc9c 	.word	0x0802cc9c
 80060d8:	42c80000 	.word	0x42c80000
 80060dc:	0801d2b8 	.word	0x0801d2b8
 80060e0:	20005da0 	.word	0x20005da0
 80060e4:	0801d2d4 	.word	0x0801d2d4
 80060e8:	0801d2e8 	.word	0x0801d2e8
 80060ec:	20000004 	.word	0x20000004
 80060f0:	0801d30c 	.word	0x0801d30c
 80060f4:	0801d32c 	.word	0x0801d32c
 80060f8:	0801d340 	.word	0x0801d340
 80060fc:	20000000 	.word	0x20000000
 8006100:	0801d360 	.word	0x0801d360
 8006104:	200000ae 	.word	0x200000ae
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8006108:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800610c:	4a90      	ldr	r2, [pc, #576]	; (8006350 <baroMain+0x4e4>)
 800610e:	8812      	ldrh	r2, [r2, #0]
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	4a90      	ldr	r2, [pc, #576]	; (8006354 <baroMain+0x4e8>)
 8006114:	8912      	ldrh	r2, [r2, #8]
 8006116:	fb03 f202 	mul.w	r2, r3, r2
 800611a:	4b8f      	ldr	r3, [pc, #572]	; (8006358 <baroMain+0x4ec>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	4b8b      	ldr	r3, [pc, #556]	; (8006350 <baroMain+0x4e4>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	1acb      	subs	r3, r1, r3
 8006126:	fb92 f3f3 	sdiv	r3, r2, r3
 800612a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 800612e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8006132:	4619      	mov	r1, r3
 8006134:	4887      	ldr	r0, [pc, #540]	; (8006354 <baroMain+0x4e8>)
 8006136:	f004 fd6e 	bl	800ac16 <cbuf_readn>
 800613a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 800613e:	f8b7 00bc 	ldrh.w	r0, [r7, #188]	; 0xbc
 8006142:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006146:	1c5c      	adds	r4, r3, #1
 8006148:	4b84      	ldr	r3, [pc, #528]	; (800635c <baroMain+0x4f0>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	461d      	mov	r5, r3
 800614e:	4b83      	ldr	r3, [pc, #524]	; (800635c <baroMain+0x4f0>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	4b82      	ldr	r3, [pc, #520]	; (8006360 <baroMain+0x4f4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800615e:	8812      	ldrh	r2, [r2, #0]
 8006160:	4611      	mov	r1, r2
 8006162:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8006166:	1a8a      	subs	r2, r1, r2
 8006168:	fb03 f202 	mul.w	r2, r3, r2
 800616c:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006170:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8006174:	1acb      	subs	r3, r1, r3
 8006176:	fb92 f3f3 	sdiv	r3, r2, r3
 800617a:	1aea      	subs	r2, r5, r3
 800617c:	4b77      	ldr	r3, [pc, #476]	; (800635c <baroMain+0x4f0>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	2300      	movs	r3, #0
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	2302      	movs	r3, #2
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	2301      	movs	r3, #1
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	460b      	mov	r3, r1
 8006190:	4621      	mov	r1, r4
 8006192:	f7fd fec6 	bl	8003f22 <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8006196:	f8b7 50bc 	ldrh.w	r5, [r7, #188]	; 0xbc
 800619a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800619e:	1c5e      	adds	r6, r3, #1
 80061a0:	4b6e      	ldr	r3, [pc, #440]	; (800635c <baroMain+0x4f0>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	4698      	mov	r8, r3
 80061a6:	4b6d      	ldr	r3, [pc, #436]	; (800635c <baroMain+0x4f0>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <baroMain+0x4f4>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	1ad4      	subs	r4, r2, r3
 80061b2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80061b6:	4619      	mov	r1, r3
 80061b8:	486a      	ldr	r0, [pc, #424]	; (8006364 <baroMain+0x4f8>)
 80061ba:	f004 fe6b 	bl	800ae94 <read_nth_ring_buffer>
 80061be:	4602      	mov	r2, r0
 80061c0:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	fb03 f204 	mul.w	r2, r3, r4
 80061ca:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 80061ce:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80061d2:	1acb      	subs	r3, r1, r3
 80061d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80061d8:	eba8 0203 	sub.w	r2, r8, r3
 80061dc:	4b5f      	ldr	r3, [pc, #380]	; (800635c <baroMain+0x4f0>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	230e      	movs	r3, #14
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	2301      	movs	r3, #1
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	460b      	mov	r3, r1
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	f7fd fe95 	bl	8003f22 <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80061f8:	4b55      	ldr	r3, [pc, #340]	; (8006350 <baroMain+0x4e4>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	4b56      	ldr	r3, [pc, #344]	; (8006358 <baroMain+0x4ec>)
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4b56      	ldr	r3, [pc, #344]	; (8006360 <baroMain+0x4f4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	2302      	movs	r3, #2
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2301      	movs	r3, #1
 8006210:	f7fd f946 	bl	80034a0 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8006214:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <baroMain+0x4e4>)
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <baroMain+0x4ec>)
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	4b4e      	ldr	r3, [pc, #312]	; (800635c <baroMain+0x4f0>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	2302      	movs	r3, #2
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2301      	movs	r3, #1
 800622c:	f7fd f938 	bl	80034a0 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8006230:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006234:	3301      	adds	r3, #1
 8006236:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800623a:	4b47      	ldr	r3, [pc, #284]	; (8006358 <baroMain+0x4ec>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8006242:	429a      	cmp	r2, r3
 8006244:	f4ff af60 	bcc.w	8006108 <baroMain+0x29c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8006248:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800625c:	ee16 0a90 	vmov	r0, s13
 8006260:	f7fa f992 	bl	8000588 <__aeabi_f2d>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	f107 0014 	add.w	r0, r7, #20
 800626c:	493e      	ldr	r1, [pc, #248]	; (8006368 <baroMain+0x4fc>)
 800626e:	f00f fce7 	bl	8015c40 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8006272:	4b3b      	ldr	r3, [pc, #236]	; (8006360 <baroMain+0x4f4>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	3b06      	subs	r3, #6
 8006278:	b2d9      	uxtb	r1, r3
 800627a:	f107 0214 	add.w	r2, r7, #20
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <baroMain+0x500>)
 8006280:	2000      	movs	r0, #0
 8006282:	f7fd f80b 	bl	800329c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8006286:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800629a:	ee16 0a90 	vmov	r0, s13
 800629e:	f7fa f973 	bl	8000588 <__aeabi_f2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	f107 0014 	add.w	r0, r7, #20
 80062aa:	492f      	ldr	r1, [pc, #188]	; (8006368 <baroMain+0x4fc>)
 80062ac:	f00f fcc8 	bl	8015c40 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 80062b0:	4b2a      	ldr	r3, [pc, #168]	; (800635c <baroMain+0x4f0>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	3b06      	subs	r3, #6
 80062b6:	b2d9      	uxtb	r1, r3
 80062b8:	f107 0214 	add.w	r2, r7, #20
 80062bc:	4b2b      	ldr	r3, [pc, #172]	; (800636c <baroMain+0x500>)
 80062be:	2000      	movs	r0, #0
 80062c0:	f7fc ffec 	bl	800329c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 80062c4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80062d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062d8:	ee16 0a90 	vmov	r0, s13
 80062dc:	f7fa f954 	bl	8000588 <__aeabi_f2d>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	f107 0014 	add.w	r0, r7, #20
 80062e8:	491f      	ldr	r1, [pc, #124]	; (8006368 <baroMain+0x4fc>)
 80062ea:	f00f fca9 	bl	8015c40 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <baroMain+0x4f4>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	3b06      	subs	r3, #6
 80062f4:	b2d9      	uxtb	r1, r3
 80062f6:	f107 0214 	add.w	r2, r7, #20
 80062fa:	4b1c      	ldr	r3, [pc, #112]	; (800636c <baroMain+0x500>)
 80062fc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006300:	f7fc ffcc 	bl	800329c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 8006304:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006310:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006314:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006318:	ee16 0a90 	vmov	r0, s13
 800631c:	f7fa f934 	bl	8000588 <__aeabi_f2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	f107 0014 	add.w	r0, r7, #20
 8006328:	490f      	ldr	r1, [pc, #60]	; (8006368 <baroMain+0x4fc>)
 800632a:	f00f fc89 	bl	8015c40 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <baroMain+0x4f0>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	3b06      	subs	r3, #6
 8006334:	b2d9      	uxtb	r1, r3
 8006336:	f107 0214 	add.w	r2, r7, #20
 800633a:	4b0c      	ldr	r3, [pc, #48]	; (800636c <baroMain+0x500>)
 800633c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006340:	f7fc ffac 	bl	800329c <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8006344:	bf00      	nop
 8006346:	37c8      	adds	r7, #200	; 0xc8
 8006348:	46bd      	mov	sp, r7
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634e:	bf00      	nop
 8006350:	200000ae 	.word	0x200000ae
 8006354:	200057e0 	.word	0x200057e0
 8006358:	200000b0 	.word	0x200000b0
 800635c:	200000b2 	.word	0x200000b2
 8006360:	200000b3 	.word	0x200000b3
 8006364:	200057f4 	.word	0x200057f4
 8006368:	0801d380 	.word	0x0801d380
 800636c:	0802c820 	.word	0x0802c820

08006370 <changeBaroMode>:

void changeBaroMode(void){
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <changeBaroMode+0x34>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <changeBaroMode+0x38>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <changeBaroMode+0x3c>)
 8006382:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <changeBaroMode+0x34>)
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 800638a:	e006      	b.n	800639a <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <changeBaroMode+0x38>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <changeBaroMode+0x40>)
 8006392:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <changeBaroMode+0x34>)
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20005da0 	.word	0x20005da0
 80063a8:	20002550 	.word	0x20002550
 80063ac:	20000000 	.word	0x20000000
 80063b0:	20000004 	.word	0x20000004

080063b4 <addBaro>:
void addBaro(void){
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <addBaro+0x40>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <addBaro+0x22>
			fixedAltitude += 1;
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <addBaro+0x44>)
 80063c2:	edd3 7a00 	vldr	s15, [r3]
 80063c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <addBaro+0x44>)
 80063d0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 80063d4:	e009      	b.n	80063ea <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <addBaro+0x48>)
 80063d8:	edd3 7a00 	vldr	s15, [r3]
 80063dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80063e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <addBaro+0x48>)
 80063e6:	edc3 7a00 	vstr	s15, [r3]
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	20005da0 	.word	0x20005da0
 80063f8:	20000004 	.word	0x20000004
 80063fc:	20000000 	.word	0x20000000

08006400 <remBaro>:
void remBaro(void){
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <remBaro+0x40>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <remBaro+0x22>
			fixedAltitude -= 1;
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <remBaro+0x44>)
 800640e:	edd3 7a00 	vldr	s15, [r3]
 8006412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <remBaro+0x44>)
 800641c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8006420:	e009      	b.n	8006436 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <remBaro+0x48>)
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800642c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <remBaro+0x48>)
 8006432:	edc3 7a00 	vstr	s15, [r3]
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20005da0 	.word	0x20005da0
 8006444:	20000004 	.word	0x20000004
 8006448:	20000000 	.word	0x20000000

0800644c <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <setupCntxMenu+0x1c>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6013      	str	r3, [r2, #0]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20005da4 	.word	0x20005da4

0800646c <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8006470:	f000 f87e 	bl	8006570 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <cntxSelect+0x1c>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <cntxSelect+0x20>)
 800647c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	4798      	blx	r3
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20005da2 	.word	0x20005da2
 800648c:	20000144 	.word	0x20000144

08006490 <nextItem>:

void nextItem(void){
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <nextItem+0x34>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <nextItem+0x38>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	3b01      	subs	r3, #1
 80064a0:	429a      	cmp	r2, r3
 80064a2:	da06      	bge.n	80064b2 <nextItem+0x22>
		cntxPosition++;
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <nextItem+0x34>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <nextItem+0x34>)
 80064ae:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 80064b0:	e002      	b.n	80064b8 <nextItem+0x28>
		cntxPosition = 0;
 80064b2:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <nextItem+0x34>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20005da2 	.word	0x20005da2
 80064c8:	200000b4 	.word	0x200000b4

080064cc <prevItem>:
void prevItem(void){
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <prevItem+0x30>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <prevItem+0x1a>
		cntxPosition--;
 80064d8:	4b08      	ldr	r3, [pc, #32]	; (80064fc <prevItem+0x30>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prevItem+0x30>)
 80064e2:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80064e4:	e005      	b.n	80064f2 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <prevItem+0x34>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4b03      	ldr	r3, [pc, #12]	; (80064fc <prevItem+0x30>)
 80064f0:	701a      	strb	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20005da2 	.word	0x20005da2
 8006500:	200000b4 	.word	0x200000b4

08006504 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <setDefaultClbcks+0x34>)
 800650a:	4a0c      	ldr	r2, [pc, #48]	; (800653c <setDefaultClbcks+0x38>)
 800650c:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <setDefaultClbcks+0x3c>)
 8006510:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <setDefaultClbcks+0x40>)
 8006512:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <setDefaultClbcks+0x3c>)
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <setDefaultClbcks+0x40>)
 8006518:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <setDefaultClbcks+0x44>)
 800651c:	4a0b      	ldr	r2, [pc, #44]	; (800654c <setDefaultClbcks+0x48>)
 800651e:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <setDefaultClbcks+0x4c>)
 8006522:	4a0c      	ldr	r2, [pc, #48]	; (8006554 <setDefaultClbcks+0x50>)
 8006524:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <setDefaultClbcks+0x4c>)
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <setDefaultClbcks+0x50>)
 800652a:	61da      	str	r2, [r3, #28]
}
 800652c:	bf00      	nop
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	200026c8 	.word	0x200026c8
 800653c:	08006571 	.word	0x08006571
 8006540:	200025f0 	.word	0x200025f0
 8006544:	080064cd 	.word	0x080064cd
 8006548:	200025a8 	.word	0x200025a8
 800654c:	0800646d 	.word	0x0800646d
 8006550:	20002560 	.word	0x20002560
 8006554:	08006491 	.word	0x08006491

08006558 <showCntxMenu>:

void showCntxMenu(void){
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 800655c:	f7ff ffd2 	bl	8006504 <setDefaultClbcks>
	isCntxOpen = 1;
 8006560:	4b02      	ldr	r3, [pc, #8]	; (800656c <showCntxMenu+0x14>)
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20005da1 	.word	0x20005da1

08006570 <hideCntxMenu>:
void hideCntxMenu(void){
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8006574:	f7fb fcd0 	bl	8001f18 <resetButtonHandlers>
	(*prevClbcks)();
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <hideCntxMenu+0x18>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4798      	blx	r3
	isCntxOpen = 0;
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <hideCntxMenu+0x1c>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20005da4 	.word	0x20005da4
 800658c:	20005da1 	.word	0x20005da1

08006590 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8006596:	4b35      	ldr	r3, [pc, #212]	; (800666c <enableCntxMenu+0xdc>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d062      	beq.n	8006664 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 800659e:	230e      	movs	r3, #14
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b33      	ldr	r3, [pc, #204]	; (8006670 <enableCntxMenu+0xe0>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	330a      	adds	r3, #10
 80065ac:	2200      	movs	r2, #0
 80065ae:	9200      	str	r2, [sp, #0]
 80065b0:	2205      	movs	r2, #5
 80065b2:	21c8      	movs	r1, #200	; 0xc8
 80065b4:	2000      	movs	r0, #0
 80065b6:	f7fd fc8f 	bl	8003ed8 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 80065ba:	2301      	movs	r3, #1
 80065bc:	2206      	movs	r2, #6
 80065be:	21c8      	movs	r1, #200	; 0xc8
 80065c0:	2000      	movs	r0, #0
 80065c2:	f7fd fb33 	bl	8003c2c <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 80065c6:	230e      	movs	r3, #14
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b29      	ldr	r3, [pc, #164]	; (8006670 <enableCntxMenu+0xe0>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	f103 020a 	add.w	r2, r3, #10
 80065d6:	2301      	movs	r3, #1
 80065d8:	21c8      	movs	r1, #200	; 0xc8
 80065da:	2000      	movs	r0, #0
 80065dc:	f7fd fb26 	bl	8003c2c <lcdHLine>
//		create list
		char item[30] = {0};
 80065e0:	2300      	movs	r3, #0
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
 80065ec:	609a      	str	r2, [r3, #8]
 80065ee:	60da      	str	r2, [r3, #12]
 80065f0:	611a      	str	r2, [r3, #16]
 80065f2:	615a      	str	r2, [r3, #20]
 80065f4:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80065f6:	2300      	movs	r3, #0
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e018      	b.n	800662e <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
 80065fe:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <enableCntxMenu+0xe4>)
 8006600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006604:	461a      	mov	r2, r3
 8006606:	463b      	mov	r3, r7
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f00f fb18 	bl	8015c40 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 8006610:	220e      	movs	r2, #14
 8006612:	7ffb      	ldrb	r3, [r7, #31]
 8006614:	fb13 f302 	smulbb	r3, r3, r2
 8006618:	b2db      	uxtb	r3, r3
 800661a:	330a      	adds	r3, #10
 800661c:	b2d9      	uxtb	r1, r3
 800661e:	463a      	mov	r2, r7
 8006620:	4b15      	ldr	r3, [pc, #84]	; (8006678 <enableCntxMenu+0xe8>)
 8006622:	2005      	movs	r0, #5
 8006624:	f7fc fe3a 	bl	800329c <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 8006628:	7ffb      	ldrb	r3, [r7, #31]
 800662a:	3301      	adds	r3, #1
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <enableCntxMenu+0xe0>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	7ffa      	ldrb	r2, [r7, #31]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3e1      	bcc.n	80065fc <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 8006638:	230e      	movs	r3, #14
 800663a:	461a      	mov	r2, r3
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <enableCntxMenu+0xec>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	fb02 f303 	mul.w	r3, r2, r3
 8006644:	f103 0208 	add.w	r2, r3, #8
 8006648:	230e      	movs	r3, #14
 800664a:	4619      	mov	r1, r3
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <enableCntxMenu+0xec>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	3308      	adds	r3, #8
 8006658:	2102      	movs	r1, #2
 800665a:	9100      	str	r1, [sp, #0]
 800665c:	21c8      	movs	r1, #200	; 0xc8
 800665e:	2000      	movs	r0, #0
 8006660:	f7fd fc3a 	bl	8003ed8 <lcdRect>

	}
}
 8006664:	bf00      	nop
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20005da1 	.word	0x20005da1
 8006670:	200000b4 	.word	0x200000b4
 8006674:	20000144 	.word	0x20000144
 8006678:	0802d724 	.word	0x0802d724
 800667c:	20005da2 	.word	0x20005da2

08006680 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	pageNum++;
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <nextPg+0x1c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <nextPg+0x1c>)
 800668e:	701a      	strb	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20005da8 	.word	0x20005da8

080066a0 <prevPg>:
void prevPg(void){
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
	pageNum--;
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <prevPg+0x1c>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <prevPg+0x1c>)
 80066ae:	701a      	strb	r2, [r3, #0]
}
 80066b0:	bf00      	nop
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20005da8 	.word	0x20005da8

080066c0 <syncTime>:
void syncTime(void){
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
	if(location.isValid){
 80066c4:	4b15      	ldr	r3, [pc, #84]	; (800671c <syncTime+0x5c>)
 80066c6:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d023      	beq.n	8006716 <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <syncTime+0x5c>)
 80066d0:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <syncTime+0x60>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	4413      	add	r3, r2
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <syncTime+0x64>)
 80066e0:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <syncTime+0x5c>)
 80066e4:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <syncTime+0x64>)
 80066ea:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <syncTime+0x5c>)
 80066ee:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <syncTime+0x64>)
 80066f4:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <syncTime+0x64>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <syncTime+0x64>)
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006702:	2200      	movs	r2, #0
 8006704:	4907      	ldr	r1, [pc, #28]	; (8006724 <syncTime+0x64>)
 8006706:	4808      	ldr	r0, [pc, #32]	; (8006728 <syncTime+0x68>)
 8006708:	f006 ffd8 	bl	800d6bc <HAL_RTC_SetTime>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <syncTime+0x56>
		{
		Error_Handler();
 8006712:	f7fd ff39 	bl	8004588 <Error_Handler>
		}
	}
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20005650 	.word	0x20005650
 8006720:	20000060 	.word	0x20000060
 8006724:	200057c8 	.word	0x200057c8
 8006728:	20005a78 	.word	0x20005a78

0800672c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <setDefaultClbcks+0x2c>)
 8006732:	4a0a      	ldr	r2, [pc, #40]	; (800675c <setDefaultClbcks+0x30>)
 8006734:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <setDefaultClbcks+0x34>)
 8006738:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <setDefaultClbcks+0x38>)
 800673a:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <setDefaultClbcks+0x3c>)
 800673e:	4a0b      	ldr	r2, [pc, #44]	; (800676c <setDefaultClbcks+0x40>)
 8006740:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <setDefaultClbcks+0x44>)
 8006744:	4a0b      	ldr	r2, [pc, #44]	; (8006774 <setDefaultClbcks+0x48>)
 8006746:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <setDefaultClbcks+0x4c>)
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <setDefaultClbcks+0x50>)
 800674c:	611a      	str	r2, [r3, #16]
}
 800674e:	bf00      	nop
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20002560 	.word	0x20002560
 800675c:	08002bd9 	.word	0x08002bd9
 8006760:	200025f0 	.word	0x200025f0
 8006764:	08002be9 	.word	0x08002be9
 8006768:	20002638 	.word	0x20002638
 800676c:	08006681 	.word	0x08006681
 8006770:	200026c8 	.word	0x200026c8
 8006774:	080066a1 	.word	0x080066a1
 8006778:	20002680 	.word	0x20002680
 800677c:	080066c1 	.word	0x080066c1

08006780 <gpsSetup>:

void gpsSetup(void){
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006784:	f7ff ffd2 	bl	800672c <setDefaultClbcks>

}
 8006788:	bf00      	nop
 800678a:	bd80      	pop	{r7, pc}

0800678c <gpsMain>:

void gpsMain(void){
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 8006792:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 8006794:	2300      	movs	r3, #0
 8006796:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800679a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800679e:	222f      	movs	r2, #47	; 0x2f
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f00e f91e 	bl	80149e4 <memset>

	switch(pageNum){
 80067a8:	4bb2      	ldr	r3, [pc, #712]	; (8006a74 <gpsMain+0x2e8>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <gpsMain+0x2c>
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f000 80e7 	beq.w	8006984 <gpsMain+0x1f8>
 80067b6:	e13e      	b.n	8006a36 <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 80067be:	49ae      	ldr	r1, [pc, #696]	; (8006a78 <gpsMain+0x2ec>)
 80067c0:	48ae      	ldr	r0, [pc, #696]	; (8006a7c <gpsMain+0x2f0>)
 80067c2:	f7fb ff8b 	bl	80026dc <getLocation>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 80067cc:	4baa      	ldr	r3, [pc, #680]	; (8006a78 <gpsMain+0x2ec>)
 80067ce:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 80067d2:	4ba9      	ldr	r3, [pc, #676]	; (8006a78 <gpsMain+0x2ec>)
 80067d4:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80067d8:	4013      	ands	r3, r2
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8095 	beq.w	800690c <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 80067e2:	4ba5      	ldr	r3, [pc, #660]	; (8006a78 <gpsMain+0x2ec>)
 80067e4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80067e8:	461a      	mov	r2, r3
 80067ea:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80067ee:	49a4      	ldr	r1, [pc, #656]	; (8006a80 <gpsMain+0x2f4>)
 80067f0:	4618      	mov	r0, r3
 80067f2:	f00f fa25 	bl	8015c40 <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 80067f6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80067fa:	4ba2      	ldr	r3, [pc, #648]	; (8006a84 <gpsMain+0x2f8>)
 80067fc:	21dc      	movs	r1, #220	; 0xdc
 80067fe:	20c8      	movs	r0, #200	; 0xc8
 8006800:	f7fc fd4c 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8006804:	4b9c      	ldr	r3, [pc, #624]	; (8006a78 <gpsMain+0x2ec>)
 8006806:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800680a:	461a      	mov	r2, r3
 800680c:	4b9a      	ldr	r3, [pc, #616]	; (8006a78 <gpsMain+0x2ec>)
 800680e:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006812:	4619      	mov	r1, r3
 8006814:	4b98      	ldr	r3, [pc, #608]	; (8006a78 <gpsMain+0x2ec>)
 8006816:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800681a:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	460b      	mov	r3, r1
 8006822:	4999      	ldr	r1, [pc, #612]	; (8006a88 <gpsMain+0x2fc>)
 8006824:	f00f fa0c 	bl	8015c40 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8006828:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800682c:	4b97      	ldr	r3, [pc, #604]	; (8006a8c <gpsMain+0x300>)
 800682e:	2100      	movs	r1, #0
 8006830:	2000      	movs	r0, #0
 8006832:	f7fc fd33 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006836:	4b96      	ldr	r3, [pc, #600]	; (8006a90 <gpsMain+0x304>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	4b94      	ldr	r3, [pc, #592]	; (8006a90 <gpsMain+0x304>)
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	4619      	mov	r1, r3
 8006842:	4b93      	ldr	r3, [pc, #588]	; (8006a90 <gpsMain+0x304>)
 8006844:	789b      	ldrb	r3, [r3, #2]
 8006846:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	460b      	mov	r3, r1
 800684e:	4991      	ldr	r1, [pc, #580]	; (8006a94 <gpsMain+0x308>)
 8006850:	f00f f9f6 	bl	8015c40 <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 8006854:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006858:	4b8c      	ldr	r3, [pc, #560]	; (8006a8c <gpsMain+0x300>)
 800685a:	2100      	movs	r1, #0
 800685c:	20dc      	movs	r0, #220	; 0xdc
 800685e:	f7fc fd1d 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 8006862:	4b8d      	ldr	r3, [pc, #564]	; (8006a98 <gpsMain+0x30c>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800686a:	498c      	ldr	r1, [pc, #560]	; (8006a9c <gpsMain+0x310>)
 800686c:	4618      	mov	r0, r3
 800686e:	f00f f9e7 	bl	8015c40 <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 8006872:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006876:	4b85      	ldr	r3, [pc, #532]	; (8006a8c <gpsMain+0x300>)
 8006878:	2114      	movs	r1, #20
 800687a:	20dc      	movs	r0, #220	; 0xdc
 800687c:	f7fc fd0e 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 8006880:	4b7d      	ldr	r3, [pc, #500]	; (8006a78 <gpsMain+0x2ec>)
 8006882:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8006886:	4619      	mov	r1, r3
 8006888:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <gpsMain+0x2ec>)
 800688a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800688e:	461c      	mov	r4, r3
 8006890:	4b79      	ldr	r3, [pc, #484]	; (8006a78 <gpsMain+0x2ec>)
 8006892:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8006896:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800689a:	e9cd 2300 	strd	r2, r3, [sp]
 800689e:	4623      	mov	r3, r4
 80068a0:	460a      	mov	r2, r1
 80068a2:	497f      	ldr	r1, [pc, #508]	; (8006aa0 <gpsMain+0x314>)
 80068a4:	f00f f9cc 	bl	8015c40 <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 80068a8:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80068ac:	4b7d      	ldr	r3, [pc, #500]	; (8006aa4 <gpsMain+0x318>)
 80068ae:	2132      	movs	r1, #50	; 0x32
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7fc fcf3 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 80068b6:	4b70      	ldr	r3, [pc, #448]	; (8006a78 <gpsMain+0x2ec>)
 80068b8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80068bc:	4619      	mov	r1, r3
 80068be:	4b6e      	ldr	r3, [pc, #440]	; (8006a78 <gpsMain+0x2ec>)
 80068c0:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80068c4:	461c      	mov	r4, r3
 80068c6:	4b6c      	ldr	r3, [pc, #432]	; (8006a78 <gpsMain+0x2ec>)
 80068c8:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80068cc:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80068d0:	e9cd 2300 	strd	r2, r3, [sp]
 80068d4:	4623      	mov	r3, r4
 80068d6:	460a      	mov	r2, r1
 80068d8:	4971      	ldr	r1, [pc, #452]	; (8006aa0 <gpsMain+0x314>)
 80068da:	f00f f9b1 	bl	8015c40 <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 80068de:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80068e2:	4b70      	ldr	r3, [pc, #448]	; (8006aa4 <gpsMain+0x318>)
 80068e4:	216e      	movs	r1, #110	; 0x6e
 80068e6:	2000      	movs	r0, #0
 80068e8:	f7fc fcd8 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 80068ec:	4b62      	ldr	r3, [pc, #392]	; (8006a78 <gpsMain+0x2ec>)
 80068ee:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80068f2:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80068f6:	496c      	ldr	r1, [pc, #432]	; (8006aa8 <gpsMain+0x31c>)
 80068f8:	f00f f9a2 	bl	8015c40 <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 80068fc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006900:	4b6a      	ldr	r3, [pc, #424]	; (8006aac <gpsMain+0x320>)
 8006902:	21aa      	movs	r1, #170	; 0xaa
 8006904:	2014      	movs	r0, #20
 8006906:	f7fc fcc9 	bl	800329c <lcdPutStr>
 800690a:	e029      	b.n	8006960 <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 800690c:	4b5a      	ldr	r3, [pc, #360]	; (8006a78 <gpsMain+0x2ec>)
 800690e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006912:	461a      	mov	r2, r3
 8006914:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006918:	4965      	ldr	r1, [pc, #404]	; (8006ab0 <gpsMain+0x324>)
 800691a:	4618      	mov	r0, r3
 800691c:	f00f f990 	bl	8015c40 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8006920:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <gpsMain+0x300>)
 8006926:	2100      	movs	r1, #0
 8006928:	2000      	movs	r0, #0
 800692a:	f7fc fcb7 	bl	800329c <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 800692e:	4b52      	ldr	r3, [pc, #328]	; (8006a78 <gpsMain+0x2ec>)
 8006930:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006934:	461a      	mov	r2, r3
 8006936:	4b50      	ldr	r3, [pc, #320]	; (8006a78 <gpsMain+0x2ec>)
 8006938:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800693c:	4619      	mov	r1, r3
 800693e:	4b4e      	ldr	r3, [pc, #312]	; (8006a78 <gpsMain+0x2ec>)
 8006940:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006944:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	460b      	mov	r3, r1
 800694c:	4959      	ldr	r1, [pc, #356]	; (8006ab4 <gpsMain+0x328>)
 800694e:	f00f f977 	bl	8015c40 <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 8006952:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006956:	4b4d      	ldr	r3, [pc, #308]	; (8006a8c <gpsMain+0x300>)
 8006958:	211e      	movs	r1, #30
 800695a:	2000      	movs	r0, #0
 800695c:	f7fc fc9e 	bl	800329c <lcdPutStr>
		}
		if(locUpdated){
 8006960:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8006964:	2b00      	cmp	r3, #0
 8006966:	d07f      	beq.n	8006a68 <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 8006968:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800696c:	4952      	ldr	r1, [pc, #328]	; (8006ab8 <gpsMain+0x32c>)
 800696e:	4618      	mov	r0, r3
 8006970:	f00f f966 	bl	8015c40 <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 8006974:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006978:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <gpsMain+0x2f8>)
 800697a:	21dc      	movs	r1, #220	; 0xdc
 800697c:	2000      	movs	r0, #0
 800697e:	f7fc fc8d 	bl	800329c <lcdPutStr>
		}
		break;
 8006982:	e071      	b.n	8006a68 <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 8006984:	493c      	ldr	r1, [pc, #240]	; (8006a78 <gpsMain+0x2ec>)
 8006986:	483d      	ldr	r0, [pc, #244]	; (8006a7c <gpsMain+0x2f0>)
 8006988:	f7fb fea8 	bl	80026dc <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 800698c:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <gpsMain+0x2f8>)
 800698e:	4a3a      	ldr	r2, [pc, #232]	; (8006a78 <gpsMain+0x2ec>)
 8006990:	2119      	movs	r1, #25
 8006992:	2000      	movs	r0, #0
 8006994:	f7fc fc82 	bl	800329c <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 8006998:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <gpsMain+0x2f8>)
 800699a:	4a48      	ldr	r2, [pc, #288]	; (8006abc <gpsMain+0x330>)
 800699c:	2128      	movs	r1, #40	; 0x28
 800699e:	2000      	movs	r0, #0
 80069a0:	f7fc fc7c 	bl	800329c <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 80069a4:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <gpsMain+0x2f8>)
 80069a6:	4a46      	ldr	r2, [pc, #280]	; (8006ac0 <gpsMain+0x334>)
 80069a8:	2137      	movs	r1, #55	; 0x37
 80069aa:	2000      	movs	r0, #0
 80069ac:	f7fc fc76 	bl	800329c <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 80069b0:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <gpsMain+0x2f8>)
 80069b2:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <gpsMain+0x338>)
 80069b4:	2146      	movs	r1, #70	; 0x46
 80069b6:	2000      	movs	r0, #0
 80069b8:	f7fc fc70 	bl	800329c <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 80069bc:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <gpsMain+0x2f8>)
 80069be:	4a42      	ldr	r2, [pc, #264]	; (8006ac8 <gpsMain+0x33c>)
 80069c0:	2155      	movs	r1, #85	; 0x55
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7fc fc6a 	bl	800329c <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <gpsMain+0x2f8>)
 80069ca:	4a40      	ldr	r2, [pc, #256]	; (8006acc <gpsMain+0x340>)
 80069cc:	2164      	movs	r1, #100	; 0x64
 80069ce:	2000      	movs	r0, #0
 80069d0:	f7fc fc64 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 80069d4:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <gpsMain+0x2f8>)
 80069d6:	4a3e      	ldr	r2, [pc, #248]	; (8006ad0 <gpsMain+0x344>)
 80069d8:	2119      	movs	r1, #25
 80069da:	2064      	movs	r0, #100	; 0x64
 80069dc:	f7fc fc5e 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <gpsMain+0x2f8>)
 80069e2:	4a3c      	ldr	r2, [pc, #240]	; (8006ad4 <gpsMain+0x348>)
 80069e4:	2128      	movs	r1, #40	; 0x28
 80069e6:	2064      	movs	r0, #100	; 0x64
 80069e8:	f7fc fc58 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <gpsMain+0x2f8>)
 80069ee:	4a3a      	ldr	r2, [pc, #232]	; (8006ad8 <gpsMain+0x34c>)
 80069f0:	2137      	movs	r1, #55	; 0x37
 80069f2:	2064      	movs	r0, #100	; 0x64
 80069f4:	f7fc fc52 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <gpsMain+0x2f8>)
 80069fa:	4a38      	ldr	r2, [pc, #224]	; (8006adc <gpsMain+0x350>)
 80069fc:	2146      	movs	r1, #70	; 0x46
 80069fe:	2064      	movs	r0, #100	; 0x64
 8006a00:	f7fc fc4c 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <gpsMain+0x2f8>)
 8006a06:	4a36      	ldr	r2, [pc, #216]	; (8006ae0 <gpsMain+0x354>)
 8006a08:	2155      	movs	r1, #85	; 0x55
 8006a0a:	2064      	movs	r0, #100	; 0x64
 8006a0c:	f7fc fc46 	bl	800329c <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 8006a10:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <gpsMain+0x2f8>)
 8006a12:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <gpsMain+0x358>)
 8006a14:	2164      	movs	r1, #100	; 0x64
 8006a16:	2064      	movs	r0, #100	; 0x64
 8006a18:	f7fc fc40 	bl	800329c <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <gpsMain+0x2f8>)
 8006a1e:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <gpsMain+0x35c>)
 8006a20:	2119      	movs	r1, #25
 8006a22:	20c8      	movs	r0, #200	; 0xc8
 8006a24:	f7fc fc3a 	bl	800329c <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 8006a28:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <gpsMain+0x2f8>)
 8006a2a:	4a30      	ldr	r2, [pc, #192]	; (8006aec <gpsMain+0x360>)
 8006a2c:	2128      	movs	r1, #40	; 0x28
 8006a2e:	20c8      	movs	r0, #200	; 0xc8
 8006a30:	f7fc fc34 	bl	800329c <lcdPutStr>
		break;
 8006a34:	e019      	b.n	8006a6a <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 8006a36:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006a3a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	3304      	adds	r3, #4
 8006a44:	f240 2255 	movw	r2, #597	; 0x255
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f00d ffca 	bl	80149e4 <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 8006a50:	463b      	mov	r3, r7
 8006a52:	4927      	ldr	r1, [pc, #156]	; (8006af0 <gpsMain+0x364>)
 8006a54:	4618      	mov	r0, r3
 8006a56:	f00f f984 	bl	8015d62 <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <gpsMain+0x2f8>)
 8006a5e:	2100      	movs	r1, #0
 8006a60:	2000      	movs	r0, #0
 8006a62:	f7fc fc49 	bl	80032f8 <lcdPutStrML>
		break;
 8006a66:	e000      	b.n	8006a6a <gpsMain+0x2de>
		break;
 8006a68:	bf00      	nop





}
 8006a6a:	bf00      	nop
 8006a6c:	f507 7725 	add.w	r7, r7, #660	; 0x294
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}
 8006a74:	20005da8 	.word	0x20005da8
 8006a78:	20005650 	.word	0x20005650
 8006a7c:	20005804 	.word	0x20005804
 8006a80:	0801d440 	.word	0x0801d440
 8006a84:	0802e1ac 	.word	0x0802e1ac
 8006a88:	0801d458 	.word	0x0801d458
 8006a8c:	0802e628 	.word	0x0802e628
 8006a90:	200057c8 	.word	0x200057c8
 8006a94:	0801d46c 	.word	0x0801d46c
 8006a98:	20000060 	.word	0x20000060
 8006a9c:	0801d480 	.word	0x0801d480
 8006aa0:	0801d488 	.word	0x0801d488
 8006aa4:	08031a58 	.word	0x08031a58
 8006aa8:	0801d494 	.word	0x0801d494
 8006aac:	0802fbf0 	.word	0x0802fbf0
 8006ab0:	0801d4a0 	.word	0x0801d4a0
 8006ab4:	0801d4b8 	.word	0x0801d4b8
 8006ab8:	0801d4d4 	.word	0x0801d4d4
 8006abc:	200056a6 	.word	0x200056a6
 8006ac0:	200056b5 	.word	0x200056b5
 8006ac4:	200056c4 	.word	0x200056c4
 8006ac8:	200056d3 	.word	0x200056d3
 8006acc:	200056e2 	.word	0x200056e2
 8006ad0:	200056f1 	.word	0x200056f1
 8006ad4:	20005700 	.word	0x20005700
 8006ad8:	2000570f 	.word	0x2000570f
 8006adc:	2000571e 	.word	0x2000571e
 8006ae0:	2000572d 	.word	0x2000572d
 8006ae4:	2000573c 	.word	0x2000573c
 8006ae8:	2000574b 	.word	0x2000574b
 8006aec:	2000575a 	.word	0x2000575a
 8006af0:	20005808 	.word	0x20005808

08006af4 <switchLocalView>:
void remDay(){
	testTime.tm_mday--;
	mktime(&testTime);

}
void switchLocalView(void){
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
	if(localModuleNum<=3){
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <switchLocalView+0x2c>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d806      	bhi.n	8006b0e <switchLocalView+0x1a>
		localModuleNum++;
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <switchLocalView+0x2c>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <switchLocalView+0x2c>)
 8006b0a:	701a      	strb	r2, [r3, #0]
	} else {
		localModuleNum = 0;
	}
}
 8006b0c:	e002      	b.n	8006b14 <switchLocalView+0x20>
		localModuleNum = 0;
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <switchLocalView+0x2c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20005dd0 	.word	0x20005dd0

08006b24 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <setDefaultClbcks+0x20>)
 8006b2a:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <setDefaultClbcks+0x24>)
 8006b2c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <setDefaultClbcks+0x28>)
 8006b30:	4a07      	ldr	r2, [pc, #28]	; (8006b50 <setDefaultClbcks+0x2c>)
 8006b32:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &switchLocalView;
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <setDefaultClbcks+0x30>)
 8006b36:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <setDefaultClbcks+0x34>)
 8006b38:	611a      	str	r2, [r3, #16]
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20002560 	.word	0x20002560
 8006b48:	08002bd9 	.word	0x08002bd9
 8006b4c:	200025f0 	.word	0x200025f0
 8006b50:	08002be9 	.word	0x08002be9
 8006b54:	200025a8 	.word	0x200025a8
 8006b58:	08006af5 	.word	0x08006af5

08006b5c <localSetup>:
void localSetup(void){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006b60:	f7ff ffe0 	bl	8006b24 <setDefaultClbcks>
}
 8006b64:	bf00      	nop
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <fractionalYear>:
	int8_t timezone;	// [h] east+ west-
	double longitude; 	// [deg]
	double latitude;	// [deg]
};
// fractional year = gamma [rad]
float fractionalYear(struct tm *timeStr, struct local_location *location){
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
	int dayOfTheYear = testTime.tm_yday+1;
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <fractionalYear+0x68>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
	return (2*M_PI/365)*(dayOfTheYear-1+(timeStr->tm_hour-location->timezone-12)/24);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	f991 1000 	ldrsb.w	r1, [r1]
 8006b88:	1a5b      	subs	r3, r3, r1
 8006b8a:	3b0c      	subs	r3, #12
 8006b8c:	4911      	ldr	r1, [pc, #68]	; (8006bd4 <fractionalYear+0x6c>)
 8006b8e:	fb81 0103 	smull	r0, r1, r1, r3
 8006b92:	1089      	asrs	r1, r1, #2
 8006b94:	17db      	asrs	r3, r3, #31
 8006b96:	1acb      	subs	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7f9 fce2 	bl	8000564 <__aeabi_i2d>
 8006ba0:	a309      	add	r3, pc, #36	; (adr r3, 8006bc8 <fractionalYear+0x60>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fd47 	bl	8000638 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f7fa f839 	bl	8000c28 <__aeabi_d2f>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	ee07 3a90 	vmov	s15, r3
}
 8006bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	d4b3ac9a 	.word	0xd4b3ac9a
 8006bcc:	3f91a099 	.word	0x3f91a099
 8006bd0:	20005dac 	.word	0x20005dac
 8006bd4:	2aaaaaab 	.word	0x2aaaaaab

08006bd8 <equationOfTime>:
// equation of time [min]
float equationOfTime(float fyear){
 8006bd8:	b5b0      	push	{r4, r5, r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	ed87 0a01 	vstr	s0, [r7, #4]
	return 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7f9 fcd0 	bl	8000588 <__aeabi_f2d>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	ec43 2b10 	vmov	d0, r2, r3
 8006bf0:	f013 fb26 	bl	801a240 <cos>
 8006bf4:	ec51 0b10 	vmov	r0, r1, d0
 8006bf8:	a33f      	add	r3, pc, #252	; (adr r3, 8006cf8 <equationOfTime+0x120>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fd1b 	bl	8000638 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	a33d      	add	r3, pc, #244	; (adr r3, 8006d00 <equationOfTime+0x128>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fb5c 	bl	80002cc <__adddf3>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7f9 fcb3 	bl	8000588 <__aeabi_f2d>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	ec43 2b10 	vmov	d0, r2, r3
 8006c2a:	f013 fb5d 	bl	801a2e8 <sin>
 8006c2e:	ec51 0b10 	vmov	r0, r1, d0
 8006c32:	a335      	add	r3, pc, #212	; (adr r3, 8006d08 <equationOfTime+0x130>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fcfe 	bl	8000638 <__aeabi_dmul>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4620      	mov	r0, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	f7f9 fb40 	bl	80002c8 <__aeabi_dsub>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c58:	ee17 0a90 	vmov	r0, s15
 8006c5c:	f7f9 fc94 	bl	8000588 <__aeabi_f2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	ec43 2b10 	vmov	d0, r2, r3
 8006c68:	f013 faea 	bl	801a240 <cos>
 8006c6c:	ec51 0b10 	vmov	r0, r1, d0
 8006c70:	a327      	add	r3, pc, #156	; (adr r3, 8006d10 <equationOfTime+0x138>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fcdf 	bl	8000638 <__aeabi_dmul>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 fb21 	bl	80002c8 <__aeabi_dsub>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	461d      	mov	r5, r3
 8006c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c96:	ee17 0a90 	vmov	r0, s15
 8006c9a:	f7f9 fc75 	bl	8000588 <__aeabi_f2d>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	ec43 2b10 	vmov	d0, r2, r3
 8006ca6:	f013 fb1f 	bl	801a2e8 <sin>
 8006caa:	ec51 0b10 	vmov	r0, r1, d0
 8006cae:	a31a      	add	r3, pc, #104	; (adr r3, 8006d18 <equationOfTime+0x140>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f7f9 fcc0 	bl	8000638 <__aeabi_dmul>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 fb02 	bl	80002c8 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	a314      	add	r3, pc, #80	; (adr r3, 8006d20 <equationOfTime+0x148>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f7f9 fcb1 	bl	8000638 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7f9 ffa3 	bl	8000c28 <__aeabi_d2f>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	ee07 3a90 	vmov	s15, r3
}
 8006ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	ba2be059 	.word	0xba2be059
 8006cfc:	3f5e9af5 	.word	0x3f5e9af5
 8006d00:	30553261 	.word	0x30553261
 8006d04:	3f13a92a 	.word	0x3f13a92a
 8006d08:	83e8576d 	.word	0x83e8576d
 8006d0c:	3fa06c65 	.word	0x3fa06c65
 8006d10:	183f91e6 	.word	0x183f91e6
 8006d14:	3f8dee78 	.word	0x3f8dee78
 8006d18:	fe260b2d 	.word	0xfe260b2d
 8006d1c:	3fa4ea28 	.word	0x3fa4ea28
 8006d20:	8f5c28f6 	.word	0x8f5c28f6
 8006d24:	406ca5c2 	.word	0x406ca5c2

08006d28 <solarDeclination>:
// solar declination angle [rad]
float solarDeclination(float fyear){
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7f9 fc28 	bl	8000588 <__aeabi_f2d>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	ec43 2b10 	vmov	d0, r2, r3
 8006d40:	f013 fa7e 	bl	801a240 <cos>
 8006d44:	ec51 0b10 	vmov	r0, r1, d0
 8006d48:	a359      	add	r3, pc, #356	; (adr r3, 8006eb0 <solarDeclination+0x188>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fc73 	bl	8000638 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	a158      	add	r1, pc, #352	; (adr r1, 8006eb8 <solarDeclination+0x190>)
 8006d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d5c:	f7f9 fab4 	bl	80002c8 <__aeabi_dsub>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4614      	mov	r4, r2
 8006d66:	461d      	mov	r5, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7f9 fc0d 	bl	8000588 <__aeabi_f2d>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	ec43 2b10 	vmov	d0, r2, r3
 8006d76:	f013 fab7 	bl	801a2e8 <sin>
 8006d7a:	ec51 0b10 	vmov	r0, r1, d0
 8006d7e:	a350      	add	r3, pc, #320	; (adr r3, 8006ec0 <solarDeclination+0x198>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fc58 	bl	8000638 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fa9c 	bl	80002cc <__adddf3>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006da0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006da4:	ee17 0a90 	vmov	r0, s15
 8006da8:	f7f9 fbee 	bl	8000588 <__aeabi_f2d>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	ec43 2b10 	vmov	d0, r2, r3
 8006db4:	f013 fa44 	bl	801a240 <cos>
 8006db8:	ec51 0b10 	vmov	r0, r1, d0
 8006dbc:	a342      	add	r3, pc, #264	; (adr r3, 8006ec8 <solarDeclination+0x1a0>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 fc39 	bl	8000638 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4620      	mov	r0, r4
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7f9 fa7b 	bl	80002c8 <__aeabi_dsub>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461d      	mov	r5, r3
 8006dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006de2:	ee17 0a90 	vmov	r0, s15
 8006de6:	f7f9 fbcf 	bl	8000588 <__aeabi_f2d>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	ec43 2b10 	vmov	d0, r2, r3
 8006df2:	f013 fa79 	bl	801a2e8 <sin>
 8006df6:	ec51 0b10 	vmov	r0, r1, d0
 8006dfa:	a335      	add	r3, pc, #212	; (adr r3, 8006ed0 <solarDeclination+0x1a8>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fc1a 	bl	8000638 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7f9 fa5e 	bl	80002cc <__adddf3>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	461d      	mov	r5, r3
 8006e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e24:	ee17 0a90 	vmov	r0, s15
 8006e28:	f7f9 fbae 	bl	8000588 <__aeabi_f2d>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	ec43 2b10 	vmov	d0, r2, r3
 8006e34:	f013 fa04 	bl	801a240 <cos>
 8006e38:	ec51 0b10 	vmov	r0, r1, d0
 8006e3c:	a326      	add	r3, pc, #152	; (adr r3, 8006ed8 <solarDeclination+0x1b0>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fbf9 	bl	8000638 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7f9 fa3b 	bl	80002c8 <__aeabi_dsub>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4614      	mov	r4, r2
 8006e58:	461d      	mov	r5, r3
 8006e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e66:	ee17 0a90 	vmov	r0, s15
 8006e6a:	f7f9 fb8d 	bl	8000588 <__aeabi_f2d>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	ec43 2b10 	vmov	d0, r2, r3
 8006e76:	f013 fa37 	bl	801a2e8 <sin>
 8006e7a:	ec51 0b10 	vmov	r0, r1, d0
 8006e7e:	a318      	add	r3, pc, #96	; (adr r3, 8006ee0 <solarDeclination+0x1b8>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbd8 	bl	8000638 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fa1c 	bl	80002cc <__adddf3>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f7f9 fec4 	bl	8000c28 <__aeabi_d2f>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	ee07 3a90 	vmov	s15, r3
}
 8006ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb0:	8051c9f7 	.word	0x8051c9f7
 8006eb4:	3fd99828 	.word	0x3fd99828
 8006eb8:	7c0f4517 	.word	0x7c0f4517
 8006ebc:	3f7c560c 	.word	0x3f7c560c
 8006ec0:	dd50a88f 	.word	0xdd50a88f
 8006ec4:	3fb1fc5c 	.word	0x3fb1fc5c
 8006ec8:	cfc829d0 	.word	0xcfc829d0
 8006ecc:	3f7bae46 	.word	0x3f7bae46
 8006ed0:	ab324852 	.word	0xab324852
 8006ed4:	3f4db877 	.word	0x3f4db877
 8006ed8:	d9839475 	.word	0xd9839475
 8006edc:	3f661804 	.word	0x3f661804
 8006ee0:	e646f156 	.word	0xe646f156
 8006ee4:	3f583f91 	.word	0x3f583f91

08006ee8 <timeOffset>:
// time offset [min]
float timeOffset(struct local_location *location, float fyear){
 8006ee8:	b5b0      	push	{r4, r5, r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	ed87 0a00 	vstr	s0, [r7]
	return equationOfTime(fyear)+4*location->longitude-60*location->timezone;
 8006ef4:	ed97 0a00 	vldr	s0, [r7]
 8006ef8:	f7ff fe6e 	bl	8006bd8 <equationOfTime>
 8006efc:	ee10 3a10 	vmov	r3, s0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7f9 fb41 	bl	8000588 <__aeabi_f2d>
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <timeOffset+0x84>)
 8006f16:	f7f9 fb8f 	bl	8000638 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 f9d3 	bl	80002cc <__adddf3>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	461d      	mov	r5, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f993 3000 	ldrsb.w	r3, [r3]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7f9 fb10 	bl	8000564 <__aeabi_i2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f7f9 f9bc 	bl	80002c8 <__aeabi_dsub>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7f9 fe66 	bl	8000c28 <__aeabi_d2f>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	ee07 3a90 	vmov	s15, r3
}
 8006f62:	eeb0 0a67 	vmov.f32	s0, s15
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f6c:	40100000 	.word	0x40100000

08006f70 <trueSolarTime>:
// true solar time [min]
float trueSolarTime(struct tm *timeStr, float timeOffset){
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	ed87 0a00 	vstr	s0, [r7]
	return timeStr->tm_hour*60+timeStr->tm_min+(float)timeStr->tm_sec/60+timeOffset;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4613      	mov	r3, r2
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006fa4:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006fc8 <trueSolarTime+0x58>
 8006fa8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fb0:	edd7 7a00 	vldr	s15, [r7]
 8006fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	42700000 	.word	0x42700000
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <solarEventTime>:
//sunrise/sunset/noon times [min]
int solarEventTime(enum SOLAR_EVENT event,struct tm *timeStr, struct local_location *location, float cha){
 8006fd0:	b5b0      	push	{r4, r5, r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	ed87 0a00 	vstr	s0, [r7]
 8006fe0:	73fb      	strb	r3, [r7, #15]
	float fyear = fractionalYear(timeStr, location);
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	68b8      	ldr	r0, [r7, #8]
 8006fe6:	f7ff fdbf 	bl	8006b68 <fractionalYear>
 8006fea:	ed87 0a05 	vstr	s0, [r7, #20]
	float eqTime = equationOfTime(fyear);
 8006fee:	ed97 0a05 	vldr	s0, [r7, #20]
 8006ff2:	f7ff fdf1 	bl	8006bd8 <equationOfTime>
 8006ff6:	ed87 0a04 	vstr	s0, [r7, #16]
	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	switch(event){
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	f000 8093 	beq.w	8007128 <solarEventTime+0x158>
 8007002:	2b02      	cmp	r3, #2
 8007004:	f300 80e2 	bgt.w	80071cc <solarEventTime+0x1fc>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <solarEventTime+0x42>
 800700c:	2b01      	cmp	r3, #1
 800700e:	d052      	beq.n	80070b6 <solarEventTime+0xe6>
 8007010:	e0dc      	b.n	80071cc <solarEventTime+0x1fc>
		case SOLAR_SUNRISE:
			return 720-4*(location->longitude+cha*180/M_PI)-eqTime+60*location->timezone;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007018:	edd7 7a00 	vldr	s15, [r7]
 800701c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80071e0 <solarEventTime+0x210>
 8007020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007024:	ee17 0a90 	vmov	r0, s15
 8007028:	f7f9 faae 	bl	8000588 <__aeabi_f2d>
 800702c:	a36a      	add	r3, pc, #424	; (adr r3, 80071d8 <solarEventTime+0x208>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 fc2b 	bl	800088c <__aeabi_ddiv>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4620      	mov	r0, r4
 800703c:	4629      	mov	r1, r5
 800703e:	f7f9 f945 	bl	80002cc <__adddf3>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	4b65      	ldr	r3, [pc, #404]	; (80071e4 <solarEventTime+0x214>)
 8007050:	f7f9 faf2 	bl	8000638 <__aeabi_dmul>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	4962      	ldr	r1, [pc, #392]	; (80071e8 <solarEventTime+0x218>)
 800705e:	f7f9 f933 	bl	80002c8 <__aeabi_dsub>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4614      	mov	r4, r2
 8007068:	461d      	mov	r5, r3
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7f9 fa8c 	bl	8000588 <__aeabi_f2d>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 f926 	bl	80002c8 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4614      	mov	r4, r2
 8007082:	461d      	mov	r5, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f993 3000 	ldrsb.w	r3, [r3]
 800708a:	461a      	mov	r2, r3
 800708c:	4613      	mov	r3, r2
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4618      	mov	r0, r3
 8007096:	f7f9 fa65 	bl	8000564 <__aeabi_i2d>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4620      	mov	r0, r4
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7f9 f913 	bl	80002cc <__adddf3>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4610      	mov	r0, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	f7f9 fd73 	bl	8000b98 <__aeabi_d2iz>
 80070b2:	4603      	mov	r3, r0
 80070b4:	e08a      	b.n	80071cc <solarEventTime+0x1fc>
		case SOLAR_NOON:
			return 720-4*location->longitude-eqTime+60*location->timezone;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	4b48      	ldr	r3, [pc, #288]	; (80071e4 <solarEventTime+0x214>)
 80070c2:	f7f9 fab9 	bl	8000638 <__aeabi_dmul>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	f04f 0000 	mov.w	r0, #0
 80070ce:	4946      	ldr	r1, [pc, #280]	; (80071e8 <solarEventTime+0x218>)
 80070d0:	f7f9 f8fa 	bl	80002c8 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	6938      	ldr	r0, [r7, #16]
 80070de:	f7f9 fa53 	bl	8000588 <__aeabi_f2d>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 f8ed 	bl	80002c8 <__aeabi_dsub>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4614      	mov	r4, r2
 80070f4:	461d      	mov	r5, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f993 3000 	ldrsb.w	r3, [r3]
 80070fc:	461a      	mov	r2, r3
 80070fe:	4613      	mov	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 fa2c 	bl	8000564 <__aeabi_i2d>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4620      	mov	r0, r4
 8007112:	4629      	mov	r1, r5
 8007114:	f7f9 f8da 	bl	80002cc <__adddf3>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4610      	mov	r0, r2
 800711e:	4619      	mov	r1, r3
 8007120:	f7f9 fd3a 	bl	8000b98 <__aeabi_d2iz>
 8007124:	4603      	mov	r3, r0
 8007126:	e051      	b.n	80071cc <solarEventTime+0x1fc>
		case SOLAR_SUNSET:
			return 720-4*(location->longitude-cha*180/M_PI)-eqTime+60*location->timezone;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800712e:	edd7 7a00 	vldr	s15, [r7]
 8007132:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80071e0 <solarEventTime+0x210>
 8007136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800713a:	ee17 0a90 	vmov	r0, s15
 800713e:	f7f9 fa23 	bl	8000588 <__aeabi_f2d>
 8007142:	a325      	add	r3, pc, #148	; (adr r3, 80071d8 <solarEventTime+0x208>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 fba0 	bl	800088c <__aeabi_ddiv>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4620      	mov	r0, r4
 8007152:	4629      	mov	r1, r5
 8007154:	f7f9 f8b8 	bl	80002c8 <__aeabi_dsub>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4610      	mov	r0, r2
 800715e:	4619      	mov	r1, r3
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	4b1f      	ldr	r3, [pc, #124]	; (80071e4 <solarEventTime+0x214>)
 8007166:	f7f9 fa67 	bl	8000638 <__aeabi_dmul>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	f04f 0000 	mov.w	r0, #0
 8007172:	491d      	ldr	r1, [pc, #116]	; (80071e8 <solarEventTime+0x218>)
 8007174:	f7f9 f8a8 	bl	80002c8 <__aeabi_dsub>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	6938      	ldr	r0, [r7, #16]
 8007182:	f7f9 fa01 	bl	8000588 <__aeabi_f2d>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 f89b 	bl	80002c8 <__aeabi_dsub>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4614      	mov	r4, r2
 8007198:	461d      	mov	r5, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f993 3000 	ldrsb.w	r3, [r3]
 80071a0:	461a      	mov	r2, r3
 80071a2:	4613      	mov	r3, r2
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7f9 f9da 	bl	8000564 <__aeabi_i2d>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 f888 	bl	80002cc <__adddf3>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4610      	mov	r0, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	f7f9 fce8 	bl	8000b98 <__aeabi_d2iz>
 80071c8:	4603      	mov	r3, r0
 80071ca:	e7ff      	b.n	80071cc <solarEventTime+0x1fc>
	}
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bdb0      	pop	{r4, r5, r7, pc}
 80071d4:	f3af 8000 	nop.w
 80071d8:	54442d18 	.word	0x54442d18
 80071dc:	400921fb 	.word	0x400921fb
 80071e0:	43340000 	.word	0x43340000
 80071e4:	40100000 	.word	0x40100000
 80071e8:	40868000 	.word	0x40868000
 80071ec:	00000000 	.word	0x00000000

080071f0 <calcSolarAngles>:

struct solarAngles{
	float za, sa;
};

void calcSolarAngles(struct solarAngles *output, struct tm *timeStr, struct local_location *location){
 80071f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f4:	b08c      	sub	sp, #48	; 0x30
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
	// fractional year = gamma [rad]
	float fyear = fractionalYear(timeStr, location);
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	68b8      	ldr	r0, [r7, #8]
 8007202:	f7ff fcb1 	bl	8006b68 <fractionalYear>
 8007206:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 800720a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800720e:	f7ff fce3 	bl	8006bd8 <equationOfTime>
 8007212:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 8007216:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800721a:	f7ff fd85 	bl	8006d28 <solarDeclination>
 800721e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	float time_off = timeOffset(location, fyear);
 8007222:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff fe5e 	bl	8006ee8 <timeOffset>
 800722c:	ed87 0a08 	vstr	s0, [r7, #32]
	float tst = trueSolarTime(timeStr, time_off);
 8007230:	ed97 0a08 	vldr	s0, [r7, #32]
 8007234:	68b8      	ldr	r0, [r7, #8]
 8007236:	f7ff fe9b 	bl	8006f70 <trueSolarTime>
 800723a:	ed87 0a07 	vstr	s0, [r7, #28]
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 800723e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007242:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800724a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80074e8 <calcSolarAngles+0x2f8>
 800724e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007252:	edc7 7a06 	vstr	s15, [r7, #24]
	// solar zenith angle = phi [rad]
	float cosphi = sin(location->latitude*M_PI/180)*sin(decl)+cos(location->latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800725c:	a3a0      	add	r3, pc, #640	; (adr r3, 80074e0 <calcSolarAngles+0x2f0>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f9e9 	bl	8000638 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4610      	mov	r0, r2
 800726c:	4619      	mov	r1, r3
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	4b9e      	ldr	r3, [pc, #632]	; (80074ec <calcSolarAngles+0x2fc>)
 8007274:	f7f9 fb0a 	bl	800088c <__aeabi_ddiv>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	ec43 2b17 	vmov	d7, r2, r3
 8007280:	eeb0 0a47 	vmov.f32	s0, s14
 8007284:	eef0 0a67 	vmov.f32	s1, s15
 8007288:	f013 f82e 	bl	801a2e8 <sin>
 800728c:	ec59 8b10 	vmov	r8, r9, d0
 8007290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007292:	f7f9 f979 	bl	8000588 <__aeabi_f2d>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	ec43 2b10 	vmov	d0, r2, r3
 800729e:	f013 f823 	bl	801a2e8 <sin>
 80072a2:	ec53 2b10 	vmov	r2, r3, d0
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f9 f9c5 	bl	8000638 <__aeabi_dmul>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4690      	mov	r8, r2
 80072b4:	4699      	mov	r9, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80072bc:	a388      	add	r3, pc, #544	; (adr r3, 80074e0 <calcSolarAngles+0x2f0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f9 f9b9 	bl	8000638 <__aeabi_dmul>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	4b86      	ldr	r3, [pc, #536]	; (80074ec <calcSolarAngles+0x2fc>)
 80072d4:	f7f9 fada 	bl	800088c <__aeabi_ddiv>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	ec43 2b17 	vmov	d7, r2, r3
 80072e0:	eeb0 0a47 	vmov.f32	s0, s14
 80072e4:	eef0 0a67 	vmov.f32	s1, s15
 80072e8:	f012 ffaa 	bl	801a240 <cos>
 80072ec:	ec5b ab10 	vmov	sl, fp, d0
 80072f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f2:	f7f9 f949 	bl	8000588 <__aeabi_f2d>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	ec43 2b10 	vmov	d0, r2, r3
 80072fe:	f012 ff9f 	bl	801a240 <cos>
 8007302:	ec53 2b10 	vmov	r2, r3, d0
 8007306:	4650      	mov	r0, sl
 8007308:	4659      	mov	r1, fp
 800730a:	f7f9 f995 	bl	8000638 <__aeabi_dmul>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4692      	mov	sl, r2
 8007314:	469b      	mov	fp, r3
 8007316:	69b8      	ldr	r0, [r7, #24]
 8007318:	f7f9 f936 	bl	8000588 <__aeabi_f2d>
 800731c:	a370      	add	r3, pc, #448	; (adr r3, 80074e0 <calcSolarAngles+0x2f0>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f9 f989 	bl	8000638 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	4b6e      	ldr	r3, [pc, #440]	; (80074ec <calcSolarAngles+0x2fc>)
 8007334:	f7f9 faaa 	bl	800088c <__aeabi_ddiv>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	ec43 2b17 	vmov	d7, r2, r3
 8007340:	eeb0 0a47 	vmov.f32	s0, s14
 8007344:	eef0 0a67 	vmov.f32	s1, s15
 8007348:	f012 ff7a 	bl	801a240 <cos>
 800734c:	ec53 2b10 	vmov	r2, r3, d0
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	f7f9 f970 	bl	8000638 <__aeabi_dmul>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4640      	mov	r0, r8
 800735e:	4649      	mov	r1, r9
 8007360:	f7f8 ffb4 	bl	80002cc <__adddf3>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4610      	mov	r0, r2
 800736a:	4619      	mov	r1, r3
 800736c:	f7f9 fc5c 	bl	8000c28 <__aeabi_d2f>
 8007370:	4603      	mov	r3, r0
 8007372:	617b      	str	r3, [r7, #20]
	output->za = acos(cosphi);
 8007374:	6978      	ldr	r0, [r7, #20]
 8007376:	f7f9 f907 	bl	8000588 <__aeabi_f2d>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	ec43 2b10 	vmov	d0, r2, r3
 8007382:	f013 f83d 	bl	801a400 <acos>
 8007386:	ec53 2b10 	vmov	r2, r3, d0
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	f7f9 fc4b 	bl	8000c28 <__aeabi_d2f>
 8007392:	4602      	mov	r2, r0
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]
	float sinphi = sqrt(1-cosphi*cosphi);
 8007398:	edd7 7a05 	vldr	s15, [r7, #20]
 800739c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073a8:	ee17 0a90 	vmov	r0, s15
 80073ac:	f7f9 f8ec 	bl	8000588 <__aeabi_f2d>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	ec43 2b10 	vmov	d0, r2, r3
 80073b8:	f013 f8c6 	bl	801a548 <sqrt>
 80073bc:	ec53 2b10 	vmov	r2, r3, d0
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	f7f9 fc30 	bl	8000c28 <__aeabi_d2f>
 80073c8:	4603      	mov	r3, r0
 80073ca:	613b      	str	r3, [r7, #16]
	// solar azimuth = theta [rad]
	output->sa = -acos(-(sin(location->latitude*M_PI/180)*cosphi-sin(decl))/(cos(location->latitude*M_PI/180)*sinphi));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80073d2:	a343      	add	r3, pc, #268	; (adr r3, 80074e0 <calcSolarAngles+0x2f0>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f92e 	bl	8000638 <__aeabi_dmul>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	4b40      	ldr	r3, [pc, #256]	; (80074ec <calcSolarAngles+0x2fc>)
 80073ea:	f7f9 fa4f 	bl	800088c <__aeabi_ddiv>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	ec43 2b17 	vmov	d7, r2, r3
 80073f6:	eeb0 0a47 	vmov.f32	s0, s14
 80073fa:	eef0 0a67 	vmov.f32	s1, s15
 80073fe:	f012 ff73 	bl	801a2e8 <sin>
 8007402:	ec59 8b10 	vmov	r8, r9, d0
 8007406:	6978      	ldr	r0, [r7, #20]
 8007408:	f7f9 f8be 	bl	8000588 <__aeabi_f2d>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 f910 	bl	8000638 <__aeabi_dmul>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4690      	mov	r8, r2
 800741e:	4699      	mov	r9, r3
 8007420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007422:	f7f9 f8b1 	bl	8000588 <__aeabi_f2d>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	ec43 2b10 	vmov	d0, r2, r3
 800742e:	f012 ff5b 	bl	801a2e8 <sin>
 8007432:	ec53 2b10 	vmov	r2, r3, d0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 ff45 	bl	80002c8 <__aeabi_dsub>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4614      	mov	r4, r2
 8007444:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800744e:	a324      	add	r3, pc, #144	; (adr r3, 80074e0 <calcSolarAngles+0x2f0>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f8f0 	bl	8000638 <__aeabi_dmul>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <calcSolarAngles+0x2fc>)
 8007466:	f7f9 fa11 	bl	800088c <__aeabi_ddiv>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	ec43 2b17 	vmov	d7, r2, r3
 8007472:	eeb0 0a47 	vmov.f32	s0, s14
 8007476:	eef0 0a67 	vmov.f32	s1, s15
 800747a:	f012 fee1 	bl	801a240 <cos>
 800747e:	ec59 8b10 	vmov	r8, r9, d0
 8007482:	6938      	ldr	r0, [r7, #16]
 8007484:	f7f9 f880 	bl	8000588 <__aeabi_f2d>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 f8d2 	bl	8000638 <__aeabi_dmul>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f9 f9f6 	bl	800088c <__aeabi_ddiv>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	ec43 2b17 	vmov	d7, r2, r3
 80074a8:	eeb0 0a47 	vmov.f32	s0, s14
 80074ac:	eef0 0a67 	vmov.f32	s1, s15
 80074b0:	f012 ffa6 	bl	801a400 <acos>
 80074b4:	ec53 2b10 	vmov	r2, r3, d0
 80074b8:	4610      	mov	r0, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	f7f9 fbb4 	bl	8000c28 <__aeabi_d2f>
 80074c0:	4603      	mov	r3, r0
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef1 7a67 	vneg.f32	s15, s15
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80074d0:	bf00      	nop
 80074d2:	3730      	adds	r7, #48	; 0x30
 80074d4:	46bd      	mov	sp, r7
 80074d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w
 80074e0:	54442d18 	.word	0x54442d18
 80074e4:	400921fb 	.word	0x400921fb
 80074e8:	43340000 	.word	0x43340000
 80074ec:	40668000 	.word	0x40668000

080074f0 <localMain>:



void localMain(void){
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b0c5      	sub	sp, #276	; 0x114
 80074f6:	af08      	add	r7, sp, #32
	testTime.tm_hour = RtcTime.Hours;
 80074f8:	4b3e      	ldr	r3, [pc, #248]	; (80075f4 <localMain+0x104>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b3e      	ldr	r3, [pc, #248]	; (80075f8 <localMain+0x108>)
 8007500:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8007502:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <localMain+0x104>)
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	461a      	mov	r2, r3
 8007508:	4b3b      	ldr	r3, [pc, #236]	; (80075f8 <localMain+0x108>)
 800750a:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 800750c:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <localMain+0x104>)
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	461a      	mov	r2, r3
 8007512:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <localMain+0x108>)
 8007514:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8007516:	4b39      	ldr	r3, [pc, #228]	; (80075fc <localMain+0x10c>)
 8007518:	789b      	ldrb	r3, [r3, #2]
 800751a:	461a      	mov	r2, r3
 800751c:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <localMain+0x108>)
 800751e:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8007520:	4b36      	ldr	r3, [pc, #216]	; (80075fc <localMain+0x10c>)
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	3b01      	subs	r3, #1
 8007526:	4a34      	ldr	r2, [pc, #208]	; (80075f8 <localMain+0x108>)
 8007528:	6113      	str	r3, [r2, #16]
	testTime.tm_year = RtcDate.Year+100;
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <localMain+0x10c>)
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	3364      	adds	r3, #100	; 0x64
 8007530:	4a31      	ldr	r2, [pc, #196]	; (80075f8 <localMain+0x108>)
 8007532:	6153      	str	r3, [r2, #20]
	mktime(&testTime);
 8007534:	4830      	ldr	r0, [pc, #192]	; (80075f8 <localMain+0x108>)
 8007536:	f00d fb35 	bl	8014ba4 <mktime>

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <localMain+0x110>)
 800753c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007540:	2b00      	cmp	r3, #0
 8007542:	d061      	beq.n	8007608 <localMain+0x118>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 8007544:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <localMain+0x110>)
 8007546:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800754a:	4618      	mov	r0, r3
 800754c:	f7f8 fffa 	bl	8000544 <__aeabi_ui2d>
 8007550:	4604      	mov	r4, r0
 8007552:	460d      	mov	r5, r1
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <localMain+0x110>)
 8007556:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	4b29      	ldr	r3, [pc, #164]	; (8007604 <localMain+0x114>)
 8007560:	f7f9 f994 	bl	800088c <__aeabi_ddiv>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4620      	mov	r0, r4
 800756a:	4629      	mov	r1, r5
 800756c:	f7f8 feae 	bl	80002cc <__adddf3>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 8007578:	4b21      	ldr	r3, [pc, #132]	; (8007600 <localMain+0x110>)
 800757a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800757e:	4618      	mov	r0, r3
 8007580:	f7f8 ffe0 	bl	8000544 <__aeabi_ui2d>
 8007584:	4604      	mov	r4, r0
 8007586:	460d      	mov	r5, r1
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <localMain+0x110>)
 800758a:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <localMain+0x114>)
 8007594:	f7f9 f97a 	bl	800088c <__aeabi_ddiv>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fe94 	bl	80002cc <__adddf3>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(location.n_s == 'S') longitude = longitude*(-1);
 80075ac:	4b14      	ldr	r3, [pc, #80]	; (8007600 <localMain+0x110>)
 80075ae:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80075b2:	2b53      	cmp	r3, #83	; 0x53
 80075b4:	d10b      	bne.n	80075ce <localMain+0xde>
 80075b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	ed97 7b02 	vldr	d7, [r7, #8]
 80075ca:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
		if(location.w_e == 'W') latitude = latitude*(-1);
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <localMain+0x110>)
 80075d0:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80075d4:	2b57      	cmp	r3, #87	; 0x57
 80075d6:	d13f      	bne.n	8007658 <localMain+0x168>
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80075e6:	607b      	str	r3, [r7, #4]
 80075e8:	ed97 7b00 	vldr	d7, [r7]
 80075ec:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
 80075f0:	e032      	b.n	8007658 <localMain+0x168>
 80075f2:	bf00      	nop
 80075f4:	200057c8 	.word	0x200057c8
 80075f8:	20005dac 	.word	0x20005dac
 80075fc:	200057dc 	.word	0x200057dc
 8007600:	20005650 	.word	0x20005650
 8007604:	404e0000 	.word	0x404e0000
	} else {
		longitude = 17; 	// [deg]
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	4be0      	ldr	r3, [pc, #896]	; (8007990 <localMain+0x4a0>)
 800760e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = 51;	// [deg]
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	4bdf      	ldr	r3, [pc, #892]	; (8007994 <localMain+0x4a4>)
 8007618:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(longitude>=0) location.n_s = 'N';
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007628:	f7f9 fa8c 	bl	8000b44 <__aeabi_dcmpge>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <localMain+0x14a>
 8007632:	4bd9      	ldr	r3, [pc, #868]	; (8007998 <localMain+0x4a8>)
 8007634:	224e      	movs	r2, #78	; 0x4e
 8007636:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007646:	f7f9 fa7d 	bl	8000b44 <__aeabi_dcmpge>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <localMain+0x168>
 8007650:	4bd1      	ldr	r3, [pc, #836]	; (8007998 <localMain+0x4a8>)
 8007652:	2245      	movs	r2, #69	; 0x45
 8007654:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	struct local_location myLocation = {GLOBAL_timezone, longitude, latitude};
 8007658:	4bd0      	ldr	r3, [pc, #832]	; (800799c <localMain+0x4ac>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b25b      	sxtb	r3, r3
 800765e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8007662:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8007666:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800766a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800766e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	// fractional year = gamma [rad]
	float fyear = fractionalYear(&testTime, &myLocation);
 8007672:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007676:	4619      	mov	r1, r3
 8007678:	48c9      	ldr	r0, [pc, #804]	; (80079a0 <localMain+0x4b0>)
 800767a:	f7ff fa75 	bl	8006b68 <fractionalYear>
 800767e:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 8007682:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 8007686:	f7ff faa7 	bl	8006bd8 <equationOfTime>
 800768a:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 800768e:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 8007692:	f7ff fb49 	bl	8006d28 <solarDeclination>
 8007696:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc

	float time_off = timeOffset(&myLocation, fyear);
 800769a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800769e:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fc20 	bl	8006ee8 <timeOffset>
 80076a8:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	float tst = trueSolarTime(&testTime, time_off);
 80076ac:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 80076b0:	48bb      	ldr	r0, [pc, #748]	; (80079a0 <localMain+0x4b0>)
 80076b2:	f7ff fc5d 	bl	8006f70 <trueSolarTime>
 80076b6:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80076ba:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80076be:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80076c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076c6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80079a4 <localMain+0x4b4>
 80076ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076ce:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 80076d2:	a3ab      	add	r3, pc, #684	; (adr r3, 8007980 <localMain+0x490>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076dc:	f7f8 ffac 	bl	8000638 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4610      	mov	r0, r2
 80076e6:	4619      	mov	r1, r3
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	4bae      	ldr	r3, [pc, #696]	; (80079a8 <localMain+0x4b8>)
 80076ee:	f7f9 f8cd 	bl	800088c <__aeabi_ddiv>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	ec43 2b17 	vmov	d7, r2, r3
 80076fa:	eeb0 0a47 	vmov.f32	s0, s14
 80076fe:	eef0 0a67 	vmov.f32	s1, s15
 8007702:	f012 fdf1 	bl	801a2e8 <sin>
 8007706:	ec55 4b10 	vmov	r4, r5, d0
 800770a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800770e:	f7f8 ff3b 	bl	8000588 <__aeabi_f2d>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	ec43 2b10 	vmov	d0, r2, r3
 800771a:	f012 fde5 	bl	801a2e8 <sin>
 800771e:	ec53 2b10 	vmov	r2, r3, d0
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 ff87 	bl	8000638 <__aeabi_dmul>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4614      	mov	r4, r2
 8007730:	461d      	mov	r5, r3
 8007732:	a393      	add	r3, pc, #588	; (adr r3, 8007980 <localMain+0x490>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800773c:	f7f8 ff7c 	bl	8000638 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	4b96      	ldr	r3, [pc, #600]	; (80079a8 <localMain+0x4b8>)
 800774e:	f7f9 f89d 	bl	800088c <__aeabi_ddiv>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	ec43 2b17 	vmov	d7, r2, r3
 800775a:	eeb0 0a47 	vmov.f32	s0, s14
 800775e:	eef0 0a67 	vmov.f32	s1, s15
 8007762:	f012 fd6d 	bl	801a240 <cos>
 8007766:	ec5b ab10 	vmov	sl, fp, d0
 800776a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800776e:	f7f8 ff0b 	bl	8000588 <__aeabi_f2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	ec43 2b10 	vmov	d0, r2, r3
 800777a:	f012 fd61 	bl	801a240 <cos>
 800777e:	ec53 2b10 	vmov	r2, r3, d0
 8007782:	4650      	mov	r0, sl
 8007784:	4659      	mov	r1, fp
 8007786:	f7f8 ff57 	bl	8000638 <__aeabi_dmul>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4692      	mov	sl, r2
 8007790:	469b      	mov	fp, r3
 8007792:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8007796:	f7f8 fef7 	bl	8000588 <__aeabi_f2d>
 800779a:	a379      	add	r3, pc, #484	; (adr r3, 8007980 <localMain+0x490>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f7f8 ff4a 	bl	8000638 <__aeabi_dmul>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	4b7d      	ldr	r3, [pc, #500]	; (80079a8 <localMain+0x4b8>)
 80077b2:	f7f9 f86b 	bl	800088c <__aeabi_ddiv>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	ec43 2b17 	vmov	d7, r2, r3
 80077be:	eeb0 0a47 	vmov.f32	s0, s14
 80077c2:	eef0 0a67 	vmov.f32	s1, s15
 80077c6:	f012 fd3b 	bl	801a240 <cos>
 80077ca:	ec53 2b10 	vmov	r2, r3, d0
 80077ce:	4650      	mov	r0, sl
 80077d0:	4659      	mov	r1, fp
 80077d2:	f7f8 ff31 	bl	8000638 <__aeabi_dmul>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f8 fd75 	bl	80002cc <__adddf3>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	f7f9 fa1d 	bl	8000c28 <__aeabi_d2f>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float phi = acos(cosphi);
 80077f4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80077f8:	f7f8 fec6 	bl	8000588 <__aeabi_f2d>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	ec43 2b10 	vmov	d0, r2, r3
 8007804:	f012 fdfc 	bl	801a400 <acos>
 8007808:	ec53 2b10 	vmov	r2, r3, d0
 800780c:	4610      	mov	r0, r2
 800780e:	4619      	mov	r1, r3
 8007810:	f7f9 fa0a 	bl	8000c28 <__aeabi_d2f>
 8007814:	4603      	mov	r3, r0
 8007816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float sinphi = sqrt(1-cosphi*cosphi);
 800781a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800781e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800782a:	ee17 0a90 	vmov	r0, s15
 800782e:	f7f8 feab 	bl	8000588 <__aeabi_f2d>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	ec43 2b10 	vmov	d0, r2, r3
 800783a:	f012 fe85 	bl	801a548 <sqrt>
 800783e:	ec53 2b10 	vmov	r2, r3, d0
 8007842:	4610      	mov	r0, r2
 8007844:	4619      	mov	r1, r3
 8007846:	f7f9 f9ef 	bl	8000c28 <__aeabi_d2f>
 800784a:	4603      	mov	r3, r0
 800784c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8007850:	a34b      	add	r3, pc, #300	; (adr r3, 8007980 <localMain+0x490>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800785a:	f7f8 feed 	bl	8000638 <__aeabi_dmul>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	4b4f      	ldr	r3, [pc, #316]	; (80079a8 <localMain+0x4b8>)
 800786c:	f7f9 f80e 	bl	800088c <__aeabi_ddiv>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	ec43 2b17 	vmov	d7, r2, r3
 8007878:	eeb0 0a47 	vmov.f32	s0, s14
 800787c:	eef0 0a67 	vmov.f32	s1, s15
 8007880:	f012 fd32 	bl	801a2e8 <sin>
 8007884:	ec55 4b10 	vmov	r4, r5, d0
 8007888:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800788c:	f7f8 fe7c 	bl	8000588 <__aeabi_f2d>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fece 	bl	8000638 <__aeabi_dmul>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	461d      	mov	r5, r3
 80078a4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80078a8:	f7f8 fe6e 	bl	8000588 <__aeabi_f2d>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	ec43 2b10 	vmov	d0, r2, r3
 80078b4:	f012 fd18 	bl	801a2e8 <sin>
 80078b8:	ec53 2b10 	vmov	r2, r3, d0
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f8 fd02 	bl	80002c8 <__aeabi_dsub>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4690      	mov	r8, r2
 80078ca:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80078ce:	a32c      	add	r3, pc, #176	; (adr r3, 8007980 <localMain+0x490>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078d8:	f7f8 feae 	bl	8000638 <__aeabi_dmul>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4610      	mov	r0, r2
 80078e2:	4619      	mov	r1, r3
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	4b2f      	ldr	r3, [pc, #188]	; (80079a8 <localMain+0x4b8>)
 80078ea:	f7f8 ffcf 	bl	800088c <__aeabi_ddiv>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	ec43 2b17 	vmov	d7, r2, r3
 80078f6:	eeb0 0a47 	vmov.f32	s0, s14
 80078fa:	eef0 0a67 	vmov.f32	s1, s15
 80078fe:	f012 fc9f 	bl	801a240 <cos>
 8007902:	ec55 4b10 	vmov	r4, r5, d0
 8007906:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800790a:	f7f8 fe3d 	bl	8000588 <__aeabi_f2d>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f8 fe8f 	bl	8000638 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4640      	mov	r0, r8
 8007920:	4649      	mov	r1, r9
 8007922:	f7f8 ffb3 	bl	800088c <__aeabi_ddiv>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	ec43 2b17 	vmov	d7, r2, r3
 800792e:	eeb0 0a47 	vmov.f32	s0, s14
 8007932:	eef0 0a67 	vmov.f32	s1, s15
 8007936:	f012 fd63 	bl	801a400 <acos>
 800793a:	ec53 2b10 	vmov	r2, r3, d0
 800793e:	4610      	mov	r0, r2
 8007940:	4619      	mov	r1, r3
 8007942:	f7f9 f971 	bl	8000c28 <__aeabi_d2f>
 8007946:	4603      	mov	r3, r0
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef1 7a67 	vneg.f32	s15, s15
 8007950:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
//	calcSolarAngles(&angles, &testTime, &location);
//	float phi = angles.za;
//	float sa = angles.sa;

	// setting for sunrise/sunset zenith angle [rad]
	double zenith = (90+GEOMETRICAL_TWILIGHT_DEG)*M_PI/180;
 8007954:	a30c      	add	r3, pc, #48	; (adr r3, 8007988 <localMain+0x498>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 800795e:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8007962:	f012 fc6d 	bl	801a240 <cos>
 8007966:	ec55 4b10 	vmov	r4, r5, d0
 800796a:	a305      	add	r3, pc, #20	; (adr r3, 8007980 <localMain+0x490>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007974:	f7f8 fe60 	bl	8000638 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4610      	mov	r0, r2
 800797e:	e015      	b.n	80079ac <localMain+0x4bc>
 8007980:	54442d18 	.word	0x54442d18
 8007984:	400921fb 	.word	0x400921fb
 8007988:	2604e01b 	.word	0x2604e01b
 800798c:	3ff95d88 	.word	0x3ff95d88
 8007990:	40310000 	.word	0x40310000
 8007994:	40498000 	.word	0x40498000
 8007998:	20005650 	.word	0x20005650
 800799c:	20000060 	.word	0x20000060
 80079a0:	20005dac 	.word	0x20005dac
 80079a4:	43340000 	.word	0x43340000
 80079a8:	40668000 	.word	0x40668000
 80079ac:	4619      	mov	r1, r3
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	4b79      	ldr	r3, [pc, #484]	; (8007b98 <localMain+0x6a8>)
 80079b4:	f7f8 ff6a 	bl	800088c <__aeabi_ddiv>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	ec43 2b17 	vmov	d7, r2, r3
 80079c0:	eeb0 0a47 	vmov.f32	s0, s14
 80079c4:	eef0 0a67 	vmov.f32	s1, s15
 80079c8:	f012 fc3a 	bl	801a240 <cos>
 80079cc:	ec59 8b10 	vmov	r8, r9, d0
 80079d0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80079d4:	f7f8 fdd8 	bl	8000588 <__aeabi_f2d>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	ec43 2b10 	vmov	d0, r2, r3
 80079e0:	f012 fc2e 	bl	801a240 <cos>
 80079e4:	ec53 2b10 	vmov	r2, r3, d0
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f8 fe24 	bl	8000638 <__aeabi_dmul>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4620      	mov	r0, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f8 ff48 	bl	800088c <__aeabi_ddiv>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	461d      	mov	r5, r3
 8007a04:	a362      	add	r3, pc, #392	; (adr r3, 8007b90 <localMain+0x6a0>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a0e:	f7f8 fe13 	bl	8000638 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	; (8007b98 <localMain+0x6a8>)
 8007a20:	f7f8 ff34 	bl	800088c <__aeabi_ddiv>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	ec43 2b17 	vmov	d7, r2, r3
 8007a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a30:	eef0 0a67 	vmov.f32	s1, s15
 8007a34:	f012 fcb0 	bl	801a398 <tan>
 8007a38:	ec59 8b10 	vmov	r8, r9, d0
 8007a3c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007a40:	f7f8 fda2 	bl	8000588 <__aeabi_f2d>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	ec43 2b10 	vmov	d0, r2, r3
 8007a4c:	f012 fca4 	bl	801a398 <tan>
 8007a50:	ec53 2b10 	vmov	r2, r3, d0
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc30 	bl	80002c8 <__aeabi_dsub>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	ec43 2b17 	vmov	d7, r2, r3
 8007a70:	eeb0 0a47 	vmov.f32	s0, s14
 8007a74:	eef0 0a67 	vmov.f32	s1, s15
 8007a78:	f012 fcc2 	bl	801a400 <acos>
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	4610      	mov	r0, r2
 8007a82:	4619      	mov	r1, r3
 8007a84:	f7f9 f8d0 	bl	8000c28 <__aeabi_d2f>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8007a8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a92:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8007a96:	461a      	mov	r2, r3
 8007a98:	4940      	ldr	r1, [pc, #256]	; (8007b9c <localMain+0x6ac>)
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f7ff fa98 	bl	8006fd0 <solarEventTime>
 8007aa0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	int sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8007aa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007aa8:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8007aac:	461a      	mov	r2, r3
 8007aae:	493b      	ldr	r1, [pc, #236]	; (8007b9c <localMain+0x6ac>)
 8007ab0:	2002      	movs	r0, #2
 8007ab2:	f7ff fa8d 	bl	8006fd0 <solarEventTime>
 8007ab6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	int noon = solarEventTime(SOLAR_NOON, &testTime, &myLocation, cha);
 8007aba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007abe:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4935      	ldr	r1, [pc, #212]	; (8007b9c <localMain+0x6ac>)
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f7ff fa82 	bl	8006fd0 <solarEventTime>
 8007acc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	struct sunEventsTimes suntimes = {sunrise, sunset, noon};
 8007ad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8007adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae0:	64fb      	str	r3, [r7, #76]	; 0x4c


	double saDeg;
	if(sha>180) saDeg = -sa*180/M_PI;
 8007ae2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007ae6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007ba0 <localMain+0x6b0>
 8007aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af2:	dd15      	ble.n	8007b20 <localMain+0x630>
 8007af4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007af8:	eef1 7a67 	vneg.f32	s15, s15
 8007afc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007ba0 <localMain+0x6b0>
 8007b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b04:	ee17 0a90 	vmov	r0, s15
 8007b08:	f7f8 fd3e 	bl	8000588 <__aeabi_f2d>
 8007b0c:	a320      	add	r3, pc, #128	; (adr r3, 8007b90 <localMain+0x6a0>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 febb 	bl	800088c <__aeabi_ddiv>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007b1e:	e01b      	b.n	8007b58 <localMain+0x668>
	else saDeg = 360+sa*180/M_PI;
 8007b20:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007b24:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007ba0 <localMain+0x6b0>
 8007b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b2c:	ee17 0a90 	vmov	r0, s15
 8007b30:	f7f8 fd2a 	bl	8000588 <__aeabi_f2d>
 8007b34:	a316      	add	r3, pc, #88	; (adr r3, 8007b90 <localMain+0x6a0>)
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f7f8 fea7 	bl	800088c <__aeabi_ddiv>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <localMain+0x6b4>)
 8007b4c:	f7f8 fbbe 	bl	80002cc <__adddf3>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

	char textBuffer[50] = {0};
 8007b58:	2300      	movs	r3, #0
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	222e      	movs	r2, #46	; 0x2e
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f00c ff3d 	bl	80149e4 <memset>

	switch(localModuleNum){
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <localMain+0x6b8>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	f200 86ab 	bhi.w	80088ca <localMain+0x13da>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <localMain+0x68c>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007bad 	.word	0x08007bad
 8007b80:	08007d95 	.word	0x08007d95
 8007b84:	0800861d 	.word	0x0800861d
 8007b88:	08008795 	.word	0x08008795
 8007b8c:	080087e9 	.word	0x080087e9
 8007b90:	54442d18 	.word	0x54442d18
 8007b94:	400921fb 	.word	0x400921fb
 8007b98:	40668000 	.word	0x40668000
 8007b9c:	20005dac 	.word	0x20005dac
 8007ba0:	43340000 	.word	0x43340000
 8007ba4:	40768000 	.word	0x40768000
 8007ba8:	20005dd0 	.word	0x20005dd0
	case 0:{
		uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8007bac:	4b6e      	ldr	r3, [pc, #440]	; (8007d68 <localMain+0x878>)
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	1d9a      	adds	r2, r3, #6
 8007bb2:	4b6e      	ldr	r3, [pc, #440]	; (8007d6c <localMain+0x87c>)
 8007bb4:	fb83 1302 	smull	r1, r3, r3, r2
 8007bb8:	4413      	add	r3, r2
 8007bba:	1099      	asrs	r1, r3, #2
 8007bbc:	17d3      	asrs	r3, r2, #31
 8007bbe:	1ac9      	subs	r1, r1, r3
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	1a5b      	subs	r3, r3, r1
 8007bc6:	1ad1      	subs	r1, r2, r3
 8007bc8:	b2cb      	uxtb	r3, r1
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8007bd0:	4b65      	ldr	r3, [pc, #404]	; (8007d68 <localMain+0x878>)
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f103 0208 	add.w	r2, r3, #8
 8007bd8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	4a63      	ldr	r2, [pc, #396]	; (8007d6c <localMain+0x87c>)
 8007be0:	fb82 1203 	smull	r1, r2, r2, r3
 8007be4:	441a      	add	r2, r3
 8007be6:	1092      	asrs	r2, r2, #2
 8007be8:	17db      	asrs	r3, r3, #31
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		sprintf(&textBuffer, "%s week %d day %d", asctime(&testTime), weekOfTheYear, testTime.tm_yday+1);
 8007bf0:	485d      	ldr	r0, [pc, #372]	; (8007d68 <localMain+0x878>)
 8007bf2:	f00c fe2f 	bl	8014854 <asctime>
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8007bfc:	4b5a      	ldr	r3, [pc, #360]	; (8007d68 <localMain+0x878>)
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	3301      	adds	r3, #1
 8007c02:	f107 0010 	add.w	r0, r7, #16
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	4958      	ldr	r1, [pc, #352]	; (8007d70 <localMain+0x880>)
 8007c0e:	f00e f817 	bl	8015c40 <siprintf>
		lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8007c12:	f107 0210 	add.w	r2, r7, #16
 8007c16:	4b57      	ldr	r3, [pc, #348]	; (8007d74 <localMain+0x884>)
 8007c18:	210a      	movs	r1, #10
 8007c1a:	200a      	movs	r0, #10
 8007c1c:	f7fb fb3e 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", 90-phi*180/M_PI);
 8007c20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007c24:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8007d78 <localMain+0x888>
 8007c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c2c:	ee17 0a90 	vmov	r0, s15
 8007c30:	f7f8 fcaa 	bl	8000588 <__aeabi_f2d>
 8007c34:	a34a      	add	r3, pc, #296	; (adr r3, 8007d60 <localMain+0x870>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 fe27 	bl	800088c <__aeabi_ddiv>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	494d      	ldr	r1, [pc, #308]	; (8007d7c <localMain+0x88c>)
 8007c48:	f7f8 fb3e 	bl	80002c8 <__aeabi_dsub>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	f107 0010 	add.w	r0, r7, #16
 8007c54:	494a      	ldr	r1, [pc, #296]	; (8007d80 <localMain+0x890>)
 8007c56:	f00d fff3 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 66, textBuffer, zekton45font);
 8007c5a:	2322      	movs	r3, #34	; 0x22
 8007c5c:	b29c      	uxth	r4, r3
 8007c5e:	f107 0310 	add.w	r3, r7, #16
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7f8 face 	bl	8000204 <strlen>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	fb14 f303 	smulbb	r3, r4, r3
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8007c78:	b298      	uxth	r0, r3
 8007c7a:	f107 0210 	add.w	r2, r7, #16
 8007c7e:	4b41      	ldr	r3, [pc, #260]	; (8007d84 <localMain+0x894>)
 8007c80:	2142      	movs	r1, #66	; 0x42
 8007c82:	f7fb fb0b 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", saDeg);
 8007c86:	f107 0010 	add.w	r0, r7, #16
 8007c8a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007c8e:	493c      	ldr	r1, [pc, #240]	; (8007d80 <localMain+0x890>)
 8007c90:	f00d ffd6 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 115, textBuffer, zekton45font);
 8007c94:	2322      	movs	r3, #34	; 0x22
 8007c96:	b29c      	uxth	r4, r3
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7f8 fab1 	bl	8000204 <strlen>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	fb14 f303 	smulbb	r3, r4, r3
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8007cb2:	b298      	uxth	r0, r3
 8007cb4:	f107 0210 	add.w	r2, r7, #16
 8007cb8:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <localMain+0x894>)
 8007cba:	2173      	movs	r1, #115	; 0x73
 8007cbc:	f7fb faee 	bl	800329c <lcdPutStr>

		sprintf(&textBuffer, "%c%.3f %c%.3f, day length:%02dh %02dmin", location.n_s, latitude, location.w_e, longitude, (sunset-sunrise)/60, (sunset-sunrise)%60);
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <localMain+0x898>)
 8007cc2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8007cc6:	461e      	mov	r6, r3
 8007cc8:	4b2f      	ldr	r3, [pc, #188]	; (8007d88 <localMain+0x898>)
 8007cca:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8007cce:	461d      	mov	r5, r3
 8007cd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007cd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <localMain+0x89c>)
 8007cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8007ce0:	441a      	add	r2, r3
 8007ce2:	1152      	asrs	r2, r2, #5
 8007ce4:	17db      	asrs	r3, r3, #31
 8007ce6:	1ad0      	subs	r0, r2, r3
 8007ce8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cf0:	1ad2      	subs	r2, r2, r3
 8007cf2:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <localMain+0x89c>)
 8007cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	1159      	asrs	r1, r3, #5
 8007cfc:	17d3      	asrs	r3, r2, #31
 8007cfe:	1ac9      	subs	r1, r1, r3
 8007d00:	460b      	mov	r3, r1
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	1a5b      	subs	r3, r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	1ad1      	subs	r1, r2, r3
 8007d0a:	f107 0410 	add.w	r4, r7, #16
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	9006      	str	r0, [sp, #24]
 8007d12:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8007d16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d1a:	9502      	str	r5, [sp, #8]
 8007d1c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007d20:	e9cd 2300 	strd	r2, r3, [sp]
 8007d24:	4632      	mov	r2, r6
 8007d26:	491a      	ldr	r1, [pc, #104]	; (8007d90 <localMain+0x8a0>)
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f00d ff89 	bl	8015c40 <siprintf>
		lcdPutStr(10, 25, textBuffer, font_12_zekton);
 8007d2e:	f107 0210 	add.w	r2, r7, #16
 8007d32:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <localMain+0x884>)
 8007d34:	2119      	movs	r1, #25
 8007d36:	200a      	movs	r0, #10
 8007d38:	f7fb fab0 	bl	800329c <lcdPutStr>

		drawSunlightGraph(200, 10, 399-10, 50, &suntimes, &myLocation);
 8007d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	2332      	movs	r3, #50	; 0x32
 8007d4a:	f240 1285 	movw	r2, #389	; 0x185
 8007d4e:	210a      	movs	r1, #10
 8007d50:	20c8      	movs	r0, #200	; 0xc8
 8007d52:	f000 fdc9 	bl	80088e8 <drawSunlightGraph>
		break;
 8007d56:	f000 bdb8 	b.w	80088ca <localMain+0x13da>
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w
 8007d60:	54442d18 	.word	0x54442d18
 8007d64:	400921fb 	.word	0x400921fb
 8007d68:	20005dac 	.word	0x20005dac
 8007d6c:	92492493 	.word	0x92492493
 8007d70:	0801d5a0 	.word	0x0801d5a0
 8007d74:	0803751c 	.word	0x0803751c
 8007d78:	43340000 	.word	0x43340000
 8007d7c:	40568000 	.word	0x40568000
 8007d80:	0801d5b4 	.word	0x0801d5b4
 8007d84:	0803a894 	.word	0x0803a894
 8007d88:	20005650 	.word	0x20005650
 8007d8c:	88888889 	.word	0x88888889
 8007d90:	0801d5bc 	.word	0x0801d5bc
		}
	case 1:
		sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8007d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d98:	4ae1      	ldr	r2, [pc, #900]	; (8008120 <localMain+0xc30>)
 8007d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8007d9e:	441a      	add	r2, r3
 8007da0:	1152      	asrs	r2, r2, #5
 8007da2:	17db      	asrs	r3, r3, #31
 8007da4:	1ad4      	subs	r4, r2, r3
 8007da6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007daa:	4bdd      	ldr	r3, [pc, #884]	; (8008120 <localMain+0xc30>)
 8007dac:	fb83 1302 	smull	r1, r3, r3, r2
 8007db0:	4413      	add	r3, r2
 8007db2:	1159      	asrs	r1, r3, #5
 8007db4:	17d3      	asrs	r3, r2, #31
 8007db6:	1ac9      	subs	r1, r1, r3
 8007db8:	460b      	mov	r3, r1
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	1a5b      	subs	r3, r3, r1
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	1ad1      	subs	r1, r2, r3
 8007dc2:	f107 0010 	add.w	r0, r7, #16
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4622      	mov	r2, r4
 8007dca:	49d6      	ldr	r1, [pc, #856]	; (8008124 <localMain+0xc34>)
 8007dcc:	f00d ff38 	bl	8015c40 <siprintf>
		lcdPutStr(10, 10, textBuffer, zekton24font);
 8007dd0:	f107 0210 	add.w	r2, r7, #16
 8007dd4:	4bd4      	ldr	r3, [pc, #848]	; (8008128 <localMain+0xc38>)
 8007dd6:	210a      	movs	r1, #10
 8007dd8:	200a      	movs	r0, #10
 8007dda:	f7fb fa5f 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "SUNRISE");
 8007dde:	f107 0310 	add.w	r3, r7, #16
 8007de2:	49d2      	ldr	r1, [pc, #840]	; (800812c <localMain+0xc3c>)
 8007de4:	4618      	mov	r0, r3
 8007de6:	f00d ff2b 	bl	8015c40 <siprintf>
		lcdPutStr(10, 35, textBuffer, font_12_zekton);
 8007dea:	f107 0210 	add.w	r2, r7, #16
 8007dee:	4bd0      	ldr	r3, [pc, #832]	; (8008130 <localMain+0xc40>)
 8007df0:	2123      	movs	r1, #35	; 0x23
 8007df2:	200a      	movs	r0, #10
 8007df4:	f7fb fa52 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8007df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfc:	4ac8      	ldr	r2, [pc, #800]	; (8008120 <localMain+0xc30>)
 8007dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8007e02:	441a      	add	r2, r3
 8007e04:	1152      	asrs	r2, r2, #5
 8007e06:	17db      	asrs	r3, r3, #31
 8007e08:	1ad4      	subs	r4, r2, r3
 8007e0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007e0e:	4bc4      	ldr	r3, [pc, #784]	; (8008120 <localMain+0xc30>)
 8007e10:	fb83 1302 	smull	r1, r3, r3, r2
 8007e14:	4413      	add	r3, r2
 8007e16:	1159      	asrs	r1, r3, #5
 8007e18:	17d3      	asrs	r3, r2, #31
 8007e1a:	1ac9      	subs	r1, r1, r3
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	1a5b      	subs	r3, r3, r1
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	1ad1      	subs	r1, r2, r3
 8007e26:	f107 0010 	add.w	r0, r7, #16
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	49bd      	ldr	r1, [pc, #756]	; (8008124 <localMain+0xc34>)
 8007e30:	f00d ff06 	bl	8015c40 <siprintf>
		lcdPutStr(200-(*(zekton24font.font_Width)*(strlen(textBuffer)))/2, 10, textBuffer, zekton24font);
 8007e34:	2314      	movs	r3, #20
 8007e36:	461c      	mov	r4, r3
 8007e38:	f107 0310 	add.w	r3, r7, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7f8 f9e1 	bl	8000204 <strlen>
 8007e42:	4603      	mov	r3, r0
 8007e44:	fb04 f303 	mul.w	r3, r4, r3
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007e50:	b298      	uxth	r0, r3
 8007e52:	f107 0210 	add.w	r2, r7, #16
 8007e56:	4bb4      	ldr	r3, [pc, #720]	; (8008128 <localMain+0xc38>)
 8007e58:	210a      	movs	r1, #10
 8007e5a:	f7fb fa1f 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "NOON");
 8007e5e:	f107 0310 	add.w	r3, r7, #16
 8007e62:	49b4      	ldr	r1, [pc, #720]	; (8008134 <localMain+0xc44>)
 8007e64:	4618      	mov	r0, r3
 8007e66:	f00d feeb 	bl	8015c40 <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 35, textBuffer, font_12_zekton);
 8007e6a:	2309      	movs	r3, #9
 8007e6c:	461c      	mov	r4, r3
 8007e6e:	f107 0310 	add.w	r3, r7, #16
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f8 f9c6 	bl	8000204 <strlen>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	fb04 f303 	mul.w	r3, r4, r3
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007e86:	b298      	uxth	r0, r3
 8007e88:	f107 0210 	add.w	r2, r7, #16
 8007e8c:	4ba8      	ldr	r3, [pc, #672]	; (8008130 <localMain+0xc40>)
 8007e8e:	2123      	movs	r1, #35	; 0x23
 8007e90:	f7fb fa04 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8007e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e98:	4aa1      	ldr	r2, [pc, #644]	; (8008120 <localMain+0xc30>)
 8007e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	1152      	asrs	r2, r2, #5
 8007ea2:	17db      	asrs	r3, r3, #31
 8007ea4:	1ad4      	subs	r4, r2, r3
 8007ea6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007eaa:	4b9d      	ldr	r3, [pc, #628]	; (8008120 <localMain+0xc30>)
 8007eac:	fb83 1302 	smull	r1, r3, r3, r2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	1159      	asrs	r1, r3, #5
 8007eb4:	17d3      	asrs	r3, r2, #31
 8007eb6:	1ac9      	subs	r1, r1, r3
 8007eb8:	460b      	mov	r3, r1
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	1a5b      	subs	r3, r3, r1
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	1ad1      	subs	r1, r2, r3
 8007ec2:	f107 0010 	add.w	r0, r7, #16
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4996      	ldr	r1, [pc, #600]	; (8008124 <localMain+0xc34>)
 8007ecc:	f00d feb8 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 10, textBuffer, zekton24font);
 8007ed0:	2314      	movs	r3, #20
 8007ed2:	b29c      	uxth	r4, r3
 8007ed4:	f107 0310 	add.w	r3, r7, #16
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7f8 f993 	bl	8000204 <strlen>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	fb14 f303 	smulbb	r3, r4, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007eec:	b298      	uxth	r0, r3
 8007eee:	f107 0210 	add.w	r2, r7, #16
 8007ef2:	4b8d      	ldr	r3, [pc, #564]	; (8008128 <localMain+0xc38>)
 8007ef4:	210a      	movs	r1, #10
 8007ef6:	f7fb f9d1 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "SUNSET");
 8007efa:	f107 0310 	add.w	r3, r7, #16
 8007efe:	498e      	ldr	r1, [pc, #568]	; (8008138 <localMain+0xc48>)
 8007f00:	4618      	mov	r0, r3
 8007f02:	f00d fe9d 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 8007f06:	2309      	movs	r3, #9
 8007f08:	b29c      	uxth	r4, r3
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f8 f978 	bl	8000204 <strlen>
 8007f14:	4603      	mov	r3, r0
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	fb14 f303 	smulbb	r3, r4, r3
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007f22:	b298      	uxth	r0, r3
 8007f24:	f107 0210 	add.w	r2, r7, #16
 8007f28:	4b81      	ldr	r3, [pc, #516]	; (8008130 <localMain+0xc40>)
 8007f2a:	2123      	movs	r1, #35	; 0x23
 8007f2c:	f7fb f9b6 	bl	800329c <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		double zenith = (90+CIVIL_TWILIGHT_DEG)*M_PI/180;
 8007f30:	a377      	add	r3, pc, #476	; (adr r3, 8008110 <localMain+0xc20>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007f3a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8007f3e:	f012 f97f 	bl	801a240 <cos>
 8007f42:	ec55 4b10 	vmov	r4, r5, d0
 8007f46:	a374      	add	r3, pc, #464	; (adr r3, 8008118 <localMain+0xc28>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f50:	f7f8 fb72 	bl	8000638 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	4b76      	ldr	r3, [pc, #472]	; (800813c <localMain+0xc4c>)
 8007f62:	f7f8 fc93 	bl	800088c <__aeabi_ddiv>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	ec43 2b17 	vmov	d7, r2, r3
 8007f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8007f72:	eef0 0a67 	vmov.f32	s1, s15
 8007f76:	f012 f963 	bl	801a240 <cos>
 8007f7a:	ec59 8b10 	vmov	r8, r9, d0
 8007f7e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007f82:	f7f8 fb01 	bl	8000588 <__aeabi_f2d>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	ec43 2b10 	vmov	d0, r2, r3
 8007f8e:	f012 f957 	bl	801a240 <cos>
 8007f92:	ec53 2b10 	vmov	r2, r3, d0
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	f7f8 fb4d 	bl	8000638 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 fc71 	bl	800088c <__aeabi_ddiv>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4614      	mov	r4, r2
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	a359      	add	r3, pc, #356	; (adr r3, 8008118 <localMain+0xc28>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fbc:	f7f8 fb3c 	bl	8000638 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	4b5b      	ldr	r3, [pc, #364]	; (800813c <localMain+0xc4c>)
 8007fce:	f7f8 fc5d 	bl	800088c <__aeabi_ddiv>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	ec43 2b17 	vmov	d7, r2, r3
 8007fda:	eeb0 0a47 	vmov.f32	s0, s14
 8007fde:	eef0 0a67 	vmov.f32	s1, s15
 8007fe2:	f012 f9d9 	bl	801a398 <tan>
 8007fe6:	ec59 8b10 	vmov	r8, r9, d0
 8007fea:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007fee:	f7f8 facb 	bl	8000588 <__aeabi_f2d>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	ec43 2b10 	vmov	d0, r2, r3
 8007ffa:	f012 f9cd 	bl	801a398 <tan>
 8007ffe:	ec53 2b10 	vmov	r2, r3, d0
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 f959 	bl	80002c8 <__aeabi_dsub>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	ec43 2b17 	vmov	d7, r2, r3
 800801e:	eeb0 0a47 	vmov.f32	s0, s14
 8008022:	eef0 0a67 	vmov.f32	s1, s15
 8008026:	f012 f9eb 	bl	801a400 <acos>
 800802a:	ec53 2b10 	vmov	r2, r3, d0
 800802e:	4610      	mov	r0, r2
 8008030:	4619      	mov	r1, r3
 8008032:	f7f8 fdf9 	bl	8000c28 <__aeabi_d2f>
 8008036:	4603      	mov	r3, r0
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int civil_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 800803c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008040:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8008044:	461a      	mov	r2, r3
 8008046:	493e      	ldr	r1, [pc, #248]	; (8008140 <localMain+0xc50>)
 8008048:	2000      	movs	r0, #0
 800804a:	f7fe ffc1 	bl	8006fd0 <solarEventTime>
 800804e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		int civil_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8008052:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008056:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 800805a:	461a      	mov	r2, r3
 800805c:	4938      	ldr	r1, [pc, #224]	; (8008140 <localMain+0xc50>)
 800805e:	2002      	movs	r0, #2
 8008060:	f7fe ffb6 	bl	8006fd0 <solarEventTime>
 8008064:	67f8      	str	r0, [r7, #124]	; 0x7c
		sprintf(&textBuffer, "CIVIL");
 8008066:	f107 0310 	add.w	r3, r7, #16
 800806a:	4936      	ldr	r1, [pc, #216]	; (8008144 <localMain+0xc54>)
 800806c:	4618      	mov	r0, r3
 800806e:	f00d fde7 	bl	8015c40 <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 80, textBuffer, font_12_zekton);
 8008072:	2309      	movs	r3, #9
 8008074:	461c      	mov	r4, r3
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	4618      	mov	r0, r3
 800807c:	f7f8 f8c2 	bl	8000204 <strlen>
 8008080:	4603      	mov	r3, r0
 8008082:	fb04 f303 	mul.w	r3, r4, r3
 8008086:	085b      	lsrs	r3, r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800808e:	b298      	uxth	r0, r3
 8008090:	f107 0210 	add.w	r2, r7, #16
 8008094:	4b26      	ldr	r3, [pc, #152]	; (8008130 <localMain+0xc40>)
 8008096:	2150      	movs	r1, #80	; 0x50
 8008098:	f7fb f900 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunrise/60, civil_sunrise%60);
 800809c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080a0:	4a1f      	ldr	r2, [pc, #124]	; (8008120 <localMain+0xc30>)
 80080a2:	fb82 1203 	smull	r1, r2, r2, r3
 80080a6:	441a      	add	r2, r3
 80080a8:	1152      	asrs	r2, r2, #5
 80080aa:	17db      	asrs	r3, r3, #31
 80080ac:	1ad4      	subs	r4, r2, r3
 80080ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080b2:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <localMain+0xc30>)
 80080b4:	fb83 1302 	smull	r1, r3, r3, r2
 80080b8:	4413      	add	r3, r2
 80080ba:	1159      	asrs	r1, r3, #5
 80080bc:	17d3      	asrs	r3, r2, #31
 80080be:	1ac9      	subs	r1, r1, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	1a5b      	subs	r3, r3, r1
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	1ad1      	subs	r1, r2, r3
 80080ca:	f107 0010 	add.w	r0, r7, #16
 80080ce:	460b      	mov	r3, r1
 80080d0:	4622      	mov	r2, r4
 80080d2:	4914      	ldr	r1, [pc, #80]	; (8008124 <localMain+0xc34>)
 80080d4:	f00d fdb4 	bl	8015c40 <siprintf>
		lcdPutStr(10, 80, textBuffer, zekton24font);
 80080d8:	f107 0210 	add.w	r2, r7, #16
 80080dc:	4b12      	ldr	r3, [pc, #72]	; (8008128 <localMain+0xc38>)
 80080de:	2150      	movs	r1, #80	; 0x50
 80080e0:	200a      	movs	r0, #10
 80080e2:	f7fb f8db 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunset/60, civil_sunset%60);
 80080e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080e8:	4a0d      	ldr	r2, [pc, #52]	; (8008120 <localMain+0xc30>)
 80080ea:	fb82 1203 	smull	r1, r2, r2, r3
 80080ee:	441a      	add	r2, r3
 80080f0:	1152      	asrs	r2, r2, #5
 80080f2:	17db      	asrs	r3, r3, #31
 80080f4:	1ad4      	subs	r4, r2, r3
 80080f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <localMain+0xc30>)
 80080fa:	fb83 1302 	smull	r1, r3, r3, r2
 80080fe:	4413      	add	r3, r2
 8008100:	1159      	asrs	r1, r3, #5
 8008102:	17d3      	asrs	r3, r2, #31
 8008104:	1ac9      	subs	r1, r1, r3
 8008106:	460b      	mov	r3, r1
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	e01d      	b.n	8008148 <localMain+0xc58>
 800810c:	f3af 8000 	nop.w
 8008110:	f37bebd5 	.word	0xf37bebd5
 8008114:	3ffacee9 	.word	0x3ffacee9
 8008118:	54442d18 	.word	0x54442d18
 800811c:	400921fb 	.word	0x400921fb
 8008120:	88888889 	.word	0x88888889
 8008124:	0801d5e4 	.word	0x0801d5e4
 8008128:	08038a2c 	.word	0x08038a2c
 800812c:	0801d5f0 	.word	0x0801d5f0
 8008130:	0803751c 	.word	0x0803751c
 8008134:	0801d5f8 	.word	0x0801d5f8
 8008138:	0801d600 	.word	0x0801d600
 800813c:	40668000 	.word	0x40668000
 8008140:	20005dac 	.word	0x20005dac
 8008144:	0801d608 	.word	0x0801d608
 8008148:	1a5b      	subs	r3, r3, r1
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	1ad1      	subs	r1, r2, r3
 800814e:	f107 0010 	add.w	r0, r7, #16
 8008152:	460b      	mov	r3, r1
 8008154:	4622      	mov	r2, r4
 8008156:	49e2      	ldr	r1, [pc, #904]	; (80084e0 <localMain+0xff0>)
 8008158:	f00d fd72 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 80, textBuffer, zekton24font);
 800815c:	2314      	movs	r3, #20
 800815e:	b29c      	uxth	r4, r3
 8008160:	f107 0310 	add.w	r3, r7, #16
 8008164:	4618      	mov	r0, r3
 8008166:	f7f8 f84d 	bl	8000204 <strlen>
 800816a:	4603      	mov	r3, r0
 800816c:	b29b      	uxth	r3, r3
 800816e:	fb14 f303 	smulbb	r3, r4, r3
 8008172:	b29b      	uxth	r3, r3
 8008174:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008178:	b298      	uxth	r0, r3
 800817a:	f107 0210 	add.w	r2, r7, #16
 800817e:	4bd9      	ldr	r3, [pc, #868]	; (80084e4 <localMain+0xff4>)
 8008180:	2150      	movs	r1, #80	; 0x50
 8008182:	f7fb f88b 	bl	800329c <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+NAUTICAL_TWILIGHT_DEG)*M_PI/180;
 8008186:	a3d0      	add	r3, pc, #832	; (adr r3, 80084c8 <localMain+0xfd8>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8008190:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8008194:	f012 f854 	bl	801a240 <cos>
 8008198:	ec55 4b10 	vmov	r4, r5, d0
 800819c:	a3cc      	add	r3, pc, #816	; (adr r3, 80084d0 <localMain+0xfe0>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081a6:	f7f8 fa47 	bl	8000638 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	4bcc      	ldr	r3, [pc, #816]	; (80084e8 <localMain+0xff8>)
 80081b8:	f7f8 fb68 	bl	800088c <__aeabi_ddiv>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	ec43 2b17 	vmov	d7, r2, r3
 80081c4:	eeb0 0a47 	vmov.f32	s0, s14
 80081c8:	eef0 0a67 	vmov.f32	s1, s15
 80081cc:	f012 f838 	bl	801a240 <cos>
 80081d0:	ec59 8b10 	vmov	r8, r9, d0
 80081d4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80081d8:	f7f8 f9d6 	bl	8000588 <__aeabi_f2d>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	ec43 2b10 	vmov	d0, r2, r3
 80081e4:	f012 f82c 	bl	801a240 <cos>
 80081e8:	ec53 2b10 	vmov	r2, r3, d0
 80081ec:	4640      	mov	r0, r8
 80081ee:	4649      	mov	r1, r9
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 fb46 	bl	800088c <__aeabi_ddiv>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4614      	mov	r4, r2
 8008206:	461d      	mov	r5, r3
 8008208:	a3b1      	add	r3, pc, #708	; (adr r3, 80084d0 <localMain+0xfe0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008212:	f7f8 fa11 	bl	8000638 <__aeabi_dmul>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4610      	mov	r0, r2
 800821c:	4619      	mov	r1, r3
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	4bb1      	ldr	r3, [pc, #708]	; (80084e8 <localMain+0xff8>)
 8008224:	f7f8 fb32 	bl	800088c <__aeabi_ddiv>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	ec43 2b17 	vmov	d7, r2, r3
 8008230:	eeb0 0a47 	vmov.f32	s0, s14
 8008234:	eef0 0a67 	vmov.f32	s1, s15
 8008238:	f012 f8ae 	bl	801a398 <tan>
 800823c:	ec59 8b10 	vmov	r8, r9, d0
 8008240:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008244:	f7f8 f9a0 	bl	8000588 <__aeabi_f2d>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	ec43 2b10 	vmov	d0, r2, r3
 8008250:	f012 f8a2 	bl	801a398 <tan>
 8008254:	ec53 2b10 	vmov	r2, r3, d0
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f9ec 	bl	8000638 <__aeabi_dmul>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 f82e 	bl	80002c8 <__aeabi_dsub>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	ec43 2b17 	vmov	d7, r2, r3
 8008274:	eeb0 0a47 	vmov.f32	s0, s14
 8008278:	eef0 0a67 	vmov.f32	s1, s15
 800827c:	f012 f8c0 	bl	801a400 <acos>
 8008280:	ec53 2b10 	vmov	r2, r3, d0
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	f7f8 fcce 	bl	8000c28 <__aeabi_d2f>
 800828c:	4603      	mov	r3, r0
 800828e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int naut_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8008292:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008296:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 800829a:	461a      	mov	r2, r3
 800829c:	4993      	ldr	r1, [pc, #588]	; (80084ec <localMain+0xffc>)
 800829e:	2000      	movs	r0, #0
 80082a0:	f7fe fe96 	bl	8006fd0 <solarEventTime>
 80082a4:	67b8      	str	r0, [r7, #120]	; 0x78
		int naut_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80082a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80082aa:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80082ae:	461a      	mov	r2, r3
 80082b0:	498e      	ldr	r1, [pc, #568]	; (80084ec <localMain+0xffc>)
 80082b2:	2002      	movs	r0, #2
 80082b4:	f7fe fe8c 	bl	8006fd0 <solarEventTime>
 80082b8:	6778      	str	r0, [r7, #116]	; 0x74
		sprintf(&textBuffer, "NAUTICAL");
 80082ba:	f107 0310 	add.w	r3, r7, #16
 80082be:	498c      	ldr	r1, [pc, #560]	; (80084f0 <localMain+0x1000>)
 80082c0:	4618      	mov	r0, r3
 80082c2:	f00d fcbd 	bl	8015c40 <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 120, textBuffer, font_12_zekton);
 80082c6:	2309      	movs	r3, #9
 80082c8:	461c      	mov	r4, r3
 80082ca:	f107 0310 	add.w	r3, r7, #16
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f7 ff98 	bl	8000204 <strlen>
 80082d4:	4603      	mov	r3, r0
 80082d6:	fb04 f303 	mul.w	r3, r4, r3
 80082da:	085b      	lsrs	r3, r3, #1
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80082e2:	b298      	uxth	r0, r3
 80082e4:	f107 0210 	add.w	r2, r7, #16
 80082e8:	4b82      	ldr	r3, [pc, #520]	; (80084f4 <localMain+0x1004>)
 80082ea:	2178      	movs	r1, #120	; 0x78
 80082ec:	f7fa ffd6 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunrise/60, naut_sunrise%60);
 80082f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f2:	4a81      	ldr	r2, [pc, #516]	; (80084f8 <localMain+0x1008>)
 80082f4:	fb82 1203 	smull	r1, r2, r2, r3
 80082f8:	441a      	add	r2, r3
 80082fa:	1152      	asrs	r2, r2, #5
 80082fc:	17db      	asrs	r3, r3, #31
 80082fe:	1ad4      	subs	r4, r2, r3
 8008300:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008302:	4b7d      	ldr	r3, [pc, #500]	; (80084f8 <localMain+0x1008>)
 8008304:	fb83 1302 	smull	r1, r3, r3, r2
 8008308:	4413      	add	r3, r2
 800830a:	1159      	asrs	r1, r3, #5
 800830c:	17d3      	asrs	r3, r2, #31
 800830e:	1ac9      	subs	r1, r1, r3
 8008310:	460b      	mov	r3, r1
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	1ad1      	subs	r1, r2, r3
 800831a:	f107 0010 	add.w	r0, r7, #16
 800831e:	460b      	mov	r3, r1
 8008320:	4622      	mov	r2, r4
 8008322:	496f      	ldr	r1, [pc, #444]	; (80084e0 <localMain+0xff0>)
 8008324:	f00d fc8c 	bl	8015c40 <siprintf>
		lcdPutStr(10, 120, textBuffer, zekton24font);
 8008328:	f107 0210 	add.w	r2, r7, #16
 800832c:	4b6d      	ldr	r3, [pc, #436]	; (80084e4 <localMain+0xff4>)
 800832e:	2178      	movs	r1, #120	; 0x78
 8008330:	200a      	movs	r0, #10
 8008332:	f7fa ffb3 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunset/60, naut_sunset%60);
 8008336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008338:	4a6f      	ldr	r2, [pc, #444]	; (80084f8 <localMain+0x1008>)
 800833a:	fb82 1203 	smull	r1, r2, r2, r3
 800833e:	441a      	add	r2, r3
 8008340:	1152      	asrs	r2, r2, #5
 8008342:	17db      	asrs	r3, r3, #31
 8008344:	1ad4      	subs	r4, r2, r3
 8008346:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008348:	4b6b      	ldr	r3, [pc, #428]	; (80084f8 <localMain+0x1008>)
 800834a:	fb83 1302 	smull	r1, r3, r3, r2
 800834e:	4413      	add	r3, r2
 8008350:	1159      	asrs	r1, r3, #5
 8008352:	17d3      	asrs	r3, r2, #31
 8008354:	1ac9      	subs	r1, r1, r3
 8008356:	460b      	mov	r3, r1
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	1ad1      	subs	r1, r2, r3
 8008360:	f107 0010 	add.w	r0, r7, #16
 8008364:	460b      	mov	r3, r1
 8008366:	4622      	mov	r2, r4
 8008368:	495d      	ldr	r1, [pc, #372]	; (80084e0 <localMain+0xff0>)
 800836a:	f00d fc69 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 120, textBuffer, zekton24font);
 800836e:	2314      	movs	r3, #20
 8008370:	b29c      	uxth	r4, r3
 8008372:	f107 0310 	add.w	r3, r7, #16
 8008376:	4618      	mov	r0, r3
 8008378:	f7f7 ff44 	bl	8000204 <strlen>
 800837c:	4603      	mov	r3, r0
 800837e:	b29b      	uxth	r3, r3
 8008380:	fb14 f303 	smulbb	r3, r4, r3
 8008384:	b29b      	uxth	r3, r3
 8008386:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800838a:	b298      	uxth	r0, r3
 800838c:	f107 0210 	add.w	r2, r7, #16
 8008390:	4b54      	ldr	r3, [pc, #336]	; (80084e4 <localMain+0xff4>)
 8008392:	2178      	movs	r1, #120	; 0x78
 8008394:	f7fa ff82 	bl	800329c <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+ASTRONOMICAL_TWILIGHT_DEG)*M_PI/180;
 8008398:	a34f      	add	r3, pc, #316	; (adr r3, 80084d8 <localMain+0xfe8>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 80083a2:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80083a6:	f011 ff4b 	bl	801a240 <cos>
 80083aa:	ec55 4b10 	vmov	r4, r5, d0
 80083ae:	a348      	add	r3, pc, #288	; (adr r3, 80084d0 <localMain+0xfe0>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083b8:	f7f8 f93e 	bl	8000638 <__aeabi_dmul>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4610      	mov	r0, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	4b47      	ldr	r3, [pc, #284]	; (80084e8 <localMain+0xff8>)
 80083ca:	f7f8 fa5f 	bl	800088c <__aeabi_ddiv>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	ec43 2b17 	vmov	d7, r2, r3
 80083d6:	eeb0 0a47 	vmov.f32	s0, s14
 80083da:	eef0 0a67 	vmov.f32	s1, s15
 80083de:	f011 ff2f 	bl	801a240 <cos>
 80083e2:	ec59 8b10 	vmov	r8, r9, d0
 80083e6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80083ea:	f7f8 f8cd 	bl	8000588 <__aeabi_f2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	ec43 2b10 	vmov	d0, r2, r3
 80083f6:	f011 ff23 	bl	801a240 <cos>
 80083fa:	ec53 2b10 	vmov	r2, r3, d0
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 f919 	bl	8000638 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	f7f8 fa3d 	bl	800088c <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4614      	mov	r4, r2
 8008418:	461d      	mov	r5, r3
 800841a:	a32d      	add	r3, pc, #180	; (adr r3, 80084d0 <localMain+0xfe0>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008424:	f7f8 f908 	bl	8000638 <__aeabi_dmul>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4610      	mov	r0, r2
 800842e:	4619      	mov	r1, r3
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <localMain+0xff8>)
 8008436:	f7f8 fa29 	bl	800088c <__aeabi_ddiv>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	ec43 2b17 	vmov	d7, r2, r3
 8008442:	eeb0 0a47 	vmov.f32	s0, s14
 8008446:	eef0 0a67 	vmov.f32	s1, s15
 800844a:	f011 ffa5 	bl	801a398 <tan>
 800844e:	ec59 8b10 	vmov	r8, r9, d0
 8008452:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008456:	f7f8 f897 	bl	8000588 <__aeabi_f2d>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	ec43 2b10 	vmov	d0, r2, r3
 8008462:	f011 ff99 	bl	801a398 <tan>
 8008466:	ec53 2b10 	vmov	r2, r3, d0
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	f7f8 f8e3 	bl	8000638 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f7 ff25 	bl	80002c8 <__aeabi_dsub>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	ec43 2b17 	vmov	d7, r2, r3
 8008486:	eeb0 0a47 	vmov.f32	s0, s14
 800848a:	eef0 0a67 	vmov.f32	s1, s15
 800848e:	f011 ffb7 	bl	801a400 <acos>
 8008492:	ec53 2b10 	vmov	r2, r3, d0
 8008496:	4610      	mov	r0, r2
 8008498:	4619      	mov	r1, r3
 800849a:	f7f8 fbc5 	bl	8000c28 <__aeabi_d2f>
 800849e:	4603      	mov	r3, r0
 80084a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int astro_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 80084a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084a8:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80084ac:	461a      	mov	r2, r3
 80084ae:	490f      	ldr	r1, [pc, #60]	; (80084ec <localMain+0xffc>)
 80084b0:	2000      	movs	r0, #0
 80084b2:	f7fe fd8d 	bl	8006fd0 <solarEventTime>
 80084b6:	6738      	str	r0, [r7, #112]	; 0x70
		int astro_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80084b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084bc:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80084c0:	461a      	mov	r2, r3
 80084c2:	e01b      	b.n	80084fc <localMain+0x100c>
 80084c4:	f3af 8000 	nop.w
 80084c8:	92b3aa92 	.word	0x92b3aa92
 80084cc:	3ffc7bd8 	.word	0x3ffc7bd8
 80084d0:	54442d18 	.word	0x54442d18
 80084d4:	400921fb 	.word	0x400921fb
 80084d8:	31eb6950 	.word	0x31eb6950
 80084dc:	3ffe28c7 	.word	0x3ffe28c7
 80084e0:	0801d5e4 	.word	0x0801d5e4
 80084e4:	08038a2c 	.word	0x08038a2c
 80084e8:	40668000 	.word	0x40668000
 80084ec:	20005dac 	.word	0x20005dac
 80084f0:	0801d610 	.word	0x0801d610
 80084f4:	0803751c 	.word	0x0803751c
 80084f8:	88888889 	.word	0x88888889
 80084fc:	49ac      	ldr	r1, [pc, #688]	; (80087b0 <localMain+0x12c0>)
 80084fe:	2002      	movs	r0, #2
 8008500:	f7fe fd66 	bl	8006fd0 <solarEventTime>
 8008504:	66f8      	str	r0, [r7, #108]	; 0x6c
		sprintf(&textBuffer, "ASTRONOMICAL");
 8008506:	f107 0310 	add.w	r3, r7, #16
 800850a:	49aa      	ldr	r1, [pc, #680]	; (80087b4 <localMain+0x12c4>)
 800850c:	4618      	mov	r0, r3
 800850e:	f00d fb97 	bl	8015c40 <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 160, textBuffer, font_12_zekton);
 8008512:	2309      	movs	r3, #9
 8008514:	461c      	mov	r4, r3
 8008516:	f107 0310 	add.w	r3, r7, #16
 800851a:	4618      	mov	r0, r3
 800851c:	f7f7 fe72 	bl	8000204 <strlen>
 8008520:	4603      	mov	r3, r0
 8008522:	fb04 f303 	mul.w	r3, r4, r3
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	b29b      	uxth	r3, r3
 800852a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800852e:	b298      	uxth	r0, r3
 8008530:	f107 0210 	add.w	r2, r7, #16
 8008534:	4ba0      	ldr	r3, [pc, #640]	; (80087b8 <localMain+0x12c8>)
 8008536:	21a0      	movs	r1, #160	; 0xa0
 8008538:	f7fa feb0 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunrise/60, astro_sunrise%60);
 800853c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800853e:	4a9f      	ldr	r2, [pc, #636]	; (80087bc <localMain+0x12cc>)
 8008540:	fb82 1203 	smull	r1, r2, r2, r3
 8008544:	441a      	add	r2, r3
 8008546:	1152      	asrs	r2, r2, #5
 8008548:	17db      	asrs	r3, r3, #31
 800854a:	1ad4      	subs	r4, r2, r3
 800854c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800854e:	4b9b      	ldr	r3, [pc, #620]	; (80087bc <localMain+0x12cc>)
 8008550:	fb83 1302 	smull	r1, r3, r3, r2
 8008554:	4413      	add	r3, r2
 8008556:	1159      	asrs	r1, r3, #5
 8008558:	17d3      	asrs	r3, r2, #31
 800855a:	1ac9      	subs	r1, r1, r3
 800855c:	460b      	mov	r3, r1
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	1a5b      	subs	r3, r3, r1
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	1ad1      	subs	r1, r2, r3
 8008566:	f107 0010 	add.w	r0, r7, #16
 800856a:	460b      	mov	r3, r1
 800856c:	4622      	mov	r2, r4
 800856e:	4994      	ldr	r1, [pc, #592]	; (80087c0 <localMain+0x12d0>)
 8008570:	f00d fb66 	bl	8015c40 <siprintf>
		lcdPutStr(10, 160, textBuffer, zekton24font);
 8008574:	f107 0210 	add.w	r2, r7, #16
 8008578:	4b92      	ldr	r3, [pc, #584]	; (80087c4 <localMain+0x12d4>)
 800857a:	21a0      	movs	r1, #160	; 0xa0
 800857c:	200a      	movs	r0, #10
 800857e:	f7fa fe8d 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunset/60, astro_sunset%60);
 8008582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008584:	4a8d      	ldr	r2, [pc, #564]	; (80087bc <localMain+0x12cc>)
 8008586:	fb82 1203 	smull	r1, r2, r2, r3
 800858a:	441a      	add	r2, r3
 800858c:	1152      	asrs	r2, r2, #5
 800858e:	17db      	asrs	r3, r3, #31
 8008590:	1ad4      	subs	r4, r2, r3
 8008592:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008594:	4b89      	ldr	r3, [pc, #548]	; (80087bc <localMain+0x12cc>)
 8008596:	fb83 1302 	smull	r1, r3, r3, r2
 800859a:	4413      	add	r3, r2
 800859c:	1159      	asrs	r1, r3, #5
 800859e:	17d3      	asrs	r3, r2, #31
 80085a0:	1ac9      	subs	r1, r1, r3
 80085a2:	460b      	mov	r3, r1
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	1a5b      	subs	r3, r3, r1
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	1ad1      	subs	r1, r2, r3
 80085ac:	f107 0010 	add.w	r0, r7, #16
 80085b0:	460b      	mov	r3, r1
 80085b2:	4622      	mov	r2, r4
 80085b4:	4982      	ldr	r1, [pc, #520]	; (80087c0 <localMain+0x12d0>)
 80085b6:	f00d fb43 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 80085ba:	2314      	movs	r3, #20
 80085bc:	b29c      	uxth	r4, r3
 80085be:	f107 0310 	add.w	r3, r7, #16
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f7 fe1e 	bl	8000204 <strlen>
 80085c8:	4603      	mov	r3, r0
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	fb14 f303 	smulbb	r3, r4, r3
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80085d6:	b298      	uxth	r0, r3
 80085d8:	f107 0210 	add.w	r2, r7, #16
 80085dc:	4b79      	ldr	r3, [pc, #484]	; (80087c4 <localMain+0x12d4>)
 80085de:	21a0      	movs	r1, #160	; 0xa0
 80085e0:	f7fa fe5c 	bl	800329c <lcdPutStr>


		sprintf(&textBuffer, "SUNSET");
 80085e4:	f107 0310 	add.w	r3, r7, #16
 80085e8:	4977      	ldr	r1, [pc, #476]	; (80087c8 <localMain+0x12d8>)
 80085ea:	4618      	mov	r0, r3
 80085ec:	f00d fb28 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 80085f0:	2309      	movs	r3, #9
 80085f2:	b29c      	uxth	r4, r3
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f7 fe03 	bl	8000204 <strlen>
 80085fe:	4603      	mov	r3, r0
 8008600:	b29b      	uxth	r3, r3
 8008602:	fb14 f303 	smulbb	r3, r4, r3
 8008606:	b29b      	uxth	r3, r3
 8008608:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800860c:	b298      	uxth	r0, r3
 800860e:	f107 0210 	add.w	r2, r7, #16
 8008612:	4b69      	ldr	r3, [pc, #420]	; (80087b8 <localMain+0x12c8>)
 8008614:	2123      	movs	r1, #35	; 0x23
 8008616:	f7fa fe41 	bl	800329c <lcdPutStr>
		break;
 800861a:	e156      	b.n	80088ca <localMain+0x13da>
	case 2:
	{
		double perc = (testTime.tm_hour*60+testTime.tm_min+(double)testTime.tm_sec/60-sunrise)*100/(sunset-sunrise);
 800861c:	4b64      	ldr	r3, [pc, #400]	; (80087b0 <localMain+0x12c0>)
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	4613      	mov	r3, r2
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	461a      	mov	r2, r3
 800862a:	4b61      	ldr	r3, [pc, #388]	; (80087b0 <localMain+0x12c0>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	4413      	add	r3, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7f7 ff97 	bl	8000564 <__aeabi_i2d>
 8008636:	4604      	mov	r4, r0
 8008638:	460d      	mov	r5, r1
 800863a:	4b5d      	ldr	r3, [pc, #372]	; (80087b0 <localMain+0x12c0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f7 ff90 	bl	8000564 <__aeabi_i2d>
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	4b60      	ldr	r3, [pc, #384]	; (80087cc <localMain+0x12dc>)
 800864a:	f7f8 f91f 	bl	800088c <__aeabi_ddiv>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4620      	mov	r0, r4
 8008654:	4629      	mov	r1, r5
 8008656:	f7f7 fe39 	bl	80002cc <__adddf3>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4614      	mov	r4, r2
 8008660:	461d      	mov	r5, r3
 8008662:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008666:	f7f7 ff7d 	bl	8000564 <__aeabi_i2d>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 fe29 	bl	80002c8 <__aeabi_dsub>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4610      	mov	r0, r2
 800867c:	4619      	mov	r1, r3
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	4b53      	ldr	r3, [pc, #332]	; (80087d0 <localMain+0x12e0>)
 8008684:	f7f7 ffd8 	bl	8000638 <__aeabi_dmul>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4614      	mov	r4, r2
 800868e:	461d      	mov	r5, r3
 8008690:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	4618      	mov	r0, r3
 800869c:	f7f7 ff62 	bl	8000564 <__aeabi_i2d>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f8 f8f0 	bl	800088c <__aeabi_ddiv>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		sprintf(&textBuffer, "percentage daylight:");
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	4946      	ldr	r1, [pc, #280]	; (80087d4 <localMain+0x12e4>)
 80086ba:	4618      	mov	r0, r3
 80086bc:	f00d fac0 	bl	8015c40 <siprintf>
		lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 80086c0:	f107 0210 	add.w	r2, r7, #16
 80086c4:	4b44      	ldr	r3, [pc, #272]	; (80087d8 <localMain+0x12e8>)
 80086c6:	2174      	movs	r1, #116	; 0x74
 80086c8:	200a      	movs	r0, #10
 80086ca:	f7fa fde7 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%2.3f%%", perc);
 80086ce:	f107 0010 	add.w	r0, r7, #16
 80086d2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80086d6:	4941      	ldr	r1, [pc, #260]	; (80087dc <localMain+0x12ec>)
 80086d8:	f00d fab2 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 116, textBuffer, zekton24font);
 80086dc:	2314      	movs	r3, #20
 80086de:	b29c      	uxth	r4, r3
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7f7 fd8d 	bl	8000204 <strlen>
 80086ea:	4603      	mov	r3, r0
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	fb14 f303 	smulbb	r3, r4, r3
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80086f8:	b298      	uxth	r0, r3
 80086fa:	f107 0210 	add.w	r2, r7, #16
 80086fe:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <localMain+0x12d4>)
 8008700:	2174      	movs	r1, #116	; 0x74
 8008702:	f7fa fdcb 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "day length:");
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4935      	ldr	r1, [pc, #212]	; (80087e0 <localMain+0x12f0>)
 800870c:	4618      	mov	r0, r3
 800870e:	f00d fa97 	bl	8015c40 <siprintf>
		lcdPutStr(10, 160, textBuffer, font_12_zekton_bold);
 8008712:	f107 0210 	add.w	r2, r7, #16
 8008716:	4b30      	ldr	r3, [pc, #192]	; (80087d8 <localMain+0x12e8>)
 8008718:	21a0      	movs	r1, #160	; 0xa0
 800871a:	200a      	movs	r0, #10
 800871c:	f7fa fdbe 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "%02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8008720:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	4a24      	ldr	r2, [pc, #144]	; (80087bc <localMain+0x12cc>)
 800872c:	fb82 1203 	smull	r1, r2, r2, r3
 8008730:	441a      	add	r2, r3
 8008732:	1152      	asrs	r2, r2, #5
 8008734:	17db      	asrs	r3, r3, #31
 8008736:	1ad4      	subs	r4, r2, r3
 8008738:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800873c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <localMain+0x12cc>)
 8008744:	fb83 1302 	smull	r1, r3, r3, r2
 8008748:	4413      	add	r3, r2
 800874a:	1159      	asrs	r1, r3, #5
 800874c:	17d3      	asrs	r3, r2, #31
 800874e:	1ac9      	subs	r1, r1, r3
 8008750:	460b      	mov	r3, r1
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	1a5b      	subs	r3, r3, r1
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	1ad1      	subs	r1, r2, r3
 800875a:	f107 0010 	add.w	r0, r7, #16
 800875e:	460b      	mov	r3, r1
 8008760:	4622      	mov	r2, r4
 8008762:	4920      	ldr	r1, [pc, #128]	; (80087e4 <localMain+0x12f4>)
 8008764:	f00d fa6c 	bl	8015c40 <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 8008768:	2314      	movs	r3, #20
 800876a:	b29c      	uxth	r4, r3
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	4618      	mov	r0, r3
 8008772:	f7f7 fd47 	bl	8000204 <strlen>
 8008776:	4603      	mov	r3, r0
 8008778:	b29b      	uxth	r3, r3
 800877a:	fb14 f303 	smulbb	r3, r4, r3
 800877e:	b29b      	uxth	r3, r3
 8008780:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008784:	b298      	uxth	r0, r3
 8008786:	f107 0210 	add.w	r2, r7, #16
 800878a:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <localMain+0x12d4>)
 800878c:	21a0      	movs	r1, #160	; 0xa0
 800878e:	f7fa fd85 	bl	800329c <lcdPutStr>
		break;
 8008792:	e09a      	b.n	80088ca <localMain+0x13da>
	}
	case 3:

		drawSunlightGraph(120, 5, 395, 160, &suntimes, &myLocation);
 8008794:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	23a0      	movs	r3, #160	; 0xa0
 80087a2:	f240 128b 	movw	r2, #395	; 0x18b
 80087a6:	2105      	movs	r1, #5
 80087a8:	2078      	movs	r0, #120	; 0x78
 80087aa:	f000 f89d 	bl	80088e8 <drawSunlightGraph>
		break;
 80087ae:	e08c      	b.n	80088ca <localMain+0x13da>
 80087b0:	20005dac 	.word	0x20005dac
 80087b4:	0801d61c 	.word	0x0801d61c
 80087b8:	0803751c 	.word	0x0803751c
 80087bc:	88888889 	.word	0x88888889
 80087c0:	0801d5e4 	.word	0x0801d5e4
 80087c4:	08038a2c 	.word	0x08038a2c
 80087c8:	0801d600 	.word	0x0801d600
 80087cc:	404e0000 	.word	0x404e0000
 80087d0:	40590000 	.word	0x40590000
 80087d4:	0801d62c 	.word	0x0801d62c
 80087d8:	08037fa4 	.word	0x08037fa4
 80087dc:	0801d644 	.word	0x0801d644
 80087e0:	0801d64c 	.word	0x0801d64c
 80087e4:	0801d658 	.word	0x0801d658
	case 4:{
		sprintf(&textBuffer, "18250d");
 80087e8:	f107 0310 	add.w	r3, r7, #16
 80087ec:	4939      	ldr	r1, [pc, #228]	; (80088d4 <localMain+0x13e4>)
 80087ee:	4618      	mov	r0, r3
 80087f0:	f00d fa26 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 30, textBuffer, zekton45font);
 80087f4:	2322      	movs	r3, #34	; 0x22
 80087f6:	b29c      	uxth	r4, r3
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f7 fd01 	bl	8000204 <strlen>
 8008802:	4603      	mov	r3, r0
 8008804:	3301      	adds	r3, #1
 8008806:	b29b      	uxth	r3, r3
 8008808:	fb14 f303 	smulbb	r3, r4, r3
 800880c:	b29b      	uxth	r3, r3
 800880e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8008812:	b298      	uxth	r0, r3
 8008814:	f107 0210 	add.w	r2, r7, #16
 8008818:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <localMain+0x13e8>)
 800881a:	211e      	movs	r1, #30
 800881c:	f7fa fd3e 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "20h");
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	492d      	ldr	r1, [pc, #180]	; (80088dc <localMain+0x13ec>)
 8008826:	4618      	mov	r0, r3
 8008828:	f00d fa0a 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 80, textBuffer, zekton45font);
 800882c:	2322      	movs	r3, #34	; 0x22
 800882e:	b29c      	uxth	r4, r3
 8008830:	f107 0310 	add.w	r3, r7, #16
 8008834:	4618      	mov	r0, r3
 8008836:	f7f7 fce5 	bl	8000204 <strlen>
 800883a:	4603      	mov	r3, r0
 800883c:	3301      	adds	r3, #1
 800883e:	b29b      	uxth	r3, r3
 8008840:	fb14 f303 	smulbb	r3, r4, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800884a:	b298      	uxth	r0, r3
 800884c:	f107 0210 	add.w	r2, r7, #16
 8008850:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <localMain+0x13e8>)
 8008852:	2150      	movs	r1, #80	; 0x50
 8008854:	f7fa fd22 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "54min");
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	4920      	ldr	r1, [pc, #128]	; (80088e0 <localMain+0x13f0>)
 800885e:	4618      	mov	r0, r3
 8008860:	f00d f9ee 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 130, textBuffer, zekton45font);
 8008864:	2322      	movs	r3, #34	; 0x22
 8008866:	b29c      	uxth	r4, r3
 8008868:	f107 0310 	add.w	r3, r7, #16
 800886c:	4618      	mov	r0, r3
 800886e:	f7f7 fcc9 	bl	8000204 <strlen>
 8008872:	4603      	mov	r3, r0
 8008874:	3301      	adds	r3, #1
 8008876:	b29b      	uxth	r3, r3
 8008878:	fb14 f303 	smulbb	r3, r4, r3
 800887c:	b29b      	uxth	r3, r3
 800887e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8008882:	b298      	uxth	r0, r3
 8008884:	f107 0210 	add.w	r2, r7, #16
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <localMain+0x13e8>)
 800888a:	2182      	movs	r1, #130	; 0x82
 800888c:	f7fa fd06 	bl	800329c <lcdPutStr>
		sprintf(&textBuffer, "12s");
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	4913      	ldr	r1, [pc, #76]	; (80088e4 <localMain+0x13f4>)
 8008896:	4618      	mov	r0, r3
 8008898:	f00d f9d2 	bl	8015c40 <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 180, textBuffer, zekton45font);
 800889c:	2322      	movs	r3, #34	; 0x22
 800889e:	b29c      	uxth	r4, r3
 80088a0:	f107 0310 	add.w	r3, r7, #16
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7f7 fcad 	bl	8000204 <strlen>
 80088aa:	4603      	mov	r3, r0
 80088ac:	3301      	adds	r3, #1
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	fb14 f303 	smulbb	r3, r4, r3
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80088ba:	b298      	uxth	r0, r3
 80088bc:	f107 0210 	add.w	r2, r7, #16
 80088c0:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <localMain+0x13e8>)
 80088c2:	21b4      	movs	r1, #180	; 0xb4
 80088c4:	f7fa fcea 	bl	800329c <lcdPutStr>

		break;
 80088c8:	bf00      	nop
		}
	}
}
 80088ca:	bf00      	nop
 80088cc:	37f4      	adds	r7, #244	; 0xf4
 80088ce:	46bd      	mov	sp, r7
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	0801d668 	.word	0x0801d668
 80088d8:	0803a894 	.word	0x0803a894
 80088dc:	0801d670 	.word	0x0801d670
 80088e0:	0801d674 	.word	0x0801d674
 80088e4:	0801d67c 	.word	0x0801d67c

080088e8 <drawSunlightGraph>:

void drawSunlightGraph(uint8_t yPos, uint16_t x1, uint16_t x2, uint8_t height, struct sunEventsTimes *suntimes, struct local_location *location){
 80088e8:	b5b0      	push	{r4, r5, r7, lr}
 80088ea:	b0a2      	sub	sp, #136	; 0x88
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	4623      	mov	r3, r4
 80088f8:	71fb      	strb	r3, [r7, #7]
 80088fa:	4603      	mov	r3, r0
 80088fc:	80bb      	strh	r3, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	807b      	strh	r3, [r7, #2]
 8008902:	4613      	mov	r3, r2
 8008904:	71bb      	strb	r3, [r7, #6]
	lcdHLine(x1,x2,yPos,1);
 8008906:	88b8      	ldrh	r0, [r7, #4]
 8008908:	8879      	ldrh	r1, [r7, #2]
 800890a:	79fa      	ldrb	r2, [r7, #7]
 800890c:	2301      	movs	r3, #1
 800890e:	f7fb f98d 	bl	8003c2c <lcdHLine>
	lcdVLine(x1, yPos-2, yPos+2, 1);
 8008912:	88b8      	ldrh	r0, [r7, #4]
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	1e99      	subs	r1, r3, #2
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	1c9a      	adds	r2, r3, #2
 800891c:	2301      	movs	r3, #1
 800891e:	f7fa fd3d 	bl	800339c <lcdVLine>
	lcdVLine(x2, yPos-2, yPos+2, 1);
 8008922:	8878      	ldrh	r0, [r7, #2]
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	1e99      	subs	r1, r3, #2
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	1c9a      	adds	r2, r3, #2
 800892c:	2301      	movs	r3, #1
 800892e:	f7fa fd35 	bl	800339c <lcdVLine>

	uint16_t scaleXrise = x1+(x2-x1+1)*suntimes->sunrise/(24*60-0);
 8008932:	887a      	ldrh	r2, [r7, #2]
 8008934:	88bb      	ldrh	r3, [r7, #4]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	3301      	adds	r3, #1
 800893a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	fb02 f303 	mul.w	r3, r2, r3
 8008944:	4ab0      	ldr	r2, [pc, #704]	; (8008c08 <drawSunlightGraph+0x320>)
 8008946:	fb82 1203 	smull	r1, r2, r2, r3
 800894a:	441a      	add	r2, r3
 800894c:	1292      	asrs	r2, r2, #10
 800894e:	17db      	asrs	r3, r3, #31
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	b29a      	uxth	r2, r3
 8008954:	88bb      	ldrh	r3, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t scaleXset = x1+(x2-x1+1)*suntimes->sunset/(24*60-0);
 800895c:	887a      	ldrh	r2, [r7, #2]
 800895e:	88bb      	ldrh	r3, [r7, #4]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	3301      	adds	r3, #1
 8008964:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008968:	6892      	ldr	r2, [r2, #8]
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	4aa6      	ldr	r2, [pc, #664]	; (8008c08 <drawSunlightGraph+0x320>)
 8008970:	fb82 1203 	smull	r1, r2, r2, r3
 8008974:	441a      	add	r2, r3
 8008976:	1292      	asrs	r2, r2, #10
 8008978:	17db      	asrs	r3, r3, #31
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b29a      	uxth	r2, r3
 800897e:	88bb      	ldrh	r3, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t scaleXnoon = x1+(x2-x1+1)*suntimes->noon/(24*60-0);
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	88bb      	ldrh	r3, [r7, #4]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	3301      	adds	r3, #1
 800898e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008992:	6852      	ldr	r2, [r2, #4]
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	4a9b      	ldr	r2, [pc, #620]	; (8008c08 <drawSunlightGraph+0x320>)
 800899a:	fb82 1203 	smull	r1, r2, r2, r3
 800899e:	441a      	add	r2, r3
 80089a0:	1292      	asrs	r2, r2, #10
 80089a2:	17db      	asrs	r3, r3, #31
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	88bb      	ldrh	r3, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint16_t scaleXnow = x1+(x2-x1+1)*(testTime.tm_hour*60+testTime.tm_min)/(24*60-0);
 80089b0:	887a      	ldrh	r2, [r7, #2]
 80089b2:	88bb      	ldrh	r3, [r7, #4]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	4b94      	ldr	r3, [pc, #592]	; (8008c0c <drawSunlightGraph+0x324>)
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	4613      	mov	r3, r2
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	1a9b      	subs	r3, r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	461a      	mov	r2, r3
 80089c6:	4b91      	ldr	r3, [pc, #580]	; (8008c0c <drawSunlightGraph+0x324>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	fb01 f303 	mul.w	r3, r1, r3
 80089d0:	4a8d      	ldr	r2, [pc, #564]	; (8008c08 <drawSunlightGraph+0x320>)
 80089d2:	fb82 1203 	smull	r1, r2, r2, r3
 80089d6:	441a      	add	r2, r3
 80089d8:	1292      	asrs	r2, r2, #10
 80089da:	17db      	asrs	r3, r3, #31
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29a      	uxth	r2, r3
 80089e0:	88bb      	ldrh	r3, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	lcdVLine(scaleXrise, yPos-5, yPos+5, 2);
 80089e8:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	1f59      	subs	r1, r3, #5
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	1d5a      	adds	r2, r3, #5
 80089f4:	2302      	movs	r3, #2
 80089f6:	f7fa fcd1 	bl	800339c <lcdVLine>
	lcdVLine(scaleXset, yPos, yPos+5, 2);
 80089fa:	f8b7 007a 	ldrh.w	r0, [r7, #122]	; 0x7a
 80089fe:	79f9      	ldrb	r1, [r7, #7]
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	1d5a      	adds	r2, r3, #5
 8008a04:	2302      	movs	r3, #2
 8008a06:	f7fa fcc9 	bl	800339c <lcdVLine>
	lcdVLine(scaleXnoon, yPos-5, yPos+5, 2);
 8008a0a:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	1f59      	subs	r1, r3, #5
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	1d5a      	adds	r2, r3, #5
 8008a16:	2302      	movs	r3, #2
 8008a18:	f7fa fcc0 	bl	800339c <lcdVLine>
//	lcdVLine(scaleXnow, yPos-10, yPos+10, 2);

	char textBuffer[50] = {0};
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a24:	222e      	movs	r2, #46	; 0x2e
 8008a26:	2100      	movs	r1, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f00b ffdb 	bl	80149e4 <memset>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunrise/60, suntimes->sunrise%60);
 8008a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a76      	ldr	r2, [pc, #472]	; (8008c10 <drawSunlightGraph+0x328>)
 8008a36:	fb82 1203 	smull	r1, r2, r2, r3
 8008a3a:	441a      	add	r2, r3
 8008a3c:	1152      	asrs	r2, r2, #5
 8008a3e:	17db      	asrs	r3, r3, #31
 8008a40:	1ad4      	subs	r4, r2, r3
 8008a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4b71      	ldr	r3, [pc, #452]	; (8008c10 <drawSunlightGraph+0x328>)
 8008a4a:	fb83 1302 	smull	r1, r3, r3, r2
 8008a4e:	4413      	add	r3, r2
 8008a50:	1159      	asrs	r1, r3, #5
 8008a52:	17d3      	asrs	r3, r2, #31
 8008a54:	1ac9      	subs	r1, r1, r3
 8008a56:	460b      	mov	r3, r1
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	1a5b      	subs	r3, r3, r1
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	1ad1      	subs	r1, r2, r3
 8008a60:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a64:	460b      	mov	r3, r1
 8008a66:	4622      	mov	r2, r4
 8008a68:	496a      	ldr	r1, [pc, #424]	; (8008c14 <drawSunlightGraph+0x32c>)
 8008a6a:	f00d f8e9 	bl	8015c40 <siprintf>
	lcdPutStr(scaleXrise-42, yPos-15, textBuffer, smallestFont);
 8008a6e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8008a72:	3b2a      	subs	r3, #42	; 0x2a
 8008a74:	b298      	uxth	r0, r3
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	3b0f      	subs	r3, #15
 8008a7a:	b2d9      	uxtb	r1, r3
 8008a7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008a80:	4b65      	ldr	r3, [pc, #404]	; (8008c18 <drawSunlightGraph+0x330>)
 8008a82:	f7fa fc0b 	bl	800329c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunset/60, suntimes->sunset%60);
 8008a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4a60      	ldr	r2, [pc, #384]	; (8008c10 <drawSunlightGraph+0x328>)
 8008a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8008a92:	441a      	add	r2, r3
 8008a94:	1152      	asrs	r2, r2, #5
 8008a96:	17db      	asrs	r3, r3, #31
 8008a98:	1ad4      	subs	r4, r2, r3
 8008a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	4b5b      	ldr	r3, [pc, #364]	; (8008c10 <drawSunlightGraph+0x328>)
 8008aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	1159      	asrs	r1, r3, #5
 8008aaa:	17d3      	asrs	r3, r2, #31
 8008aac:	1ac9      	subs	r1, r1, r3
 8008aae:	460b      	mov	r3, r1
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	1a5b      	subs	r3, r3, r1
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	1ad1      	subs	r1, r2, r3
 8008ab8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008abc:	460b      	mov	r3, r1
 8008abe:	4622      	mov	r2, r4
 8008ac0:	4954      	ldr	r1, [pc, #336]	; (8008c14 <drawSunlightGraph+0x32c>)
 8008ac2:	f00d f8bd 	bl	8015c40 <siprintf>
	lcdPutStr(scaleXset-19, yPos+5, textBuffer, smallestFont);
 8008ac6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008aca:	3b13      	subs	r3, #19
 8008acc:	b298      	uxth	r0, r3
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	3305      	adds	r3, #5
 8008ad2:	b2d9      	uxtb	r1, r3
 8008ad4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008ad8:	4b4f      	ldr	r3, [pc, #316]	; (8008c18 <drawSunlightGraph+0x330>)
 8008ada:	f7fa fbdf 	bl	800329c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->noon/60, suntimes->noon%60);
 8008ade:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	4a4a      	ldr	r2, [pc, #296]	; (8008c10 <drawSunlightGraph+0x328>)
 8008ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8008aea:	441a      	add	r2, r3
 8008aec:	1152      	asrs	r2, r2, #5
 8008aee:	17db      	asrs	r3, r3, #31
 8008af0:	1ad4      	subs	r4, r2, r3
 8008af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	4b45      	ldr	r3, [pc, #276]	; (8008c10 <drawSunlightGraph+0x328>)
 8008afa:	fb83 1302 	smull	r1, r3, r3, r2
 8008afe:	4413      	add	r3, r2
 8008b00:	1159      	asrs	r1, r3, #5
 8008b02:	17d3      	asrs	r3, r2, #31
 8008b04:	1ac9      	subs	r1, r1, r3
 8008b06:	460b      	mov	r3, r1
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	1a5b      	subs	r3, r3, r1
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	1ad1      	subs	r1, r2, r3
 8008b10:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008b14:	460b      	mov	r3, r1
 8008b16:	4622      	mov	r2, r4
 8008b18:	493e      	ldr	r1, [pc, #248]	; (8008c14 <drawSunlightGraph+0x32c>)
 8008b1a:	f00d f891 	bl	8015c40 <siprintf>
	lcdPutStr(scaleXnoon+4, yPos-15, textBuffer, smallestFont);
 8008b1e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008b22:	3304      	adds	r3, #4
 8008b24:	b298      	uxth	r0, r3
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	3b0f      	subs	r3, #15
 8008b2a:	b2d9      	uxtb	r1, r3
 8008b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008b30:	4b39      	ldr	r3, [pc, #228]	; (8008c18 <drawSunlightGraph+0x330>)
 8008b32:	f7fa fbb3 	bl	800329c <lcdPutStr>
	struct solarAngles angles = {0,0};
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	637b      	str	r3, [r7, #52]	; 0x34
	struct tm myTime;
	myTime = testTime;
 8008b42:	4b32      	ldr	r3, [pc, #200]	; (8008c0c <drawSunlightGraph+0x324>)
 8008b44:	f107 040c 	add.w	r4, r7, #12
 8008b48:	461d      	mov	r5, r3
 8008b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	6023      	str	r3, [r4, #0]
	int sunElev;

	calcSolarAngles(&angles, &testTime, location);
 8008b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b5e:	492b      	ldr	r1, [pc, #172]	; (8008c0c <drawSunlightGraph+0x324>)
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fb45 	bl	80071f0 <calcSolarAngles>
	sunElev = (90-angles.za*180/M_PI)*height/90;
 8008b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008b6a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008c1c <drawSunlightGraph+0x334>
 8008b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b72:	ee17 0a90 	vmov	r0, s15
 8008b76:	f7f7 fd07 	bl	8000588 <__aeabi_f2d>
 8008b7a:	a321      	add	r3, pc, #132	; (adr r3, 8008c00 <drawSunlightGraph+0x318>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fe84 	bl	800088c <__aeabi_ddiv>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	f04f 0000 	mov.w	r0, #0
 8008b8c:	4924      	ldr	r1, [pc, #144]	; (8008c20 <drawSunlightGraph+0x338>)
 8008b8e:	f7f7 fb9b 	bl	80002c8 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4614      	mov	r4, r2
 8008b98:	461d      	mov	r5, r3
 8008b9a:	79bb      	ldrb	r3, [r7, #6]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f7 fce1 	bl	8000564 <__aeabi_i2d>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 fd45 	bl	8000638 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <drawSunlightGraph+0x338>)
 8008bbc:	f7f7 fe66 	bl	800088c <__aeabi_ddiv>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f7f7 ffe6 	bl	8000b98 <__aeabi_d2iz>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	673b      	str	r3, [r7, #112]	; 0x70
	lcdRect(scaleXnow-1, scaleXnow+1, yPos-sunElev-1, yPos-sunElev+1, 1);
 8008bd0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008bd4:	1e58      	subs	r0, r3, #1
 8008bd6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008bda:	1c59      	adds	r1, r3, #1
 8008bdc:	79fa      	ldrb	r2, [r7, #7]
 8008bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	1e5c      	subs	r4, r3, #1
 8008be4:	79fa      	ldrb	r2, [r7, #7]
 8008be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	2201      	movs	r2, #1
 8008bee:	9200      	str	r2, [sp, #0]
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	f7fb f971 	bl	8003ed8 <lcdRect>

	for(uint16_t pix = x1; pix <= x2; pix+=3){
 8008bf6:	88bb      	ldrh	r3, [r7, #4]
 8008bf8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008bfc:	e099      	b.n	8008d32 <drawSunlightGraph+0x44a>
 8008bfe:	bf00      	nop
 8008c00:	54442d18 	.word	0x54442d18
 8008c04:	400921fb 	.word	0x400921fb
 8008c08:	b60b60b7 	.word	0xb60b60b7
 8008c0c:	20005dac 	.word	0x20005dac
 8008c10:	88888889 	.word	0x88888889
 8008c14:	0801d5e4 	.word	0x0801d5e4
 8008c18:	080370a0 	.word	0x080370a0
 8008c1c:	43340000 	.word	0x43340000
 8008c20:	40568000 	.word	0x40568000
		uint16_t min_sum = (pix-x1)*24*60/(x2-x1);
 8008c24:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008c28:	88bb      	ldrh	r3, [r7, #4]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8008c30:	fb03 f202 	mul.w	r2, r3, r2
 8008c34:	8879      	ldrh	r1, [r7, #2]
 8008c36:	88bb      	ldrh	r3, [r7, #4]
 8008c38:	1acb      	subs	r3, r1, r3
 8008c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8008c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		uint8_t hrs = min_sum/60;
 8008c42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008c46:	4a42      	ldr	r2, [pc, #264]	; (8008d50 <drawSunlightGraph+0x468>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		uint8_t min = min_sum%60;
 8008c54:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8008c58:	4b3d      	ldr	r3, [pc, #244]	; (8008d50 <drawSunlightGraph+0x468>)
 8008c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5e:	0959      	lsrs	r1, r3, #5
 8008c60:	460b      	mov	r3, r1
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	1a5b      	subs	r3, r3, r1
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		myTime.tm_hour = hrs;
 8008c70:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8008c74:	617b      	str	r3, [r7, #20]
		myTime.tm_min = min;
 8008c76:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008c7a:	613b      	str	r3, [r7, #16]
		calcSolarAngles(&angles, &myTime, location);
 8008c7c:	f107 010c 	add.w	r1, r7, #12
 8008c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fab1 	bl	80071f0 <calcSolarAngles>
		sunElev = (90-angles.za*180/M_PI)*height/90;
 8008c8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008c92:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008d54 <drawSunlightGraph+0x46c>
 8008c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c9a:	ee17 0a90 	vmov	r0, s15
 8008c9e:	f7f7 fc73 	bl	8000588 <__aeabi_f2d>
 8008ca2:	a329      	add	r3, pc, #164	; (adr r3, 8008d48 <drawSunlightGraph+0x460>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 fdf0 	bl	800088c <__aeabi_ddiv>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	f04f 0000 	mov.w	r0, #0
 8008cb4:	4928      	ldr	r1, [pc, #160]	; (8008d58 <drawSunlightGraph+0x470>)
 8008cb6:	f7f7 fb07 	bl	80002c8 <__aeabi_dsub>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4614      	mov	r4, r2
 8008cc0:	461d      	mov	r5, r3
 8008cc2:	79bb      	ldrb	r3, [r7, #6]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f7 fc4d 	bl	8000564 <__aeabi_i2d>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7f7 fcb1 	bl	8000638 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0200 	mov.w	r2, #0
 8008ce2:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <drawSunlightGraph+0x470>)
 8008ce4:	f7f7 fdd2 	bl	800088c <__aeabi_ddiv>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f7f7 ff52 	bl	8000b98 <__aeabi_d2iz>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	673b      	str	r3, [r7, #112]	; 0x70
		lcdPutPix(pix, yPos-sunElev, 1);
 8008cf8:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008cfc:	79fa      	ldrb	r2, [r7, #7]
 8008cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2201      	movs	r2, #1
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7fa f8dd 	bl	8002ec4 <lcdPutPix>
		if(pix < scaleXnow) lcdVLine(pix, yPos-sunElev, yPos, 1);
 8008d0a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008d0e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d208      	bcs.n	8008d28 <drawSunlightGraph+0x440>
 8008d16:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008d1a:	79fa      	ldrb	r2, [r7, #7]
 8008d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d1e:	1ad1      	subs	r1, r2, r3
 8008d20:	79fa      	ldrb	r2, [r7, #7]
 8008d22:	2301      	movs	r3, #1
 8008d24:	f7fa fb3a 	bl	800339c <lcdVLine>
	for(uint16_t pix = x1; pix <= x2; pix+=3){
 8008d28:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008d2c:	3303      	adds	r3, #3
 8008d2e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008d32:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	f67f af73 	bls.w	8008c24 <drawSunlightGraph+0x33c>
	}
}
 8008d3e:	bf00      	nop
 8008d40:	bf00      	nop
 8008d42:	3780      	adds	r7, #128	; 0x80
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bdb0      	pop	{r4, r5, r7, pc}
 8008d48:	54442d18 	.word	0x54442d18
 8008d4c:	400921fb 	.word	0x400921fb
 8008d50:	88888889 	.word	0x88888889
 8008d54:	43340000 	.word	0x43340000
 8008d58:	40568000 	.word	0x40568000

08008d5c <prevPage>:
}
void triplePressH(void){
	sprintf(&btnStr, "Triple press");
}

void prevPage(void){
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <prevPage+0x30>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <prevPage+0x1a>
		currentPage--;
 8008d68:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <prevPage+0x30>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <prevPage+0x30>)
 8008d72:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8008d74:	e005      	b.n	8008d82 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <prevPage+0x34>)
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <prevPage+0x30>)
 8008d80:	701a      	strb	r2, [r3, #0]
}
 8008d82:	bf00      	nop
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	20005dd1 	.word	0x20005dd1
 8008d90:	200000b5 	.word	0x200000b5

08008d94 <nextPage>:
void nextPage(void){
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <nextPage+0x34>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <nextPage+0x38>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	da06      	bge.n	8008db6 <nextPage+0x22>
		currentPage++;
 8008da8:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <nextPage+0x34>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	3301      	adds	r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <nextPage+0x34>)
 8008db2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8008db4:	e002      	b.n	8008dbc <nextPage+0x28>
		currentPage=0;
 8008db6:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <nextPage+0x34>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20005dd1 	.word	0x20005dd1
 8008dcc:	200000b5 	.word	0x200000b5

08008dd0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
//	btn_B2.onReleaseHandler = &quickReleaseH;
//	btn_B2.onPress = &quickPressH;
//	btn_B2.onRelease = &quickReleaseH;
//	btn_BB.onSinglePressHandler = &showOptions;

	btn_BA.onSinglePressHandler = &nextScreen;
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <setDefaultClbcks+0x28>)
 8008dd6:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <setDefaultClbcks+0x2c>)
 8008dd8:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <setDefaultClbcks+0x30>)
 8008ddc:	4a09      	ldr	r2, [pc, #36]	; (8008e04 <setDefaultClbcks+0x34>)
 8008dde:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <setDefaultClbcks+0x38>)
 8008de2:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <setDefaultClbcks+0x3c>)
 8008de4:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8008de6:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <setDefaultClbcks+0x40>)
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <setDefaultClbcks+0x44>)
 8008dea:	611a      	str	r2, [r3, #16]
}
 8008dec:	bf00      	nop
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20002560 	.word	0x20002560
 8008dfc:	08002bd9 	.word	0x08002bd9
 8008e00:	200025f0 	.word	0x200025f0
 8008e04:	08002be9 	.word	0x08002be9
 8008e08:	200026c8 	.word	0x200026c8
 8008e0c:	08008d5d 	.word	0x08008d5d
 8008e10:	20002638 	.word	0x20002638
 8008e14:	08008d95 	.word	0x08008d95

08008e18 <showPage1>:

void showPage1(void){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b092      	sub	sp, #72	; 0x48
 8008e1c:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8008e1e:	2300      	movs	r3, #0
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	605a      	str	r2, [r3, #4]
 8008e2c:	609a      	str	r2, [r3, #8]
 8008e2e:	60da      	str	r2, [r3, #12]
 8008e30:	611a      	str	r2, [r3, #16]
 8008e32:	615a      	str	r2, [r3, #20]
 8008e34:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8008e36:	2300      	movs	r3, #0
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	609a      	str	r2, [r3, #8]
 8008e44:	60da      	str	r2, [r3, #12]
 8008e46:	611a      	str	r2, [r3, #16]
 8008e48:	615a      	str	r2, [r3, #20]
 8008e4a:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <showPage1+0xa0>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <showPage1+0xa0>)
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	4619      	mov	r1, r3
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <showPage1+0xa0>)
 8008e5a:	789b      	ldrb	r3, [r3, #2]
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	460b      	mov	r3, r1
 8008e62:	4916      	ldr	r1, [pc, #88]	; (8008ebc <showPage1+0xa4>)
 8008e64:	f00c feec 	bl	8015c40 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8008e68:	463a      	mov	r2, r7
 8008e6a:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <showPage1+0xa8>)
 8008e6c:	210b      	movs	r1, #11
 8008e6e:	200e      	movs	r0, #14
 8008e70:	f7fa fa14 	bl	800329c <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8008e74:	2301      	movs	r3, #1
 8008e76:	2227      	movs	r2, #39	; 0x27
 8008e78:	2106      	movs	r1, #6
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f7fa fa8e 	bl	800339c <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8008e80:	2301      	movs	r3, #1
 8008e82:	2228      	movs	r2, #40	; 0x28
 8008e84:	2105      	movs	r1, #5
 8008e86:	2002      	movs	r0, #2
 8008e88:	f7fa fa88 	bl	800339c <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	2228      	movs	r2, #40	; 0x28
 8008e90:	2105      	movs	r1, #5
 8008e92:	2003      	movs	r0, #3
 8008e94:	f7fa fa82 	bl	800339c <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8008e98:	2301      	movs	r3, #1
 8008e9a:	2227      	movs	r2, #39	; 0x27
 8008e9c:	2106      	movs	r1, #6
 8008e9e:	2004      	movs	r0, #4
 8008ea0:	f7fa fa7c 	bl	800339c <lcdVLine>


		lcdPutStr(14, 60, btnStr, zekton24font);
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <showPage1+0xa8>)
 8008ea6:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <showPage1+0xac>)
 8008ea8:	213c      	movs	r1, #60	; 0x3c
 8008eaa:	200e      	movs	r0, #14
 8008eac:	f7fa f9f6 	bl	800329c <lcdPutStr>
}
 8008eb0:	bf00      	nop
 8008eb2:	3740      	adds	r7, #64	; 0x40
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200057c8 	.word	0x200057c8
 8008ebc:	0801d79c 	.word	0x0801d79c
 8008ec0:	080449d4 	.word	0x080449d4
 8008ec4:	20005dd4 	.word	0x20005dd4

08008ec8 <showPage2>:
void showPage2(void){
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008ece:	2300      	movs	r3, #0
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	609a      	str	r2, [r3, #8]
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	611a      	str	r2, [r3, #16]
 8008ee0:	615a      	str	r2, [r3, #20]
 8008ee2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	4913      	ldr	r1, [pc, #76]	; (8008f34 <showPage2+0x6c>)
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f00c fea9 	bl	8015c40 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 8008eee:	463a      	mov	r2, r7
 8008ef0:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <showPage2+0x70>)
 8008ef2:	2132      	movs	r1, #50	; 0x32
 8008ef4:	200e      	movs	r0, #14
 8008ef6:	f7fa f9d1 	bl	800329c <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8008efa:	2301      	movs	r3, #1
 8008efc:	224e      	movs	r2, #78	; 0x4e
 8008efe:	212d      	movs	r1, #45	; 0x2d
 8008f00:	2001      	movs	r0, #1
 8008f02:	f7fa fa4b 	bl	800339c <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8008f06:	2301      	movs	r3, #1
 8008f08:	224f      	movs	r2, #79	; 0x4f
 8008f0a:	212c      	movs	r1, #44	; 0x2c
 8008f0c:	2002      	movs	r0, #2
 8008f0e:	f7fa fa45 	bl	800339c <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8008f12:	2301      	movs	r3, #1
 8008f14:	224f      	movs	r2, #79	; 0x4f
 8008f16:	212c      	movs	r1, #44	; 0x2c
 8008f18:	2003      	movs	r0, #3
 8008f1a:	f7fa fa3f 	bl	800339c <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8008f1e:	2301      	movs	r3, #1
 8008f20:	224e      	movs	r2, #78	; 0x4e
 8008f22:	212d      	movs	r1, #45	; 0x2d
 8008f24:	2004      	movs	r0, #4
 8008f26:	f7fa fa39 	bl	800339c <lcdVLine>
}
 8008f2a:	bf00      	nop
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	0801d7ac 	.word	0x0801d7ac
 8008f38:	080449d4 	.word	0x080449d4

08008f3c <showPage3>:
void showPage3(void){
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008f42:	2300      	movs	r3, #0
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	1d3b      	adds	r3, r7, #4
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	605a      	str	r2, [r3, #4]
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	60da      	str	r2, [r3, #12]
 8008f52:	611a      	str	r2, [r3, #16]
 8008f54:	615a      	str	r2, [r3, #20]
 8008f56:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8008f58:	463b      	mov	r3, r7
 8008f5a:	4913      	ldr	r1, [pc, #76]	; (8008fa8 <showPage3+0x6c>)
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f00c fe6f 	bl	8015c40 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008f62:	463a      	mov	r2, r7
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <showPage3+0x70>)
 8008f66:	2100      	movs	r1, #0
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f7fa f997 	bl	800329c <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008f6e:	2301      	movs	r3, #1
 8008f70:	2275      	movs	r2, #117	; 0x75
 8008f72:	2154      	movs	r1, #84	; 0x54
 8008f74:	2001      	movs	r0, #1
 8008f76:	f7fa fa11 	bl	800339c <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	2276      	movs	r2, #118	; 0x76
 8008f7e:	2153      	movs	r1, #83	; 0x53
 8008f80:	2002      	movs	r0, #2
 8008f82:	f7fa fa0b 	bl	800339c <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008f86:	2301      	movs	r3, #1
 8008f88:	2276      	movs	r2, #118	; 0x76
 8008f8a:	2153      	movs	r1, #83	; 0x53
 8008f8c:	2003      	movs	r0, #3
 8008f8e:	f7fa fa05 	bl	800339c <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008f92:	2301      	movs	r3, #1
 8008f94:	2275      	movs	r2, #117	; 0x75
 8008f96:	2154      	movs	r1, #84	; 0x54
 8008f98:	2004      	movs	r0, #4
 8008f9a:	f7fa f9ff 	bl	800339c <lcdVLine>
}
 8008f9e:	bf00      	nop
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	0801d7b0 	.word	0x0801d7b0
 8008fac:	080449d4 	.word	0x080449d4

08008fb0 <showPage4>:
void showPage4(void){
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	609a      	str	r2, [r3, #8]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	611a      	str	r2, [r3, #16]
 8008fc8:	615a      	str	r2, [r3, #20]
 8008fca:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8008fcc:	463b      	mov	r3, r7
 8008fce:	4913      	ldr	r1, [pc, #76]	; (800901c <showPage4+0x6c>)
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f00c fe35 	bl	8015c40 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <showPage4+0x70>)
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7fa f95d 	bl	800329c <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	229c      	movs	r2, #156	; 0x9c
 8008fe6:	217b      	movs	r1, #123	; 0x7b
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7fa f9d7 	bl	800339c <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008fee:	2301      	movs	r3, #1
 8008ff0:	229d      	movs	r2, #157	; 0x9d
 8008ff2:	217a      	movs	r1, #122	; 0x7a
 8008ff4:	2002      	movs	r0, #2
 8008ff6:	f7fa f9d1 	bl	800339c <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	229d      	movs	r2, #157	; 0x9d
 8008ffe:	217a      	movs	r1, #122	; 0x7a
 8009000:	2003      	movs	r0, #3
 8009002:	f7fa f9cb 	bl	800339c <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8009006:	2301      	movs	r3, #1
 8009008:	229c      	movs	r2, #156	; 0x9c
 800900a:	217b      	movs	r1, #123	; 0x7b
 800900c:	2004      	movs	r0, #4
 800900e:	f7fa f9c5 	bl	800339c <lcdVLine>
}
 8009012:	bf00      	nop
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	0801d7bc 	.word	0x0801d7bc
 8009020:	080449d4 	.word	0x080449d4

08009024 <showPage5>:
void showPage5(void){
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800902a:	2300      	movs	r3, #0
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	1d3b      	adds	r3, r7, #4
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	609a      	str	r2, [r3, #8]
 8009038:	60da      	str	r2, [r3, #12]
 800903a:	611a      	str	r2, [r3, #16]
 800903c:	615a      	str	r2, [r3, #20]
 800903e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8009040:	463b      	mov	r3, r7
 8009042:	4925      	ldr	r1, [pc, #148]	; (80090d8 <showPage5+0xb4>)
 8009044:	4618      	mov	r0, r3
 8009046:	f00c fdfb 	bl	8015c40 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 800904a:	463a      	mov	r2, r7
 800904c:	4b23      	ldr	r3, [pc, #140]	; (80090dc <showPage5+0xb8>)
 800904e:	2100      	movs	r1, #0
 8009050:	200a      	movs	r0, #10
 8009052:	f7fa f923 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8009056:	463a      	mov	r2, r7
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <showPage5+0xbc>)
 800905a:	210f      	movs	r1, #15
 800905c:	200a      	movs	r0, #10
 800905e:	f7fa f91d 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8009062:	463a      	mov	r2, r7
 8009064:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <showPage5+0xc0>)
 8009066:	2132      	movs	r1, #50	; 0x32
 8009068:	200a      	movs	r0, #10
 800906a:	f7fa f917 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 800906e:	463a      	mov	r2, r7
 8009070:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <showPage5+0xc4>)
 8009072:	213c      	movs	r1, #60	; 0x3c
 8009074:	200a      	movs	r0, #10
 8009076:	f7fa f911 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 800907a:	463a      	mov	r2, r7
 800907c:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <showPage5+0xc8>)
 800907e:	215a      	movs	r1, #90	; 0x5a
 8009080:	200a      	movs	r0, #10
 8009082:	f7fa f90b 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8009086:	463a      	mov	r2, r7
 8009088:	4b19      	ldr	r3, [pc, #100]	; (80090f0 <showPage5+0xcc>)
 800908a:	2178      	movs	r1, #120	; 0x78
 800908c:	200a      	movs	r0, #10
 800908e:	f7fa f905 	bl	800329c <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8009092:	463a      	mov	r2, r7
 8009094:	4b17      	ldr	r3, [pc, #92]	; (80090f4 <showPage5+0xd0>)
 8009096:	2196      	movs	r1, #150	; 0x96
 8009098:	200a      	movs	r0, #10
 800909a:	f7fa f8ff 	bl	800329c <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800909e:	2301      	movs	r3, #1
 80090a0:	22c3      	movs	r2, #195	; 0xc3
 80090a2:	21a2      	movs	r1, #162	; 0xa2
 80090a4:	2001      	movs	r0, #1
 80090a6:	f7fa f979 	bl	800339c <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80090aa:	2301      	movs	r3, #1
 80090ac:	22c4      	movs	r2, #196	; 0xc4
 80090ae:	21a1      	movs	r1, #161	; 0xa1
 80090b0:	2002      	movs	r0, #2
 80090b2:	f7fa f973 	bl	800339c <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80090b6:	2301      	movs	r3, #1
 80090b8:	22c4      	movs	r2, #196	; 0xc4
 80090ba:	21a1      	movs	r1, #161	; 0xa1
 80090bc:	2003      	movs	r0, #3
 80090be:	f7fa f96d 	bl	800339c <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80090c2:	2301      	movs	r3, #1
 80090c4:	22c3      	movs	r2, #195	; 0xc3
 80090c6:	21a2      	movs	r1, #162	; 0xa2
 80090c8:	2004      	movs	r0, #4
 80090ca:	f7fa f967 	bl	800339c <lcdVLine>
}
 80090ce:	bf00      	nop
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	0801d7c8 	.word	0x0801d7c8
 80090dc:	080428c4 	.word	0x080428c4
 80090e0:	0804340c 	.word	0x0804340c
 80090e4:	0803fedc 	.word	0x0803fedc
 80090e8:	08040358 	.word	0x08040358
 80090ec:	080413b4 	.word	0x080413b4
 80090f0:	08041e3c 	.word	0x08041e3c
 80090f4:	080449d4 	.word	0x080449d4

080090f8 <showPage6>:
void showPage6(void){
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80090fe:	2301      	movs	r3, #1
 8009100:	22ea      	movs	r2, #234	; 0xea
 8009102:	21c9      	movs	r1, #201	; 0xc9
 8009104:	2001      	movs	r0, #1
 8009106:	f7fa f949 	bl	800339c <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800910a:	2301      	movs	r3, #1
 800910c:	22eb      	movs	r2, #235	; 0xeb
 800910e:	21c8      	movs	r1, #200	; 0xc8
 8009110:	2002      	movs	r0, #2
 8009112:	f7fa f943 	bl	800339c <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8009116:	2301      	movs	r3, #1
 8009118:	22eb      	movs	r2, #235	; 0xeb
 800911a:	21c8      	movs	r1, #200	; 0xc8
 800911c:	2003      	movs	r0, #3
 800911e:	f7fa f93d 	bl	800339c <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8009122:	2301      	movs	r3, #1
 8009124:	22ea      	movs	r2, #234	; 0xea
 8009126:	21c9      	movs	r1, #201	; 0xc9
 8009128:	2004      	movs	r0, #4
 800912a:	f7fa f937 	bl	800339c <lcdVLine>
		lcdRect(0,399,25,80,1);
 800912e:	2301      	movs	r3, #1
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	2350      	movs	r3, #80	; 0x50
 8009134:	2219      	movs	r2, #25
 8009136:	f240 118f 	movw	r1, #399	; 0x18f
 800913a:	2000      	movs	r0, #0
 800913c:	f7fa fecc 	bl	8003ed8 <lcdRect>
		lcdRect(0,399,120,180,1);
 8009140:	2301      	movs	r3, #1
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	23b4      	movs	r3, #180	; 0xb4
 8009146:	2278      	movs	r2, #120	; 0x78
 8009148:	f240 118f 	movw	r1, #399	; 0x18f
 800914c:	2000      	movs	r0, #0
 800914e:	f7fa fec3 	bl	8003ed8 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8009152:	2301      	movs	r3, #1
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	2300      	movs	r3, #0
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	2303      	movs	r3, #3
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	2332      	movs	r3, #50	; 0x32
 8009160:	220a      	movs	r2, #10
 8009162:	2132      	movs	r1, #50	; 0x32
 8009164:	200a      	movs	r0, #10
 8009166:	f7fa fedc 	bl	8003f22 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 800916a:	2301      	movs	r3, #1
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	2301      	movs	r3, #1
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	2303      	movs	r3, #3
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	2332      	movs	r3, #50	; 0x32
 8009178:	220a      	movs	r2, #10
 800917a:	2164      	movs	r1, #100	; 0x64
 800917c:	203c      	movs	r0, #60	; 0x3c
 800917e:	f7fa fed0 	bl	8003f22 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8009182:	2301      	movs	r3, #1
 8009184:	9302      	str	r3, [sp, #8]
 8009186:	2302      	movs	r3, #2
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	2303      	movs	r3, #3
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	2332      	movs	r3, #50	; 0x32
 8009190:	220a      	movs	r2, #10
 8009192:	2196      	movs	r1, #150	; 0x96
 8009194:	206e      	movs	r0, #110	; 0x6e
 8009196:	f7fa fec4 	bl	8003f22 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 800919a:	2301      	movs	r3, #1
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	2303      	movs	r3, #3
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	2303      	movs	r3, #3
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	2332      	movs	r3, #50	; 0x32
 80091a8:	220a      	movs	r2, #10
 80091aa:	21c8      	movs	r1, #200	; 0xc8
 80091ac:	20a0      	movs	r0, #160	; 0xa0
 80091ae:	f7fa feb8 	bl	8003f22 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 80091b2:	2301      	movs	r3, #1
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	2304      	movs	r3, #4
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	2303      	movs	r3, #3
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2332      	movs	r3, #50	; 0x32
 80091c0:	220a      	movs	r2, #10
 80091c2:	21fa      	movs	r1, #250	; 0xfa
 80091c4:	20d2      	movs	r0, #210	; 0xd2
 80091c6:	f7fa feac 	bl	8003f22 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 80091ca:	2301      	movs	r3, #1
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	2305      	movs	r3, #5
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2303      	movs	r3, #3
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2332      	movs	r3, #50	; 0x32
 80091d8:	220a      	movs	r2, #10
 80091da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80091de:	f44f 7082 	mov.w	r0, #260	; 0x104
 80091e2:	f7fa fe9e 	bl	8003f22 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 80091e6:	2301      	movs	r3, #1
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	2306      	movs	r3, #6
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	2303      	movs	r3, #3
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	2332      	movs	r3, #50	; 0x32
 80091f4:	220a      	movs	r2, #10
 80091f6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80091fa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80091fe:	f7fa fe90 	bl	8003f22 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8009202:	2301      	movs	r3, #1
 8009204:	9302      	str	r3, [sp, #8]
 8009206:	2307      	movs	r3, #7
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	2303      	movs	r3, #3
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2364      	movs	r3, #100	; 0x64
 8009210:	223c      	movs	r2, #60	; 0x3c
 8009212:	2132      	movs	r1, #50	; 0x32
 8009214:	200a      	movs	r0, #10
 8009216:	f7fa fe84 	bl	8003f22 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800921a:	2301      	movs	r3, #1
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	2308      	movs	r3, #8
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	2303      	movs	r3, #3
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2364      	movs	r3, #100	; 0x64
 8009228:	223c      	movs	r2, #60	; 0x3c
 800922a:	2164      	movs	r1, #100	; 0x64
 800922c:	203c      	movs	r0, #60	; 0x3c
 800922e:	f7fa fe78 	bl	8003f22 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8009232:	2301      	movs	r3, #1
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	2309      	movs	r3, #9
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	2303      	movs	r3, #3
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	2364      	movs	r3, #100	; 0x64
 8009240:	223c      	movs	r2, #60	; 0x3c
 8009242:	2196      	movs	r1, #150	; 0x96
 8009244:	206e      	movs	r0, #110	; 0x6e
 8009246:	f7fa fe6c 	bl	8003f22 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 800924a:	2301      	movs	r3, #1
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	230a      	movs	r3, #10
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	2303      	movs	r3, #3
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2364      	movs	r3, #100	; 0x64
 8009258:	223c      	movs	r2, #60	; 0x3c
 800925a:	21c8      	movs	r1, #200	; 0xc8
 800925c:	20a0      	movs	r0, #160	; 0xa0
 800925e:	f7fa fe60 	bl	8003f22 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8009262:	2301      	movs	r3, #1
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	230b      	movs	r3, #11
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	2303      	movs	r3, #3
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	2364      	movs	r3, #100	; 0x64
 8009270:	223c      	movs	r2, #60	; 0x3c
 8009272:	21fa      	movs	r1, #250	; 0xfa
 8009274:	20d2      	movs	r0, #210	; 0xd2
 8009276:	f7fa fe54 	bl	8003f22 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 800927a:	2301      	movs	r3, #1
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	230c      	movs	r3, #12
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	2303      	movs	r3, #3
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	2364      	movs	r3, #100	; 0x64
 8009288:	223c      	movs	r2, #60	; 0x3c
 800928a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800928e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009292:	f7fa fe46 	bl	8003f22 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8009296:	2301      	movs	r3, #1
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	230d      	movs	r3, #13
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	2303      	movs	r3, #3
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2364      	movs	r3, #100	; 0x64
 80092a4:	223c      	movs	r2, #60	; 0x3c
 80092a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80092aa:	f44f 709b 	mov.w	r0, #310	; 0x136
 80092ae:	f7fa fe38 	bl	8003f22 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 80092b2:	2301      	movs	r3, #1
 80092b4:	9302      	str	r3, [sp, #8]
 80092b6:	230e      	movs	r3, #14
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	2303      	movs	r3, #3
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	2396      	movs	r3, #150	; 0x96
 80092c0:	226e      	movs	r2, #110	; 0x6e
 80092c2:	2132      	movs	r1, #50	; 0x32
 80092c4:	200a      	movs	r0, #10
 80092c6:	f7fa fe2c 	bl	8003f22 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 80092ca:	2301      	movs	r3, #1
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	230f      	movs	r3, #15
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	2303      	movs	r3, #3
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	2396      	movs	r3, #150	; 0x96
 80092d8:	226e      	movs	r2, #110	; 0x6e
 80092da:	2164      	movs	r1, #100	; 0x64
 80092dc:	203c      	movs	r0, #60	; 0x3c
 80092de:	f7fa fe20 	bl	8003f22 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 80092e2:	2301      	movs	r3, #1
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	2310      	movs	r3, #16
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	2303      	movs	r3, #3
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	2396      	movs	r3, #150	; 0x96
 80092f0:	226e      	movs	r2, #110	; 0x6e
 80092f2:	2196      	movs	r1, #150	; 0x96
 80092f4:	206e      	movs	r0, #110	; 0x6e
 80092f6:	f7fa fe14 	bl	8003f22 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 80092fa:	2301      	movs	r3, #1
 80092fc:	9302      	str	r3, [sp, #8]
 80092fe:	2311      	movs	r3, #17
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	2303      	movs	r3, #3
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	2396      	movs	r3, #150	; 0x96
 8009308:	226e      	movs	r2, #110	; 0x6e
 800930a:	21c8      	movs	r1, #200	; 0xc8
 800930c:	20a0      	movs	r0, #160	; 0xa0
 800930e:	f7fa fe08 	bl	8003f22 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8009312:	2301      	movs	r3, #1
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	2312      	movs	r3, #18
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	2303      	movs	r3, #3
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	2396      	movs	r3, #150	; 0x96
 8009320:	226e      	movs	r2, #110	; 0x6e
 8009322:	21fa      	movs	r1, #250	; 0xfa
 8009324:	20d2      	movs	r0, #210	; 0xd2
 8009326:	f7fa fdfc 	bl	8003f22 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 800932a:	2301      	movs	r3, #1
 800932c:	9302      	str	r3, [sp, #8]
 800932e:	2313      	movs	r3, #19
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	2303      	movs	r3, #3
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	2396      	movs	r3, #150	; 0x96
 8009338:	226e      	movs	r2, #110	; 0x6e
 800933a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800933e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009342:	f7fa fdee 	bl	8003f22 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8009346:	2301      	movs	r3, #1
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	2314      	movs	r3, #20
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	2303      	movs	r3, #3
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	2396      	movs	r3, #150	; 0x96
 8009354:	226e      	movs	r2, #110	; 0x6e
 8009356:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800935a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800935e:	f7fa fde0 	bl	8003f22 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8009362:	2304      	movs	r3, #4
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	2301      	movs	r3, #1
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	23c8      	movs	r3, #200	; 0xc8
 800936c:	22a0      	movs	r2, #160	; 0xa0
 800936e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8009372:	200a      	movs	r0, #10
 8009374:	f7fa fdd5 	bl	8003f22 <lcdRect2>
}
 8009378:	bf00      	nop
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <showPage>:

void showPage(uint8_t pageNum){
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	2b05      	cmp	r3, #5
 800938e:	d821      	bhi.n	80093d4 <showPage+0x54>
 8009390:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <showPage+0x18>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093b1 	.word	0x080093b1
 800939c:	080093b7 	.word	0x080093b7
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093c3 	.word	0x080093c3
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080093cf 	.word	0x080093cf
	case 0:
		showPage1();
 80093b0:	f7ff fd32 	bl	8008e18 <showPage1>
		break;
 80093b4:	e00e      	b.n	80093d4 <showPage+0x54>
	case 1:
		showPage2();
 80093b6:	f7ff fd87 	bl	8008ec8 <showPage2>
		break;
 80093ba:	e00b      	b.n	80093d4 <showPage+0x54>
	case 2:
		showPage3();
 80093bc:	f7ff fdbe 	bl	8008f3c <showPage3>
		break;
 80093c0:	e008      	b.n	80093d4 <showPage+0x54>
	case 3:
		showPage4();
 80093c2:	f7ff fdf5 	bl	8008fb0 <showPage4>
		break;
 80093c6:	e005      	b.n	80093d4 <showPage+0x54>
	case 4:
		showPage5();
 80093c8:	f7ff fe2c 	bl	8009024 <showPage5>
		break;
 80093cc:	e002      	b.n	80093d4 <showPage+0x54>
	case 5:
		showPage6();
 80093ce:	f7ff fe93 	bl	80090f8 <showPage6>
		break;
 80093d2:	bf00      	nop
	}
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <screentestSetup>:

void screentestSetup(void){
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80093e0:	f7ff fcf6 	bl	8008dd0 <setDefaultClbcks>
}
 80093e4:	bf00      	nop
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <screentestMain>:

void screentestMain(void){
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80093ee:	2300      	movs	r3, #0
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	1d3b      	adds	r3, r7, #4
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	609a      	str	r2, [r3, #8]
 80093fc:	60da      	str	r2, [r3, #12]
 80093fe:	611a      	str	r2, [r3, #16]
 8009400:	615a      	str	r2, [r3, #20]
 8009402:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <screentestMain+0x30>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff ffb9 	bl	8009380 <showPage>

}
 800940e:	bf00      	nop
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20005dd1 	.word	0x20005dd1

0800941c <setDefaultClbcks>:
#include "sdcardModule.h"
#include "contextMenu.h"
#include "fonts/fonts.h"
#include "File_Handling.h"

static void setDefaultClbcks(void){
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
	// module callbacks
//	btn_B2.onSinglePressHandler = &showCntxMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <setDefaultClbcks+0x1c>)
 8009422:	4a06      	ldr	r2, [pc, #24]	; (800943c <setDefaultClbcks+0x20>)
 8009424:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009426:	4b06      	ldr	r3, [pc, #24]	; (8009440 <setDefaultClbcks+0x24>)
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <setDefaultClbcks+0x28>)
 800942a:	611a      	str	r2, [r3, #16]
}
 800942c:	bf00      	nop
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20002560 	.word	0x20002560
 800943c:	08002bd9 	.word	0x08002bd9
 8009440:	200025f0 	.word	0x200025f0
 8009444:	08002be9 	.word	0x08002be9

08009448 <sdcardSetup>:
//static const struct ContextAction action2 = {"Unmount SD card", &setDateAction};
//static const struct ContextAction action3 = {"Customize", &setTimeAction};
//static const struct ContextAction action4 = {"Lock", &setTimeAction};
//static const struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void sdcardSetup(void){
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800944c:	f7ff ffe6 	bl	800941c <setDefaultClbcks>
//	setupCntxMenu(&setDefaultClbcks);
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8009450:	bf00      	nop
 8009452:	bd80      	pop	{r7, pc}

08009454 <sdcardMain>:
void sdcardMain(void){
 8009454:	b580      	push	{r7, lr}
 8009456:	b0a8      	sub	sp, #160	; 0xa0
 8009458:	af00      	add	r7, sp, #0
	char title[50] = {0};
 800945a:	2300      	movs	r3, #0
 800945c:	667b      	str	r3, [r7, #100]	; 0x64
 800945e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009462:	222e      	movs	r2, #46	; 0x2e
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f00b fabc 	bl	80149e4 <memset>
	sprintf(&title, "SD card explorer");
 800946c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009470:	492f      	ldr	r1, [pc, #188]	; (8009530 <sdcardMain+0xdc>)
 8009472:	4618      	mov	r0, r3
 8009474:	f00c fbe4 	bl	8015c40 <siprintf>
	lcdPutStr(0, 0, title, smallestFont);
 8009478:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800947c:	4b2d      	ldr	r3, [pc, #180]	; (8009534 <sdcardMain+0xe0>)
 800947e:	2100      	movs	r1, #0
 8009480:	2000      	movs	r0, #0
 8009482:	f7f9 ff0b 	bl	800329c <lcdPutStr>
	char freeTotal[50];
	Check_SD_Space(&freeTotal);
 8009486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 f870 	bl	8001570 <Check_SD_Space>
	sprintf(&title, "Free/total space: %s [kB]", freeTotal);
 8009490:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009498:	4927      	ldr	r1, [pc, #156]	; (8009538 <sdcardMain+0xe4>)
 800949a:	4618      	mov	r0, r3
 800949c:	f00c fbd0 	bl	8015c40 <siprintf>
	lcdPutStr(0, 12, title, smallestFont);
 80094a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80094a4:	4b23      	ldr	r3, [pc, #140]	; (8009534 <sdcardMain+0xe0>)
 80094a6:	210c      	movs	r1, #12
 80094a8:	2000      	movs	r0, #0
 80094aa:	f7f9 fef7 	bl	800329c <lcdPutStr>

    DIR dir;
	UINT i;
	char *path = malloc(20*sizeof (char));
 80094ae:	2014      	movs	r0, #20
 80094b0:	f00b fa7a 	bl	80149a8 <malloc>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sprintf (path, "%s","/");
 80094ba:	4a20      	ldr	r2, [pc, #128]	; (800953c <sdcardMain+0xe8>)
 80094bc:	4920      	ldr	r1, [pc, #128]	; (8009540 <sdcardMain+0xec>)
 80094be:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80094c2:	f00c fbbd 	bl	8015c40 <siprintf>
    f_opendir(&dir, path);                       /* Open the directory */
 80094c6:	463b      	mov	r3, r7
 80094c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80094cc:	4618      	mov	r0, r3
 80094ce:	f00a fe94 	bl	80141fa <f_opendir>
	for(uint8_t i = 1; i<10; i++){
 80094d2:	2301      	movs	r3, #1
 80094d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80094d8:	e01a      	b.n	8009510 <sdcardMain+0xbc>
		Scan_SD_my(&dir, &title);
 80094da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80094de:	463b      	mov	r3, r7
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f7 fdda 	bl	800109c <Scan_SD_my>
		lcdPutStr(0, 12+i*12, title, smallestFont);
 80094e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80094ec:	3301      	adds	r3, #1
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	0052      	lsls	r2, r2, #1
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	b2d9      	uxtb	r1, r3
 80094fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80094fe:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <sdcardMain+0xe0>)
 8009500:	2000      	movs	r0, #0
 8009502:	f7f9 fecb 	bl	800329c <lcdPutStr>
	for(uint8_t i = 1; i<10; i++){
 8009506:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800950a:	3301      	adds	r3, #1
 800950c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8009510:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009514:	2b09      	cmp	r3, #9
 8009516:	d9e0      	bls.n	80094da <sdcardMain+0x86>
	}
	f_closedir(&dir);
 8009518:	463b      	mov	r3, r7
 800951a:	4618      	mov	r0, r3
 800951c:	f00a fee0 	bl	80142e0 <f_closedir>
    free(path);
 8009520:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009524:	f00b fa48 	bl	80149b8 <free>

//	lcdPutStr(0,60, fileText, smallestFont);
//	lcdRefresh();
//	enableCntxMenu();
}
 8009528:	bf00      	nop
 800952a:	37a0      	adds	r7, #160	; 0xa0
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	0801d890 	.word	0x0801d890
 8009534:	0804683c 	.word	0x0804683c
 8009538:	0801d8a4 	.word	0x0801d8a4
 800953c:	0801d8c0 	.word	0x0801d8c0
 8009540:	0801d8c4 	.word	0x0801d8c4

08009544 <addOne>:
static const menuConfig_t menuConfig = {10, 30, 200, 380, MENU_SHOW_SCROLL, 4, MENU_WRAPPING_ENABLED, zekton21font, 24};

void enterMenu(menuList_t *selectedMenu);
void openTimeDateSettings(void);

void addOne(void){
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
	counter++;
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <addOne+0x1c>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	b2da      	uxtb	r2, r3
 8009550:	4b03      	ldr	r3, [pc, #12]	; (8009560 <addOne+0x1c>)
 8009552:	701a      	strb	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20005df2 	.word	0x20005df2

08009564 <incMenuPosition>:
menuList_t *activeMenu = &settingsMenu;
void enterMenu(menuList_t *selectedMenu){
	activeMenu = selectedMenu;
}

void incMenuPosition(void){
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
	nextMenuItem(currentMenu);
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <incMenuPosition+0x2c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f001 fb74 	bl	800ac5a <nextMenuItem>
	btn_BB.onSinglePressHandler = currentMenu->itemList[currentMenu->selectedItem]->actionCallback;
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <incMenuPosition+0x2c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <incMenuPosition+0x2c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	791b      	ldrb	r3, [r3, #4]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	4a03      	ldr	r2, [pc, #12]	; (8009594 <incMenuPosition+0x30>)
 8009588:	6113      	str	r3, [r2, #16]
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200000d0 	.word	0x200000d0
 8009594:	200025a8 	.word	0x200025a8

08009598 <decMenuPosition>:
void decMenuPosition(void){
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
	prevMenuItem(currentMenu);
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <decMenuPosition+0x2c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fb76 	bl	800ac92 <prevMenuItem>
	btn_BB.onSinglePressHandler = currentMenu->itemList[currentMenu->selectedItem]->actionCallback;
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <decMenuPosition+0x2c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <decMenuPosition+0x2c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	791b      	ldrb	r3, [r3, #4]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	4a03      	ldr	r2, [pc, #12]	; (80095c8 <decMenuPosition+0x30>)
 80095bc:	6113      	str	r3, [r2, #16]
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200000d0 	.word	0x200000d0
 80095c8:	200025a8 	.word	0x200025a8

080095cc <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <setDefaultClbcks+0x34>)
 80095d2:	4a0c      	ldr	r2, [pc, #48]	; (8009604 <setDefaultClbcks+0x38>)
 80095d4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <setDefaultClbcks+0x3c>)
 80095d8:	4a0c      	ldr	r2, [pc, #48]	; (800960c <setDefaultClbcks+0x40>)
 80095da:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &decMenuPosition;
 80095dc:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <setDefaultClbcks+0x44>)
 80095de:	4a0d      	ldr	r2, [pc, #52]	; (8009614 <setDefaultClbcks+0x48>)
 80095e0:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &incMenuPosition;
 80095e2:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <setDefaultClbcks+0x4c>)
 80095e4:	4a0d      	ldr	r2, [pc, #52]	; (800961c <setDefaultClbcks+0x50>)
 80095e6:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = currentMenu->itemList[0]->actionCallback;
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <setDefaultClbcks+0x54>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <setDefaultClbcks+0x58>)
 80095f4:	6113      	str	r3, [r2, #16]

//	btn_BB.onSinglePressHandler = activeMenu->actionClbk;
}
 80095f6:	bf00      	nop
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	20002560 	.word	0x20002560
 8009604:	08002bd9 	.word	0x08002bd9
 8009608:	200025f0 	.word	0x200025f0
 800960c:	08002be9 	.word	0x08002be9
 8009610:	200026c8 	.word	0x200026c8
 8009614:	08009599 	.word	0x08009599
 8009618:	20002638 	.word	0x20002638
 800961c:	08009565 	.word	0x08009565
 8009620:	200000d0 	.word	0x200000d0
 8009624:	200025a8 	.word	0x200025a8

08009628 <openSubmenu>:
//		drawMenuItem(menuItemArray[i], i==menu->currentPosition, x, y+(menuConfig.listItemHeight+1)*i);
//	}
//}

//void openSubmenu(guiMenu_t *submenu){
void openSubmenu(void){
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
	currentMenu = &timeSubMenu;
 800962c:	4b07      	ldr	r3, [pc, #28]	; (800964c <openSubmenu+0x24>)
 800962e:	4a08      	ldr	r2, [pc, #32]	; (8009650 <openSubmenu+0x28>)
 8009630:	601a      	str	r2, [r3, #0]
	btn_BB.onSinglePressHandler = currentMenu->itemList[0]->actionCallback;
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <openSubmenu+0x24>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <openSubmenu+0x2c>)
 800963e:	6113      	str	r3, [r2, #16]
}
 8009640:	bf00      	nop
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	200000d0 	.word	0x200000d0
 8009650:	200000c4 	.word	0x200000c4
 8009654:	200025a8 	.word	0x200025a8

08009658 <openSetTimeView>:
void openSetTimeView(void){
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 800965c:	4802      	ldr	r0, [pc, #8]	; (8009668 <openSetTimeView+0x10>)
 800965e:	f7f9 fad7 	bl	8002c10 <guiApplyView>
}
 8009662:	bf00      	nop
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200001f4 	.word	0x200001f4

0800966c <openSetDateView>:
void openSetDateView(void){
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8009670:	4802      	ldr	r0, [pc, #8]	; (800967c <openSetDateView+0x10>)
 8009672:	f7f9 facd 	bl	8002c10 <guiApplyView>
}
 8009676:	bf00      	nop
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	200001c0 	.word	0x200001c0

08009680 <settingsSetup>:

void settingsSetup(void){
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009684:	f7ff ffa2 	bl	80095cc <setDefaultClbcks>
}
 8009688:	bf00      	nop
 800968a:	bd80      	pop	{r7, pc}

0800968c <animate>:

uint8_t animationFrameNum = 0;
void animate(void){
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
	lcdPutChar(10, 200, 32+animationFrameNum%8, circularLoader);
 8009690:	4b06      	ldr	r3, [pc, #24]	; (80096ac <animate+0x20>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	b2db      	uxtb	r3, r3
 800969a:	3320      	adds	r3, #32
 800969c:	b2da      	uxtb	r2, r3
 800969e:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <animate+0x24>)
 80096a0:	21c8      	movs	r1, #200	; 0xc8
 80096a2:	200a      	movs	r0, #10
 80096a4:	f7f9 fc5c 	bl	8002f60 <lcdPutChar>
//	lcdHLine(10+(animationFrameNum%8)*2, 20+(animationFrameNum%8)*2, 200, 1);
}
 80096a8:	bf00      	nop
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20005df3 	.word	0x20005df3
 80096b0:	08047d14 	.word	0x08047d14

080096b4 <settingsMain>:
	const guiMenuItem_t setLocationSub = {"Set location",
			MENU_ITEM_TYPE_GENERIC, NULL};
	const guiMenuItem_t *list2[4] = {&setTimeSub, &setDateSub, &setZoneSub, &setLocationSub};
	guiMenu_t timeSubMenu = {10, 30, 0, 3, list2};

void settingsMain(void){
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
//	drawMenu(activeMenu, 10, 30);
	drawGuiMenu(currentMenu);
 80096ba:	4b18      	ldr	r3, [pc, #96]	; (800971c <settingsMain+0x68>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 fb02 	bl	800acc8 <drawGuiMenu>
	char tempStr[30] = {0};
 80096c4:	2300      	movs	r3, #0
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	605a      	str	r2, [r3, #4]
 80096d0:	609a      	str	r2, [r3, #8]
 80096d2:	60da      	str	r2, [r3, #12]
 80096d4:	611a      	str	r2, [r3, #16]
 80096d6:	615a      	str	r2, [r3, #20]
 80096d8:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings");
 80096da:	463b      	mov	r3, r7
 80096dc:	4910      	ldr	r1, [pc, #64]	; (8009720 <settingsMain+0x6c>)
 80096de:	4618      	mov	r0, r3
 80096e0:	f00c faae 	bl	8015c40 <siprintf>
	lcdPutStr(0, 0, tempStr, font_13_calibri);
 80096e4:	463a      	mov	r2, r7
 80096e6:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <settingsMain+0x70>)
 80096e8:	2100      	movs	r1, #0
 80096ea:	2000      	movs	r0, #0
 80096ec:	f7f9 fdd6 	bl	800329c <lcdPutStr>
	sprintf(&tempStr, "cnt:%d", counter);
 80096f0:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <settingsMain+0x74>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	463b      	mov	r3, r7
 80096f8:	490c      	ldr	r1, [pc, #48]	; (800972c <settingsMain+0x78>)
 80096fa:	4618      	mov	r0, r3
 80096fc:	f00c faa0 	bl	8015c40 <siprintf>
	lcdPutStr(310, 0, tempStr, font_13_calibri);
 8009700:	463a      	mov	r2, r7
 8009702:	4b08      	ldr	r3, [pc, #32]	; (8009724 <settingsMain+0x70>)
 8009704:	2100      	movs	r1, #0
 8009706:	f44f 709b 	mov.w	r0, #310	; 0x136
 800970a:	f7f9 fdc7 	bl	800329c <lcdPutStr>

//	lcdPutStr(10, 200, " !\"#$%&'()", circularLoader);
//	lcdPutChar(10, 200, 32, circularLoader);
	animate();
 800970e:	f7ff ffbd 	bl	800968c <animate>
}
 8009712:	bf00      	nop
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200000d0 	.word	0x200000d0
 8009720:	0801d9f0 	.word	0x0801d9f0
 8009724:	08046cb8 	.word	0x08046cb8
 8009728:	20005df2 	.word	0x20005df2
 800972c:	0801d9fc 	.word	0x0801d9fc

08009730 <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
	stwStart();
 8009734:	f7fb f95a 	bl	80049ec <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8009738:	4b03      	ldr	r3, [pc, #12]	; (8009748 <startStopwatch+0x18>)
 800973a:	4a04      	ldr	r2, [pc, #16]	; (800974c <startStopwatch+0x1c>)
 800973c:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <startStopwatch+0x20>)
 8009740:	4a04      	ldr	r2, [pc, #16]	; (8009754 <startStopwatch+0x24>)
 8009742:	611a      	str	r2, [r3, #16]
}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	200025a8 	.word	0x200025a8
 800974c:	08009759 	.word	0x08009759
 8009750:	20002680 	.word	0x20002680
 8009754:	08009799 	.word	0x08009799

08009758 <stopStopwatch>:
void stopStopwatch(){
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
	stwStop();
 800975c:	f7fb f96c 	bl	8004a38 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8009760:	4b03      	ldr	r3, [pc, #12]	; (8009770 <stopStopwatch+0x18>)
 8009762:	4a04      	ldr	r2, [pc, #16]	; (8009774 <stopStopwatch+0x1c>)
 8009764:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <stopStopwatch+0x20>)
 8009768:	4a04      	ldr	r2, [pc, #16]	; (800977c <stopStopwatch+0x24>)
 800976a:	611a      	str	r2, [r3, #16]
}
 800976c:	bf00      	nop
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200025a8 	.word	0x200025a8
 8009774:	08009731 	.word	0x08009731
 8009778:	20002680 	.word	0x20002680
 800977c:	08009781 	.word	0x08009781

08009780 <resetStopwatch>:
void resetStopwatch(){
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
	stwClear();
 8009784:	f7fb f968 	bl	8004a58 <stwClear>
	stwT.clear();
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <resetStopwatch+0x14>)
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4798      	blx	r3
}
 800978e:	bf00      	nop
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000070 	.word	0x20000070

08009798 <saveStopwatch>:
void saveStopwatch(){
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
	stwSave();
 800979c:	f7fb f970 	bl	8004a80 <stwSave>
}
 80097a0:	bf00      	nop
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 80097a8:	4b10      	ldr	r3, [pc, #64]	; (80097ec <setDefaultClbcks+0x48>)
 80097aa:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <setDefaultClbcks+0x4c>)
 80097ac:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <setDefaultClbcks+0x50>)
 80097b0:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <setDefaultClbcks+0x54>)
 80097b2:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80097b4:	4b11      	ldr	r3, [pc, #68]	; (80097fc <setDefaultClbcks+0x58>)
 80097b6:	4a12      	ldr	r2, [pc, #72]	; (8009800 <setDefaultClbcks+0x5c>)
 80097b8:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 80097ba:	4b12      	ldr	r3, [pc, #72]	; (8009804 <setDefaultClbcks+0x60>)
 80097bc:	78db      	ldrb	r3, [r3, #3]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d006      	beq.n	80097d6 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 80097c8:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <setDefaultClbcks+0x64>)
 80097ca:	4a10      	ldr	r2, [pc, #64]	; (800980c <setDefaultClbcks+0x68>)
 80097cc:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <setDefaultClbcks+0x6c>)
 80097d0:	4a10      	ldr	r2, [pc, #64]	; (8009814 <setDefaultClbcks+0x70>)
 80097d2:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 80097d4:	e005      	b.n	80097e2 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <setDefaultClbcks+0x64>)
 80097d8:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <setDefaultClbcks+0x74>)
 80097da:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 80097dc:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <setDefaultClbcks+0x6c>)
 80097de:	4a0f      	ldr	r2, [pc, #60]	; (800981c <setDefaultClbcks+0x78>)
 80097e0:	611a      	str	r2, [r3, #16]
}
 80097e2:	bf00      	nop
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	200026c8 	.word	0x200026c8
 80097f0:	08002bf9 	.word	0x08002bf9
 80097f4:	20002560 	.word	0x20002560
 80097f8:	08002bd9 	.word	0x08002bd9
 80097fc:	200025f0 	.word	0x200025f0
 8009800:	08002be9 	.word	0x08002be9
 8009804:	20005b74 	.word	0x20005b74
 8009808:	200025a8 	.word	0x200025a8
 800980c:	08009759 	.word	0x08009759
 8009810:	20002680 	.word	0x20002680
 8009814:	08009799 	.word	0x08009799
 8009818:	08009731 	.word	0x08009731
 800981c:	08009781 	.word	0x08009781

08009820 <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	4a22      	ldr	r2, [pc, #136]	; (80098b8 <convertTicks+0x98>)
 800982e:	fba2 2303 	umull	r2, r3, r2, r3
 8009832:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8009834:	b2db      	uxtb	r3, r3
 8009836:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	0993      	lsrs	r3, r2, #6
 800983c:	491e      	ldr	r1, [pc, #120]	; (80098b8 <convertTicks+0x98>)
 800983e:	fba1 1303 	umull	r1, r3, r1, r3
 8009842:	089b      	lsrs	r3, r3, #2
 8009844:	491d      	ldr	r1, [pc, #116]	; (80098bc <convertTicks+0x9c>)
 8009846:	fb01 f303 	mul.w	r3, r1, r3
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <convertTicks+0xa0>)
 800984e:	fba2 2303 	umull	r2, r3, r2, r3
 8009852:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8009854:	b2db      	uxtb	r3, r3
 8009856:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <convertTicks+0xa0>)
 800985c:	fba3 1302 	umull	r1, r3, r3, r2
 8009860:	09db      	lsrs	r3, r3, #7
 8009862:	f241 7170 	movw	r1, #6000	; 0x1770
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	4a15      	ldr	r2, [pc, #84]	; (80098c4 <convertTicks+0xa4>)
 800986e:	fba2 2303 	umull	r2, r3, r2, r3
 8009872:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8009874:	b2db      	uxtb	r3, r3
 8009876:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <convertTicks+0xa4>)
 800987c:	fba3 1302 	umull	r1, r3, r3, r2
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	2164      	movs	r1, #100	; 0x64
 8009884:	fb01 f303 	mul.w	r3, r1, r3
 8009888:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 800988a:	b2db      	uxtb	r3, r3
 800988c:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	2300      	movs	r3, #0
 8009894:	7b3a      	ldrb	r2, [r7, #12]
 8009896:	f362 0307 	bfi	r3, r2, #0, #8
 800989a:	7b7a      	ldrb	r2, [r7, #13]
 800989c:	f362 230f 	bfi	r3, r2, #8, #8
 80098a0:	7bba      	ldrb	r2, [r7, #14]
 80098a2:	f362 4317 	bfi	r3, r2, #16, #8
 80098a6:	7bfa      	ldrb	r2, [r7, #15]
 80098a8:	f362 631f 	bfi	r3, r2, #24, #8
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	002e9a77 	.word	0x002e9a77
 80098bc:	00057e40 	.word	0x00057e40
 80098c0:	057619f1 	.word	0x057619f1
 80098c4:	51eb851f 	.word	0x51eb851f

080098c8 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 80098d2:	793b      	ldrb	r3, [r7, #4]
 80098d4:	4619      	mov	r1, r3
 80098d6:	797b      	ldrb	r3, [r7, #5]
 80098d8:	4618      	mov	r0, r3
 80098da:	79bb      	ldrb	r3, [r7, #6]
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	9201      	str	r2, [sp, #4]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4603      	mov	r3, r0
 80098e4:	460a      	mov	r2, r1
 80098e6:	4904      	ldr	r1, [pc, #16]	; (80098f8 <stwString+0x30>)
 80098e8:	6838      	ldr	r0, [r7, #0]
 80098ea:	f00c f9a9 	bl	8015c40 <siprintf>
	return str;
 80098ee:	683b      	ldr	r3, [r7, #0]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	0801dabc 	.word	0x0801dabc

080098fc <updateStopwatch>:
void updateStopwatch(void){
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 8009900:	4b22      	ldr	r3, [pc, #136]	; (800998c <updateStopwatch+0x90>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009908:	4a21      	ldr	r2, [pc, #132]	; (8009990 <updateStopwatch+0x94>)
 800990a:	fb82 1203 	smull	r1, r2, r2, r3
 800990e:	441a      	add	r2, r3
 8009910:	12d2      	asrs	r2, r2, #11
 8009912:	17db      	asrs	r3, r3, #31
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	4b1e      	ldr	r3, [pc, #120]	; (8009994 <updateStopwatch+0x98>)
 800991a:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 800991c:	4b1b      	ldr	r3, [pc, #108]	; (800998c <updateStopwatch+0x90>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009924:	461a      	mov	r2, r3
 8009926:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <updateStopwatch+0x94>)
 8009928:	fb83 1302 	smull	r1, r3, r3, r2
 800992c:	4413      	add	r3, r2
 800992e:	12d9      	asrs	r1, r3, #11
 8009930:	17d3      	asrs	r3, r2, #31
 8009932:	1acb      	subs	r3, r1, r3
 8009934:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	4a16      	ldr	r2, [pc, #88]	; (8009998 <updateStopwatch+0x9c>)
 8009940:	fb82 1203 	smull	r1, r2, r2, r3
 8009944:	441a      	add	r2, r3
 8009946:	1152      	asrs	r2, r2, #5
 8009948:	17db      	asrs	r3, r3, #31
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	b2da      	uxtb	r2, r3
 800994e:	4b11      	ldr	r3, [pc, #68]	; (8009994 <updateStopwatch+0x98>)
 8009950:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 8009952:	4b0e      	ldr	r3, [pc, #56]	; (800998c <updateStopwatch+0x90>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800995a:	461a      	mov	r2, r3
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <updateStopwatch+0x9c>)
 800995e:	fb83 1302 	smull	r1, r3, r3, r2
 8009962:	4413      	add	r3, r2
 8009964:	1159      	asrs	r1, r3, #5
 8009966:	17d3      	asrs	r3, r2, #31
 8009968:	1ac9      	subs	r1, r1, r3
 800996a:	460b      	mov	r3, r1
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	1a5b      	subs	r3, r3, r1
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	1ad1      	subs	r1, r2, r3
 8009974:	b2ca      	uxtb	r2, r1
 8009976:	4b07      	ldr	r3, [pc, #28]	; (8009994 <updateStopwatch+0x98>)
 8009978:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 800997a:	f7fb f891 	bl	8004aa0 <getStw>
 800997e:	4603      	mov	r3, r0
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b04      	ldr	r3, [pc, #16]	; (8009994 <updateStopwatch+0x98>)
 8009984:	70da      	strb	r2, [r3, #3]
}
 8009986:	bf00      	nop
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20005b74 	.word	0x20005b74
 8009990:	91a2b3c5 	.word	0x91a2b3c5
 8009994:	20005df4 	.word	0x20005df4
 8009998:	88888889 	.word	0x88888889

0800999c <stwSetup>:

void stwSetup(void){
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80099a0:	f7ff ff00 	bl	80097a4 <setDefaultClbcks>
}
 80099a4:	bf00      	nop
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b091      	sub	sp, #68	; 0x44
 80099ac:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80099ae:	2300      	movs	r3, #0
 80099b0:	623b      	str	r3, [r7, #32]
 80099b2:	2300      	movs	r3, #0
 80099b4:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 80099b6:	4b83      	ldr	r3, [pc, #524]	; (8009bc4 <stwMain+0x21c>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	4b81      	ldr	r3, [pc, #516]	; (8009bc4 <stwMain+0x21c>)
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	f107 0020 	add.w	r0, r7, #32
 80099c4:	4980      	ldr	r1, [pc, #512]	; (8009bc8 <stwMain+0x220>)
 80099c6:	f00c f93b 	bl	8015c40 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80099ca:	2314      	movs	r3, #20
 80099cc:	b29c      	uxth	r4, r3
 80099ce:	f107 0320 	add.w	r3, r7, #32
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f6 fc16 	bl	8000204 <strlen>
 80099d8:	4603      	mov	r3, r0
 80099da:	b29b      	uxth	r3, r3
 80099dc:	fb14 f303 	smulbb	r3, r4, r3
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80099e6:	b298      	uxth	r0, r3
 80099e8:	f107 0220 	add.w	r2, r7, #32
 80099ec:	4b77      	ldr	r3, [pc, #476]	; (8009bcc <stwMain+0x224>)
 80099ee:	210a      	movs	r1, #10
 80099f0:	f7f9 fc54 	bl	800329c <lcdPutStr>

	char tempStr2[30] = {0};
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	1d3b      	adds	r3, r7, #4
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	605a      	str	r2, [r3, #4]
 8009a00:	609a      	str	r2, [r3, #8]
 8009a02:	60da      	str	r2, [r3, #12]
 8009a04:	611a      	str	r2, [r3, #16]
 8009a06:	615a      	str	r2, [r3, #20]
 8009a08:	831a      	strh	r2, [r3, #24]
	sprintf(&guiPos, "Stopwatch");
 8009a0a:	f107 0320 	add.w	r3, r7, #32
 8009a0e:	4970      	ldr	r1, [pc, #448]	; (8009bd0 <stwMain+0x228>)
 8009a10:	4618      	mov	r0, r3
 8009a12:	f00c f915 	bl	8015c40 <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 8009a16:	f107 0220 	add.w	r2, r7, #32
 8009a1a:	4b6c      	ldr	r3, [pc, #432]	; (8009bcc <stwMain+0x224>)
 8009a1c:	210a      	movs	r1, #10
 8009a1e:	200a      	movs	r0, #10
 8009a20:	f7f9 fc3c 	bl	800329c <lcdPutStr>

	updateStopwatch();
 8009a24:	f7ff ff6a 	bl	80098fc <updateStopwatch>

	if(stw_val.hours != 0){
 8009a28:	4b6a      	ldr	r3, [pc, #424]	; (8009bd4 <stwMain+0x22c>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <stwMain+0x98>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8009a30:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <stwMain+0x22c>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	463b      	mov	r3, r7
 8009a38:	4967      	ldr	r1, [pc, #412]	; (8009bd8 <stwMain+0x230>)
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00c f900 	bl	8015c40 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8009a40:	463a      	mov	r2, r7
 8009a42:	4b62      	ldr	r3, [pc, #392]	; (8009bcc <stwMain+0x224>)
 8009a44:	215f      	movs	r1, #95	; 0x5f
 8009a46:	2014      	movs	r0, #20
 8009a48:	f7f9 fc28 	bl	800329c <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8009a4c:	4b61      	ldr	r3, [pc, #388]	; (8009bd4 <stwMain+0x22c>)
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	461a      	mov	r2, r3
 8009a52:	4b60      	ldr	r3, [pc, #384]	; (8009bd4 <stwMain+0x22c>)
 8009a54:	789b      	ldrb	r3, [r3, #2]
 8009a56:	4619      	mov	r1, r3
 8009a58:	4b5e      	ldr	r3, [pc, #376]	; (8009bd4 <stwMain+0x22c>)
 8009a5a:	78db      	ldrb	r3, [r3, #3]
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	460b      	mov	r3, r1
 8009a62:	495e      	ldr	r1, [pc, #376]	; (8009bdc <stwMain+0x234>)
 8009a64:	f00c f8ec 	bl	8015c40 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8009a68:	2322      	movs	r3, #34	; 0x22
 8009a6a:	b29c      	uxth	r4, r3
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f6 fbc8 	bl	8000204 <strlen>
 8009a74:	4603      	mov	r3, r0
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	fb14 f303 	smulbb	r3, r4, r3
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009a82:	b298      	uxth	r0, r3
 8009a84:	463a      	mov	r2, r7
 8009a86:	4b56      	ldr	r3, [pc, #344]	; (8009be0 <stwMain+0x238>)
 8009a88:	214c      	movs	r1, #76	; 0x4c
 8009a8a:	f7f9 fc07 	bl	800329c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a94:	e08b      	b.n	8009bae <stwMain+0x206>
		if(stwT.stwArray[i] != 0){
 8009a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a9a:	4a52      	ldr	r2, [pc, #328]	; (8009be4 <stwMain+0x23c>)
 8009a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d07f      	beq.n	8009ba4 <stwMain+0x1fc>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8009aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	463b      	mov	r3, r7
 8009aac:	494e      	ldr	r1, [pc, #312]	; (8009be8 <stwMain+0x240>)
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f00c f8c6 	bl	8015c40 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8009ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	3b7e      	subs	r3, #126	; 0x7e
 8009abe:	b2d9      	uxtb	r1, r3
 8009ac0:	463a      	mov	r2, r7
 8009ac2:	4b4a      	ldr	r3, [pc, #296]	; (8009bec <stwMain+0x244>)
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	f7f9 fbe9 	bl	800329c <lcdPutStr>
			if(i>0){
 8009aca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d022      	beq.n	8009b18 <stwMain+0x170>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8009ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	3b7e      	subs	r3, #126	; 0x7e
 8009adc:	b2dc      	uxtb	r4, r3
 8009ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ae2:	4a40      	ldr	r2, [pc, #256]	; (8009be4 <stwMain+0x23c>)
 8009ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009ae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aec:	3b01      	subs	r3, #1
 8009aee:	493d      	ldr	r1, [pc, #244]	; (8009be4 <stwMain+0x23c>)
 8009af0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fe92 	bl	8009820 <convertTicks>
 8009afc:	4603      	mov	r3, r0
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b00:	463b      	mov	r3, r7
 8009b02:	4619      	mov	r1, r3
 8009b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b06:	f7ff fedf 	bl	80098c8 <stwString>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	4b37      	ldr	r3, [pc, #220]	; (8009bec <stwMain+0x244>)
 8009b0e:	4621      	mov	r1, r4
 8009b10:	2037      	movs	r0, #55	; 0x37
 8009b12:	f7f9 fbc3 	bl	800329c <lcdPutStr>
 8009b16:	e01a      	b.n	8009b4e <stwMain+0x1a6>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8009b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b1c:	011b      	lsls	r3, r3, #4
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	3b7e      	subs	r3, #126	; 0x7e
 8009b22:	b2dc      	uxtb	r4, r3
 8009b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b28:	4a2e      	ldr	r2, [pc, #184]	; (8009be4 <stwMain+0x23c>)
 8009b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fe76 	bl	8009820 <convertTicks>
 8009b34:	4603      	mov	r3, r0
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b38:	463b      	mov	r3, r7
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b3e:	f7ff fec3 	bl	80098c8 <stwString>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b29      	ldr	r3, [pc, #164]	; (8009bec <stwMain+0x244>)
 8009b46:	4621      	mov	r1, r4
 8009b48:	2037      	movs	r0, #55	; 0x37
 8009b4a:	f7f9 fba7 	bl	800329c <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4927      	ldr	r1, [pc, #156]	; (8009bf0 <stwMain+0x248>)
 8009b52:	4618      	mov	r0, r3
 8009b54:	f00c f874 	bl	8015c40 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8009b58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	3b7e      	subs	r3, #126	; 0x7e
 8009b62:	b2d9      	uxtb	r1, r3
 8009b64:	463a      	mov	r2, r7
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <stwMain+0x244>)
 8009b68:	20a5      	movs	r0, #165	; 0xa5
 8009b6a:	f7f9 fb97 	bl	800329c <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8009b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	3b7e      	subs	r3, #126	; 0x7e
 8009b78:	b2dc      	uxtb	r4, r3
 8009b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b7e:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <stwMain+0x23c>)
 8009b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff fe4b 	bl	8009820 <convertTicks>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b8e:	463b      	mov	r3, r7
 8009b90:	4619      	mov	r1, r3
 8009b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b94:	f7ff fe98 	bl	80098c8 <stwString>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	4b14      	ldr	r3, [pc, #80]	; (8009bec <stwMain+0x244>)
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	20e1      	movs	r0, #225	; 0xe1
 8009ba0:	f7f9 fb7c 	bl	800329c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8009ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba8:	3301      	adds	r3, #1
 8009baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bb2:	2b06      	cmp	r3, #6
 8009bb4:	f67f af6f 	bls.w	8009a96 <stwMain+0xee>
		}
	}
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	373c      	adds	r7, #60	; 0x3c
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd90      	pop	{r4, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200057c8 	.word	0x200057c8
 8009bc8:	0801dad0 	.word	0x0801dad0
 8009bcc:	08048990 	.word	0x08048990
 8009bd0:	0801dadc 	.word	0x0801dadc
 8009bd4:	20005df4 	.word	0x20005df4
 8009bd8:	0801dae8 	.word	0x0801dae8
 8009bdc:	0801daf0 	.word	0x0801daf0
 8009be0:	0804a7f8 	.word	0x0804a7f8
 8009be4:	20000070 	.word	0x20000070
 8009be8:	0801db00 	.word	0x0801db00
 8009bec:	08047f08 	.word	0x08047f08
 8009bf0:	0801db08 	.word	0x0801db08

08009bf4 <startPauseTimer>:
#include "fonts/fonts.h"

extern 	countdown_t countDown1;


void startPauseTimer(void){
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
	if(countDown1.isRunning){
 8009bf8:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <startPauseTimer+0x20>)
 8009bfa:	791b      	ldrb	r3, [r3, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <startPauseTimer+0x14>
		pauseTimer(&countDown1);
 8009c00:	4804      	ldr	r0, [pc, #16]	; (8009c14 <startPauseTimer+0x20>)
 8009c02:	f7f8 faff 	bl	8002204 <pauseTimer>
	} else {
		startTimer(&countDown1);
	}
}
 8009c06:	e002      	b.n	8009c0e <startPauseTimer+0x1a>
		startTimer(&countDown1);
 8009c08:	4802      	ldr	r0, [pc, #8]	; (8009c14 <startPauseTimer+0x20>)
 8009c0a:	f7f8 faee 	bl	80021ea <startTimer>
}
 8009c0e:	bf00      	nop
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000068 	.word	0x20000068

08009c18 <resetTim>:
void resetTim(void){
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
	resetTimer(&countDown1);
 8009c1c:	4802      	ldr	r0, [pc, #8]	; (8009c28 <resetTim+0x10>)
 8009c1e:	f7f8 fafe 	bl	800221e <resetTimer>
}
 8009c22:	bf00      	nop
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000068 	.word	0x20000068

08009c2c <setTim>:
void setTim(void){
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
	setTimer(&countDown1, 5*60);
 8009c30:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009c34:	4802      	ldr	r0, [pc, #8]	; (8009c40 <setTim+0x14>)
 8009c36:	f7f8 fac3 	bl	80021c0 <setTimer>
}
 8009c3a:	bf00      	nop
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000068 	.word	0x20000068

08009c44 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <setDefaultClbcks+0x2c>)
 8009c4a:	4a0a      	ldr	r2, [pc, #40]	; (8009c74 <setDefaultClbcks+0x30>)
 8009c4c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009c4e:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <setDefaultClbcks+0x34>)
 8009c50:	4a0a      	ldr	r2, [pc, #40]	; (8009c7c <setDefaultClbcks+0x38>)
 8009c52:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &startPauseTimer;
 8009c54:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <setDefaultClbcks+0x3c>)
 8009c56:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <setDefaultClbcks+0x40>)
 8009c58:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &setTim;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <setDefaultClbcks+0x44>)
 8009c5c:	4a0b      	ldr	r2, [pc, #44]	; (8009c8c <setDefaultClbcks+0x48>)
 8009c5e:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetTim;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <setDefaultClbcks+0x4c>)
 8009c62:	4a0c      	ldr	r2, [pc, #48]	; (8009c94 <setDefaultClbcks+0x50>)
 8009c64:	611a      	str	r2, [r3, #16]
}
 8009c66:	bf00      	nop
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	20002560 	.word	0x20002560
 8009c74:	08002bd9 	.word	0x08002bd9
 8009c78:	200025f0 	.word	0x200025f0
 8009c7c:	08002be9 	.word	0x08002be9
 8009c80:	200025a8 	.word	0x200025a8
 8009c84:	08009bf5 	.word	0x08009bf5
 8009c88:	20002638 	.word	0x20002638
 8009c8c:	08009c2d 	.word	0x08009c2d
 8009c90:	20002680 	.word	0x20002680
 8009c94:	08009c19 	.word	0x08009c19

08009c98 <timerSetup>:

void timerSetup(void){
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009c9c:	f7ff ffd2 	bl	8009c44 <setDefaultClbcks>
}
 8009ca0:	bf00      	nop
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <timerMain>:

void timerMain(void){
 8009ca4:	b5b0      	push	{r4, r5, r7, lr}
 8009ca6:	b094      	sub	sp, #80	; 0x50
 8009ca8:	af04      	add	r7, sp, #16
	char tempStr[51] = {0};
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	222f      	movs	r2, #47	; 0x2f
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f00a fe94 	bl	80149e4 <memset>
	sprintf(&tempStr, "Timer");
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	4986      	ldr	r1, [pc, #536]	; (8009edc <timerMain+0x238>)
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00b ffbc 	bl	8015c40 <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 8009cc8:	f107 0208 	add.w	r2, r7, #8
 8009ccc:	4b84      	ldr	r3, [pc, #528]	; (8009ee0 <timerMain+0x23c>)
 8009cce:	210a      	movs	r1, #10
 8009cd0:	200a      	movs	r0, #10
 8009cd2:	f7f9 fae3 	bl	800329c <lcdPutStr>

	char guiPos[6] = {0};
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	80bb      	strh	r3, [r7, #4]
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8009cde:	4b81      	ldr	r3, [pc, #516]	; (8009ee4 <timerMain+0x240>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4b7f      	ldr	r3, [pc, #508]	; (8009ee4 <timerMain+0x240>)
 8009ce6:	785b      	ldrb	r3, [r3, #1]
 8009ce8:	4638      	mov	r0, r7
 8009cea:	497f      	ldr	r1, [pc, #508]	; (8009ee8 <timerMain+0x244>)
 8009cec:	f00b ffa8 	bl	8015c40 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8009cf0:	2314      	movs	r3, #20
 8009cf2:	b29c      	uxth	r4, r3
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f6 fa84 	bl	8000204 <strlen>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	fb14 f303 	smulbb	r3, r4, r3
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8009d0a:	b298      	uxth	r0, r3
 8009d0c:	463a      	mov	r2, r7
 8009d0e:	4b74      	ldr	r3, [pc, #464]	; (8009ee0 <timerMain+0x23c>)
 8009d10:	210a      	movs	r1, #10
 8009d12:	f7f9 fac3 	bl	800329c <lcdPutStr>

	sprintf(&tempStr, "%02dh %02d'%02d\"", countDown1.remainingSec/3600, (countDown1.remainingSec%3600)/60, countDown1.remainingSec%60);
 8009d16:	4b75      	ldr	r3, [pc, #468]	; (8009eec <timerMain+0x248>)
 8009d18:	885b      	ldrh	r3, [r3, #2]
 8009d1a:	4a75      	ldr	r2, [pc, #468]	; (8009ef0 <timerMain+0x24c>)
 8009d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d20:	0adb      	lsrs	r3, r3, #11
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	461c      	mov	r4, r3
 8009d26:	4b71      	ldr	r3, [pc, #452]	; (8009eec <timerMain+0x248>)
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	4a71      	ldr	r2, [pc, #452]	; (8009ef0 <timerMain+0x24c>)
 8009d2c:	fba2 1203 	umull	r1, r2, r2, r3
 8009d30:	0ad2      	lsrs	r2, r2, #11
 8009d32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009d36:	fb01 f202 	mul.w	r2, r1, r2
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4a6d      	ldr	r2, [pc, #436]	; (8009ef4 <timerMain+0x250>)
 8009d40:	fba2 2303 	umull	r2, r3, r2, r3
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	461d      	mov	r5, r3
 8009d4a:	4b68      	ldr	r3, [pc, #416]	; (8009eec <timerMain+0x248>)
 8009d4c:	885a      	ldrh	r2, [r3, #2]
 8009d4e:	4b69      	ldr	r3, [pc, #420]	; (8009ef4 <timerMain+0x250>)
 8009d50:	fba3 1302 	umull	r1, r3, r3, r2
 8009d54:	0959      	lsrs	r1, r3, #5
 8009d56:	460b      	mov	r3, r1
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	1a5b      	subs	r3, r3, r1
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f107 0008 	add.w	r0, r7, #8
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	462b      	mov	r3, r5
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	4962      	ldr	r1, [pc, #392]	; (8009ef8 <timerMain+0x254>)
 8009d6e:	f00b ff67 	bl	8015c40 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr)), 76, tempStr, zekton45font);
 8009d72:	2322      	movs	r3, #34	; 0x22
 8009d74:	b29c      	uxth	r4, r3
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7f6 fa42 	bl	8000204 <strlen>
 8009d80:	4603      	mov	r3, r0
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	fb14 f303 	smulbb	r3, r4, r3
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009d8e:	b298      	uxth	r0, r3
 8009d90:	f107 0208 	add.w	r2, r7, #8
 8009d94:	4b59      	ldr	r3, [pc, #356]	; (8009efc <timerMain+0x258>)
 8009d96:	214c      	movs	r1, #76	; 0x4c
 8009d98:	f7f9 fa80 	bl	800329c <lcdPutStr>
	sprintf(&tempStr, "%02dh %02d'%02d\"", countDown1.setpoint/3600, (countDown1.setpoint%3600)/60, countDown1.setpoint%60);
 8009d9c:	4b53      	ldr	r3, [pc, #332]	; (8009eec <timerMain+0x248>)
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	4a53      	ldr	r2, [pc, #332]	; (8009ef0 <timerMain+0x24c>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	0adb      	lsrs	r3, r3, #11
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	461c      	mov	r4, r3
 8009dac:	4b4f      	ldr	r3, [pc, #316]	; (8009eec <timerMain+0x248>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	4a4f      	ldr	r2, [pc, #316]	; (8009ef0 <timerMain+0x24c>)
 8009db2:	fba2 1203 	umull	r1, r2, r2, r3
 8009db6:	0ad2      	lsrs	r2, r2, #11
 8009db8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009dbc:	fb01 f202 	mul.w	r2, r1, r2
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	4a4b      	ldr	r2, [pc, #300]	; (8009ef4 <timerMain+0x250>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	095b      	lsrs	r3, r3, #5
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	461d      	mov	r5, r3
 8009dd0:	4b46      	ldr	r3, [pc, #280]	; (8009eec <timerMain+0x248>)
 8009dd2:	881a      	ldrh	r2, [r3, #0]
 8009dd4:	4b47      	ldr	r3, [pc, #284]	; (8009ef4 <timerMain+0x250>)
 8009dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dda:	0959      	lsrs	r1, r3, #5
 8009ddc:	460b      	mov	r3, r1
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	1a5b      	subs	r3, r3, r1
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f107 0008 	add.w	r0, r7, #8
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462b      	mov	r3, r5
 8009df0:	4622      	mov	r2, r4
 8009df2:	4941      	ldr	r1, [pc, #260]	; (8009ef8 <timerMain+0x254>)
 8009df4:	f00b ff24 	bl	8015c40 <siprintf>
	lcdPutStr(20, 165, tempStr, font_12_zekton);
 8009df8:	f107 0208 	add.w	r2, r7, #8
 8009dfc:	4b40      	ldr	r3, [pc, #256]	; (8009f00 <timerMain+0x25c>)
 8009dfe:	21a5      	movs	r1, #165	; 0xa5
 8009e00:	2014      	movs	r0, #20
 8009e02:	f7f9 fa4b 	bl	800329c <lcdPutStr>
	if(countDown1.isRunning){
 8009e06:	4b39      	ldr	r3, [pc, #228]	; (8009eec <timerMain+0x248>)
 8009e08:	791b      	ldrb	r3, [r3, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d01b      	beq.n	8009e46 <timerMain+0x1a2>
		sprintf(&tempStr, "running");
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	493c      	ldr	r1, [pc, #240]	; (8009f04 <timerMain+0x260>)
 8009e14:	4618      	mov	r0, r3
 8009e16:	f00b ff13 	bl	8015c40 <siprintf>
		lcdPutStr(380-(*(font_12_zekton.font_Width)*strlen(tempStr)), 165, tempStr, font_12_zekton);
 8009e1a:	2309      	movs	r3, #9
 8009e1c:	b29c      	uxth	r4, r3
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f6 f9ee 	bl	8000204 <strlen>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	fb14 f303 	smulbb	r3, r4, r3
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009e36:	b298      	uxth	r0, r3
 8009e38:	f107 0208 	add.w	r2, r7, #8
 8009e3c:	4b30      	ldr	r3, [pc, #192]	; (8009f00 <timerMain+0x25c>)
 8009e3e:	21a5      	movs	r1, #165	; 0xa5
 8009e40:	f7f9 fa2c 	bl	800329c <lcdPutStr>
 8009e44:	e01a      	b.n	8009e7c <timerMain+0x1d8>
	} else {
		sprintf(&tempStr, "paused");
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	492f      	ldr	r1, [pc, #188]	; (8009f08 <timerMain+0x264>)
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f00b fef7 	bl	8015c40 <siprintf>
		lcdPutStr(380-(*(font_12_zekton.font_Width)*strlen(tempStr)), 165, tempStr, font_12_zekton);
 8009e52:	2309      	movs	r3, #9
 8009e54:	b29c      	uxth	r4, r3
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f6 f9d2 	bl	8000204 <strlen>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	fb14 f303 	smulbb	r3, r4, r3
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009e6e:	b298      	uxth	r0, r3
 8009e70:	f107 0208 	add.w	r2, r7, #8
 8009e74:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <timerMain+0x25c>)
 8009e76:	21a5      	movs	r1, #165	; 0xa5
 8009e78:	f7f9 fa10 	bl	800329c <lcdPutStr>
	}

	lcdRect2(20, 400-20, 140, 160, 1, 0, 1);
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	9302      	str	r3, [sp, #8]
 8009e80:	2300      	movs	r3, #0
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	2301      	movs	r3, #1
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	23a0      	movs	r3, #160	; 0xa0
 8009e8a:	228c      	movs	r2, #140	; 0x8c
 8009e8c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8009e90:	2014      	movs	r0, #20
 8009e92:	f7fa f846 	bl	8003f22 <lcdRect2>
	// 22 - 400-22
	uint16_t barx = 22+((countDown1.setpoint-countDown1.remainingSec)*(400-22-22))/countDown1.setpoint;
 8009e96:	4b15      	ldr	r3, [pc, #84]	; (8009eec <timerMain+0x248>)
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4b13      	ldr	r3, [pc, #76]	; (8009eec <timerMain+0x248>)
 8009e9e:	885b      	ldrh	r3, [r3, #2]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009ea6:	fb02 f303 	mul.w	r3, r2, r3
 8009eaa:	4a10      	ldr	r2, [pc, #64]	; (8009eec <timerMain+0x248>)
 8009eac:	8812      	ldrh	r2, [r2, #0]
 8009eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3316      	adds	r3, #22
 8009eb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	lcdRect2(barx, 400-22, 142, 158, 1, 6, 0);
 8009eb8:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	2306      	movs	r3, #6
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	239e      	movs	r3, #158	; 0x9e
 8009ec8:	228e      	movs	r2, #142	; 0x8e
 8009eca:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009ece:	f7fa f828 	bl	8003f22 <lcdRect2>
}
 8009ed2:	bf00      	nop
 8009ed4:	3740      	adds	r7, #64	; 0x40
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8009eda:	bf00      	nop
 8009edc:	0801dbc8 	.word	0x0801dbc8
 8009ee0:	080508c8 	.word	0x080508c8
 8009ee4:	200057c8 	.word	0x200057c8
 8009ee8:	0801dbd0 	.word	0x0801dbd0
 8009eec:	20000068 	.word	0x20000068
 8009ef0:	91a2b3c5 	.word	0x91a2b3c5
 8009ef4:	88888889 	.word	0x88888889
 8009ef8:	0801dbdc 	.word	0x0801dbdc
 8009efc:	08052730 	.word	0x08052730
 8009f00:	0804fe40 	.word	0x0804fe40
 8009f04:	0801dbf0 	.word	0x0801dbf0
 8009f08:	0801dbf8 	.word	0x0801dbf8

08009f0c <setDefaultClbcks>:
#include "contextMenu.h"

// fonts
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8009f10:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <setDefaultClbcks+0x20>)
 8009f12:	4a07      	ldr	r2, [pc, #28]	; (8009f30 <setDefaultClbcks+0x24>)
 8009f14:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8009f16:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <setDefaultClbcks+0x28>)
 8009f18:	4a07      	ldr	r2, [pc, #28]	; (8009f38 <setDefaultClbcks+0x2c>)
 8009f1a:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009f1c:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <setDefaultClbcks+0x30>)
 8009f1e:	4a08      	ldr	r2, [pc, #32]	; (8009f40 <setDefaultClbcks+0x34>)
 8009f20:	611a      	str	r2, [r3, #16]
}
 8009f22:	bf00      	nop
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20002680 	.word	0x20002680
 8009f30:	08006559 	.word	0x08006559
 8009f34:	20002560 	.word	0x20002560
 8009f38:	08002bd9 	.word	0x08002bd9
 8009f3c:	200025f0 	.word	0x200025f0
 8009f40:	08002be9 	.word	0x08002be9

08009f44 <setTimeAction>:

static void setTimeAction(void){
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8009f48:	4802      	ldr	r0, [pc, #8]	; (8009f54 <setTimeAction+0x10>)
 8009f4a:	f7f8 fe61 	bl	8002c10 <guiApplyView>
}
 8009f4e:	bf00      	nop
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200001f4 	.word	0x200001f4

08009f58 <setDateAction>:
static void setDateAction(void){
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8009f5c:	4802      	ldr	r0, [pc, #8]	; (8009f68 <setDateAction+0x10>)
 8009f5e:	f7f8 fe57 	bl	8002c10 <guiApplyView>
}
 8009f62:	bf00      	nop
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	200001c0 	.word	0x200001c0

08009f6c <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009f70:	f7ff ffcc 	bl	8009f0c <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8009f74:	4802      	ldr	r0, [pc, #8]	; (8009f80 <faceSetup+0x14>)
 8009f76:	f7fc fa69 	bl	800644c <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8009f7a:	bf00      	nop
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	08009f0d 	.word	0x08009f0d

08009f84 <faceMain>:

void faceMain(void){
 8009f84:	b590      	push	{r4, r7, lr}
 8009f86:	b0b1      	sub	sp, #196	; 0xc4
 8009f88:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	605a      	str	r2, [r3, #4]
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	611a      	str	r2, [r3, #16]
 8009fa0:	615a      	str	r2, [r3, #20]
 8009fa2:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8009fa4:	4b83      	ldr	r3, [pc, #524]	; (800a1b4 <faceMain+0x230>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7f6 faed 	bl	8000588 <__aeabi_f2d>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8009fb6:	4980      	ldr	r1, [pc, #512]	; (800a1b8 <faceMain+0x234>)
 8009fb8:	f00b fe42 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8009fbc:	2314      	movs	r3, #20
 8009fbe:	b29c      	uxth	r4, r3
 8009fc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f6 f91d 	bl	8000204 <strlen>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f1c3 030d 	rsb	r3, r3, #13
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	fb14 f303 	smulbb	r3, r4, r3
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	3323      	adds	r3, #35	; 0x23
 8009fda:	b298      	uxth	r0, r3
 8009fdc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009fe0:	4b76      	ldr	r3, [pc, #472]	; (800a1bc <faceMain+0x238>)
 8009fe2:	210e      	movs	r1, #14
 8009fe4:	f7f9 f95a 	bl	800329c <lcdPutStr>
	char baroStr[30] = {0};
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	60da      	str	r2, [r3, #12]
 8009ffc:	611a      	str	r2, [r3, #16]
 8009ffe:	615a      	str	r2, [r3, #20]
 800a000:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 800a002:	4b6c      	ldr	r3, [pc, #432]	; (800a1b4 <faceMain+0x230>)
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800a1c0 <faceMain+0x23c>
 800a012:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a016:	ee16 0a90 	vmov	r0, s13
 800a01a:	f7f6 fab5 	bl	8000588 <__aeabi_f2d>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800a026:	4967      	ldr	r1, [pc, #412]	; (800a1c4 <faceMain+0x240>)
 800a028:	f00b fe0a 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 800a02c:	2314      	movs	r3, #20
 800a02e:	b29c      	uxth	r4, r3
 800a030:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a034:	4618      	mov	r0, r3
 800a036:	f7f6 f8e5 	bl	8000204 <strlen>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f1c3 030d 	rsb	r3, r3, #13
 800a040:	b29b      	uxth	r3, r3
 800a042:	fb14 f303 	smulbb	r3, r4, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	3323      	adds	r3, #35	; 0x23
 800a04a:	b298      	uxth	r0, r3
 800a04c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800a050:	4b5a      	ldr	r3, [pc, #360]	; (800a1bc <faceMain+0x238>)
 800a052:	212a      	movs	r1, #42	; 0x2a
 800a054:	f7f9 f922 	bl	800329c <lcdPutStr>

	char fracStr[30] = {0};
 800a058:	2300      	movs	r3, #0
 800a05a:	663b      	str	r3, [r7, #96]	; 0x60
 800a05c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a060:	2200      	movs	r2, #0
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	609a      	str	r2, [r3, #8]
 800a068:	60da      	str	r2, [r3, #12]
 800a06a:	611a      	str	r2, [r3, #16]
 800a06c:	615a      	str	r2, [r3, #20]
 800a06e:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 800a070:	2300      	movs	r3, #0
 800a072:	643b      	str	r3, [r7, #64]	; 0x40
 800a074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	605a      	str	r2, [r3, #4]
 800a07e:	609a      	str	r2, [r3, #8]
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	611a      	str	r2, [r3, #16]
 800a084:	615a      	str	r2, [r3, #20]
 800a086:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 800a088:	2300      	movs	r3, #0
 800a08a:	623b      	str	r3, [r7, #32]
 800a08c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	609a      	str	r2, [r3, #8]
 800a098:	60da      	str	r2, [r3, #12]
 800a09a:	611a      	str	r2, [r3, #16]
 800a09c:	615a      	str	r2, [r3, #20]
 800a09e:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 800a0a0:	4b49      	ldr	r3, [pc, #292]	; (800a1c8 <faceMain+0x244>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0aa:	4948      	ldr	r1, [pc, #288]	; (800a1cc <faceMain+0x248>)
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f00b fdc7 	bl	8015c40 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800a0b2:	4b45      	ldr	r3, [pc, #276]	; (800a1c8 <faceMain+0x244>)
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f107 0320 	add.w	r3, r7, #32
 800a0bc:	4943      	ldr	r1, [pc, #268]	; (800a1cc <faceMain+0x248>)
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f00b fdbe 	bl	8015c40 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 800a0c4:	4b40      	ldr	r3, [pc, #256]	; (800a1c8 <faceMain+0x244>)
 800a0c6:	789b      	ldrb	r3, [r3, #2]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a0ce:	493f      	ldr	r1, [pc, #252]	; (800a1cc <faceMain+0x248>)
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f00b fdb5 	bl	8015c40 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800a0d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a0da:	4b3d      	ldr	r3, [pc, #244]	; (800a1d0 <faceMain+0x24c>)
 800a0dc:	214c      	movs	r1, #76	; 0x4c
 800a0de:	2014      	movs	r0, #20
 800a0e0:	f7f9 f8dc 	bl	800329c <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 800a0e4:	f107 0220 	add.w	r2, r7, #32
 800a0e8:	4b39      	ldr	r3, [pc, #228]	; (800a1d0 <faceMain+0x24c>)
 800a0ea:	214c      	movs	r1, #76	; 0x4c
 800a0ec:	20aa      	movs	r0, #170	; 0xaa
 800a0ee:	f7f9 f8d5 	bl	800329c <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 800a0f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a0f6:	4b37      	ldr	r3, [pc, #220]	; (800a1d4 <faceMain+0x250>)
 800a0f8:	214c      	movs	r1, #76	; 0x4c
 800a0fa:	f240 103b 	movw	r0, #315	; 0x13b
 800a0fe:	f7f9 f8cd 	bl	800329c <lcdPutStr>

	char buffString[30] = {0};
 800a102:	2300      	movs	r3, #0
 800a104:	603b      	str	r3, [r7, #0]
 800a106:	1d3b      	adds	r3, r7, #4
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	605a      	str	r2, [r3, #4]
 800a10e:	609a      	str	r2, [r3, #8]
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	611a      	str	r2, [r3, #16]
 800a114:	615a      	str	r2, [r3, #20]
 800a116:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800a118:	463b      	mov	r3, r7
 800a11a:	492f      	ldr	r1, [pc, #188]	; (800a1d8 <faceMain+0x254>)
 800a11c:	4618      	mov	r0, r3
 800a11e:	f00b fd8f 	bl	8015c40 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <faceMain+0x258>)
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	461a      	mov	r2, r3
 800a128:	4b2d      	ldr	r3, [pc, #180]	; (800a1e0 <faceMain+0x25c>)
 800a12a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a12e:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <faceMain+0x258>)
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a136:	4638      	mov	r0, r7
 800a138:	492a      	ldr	r1, [pc, #168]	; (800a1e4 <faceMain+0x260>)
 800a13a:	f00b fd81 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800a13e:	2314      	movs	r3, #20
 800a140:	b29c      	uxth	r4, r3
 800a142:	463b      	mov	r3, r7
 800a144:	4618      	mov	r0, r3
 800a146:	f7f6 f85d 	bl	8000204 <strlen>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f1c3 030d 	rsb	r3, r3, #13
 800a150:	b29b      	uxth	r3, r3
 800a152:	fb14 f303 	smulbb	r3, r4, r3
 800a156:	b29b      	uxth	r3, r3
 800a158:	3323      	adds	r3, #35	; 0x23
 800a15a:	b298      	uxth	r0, r3
 800a15c:	463a      	mov	r2, r7
 800a15e:	4b17      	ldr	r3, [pc, #92]	; (800a1bc <faceMain+0x238>)
 800a160:	21ae      	movs	r1, #174	; 0xae
 800a162:	f7f9 f89b 	bl	800329c <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 800a166:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <faceMain+0x258>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <faceMain+0x264>)
 800a16e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a172:	4b1a      	ldr	r3, [pc, #104]	; (800a1dc <faceMain+0x258>)
 800a174:	789b      	ldrb	r3, [r3, #2]
 800a176:	4638      	mov	r0, r7
 800a178:	491a      	ldr	r1, [pc, #104]	; (800a1e4 <faceMain+0x260>)
 800a17a:	f00b fd61 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800a17e:	2314      	movs	r3, #20
 800a180:	b29c      	uxth	r4, r3
 800a182:	463b      	mov	r3, r7
 800a184:	4618      	mov	r0, r3
 800a186:	f7f6 f83d 	bl	8000204 <strlen>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f1c3 030d 	rsb	r3, r3, #13
 800a190:	b29b      	uxth	r3, r3
 800a192:	fb14 f303 	smulbb	r3, r4, r3
 800a196:	b29b      	uxth	r3, r3
 800a198:	3323      	adds	r3, #35	; 0x23
 800a19a:	b298      	uxth	r0, r3
 800a19c:	463a      	mov	r2, r7
 800a19e:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <faceMain+0x238>)
 800a1a0:	21ca      	movs	r1, #202	; 0xca
 800a1a2:	f7f9 f87b 	bl	800329c <lcdPutStr>

	enableCntxMenu();
 800a1a6:	f7fc f9f3 	bl	8006590 <enableCntxMenu>
}
 800a1aa:	bf00      	nop
 800a1ac:	37c4      	adds	r7, #196	; 0xc4
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd90      	pop	{r4, r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20002550 	.word	0x20002550
 800a1b8:	0801dcb8 	.word	0x0801dcb8
 800a1bc:	08057d78 	.word	0x08057d78
 800a1c0:	42c80000 	.word	0x42c80000
 800a1c4:	0801dcc0 	.word	0x0801dcc0
 800a1c8:	200057c8 	.word	0x200057c8
 800a1cc:	0801dccc 	.word	0x0801dccc
 800a1d0:	0805f228 	.word	0x0805f228
 800a1d4:	08059be0 	.word	0x08059be0
 800a1d8:	0801dcd4 	.word	0x0801dcd4
 800a1dc:	200057dc 	.word	0x200057dc
 800a1e0:	20000110 	.word	0x20000110
 800a1e4:	0801dce4 	.word	0x0801dce4
 800a1e8:	200000f0 	.word	0x200000f0

0800a1ec <setDefaultClbcks>:

#include "worldtimeModule.h"
#include "fonts/fonts.h"
#include "icons/icons_small.h"

static void setDefaultClbcks(void){
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <setDefaultClbcks+0x1c>)
 800a1f2:	4a06      	ldr	r2, [pc, #24]	; (800a20c <setDefaultClbcks+0x20>)
 800a1f4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800a1f6:	4b06      	ldr	r3, [pc, #24]	; (800a210 <setDefaultClbcks+0x24>)
 800a1f8:	4a06      	ldr	r2, [pc, #24]	; (800a214 <setDefaultClbcks+0x28>)
 800a1fa:	611a      	str	r2, [r3, #16]
}
 800a1fc:	bf00      	nop
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20002560 	.word	0x20002560
 800a20c:	08002bd9 	.word	0x08002bd9
 800a210:	200025f0 	.word	0x200025f0
 800a214:	08002be9 	.word	0x08002be9

0800a218 <worldtimeSetup>:

void worldtimeSetup(void){
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a21c:	f7ff ffe6 	bl	800a1ec <setDefaultClbcks>
}
 800a220:	bf00      	nop
 800a222:	bd80      	pop	{r7, pc}

0800a224 <worldtimeMain>:

void worldtimeMain(void){
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b091      	sub	sp, #68	; 0x44
 800a228:	af00      	add	r7, sp, #0
	char tempStr[51] = {0};
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	f107 0310 	add.w	r3, r7, #16
 800a232:	222f      	movs	r2, #47	; 0x2f
 800a234:	2100      	movs	r1, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f00a fbd4 	bl	80149e4 <memset>
	sprintf(&tempStr, "World time");
 800a23c:	f107 030c 	add.w	r3, r7, #12
 800a240:	492f      	ldr	r1, [pc, #188]	; (800a300 <worldtimeMain+0xdc>)
 800a242:	4618      	mov	r0, r3
 800a244:	f00b fcfc 	bl	8015c40 <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 800a248:	f107 020c 	add.w	r2, r7, #12
 800a24c:	4b2d      	ldr	r3, [pc, #180]	; (800a304 <worldtimeMain+0xe0>)
 800a24e:	210a      	movs	r1, #10
 800a250:	200a      	movs	r0, #10
 800a252:	f7f9 f823 	bl	800329c <lcdPutStr>
	lcdPutIcon(10, 40, wrldMap);
 800a256:	4a2c      	ldr	r2, [pc, #176]	; (800a308 <worldtimeMain+0xe4>)
 800a258:	2128      	movs	r1, #40	; 0x28
 800a25a:	200a      	movs	r0, #10
 800a25c:	f7f8 ff56 	bl	800310c <lcdPutIcon>

	lcdVLine(100, 40, 40+99, 2);
 800a260:	2302      	movs	r3, #2
 800a262:	228b      	movs	r2, #139	; 0x8b
 800a264:	2128      	movs	r1, #40	; 0x28
 800a266:	2064      	movs	r0, #100	; 0x64
 800a268:	f7f9 f898 	bl	800339c <lcdVLine>
	lcdHLine(10, 210, 60, 2);
 800a26c:	2302      	movs	r3, #2
 800a26e:	223c      	movs	r2, #60	; 0x3c
 800a270:	21d2      	movs	r1, #210	; 0xd2
 800a272:	200a      	movs	r0, #10
 800a274:	f7f9 fcda 	bl	8003c2c <lcdHLine>

	char guiPos[6] = {0};
 800a278:	2300      	movs	r3, #0
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	2300      	movs	r3, #0
 800a27e:	813b      	strh	r3, [r7, #8]
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 800a280:	4b22      	ldr	r3, [pc, #136]	; (800a30c <worldtimeMain+0xe8>)
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	461a      	mov	r2, r3
 800a286:	4b21      	ldr	r3, [pc, #132]	; (800a30c <worldtimeMain+0xe8>)
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	1d38      	adds	r0, r7, #4
 800a28c:	4920      	ldr	r1, [pc, #128]	; (800a310 <worldtimeMain+0xec>)
 800a28e:	f00b fcd7 	bl	8015c40 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 800a292:	2314      	movs	r3, #20
 800a294:	b29c      	uxth	r4, r3
 800a296:	1d3b      	adds	r3, r7, #4
 800a298:	4618      	mov	r0, r3
 800a29a:	f7f5 ffb3 	bl	8000204 <strlen>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	fb14 f303 	smulbb	r3, r4, r3
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800a2ac:	b298      	uxth	r0, r3
 800a2ae:	1d3a      	adds	r2, r7, #4
 800a2b0:	4b14      	ldr	r3, [pc, #80]	; (800a304 <worldtimeMain+0xe0>)
 800a2b2:	210a      	movs	r1, #10
 800a2b4:	f7f8 fff2 	bl	800329c <lcdPutStr>

	lcdPutStr(10, 150, "UTC+00", zekton45font);
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <worldtimeMain+0xf0>)
 800a2ba:	4a17      	ldr	r2, [pc, #92]	; (800a318 <worldtimeMain+0xf4>)
 800a2bc:	2196      	movs	r1, #150	; 0x96
 800a2be:	200a      	movs	r0, #10
 800a2c0:	f7f8 ffec 	bl	800329c <lcdPutStr>
	lcdPutStr(220, 90, "UTC", zekton45font);
 800a2c4:	4b13      	ldr	r3, [pc, #76]	; (800a314 <worldtimeMain+0xf0>)
 800a2c6:	4a15      	ldr	r2, [pc, #84]	; (800a31c <worldtimeMain+0xf8>)
 800a2c8:	215a      	movs	r1, #90	; 0x5a
 800a2ca:	20dc      	movs	r0, #220	; 0xdc
 800a2cc:	f7f8 ffe6 	bl	800329c <lcdPutStr>

	sprintf(&tempStr, "%02d:%02d", RtcTime.Hours-GLOBAL_timezone, RtcTime.Minutes);
 800a2d0:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <worldtimeMain+0xe8>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b12      	ldr	r3, [pc, #72]	; (800a320 <worldtimeMain+0xfc>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	4b0b      	ldr	r3, [pc, #44]	; (800a30c <worldtimeMain+0xe8>)
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	f107 000c 	add.w	r0, r7, #12
 800a2e4:	490a      	ldr	r1, [pc, #40]	; (800a310 <worldtimeMain+0xec>)
 800a2e6:	f00b fcab 	bl	8015c40 <siprintf>
	lcdPutStr(220, 40, tempStr, zekton45font);
 800a2ea:	f107 020c 	add.w	r2, r7, #12
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <worldtimeMain+0xf0>)
 800a2f0:	2128      	movs	r1, #40	; 0x28
 800a2f2:	20dc      	movs	r0, #220	; 0xdc
 800a2f4:	f7f8 ffd2 	bl	800329c <lcdPutStr>
}
 800a2f8:	bf00      	nop
 800a2fa:	3744      	adds	r7, #68	; 0x44
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd90      	pop	{r4, r7, pc}
 800a300:	0801dda4 	.word	0x0801dda4
 800a304:	080611b0 	.word	0x080611b0
 800a308:	08068660 	.word	0x08068660
 800a30c:	200057c8 	.word	0x200057c8
 800a310:	0801ddb0 	.word	0x0801ddb0
 800a314:	08063018 	.word	0x08063018
 800a318:	0801ddbc 	.word	0x0801ddbc
 800a31c:	0801ddc4 	.word	0x0801ddc4
 800a320:	20000060 	.word	0x20000060

0800a324 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <setDefaultClbcks+0x34>)
 800a32a:	4a0c      	ldr	r2, [pc, #48]	; (800a35c <setDefaultClbcks+0x38>)
 800a32c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <setDefaultClbcks+0x3c>)
 800a330:	4a0c      	ldr	r2, [pc, #48]	; (800a364 <setDefaultClbcks+0x40>)
 800a332:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <setDefaultClbcks+0x44>)
 800a336:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <setDefaultClbcks+0x48>)
 800a338:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800a33a:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <setDefaultClbcks+0x4c>)
 800a33c:	4a0d      	ldr	r2, [pc, #52]	; (800a374 <setDefaultClbcks+0x50>)
 800a33e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800a340:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <setDefaultClbcks+0x54>)
 800a342:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <setDefaultClbcks+0x58>)
 800a344:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800a346:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <setDefaultClbcks+0x5c>)
 800a348:	4a0e      	ldr	r2, [pc, #56]	; (800a384 <setDefaultClbcks+0x60>)
 800a34a:	611a      	str	r2, [r3, #16]
}
 800a34c:	bf00      	nop
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	200026c8 	.word	0x200026c8
 800a35c:	0800a695 	.word	0x0800a695
 800a360:	20002680 	.word	0x20002680
 800a364:	0800a555 	.word	0x0800a555
 800a368:	20002638 	.word	0x20002638
 800a36c:	0800a6a1 	.word	0x0800a6a1
 800a370:	20002560 	.word	0x20002560
 800a374:	0800a60d 	.word	0x0800a60d
 800a378:	200025a8 	.word	0x200025a8
 800a37c:	0800a525 	.word	0x0800a525
 800a380:	200025f0 	.word	0x200025f0
 800a384:	0800a585 	.word	0x0800a585

0800a388 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a38c:	f7ff ffca 	bl	800a324 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 800a390:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <dateInputSetup+0x24>)
 800a392:	789a      	ldrb	r2, [r3, #2]
 800a394:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <dateInputSetup+0x28>)
 800a396:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 800a398:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <dateInputSetup+0x24>)
 800a39a:	785a      	ldrb	r2, [r3, #1]
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <dateInputSetup+0x28>)
 800a39e:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <dateInputSetup+0x24>)
 800a3a2:	78da      	ldrb	r2, [r3, #3]
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <dateInputSetup+0x28>)
 800a3a6:	709a      	strb	r2, [r3, #2]
}
 800a3a8:	bf00      	nop
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	200057dc 	.word	0x200057dc
 800a3b0:	20005dfc 	.word	0x20005dfc

0800a3b4 <dateInputMain>:

void dateInputMain(void){
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b089      	sub	sp, #36	; 0x24
 800a3b8:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	603b      	str	r3, [r7, #0]
 800a3be:	1d3b      	adds	r3, r7, #4
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	605a      	str	r2, [r3, #4]
 800a3c6:	609a      	str	r2, [r3, #8]
 800a3c8:	60da      	str	r2, [r3, #12]
 800a3ca:	611a      	str	r2, [r3, #16]
 800a3cc:	615a      	str	r2, [r3, #20]
 800a3ce:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800a3d0:	463b      	mov	r3, r7
 800a3d2:	494a      	ldr	r1, [pc, #296]	; (800a4fc <dateInputMain+0x148>)
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f00b fc33 	bl	8015c40 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 800a3da:	4b49      	ldr	r3, [pc, #292]	; (800a500 <dateInputMain+0x14c>)
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4b48      	ldr	r3, [pc, #288]	; (800a504 <dateInputMain+0x150>)
 800a3e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3e6:	4b46      	ldr	r3, [pc, #280]	; (800a500 <dateInputMain+0x14c>)
 800a3e8:	789b      	ldrb	r3, [r3, #2]
 800a3ea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	4945      	ldr	r1, [pc, #276]	; (800a508 <dateInputMain+0x154>)
 800a3f2:	f00b fc25 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800a3f6:	2314      	movs	r3, #20
 800a3f8:	b29c      	uxth	r4, r3
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f5 ff01 	bl	8000204 <strlen>
 800a402:	4603      	mov	r3, r0
 800a404:	f1c3 030d 	rsb	r3, r3, #13
 800a408:	b29b      	uxth	r3, r3
 800a40a:	fb14 f303 	smulbb	r3, r4, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	3323      	adds	r3, #35	; 0x23
 800a412:	b298      	uxth	r0, r3
 800a414:	463a      	mov	r2, r7
 800a416:	4b3d      	ldr	r3, [pc, #244]	; (800a50c <dateInputMain+0x158>)
 800a418:	21ae      	movs	r1, #174	; 0xae
 800a41a:	f7f8 ff3f 	bl	800329c <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 800a41e:	4b38      	ldr	r3, [pc, #224]	; (800a500 <dateInputMain+0x14c>)
 800a420:	7818      	ldrb	r0, [r3, #0]
 800a422:	4b37      	ldr	r3, [pc, #220]	; (800a500 <dateInputMain+0x14c>)
 800a424:	7859      	ldrb	r1, [r3, #1]
 800a426:	4b36      	ldr	r3, [pc, #216]	; (800a500 <dateInputMain+0x14c>)
 800a428:	789b      	ldrb	r3, [r3, #2]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a430:	b29b      	uxth	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	f000 fd4e 	bl	800aed4 <zellerCongruence>
 800a438:	4603      	mov	r3, r0
 800a43a:	461a      	mov	r2, r3
 800a43c:	4b34      	ldr	r3, [pc, #208]	; (800a510 <dateInputMain+0x15c>)
 800a43e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a442:	4b2f      	ldr	r3, [pc, #188]	; (800a500 <dateInputMain+0x14c>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	4638      	mov	r0, r7
 800a448:	492f      	ldr	r1, [pc, #188]	; (800a508 <dateInputMain+0x154>)
 800a44a:	f00b fbf9 	bl	8015c40 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800a44e:	2314      	movs	r3, #20
 800a450:	b29c      	uxth	r4, r3
 800a452:	463b      	mov	r3, r7
 800a454:	4618      	mov	r0, r3
 800a456:	f7f5 fed5 	bl	8000204 <strlen>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f1c3 030d 	rsb	r3, r3, #13
 800a460:	b29b      	uxth	r3, r3
 800a462:	fb14 f303 	smulbb	r3, r4, r3
 800a466:	b29b      	uxth	r3, r3
 800a468:	3323      	adds	r3, #35	; 0x23
 800a46a:	b298      	uxth	r0, r3
 800a46c:	463a      	mov	r2, r7
 800a46e:	4b27      	ldr	r3, [pc, #156]	; (800a50c <dateInputMain+0x158>)
 800a470:	21ca      	movs	r1, #202	; 0xca
 800a472:	f7f8 ff13 	bl	800329c <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 800a476:	4b27      	ldr	r3, [pc, #156]	; (800a514 <dateInputMain+0x160>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	4b26      	ldr	r3, [pc, #152]	; (800a518 <dateInputMain+0x164>)
 800a47e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a482:	4618      	mov	r0, r3
 800a484:	4b23      	ldr	r3, [pc, #140]	; (800a514 <dateInputMain+0x160>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	4b23      	ldr	r3, [pc, #140]	; (800a518 <dateInputMain+0x164>)
 800a48c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a490:	461a      	mov	r2, r3
 800a492:	4b20      	ldr	r3, [pc, #128]	; (800a514 <dateInputMain+0x160>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	4619      	mov	r1, r3
 800a498:	4b20      	ldr	r3, [pc, #128]	; (800a51c <dateInputMain+0x168>)
 800a49a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a49e:	18d1      	adds	r1, r2, r3
 800a4a0:	4b1c      	ldr	r3, [pc, #112]	; (800a514 <dateInputMain+0x160>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <dateInputMain+0x16c>)
 800a4a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f7f9 fbbc 	bl	8003c2c <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 800a4b4:	4b17      	ldr	r3, [pc, #92]	; (800a514 <dateInputMain+0x160>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b17      	ldr	r3, [pc, #92]	; (800a518 <dateInputMain+0x164>)
 800a4bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	4b14      	ldr	r3, [pc, #80]	; (800a514 <dateInputMain+0x160>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4b13      	ldr	r3, [pc, #76]	; (800a518 <dateInputMain+0x164>)
 800a4ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4b10      	ldr	r3, [pc, #64]	; (800a514 <dateInputMain+0x160>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4b11      	ldr	r3, [pc, #68]	; (800a51c <dateInputMain+0x168>)
 800a4d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a4dc:	18d1      	adds	r1, r2, r3
 800a4de:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <dateInputMain+0x160>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <dateInputMain+0x16c>)
 800a4e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f7f9 fb9d 	bl	8003c2c <lcdHLine>
}
 800a4f2:	bf00      	nop
 800a4f4:	3724      	adds	r7, #36	; 0x24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0801de80 	.word	0x0801de80
 800a500:	20005dfc 	.word	0x20005dfc
 800a504:	20000174 	.word	0x20000174
 800a508:	0801de90 	.word	0x0801de90
 800a50c:	08069014 	.word	0x08069014
 800a510:	20000154 	.word	0x20000154
 800a514:	20005df8 	.word	0x20005df8
 800a518:	200001a8 	.word	0x200001a8
 800a51c:	200001b8 	.word	0x200001b8
 800a520:	200001b0 	.word	0x200001b0

0800a524 <cursorNext>:

static void cursorNext(void){
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 800a528:	4b09      	ldr	r3, [pc, #36]	; (800a550 <cursorNext+0x2c>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d806      	bhi.n	800a53e <cursorNext+0x1a>
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <cursorNext+0x2c>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <cursorNext+0x2c>)
 800a53a:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 800a53c:	e002      	b.n	800a544 <cursorNext+0x20>
	else curPosition = 0;
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <cursorNext+0x2c>)
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20005df8 	.word	0x20005df8

0800a554 <cursorPrev>:
static void cursorPrev(void){
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800a558:	4b09      	ldr	r3, [pc, #36]	; (800a580 <cursorPrev+0x2c>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <cursorPrev+0x1a>
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <cursorPrev+0x2c>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	3b01      	subs	r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	4b05      	ldr	r3, [pc, #20]	; (800a580 <cursorPrev+0x2c>)
 800a56a:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 800a56c:	e002      	b.n	800a574 <cursorPrev+0x20>
	else curPosition = 2;
 800a56e:	4b04      	ldr	r3, [pc, #16]	; (800a580 <cursorPrev+0x2c>)
 800a570:	2202      	movs	r2, #2
 800a572:	701a      	strb	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20005df8 	.word	0x20005df8

0800a584 <increment>:
static void increment(void){
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <increment+0x80>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d024      	beq.n	800a5da <increment+0x56>
 800a590:	2b02      	cmp	r3, #2
 800a592:	dc31      	bgt.n	800a5f8 <increment+0x74>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <increment+0x1a>
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d00f      	beq.n	800a5bc <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 800a59c:	e02c      	b.n	800a5f8 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 800a59e:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <increment+0x84>)
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	2b0b      	cmp	r3, #11
 800a5a4:	d806      	bhi.n	800a5b4 <increment+0x30>
 800a5a6:	4b18      	ldr	r3, [pc, #96]	; (800a608 <increment+0x84>)
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	4b16      	ldr	r3, [pc, #88]	; (800a608 <increment+0x84>)
 800a5b0:	705a      	strb	r2, [r3, #1]
			break;
 800a5b2:	e021      	b.n	800a5f8 <increment+0x74>
			else valDatePos[1] = 1;
 800a5b4:	4b14      	ldr	r3, [pc, #80]	; (800a608 <increment+0x84>)
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	705a      	strb	r2, [r3, #1]
			break;
 800a5ba:	e01d      	b.n	800a5f8 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 800a5bc:	4b12      	ldr	r3, [pc, #72]	; (800a608 <increment+0x84>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	2b63      	cmp	r3, #99	; 0x63
 800a5c2:	d806      	bhi.n	800a5d2 <increment+0x4e>
 800a5c4:	4b10      	ldr	r3, [pc, #64]	; (800a608 <increment+0x84>)
 800a5c6:	789b      	ldrb	r3, [r3, #2]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <increment+0x84>)
 800a5ce:	709a      	strb	r2, [r3, #2]
			break;
 800a5d0:	e012      	b.n	800a5f8 <increment+0x74>
			else valDatePos[2] = 0;
 800a5d2:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <increment+0x84>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	709a      	strb	r2, [r3, #2]
			break;
 800a5d8:	e00e      	b.n	800a5f8 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <increment+0x84>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b1e      	cmp	r3, #30
 800a5e0:	d806      	bhi.n	800a5f0 <increment+0x6c>
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <increment+0x84>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b07      	ldr	r3, [pc, #28]	; (800a608 <increment+0x84>)
 800a5ec:	701a      	strb	r2, [r3, #0]
			break;
 800a5ee:	e002      	b.n	800a5f6 <increment+0x72>
			else valDatePos[0] = 1;
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <increment+0x84>)
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	701a      	strb	r2, [r3, #0]
			break;
 800a5f6:	bf00      	nop
}
 800a5f8:	bf00      	nop
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20005df8 	.word	0x20005df8
 800a608:	20005dfc 	.word	0x20005dfc

0800a60c <decrement>:
static void decrement(void){
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a610:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <decrement+0x80>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d024      	beq.n	800a662 <decrement+0x56>
 800a618:	2b02      	cmp	r3, #2
 800a61a:	dc31      	bgt.n	800a680 <decrement+0x74>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <decrement+0x1a>
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00f      	beq.n	800a644 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 800a624:	e02c      	b.n	800a680 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 800a626:	4b1a      	ldr	r3, [pc, #104]	; (800a690 <decrement+0x84>)
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d006      	beq.n	800a63c <decrement+0x30>
 800a62e:	4b18      	ldr	r3, [pc, #96]	; (800a690 <decrement+0x84>)
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	3b01      	subs	r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	4b16      	ldr	r3, [pc, #88]	; (800a690 <decrement+0x84>)
 800a638:	705a      	strb	r2, [r3, #1]
				break;
 800a63a:	e021      	b.n	800a680 <decrement+0x74>
				else valDatePos[1] = 12;
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <decrement+0x84>)
 800a63e:	220c      	movs	r2, #12
 800a640:	705a      	strb	r2, [r3, #1]
				break;
 800a642:	e01d      	b.n	800a680 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 800a644:	4b12      	ldr	r3, [pc, #72]	; (800a690 <decrement+0x84>)
 800a646:	789b      	ldrb	r3, [r3, #2]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d006      	beq.n	800a65a <decrement+0x4e>
 800a64c:	4b10      	ldr	r3, [pc, #64]	; (800a690 <decrement+0x84>)
 800a64e:	789b      	ldrb	r3, [r3, #2]
 800a650:	3b01      	subs	r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	4b0e      	ldr	r3, [pc, #56]	; (800a690 <decrement+0x84>)
 800a656:	709a      	strb	r2, [r3, #2]
				break;
 800a658:	e012      	b.n	800a680 <decrement+0x74>
				else valDatePos[2] = 100;
 800a65a:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <decrement+0x84>)
 800a65c:	2264      	movs	r2, #100	; 0x64
 800a65e:	709a      	strb	r2, [r3, #2]
				break;
 800a660:	e00e      	b.n	800a680 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 800a662:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <decrement+0x84>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d906      	bls.n	800a678 <decrement+0x6c>
 800a66a:	4b09      	ldr	r3, [pc, #36]	; (800a690 <decrement+0x84>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	3b01      	subs	r3, #1
 800a670:	b2da      	uxtb	r2, r3
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <decrement+0x84>)
 800a674:	701a      	strb	r2, [r3, #0]
				break;
 800a676:	e002      	b.n	800a67e <decrement+0x72>
				else valDatePos[0] = 31;
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <decrement+0x84>)
 800a67a:	221f      	movs	r2, #31
 800a67c:	701a      	strb	r2, [r3, #0]
				break;
 800a67e:	bf00      	nop
}
 800a680:	bf00      	nop
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20005df8 	.word	0x20005df8
 800a690:	20005dfc 	.word	0x20005dfc

0800a694 <exitScr>:
static void exitScr(void){
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
	applySelectedScreen();
 800a698:	f7f8 fad0 	bl	8002c3c <applySelectedScreen>
}
 800a69c:	bf00      	nop
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <accept>:
static void accept(void){
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 800a6a4:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <accept+0x5c>)
 800a6a6:	785a      	ldrb	r2, [r3, #1]
 800a6a8:	4b15      	ldr	r3, [pc, #84]	; (800a700 <accept+0x60>)
 800a6aa:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 800a6ac:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <accept+0x5c>)
 800a6ae:	781a      	ldrb	r2, [r3, #0]
 800a6b0:	4b13      	ldr	r3, [pc, #76]	; (800a700 <accept+0x60>)
 800a6b2:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 800a6b4:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <accept+0x5c>)
 800a6b6:	789a      	ldrb	r2, [r3, #2]
 800a6b8:	4b11      	ldr	r3, [pc, #68]	; (800a700 <accept+0x60>)
 800a6ba:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <accept+0x5c>)
 800a6be:	7818      	ldrb	r0, [r3, #0]
 800a6c0:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <accept+0x5c>)
 800a6c2:	7859      	ldrb	r1, [r3, #1]
 800a6c4:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <accept+0x5c>)
 800a6c6:	789b      	ldrb	r3, [r3, #2]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f000 fbff 	bl	800aed4 <zellerCongruence>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4b09      	ldr	r3, [pc, #36]	; (800a700 <accept+0x60>)
 800a6dc:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4907      	ldr	r1, [pc, #28]	; (800a700 <accept+0x60>)
 800a6e2:	4808      	ldr	r0, [pc, #32]	; (800a704 <accept+0x64>)
 800a6e4:	f003 f8e2 	bl	800d8ac <HAL_RTC_SetDate>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <accept+0x52>
	{
	Error_Handler();
 800a6ee:	f7f9 ff4b 	bl	8004588 <Error_Handler>
	}
	exitScr();
 800a6f2:	f7ff ffcf 	bl	800a694 <exitScr>
}
 800a6f6:	bf00      	nop
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20005dfc 	.word	0x20005dfc
 800a700:	200057dc 	.word	0x200057dc
 800a704:	20005a78 	.word	0x20005a78

0800a708 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <setDefaultClbcks+0x34>)
 800a70e:	4a0c      	ldr	r2, [pc, #48]	; (800a740 <setDefaultClbcks+0x38>)
 800a710:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <setDefaultClbcks+0x3c>)
 800a714:	4a0c      	ldr	r2, [pc, #48]	; (800a748 <setDefaultClbcks+0x40>)
 800a716:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800a718:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <setDefaultClbcks+0x44>)
 800a71a:	4a0d      	ldr	r2, [pc, #52]	; (800a750 <setDefaultClbcks+0x48>)
 800a71c:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800a71e:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <setDefaultClbcks+0x4c>)
 800a720:	4a0d      	ldr	r2, [pc, #52]	; (800a758 <setDefaultClbcks+0x50>)
 800a722:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800a724:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <setDefaultClbcks+0x54>)
 800a726:	4a0e      	ldr	r2, [pc, #56]	; (800a760 <setDefaultClbcks+0x58>)
 800a728:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800a72a:	4b0e      	ldr	r3, [pc, #56]	; (800a764 <setDefaultClbcks+0x5c>)
 800a72c:	4a0e      	ldr	r2, [pc, #56]	; (800a768 <setDefaultClbcks+0x60>)
 800a72e:	611a      	str	r2, [r3, #16]
}
 800a730:	bf00      	nop
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200026c8 	.word	0x200026c8
 800a740:	0800aa8d 	.word	0x0800aa8d
 800a744:	20002680 	.word	0x20002680
 800a748:	0800a8d1 	.word	0x0800a8d1
 800a74c:	20002638 	.word	0x20002638
 800a750:	0800aa99 	.word	0x0800aa99
 800a754:	20002560 	.word	0x20002560
 800a758:	0800a9bd 	.word	0x0800a9bd
 800a75c:	200025a8 	.word	0x200025a8
 800a760:	0800a8a1 	.word	0x0800a8a1
 800a764:	200025f0 	.word	0x200025f0
 800a768:	0800a901 	.word	0x0800a901

0800a76c <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a770:	f7ff ffca 	bl	800a708 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 800a774:	4b06      	ldr	r3, [pc, #24]	; (800a790 <timeInputSetup+0x24>)
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	4b06      	ldr	r3, [pc, #24]	; (800a794 <timeInputSetup+0x28>)
 800a77a:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <timeInputSetup+0x24>)
 800a77e:	785a      	ldrb	r2, [r3, #1]
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <timeInputSetup+0x28>)
 800a782:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <timeInputSetup+0x24>)
 800a786:	789a      	ldrb	r2, [r3, #2]
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <timeInputSetup+0x28>)
 800a78a:	709a      	strb	r2, [r3, #2]
}
 800a78c:	bf00      	nop
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	200057c8 	.word	0x200057c8
 800a794:	20005e00 	.word	0x20005e00

0800a798 <timeInputMain>:

void timeInputMain(void){
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 800a79e:	2300      	movs	r3, #0
 800a7a0:	603b      	str	r3, [r7, #0]
 800a7a2:	1d3b      	adds	r3, r7, #4
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	605a      	str	r2, [r3, #4]
 800a7aa:	609a      	str	r2, [r3, #8]
 800a7ac:	60da      	str	r2, [r3, #12]
 800a7ae:	611a      	str	r2, [r3, #16]
 800a7b0:	615a      	str	r2, [r3, #20]
 800a7b2:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 800a7b4:	4b33      	ldr	r3, [pc, #204]	; (800a884 <timeInputMain+0xec>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	4932      	ldr	r1, [pc, #200]	; (800a888 <timeInputMain+0xf0>)
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f00b fa3e 	bl	8015c40 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4b31      	ldr	r3, [pc, #196]	; (800a88c <timeInputMain+0xf4>)
 800a7c8:	214c      	movs	r1, #76	; 0x4c
 800a7ca:	2014      	movs	r0, #20
 800a7cc:	f7f8 fd66 	bl	800329c <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 800a7d0:	4b2c      	ldr	r3, [pc, #176]	; (800a884 <timeInputMain+0xec>)
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	492b      	ldr	r1, [pc, #172]	; (800a888 <timeInputMain+0xf0>)
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f00b fa30 	bl	8015c40 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 800a7e0:	463a      	mov	r2, r7
 800a7e2:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <timeInputMain+0xf4>)
 800a7e4:	214c      	movs	r1, #76	; 0x4c
 800a7e6:	20aa      	movs	r0, #170	; 0xaa
 800a7e8:	f7f8 fd58 	bl	800329c <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 800a7ec:	4b28      	ldr	r3, [pc, #160]	; (800a890 <timeInputMain+0xf8>)
 800a7ee:	789b      	ldrb	r3, [r3, #2]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	4924      	ldr	r1, [pc, #144]	; (800a888 <timeInputMain+0xf0>)
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f00b fa22 	bl	8015c40 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 800a7fc:	463a      	mov	r2, r7
 800a7fe:	4b25      	ldr	r3, [pc, #148]	; (800a894 <timeInputMain+0xfc>)
 800a800:	214c      	movs	r1, #76	; 0x4c
 800a802:	f240 103b 	movw	r0, #315	; 0x13b
 800a806:	f7f8 fd49 	bl	800329c <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 800a80a:	4b23      	ldr	r3, [pc, #140]	; (800a898 <timeInputMain+0x100>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	4b22      	ldr	r3, [pc, #136]	; (800a89c <timeInputMain+0x104>)
 800a812:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a816:	4618      	mov	r0, r3
 800a818:	4b1f      	ldr	r3, [pc, #124]	; (800a898 <timeInputMain+0x100>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b1f      	ldr	r3, [pc, #124]	; (800a89c <timeInputMain+0x104>)
 800a820:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a824:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a828:	2301      	movs	r3, #1
 800a82a:	22af      	movs	r2, #175	; 0xaf
 800a82c:	f7f9 f9fe 	bl	8003c2c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 800a830:	4b19      	ldr	r3, [pc, #100]	; (800a898 <timeInputMain+0x100>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <timeInputMain+0x104>)
 800a838:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a83c:	4618      	mov	r0, r3
 800a83e:	4b16      	ldr	r3, [pc, #88]	; (800a898 <timeInputMain+0x100>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	4b15      	ldr	r3, [pc, #84]	; (800a89c <timeInputMain+0x104>)
 800a846:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a84a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a84e:	2301      	movs	r3, #1
 800a850:	22b0      	movs	r2, #176	; 0xb0
 800a852:	f7f9 f9eb 	bl	8003c2c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 800a856:	4b10      	ldr	r3, [pc, #64]	; (800a898 <timeInputMain+0x100>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <timeInputMain+0x104>)
 800a85e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a862:	4618      	mov	r0, r3
 800a864:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <timeInputMain+0x100>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <timeInputMain+0x104>)
 800a86c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a870:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a874:	2301      	movs	r3, #1
 800a876:	22b1      	movs	r2, #177	; 0xb1
 800a878:	f7f9 f9d8 	bl	8003c2c <lcdHLine>
}
 800a87c:	bf00      	nop
 800a87e:	3720      	adds	r7, #32
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20005e00 	.word	0x20005e00
 800a888:	0801df50 	.word	0x0801df50
 800a88c:	080704c4 	.word	0x080704c4
 800a890:	200057c8 	.word	0x200057c8
 800a894:	0806ae7c 	.word	0x0806ae7c
 800a898:	20005dff 	.word	0x20005dff
 800a89c:	200001e8 	.word	0x200001e8

0800a8a0 <cursorNext>:

static void cursorNext(void){
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 800a8a4:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <cursorNext+0x2c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d806      	bhi.n	800a8ba <cursorNext+0x1a>
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <cursorNext+0x2c>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <cursorNext+0x2c>)
 800a8b6:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 800a8b8:	e002      	b.n	800a8c0 <cursorNext+0x20>
	else curPosition = 0;
 800a8ba:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <cursorNext+0x2c>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20005dff 	.word	0x20005dff

0800a8d0 <cursorPrev>:
static void cursorPrev(void){
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800a8d4:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <cursorPrev+0x2c>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d006      	beq.n	800a8ea <cursorPrev+0x1a>
 800a8dc:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <cursorPrev+0x2c>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <cursorPrev+0x2c>)
 800a8e6:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 800a8e8:	e002      	b.n	800a8f0 <cursorPrev+0x20>
	else curPosition = 4;
 800a8ea:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <cursorPrev+0x2c>)
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	701a      	strb	r2, [r3, #0]
}
 800a8f0:	bf00      	nop
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	20005dff 	.word	0x20005dff

0800a900 <increment>:
static void increment(void){
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a904:	4b2b      	ldr	r3, [pc, #172]	; (800a9b4 <increment+0xb4>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	2b04      	cmp	r3, #4
 800a90a:	d84d      	bhi.n	800a9a8 <increment+0xa8>
 800a90c:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <increment+0x14>)
 800a90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a912:	bf00      	nop
 800a914:	0800a929 	.word	0x0800a929
 800a918:	0800a947 	.word	0x0800a947
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a983 	.word	0x0800a983
 800a924:	0800a9a1 	.word	0x0800a9a1
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 800a928:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <increment+0xb8>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b0c      	cmp	r3, #12
 800a92e:	d806      	bhi.n	800a93e <increment+0x3e>
 800a930:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <increment+0xb8>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	330a      	adds	r3, #10
 800a936:	b2da      	uxtb	r2, r3
 800a938:	4b1f      	ldr	r3, [pc, #124]	; (800a9b8 <increment+0xb8>)
 800a93a:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 800a93c:	e034      	b.n	800a9a8 <increment+0xa8>
			else valTimePos[0] = 20;
 800a93e:	4b1e      	ldr	r3, [pc, #120]	; (800a9b8 <increment+0xb8>)
 800a940:	2214      	movs	r2, #20
 800a942:	701a      	strb	r2, [r3, #0]
			break;
 800a944:	e030      	b.n	800a9a8 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 800a946:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <increment+0xb8>)
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b17      	cmp	r3, #23
 800a94c:	d806      	bhi.n	800a95c <increment+0x5c>
 800a94e:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <increment+0xb8>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <increment+0xb8>)
 800a958:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 800a95a:	e025      	b.n	800a9a8 <increment+0xa8>
			else valTimePos[0] = 0;
 800a95c:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <increment+0xb8>)
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
			break;
 800a962:	e021      	b.n	800a9a8 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 800a964:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <increment+0xb8>)
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b30      	cmp	r3, #48	; 0x30
 800a96a:	d806      	bhi.n	800a97a <increment+0x7a>
 800a96c:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <increment+0xb8>)
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	330a      	adds	r3, #10
 800a972:	b2da      	uxtb	r2, r3
 800a974:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <increment+0xb8>)
 800a976:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800a978:	e016      	b.n	800a9a8 <increment+0xa8>
			else valTimePos[1] = 0;
 800a97a:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <increment+0xb8>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	705a      	strb	r2, [r3, #1]
			break;
 800a980:	e012      	b.n	800a9a8 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 800a982:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <increment+0xb8>)
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b3a      	cmp	r3, #58	; 0x3a
 800a988:	d806      	bhi.n	800a998 <increment+0x98>
 800a98a:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <increment+0xb8>)
 800a98c:	785b      	ldrb	r3, [r3, #1]
 800a98e:	3301      	adds	r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <increment+0xb8>)
 800a994:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800a996:	e007      	b.n	800a9a8 <increment+0xa8>
			else valTimePos[1] = 0;
 800a998:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <increment+0xb8>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	705a      	strb	r2, [r3, #1]
			break;
 800a99e:	e003      	b.n	800a9a8 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <increment+0xb8>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	709a      	strb	r2, [r3, #2]
			break;
 800a9a6:	bf00      	nop
	}
}
 800a9a8:	bf00      	nop
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20005dff 	.word	0x20005dff
 800a9b8:	20005e00 	.word	0x20005e00

0800a9bc <decrement>:
static void decrement(void){
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a9c0:	4b2e      	ldr	r3, [pc, #184]	; (800aa7c <decrement+0xc0>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d857      	bhi.n	800aa78 <decrement+0xbc>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <decrement+0x14>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9e5 	.word	0x0800a9e5
 800a9d4:	0800aa03 	.word	0x0800aa03
 800a9d8:	0800aa21 	.word	0x0800aa21
 800a9dc:	0800aa3f 	.word	0x0800aa3f
 800a9e0:	0800aa5d 	.word	0x0800aa5d
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 800a9e4:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <decrement+0xc4>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b09      	cmp	r3, #9
 800a9ea:	d906      	bls.n	800a9fa <decrement+0x3e>
 800a9ec:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <decrement+0xc4>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	3b0a      	subs	r3, #10
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	4b22      	ldr	r3, [pc, #136]	; (800aa80 <decrement+0xc4>)
 800a9f6:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 800a9f8:	e03e      	b.n	800aa78 <decrement+0xbc>
				else valTimePos[0] = 0;
 800a9fa:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <decrement+0xc4>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	701a      	strb	r2, [r3, #0]
				break;
 800aa00:	e03a      	b.n	800aa78 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800aa02:	4b1f      	ldr	r3, [pc, #124]	; (800aa80 <decrement+0xc4>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d006      	beq.n	800aa18 <decrement+0x5c>
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <decrement+0xc4>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	4b1b      	ldr	r3, [pc, #108]	; (800aa80 <decrement+0xc4>)
 800aa14:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 800aa16:	e02f      	b.n	800aa78 <decrement+0xbc>
				else valTimePos[0] = 23;
 800aa18:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <decrement+0xc4>)
 800aa1a:	2217      	movs	r2, #23
 800aa1c:	701a      	strb	r2, [r3, #0]
				break;
 800aa1e:	e02b      	b.n	800aa78 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 800aa20:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <decrement+0xc4>)
 800aa22:	785b      	ldrb	r3, [r3, #1]
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d906      	bls.n	800aa36 <decrement+0x7a>
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <decrement+0xc4>)
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	3b0a      	subs	r3, #10
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <decrement+0xc4>)
 800aa32:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 800aa34:	e020      	b.n	800aa78 <decrement+0xbc>
				else valTimePos[1] = 0;
 800aa36:	4b12      	ldr	r3, [pc, #72]	; (800aa80 <decrement+0xc4>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	705a      	strb	r2, [r3, #1]
				break;
 800aa3c:	e01c      	b.n	800aa78 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <decrement+0xc4>)
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d006      	beq.n	800aa54 <decrement+0x98>
 800aa46:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <decrement+0xc4>)
 800aa48:	785b      	ldrb	r3, [r3, #1]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	4b0c      	ldr	r3, [pc, #48]	; (800aa80 <decrement+0xc4>)
 800aa50:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 800aa52:	e011      	b.n	800aa78 <decrement+0xbc>
				else valTimePos[1] = 59;
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <decrement+0xc4>)
 800aa56:	223b      	movs	r2, #59	; 0x3b
 800aa58:	705a      	strb	r2, [r3, #1]
				break;
 800aa5a:	e00d      	b.n	800aa78 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <decrement+0xc8>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800aa62:	2200      	movs	r2, #0
 800aa64:	4907      	ldr	r1, [pc, #28]	; (800aa84 <decrement+0xc8>)
 800aa66:	4808      	ldr	r0, [pc, #32]	; (800aa88 <decrement+0xcc>)
 800aa68:	f002 fe28 	bl	800d6bc <HAL_RTC_SetTime>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <decrement+0xba>
					{
						Error_Handler();
 800aa72:	f7f9 fd89 	bl	8004588 <Error_Handler>
					}
				break;
 800aa76:	bf00      	nop
		}
}
 800aa78:	bf00      	nop
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20005dff 	.word	0x20005dff
 800aa80:	20005e00 	.word	0x20005e00
 800aa84:	200057c8 	.word	0x200057c8
 800aa88:	20005a78 	.word	0x20005a78

0800aa8c <exitScr>:
static void exitScr(void){
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
	applySelectedScreen();
 800aa90:	f7f8 f8d4 	bl	8002c3c <applySelectedScreen>
}
 800aa94:	bf00      	nop
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <accept>:
static void accept(void){
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <accept+0x3c>)
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <accept+0x40>)
 800aaa2:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <accept+0x3c>)
 800aaa6:	785a      	ldrb	r2, [r3, #1]
 800aaa8:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <accept+0x40>)
 800aaaa:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <accept+0x40>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <accept+0x40>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800aab8:	2200      	movs	r2, #0
 800aaba:	4907      	ldr	r1, [pc, #28]	; (800aad8 <accept+0x40>)
 800aabc:	4807      	ldr	r0, [pc, #28]	; (800aadc <accept+0x44>)
 800aabe:	f002 fdfd 	bl	800d6bc <HAL_RTC_SetTime>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <accept+0x34>
	{
	Error_Handler();
 800aac8:	f7f9 fd5e 	bl	8004588 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 800aacc:	f7ff ffde 	bl	800aa8c <exitScr>
}
 800aad0:	bf00      	nop
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20005e00 	.word	0x20005e00
 800aad8:	200057c8 	.word	0x200057c8
 800aadc:	20005a78 	.word	0x20005a78

0800aae0 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	88fa      	ldrh	r2, [r7, #6]
 800aaf8:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	895b      	ldrh	r3, [r3, #10]
 800aafe:	461a      	mov	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	fb02 f303 	mul.w	r3, r2, r3
 800ab06:	4618      	mov	r0, r3
 800ab08:	f009 ff4e 	bl	80149a8 <malloc>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	741a      	strb	r2, [r3, #16]
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	891a      	ldrh	r2, [r3, #8]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	895b      	ldrh	r3, [r3, #10]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffe5 	bl	800ab34 <cbuf_isFull>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d02a      	beq.n	800abc6 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	88db      	ldrh	r3, [r3, #6]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	18d0      	adds	r0, r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	f009 ff1c 	bl	80149c8 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	88db      	ldrh	r3, [r3, #6]
 800ab94:	3301      	adds	r3, #1
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	8952      	ldrh	r2, [r2, #10]
 800ab9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab9e:	fb01 f202 	mul.w	r2, r1, r2
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	889b      	ldrh	r3, [r3, #4]
 800abae:	3301      	adds	r3, #1
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	8952      	ldrh	r2, [r2, #10]
 800abb4:	fb93 f1f2 	sdiv	r1, r3, r2
 800abb8:	fb01 f202 	mul.w	r2, r1, r2
 800abbc:	1a9b      	subs	r3, r3, r2
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 800abc4:	e023      	b.n	800ac0e <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	4619      	mov	r1, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	18d0      	adds	r0, r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	461a      	mov	r2, r3
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	f009 fef1 	bl	80149c8 <memcpy>
		b->elemNum++;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	891b      	ldrh	r3, [r3, #8]
 800abea:	3301      	adds	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	88db      	ldrh	r3, [r3, #6]
 800abf6:	3301      	adds	r3, #1
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	8952      	ldrh	r2, [r2, #10]
 800abfc:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac00:	fb01 f202 	mul.w	r2, r1, r2
 800ac04:	1a9b      	subs	r3, r3, r2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	80da      	strh	r2, [r3, #6]
		return 1;
 800ac0c:	2301      	movs	r3, #1
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	889a      	ldrh	r2, [r3, #4]
 800ac26:	887b      	ldrh	r3, [r7, #2]
 800ac28:	4413      	add	r3, r2
 800ac2a:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	895a      	ldrh	r2, [r3, #10]
 800ac30:	887b      	ldrh	r3, [r7, #2]
 800ac32:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac36:	fb01 f202 	mul.w	r2, r1, r2
 800ac3a:	1a9b      	subs	r3, r3, r2
 800ac3c:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	887b      	ldrh	r3, [r7, #2]
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	68c9      	ldr	r1, [r1, #12]
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	4413      	add	r3, r2
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <nextMenuItem>:
void addMenuItem(menuList_t *menu, char* label, void (*action)(void)){

}


void nextMenuItem(guiMenu_t *menu){
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
	if(menu->selectedItem<(menu->itemCount-1)){
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	791b      	ldrb	r3, [r3, #4]
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	795b      	ldrb	r3, [r3, #5]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	da06      	bge.n	800ac80 <nextMenuItem+0x26>
		menu->selectedItem++;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	791b      	ldrb	r3, [r3, #4]
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	711a      	strb	r2, [r3, #4]
	} else {
		menu->selectedItem=0;
//		if(menu->wrappingEnabled) menu->selectedItem=0;
	}
//	btn_BB.onSinglePressHandler = menuItemArray[settingsMenu.currentPosition]->action;
}
 800ac7e:	e002      	b.n	800ac86 <nextMenuItem+0x2c>
		menu->selectedItem=0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	711a      	strb	r2, [r3, #4]
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <prevMenuItem>:
void prevMenuItem(guiMenu_t *menu){
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
	if(menu->selectedItem>0){
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	791b      	ldrb	r3, [r3, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d006      	beq.n	800acb0 <prevMenuItem+0x1e>
		menu->selectedItem--;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	791b      	ldrb	r3, [r3, #4]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	711a      	strb	r2, [r3, #4]
	} else {
		menu->selectedItem=menu->itemCount-1;
//		if(menu->wrappingEnabled) menu->selectedItem=0;
	}
//	btn_BB.onSinglePressHandler = menuItemArray[settingsMenu.currentPosition]->action;
}
 800acae:	e005      	b.n	800acbc <prevMenuItem+0x2a>
		menu->selectedItem=menu->itemCount-1;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	795b      	ldrb	r3, [r3, #5]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	711a      	strb	r2, [r3, #4]
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <drawGuiMenu>:
void drawGuiMenu(guiMenu_t *menu){
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08c      	sub	sp, #48	; 0x30
 800accc:	af02      	add	r7, sp, #8
 800acce:	6078      	str	r0, [r7, #4]

		char tempStr[30] = {0};
 800acd0:	2300      	movs	r3, #0
 800acd2:	60bb      	str	r3, [r7, #8]
 800acd4:	f107 030c 	add.w	r3, r7, #12
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	609a      	str	r2, [r3, #8]
 800ace0:	60da      	str	r2, [r3, #12]
 800ace2:	611a      	str	r2, [r3, #16]
 800ace4:	615a      	str	r2, [r3, #20]
 800ace6:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < menu->itemCount; i++){
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acee:	e03d      	b.n	800ad6c <drawGuiMenu+0xa4>
//			guiMenuItem_t *list = menu->itemList;
//			char* label = list[i].label;

//			char label[] = "label";
			sprintf(&tempStr, "cnt:%d", i);
 800acf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800acf4:	f107 0308 	add.w	r3, r7, #8
 800acf8:	4922      	ldr	r1, [pc, #136]	; (800ad84 <drawGuiMenu+0xbc>)
 800acfa:	4618      	mov	r0, r3
 800acfc:	f00a ffa0 	bl	8015c40 <siprintf>
			lcdPutStr(0, 40+20*i, ((menu->itemList)[i])->label, font_13_calibri);
 800ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad04:	461a      	mov	r2, r3
 800ad06:	0092      	lsls	r2, r2, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	3328      	adds	r3, #40	; 0x28
 800ad10:	b2d9      	uxtb	r1, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689a      	ldr	r2, [r3, #8]
 800ad16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	461a      	mov	r2, r3
 800ad22:	4b19      	ldr	r3, [pc, #100]	; (800ad88 <drawGuiMenu+0xc0>)
 800ad24:	2000      	movs	r0, #0
 800ad26:	f7f8 fab9 	bl	800329c <lcdPutStr>
			//			drawMenuItem(menuItemArray[i], i==menu->currentPosition, x, y+(menu->listItemHeight+1)*i);
			if(menu->selectedItem == i) lcdRect(0, 200, 40+20*i, 40+20*i+20, 2);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	791b      	ldrb	r3, [r3, #4]
 800ad2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d115      	bne.n	800ad62 <drawGuiMenu+0x9a>
 800ad36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ad46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	333c      	adds	r3, #60	; 0x3c
 800ad54:	2202      	movs	r2, #2
 800ad56:	9200      	str	r2, [sp, #0]
 800ad58:	460a      	mov	r2, r1
 800ad5a:	21c8      	movs	r1, #200	; 0xc8
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	f7f9 f8bb 	bl	8003ed8 <lcdRect>
		for(uint8_t i = 0; i < menu->itemCount; i++){
 800ad62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad66:	3301      	adds	r3, #1
 800ad68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	795b      	ldrb	r3, [r3, #5]
 800ad70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d3bb      	bcc.n	800acf0 <drawGuiMenu+0x28>
		}
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	3728      	adds	r7, #40	; 0x28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	0801e010 	.word	0x0801e010
 800ad88:	080723bc 	.word	0x080723bc

0800ad8c <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	887a      	ldrh	r2, [r7, #2]
 800ad9c:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	895b      	ldrh	r3, [r3, #10]
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f009 fdff 	bl	80149a8 <malloc>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	731a      	strb	r2, [r3, #12]
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	891a      	ldrh	r2, [r3, #8]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	895b      	ldrh	r3, [r3, #10]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	bf0c      	ite	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	2300      	movne	r3, #0
 800adea:	b2db      	uxtb	r3, r3
}
 800adec:	4618      	mov	r0, r3
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff ffe5 	bl	800add2 <ring_buffer_full>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d022      	beq.n	800ae54 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	88db      	ldrh	r3, [r3, #6]
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	88db      	ldrh	r3, [r3, #6]
 800ae22:	3301      	adds	r3, #1
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	8952      	ldrh	r2, [r2, #10]
 800ae28:	fb93 f1f2 	sdiv	r1, r3, r2
 800ae2c:	fb01 f202 	mul.w	r2, r1, r2
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	889b      	ldrh	r3, [r3, #4]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	8952      	ldrh	r2, [r2, #10]
 800ae42:	fb93 f1f2 	sdiv	r1, r3, r2
 800ae46:	fb01 f202 	mul.w	r2, r1, r2
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 800ae52:	e01b      	b.n	800ae8c <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	88db      	ldrh	r3, [r3, #6]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	891b      	ldrh	r3, [r3, #8]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	88db      	ldrh	r3, [r3, #6]
 800ae74:	3301      	adds	r3, #1
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	8952      	ldrh	r2, [r2, #10]
 800ae7a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ae7e:	fb01 f202 	mul.w	r2, r1, r2
 800ae82:	1a9b      	subs	r3, r3, r2
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	80da      	strh	r2, [r3, #6]
		return 1;
 800ae8a:	2301      	movs	r3, #1
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	807b      	strh	r3, [r7, #2]
	position += b->head;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	889a      	ldrh	r2, [r3, #4]
 800aea4:	887b      	ldrh	r3, [r7, #2]
 800aea6:	4413      	add	r3, r2
 800aea8:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	895a      	ldrh	r2, [r3, #10]
 800aeae:	887b      	ldrh	r3, [r7, #2]
 800aeb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeb4:	fb01 f202 	mul.w	r2, r1, r2
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	887b      	ldrh	r3, [r7, #2]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	681b      	ldr	r3, [r3, #0]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
 800aede:	460b      	mov	r3, r1
 800aee0:	71bb      	strb	r3, [r7, #6]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 800aee6:	79bb      	ldrb	r3, [r7, #6]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d104      	bne.n	800aef6 <zellerCongruence+0x22>
	        month = 13;
 800aeec:	230d      	movs	r3, #13
 800aeee:	71bb      	strb	r3, [r7, #6]
	        year--;
 800aef0:	88bb      	ldrh	r3, [r7, #4]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 800aef6:	79bb      	ldrb	r3, [r7, #6]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d104      	bne.n	800af06 <zellerCongruence+0x32>
	        month = 14;
 800aefc:	230e      	movs	r3, #14
 800aefe:	71bb      	strb	r3, [r7, #6]
	        year--;
 800af00:	88bb      	ldrh	r3, [r7, #4]
 800af02:	3b01      	subs	r3, #1
 800af04:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800af0a:	79bb      	ldrb	r3, [r7, #6]
 800af0c:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800af0e:	88bb      	ldrh	r3, [r7, #4]
 800af10:	4a29      	ldr	r2, [pc, #164]	; (800afb8 <zellerCongruence+0xe4>)
 800af12:	fba2 1203 	umull	r1, r2, r2, r3
 800af16:	0952      	lsrs	r2, r2, #5
 800af18:	2164      	movs	r1, #100	; 0x64
 800af1a:	fb01 f202 	mul.w	r2, r1, r2
 800af1e:	1a9b      	subs	r3, r3, r2
 800af20:	b29b      	uxth	r3, r3
 800af22:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 800af24:	88bb      	ldrh	r3, [r7, #4]
 800af26:	4a24      	ldr	r2, [pc, #144]	; (800afb8 <zellerCongruence+0xe4>)
 800af28:	fba2 2303 	umull	r2, r3, r2, r3
 800af2c:	095b      	lsrs	r3, r3, #5
 800af2e:	b29b      	uxth	r3, r3
 800af30:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800af32:	7bf9      	ldrb	r1, [r7, #15]
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	4613      	mov	r3, r2
 800af3a:	005b      	lsls	r3, r3, #1
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	4a1e      	ldr	r2, [pc, #120]	; (800afbc <zellerCongruence+0xe8>)
 800af44:	fb82 0203 	smull	r0, r2, r2, r3
 800af48:	1052      	asrs	r2, r2, #1
 800af4a:	17db      	asrs	r3, r3, #31
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	18ca      	adds	r2, r1, r3
 800af50:	7b7b      	ldrb	r3, [r7, #13]
 800af52:	4413      	add	r3, r2
 800af54:	7b7a      	ldrb	r2, [r7, #13]
 800af56:	0892      	lsrs	r2, r2, #2
 800af58:	b2d2      	uxtb	r2, r2
 800af5a:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 800af5c:	7b3a      	ldrb	r2, [r7, #12]
 800af5e:	0892      	lsrs	r2, r2, #2
 800af60:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800af62:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 800af64:	7b3a      	ldrb	r2, [r7, #12]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800af6c:	440b      	add	r3, r1
 800af6e:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <zellerCongruence+0xec>)
 800af74:	fb83 1302 	smull	r1, r3, r3, r2
 800af78:	4413      	add	r3, r2
 800af7a:	1099      	asrs	r1, r3, #2
 800af7c:	17d3      	asrs	r3, r2, #31
 800af7e:	1ac9      	subs	r1, r1, r3
 800af80:	460b      	mov	r3, r1
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	1a5b      	subs	r3, r3, r1
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	1d5a      	adds	r2, r3, #5
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <zellerCongruence+0xec>)
 800af90:	fb83 1302 	smull	r1, r3, r3, r2
 800af94:	4413      	add	r3, r2
 800af96:	1099      	asrs	r1, r3, #2
 800af98:	17d3      	asrs	r3, r2, #31
 800af9a:	1ac9      	subs	r1, r1, r3
 800af9c:	460b      	mov	r3, r1
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	1a5b      	subs	r3, r3, r1
 800afa2:	1ad1      	subs	r1, r2, r3
 800afa4:	b2cb      	uxtb	r3, r1
 800afa6:	3301      	adds	r3, #1
 800afa8:	b2db      	uxtb	r3, r3
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	51eb851f 	.word	0x51eb851f
 800afbc:	66666667 	.word	0x66666667
 800afc0:	92492493 	.word	0x92492493

0800afc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800afc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800affc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800afc8:	480d      	ldr	r0, [pc, #52]	; (800b000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800afca:	490e      	ldr	r1, [pc, #56]	; (800b004 <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 800afcc:	4a0e      	ldr	r2, [pc, #56]	; (800b008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800afce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800afd0:	e002      	b.n	800afd8 <LoopCopyDataInit>

0800afd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800afd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800afd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800afd6:	3304      	adds	r3, #4

0800afd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800afd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800afda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800afdc:	d3f9      	bcc.n	800afd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800afde:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800afe0:	4c0b      	ldr	r4, [pc, #44]	; (800b010 <LoopFillZerobss+0x26>)
  movs r3, #0
 800afe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800afe4:	e001      	b.n	800afea <LoopFillZerobss>

0800afe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800afe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800afe8:	3204      	adds	r2, #4

0800afea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800afea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800afec:	d3fb      	bcc.n	800afe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800afee:	f7f9 fe27 	bl	8004c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aff2:	f009 fcb5 	bl	8014960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aff6:	f7f9 f871 	bl	80040dc <main>
  bx  lr    
 800affa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800affc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800b000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b004:	20000458 	.word	0x20000458
                                         ldr r2, =_sidata
 800b008:	08073d90 	.word	0x08073d90
  ldr r2, =_sbss
 800b00c:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 800b010:	20005e7c 	.word	0x20005e7c

0800b014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b014:	e7fe      	b.n	800b014 <ADC_IRQHandler>
	...

0800b018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <HAL_Init+0x40>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a0d      	ldr	r2, [pc, #52]	; (800b058 <HAL_Init+0x40>)
 800b022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b028:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <HAL_Init+0x40>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a0a      	ldr	r2, [pc, #40]	; (800b058 <HAL_Init+0x40>)
 800b02e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <HAL_Init+0x40>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a07      	ldr	r2, [pc, #28]	; (800b058 <HAL_Init+0x40>)
 800b03a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b03e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b040:	2003      	movs	r0, #3
 800b042:	f000 f94f 	bl	800b2e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b046:	2000      	movs	r0, #0
 800b048:	f000 f808 	bl	800b05c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b04c:	f7f9 fc0a 	bl	8004864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	40023c00 	.word	0x40023c00

0800b05c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b064:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <HAL_InitTick+0x54>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	4b12      	ldr	r3, [pc, #72]	; (800b0b4 <HAL_InitTick+0x58>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	4619      	mov	r1, r3
 800b06e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b072:	fbb3 f3f1 	udiv	r3, r3, r1
 800b076:	fbb2 f3f3 	udiv	r3, r2, r3
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f967 	bl	800b34e <HAL_SYSTICK_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e00e      	b.n	800b0a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b0f      	cmp	r3, #15
 800b08e:	d80a      	bhi.n	800b0a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b090:	2200      	movs	r2, #0
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	f000 f92f 	bl	800b2fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b09c:	4a06      	ldr	r2, [pc, #24]	; (800b0b8 <HAL_InitTick+0x5c>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e000      	b.n	800b0a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200000a8 	.word	0x200000a8
 800b0b4:	20000220 	.word	0x20000220
 800b0b8:	2000021c 	.word	0x2000021c

0800b0bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b0c0:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <HAL_IncTick+0x20>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <HAL_IncTick+0x24>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	4a04      	ldr	r2, [pc, #16]	; (800b0e0 <HAL_IncTick+0x24>)
 800b0ce:	6013      	str	r3, [r2, #0]
}
 800b0d0:	bf00      	nop
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000220 	.word	0x20000220
 800b0e0:	20005e04 	.word	0x20005e04

0800b0e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	af00      	add	r7, sp, #0
  return uwTick;
 800b0e8:	4b03      	ldr	r3, [pc, #12]	; (800b0f8 <HAL_GetTick+0x14>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20005e04 	.word	0x20005e04

0800b0fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b104:	f7ff ffee 	bl	800b0e4 <HAL_GetTick>
 800b108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b114:	d005      	beq.n	800b122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b116:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <HAL_Delay+0x44>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b122:	bf00      	nop
 800b124:	f7ff ffde 	bl	800b0e4 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	d8f7      	bhi.n	800b124 <HAL_Delay+0x28>
  {
  }
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000220 	.word	0x20000220

0800b144 <__NVIC_SetPriorityGrouping>:
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f003 0307 	and.w	r3, r3, #7
 800b152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b154:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <__NVIC_SetPriorityGrouping+0x44>)
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b160:	4013      	ands	r3, r2
 800b162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b16c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b176:	4a04      	ldr	r2, [pc, #16]	; (800b188 <__NVIC_SetPriorityGrouping+0x44>)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	60d3      	str	r3, [r2, #12]
}
 800b17c:	bf00      	nop
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	e000ed00 	.word	0xe000ed00

0800b18c <__NVIC_GetPriorityGrouping>:
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b190:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <__NVIC_GetPriorityGrouping+0x18>)
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	f003 0307 	and.w	r3, r3, #7
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	e000ed00 	.word	0xe000ed00

0800b1a8 <__NVIC_EnableIRQ>:
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	db0b      	blt.n	800b1d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	f003 021f 	and.w	r2, r3, #31
 800b1c0:	4907      	ldr	r1, [pc, #28]	; (800b1e0 <__NVIC_EnableIRQ+0x38>)
 800b1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c6:	095b      	lsrs	r3, r3, #5
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	fa00 f202 	lsl.w	r2, r0, r2
 800b1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b1d2:	bf00      	nop
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	e000e100 	.word	0xe000e100

0800b1e4 <__NVIC_SetPriority>:
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	6039      	str	r1, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	db0a      	blt.n	800b20e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	490c      	ldr	r1, [pc, #48]	; (800b230 <__NVIC_SetPriority+0x4c>)
 800b1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b202:	0112      	lsls	r2, r2, #4
 800b204:	b2d2      	uxtb	r2, r2
 800b206:	440b      	add	r3, r1
 800b208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b20c:	e00a      	b.n	800b224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	4908      	ldr	r1, [pc, #32]	; (800b234 <__NVIC_SetPriority+0x50>)
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	3b04      	subs	r3, #4
 800b21c:	0112      	lsls	r2, r2, #4
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	440b      	add	r3, r1
 800b222:	761a      	strb	r2, [r3, #24]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	e000e100 	.word	0xe000e100
 800b234:	e000ed00 	.word	0xe000ed00

0800b238 <NVIC_EncodePriority>:
{
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	; 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f1c3 0307 	rsb	r3, r3, #7
 800b252:	2b04      	cmp	r3, #4
 800b254:	bf28      	it	cs
 800b256:	2304      	movcs	r3, #4
 800b258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	3304      	adds	r3, #4
 800b25e:	2b06      	cmp	r3, #6
 800b260:	d902      	bls.n	800b268 <NVIC_EncodePriority+0x30>
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	3b03      	subs	r3, #3
 800b266:	e000      	b.n	800b26a <NVIC_EncodePriority+0x32>
 800b268:	2300      	movs	r3, #0
 800b26a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b26c:	f04f 32ff 	mov.w	r2, #4294967295
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	43da      	mvns	r2, r3
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	401a      	ands	r2, r3
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b280:	f04f 31ff 	mov.w	r1, #4294967295
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	fa01 f303 	lsl.w	r3, r1, r3
 800b28a:	43d9      	mvns	r1, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b290:	4313      	orrs	r3, r2
}
 800b292:	4618      	mov	r0, r3
 800b294:	3724      	adds	r7, #36	; 0x24
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <SysTick_Config>:
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2b0:	d301      	bcc.n	800b2b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e00f      	b.n	800b2d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b2b6:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <SysTick_Config+0x40>)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b2be:	210f      	movs	r1, #15
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	f7ff ff8e 	bl	800b1e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <SysTick_Config+0x40>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b2ce:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <SysTick_Config+0x40>)
 800b2d0:	2207      	movs	r2, #7
 800b2d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	e000e010 	.word	0xe000e010

0800b2e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff ff29 	bl	800b144 <__NVIC_SetPriorityGrouping>
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	4603      	mov	r3, r0
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	607a      	str	r2, [r7, #4]
 800b306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b308:	2300      	movs	r3, #0
 800b30a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b30c:	f7ff ff3e 	bl	800b18c <__NVIC_GetPriorityGrouping>
 800b310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	68b9      	ldr	r1, [r7, #8]
 800b316:	6978      	ldr	r0, [r7, #20]
 800b318:	f7ff ff8e 	bl	800b238 <NVIC_EncodePriority>
 800b31c:	4602      	mov	r2, r0
 800b31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b322:	4611      	mov	r1, r2
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff ff5d 	bl	800b1e4 <__NVIC_SetPriority>
}
 800b32a:	bf00      	nop
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	af00      	add	r7, sp, #0
 800b338:	4603      	mov	r3, r0
 800b33a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b33c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff ff31 	bl	800b1a8 <__NVIC_EnableIRQ>
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b082      	sub	sp, #8
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff ffa2 	bl	800b2a0 <SysTick_Config>
 800b35c:	4603      	mov	r3, r0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_DMA_Start_IT+0x26>
 800b388:	2302      	movs	r3, #2
 800b38a:	e040      	b.n	800b40e <HAL_DMA_Start_IT+0xa8>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d12f      	bne.n	800b400 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 f82e 	bl	800b416 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3be:	223f      	movs	r2, #63	; 0x3f
 800b3c0:	409a      	lsls	r2, r3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f042 0216 	orr.w	r2, r2, #22
 800b3d4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d007      	beq.n	800b3ee <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f042 0208 	orr.w	r2, r2, #8
 800b3ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f042 0201 	orr.w	r2, r2, #1
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e005      	b.n	800b40c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b408:	2302      	movs	r3, #2
 800b40a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b432:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	2b40      	cmp	r3, #64	; 0x40
 800b442:	d108      	bne.n	800b456 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b454:	e007      	b.n	800b466 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	60da      	str	r2, [r3, #12]
}
 800b466:	bf00      	nop
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b474:	b480      	push	{r7}
 800b476:	b089      	sub	sp, #36	; 0x24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b482:	2300      	movs	r3, #0
 800b484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b486:	2300      	movs	r3, #0
 800b488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b48a:	2300      	movs	r3, #0
 800b48c:	61fb      	str	r3, [r7, #28]
 800b48e:	e177      	b.n	800b780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b490:	2201      	movs	r2, #1
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	fa02 f303 	lsl.w	r3, r2, r3
 800b498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	f040 8166 	bne.w	800b77a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d005      	beq.n	800b4c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d130      	bne.n	800b528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d6:	43db      	mvns	r3, r3
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	4013      	ands	r3, r2
 800b4dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68da      	ldr	r2, [r3, #12]
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	fa02 f303 	lsl.w	r3, r2, r3
 800b504:	43db      	mvns	r3, r3
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	4013      	ands	r3, r2
 800b50a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	091b      	lsrs	r3, r3, #4
 800b512:	f003 0201 	and.w	r2, r3, #1
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	fa02 f303 	lsl.w	r3, r2, r3
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	4313      	orrs	r3, r2
 800b520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	2b03      	cmp	r3, #3
 800b532:	d017      	beq.n	800b564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	2203      	movs	r2, #3
 800b540:	fa02 f303 	lsl.w	r3, r2, r3
 800b544:	43db      	mvns	r3, r3
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	4013      	ands	r3, r2
 800b54a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689a      	ldr	r2, [r3, #8]
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	fa02 f303 	lsl.w	r3, r2, r3
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d123      	bne.n	800b5b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	08da      	lsrs	r2, r3, #3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3208      	adds	r2, #8
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	220f      	movs	r2, #15
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	43db      	mvns	r3, r3
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	4013      	ands	r3, r2
 800b592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	08da      	lsrs	r2, r3, #3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3208      	adds	r2, #8
 800b5b2:	69b9      	ldr	r1, [r7, #24]
 800b5b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f003 0203 	and.w	r2, r3, #3
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80c0 	beq.w	800b77a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	4b66      	ldr	r3, [pc, #408]	; (800b798 <HAL_GPIO_Init+0x324>)
 800b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b602:	4a65      	ldr	r2, [pc, #404]	; (800b798 <HAL_GPIO_Init+0x324>)
 800b604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b608:	6453      	str	r3, [r2, #68]	; 0x44
 800b60a:	4b63      	ldr	r3, [pc, #396]	; (800b798 <HAL_GPIO_Init+0x324>)
 800b60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b616:	4a61      	ldr	r2, [pc, #388]	; (800b79c <HAL_GPIO_Init+0x328>)
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	089b      	lsrs	r3, r3, #2
 800b61c:	3302      	adds	r3, #2
 800b61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	220f      	movs	r2, #15
 800b62e:	fa02 f303 	lsl.w	r3, r2, r3
 800b632:	43db      	mvns	r3, r3
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	4013      	ands	r3, r2
 800b638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a58      	ldr	r2, [pc, #352]	; (800b7a0 <HAL_GPIO_Init+0x32c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d037      	beq.n	800b6b2 <HAL_GPIO_Init+0x23e>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a57      	ldr	r2, [pc, #348]	; (800b7a4 <HAL_GPIO_Init+0x330>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d031      	beq.n	800b6ae <HAL_GPIO_Init+0x23a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a56      	ldr	r2, [pc, #344]	; (800b7a8 <HAL_GPIO_Init+0x334>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d02b      	beq.n	800b6aa <HAL_GPIO_Init+0x236>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a55      	ldr	r2, [pc, #340]	; (800b7ac <HAL_GPIO_Init+0x338>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d025      	beq.n	800b6a6 <HAL_GPIO_Init+0x232>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a54      	ldr	r2, [pc, #336]	; (800b7b0 <HAL_GPIO_Init+0x33c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d01f      	beq.n	800b6a2 <HAL_GPIO_Init+0x22e>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a53      	ldr	r2, [pc, #332]	; (800b7b4 <HAL_GPIO_Init+0x340>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d019      	beq.n	800b69e <HAL_GPIO_Init+0x22a>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a52      	ldr	r2, [pc, #328]	; (800b7b8 <HAL_GPIO_Init+0x344>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d013      	beq.n	800b69a <HAL_GPIO_Init+0x226>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a51      	ldr	r2, [pc, #324]	; (800b7bc <HAL_GPIO_Init+0x348>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d00d      	beq.n	800b696 <HAL_GPIO_Init+0x222>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a50      	ldr	r2, [pc, #320]	; (800b7c0 <HAL_GPIO_Init+0x34c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d007      	beq.n	800b692 <HAL_GPIO_Init+0x21e>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a4f      	ldr	r2, [pc, #316]	; (800b7c4 <HAL_GPIO_Init+0x350>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d101      	bne.n	800b68e <HAL_GPIO_Init+0x21a>
 800b68a:	2309      	movs	r3, #9
 800b68c:	e012      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b68e:	230a      	movs	r3, #10
 800b690:	e010      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b692:	2308      	movs	r3, #8
 800b694:	e00e      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b696:	2307      	movs	r3, #7
 800b698:	e00c      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b69a:	2306      	movs	r3, #6
 800b69c:	e00a      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b69e:	2305      	movs	r3, #5
 800b6a0:	e008      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b6a2:	2304      	movs	r3, #4
 800b6a4:	e006      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e004      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	e002      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <HAL_GPIO_Init+0x240>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	f002 0203 	and.w	r2, r2, #3
 800b6ba:	0092      	lsls	r2, r2, #2
 800b6bc:	4093      	lsls	r3, r2
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6c4:	4935      	ldr	r1, [pc, #212]	; (800b79c <HAL_GPIO_Init+0x328>)
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	089b      	lsrs	r3, r3, #2
 800b6ca:	3302      	adds	r3, #2
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b6d2:	4b3d      	ldr	r3, [pc, #244]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	43db      	mvns	r3, r3
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	4013      	ands	r3, r2
 800b6e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b6f6:	4a34      	ldr	r2, [pc, #208]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b6fc:	4b32      	ldr	r3, [pc, #200]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	43db      	mvns	r3, r3
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	4013      	ands	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b720:	4a29      	ldr	r2, [pc, #164]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b726:	4b28      	ldr	r3, [pc, #160]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	43db      	mvns	r3, r3
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	4013      	ands	r3, r2
 800b734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b74a:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b750:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	43db      	mvns	r3, r3
 800b75a:	69ba      	ldr	r2, [r7, #24]
 800b75c:	4013      	ands	r3, r2
 800b75e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	4313      	orrs	r3, r2
 800b772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b774:	4a14      	ldr	r2, [pc, #80]	; (800b7c8 <HAL_GPIO_Init+0x354>)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	3301      	adds	r3, #1
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	2b0f      	cmp	r3, #15
 800b784:	f67f ae84 	bls.w	800b490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	3724      	adds	r7, #36	; 0x24
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	40023800 	.word	0x40023800
 800b79c:	40013800 	.word	0x40013800
 800b7a0:	40020000 	.word	0x40020000
 800b7a4:	40020400 	.word	0x40020400
 800b7a8:	40020800 	.word	0x40020800
 800b7ac:	40020c00 	.word	0x40020c00
 800b7b0:	40021000 	.word	0x40021000
 800b7b4:	40021400 	.word	0x40021400
 800b7b8:	40021800 	.word	0x40021800
 800b7bc:	40021c00 	.word	0x40021c00
 800b7c0:	40022000 	.word	0x40022000
 800b7c4:	40022400 	.word	0x40022400
 800b7c8:	40013c00 	.word	0x40013c00

0800b7cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	691a      	ldr	r2, [r3, #16]
 800b7dc:	887b      	ldrh	r3, [r7, #2]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	73fb      	strb	r3, [r7, #15]
 800b7e8:	e001      	b.n	800b7ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	807b      	strh	r3, [r7, #2]
 800b808:	4613      	mov	r3, r2
 800b80a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b80c:	787b      	ldrb	r3, [r7, #1]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b812:	887a      	ldrh	r2, [r7, #2]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b818:	e003      	b.n	800b822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b81a:	887b      	ldrh	r3, [r7, #2]
 800b81c:	041a      	lsls	r2, r3, #16
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	619a      	str	r2, [r3, #24]
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b840:	887a      	ldrh	r2, [r7, #2]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	4013      	ands	r3, r2
 800b846:	041a      	lsls	r2, r3, #16
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	43d9      	mvns	r1, r3
 800b84c:	887b      	ldrh	r3, [r7, #2]
 800b84e:	400b      	ands	r3, r1
 800b850:	431a      	orrs	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	619a      	str	r2, [r3, #24]
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b86e:	4b08      	ldr	r3, [pc, #32]	; (800b890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b870:	695a      	ldr	r2, [r3, #20]
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	4013      	ands	r3, r2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d006      	beq.n	800b888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b87a:	4a05      	ldr	r2, [pc, #20]	; (800b890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	4618      	mov	r0, r3
 800b884:	f000 f806 	bl	800b894 <HAL_GPIO_EXTI_Callback>
  }
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	40013c00 	.word	0x40013c00

0800b894 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
	...

0800b8ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e12b      	b.n	800bb16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7f7 fa4a 	bl	8002d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2224      	movs	r2, #36	; 0x24
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0201 	bic.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b90e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b910:	f001 fc76 	bl	800d200 <HAL_RCC_GetPCLK1Freq>
 800b914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4a81      	ldr	r2, [pc, #516]	; (800bb20 <HAL_I2C_Init+0x274>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d807      	bhi.n	800b930 <HAL_I2C_Init+0x84>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4a80      	ldr	r2, [pc, #512]	; (800bb24 <HAL_I2C_Init+0x278>)
 800b924:	4293      	cmp	r3, r2
 800b926:	bf94      	ite	ls
 800b928:	2301      	movls	r3, #1
 800b92a:	2300      	movhi	r3, #0
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	e006      	b.n	800b93e <HAL_I2C_Init+0x92>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a7d      	ldr	r2, [pc, #500]	; (800bb28 <HAL_I2C_Init+0x27c>)
 800b934:	4293      	cmp	r3, r2
 800b936:	bf94      	ite	ls
 800b938:	2301      	movls	r3, #1
 800b93a:	2300      	movhi	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0e7      	b.n	800bb16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4a78      	ldr	r2, [pc, #480]	; (800bb2c <HAL_I2C_Init+0x280>)
 800b94a:	fba2 2303 	umull	r2, r3, r2, r3
 800b94e:	0c9b      	lsrs	r3, r3, #18
 800b950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	430a      	orrs	r2, r1
 800b964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	4a6a      	ldr	r2, [pc, #424]	; (800bb20 <HAL_I2C_Init+0x274>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d802      	bhi.n	800b980 <HAL_I2C_Init+0xd4>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	3301      	adds	r3, #1
 800b97e:	e009      	b.n	800b994 <HAL_I2C_Init+0xe8>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b986:	fb02 f303 	mul.w	r3, r2, r3
 800b98a:	4a69      	ldr	r2, [pc, #420]	; (800bb30 <HAL_I2C_Init+0x284>)
 800b98c:	fba2 2303 	umull	r2, r3, r2, r3
 800b990:	099b      	lsrs	r3, r3, #6
 800b992:	3301      	adds	r3, #1
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	430b      	orrs	r3, r1
 800b99a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b9a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	495c      	ldr	r1, [pc, #368]	; (800bb20 <HAL_I2C_Init+0x274>)
 800b9b0:	428b      	cmp	r3, r1
 800b9b2:	d819      	bhi.n	800b9e8 <HAL_I2C_Init+0x13c>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	1e59      	subs	r1, r3, #1
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9c2:	1c59      	adds	r1, r3, #1
 800b9c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b9c8:	400b      	ands	r3, r1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <HAL_I2C_Init+0x138>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1e59      	subs	r1, r3, #1
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9dc:	3301      	adds	r3, #1
 800b9de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9e2:	e051      	b.n	800ba88 <HAL_I2C_Init+0x1dc>
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	e04f      	b.n	800ba88 <HAL_I2C_Init+0x1dc>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d111      	bne.n	800ba14 <HAL_I2C_Init+0x168>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	1e58      	subs	r0, r3, #1
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6859      	ldr	r1, [r3, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	440b      	add	r3, r1
 800b9fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba02:	3301      	adds	r3, #1
 800ba04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bf0c      	ite	eq
 800ba0c:	2301      	moveq	r3, #1
 800ba0e:	2300      	movne	r3, #0
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	e012      	b.n	800ba3a <HAL_I2C_Init+0x18e>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	1e58      	subs	r0, r3, #1
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6859      	ldr	r1, [r3, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	0099      	lsls	r1, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bf0c      	ite	eq
 800ba34:	2301      	moveq	r3, #1
 800ba36:	2300      	movne	r3, #0
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <HAL_I2C_Init+0x196>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e022      	b.n	800ba88 <HAL_I2C_Init+0x1dc>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10e      	bne.n	800ba68 <HAL_I2C_Init+0x1bc>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	1e58      	subs	r0, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6859      	ldr	r1, [r3, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	440b      	add	r3, r1
 800ba58:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba66:	e00f      	b.n	800ba88 <HAL_I2C_Init+0x1dc>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	1e58      	subs	r0, r3, #1
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6859      	ldr	r1, [r3, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	440b      	add	r3, r1
 800ba76:	0099      	lsls	r1, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba7e:	3301      	adds	r3, #1
 800ba80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	6809      	ldr	r1, [r1, #0]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	69da      	ldr	r2, [r3, #28]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	431a      	orrs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800bab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	6911      	ldr	r1, [r2, #16]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	68d2      	ldr	r2, [r2, #12]
 800bac2:	4311      	orrs	r1, r2
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	6812      	ldr	r2, [r2, #0]
 800bac8:	430b      	orrs	r3, r1
 800baca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	695a      	ldr	r2, [r3, #20]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	431a      	orrs	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f042 0201 	orr.w	r2, r2, #1
 800baf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	000186a0 	.word	0x000186a0
 800bb24:	001e847f 	.word	0x001e847f
 800bb28:	003d08ff 	.word	0x003d08ff
 800bb2c:	431bde83 	.word	0x431bde83
 800bb30:	10624dd3 	.word	0x10624dd3

0800bb34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	461a      	mov	r2, r3
 800bb42:	4603      	mov	r3, r0
 800bb44:	817b      	strh	r3, [r7, #10]
 800bb46:	460b      	mov	r3, r1
 800bb48:	813b      	strh	r3, [r7, #8]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bb4e:	f7ff fac9 	bl	800b0e4 <HAL_GetTick>
 800bb52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b20      	cmp	r3, #32
 800bb5e:	f040 80d9 	bne.w	800bd14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	2319      	movs	r3, #25
 800bb68:	2201      	movs	r2, #1
 800bb6a:	496d      	ldr	r1, [pc, #436]	; (800bd20 <HAL_I2C_Mem_Write+0x1ec>)
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 fc7f 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e0cc      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d101      	bne.n	800bb8a <HAL_I2C_Mem_Write+0x56>
 800bb86:	2302      	movs	r3, #2
 800bb88:	e0c5      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d007      	beq.n	800bbb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0201 	orr.w	r2, r2, #1
 800bbae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2221      	movs	r2, #33	; 0x21
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2240      	movs	r2, #64	; 0x40
 800bbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4a4d      	ldr	r2, [pc, #308]	; (800bd24 <HAL_I2C_Mem_Write+0x1f0>)
 800bbf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbf2:	88f8      	ldrh	r0, [r7, #6]
 800bbf4:	893a      	ldrh	r2, [r7, #8]
 800bbf6:	8979      	ldrh	r1, [r7, #10]
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	4603      	mov	r3, r0
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 fab6 	bl	800c174 <I2C_RequestMemoryWrite>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d052      	beq.n	800bcb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e081      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f000 fd00 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00d      	beq.n	800bc3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d107      	bne.n	800bc3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e06b      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b04      	cmp	r3, #4
 800bc7a:	d11b      	bne.n	800bcb4 <HAL_I2C_Mem_Write+0x180>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d017      	beq.n	800bcb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	781a      	ldrb	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	3b01      	subs	r3, #1
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1aa      	bne.n	800bc12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 fcec 	bl	800c69e <I2C_WaitOnBTFFlagUntilTimeout>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00d      	beq.n	800bce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	2b04      	cmp	r3, #4
 800bcd2:	d107      	bne.n	800bce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e016      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	e000      	b.n	800bd16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bd14:	2302      	movs	r3, #2
  }
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	00100002 	.word	0x00100002
 800bd24:	ffff0000 	.word	0xffff0000

0800bd28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08c      	sub	sp, #48	; 0x30
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	4608      	mov	r0, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	461a      	mov	r2, r3
 800bd36:	4603      	mov	r3, r0
 800bd38:	817b      	strh	r3, [r7, #10]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	813b      	strh	r3, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd42:	f7ff f9cf 	bl	800b0e4 <HAL_GetTick>
 800bd46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b20      	cmp	r3, #32
 800bd52:	f040 8208 	bne.w	800c166 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	2319      	movs	r3, #25
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	497b      	ldr	r1, [pc, #492]	; (800bf4c <HAL_I2C_Mem_Read+0x224>)
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 fb85 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e1fb      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d101      	bne.n	800bd7e <HAL_I2C_Mem_Read+0x56>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e1f4      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d007      	beq.n	800bda4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f042 0201 	orr.w	r2, r2, #1
 800bda2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2222      	movs	r2, #34	; 0x22
 800bdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2240      	movs	r2, #64	; 0x40
 800bdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bdd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a5b      	ldr	r2, [pc, #364]	; (800bf50 <HAL_I2C_Mem_Read+0x228>)
 800bde4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bde6:	88f8      	ldrh	r0, [r7, #6]
 800bde8:	893a      	ldrh	r2, [r7, #8]
 800bdea:	8979      	ldrh	r1, [r7, #10]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 fa52 	bl	800c2a0 <I2C_RequestMemoryRead>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e1b0      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d113      	bne.n	800be36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be0e:	2300      	movs	r3, #0
 800be10:	623b      	str	r3, [r7, #32]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	623b      	str	r3, [r7, #32]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	623b      	str	r3, [r7, #32]
 800be22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	e184      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d11b      	bne.n	800be76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be4e:	2300      	movs	r3, #0
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	695b      	ldr	r3, [r3, #20]
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	61fb      	str	r3, [r7, #28]
 800be62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	e164      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d11b      	bne.n	800beb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be9e:	2300      	movs	r3, #0
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	e144      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800becc:	e138      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	f200 80f1 	bhi.w	800c0ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d123      	bne.n	800bf28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 fc1b 	bl	800c720 <I2C_WaitOnRXNEFlagUntilTimeout>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e139      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	691a      	ldr	r2, [r3, #16]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf10:	3b01      	subs	r3, #1
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf26:	e10b      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d14e      	bne.n	800bfce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	2200      	movs	r2, #0
 800bf38:	4906      	ldr	r1, [pc, #24]	; (800bf54 <HAL_I2C_Mem_Read+0x22c>)
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 fa98 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d008      	beq.n	800bf58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e10e      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
 800bf4a:	bf00      	nop
 800bf4c:	00100002 	.word	0x00100002
 800bf50:	ffff0000 	.word	0xffff0000
 800bf54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	691a      	ldr	r2, [r3, #16]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf84:	3b01      	subs	r3, #1
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	3b01      	subs	r3, #1
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	b2d2      	uxtb	r2, r2
 800bfa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfcc:	e0b8      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4966      	ldr	r1, [pc, #408]	; (800c170 <HAL_I2C_Mem_Read+0x448>)
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fa49 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e0bf      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691a      	ldr	r2, [r3, #16]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c014:	3b01      	subs	r3, #1
 800c016:	b29a      	uxth	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c020:	b29b      	uxth	r3, r3
 800c022:	3b01      	subs	r3, #1
 800c024:	b29a      	uxth	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	2200      	movs	r2, #0
 800c032:	494f      	ldr	r1, [pc, #316]	; (800c170 <HAL_I2C_Mem_Read+0x448>)
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 fa1b 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e091      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	691a      	ldr	r2, [r3, #16]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	1c5a      	adds	r2, r3, #1
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c070:	3b01      	subs	r3, #1
 800c072:	b29a      	uxth	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b29a      	uxth	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	691a      	ldr	r2, [r3, #16]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c0b8:	e042      	b.n	800c140 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 fb2e 	bl	800c720 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e04c      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d118      	bne.n	800c140 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	691a      	ldr	r2, [r3, #16]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	b2d2      	uxtb	r2, r2
 800c11a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c12a:	3b01      	subs	r3, #1
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c136:	b29b      	uxth	r3, r3
 800c138:	3b01      	subs	r3, #1
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c144:	2b00      	cmp	r3, #0
 800c146:	f47f aec2 	bne.w	800bece <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	e000      	b.n	800c168 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c166:	2302      	movs	r3, #2
  }
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3728      	adds	r7, #40	; 0x28
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	00010004 	.word	0x00010004

0800c174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af02      	add	r7, sp, #8
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	4608      	mov	r0, r1
 800c17e:	4611      	mov	r1, r2
 800c180:	461a      	mov	r2, r3
 800c182:	4603      	mov	r3, r0
 800c184:	817b      	strh	r3, [r7, #10]
 800c186:	460b      	mov	r3, r1
 800c188:	813b      	strh	r3, [r7, #8]
 800c18a:	4613      	mov	r3, r2
 800c18c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c19c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 f960 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00d      	beq.n	800c1d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1c4:	d103      	bne.n	800c1ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e05f      	b.n	800c292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c1d2:	897b      	ldrh	r3, [r7, #10]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c1e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	6a3a      	ldr	r2, [r7, #32]
 800c1e6:	492d      	ldr	r1, [pc, #180]	; (800c29c <I2C_RequestMemoryWrite+0x128>)
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 f998 	bl	800c51e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e04c      	b.n	800c292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c210:	6a39      	ldr	r1, [r7, #32]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fa02 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00d      	beq.n	800c23a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c222:	2b04      	cmp	r3, #4
 800c224:	d107      	bne.n	800c236 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e02b      	b.n	800c292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d105      	bne.n	800c24c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c240:	893b      	ldrh	r3, [r7, #8]
 800c242:	b2da      	uxtb	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	611a      	str	r2, [r3, #16]
 800c24a:	e021      	b.n	800c290 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c24c:	893b      	ldrh	r3, [r7, #8]
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	b29b      	uxth	r3, r3
 800c252:	b2da      	uxtb	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25c:	6a39      	ldr	r1, [r7, #32]
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f000 f9dc 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00d      	beq.n	800c286 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d107      	bne.n	800c282 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e005      	b.n	800c292 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c286:	893b      	ldrh	r3, [r7, #8]
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	00010002 	.word	0x00010002

0800c2a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	817b      	strh	r3, [r7, #10]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	813b      	strh	r3, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 f8c2 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00d      	beq.n	800c30e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c300:	d103      	bne.n	800c30a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c30a:	2303      	movs	r3, #3
 800c30c:	e0aa      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c30e:	897b      	ldrh	r3, [r7, #10]
 800c310:	b2db      	uxtb	r3, r3
 800c312:	461a      	mov	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c31c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	6a3a      	ldr	r2, [r7, #32]
 800c322:	4952      	ldr	r1, [pc, #328]	; (800c46c <I2C_RequestMemoryRead+0x1cc>)
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f8fa 	bl	800c51e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e097      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c334:	2300      	movs	r3, #0
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34c:	6a39      	ldr	r1, [r7, #32]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 f964 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00d      	beq.n	800c376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d107      	bne.n	800c372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e076      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d105      	bne.n	800c388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c37c:	893b      	ldrh	r3, [r7, #8]
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	611a      	str	r2, [r3, #16]
 800c386:	e021      	b.n	800c3cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c388:	893b      	ldrh	r3, [r7, #8]
 800c38a:	0a1b      	lsrs	r3, r3, #8
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c398:	6a39      	ldr	r1, [r7, #32]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f93e 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00d      	beq.n	800c3c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	d107      	bne.n	800c3be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e050      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c3c2:	893b      	ldrh	r3, [r7, #8]
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ce:	6a39      	ldr	r1, [r7, #32]
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 f923 	bl	800c61c <I2C_WaitOnTXEFlagUntilTimeout>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00d      	beq.n	800c3f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	d107      	bne.n	800c3f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e035      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	2200      	movs	r2, #0
 800c410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f000 f82b 	bl	800c470 <I2C_WaitOnFlagUntilTimeout>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00d      	beq.n	800c43c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42e:	d103      	bne.n	800c438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	e013      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c43c:	897b      	ldrh	r3, [r7, #10]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f043 0301 	orr.w	r3, r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	6a3a      	ldr	r2, [r7, #32]
 800c450:	4906      	ldr	r1, [pc, #24]	; (800c46c <I2C_RequestMemoryRead+0x1cc>)
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f000 f863 	bl	800c51e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e000      	b.n	800c464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	00010002 	.word	0x00010002

0800c470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	4613      	mov	r3, r2
 800c47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c480:	e025      	b.n	800c4ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c488:	d021      	beq.n	800c4ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c48a:	f7fe fe2b 	bl	800b0e4 <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d302      	bcc.n	800c4a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d116      	bne.n	800c4ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2220      	movs	r2, #32
 800c4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	f043 0220 	orr.w	r2, r3, #32
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e023      	b.n	800c516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	0c1b      	lsrs	r3, r3, #16
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d10d      	bne.n	800c4f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	43da      	mvns	r2, r3
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bf0c      	ite	eq
 800c4ea:	2301      	moveq	r3, #1
 800c4ec:	2300      	movne	r3, #0
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	e00c      	b.n	800c50e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	43da      	mvns	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	4013      	ands	r3, r2
 800c500:	b29b      	uxth	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	bf0c      	ite	eq
 800c506:	2301      	moveq	r3, #1
 800c508:	2300      	movne	r3, #0
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	461a      	mov	r2, r3
 800c50e:	79fb      	ldrb	r3, [r7, #7]
 800c510:	429a      	cmp	r2, r3
 800c512:	d0b6      	beq.n	800c482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	607a      	str	r2, [r7, #4]
 800c52a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c52c:	e051      	b.n	800c5d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	695b      	ldr	r3, [r3, #20]
 800c534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c53c:	d123      	bne.n	800c586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c54c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c572:	f043 0204 	orr.w	r2, r3, #4
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e046      	b.n	800c614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58c:	d021      	beq.n	800c5d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c58e:	f7fe fda9 	bl	800b0e4 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d302      	bcc.n	800c5a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d116      	bne.n	800c5d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5be:	f043 0220 	orr.w	r2, r3, #32
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e020      	b.n	800c614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	0c1b      	lsrs	r3, r3, #16
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d10c      	bne.n	800c5f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	43da      	mvns	r2, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bf14      	ite	ne
 800c5ee:	2301      	movne	r3, #1
 800c5f0:	2300      	moveq	r3, #0
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	e00b      	b.n	800c60e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	43da      	mvns	r2, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	4013      	ands	r3, r2
 800c602:	b29b      	uxth	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	bf14      	ite	ne
 800c608:	2301      	movne	r3, #1
 800c60a:	2300      	moveq	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d18d      	bne.n	800c52e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c628:	e02d      	b.n	800c686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f000 f8ce 	bl	800c7cc <I2C_IsAcknowledgeFailed>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e02d      	b.n	800c696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c640:	d021      	beq.n	800c686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c642:	f7fe fd4f 	bl	800b0e4 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d302      	bcc.n	800c658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d116      	bne.n	800c686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2220      	movs	r2, #32
 800c662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	f043 0220 	orr.w	r2, r3, #32
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e007      	b.n	800c696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c690:	2b80      	cmp	r3, #128	; 0x80
 800c692:	d1ca      	bne.n	800c62a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b084      	sub	sp, #16
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c6aa:	e02d      	b.n	800c708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 f88d 	bl	800c7cc <I2C_IsAcknowledgeFailed>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e02d      	b.n	800c718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c2:	d021      	beq.n	800c708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6c4:	f7fe fd0e 	bl	800b0e4 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d302      	bcc.n	800c6da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d116      	bne.n	800c708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f4:	f043 0220 	orr.w	r2, r3, #32
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e007      	b.n	800c718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	2b04      	cmp	r3, #4
 800c714:	d1ca      	bne.n	800c6ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c72c:	e042      	b.n	800c7b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	f003 0310 	and.w	r3, r3, #16
 800c738:	2b10      	cmp	r3, #16
 800c73a:	d119      	bne.n	800c770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f06f 0210 	mvn.w	r2, #16
 800c744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2220      	movs	r2, #32
 800c750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e029      	b.n	800c7c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c770:	f7fe fcb8 	bl	800b0e4 <HAL_GetTick>
 800c774:	4602      	mov	r2, r0
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d302      	bcc.n	800c786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d116      	bne.n	800c7b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2220      	movs	r2, #32
 800c790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a0:	f043 0220 	orr.w	r2, r3, #32
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e007      	b.n	800c7c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7be:	2b40      	cmp	r3, #64	; 0x40
 800c7c0:	d1b5      	bne.n	800c72e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	695b      	ldr	r3, [r3, #20]
 800c7da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7e2:	d11b      	bne.n	800c81c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c7ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2220      	movs	r2, #32
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	f043 0204 	orr.w	r2, r3, #4
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e000      	b.n	800c81e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b20      	cmp	r3, #32
 800c83e:	d129      	bne.n	800c894 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2224      	movs	r2, #36	; 0x24
 800c844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f022 0201 	bic.w	r2, r2, #1
 800c856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0210 	bic.w	r2, r2, #16
 800c866:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	430a      	orrs	r2, r1
 800c876:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0201 	orr.w	r2, r2, #1
 800c886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	e000      	b.n	800c896 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800c894:	2302      	movs	r3, #2
  }
}
 800c896:	4618      	mov	r0, r3
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b20      	cmp	r3, #32
 800c8ba:	d12a      	bne.n	800c912 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2224      	movs	r2, #36	; 0x24
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0201 	bic.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800c8dc:	89fb      	ldrh	r3, [r7, #14]
 800c8de:	f023 030f 	bic.w	r3, r3, #15
 800c8e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	89fb      	ldrh	r3, [r7, #14]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	89fa      	ldrh	r2, [r7, #14]
 800c8f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f042 0201 	orr.w	r2, r2, #1
 800c904:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2220      	movs	r2, #32
 800c90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	e000      	b.n	800c914 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800c912:	2302      	movs	r3, #2
  }
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e267      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d075      	beq.n	800ca2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c93e:	4b88      	ldr	r3, [pc, #544]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	f003 030c 	and.w	r3, r3, #12
 800c946:	2b04      	cmp	r3, #4
 800c948:	d00c      	beq.n	800c964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c94a:	4b85      	ldr	r3, [pc, #532]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c952:	2b08      	cmp	r3, #8
 800c954:	d112      	bne.n	800c97c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c956:	4b82      	ldr	r3, [pc, #520]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c95e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c962:	d10b      	bne.n	800c97c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c964:	4b7e      	ldr	r3, [pc, #504]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d05b      	beq.n	800ca28 <HAL_RCC_OscConfig+0x108>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d157      	bne.n	800ca28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e242      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c984:	d106      	bne.n	800c994 <HAL_RCC_OscConfig+0x74>
 800c986:	4b76      	ldr	r3, [pc, #472]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a75      	ldr	r2, [pc, #468]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c98c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	e01d      	b.n	800c9d0 <HAL_RCC_OscConfig+0xb0>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c99c:	d10c      	bne.n	800c9b8 <HAL_RCC_OscConfig+0x98>
 800c99e:	4b70      	ldr	r3, [pc, #448]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a6f      	ldr	r2, [pc, #444]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c9a8:	6013      	str	r3, [r2, #0]
 800c9aa:	4b6d      	ldr	r3, [pc, #436]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a6c      	ldr	r2, [pc, #432]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	e00b      	b.n	800c9d0 <HAL_RCC_OscConfig+0xb0>
 800c9b8:	4b69      	ldr	r3, [pc, #420]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a68      	ldr	r2, [pc, #416]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	4b66      	ldr	r3, [pc, #408]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a65      	ldr	r2, [pc, #404]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d013      	beq.n	800ca00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9d8:	f7fe fb84 	bl	800b0e4 <HAL_GetTick>
 800c9dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c9e0:	f7fe fb80 	bl	800b0e4 <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b64      	cmp	r3, #100	; 0x64
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e207      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9f2:	4b5b      	ldr	r3, [pc, #364]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0f0      	beq.n	800c9e0 <HAL_RCC_OscConfig+0xc0>
 800c9fe:	e014      	b.n	800ca2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca00:	f7fe fb70 	bl	800b0e4 <HAL_GetTick>
 800ca04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca06:	e008      	b.n	800ca1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca08:	f7fe fb6c 	bl	800b0e4 <HAL_GetTick>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	2b64      	cmp	r3, #100	; 0x64
 800ca14:	d901      	bls.n	800ca1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e1f3      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca1a:	4b51      	ldr	r3, [pc, #324]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1f0      	bne.n	800ca08 <HAL_RCC_OscConfig+0xe8>
 800ca26:	e000      	b.n	800ca2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0302 	and.w	r3, r3, #2
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d063      	beq.n	800cafe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ca36:	4b4a      	ldr	r3, [pc, #296]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	f003 030c 	and.w	r3, r3, #12
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00b      	beq.n	800ca5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca42:	4b47      	ldr	r3, [pc, #284]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ca4a:	2b08      	cmp	r3, #8
 800ca4c:	d11c      	bne.n	800ca88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca4e:	4b44      	ldr	r3, [pc, #272]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d116      	bne.n	800ca88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca5a:	4b41      	ldr	r3, [pc, #260]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0302 	and.w	r3, r3, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d005      	beq.n	800ca72 <HAL_RCC_OscConfig+0x152>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d001      	beq.n	800ca72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e1c7      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca72:	4b3b      	ldr	r3, [pc, #236]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	4937      	ldr	r1, [pc, #220]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca86:	e03a      	b.n	800cafe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d020      	beq.n	800cad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca90:	4b34      	ldr	r3, [pc, #208]	; (800cb64 <HAL_RCC_OscConfig+0x244>)
 800ca92:	2201      	movs	r2, #1
 800ca94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca96:	f7fe fb25 	bl	800b0e4 <HAL_GetTick>
 800ca9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca9c:	e008      	b.n	800cab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca9e:	f7fe fb21 	bl	800b0e4 <HAL_GetTick>
 800caa2:	4602      	mov	r2, r0
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d901      	bls.n	800cab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800caac:	2303      	movs	r3, #3
 800caae:	e1a8      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cab0:	4b2b      	ldr	r3, [pc, #172]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 0302 	and.w	r3, r3, #2
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0f0      	beq.n	800ca9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cabc:	4b28      	ldr	r3, [pc, #160]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	4925      	ldr	r1, [pc, #148]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800cacc:	4313      	orrs	r3, r2
 800cace:	600b      	str	r3, [r1, #0]
 800cad0:	e015      	b.n	800cafe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cad2:	4b24      	ldr	r3, [pc, #144]	; (800cb64 <HAL_RCC_OscConfig+0x244>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad8:	f7fe fb04 	bl	800b0e4 <HAL_GetTick>
 800cadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cade:	e008      	b.n	800caf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cae0:	f7fe fb00 	bl	800b0e4 <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	2b02      	cmp	r3, #2
 800caec:	d901      	bls.n	800caf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e187      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800caf2:	4b1b      	ldr	r3, [pc, #108]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1f0      	bne.n	800cae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0308 	and.w	r3, r3, #8
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d036      	beq.n	800cb78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d016      	beq.n	800cb40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <HAL_RCC_OscConfig+0x248>)
 800cb14:	2201      	movs	r2, #1
 800cb16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb18:	f7fe fae4 	bl	800b0e4 <HAL_GetTick>
 800cb1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb1e:	e008      	b.n	800cb32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb20:	f7fe fae0 	bl	800b0e4 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e167      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <HAL_RCC_OscConfig+0x240>)
 800cb34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0f0      	beq.n	800cb20 <HAL_RCC_OscConfig+0x200>
 800cb3e:	e01b      	b.n	800cb78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb40:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <HAL_RCC_OscConfig+0x248>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb46:	f7fe facd 	bl	800b0e4 <HAL_GetTick>
 800cb4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb4c:	e00e      	b.n	800cb6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb4e:	f7fe fac9 	bl	800b0e4 <HAL_GetTick>
 800cb52:	4602      	mov	r2, r0
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d907      	bls.n	800cb6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e150      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
 800cb60:	40023800 	.word	0x40023800
 800cb64:	42470000 	.word	0x42470000
 800cb68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb6c:	4b88      	ldr	r3, [pc, #544]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb70:	f003 0302 	and.w	r3, r3, #2
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1ea      	bne.n	800cb4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 8097 	beq.w	800ccb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb86:	2300      	movs	r3, #0
 800cb88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb8a:	4b81      	ldr	r3, [pc, #516]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10f      	bne.n	800cbb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]
 800cb9a:	4b7d      	ldr	r3, [pc, #500]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9e:	4a7c      	ldr	r2, [pc, #496]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cba4:	6413      	str	r3, [r2, #64]	; 0x40
 800cba6:	4b7a      	ldr	r3, [pc, #488]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbae:	60bb      	str	r3, [r7, #8]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbb6:	4b77      	ldr	r3, [pc, #476]	; (800cd94 <HAL_RCC_OscConfig+0x474>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d118      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbc2:	4b74      	ldr	r3, [pc, #464]	; (800cd94 <HAL_RCC_OscConfig+0x474>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a73      	ldr	r2, [pc, #460]	; (800cd94 <HAL_RCC_OscConfig+0x474>)
 800cbc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbce:	f7fe fa89 	bl	800b0e4 <HAL_GetTick>
 800cbd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbd4:	e008      	b.n	800cbe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbd6:	f7fe fa85 	bl	800b0e4 <HAL_GetTick>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d901      	bls.n	800cbe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e10c      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbe8:	4b6a      	ldr	r3, [pc, #424]	; (800cd94 <HAL_RCC_OscConfig+0x474>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0f0      	beq.n	800cbd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d106      	bne.n	800cc0a <HAL_RCC_OscConfig+0x2ea>
 800cbfc:	4b64      	ldr	r3, [pc, #400]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc00:	4a63      	ldr	r2, [pc, #396]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc02:	f043 0301 	orr.w	r3, r3, #1
 800cc06:	6713      	str	r3, [r2, #112]	; 0x70
 800cc08:	e01c      	b.n	800cc44 <HAL_RCC_OscConfig+0x324>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	2b05      	cmp	r3, #5
 800cc10:	d10c      	bne.n	800cc2c <HAL_RCC_OscConfig+0x30c>
 800cc12:	4b5f      	ldr	r3, [pc, #380]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc16:	4a5e      	ldr	r2, [pc, #376]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc18:	f043 0304 	orr.w	r3, r3, #4
 800cc1c:	6713      	str	r3, [r2, #112]	; 0x70
 800cc1e:	4b5c      	ldr	r3, [pc, #368]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	4a5b      	ldr	r2, [pc, #364]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc24:	f043 0301 	orr.w	r3, r3, #1
 800cc28:	6713      	str	r3, [r2, #112]	; 0x70
 800cc2a:	e00b      	b.n	800cc44 <HAL_RCC_OscConfig+0x324>
 800cc2c:	4b58      	ldr	r3, [pc, #352]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc30:	4a57      	ldr	r2, [pc, #348]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc32:	f023 0301 	bic.w	r3, r3, #1
 800cc36:	6713      	str	r3, [r2, #112]	; 0x70
 800cc38:	4b55      	ldr	r3, [pc, #340]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3c:	4a54      	ldr	r2, [pc, #336]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc3e:	f023 0304 	bic.w	r3, r3, #4
 800cc42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d015      	beq.n	800cc78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc4c:	f7fe fa4a 	bl	800b0e4 <HAL_GetTick>
 800cc50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc52:	e00a      	b.n	800cc6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc54:	f7fe fa46 	bl	800b0e4 <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e0cb      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc6a:	4b49      	ldr	r3, [pc, #292]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0ee      	beq.n	800cc54 <HAL_RCC_OscConfig+0x334>
 800cc76:	e014      	b.n	800cca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc78:	f7fe fa34 	bl	800b0e4 <HAL_GetTick>
 800cc7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc7e:	e00a      	b.n	800cc96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc80:	f7fe fa30 	bl	800b0e4 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d901      	bls.n	800cc96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cc92:	2303      	movs	r3, #3
 800cc94:	e0b5      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc96:	4b3e      	ldr	r3, [pc, #248]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1ee      	bne.n	800cc80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d105      	bne.n	800ccb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cca8:	4b39      	ldr	r3, [pc, #228]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800ccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccac:	4a38      	ldr	r2, [pc, #224]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800ccae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80a1 	beq.w	800ce00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ccbe:	4b34      	ldr	r3, [pc, #208]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f003 030c 	and.w	r3, r3, #12
 800ccc6:	2b08      	cmp	r3, #8
 800ccc8:	d05c      	beq.n	800cd84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d141      	bne.n	800cd56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccd2:	4b31      	ldr	r3, [pc, #196]	; (800cd98 <HAL_RCC_OscConfig+0x478>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccd8:	f7fe fa04 	bl	800b0e4 <HAL_GetTick>
 800ccdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccde:	e008      	b.n	800ccf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cce0:	f7fe fa00 	bl	800b0e4 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d901      	bls.n	800ccf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e087      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccf2:	4b27      	ldr	r3, [pc, #156]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1f0      	bne.n	800cce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69da      	ldr	r2, [r3, #28]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0c:	019b      	lsls	r3, r3, #6
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd14:	085b      	lsrs	r3, r3, #1
 800cd16:	3b01      	subs	r3, #1
 800cd18:	041b      	lsls	r3, r3, #16
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	061b      	lsls	r3, r3, #24
 800cd22:	491b      	ldr	r1, [pc, #108]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd28:	4b1b      	ldr	r3, [pc, #108]	; (800cd98 <HAL_RCC_OscConfig+0x478>)
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd2e:	f7fe f9d9 	bl	800b0e4 <HAL_GetTick>
 800cd32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd34:	e008      	b.n	800cd48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd36:	f7fe f9d5 	bl	800b0e4 <HAL_GetTick>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d901      	bls.n	800cd48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e05c      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd48:	4b11      	ldr	r3, [pc, #68]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d0f0      	beq.n	800cd36 <HAL_RCC_OscConfig+0x416>
 800cd54:	e054      	b.n	800ce00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd56:	4b10      	ldr	r3, [pc, #64]	; (800cd98 <HAL_RCC_OscConfig+0x478>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd5c:	f7fe f9c2 	bl	800b0e4 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd64:	f7fe f9be 	bl	800b0e4 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e045      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <HAL_RCC_OscConfig+0x470>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0x444>
 800cd82:	e03d      	b.n	800ce00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d107      	bne.n	800cd9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e038      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
 800cd90:	40023800 	.word	0x40023800
 800cd94:	40007000 	.word	0x40007000
 800cd98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <HAL_RCC_OscConfig+0x4ec>)
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d028      	beq.n	800cdfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d121      	bne.n	800cdfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d11a      	bne.n	800cdfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cdcc:	4013      	ands	r3, r2
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cdd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d111      	bne.n	800cdfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde2:	085b      	lsrs	r3, r3, #1
 800cde4:	3b01      	subs	r3, #1
 800cde6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d107      	bne.n	800cdfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d001      	beq.n	800ce00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e000      	b.n	800ce02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	40023800 	.word	0x40023800

0800ce10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e0cc      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ce24:	4b68      	ldr	r3, [pc, #416]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 030f 	and.w	r3, r3, #15
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d90c      	bls.n	800ce4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce32:	4b65      	ldr	r3, [pc, #404]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	b2d2      	uxtb	r2, r2
 800ce38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce3a:	4b63      	ldr	r3, [pc, #396]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 030f 	and.w	r3, r3, #15
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d001      	beq.n	800ce4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e0b8      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d020      	beq.n	800ce9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0304 	and.w	r3, r3, #4
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce64:	4b59      	ldr	r3, [pc, #356]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	4a58      	ldr	r2, [pc, #352]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ce6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0308 	and.w	r3, r3, #8
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ce7c:	4b53      	ldr	r3, [pc, #332]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	4a52      	ldr	r2, [pc, #328]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ce86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce88:	4b50      	ldr	r3, [pc, #320]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	494d      	ldr	r1, [pc, #308]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ce96:	4313      	orrs	r3, r2
 800ce98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d044      	beq.n	800cf30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d107      	bne.n	800cebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ceae:	4b47      	ldr	r3, [pc, #284]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d119      	bne.n	800ceee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e07f      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d003      	beq.n	800cece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ceca:	2b03      	cmp	r3, #3
 800cecc:	d107      	bne.n	800cede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cece:	4b3f      	ldr	r3, [pc, #252]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d109      	bne.n	800ceee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e06f      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cede:	4b3b      	ldr	r3, [pc, #236]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e067      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ceee:	4b37      	ldr	r3, [pc, #220]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f023 0203 	bic.w	r2, r3, #3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	4934      	ldr	r1, [pc, #208]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cefc:	4313      	orrs	r3, r2
 800cefe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf00:	f7fe f8f0 	bl	800b0e4 <HAL_GetTick>
 800cf04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf06:	e00a      	b.n	800cf1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf08:	f7fe f8ec 	bl	800b0e4 <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d901      	bls.n	800cf1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e04f      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf1e:	4b2b      	ldr	r3, [pc, #172]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f003 020c 	and.w	r2, r3, #12
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d1eb      	bne.n	800cf08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cf30:	4b25      	ldr	r3, [pc, #148]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 030f 	and.w	r3, r3, #15
 800cf38:	683a      	ldr	r2, [r7, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d20c      	bcs.n	800cf58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf3e:	4b22      	ldr	r3, [pc, #136]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	b2d2      	uxtb	r2, r2
 800cf44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf46:	4b20      	ldr	r3, [pc, #128]	; (800cfc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 030f 	and.w	r3, r3, #15
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d001      	beq.n	800cf58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e032      	b.n	800cfbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d008      	beq.n	800cf76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf64:	4b19      	ldr	r3, [pc, #100]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	4916      	ldr	r1, [pc, #88]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf72:	4313      	orrs	r3, r2
 800cf74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 0308 	and.w	r3, r3, #8
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cf82:	4b12      	ldr	r3, [pc, #72]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	00db      	lsls	r3, r3, #3
 800cf90:	490e      	ldr	r1, [pc, #56]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cf96:	f000 f821 	bl	800cfdc <HAL_RCC_GetSysClockFreq>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <HAL_RCC_ClockConfig+0x1bc>)
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	091b      	lsrs	r3, r3, #4
 800cfa2:	f003 030f 	and.w	r3, r3, #15
 800cfa6:	490a      	ldr	r1, [pc, #40]	; (800cfd0 <HAL_RCC_ClockConfig+0x1c0>)
 800cfa8:	5ccb      	ldrb	r3, [r1, r3]
 800cfaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cfae:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <HAL_RCC_ClockConfig+0x1c4>)
 800cfb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cfb2:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <HAL_RCC_ClockConfig+0x1c8>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe f850 	bl	800b05c <HAL_InitTick>

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	40023c00 	.word	0x40023c00
 800cfcc:	40023800 	.word	0x40023800
 800cfd0:	080200e8 	.word	0x080200e8
 800cfd4:	200000a8 	.word	0x200000a8
 800cfd8:	2000021c 	.word	0x2000021c

0800cfdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfe0:	b094      	sub	sp, #80	; 0x50
 800cfe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	647b      	str	r3, [r7, #68]	; 0x44
 800cfe8:	2300      	movs	r3, #0
 800cfea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfec:	2300      	movs	r3, #0
 800cfee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cff4:	4b79      	ldr	r3, [pc, #484]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	f003 030c 	and.w	r3, r3, #12
 800cffc:	2b08      	cmp	r3, #8
 800cffe:	d00d      	beq.n	800d01c <HAL_RCC_GetSysClockFreq+0x40>
 800d000:	2b08      	cmp	r3, #8
 800d002:	f200 80e1 	bhi.w	800d1c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <HAL_RCC_GetSysClockFreq+0x34>
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d003      	beq.n	800d016 <HAL_RCC_GetSysClockFreq+0x3a>
 800d00e:	e0db      	b.n	800d1c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d010:	4b73      	ldr	r3, [pc, #460]	; (800d1e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d012:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800d014:	e0db      	b.n	800d1ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d016:	4b73      	ldr	r3, [pc, #460]	; (800d1e4 <HAL_RCC_GetSysClockFreq+0x208>)
 800d018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d01a:	e0d8      	b.n	800d1ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d01c:	4b6f      	ldr	r3, [pc, #444]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d024:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d026:	4b6d      	ldr	r3, [pc, #436]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d063      	beq.n	800d0fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d032:	4b6a      	ldr	r3, [pc, #424]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	099b      	lsrs	r3, r3, #6
 800d038:	2200      	movs	r2, #0
 800d03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d03c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d044:	633b      	str	r3, [r7, #48]	; 0x30
 800d046:	2300      	movs	r3, #0
 800d048:	637b      	str	r3, [r7, #52]	; 0x34
 800d04a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d04e:	4622      	mov	r2, r4
 800d050:	462b      	mov	r3, r5
 800d052:	f04f 0000 	mov.w	r0, #0
 800d056:	f04f 0100 	mov.w	r1, #0
 800d05a:	0159      	lsls	r1, r3, #5
 800d05c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d060:	0150      	lsls	r0, r2, #5
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4621      	mov	r1, r4
 800d068:	1a51      	subs	r1, r2, r1
 800d06a:	6139      	str	r1, [r7, #16]
 800d06c:	4629      	mov	r1, r5
 800d06e:	eb63 0301 	sbc.w	r3, r3, r1
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	f04f 0200 	mov.w	r2, #0
 800d078:	f04f 0300 	mov.w	r3, #0
 800d07c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d080:	4659      	mov	r1, fp
 800d082:	018b      	lsls	r3, r1, #6
 800d084:	4651      	mov	r1, sl
 800d086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d08a:	4651      	mov	r1, sl
 800d08c:	018a      	lsls	r2, r1, #6
 800d08e:	4651      	mov	r1, sl
 800d090:	ebb2 0801 	subs.w	r8, r2, r1
 800d094:	4659      	mov	r1, fp
 800d096:	eb63 0901 	sbc.w	r9, r3, r1
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	f04f 0300 	mov.w	r3, #0
 800d0a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d0a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d0aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d0ae:	4690      	mov	r8, r2
 800d0b0:	4699      	mov	r9, r3
 800d0b2:	4623      	mov	r3, r4
 800d0b4:	eb18 0303 	adds.w	r3, r8, r3
 800d0b8:	60bb      	str	r3, [r7, #8]
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	eb49 0303 	adc.w	r3, r9, r3
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	f04f 0200 	mov.w	r2, #0
 800d0c6:	f04f 0300 	mov.w	r3, #0
 800d0ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	024b      	lsls	r3, r1, #9
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d0d8:	4621      	mov	r1, r4
 800d0da:	024a      	lsls	r2, r1, #9
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d0e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d0ec:	f7f3 fdec 	bl	8000cc8 <__aeabi_uldivmod>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0f8:	e058      	b.n	800d1ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0fa:	4b38      	ldr	r3, [pc, #224]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	099b      	lsrs	r3, r3, #6
 800d100:	2200      	movs	r2, #0
 800d102:	4618      	mov	r0, r3
 800d104:	4611      	mov	r1, r2
 800d106:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d10a:	623b      	str	r3, [r7, #32]
 800d10c:	2300      	movs	r3, #0
 800d10e:	627b      	str	r3, [r7, #36]	; 0x24
 800d110:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d114:	4642      	mov	r2, r8
 800d116:	464b      	mov	r3, r9
 800d118:	f04f 0000 	mov.w	r0, #0
 800d11c:	f04f 0100 	mov.w	r1, #0
 800d120:	0159      	lsls	r1, r3, #5
 800d122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d126:	0150      	lsls	r0, r2, #5
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4641      	mov	r1, r8
 800d12e:	ebb2 0a01 	subs.w	sl, r2, r1
 800d132:	4649      	mov	r1, r9
 800d134:	eb63 0b01 	sbc.w	fp, r3, r1
 800d138:	f04f 0200 	mov.w	r2, #0
 800d13c:	f04f 0300 	mov.w	r3, #0
 800d140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d14c:	ebb2 040a 	subs.w	r4, r2, sl
 800d150:	eb63 050b 	sbc.w	r5, r3, fp
 800d154:	f04f 0200 	mov.w	r2, #0
 800d158:	f04f 0300 	mov.w	r3, #0
 800d15c:	00eb      	lsls	r3, r5, #3
 800d15e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d162:	00e2      	lsls	r2, r4, #3
 800d164:	4614      	mov	r4, r2
 800d166:	461d      	mov	r5, r3
 800d168:	4643      	mov	r3, r8
 800d16a:	18e3      	adds	r3, r4, r3
 800d16c:	603b      	str	r3, [r7, #0]
 800d16e:	464b      	mov	r3, r9
 800d170:	eb45 0303 	adc.w	r3, r5, r3
 800d174:	607b      	str	r3, [r7, #4]
 800d176:	f04f 0200 	mov.w	r2, #0
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d182:	4629      	mov	r1, r5
 800d184:	028b      	lsls	r3, r1, #10
 800d186:	4621      	mov	r1, r4
 800d188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d18c:	4621      	mov	r1, r4
 800d18e:	028a      	lsls	r2, r1, #10
 800d190:	4610      	mov	r0, r2
 800d192:	4619      	mov	r1, r3
 800d194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d196:	2200      	movs	r2, #0
 800d198:	61bb      	str	r3, [r7, #24]
 800d19a:	61fa      	str	r2, [r7, #28]
 800d19c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1a0:	f7f3 fd92 	bl	8000cc8 <__aeabi_uldivmod>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <HAL_RCC_GetSysClockFreq+0x200>)
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	0c1b      	lsrs	r3, r3, #16
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d1bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d1c6:	e002      	b.n	800d1ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d1c8:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d1ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d1cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3750      	adds	r7, #80	; 0x50
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1da:	bf00      	nop
 800d1dc:	40023800 	.word	0x40023800
 800d1e0:	00f42400 	.word	0x00f42400
 800d1e4:	007a1200 	.word	0x007a1200

0800d1e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1ec:	4b03      	ldr	r3, [pc, #12]	; (800d1fc <HAL_RCC_GetHCLKFreq+0x14>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	200000a8 	.word	0x200000a8

0800d200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d204:	f7ff fff0 	bl	800d1e8 <HAL_RCC_GetHCLKFreq>
 800d208:	4602      	mov	r2, r0
 800d20a:	4b05      	ldr	r3, [pc, #20]	; (800d220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	0a9b      	lsrs	r3, r3, #10
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	4903      	ldr	r1, [pc, #12]	; (800d224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d216:	5ccb      	ldrb	r3, [r1, r3]
 800d218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	40023800 	.word	0x40023800
 800d224:	080200f8 	.word	0x080200f8

0800d228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d22c:	f7ff ffdc 	bl	800d1e8 <HAL_RCC_GetHCLKFreq>
 800d230:	4602      	mov	r2, r0
 800d232:	4b05      	ldr	r3, [pc, #20]	; (800d248 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	0b5b      	lsrs	r3, r3, #13
 800d238:	f003 0307 	and.w	r3, r3, #7
 800d23c:	4903      	ldr	r1, [pc, #12]	; (800d24c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d23e:	5ccb      	ldrb	r3, [r1, r3]
 800d240:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d244:	4618      	mov	r0, r3
 800d246:	bd80      	pop	{r7, pc}
 800d248:	40023800 	.word	0x40023800
 800d24c:	080200f8 	.word	0x080200f8

0800d250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d258:	2300      	movs	r3, #0
 800d25a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800d25c:	2300      	movs	r3, #0
 800d25e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10b      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d274:	2b00      	cmp	r3, #0
 800d276:	d105      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d280:	2b00      	cmp	r3, #0
 800d282:	d075      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d284:	4b91      	ldr	r3, [pc, #580]	; (800d4cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d28a:	f7fd ff2b 	bl	800b0e4 <HAL_GetTick>
 800d28e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d290:	e008      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d292:	f7fd ff27 	bl	800b0e4 <HAL_GetTick>
 800d296:	4602      	mov	r2, r0
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d901      	bls.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e189      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d2a4:	4b8a      	ldr	r3, [pc, #552]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1f0      	bne.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d009      	beq.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	019a      	lsls	r2, r3, #6
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	071b      	lsls	r3, r3, #28
 800d2c8:	4981      	ldr	r1, [pc, #516]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d01f      	beq.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2dc:	4b7c      	ldr	r3, [pc, #496]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2e2:	0f1b      	lsrs	r3, r3, #28
 800d2e4:	f003 0307 	and.w	r3, r3, #7
 800d2e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	019a      	lsls	r2, r3, #6
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	061b      	lsls	r3, r3, #24
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	071b      	lsls	r3, r3, #28
 800d2fc:	4974      	ldr	r1, [pc, #464]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d304:	4b72      	ldr	r3, [pc, #456]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d30a:	f023 021f 	bic.w	r2, r3, #31
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	3b01      	subs	r3, #1
 800d314:	496e      	ldr	r1, [pc, #440]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d316:	4313      	orrs	r3, r2
 800d318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00d      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	019a      	lsls	r2, r3, #6
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	061b      	lsls	r3, r3, #24
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	071b      	lsls	r3, r3, #28
 800d33c:	4964      	ldr	r1, [pc, #400]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d344:	4b61      	ldr	r3, [pc, #388]	; (800d4cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800d346:	2201      	movs	r2, #1
 800d348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d34a:	f7fd fecb 	bl	800b0e4 <HAL_GetTick>
 800d34e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d350:	e008      	b.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d352:	f7fd fec7 	bl	800b0e4 <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d901      	bls.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e129      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d364:	4b5a      	ldr	r3, [pc, #360]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0f0      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0304 	and.w	r3, r3, #4
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d384:	2b00      	cmp	r3, #0
 800d386:	d079      	beq.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d388:	4b52      	ldr	r3, [pc, #328]	; (800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d38e:	f7fd fea9 	bl	800b0e4 <HAL_GetTick>
 800d392:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d394:	e008      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d396:	f7fd fea5 	bl	800b0e4 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d901      	bls.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e107      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3a8:	4b49      	ldr	r3, [pc, #292]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3b4:	d0ef      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d020      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3c2:	4b43      	ldr	r3, [pc, #268]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c8:	0f1b      	lsrs	r3, r3, #28
 800d3ca:	f003 0307 	and.w	r3, r3, #7
 800d3ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	019a      	lsls	r2, r3, #6
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	061b      	lsls	r3, r3, #24
 800d3dc:	431a      	orrs	r2, r3
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	071b      	lsls	r3, r3, #28
 800d3e2:	493b      	ldr	r1, [pc, #236]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d3ea:	4b39      	ldr	r3, [pc, #228]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	021b      	lsls	r3, r3, #8
 800d3fc:	4934      	ldr	r1, [pc, #208]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3fe:	4313      	orrs	r3, r2
 800d400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0308 	and.w	r3, r3, #8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01e      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d410:	4b2f      	ldr	r3, [pc, #188]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d416:	0e1b      	lsrs	r3, r3, #24
 800d418:	f003 030f 	and.w	r3, r3, #15
 800d41c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	019a      	lsls	r2, r3, #6
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	061b      	lsls	r3, r3, #24
 800d428:	431a      	orrs	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	071b      	lsls	r3, r3, #28
 800d430:	4927      	ldr	r1, [pc, #156]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d432:	4313      	orrs	r3, r2
 800d434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d438:	4b25      	ldr	r3, [pc, #148]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d43e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d446:	4922      	ldr	r1, [pc, #136]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d448:	4313      	orrs	r3, r2
 800d44a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d44e:	4b21      	ldr	r3, [pc, #132]	; (800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d450:	2201      	movs	r2, #1
 800d452:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d454:	f7fd fe46 	bl	800b0e4 <HAL_GetTick>
 800d458:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d45a:	e008      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d45c:	f7fd fe42 	bl	800b0e4 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d901      	bls.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e0a4      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d46e:	4b18      	ldr	r3, [pc, #96]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d47a:	d1ef      	bne.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0320 	and.w	r3, r3, #32
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 808b 	beq.w	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d492:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d498:	6413      	str	r3, [r2, #64]	; 0x40
 800d49a:	4b0d      	ldr	r3, [pc, #52]	; (800d4d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d4a6:	4b0c      	ldr	r3, [pc, #48]	; (800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a0b      	ldr	r2, [pc, #44]	; (800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800d4ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d4b2:	f7fd fe17 	bl	800b0e4 <HAL_GetTick>
 800d4b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d4b8:	e010      	b.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d4ba:	f7fd fe13 	bl	800b0e4 <HAL_GetTick>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d909      	bls.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e075      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800d4cc:	42470068 	.word	0x42470068
 800d4d0:	40023800 	.word	0x40023800
 800d4d4:	42470070 	.word	0x42470070
 800d4d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d4dc:	4b38      	ldr	r3, [pc, #224]	; (800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0e8      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d4e8:	4b36      	ldr	r3, [pc, #216]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d02f      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	429a      	cmp	r2, r3
 800d504:	d028      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d506:	4b2f      	ldr	r3, [pc, #188]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d50a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d50e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d510:	4b2d      	ldr	r3, [pc, #180]	; (800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d512:	2201      	movs	r2, #1
 800d514:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d516:	4b2c      	ldr	r3, [pc, #176]	; (800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d51c:	4a29      	ldr	r2, [pc, #164]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d522:	4b28      	ldr	r3, [pc, #160]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d114      	bne.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d52e:	f7fd fdd9 	bl	800b0e4 <HAL_GetTick>
 800d532:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d534:	e00a      	b.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d536:	f7fd fdd5 	bl	800b0e4 <HAL_GetTick>
 800d53a:	4602      	mov	r2, r0
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	f241 3288 	movw	r2, #5000	; 0x1388
 800d544:	4293      	cmp	r3, r2
 800d546:	d901      	bls.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800d548:	2303      	movs	r3, #3
 800d54a:	e035      	b.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d54c:	4b1d      	ldr	r3, [pc, #116]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d550:	f003 0302 	and.w	r3, r3, #2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d0ee      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d564:	d10d      	bne.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800d566:	4b17      	ldr	r3, [pc, #92]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d57a:	4912      	ldr	r1, [pc, #72]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d57c:	4313      	orrs	r3, r2
 800d57e:	608b      	str	r3, [r1, #8]
 800d580:	e005      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800d582:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	4a0f      	ldr	r2, [pc, #60]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d588:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d58c:	6093      	str	r3, [r2, #8]
 800d58e:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d59a:	490a      	ldr	r1, [pc, #40]	; (800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d59c:	4313      	orrs	r3, r2
 800d59e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 0310 	and.w	r3, r3, #16
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d004      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d5b2:	4b06      	ldr	r3, [pc, #24]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800d5b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	40007000 	.word	0x40007000
 800d5c4:	40023800 	.word	0x40023800
 800d5c8:	42470e40 	.word	0x42470e40
 800d5cc:	424711e0 	.word	0x424711e0

0800d5d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e066      	b.n	800d6b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7f5b      	ldrb	r3, [r3, #29]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d105      	bne.n	800d5fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7f7 f804 	bl	8004604 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	22ca      	movs	r2, #202	; 0xca
 800d608:	625a      	str	r2, [r3, #36]	; 0x24
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2253      	movs	r2, #83	; 0x53
 800d610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fa45 	bl	800daa2 <RTC_EnterInitMode>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d12c      	bne.n	800d67c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d634:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6899      	ldr	r1, [r3, #8]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	431a      	orrs	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	431a      	orrs	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	430a      	orrs	r2, r1
 800d652:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	68d2      	ldr	r2, [r2, #12]
 800d65c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6919      	ldr	r1, [r3, #16]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	041a      	lsls	r2, r3, #16
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	430a      	orrs	r2, r1
 800d670:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa4c 	bl	800db10 <RTC_ExitInitMode>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d113      	bne.n	800d6aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d690:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	699a      	ldr	r2, [r3, #24]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	430a      	orrs	r2, r1
 800d6a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	22ff      	movs	r2, #255	; 0xff
 800d6b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d6bc:	b590      	push	{r4, r7, lr}
 800d6be:	b087      	sub	sp, #28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	7f1b      	ldrb	r3, [r3, #28]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d101      	bne.n	800d6d8 <HAL_RTC_SetTime+0x1c>
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e087      	b.n	800d7e8 <HAL_RTC_SetTime+0x12c>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2202      	movs	r2, #2
 800d6e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d126      	bne.n	800d738 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d102      	bne.n	800d6fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fa29 	bl	800db5a <RTC_ByteToBcd2>
 800d708:	4603      	mov	r3, r0
 800d70a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	4618      	mov	r0, r3
 800d712:	f000 fa22 	bl	800db5a <RTC_ByteToBcd2>
 800d716:	4603      	mov	r3, r0
 800d718:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d71a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	789b      	ldrb	r3, [r3, #2]
 800d720:	4618      	mov	r0, r3
 800d722:	f000 fa1a 	bl	800db5a <RTC_ByteToBcd2>
 800d726:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d728:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	78db      	ldrb	r3, [r3, #3]
 800d730:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d732:	4313      	orrs	r3, r2
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e018      	b.n	800d76a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2200      	movs	r2, #0
 800d74a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	785b      	ldrb	r3, [r3, #1]
 800d756:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d758:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d75e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	78db      	ldrb	r3, [r3, #3]
 800d764:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d766:	4313      	orrs	r3, r2
 800d768:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	22ca      	movs	r2, #202	; 0xca
 800d770:	625a      	str	r2, [r3, #36]	; 0x24
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2253      	movs	r2, #83	; 0x53
 800d778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f991 	bl	800daa2 <RTC_EnterInitMode>
 800d780:	4603      	mov	r3, r0
 800d782:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d784:	7cfb      	ldrb	r3, [r7, #19]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d120      	bne.n	800d7cc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d794:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d798:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d7a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6899      	ldr	r1, [r3, #8]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	68da      	ldr	r2, [r3, #12]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	431a      	orrs	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 f9a4 	bl	800db10 <RTC_ExitInitMode>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d7cc:	7cfb      	ldrb	r3, [r7, #19]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	22ff      	movs	r2, #255	; 0xff
 800d7de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	771a      	strb	r2, [r3, #28]

  return status;
 800d7e6:	7cfb      	ldrb	r3, [r7, #19]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	371c      	adds	r7, #28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd90      	pop	{r4, r7, pc}

0800d7f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d822:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d826:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d832:	b2da      	uxtb	r2, r3
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	0a1b      	lsrs	r3, r3, #8
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d842:	b2da      	uxtb	r2, r3
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d850:	b2da      	uxtb	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	0d9b      	lsrs	r3, r3, #22
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	b2da      	uxtb	r2, r3
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d11a      	bne.n	800d8a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f000 f98f 	bl	800db94 <RTC_Bcd2ToByte>
 800d876:	4603      	mov	r3, r0
 800d878:	461a      	mov	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	785b      	ldrb	r3, [r3, #1]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 f986 	bl	800db94 <RTC_Bcd2ToByte>
 800d888:	4603      	mov	r3, r0
 800d88a:	461a      	mov	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	789b      	ldrb	r3, [r3, #2]
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f97d 	bl	800db94 <RTC_Bcd2ToByte>
 800d89a:	4603      	mov	r3, r0
 800d89c:	461a      	mov	r2, r3
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8ac:	b590      	push	{r4, r7, lr}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7f1b      	ldrb	r3, [r3, #28]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d101      	bne.n	800d8c8 <HAL_RTC_SetDate+0x1c>
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	e071      	b.n	800d9ac <HAL_RTC_SetDate+0x100>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10e      	bne.n	800d8f8 <HAL_RTC_SetDate+0x4c>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	785b      	ldrb	r3, [r3, #1]
 800d8de:	f003 0310 	and.w	r3, r3, #16
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d008      	beq.n	800d8f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	785b      	ldrb	r3, [r3, #1]
 800d8ea:	f023 0310 	bic.w	r3, r3, #16
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	330a      	adds	r3, #10
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d11c      	bne.n	800d938 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	78db      	ldrb	r3, [r3, #3]
 800d902:	4618      	mov	r0, r3
 800d904:	f000 f929 	bl	800db5a <RTC_ByteToBcd2>
 800d908:	4603      	mov	r3, r0
 800d90a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	785b      	ldrb	r3, [r3, #1]
 800d910:	4618      	mov	r0, r3
 800d912:	f000 f922 	bl	800db5a <RTC_ByteToBcd2>
 800d916:	4603      	mov	r3, r0
 800d918:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d91a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	789b      	ldrb	r3, [r3, #2]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 f91a 	bl	800db5a <RTC_ByteToBcd2>
 800d926:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d928:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d932:	4313      	orrs	r3, r2
 800d934:	617b      	str	r3, [r7, #20]
 800d936:	e00e      	b.n	800d956 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	78db      	ldrb	r3, [r3, #3]
 800d93c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	785b      	ldrb	r3, [r3, #1]
 800d942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d944:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d94a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d952:	4313      	orrs	r3, r2
 800d954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	22ca      	movs	r2, #202	; 0xca
 800d95c:	625a      	str	r2, [r3, #36]	; 0x24
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2253      	movs	r2, #83	; 0x53
 800d964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f000 f89b 	bl	800daa2 <RTC_EnterInitMode>
 800d96c:	4603      	mov	r3, r0
 800d96e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d970:	7cfb      	ldrb	r3, [r7, #19]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10c      	bne.n	800d990 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d984:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f000 f8c2 	bl	800db10 <RTC_ExitInitMode>
 800d98c:	4603      	mov	r3, r0
 800d98e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d990:	7cfb      	ldrb	r3, [r7, #19]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2201      	movs	r2, #1
 800d99a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	22ff      	movs	r2, #255	; 0xff
 800d9a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	771a      	strb	r2, [r3, #28]

  return status;
 800d9aa:	7cfb      	ldrb	r3, [r7, #19]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	371c      	adds	r7, #28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}

0800d9b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	0c1b      	lsrs	r3, r3, #16
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	0a1b      	lsrs	r3, r3, #8
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 031f 	and.w	r3, r3, #31
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	0b5b      	lsrs	r3, r3, #13
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 0307 	and.w	r3, r3, #7
 800da06:	b2da      	uxtb	r2, r3
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d11a      	bne.n	800da48 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	78db      	ldrb	r3, [r3, #3]
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f8bc 	bl	800db94 <RTC_Bcd2ToByte>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	785b      	ldrb	r3, [r3, #1]
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f8b3 	bl	800db94 <RTC_Bcd2ToByte>
 800da2e:	4603      	mov	r3, r0
 800da30:	461a      	mov	r2, r3
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	789b      	ldrb	r3, [r3, #2]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 f8aa 	bl	800db94 <RTC_Bcd2ToByte>
 800da40:	4603      	mov	r3, r0
 800da42:	461a      	mov	r2, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b084      	sub	sp, #16
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68da      	ldr	r2, [r3, #12]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800da6c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800da6e:	f7fd fb39 	bl	800b0e4 <HAL_GetTick>
 800da72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da74:	e009      	b.n	800da8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da76:	f7fd fb35 	bl	800b0e4 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da84:	d901      	bls.n	800da8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e007      	b.n	800da9a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	f003 0320 	and.w	r3, r3, #32
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0ee      	beq.n	800da76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d122      	bne.n	800db06 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68da      	ldr	r2, [r3, #12]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dace:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dad0:	f7fd fb08 	bl	800b0e4 <HAL_GetTick>
 800dad4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800dad6:	e00c      	b.n	800daf2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dad8:	f7fd fb04 	bl	800b0e4 <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dae6:	d904      	bls.n	800daf2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2204      	movs	r2, #4
 800daec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <RTC_EnterInitMode+0x64>
 800db00:	7bfb      	ldrb	r3, [r7, #15]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d1e8      	bne.n	800dad8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800db06:	7bfb      	ldrb	r3, [r7, #15]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db18:	2300      	movs	r3, #0
 800db1a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	68da      	ldr	r2, [r3, #12]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff ff89 	bl	800da52 <HAL_RTC_WaitForSynchro>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d004      	beq.n	800db50 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2204      	movs	r2, #4
 800db4a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800db50:	7bfb      	ldrb	r3, [r7, #15]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b085      	sub	sp, #20
 800db5e:	af00      	add	r7, sp, #0
 800db60:	4603      	mov	r3, r0
 800db62:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800db68:	e005      	b.n	800db76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	3301      	adds	r3, #1
 800db6e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	3b0a      	subs	r3, #10
 800db74:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	2b09      	cmp	r3, #9
 800db7a:	d8f6      	bhi.n	800db6a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	011b      	lsls	r3, r3, #4
 800db80:	b2da      	uxtb	r2, r3
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	4313      	orrs	r3, r2
 800db86:	b2db      	uxtb	r3, r3
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	091b      	lsrs	r3, r3, #4
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	461a      	mov	r2, r3
 800dbaa:	0092      	lsls	r2, r2, #2
 800dbac:	4413      	add	r3, r2
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	f003 030f 	and.w	r3, r3, #15
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	b2db      	uxtb	r3, r3
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e022      	b.n	800dc24 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d105      	bne.n	800dbf6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7f6 fd51 	bl	8004698 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2203      	movs	r2, #3
 800dbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f814 	bl	800dc2c <HAL_SD_InitCard>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e00a      	b.n	800dc24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dc2c:	b5b0      	push	{r4, r5, r7, lr}
 800dc2e:	b08e      	sub	sp, #56	; 0x38
 800dc30:	af04      	add	r7, sp, #16
 800dc32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800dc40:	2300      	movs	r3, #0
 800dc42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800dc48:	2376      	movs	r3, #118	; 0x76
 800dc4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681d      	ldr	r5, [r3, #0]
 800dc50:	466c      	mov	r4, sp
 800dc52:	f107 0314 	add.w	r3, r7, #20
 800dc56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc64:	4628      	mov	r0, r5
 800dc66:	f002 ffb9 	bl	8010bdc <SDIO_Init>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800dc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e04f      	b.n	800dd1c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800dc7c:	4b29      	ldr	r3, [pc, #164]	; (800dd24 <HAL_SD_InitCard+0xf8>)
 800dc7e:	2200      	movs	r2, #0
 800dc80:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f002 fff1 	bl	8010c6e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800dc8c:	4b25      	ldr	r3, [pc, #148]	; (800dd24 <HAL_SD_InitCard+0xf8>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800dc92:	2002      	movs	r0, #2
 800dc94:	f7fd fa32 	bl	800b0fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fe69 	bl	800e970 <SD_PowerON>
 800dc9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00b      	beq.n	800dcbe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e02e      	b.n	800dd1c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fd88 	bl	800e7d4 <SD_InitCard>
 800dcc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00b      	beq.n	800dce4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	431a      	orrs	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	e01b      	b.n	800dd1c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcec:	4618      	mov	r0, r3
 800dcee:	f003 f850 	bl	8010d92 <SDMMC_CmdBlockLength>
 800dcf2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00f      	beq.n	800dd1a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a0a      	ldr	r2, [pc, #40]	; (800dd28 <HAL_SD_InitCard+0xfc>)
 800dd00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	431a      	orrs	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	e000      	b.n	800dd1c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3728      	adds	r7, #40	; 0x28
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bdb0      	pop	{r4, r5, r7, pc}
 800dd24:	422580a0 	.word	0x422580a0
 800dd28:	004005ff 	.word	0x004005ff

0800dd2c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b092      	sub	sp, #72	; 0x48
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
 800dd38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd3a:	f7fd f9d3 	bl	800b0e4 <HAL_GetTick>
 800dd3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d107      	bne.n	800dd5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e1bd      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	f040 81b0 	bne.w	800e0cc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dd72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	441a      	add	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d907      	bls.n	800dd90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd84:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e1a4      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2203      	movs	r2, #3
 800dd94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d002      	beq.n	800ddae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	025b      	lsls	r3, r3, #9
 800ddac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ddae:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	025b      	lsls	r3, r3, #9
 800ddb8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ddba:	2390      	movs	r3, #144	; 0x90
 800ddbc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f107 0214 	add.w	r2, r7, #20
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f002 ffb0 	bl	8010d3a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d90a      	bls.n	800ddf6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2202      	movs	r2, #2
 800dde4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddec:	4618      	mov	r0, r3
 800ddee:	f003 f814 	bl	8010e1a <SDMMC_CmdReadMultiBlock>
 800ddf2:	6478      	str	r0, [r7, #68]	; 0x44
 800ddf4:	e009      	b.n	800de0a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de02:	4618      	mov	r0, r3
 800de04:	f002 ffe7 	bl	8010dd6 <SDMMC_CmdReadSingleBlock>
 800de08:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800de0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d012      	beq.n	800de36 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a7a      	ldr	r2, [pc, #488]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800de16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de1e:	431a      	orrs	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2201      	movs	r2, #1
 800de28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	e151      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800de3a:	e061      	b.n	800df00 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de46:	2b00      	cmp	r3, #0
 800de48:	d03c      	beq.n	800dec4 <HAL_SD_ReadBlocks+0x198>
 800de4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d039      	beq.n	800dec4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800de50:	2300      	movs	r3, #0
 800de52:	643b      	str	r3, [r7, #64]	; 0x40
 800de54:	e033      	b.n	800debe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f002 fee9 	bl	8010c32 <SDIO_ReadFIFO>
 800de60:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	b2da      	uxtb	r2, r3
 800de66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6c:	3301      	adds	r3, #1
 800de6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de72:	3b01      	subs	r3, #1
 800de74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	0a1b      	lsrs	r3, r3, #8
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de82:	3301      	adds	r3, #1
 800de84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de88:	3b01      	subs	r3, #1
 800de8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	0c1b      	lsrs	r3, r3, #16
 800de90:	b2da      	uxtb	r2, r3
 800de92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de98:	3301      	adds	r3, #1
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9e:	3b01      	subs	r3, #1
 800dea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	0e1b      	lsrs	r3, r3, #24
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deaa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800deac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deae:	3301      	adds	r3, #1
 800deb0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800deb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb4:	3b01      	subs	r3, #1
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800deb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deba:	3301      	adds	r3, #1
 800debc:	643b      	str	r3, [r7, #64]	; 0x40
 800debe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec0:	2b07      	cmp	r3, #7
 800dec2:	d9c8      	bls.n	800de56 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800dec4:	f7fd f90e 	bl	800b0e4 <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d902      	bls.n	800deda <HAL_SD_ReadBlocks+0x1ae>
 800ded4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d112      	bne.n	800df00 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a48      	ldr	r2, [pc, #288]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800defc:	2303      	movs	r3, #3
 800defe:	e0ec      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df06:	f240 332a 	movw	r3, #810	; 0x32a
 800df0a:	4013      	ands	r3, r2
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d095      	beq.n	800de3c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d022      	beq.n	800df64 <HAL_SD_ReadBlocks+0x238>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d91f      	bls.n	800df64 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df28:	2b03      	cmp	r3, #3
 800df2a:	d01b      	beq.n	800df64 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f002 ffd9 	bl	8010ee8 <SDMMC_CmdStopTransfer>
 800df36:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800df38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d012      	beq.n	800df64 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a2f      	ldr	r2, [pc, #188]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800df44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4c:	431a      	orrs	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2200      	movs	r2, #0
 800df5e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e0ba      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	f003 0308 	and.w	r3, r3, #8
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d012      	beq.n	800df98 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a22      	ldr	r2, [pc, #136]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800df78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7e:	f043 0208 	orr.w	r2, r3, #8
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2200      	movs	r2, #0
 800df92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	e0a0      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d012      	beq.n	800dfcc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a15      	ldr	r2, [pc, #84]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	f043 0202 	orr.w	r2, r3, #2
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e086      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd2:	f003 0320 	and.w	r3, r3, #32
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d063      	beq.n	800e0a2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a08      	ldr	r2, [pc, #32]	; (800e000 <HAL_SD_ReadBlocks+0x2d4>)
 800dfe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	f043 0220 	orr.w	r2, r3, #32
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e06c      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
 800e000:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4618      	mov	r0, r3
 800e00a:	f002 fe12 	bl	8010c32 <SDIO_ReadFIFO>
 800e00e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	b2da      	uxtb	r2, r3
 800e014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e016:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e01a:	3301      	adds	r3, #1
 800e01c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e020:	3b01      	subs	r3, #1
 800e022:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	0a1b      	lsrs	r3, r3, #8
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e030:	3301      	adds	r3, #1
 800e032:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	3b01      	subs	r3, #1
 800e038:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	0c1b      	lsrs	r3, r3, #16
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e042:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e046:	3301      	adds	r3, #1
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04c:	3b01      	subs	r3, #1
 800e04e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e052:	0e1b      	lsrs	r3, r3, #24
 800e054:	b2da      	uxtb	r2, r3
 800e056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e058:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e05c:	3301      	adds	r3, #1
 800e05e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e062:	3b01      	subs	r3, #1
 800e064:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e066:	f7fd f83d 	bl	800b0e4 <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e072:	429a      	cmp	r2, r3
 800e074:	d902      	bls.n	800e07c <HAL_SD_ReadBlocks+0x350>
 800e076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d112      	bne.n	800e0a2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a18      	ldr	r2, [pc, #96]	; (800e0e4 <HAL_SD_ReadBlocks+0x3b8>)
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e01b      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <HAL_SD_ReadBlocks+0x38a>
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1a6      	bne.n	800e004 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800e0be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e006      	b.n	800e0da <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
  }
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3748      	adds	r7, #72	; 0x48
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	004005ff 	.word	0x004005ff

0800e0e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b092      	sub	sp, #72	; 0x48
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e0f6:	f7fc fff5 	bl	800b0e4 <HAL_GetTick>
 800e0fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d107      	bne.n	800e11a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e166      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b01      	cmp	r3, #1
 800e124:	f040 8159 	bne.w	800e3da <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e12e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	441a      	add	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e138:	429a      	cmp	r2, r3
 800e13a:	d907      	bls.n	800e14c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e140:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e14d      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2203      	movs	r2, #3
 800e150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2200      	movs	r2, #0
 800e15a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e160:	2b01      	cmp	r3, #1
 800e162:	d002      	beq.n	800e16a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	025b      	lsls	r3, r3, #9
 800e168:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e16a:	f04f 33ff 	mov.w	r3, #4294967295
 800e16e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	025b      	lsls	r3, r3, #9
 800e174:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e176:	2390      	movs	r3, #144	; 0x90
 800e178:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e17a:	2300      	movs	r3, #0
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e17e:	2300      	movs	r3, #0
 800e180:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800e182:	2301      	movs	r3, #1
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f107 0218 	add.w	r2, r7, #24
 800e18e:	4611      	mov	r1, r2
 800e190:	4618      	mov	r0, r3
 800e192:	f002 fdd2 	bl	8010d3a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d90a      	bls.n	800e1b2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2220      	movs	r2, #32
 800e1a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f002 fe7a 	bl	8010ea2 <SDMMC_CmdWriteMultiBlock>
 800e1ae:	6478      	str	r0, [r7, #68]	; 0x44
 800e1b0:	e009      	b.n	800e1c6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2210      	movs	r2, #16
 800e1b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f002 fe4d 	bl	8010e5e <SDMMC_CmdWriteSingleBlock>
 800e1c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d012      	beq.n	800e1f2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a87      	ldr	r2, [pc, #540]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e1d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e0fa      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e1f6:	e065      	b.n	800e2c4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e202:	2b00      	cmp	r3, #0
 800e204:	d040      	beq.n	800e288 <HAL_SD_WriteBlocks+0x1a0>
 800e206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d03d      	beq.n	800e288 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e20c:	2300      	movs	r3, #0
 800e20e:	643b      	str	r3, [r7, #64]	; 0x40
 800e210:	e037      	b.n	800e282 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800e212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e21a:	3301      	adds	r3, #1
 800e21c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e220:	3b01      	subs	r3, #1
 800e222:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	021a      	lsls	r2, r3, #8
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	4313      	orrs	r3, r2
 800e22e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e232:	3301      	adds	r3, #1
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e238:	3b01      	subs	r3, #1
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	041a      	lsls	r2, r3, #16
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24a:	3301      	adds	r3, #1
 800e24c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e250:	3b01      	subs	r3, #1
 800e252:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	061a      	lsls	r2, r3, #24
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e262:	3301      	adds	r3, #1
 800e264:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e268:	3b01      	subs	r3, #1
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f107 0214 	add.w	r2, r7, #20
 800e274:	4611      	mov	r1, r2
 800e276:	4618      	mov	r0, r3
 800e278:	f002 fce8 	bl	8010c4c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e27c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27e:	3301      	adds	r3, #1
 800e280:	643b      	str	r3, [r7, #64]	; 0x40
 800e282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e284:	2b07      	cmp	r3, #7
 800e286:	d9c4      	bls.n	800e212 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e288:	f7fc ff2c 	bl	800b0e4 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e294:	429a      	cmp	r2, r3
 800e296:	d902      	bls.n	800e29e <HAL_SD_WriteBlocks+0x1b6>
 800e298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d112      	bne.n	800e2c4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a53      	ldr	r2, [pc, #332]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e2a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ac:	431a      	orrs	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e091      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ca:	f240 331a 	movw	r3, #794	; 0x31a
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d091      	beq.n	800e1f8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d022      	beq.n	800e328 <HAL_SD_WriteBlocks+0x240>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d91f      	bls.n	800e328 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ec:	2b03      	cmp	r3, #3
 800e2ee:	d01b      	beq.n	800e328 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f002 fdf7 	bl	8010ee8 <SDMMC_CmdStopTransfer>
 800e2fa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d012      	beq.n	800e328 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a3a      	ldr	r2, [pc, #232]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e308:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	431a      	orrs	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e05f      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32e:	f003 0308 	and.w	r3, r3, #8
 800e332:	2b00      	cmp	r3, #0
 800e334:	d012      	beq.n	800e35c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a2d      	ldr	r2, [pc, #180]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e33c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e342:	f043 0208 	orr.w	r2, r3, #8
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	e045      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d012      	beq.n	800e390 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a20      	ldr	r2, [pc, #128]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e376:	f043 0202 	orr.w	r2, r3, #2
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e38c:	2301      	movs	r3, #1
 800e38e:	e02b      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e396:	f003 0310 	and.w	r3, r3, #16
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d012      	beq.n	800e3c4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a13      	ldr	r2, [pc, #76]	; (800e3f0 <HAL_SD_WriteBlocks+0x308>)
 800e3a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3aa:	f043 0210 	orr.w	r2, r3, #16
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e011      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e006      	b.n	800e3e8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
  }
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3748      	adds	r7, #72	; 0x48
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	004005ff 	.word	0x004005ff

0800e3f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e402:	0f9b      	lsrs	r3, r3, #30
 800e404:	b2da      	uxtb	r2, r3
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e40e:	0e9b      	lsrs	r3, r3, #26
 800e410:	b2db      	uxtb	r3, r3
 800e412:	f003 030f 	and.w	r3, r3, #15
 800e416:	b2da      	uxtb	r2, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e420:	0e1b      	lsrs	r3, r3, #24
 800e422:	b2db      	uxtb	r3, r3
 800e424:	f003 0303 	and.w	r3, r3, #3
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e432:	0c1b      	lsrs	r3, r3, #16
 800e434:	b2da      	uxtb	r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e43e:	0a1b      	lsrs	r3, r3, #8
 800e440:	b2da      	uxtb	r2, r3
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e454:	0d1b      	lsrs	r3, r3, #20
 800e456:	b29a      	uxth	r2, r3
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e460:	0c1b      	lsrs	r3, r3, #16
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f003 030f 	and.w	r3, r3, #15
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e472:	0bdb      	lsrs	r3, r3, #15
 800e474:	b2db      	uxtb	r3, r3
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e484:	0b9b      	lsrs	r3, r3, #14
 800e486:	b2db      	uxtb	r3, r3
 800e488:	f003 0301 	and.w	r3, r3, #1
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e496:	0b5b      	lsrs	r3, r3, #13
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	f003 0301 	and.w	r3, r3, #1
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4a8:	0b1b      	lsrs	r3, r3, #12
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d163      	bne.n	800e58c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4c8:	009a      	lsls	r2, r3, #2
 800e4ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e4d4:	0f92      	lsrs	r2, r2, #30
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e0:	0edb      	lsrs	r3, r3, #27
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f003 0307 	and.w	r3, r3, #7
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f2:	0e1b      	lsrs	r3, r3, #24
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	f003 0307 	and.w	r3, r3, #7
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e504:	0d5b      	lsrs	r3, r3, #21
 800e506:	b2db      	uxtb	r3, r3
 800e508:	f003 0307 	and.w	r3, r3, #7
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e516:	0c9b      	lsrs	r3, r3, #18
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	f003 0307 	and.w	r3, r3, #7
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e528:	0bdb      	lsrs	r3, r3, #15
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	f003 0307 	and.w	r3, r3, #7
 800e530:	b2da      	uxtb	r2, r3
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	691b      	ldr	r3, [r3, #16]
 800e53a:	1c5a      	adds	r2, r3, #1
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	7e1b      	ldrb	r3, [r3, #24]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	3302      	adds	r3, #2
 800e54c:	2201      	movs	r2, #1
 800e54e:	fa02 f303 	lsl.w	r3, r2, r3
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e556:	fb03 f202 	mul.w	r2, r3, r2
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	7a1b      	ldrb	r3, [r3, #8]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f003 030f 	and.w	r3, r3, #15
 800e568:	2201      	movs	r2, #1
 800e56a:	409a      	lsls	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e578:	0a52      	lsrs	r2, r2, #9
 800e57a:	fb03 f202 	mul.w	r2, r3, r2
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e588:	661a      	str	r2, [r3, #96]	; 0x60
 800e58a:	e031      	b.n	800e5f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e590:	2b01      	cmp	r3, #1
 800e592:	d11d      	bne.n	800e5d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e598:	041b      	lsls	r3, r3, #16
 800e59a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5a2:	0c1b      	lsrs	r3, r3, #16
 800e5a4:	431a      	orrs	r2, r3
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	029a      	lsls	r2, r3, #10
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	661a      	str	r2, [r3, #96]	; 0x60
 800e5ce:	e00f      	b.n	800e5f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a58      	ldr	r2, [pc, #352]	; (800e738 <HAL_SD_GetCardCSD+0x344>)
 800e5d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e09d      	b.n	800e72c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f4:	0b9b      	lsrs	r3, r3, #14
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e606:	09db      	lsrs	r3, r3, #7
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e628:	0fdb      	lsrs	r3, r3, #31
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e634:	0f5b      	lsrs	r3, r3, #29
 800e636:	b2db      	uxtb	r3, r3
 800e638:	f003 0303 	and.w	r3, r3, #3
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e646:	0e9b      	lsrs	r3, r3, #26
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	f003 0307 	and.w	r3, r3, #7
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e658:	0d9b      	lsrs	r3, r3, #22
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	f003 030f 	and.w	r3, r3, #15
 800e660:	b2da      	uxtb	r2, r3
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e66a:	0d5b      	lsrs	r3, r3, #21
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	b2da      	uxtb	r2, r3
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e686:	0c1b      	lsrs	r3, r3, #16
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e69a:	0bdb      	lsrs	r3, r3, #15
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ae:	0b9b      	lsrs	r3, r3, #14
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c2:	0b5b      	lsrs	r3, r3, #13
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	b2da      	uxtb	r2, r3
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6d6:	0b1b      	lsrs	r3, r3, #12
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ea:	0a9b      	lsrs	r3, r3, #10
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	f003 0303 	and.w	r3, r3, #3
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6fe:	0a1b      	lsrs	r3, r3, #8
 800e700:	b2db      	uxtb	r3, r3
 800e702:	f003 0303 	and.w	r3, r3, #3
 800e706:	b2da      	uxtb	r2, r3
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e712:	085b      	lsrs	r3, r3, #1
 800e714:	b2db      	uxtb	r3, r3
 800e716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	2201      	movs	r2, #1
 800e726:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	004005ff 	.word	0x004005ff

0800e73c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e7a0:	f107 030c 	add.w	r3, r7, #12
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f970 	bl	800ea8c <SD_SendStatus>
 800e7ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d005      	beq.n	800e7c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	431a      	orrs	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	0a5b      	lsrs	r3, r3, #9
 800e7c4:	f003 030f 	and.w	r3, r3, #15
 800e7c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e7ca:	693b      	ldr	r3, [r7, #16]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7d4:	b5b0      	push	{r4, r5, r7, lr}
 800e7d6:	b094      	sub	sp, #80	; 0x50
 800e7d8:	af04      	add	r7, sp, #16
 800e7da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f002 fa50 	bl	8010c8a <SDIO_GetPowerState>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e7f4:	e0b8      	b.n	800e968 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d02f      	beq.n	800e85e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f002 fc37 	bl	8011076 <SDMMC_CmdSendCID>
 800e808:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d001      	beq.n	800e814 <SD_InitCard+0x40>
    {
      return errorstate;
 800e810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e812:	e0a9      	b.n	800e968 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2100      	movs	r1, #0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f002 fa7a 	bl	8010d14 <SDIO_GetResponse>
 800e820:	4602      	mov	r2, r0
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2104      	movs	r1, #4
 800e82c:	4618      	mov	r0, r3
 800e82e:	f002 fa71 	bl	8010d14 <SDIO_GetResponse>
 800e832:	4602      	mov	r2, r0
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2108      	movs	r1, #8
 800e83e:	4618      	mov	r0, r3
 800e840:	f002 fa68 	bl	8010d14 <SDIO_GetResponse>
 800e844:	4602      	mov	r2, r0
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	210c      	movs	r1, #12
 800e850:	4618      	mov	r0, r3
 800e852:	f002 fa5f 	bl	8010d14 <SDIO_GetResponse>
 800e856:	4602      	mov	r2, r0
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e862:	2b03      	cmp	r3, #3
 800e864:	d00d      	beq.n	800e882 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f107 020e 	add.w	r2, r7, #14
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f002 fc3d 	bl	80110f0 <SDMMC_CmdSetRelAdd>
 800e876:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <SD_InitCard+0xae>
    {
      return errorstate;
 800e87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e880:	e072      	b.n	800e968 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e886:	2b03      	cmp	r3, #3
 800e888:	d036      	beq.n	800e8f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e88a:	89fb      	ldrh	r3, [r7, #14]
 800e88c:	461a      	mov	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e89a:	041b      	lsls	r3, r3, #16
 800e89c:	4619      	mov	r1, r3
 800e89e:	4610      	mov	r0, r2
 800e8a0:	f002 fc07 	bl	80110b2 <SDMMC_CmdSendCSD>
 800e8a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ae:	e05b      	b.n	800e968 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f002 fa2c 	bl	8010d14 <SDIO_GetResponse>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2104      	movs	r1, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f002 fa23 	bl	8010d14 <SDIO_GetResponse>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2108      	movs	r1, #8
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f002 fa1a 	bl	8010d14 <SDIO_GetResponse>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	210c      	movs	r1, #12
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f002 fa11 	bl	8010d14 <SDIO_GetResponse>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2104      	movs	r1, #4
 800e8fe:	4618      	mov	r0, r3
 800e900:	f002 fa08 	bl	8010d14 <SDIO_GetResponse>
 800e904:	4603      	mov	r3, r0
 800e906:	0d1a      	lsrs	r2, r3, #20
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e90c:	f107 0310 	add.w	r3, r7, #16
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7ff fd6e 	bl	800e3f4 <HAL_SD_GetCardCSD>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d002      	beq.n	800e924 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e91e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e922:	e021      	b.n	800e968 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6819      	ldr	r1, [r3, #0]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e92c:	041b      	lsls	r3, r3, #16
 800e92e:	2200      	movs	r2, #0
 800e930:	461c      	mov	r4, r3
 800e932:	4615      	mov	r5, r2
 800e934:	4622      	mov	r2, r4
 800e936:	462b      	mov	r3, r5
 800e938:	4608      	mov	r0, r1
 800e93a:	f002 faf7 	bl	8010f2c <SDMMC_CmdSelDesel>
 800e93e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <SD_InitCard+0x176>
  {
    return errorstate;
 800e946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e948:	e00e      	b.n	800e968 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681d      	ldr	r5, [r3, #0]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	466c      	mov	r4, sp
 800e952:	f103 0210 	add.w	r2, r3, #16
 800e956:	ca07      	ldmia	r2, {r0, r1, r2}
 800e958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e95c:	3304      	adds	r3, #4
 800e95e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e960:	4628      	mov	r0, r5
 800e962:	f002 f93b 	bl	8010bdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3740      	adds	r7, #64	; 0x40
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bdb0      	pop	{r4, r5, r7, pc}

0800e970 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e978:	2300      	movs	r3, #0
 800e97a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e97c:	2300      	movs	r3, #0
 800e97e:	617b      	str	r3, [r7, #20]
 800e980:	2300      	movs	r3, #0
 800e982:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4618      	mov	r0, r3
 800e98a:	f002 faf2 	bl	8010f72 <SDMMC_CmdGoIdleState>
 800e98e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <SD_PowerON+0x2a>
  {
    return errorstate;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	e072      	b.n	800ea80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f002 fb05 	bl	8010fae <SDMMC_CmdOperCond>
 800e9a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00d      	beq.n	800e9c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f002 fadb 	bl	8010f72 <SDMMC_CmdGoIdleState>
 800e9bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d004      	beq.n	800e9ce <SD_PowerON+0x5e>
    {
      return errorstate;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	e05b      	b.n	800ea80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d137      	bne.n	800ea46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2100      	movs	r1, #0
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f002 fb05 	bl	8010fec <SDMMC_CmdAppCommand>
 800e9e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d02d      	beq.n	800ea46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9ee:	e047      	b.n	800ea80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f002 faf8 	bl	8010fec <SDMMC_CmdAppCommand>
 800e9fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d001      	beq.n	800ea08 <SD_PowerON+0x98>
    {
      return errorstate;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	e03b      	b.n	800ea80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	491e      	ldr	r1, [pc, #120]	; (800ea88 <SD_PowerON+0x118>)
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f002 fb0e 	bl	8011030 <SDMMC_CmdAppOperCommand>
 800ea14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea20:	e02e      	b.n	800ea80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2100      	movs	r1, #0
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f002 f973 	bl	8010d14 <SDIO_GetResponse>
 800ea2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	0fdb      	lsrs	r3, r3, #31
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d101      	bne.n	800ea3c <SD_PowerON+0xcc>
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e000      	b.n	800ea3e <SD_PowerON+0xce>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	613b      	str	r3, [r7, #16]

    count++;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	3301      	adds	r3, #1
 800ea44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d802      	bhi.n	800ea56 <SD_PowerON+0xe6>
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d0cc      	beq.n	800e9f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d902      	bls.n	800ea66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea64:	e00c      	b.n	800ea80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d003      	beq.n	800ea78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	645a      	str	r2, [r3, #68]	; 0x44
 800ea76:	e002      	b.n	800ea7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3718      	adds	r7, #24
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	c1100000 	.word	0xc1100000

0800ea8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eaa0:	e018      	b.n	800ead4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaaa:	041b      	lsls	r3, r3, #16
 800eaac:	4619      	mov	r1, r3
 800eaae:	4610      	mov	r0, r2
 800eab0:	f002 fb3f 	bl	8011132 <SDMMC_CmdSendStatus>
 800eab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	e009      	b.n	800ead4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2100      	movs	r1, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f002 f924 	bl	8010d14 <SDIO_GetResponse>
 800eacc:	4602      	mov	r2, r0
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e07b      	b.n	800ebe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d108      	bne.n	800eb08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eafe:	d009      	beq.n	800eb14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	61da      	str	r2, [r3, #28]
 800eb06:	e005      	b.n	800eb14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d106      	bne.n	800eb34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7f5 fe50 	bl	80047d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2202      	movs	r2, #2
 800eb38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eb5c:	431a      	orrs	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	431a      	orrs	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	431a      	orrs	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb84:	431a      	orrs	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb8e:	431a      	orrs	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a1b      	ldr	r3, [r3, #32]
 800eb94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb98:	ea42 0103 	orr.w	r1, r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	430a      	orrs	r2, r1
 800ebaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	699b      	ldr	r3, [r3, #24]
 800ebb0:	0c1b      	lsrs	r3, r3, #16
 800ebb2:	f003 0104 	and.w	r1, r3, #4
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebba:	f003 0210 	and.w	r2, r3, #16
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	69da      	ldr	r2, [r3, #28]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b088      	sub	sp, #32
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d101      	bne.n	800ec10 <HAL_SPI_Transmit+0x22>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	e126      	b.n	800ee5e <HAL_SPI_Transmit+0x270>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec18:	f7fc fa64 	bl	800b0e4 <HAL_GetTick>
 800ec1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ec1e:	88fb      	ldrh	r3, [r7, #6]
 800ec20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d002      	beq.n	800ec34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ec2e:	2302      	movs	r3, #2
 800ec30:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ec32:	e10b      	b.n	800ee4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <HAL_SPI_Transmit+0x52>
 800ec3a:	88fb      	ldrh	r3, [r7, #6]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d102      	bne.n	800ec46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ec44:	e102      	b.n	800ee4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2203      	movs	r2, #3
 800ec4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2200      	movs	r2, #0
 800ec52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	88fa      	ldrh	r2, [r7, #6]
 800ec5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	88fa      	ldrh	r2, [r7, #6]
 800ec64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2200      	movs	r2, #0
 800ec76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec8c:	d10f      	bne.n	800ecae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecb8:	2b40      	cmp	r3, #64	; 0x40
 800ecba:	d007      	beq.n	800eccc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecd4:	d14b      	bne.n	800ed6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d002      	beq.n	800ece4 <HAL_SPI_Transmit+0xf6>
 800ecde:	8afb      	ldrh	r3, [r7, #22]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d13e      	bne.n	800ed62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece8:	881a      	ldrh	r2, [r3, #0]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf4:	1c9a      	adds	r2, r3, #2
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	3b01      	subs	r3, #1
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ed08:	e02b      	b.n	800ed62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d112      	bne.n	800ed3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1c:	881a      	ldrh	r2, [r3, #0]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed28:	1c9a      	adds	r2, r3, #2
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	3b01      	subs	r3, #1
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ed3c:	e011      	b.n	800ed62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed3e:	f7fc f9d1 	bl	800b0e4 <HAL_GetTick>
 800ed42:	4602      	mov	r2, r0
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	683a      	ldr	r2, [r7, #0]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d803      	bhi.n	800ed56 <HAL_SPI_Transmit+0x168>
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed54:	d102      	bne.n	800ed5c <HAL_SPI_Transmit+0x16e>
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ed5c:	2303      	movs	r3, #3
 800ed5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ed60:	e074      	b.n	800ee4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1ce      	bne.n	800ed0a <HAL_SPI_Transmit+0x11c>
 800ed6c:	e04c      	b.n	800ee08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <HAL_SPI_Transmit+0x18e>
 800ed76:	8afb      	ldrh	r3, [r7, #22]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d140      	bne.n	800edfe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	330c      	adds	r3, #12
 800ed86:	7812      	ldrb	r2, [r2, #0]
 800ed88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	b29a      	uxth	r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800eda2:	e02c      	b.n	800edfe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f003 0302 	and.w	r3, r3, #2
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d113      	bne.n	800edda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	330c      	adds	r3, #12
 800edbc:	7812      	ldrb	r2, [r2, #0]
 800edbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc4:	1c5a      	adds	r2, r3, #1
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3b01      	subs	r3, #1
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	86da      	strh	r2, [r3, #54]	; 0x36
 800edd8:	e011      	b.n	800edfe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edda:	f7fc f983 	bl	800b0e4 <HAL_GetTick>
 800edde:	4602      	mov	r2, r0
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d803      	bhi.n	800edf2 <HAL_SPI_Transmit+0x204>
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf0:	d102      	bne.n	800edf8 <HAL_SPI_Transmit+0x20a>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d102      	bne.n	800edfe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800edf8:	2303      	movs	r3, #3
 800edfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800edfc:	e026      	b.n	800ee4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1cd      	bne.n	800eda4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee08:	69ba      	ldr	r2, [r7, #24]
 800ee0a:	6839      	ldr	r1, [r7, #0]
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f8b3 	bl	800ef78 <SPI_EndRxTxTransaction>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d002      	beq.n	800ee1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10a      	bne.n	800ee3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee26:	2300      	movs	r3, #0
 800ee28:	613b      	str	r3, [r7, #16]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	613b      	str	r3, [r7, #16]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	613b      	str	r3, [r7, #16]
 800ee3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	77fb      	strb	r3, [r7, #31]
 800ee48:	e000      	b.n	800ee4c <HAL_SPI_Transmit+0x25e>
  }

error:
 800ee4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3720      	adds	r7, #32
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	603b      	str	r3, [r7, #0]
 800ee74:	4613      	mov	r3, r2
 800ee76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ee78:	f7fc f934 	bl	800b0e4 <HAL_GetTick>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	1a9b      	subs	r3, r3, r2
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	4413      	add	r3, r2
 800ee86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ee88:	f7fc f92c 	bl	800b0e4 <HAL_GetTick>
 800ee8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ee8e:	4b39      	ldr	r3, [pc, #228]	; (800ef74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	015b      	lsls	r3, r3, #5
 800ee94:	0d1b      	lsrs	r3, r3, #20
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	fb02 f303 	mul.w	r3, r2, r3
 800ee9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee9e:	e054      	b.n	800ef4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea6:	d050      	beq.n	800ef4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eea8:	f7fc f91c 	bl	800b0e4 <HAL_GetTick>
 800eeac:	4602      	mov	r2, r0
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	69fa      	ldr	r2, [r7, #28]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d902      	bls.n	800eebe <SPI_WaitFlagStateUntilTimeout+0x56>
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d13d      	bne.n	800ef3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	685a      	ldr	r2, [r3, #4]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eed6:	d111      	bne.n	800eefc <SPI_WaitFlagStateUntilTimeout+0x94>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eee0:	d004      	beq.n	800eeec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeea:	d107      	bne.n	800eefc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eefa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef04:	d10f      	bne.n	800ef26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef36:	2303      	movs	r3, #3
 800ef38:	e017      	b.n	800ef6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ef40:	2300      	movs	r3, #0
 800ef42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	689a      	ldr	r2, [r3, #8]
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	4013      	ands	r3, r2
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	bf0c      	ite	eq
 800ef5a:	2301      	moveq	r3, #1
 800ef5c:	2300      	movne	r3, #0
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	461a      	mov	r2, r3
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d19b      	bne.n	800eea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3720      	adds	r7, #32
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	200000a8 	.word	0x200000a8

0800ef78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef84:	4b1b      	ldr	r3, [pc, #108]	; (800eff4 <SPI_EndRxTxTransaction+0x7c>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a1b      	ldr	r2, [pc, #108]	; (800eff8 <SPI_EndRxTxTransaction+0x80>)
 800ef8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef8e:	0d5b      	lsrs	r3, r3, #21
 800ef90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef94:	fb02 f303 	mul.w	r3, r2, r3
 800ef98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efa2:	d112      	bne.n	800efca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2200      	movs	r2, #0
 800efac:	2180      	movs	r1, #128	; 0x80
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f7ff ff5a 	bl	800ee68 <SPI_WaitFlagStateUntilTimeout>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d016      	beq.n	800efe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efbe:	f043 0220 	orr.w	r2, r3, #32
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efc6:	2303      	movs	r3, #3
 800efc8:	e00f      	b.n	800efea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00a      	beq.n	800efe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	3b01      	subs	r3, #1
 800efd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efe0:	2b80      	cmp	r3, #128	; 0x80
 800efe2:	d0f2      	beq.n	800efca <SPI_EndRxTxTransaction+0x52>
 800efe4:	e000      	b.n	800efe8 <SPI_EndRxTxTransaction+0x70>
        break;
 800efe6:	bf00      	nop
  }

  return HAL_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3718      	adds	r7, #24
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	200000a8 	.word	0x200000a8
 800eff8:	165e9f81 	.word	0x165e9f81

0800effc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d101      	bne.n	800f00e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e041      	b.n	800f092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	d106      	bne.n	800f028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7f5 ff7a 	bl	8004f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2202      	movs	r2, #2
 800f02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3304      	adds	r3, #4
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f000 fca8 	bl	800f990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3708      	adds	r7, #8
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
	...

0800f09c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d001      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e04e      	b.n	800f152 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2202      	movs	r2, #2
 800f0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	68da      	ldr	r2, [r3, #12]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f042 0201 	orr.w	r2, r2, #1
 800f0ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a23      	ldr	r2, [pc, #140]	; (800f160 <HAL_TIM_Base_Start_IT+0xc4>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d022      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0de:	d01d      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4a1f      	ldr	r2, [pc, #124]	; (800f164 <HAL_TIM_Base_Start_IT+0xc8>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d018      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4a1e      	ldr	r2, [pc, #120]	; (800f168 <HAL_TIM_Base_Start_IT+0xcc>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d013      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a1c      	ldr	r2, [pc, #112]	; (800f16c <HAL_TIM_Base_Start_IT+0xd0>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d00e      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a1b      	ldr	r2, [pc, #108]	; (800f170 <HAL_TIM_Base_Start_IT+0xd4>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d009      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a19      	ldr	r2, [pc, #100]	; (800f174 <HAL_TIM_Base_Start_IT+0xd8>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d004      	beq.n	800f11c <HAL_TIM_Base_Start_IT+0x80>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a18      	ldr	r2, [pc, #96]	; (800f178 <HAL_TIM_Base_Start_IT+0xdc>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d111      	bne.n	800f140 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b06      	cmp	r3, #6
 800f12c:	d010      	beq.n	800f150 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f042 0201 	orr.w	r2, r2, #1
 800f13c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f13e:	e007      	b.n	800f150 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f042 0201 	orr.w	r2, r2, #1
 800f14e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	40010000 	.word	0x40010000
 800f164:	40000400 	.word	0x40000400
 800f168:	40000800 	.word	0x40000800
 800f16c:	40000c00 	.word	0x40000c00
 800f170:	40010400 	.word	0x40010400
 800f174:	40014000 	.word	0x40014000
 800f178:	40001800 	.word	0x40001800

0800f17c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f022 0201 	bic.w	r2, r2, #1
 800f192:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6a1a      	ldr	r2, [r3, #32]
 800f19a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f19e:	4013      	ands	r3, r2
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10f      	bne.n	800f1c4 <HAL_TIM_Base_Stop_IT+0x48>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6a1a      	ldr	r2, [r3, #32]
 800f1aa:	f240 4344 	movw	r3, #1092	; 0x444
 800f1ae:	4013      	ands	r3, r2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d107      	bne.n	800f1c4 <HAL_TIM_Base_Stop_IT+0x48>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f022 0201 	bic.w	r2, r2, #1
 800f1c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	370c      	adds	r7, #12
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr

0800f1da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b082      	sub	sp, #8
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d101      	bne.n	800f1ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e041      	b.n	800f270 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d106      	bne.n	800f206 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 f839 	bl	800f278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2202      	movs	r2, #2
 800f20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	3304      	adds	r3, #4
 800f216:	4619      	mov	r1, r3
 800f218:	4610      	mov	r0, r2
 800f21a:	f000 fbb9 	bl	800f990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d109      	bne.n	800f2b0 <HAL_TIM_PWM_Start+0x24>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	bf14      	ite	ne
 800f2a8:	2301      	movne	r3, #1
 800f2aa:	2300      	moveq	r3, #0
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	e022      	b.n	800f2f6 <HAL_TIM_PWM_Start+0x6a>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	2b04      	cmp	r3, #4
 800f2b4:	d109      	bne.n	800f2ca <HAL_TIM_PWM_Start+0x3e>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	bf14      	ite	ne
 800f2c2:	2301      	movne	r3, #1
 800f2c4:	2300      	moveq	r3, #0
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	e015      	b.n	800f2f6 <HAL_TIM_PWM_Start+0x6a>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	2b08      	cmp	r3, #8
 800f2ce:	d109      	bne.n	800f2e4 <HAL_TIM_PWM_Start+0x58>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	bf14      	ite	ne
 800f2dc:	2301      	movne	r3, #1
 800f2de:	2300      	moveq	r3, #0
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	e008      	b.n	800f2f6 <HAL_TIM_PWM_Start+0x6a>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	bf14      	ite	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	2300      	moveq	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e07c      	b.n	800f3f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d104      	bne.n	800f30e <HAL_TIM_PWM_Start+0x82>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2202      	movs	r2, #2
 800f308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f30c:	e013      	b.n	800f336 <HAL_TIM_PWM_Start+0xaa>
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	2b04      	cmp	r3, #4
 800f312:	d104      	bne.n	800f31e <HAL_TIM_PWM_Start+0x92>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2202      	movs	r2, #2
 800f318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f31c:	e00b      	b.n	800f336 <HAL_TIM_PWM_Start+0xaa>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b08      	cmp	r3, #8
 800f322:	d104      	bne.n	800f32e <HAL_TIM_PWM_Start+0xa2>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2202      	movs	r2, #2
 800f328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f32c:	e003      	b.n	800f336 <HAL_TIM_PWM_Start+0xaa>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2202      	movs	r2, #2
 800f332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2201      	movs	r2, #1
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fe10 	bl	800ff64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a2d      	ldr	r2, [pc, #180]	; (800f400 <HAL_TIM_PWM_Start+0x174>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d004      	beq.n	800f358 <HAL_TIM_PWM_Start+0xcc>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	4a2c      	ldr	r2, [pc, #176]	; (800f404 <HAL_TIM_PWM_Start+0x178>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d101      	bne.n	800f35c <HAL_TIM_PWM_Start+0xd0>
 800f358:	2301      	movs	r3, #1
 800f35a:	e000      	b.n	800f35e <HAL_TIM_PWM_Start+0xd2>
 800f35c:	2300      	movs	r3, #0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d007      	beq.n	800f372 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4a22      	ldr	r2, [pc, #136]	; (800f400 <HAL_TIM_PWM_Start+0x174>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d022      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f384:	d01d      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a1f      	ldr	r2, [pc, #124]	; (800f408 <HAL_TIM_PWM_Start+0x17c>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d018      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a1d      	ldr	r2, [pc, #116]	; (800f40c <HAL_TIM_PWM_Start+0x180>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d013      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a1c      	ldr	r2, [pc, #112]	; (800f410 <HAL_TIM_PWM_Start+0x184>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d00e      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a16      	ldr	r2, [pc, #88]	; (800f404 <HAL_TIM_PWM_Start+0x178>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d009      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a18      	ldr	r2, [pc, #96]	; (800f414 <HAL_TIM_PWM_Start+0x188>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d004      	beq.n	800f3c2 <HAL_TIM_PWM_Start+0x136>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a16      	ldr	r2, [pc, #88]	; (800f418 <HAL_TIM_PWM_Start+0x18c>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d111      	bne.n	800f3e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	f003 0307 	and.w	r3, r3, #7
 800f3cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2b06      	cmp	r3, #6
 800f3d2:	d010      	beq.n	800f3f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f042 0201 	orr.w	r2, r2, #1
 800f3e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e4:	e007      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f042 0201 	orr.w	r2, r2, #1
 800f3f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	40010000 	.word	0x40010000
 800f404:	40010400 	.word	0x40010400
 800f408:	40000400 	.word	0x40000400
 800f40c:	40000800 	.word	0x40000800
 800f410:	40000c00 	.word	0x40000c00
 800f414:	40014000 	.word	0x40014000
 800f418:	40001800 	.word	0x40001800

0800f41c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d122      	bne.n	800f478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	f003 0302 	and.w	r3, r3, #2
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	d11b      	bne.n	800f478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f06f 0202 	mvn.w	r2, #2
 800f448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	699b      	ldr	r3, [r3, #24]
 800f456:	f003 0303 	and.w	r3, r3, #3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 fa77 	bl	800f952 <HAL_TIM_IC_CaptureCallback>
 800f464:	e005      	b.n	800f472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fa69 	bl	800f93e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fa7a 	bl	800f966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	f003 0304 	and.w	r3, r3, #4
 800f482:	2b04      	cmp	r3, #4
 800f484:	d122      	bne.n	800f4cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	f003 0304 	and.w	r3, r3, #4
 800f490:	2b04      	cmp	r3, #4
 800f492:	d11b      	bne.n	800f4cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f06f 0204 	mvn.w	r2, #4
 800f49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2202      	movs	r2, #2
 800f4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fa4d 	bl	800f952 <HAL_TIM_IC_CaptureCallback>
 800f4b8:	e005      	b.n	800f4c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fa3f 	bl	800f93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fa50 	bl	800f966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	f003 0308 	and.w	r3, r3, #8
 800f4d6:	2b08      	cmp	r3, #8
 800f4d8:	d122      	bne.n	800f520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	f003 0308 	and.w	r3, r3, #8
 800f4e4:	2b08      	cmp	r3, #8
 800f4e6:	d11b      	bne.n	800f520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f06f 0208 	mvn.w	r2, #8
 800f4f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2204      	movs	r2, #4
 800f4f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	f003 0303 	and.w	r3, r3, #3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fa23 	bl	800f952 <HAL_TIM_IC_CaptureCallback>
 800f50c:	e005      	b.n	800f51a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 fa15 	bl	800f93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 fa26 	bl	800f966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	f003 0310 	and.w	r3, r3, #16
 800f52a:	2b10      	cmp	r3, #16
 800f52c:	d122      	bne.n	800f574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	f003 0310 	and.w	r3, r3, #16
 800f538:	2b10      	cmp	r3, #16
 800f53a:	d11b      	bne.n	800f574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f06f 0210 	mvn.w	r2, #16
 800f544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2208      	movs	r2, #8
 800f54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	69db      	ldr	r3, [r3, #28]
 800f552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f556:	2b00      	cmp	r3, #0
 800f558:	d003      	beq.n	800f562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f9f9 	bl	800f952 <HAL_TIM_IC_CaptureCallback>
 800f560:	e005      	b.n	800f56e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f9eb 	bl	800f93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f9fc 	bl	800f966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	f003 0301 	and.w	r3, r3, #1
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d10e      	bne.n	800f5a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f003 0301 	and.w	r3, r3, #1
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d107      	bne.n	800f5a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f06f 0201 	mvn.w	r2, #1
 800f598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7f4 ff14 	bl	80043c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5aa:	2b80      	cmp	r3, #128	; 0x80
 800f5ac:	d10e      	bne.n	800f5cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5b8:	2b80      	cmp	r3, #128	; 0x80
 800f5ba:	d107      	bne.n	800f5cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fdca 	bl	8010160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d6:	2b40      	cmp	r3, #64	; 0x40
 800f5d8:	d10e      	bne.n	800f5f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5e4:	2b40      	cmp	r3, #64	; 0x40
 800f5e6:	d107      	bne.n	800f5f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f9c1 	bl	800f97a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	f003 0320 	and.w	r3, r3, #32
 800f602:	2b20      	cmp	r3, #32
 800f604:	d10e      	bne.n	800f624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	f003 0320 	and.w	r3, r3, #32
 800f610:	2b20      	cmp	r3, #32
 800f612:	d107      	bne.n	800f624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f06f 0220 	mvn.w	r2, #32
 800f61c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fd94 	bl	801014c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f642:	2b01      	cmp	r3, #1
 800f644:	d101      	bne.n	800f64a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f646:	2302      	movs	r3, #2
 800f648:	e0ae      	b.n	800f7a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b0c      	cmp	r3, #12
 800f656:	f200 809f 	bhi.w	800f798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f65a:	a201      	add	r2, pc, #4	; (adr r2, 800f660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f660:	0800f695 	.word	0x0800f695
 800f664:	0800f799 	.word	0x0800f799
 800f668:	0800f799 	.word	0x0800f799
 800f66c:	0800f799 	.word	0x0800f799
 800f670:	0800f6d5 	.word	0x0800f6d5
 800f674:	0800f799 	.word	0x0800f799
 800f678:	0800f799 	.word	0x0800f799
 800f67c:	0800f799 	.word	0x0800f799
 800f680:	0800f717 	.word	0x0800f717
 800f684:	0800f799 	.word	0x0800f799
 800f688:	0800f799 	.word	0x0800f799
 800f68c:	0800f799 	.word	0x0800f799
 800f690:	0800f757 	.word	0x0800f757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f000 fa18 	bl	800fad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	699a      	ldr	r2, [r3, #24]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f042 0208 	orr.w	r2, r2, #8
 800f6ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	699a      	ldr	r2, [r3, #24]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f022 0204 	bic.w	r2, r2, #4
 800f6be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6999      	ldr	r1, [r3, #24]
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	691a      	ldr	r2, [r3, #16]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	619a      	str	r2, [r3, #24]
      break;
 800f6d2:	e064      	b.n	800f79e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 fa68 	bl	800fbb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	699a      	ldr	r2, [r3, #24]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	699a      	ldr	r2, [r3, #24]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6999      	ldr	r1, [r3, #24]
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	021a      	lsls	r2, r3, #8
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	430a      	orrs	r2, r1
 800f712:	619a      	str	r2, [r3, #24]
      break;
 800f714:	e043      	b.n	800f79e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68b9      	ldr	r1, [r7, #8]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 fabd 	bl	800fc9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	69da      	ldr	r2, [r3, #28]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f042 0208 	orr.w	r2, r2, #8
 800f730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	69da      	ldr	r2, [r3, #28]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f022 0204 	bic.w	r2, r2, #4
 800f740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69d9      	ldr	r1, [r3, #28]
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	691a      	ldr	r2, [r3, #16]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	430a      	orrs	r2, r1
 800f752:	61da      	str	r2, [r3, #28]
      break;
 800f754:	e023      	b.n	800f79e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	68b9      	ldr	r1, [r7, #8]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 fb11 	bl	800fd84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	69da      	ldr	r2, [r3, #28]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	69da      	ldr	r2, [r3, #28]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69d9      	ldr	r1, [r3, #28]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	691b      	ldr	r3, [r3, #16]
 800f78c:	021a      	lsls	r2, r3, #8
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	430a      	orrs	r2, r1
 800f794:	61da      	str	r2, [r3, #28]
      break;
 800f796:	e002      	b.n	800f79e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	75fb      	strb	r3, [r7, #23]
      break;
 800f79c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d101      	bne.n	800f7cc <HAL_TIM_ConfigClockSource+0x1c>
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	e0b4      	b.n	800f936 <HAL_TIM_ConfigClockSource+0x186>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f7ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f804:	d03e      	beq.n	800f884 <HAL_TIM_ConfigClockSource+0xd4>
 800f806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f80a:	f200 8087 	bhi.w	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f812:	f000 8086 	beq.w	800f922 <HAL_TIM_ConfigClockSource+0x172>
 800f816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f81a:	d87f      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f81c:	2b70      	cmp	r3, #112	; 0x70
 800f81e:	d01a      	beq.n	800f856 <HAL_TIM_ConfigClockSource+0xa6>
 800f820:	2b70      	cmp	r3, #112	; 0x70
 800f822:	d87b      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f824:	2b60      	cmp	r3, #96	; 0x60
 800f826:	d050      	beq.n	800f8ca <HAL_TIM_ConfigClockSource+0x11a>
 800f828:	2b60      	cmp	r3, #96	; 0x60
 800f82a:	d877      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f82c:	2b50      	cmp	r3, #80	; 0x50
 800f82e:	d03c      	beq.n	800f8aa <HAL_TIM_ConfigClockSource+0xfa>
 800f830:	2b50      	cmp	r3, #80	; 0x50
 800f832:	d873      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f834:	2b40      	cmp	r3, #64	; 0x40
 800f836:	d058      	beq.n	800f8ea <HAL_TIM_ConfigClockSource+0x13a>
 800f838:	2b40      	cmp	r3, #64	; 0x40
 800f83a:	d86f      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f83c:	2b30      	cmp	r3, #48	; 0x30
 800f83e:	d064      	beq.n	800f90a <HAL_TIM_ConfigClockSource+0x15a>
 800f840:	2b30      	cmp	r3, #48	; 0x30
 800f842:	d86b      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f844:	2b20      	cmp	r3, #32
 800f846:	d060      	beq.n	800f90a <HAL_TIM_ConfigClockSource+0x15a>
 800f848:	2b20      	cmp	r3, #32
 800f84a:	d867      	bhi.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d05c      	beq.n	800f90a <HAL_TIM_ConfigClockSource+0x15a>
 800f850:	2b10      	cmp	r3, #16
 800f852:	d05a      	beq.n	800f90a <HAL_TIM_ConfigClockSource+0x15a>
 800f854:	e062      	b.n	800f91c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6818      	ldr	r0, [r3, #0]
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	6899      	ldr	r1, [r3, #8]
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	685a      	ldr	r2, [r3, #4]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	f000 fb5d 	bl	800ff24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	609a      	str	r2, [r3, #8]
      break;
 800f882:	e04f      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6818      	ldr	r0, [r3, #0]
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	6899      	ldr	r1, [r3, #8]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	685a      	ldr	r2, [r3, #4]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f000 fb46 	bl	800ff24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	689a      	ldr	r2, [r3, #8]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f8a6:	609a      	str	r2, [r3, #8]
      break;
 800f8a8:	e03c      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6818      	ldr	r0, [r3, #0]
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	6859      	ldr	r1, [r3, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f000 faba 	bl	800fe30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2150      	movs	r1, #80	; 0x50
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f000 fb13 	bl	800feee <TIM_ITRx_SetConfig>
      break;
 800f8c8:	e02c      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6818      	ldr	r0, [r3, #0]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	6859      	ldr	r1, [r3, #4]
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	f000 fad9 	bl	800fe8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2160      	movs	r1, #96	; 0x60
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f000 fb03 	bl	800feee <TIM_ITRx_SetConfig>
      break;
 800f8e8:	e01c      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6818      	ldr	r0, [r3, #0]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	6859      	ldr	r1, [r3, #4]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	68db      	ldr	r3, [r3, #12]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	f000 fa9a 	bl	800fe30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2140      	movs	r1, #64	; 0x40
 800f902:	4618      	mov	r0, r3
 800f904:	f000 faf3 	bl	800feee <TIM_ITRx_SetConfig>
      break;
 800f908:	e00c      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4619      	mov	r1, r3
 800f914:	4610      	mov	r0, r2
 800f916:	f000 faea 	bl	800feee <TIM_ITRx_SetConfig>
      break;
 800f91a:	e003      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f91c:	2301      	movs	r3, #1
 800f91e:	73fb      	strb	r3, [r7, #15]
      break;
 800f920:	e000      	b.n	800f924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f934:	7bfb      	ldrb	r3, [r7, #15]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3710      	adds	r7, #16
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f93e:	b480      	push	{r7}
 800f940:	b083      	sub	sp, #12
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f952:	b480      	push	{r7}
 800f954:	b083      	sub	sp, #12
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f95a:	bf00      	nop
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f966:	b480      	push	{r7}
 800f968:	b083      	sub	sp, #12
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f96e:	bf00      	nop
 800f970:	370c      	adds	r7, #12
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b083      	sub	sp, #12
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f982:	bf00      	nop
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
	...

0800f990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a40      	ldr	r2, [pc, #256]	; (800faa4 <TIM_Base_SetConfig+0x114>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d013      	beq.n	800f9d0 <TIM_Base_SetConfig+0x40>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ae:	d00f      	beq.n	800f9d0 <TIM_Base_SetConfig+0x40>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4a3d      	ldr	r2, [pc, #244]	; (800faa8 <TIM_Base_SetConfig+0x118>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d00b      	beq.n	800f9d0 <TIM_Base_SetConfig+0x40>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4a3c      	ldr	r2, [pc, #240]	; (800faac <TIM_Base_SetConfig+0x11c>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d007      	beq.n	800f9d0 <TIM_Base_SetConfig+0x40>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a3b      	ldr	r2, [pc, #236]	; (800fab0 <TIM_Base_SetConfig+0x120>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d003      	beq.n	800f9d0 <TIM_Base_SetConfig+0x40>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a3a      	ldr	r2, [pc, #232]	; (800fab4 <TIM_Base_SetConfig+0x124>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d108      	bne.n	800f9e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a2f      	ldr	r2, [pc, #188]	; (800faa4 <TIM_Base_SetConfig+0x114>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d02b      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9f0:	d027      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a2c      	ldr	r2, [pc, #176]	; (800faa8 <TIM_Base_SetConfig+0x118>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d023      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a2b      	ldr	r2, [pc, #172]	; (800faac <TIM_Base_SetConfig+0x11c>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d01f      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a2a      	ldr	r2, [pc, #168]	; (800fab0 <TIM_Base_SetConfig+0x120>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d01b      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a29      	ldr	r2, [pc, #164]	; (800fab4 <TIM_Base_SetConfig+0x124>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d017      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a28      	ldr	r2, [pc, #160]	; (800fab8 <TIM_Base_SetConfig+0x128>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d013      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a27      	ldr	r2, [pc, #156]	; (800fabc <TIM_Base_SetConfig+0x12c>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d00f      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a26      	ldr	r2, [pc, #152]	; (800fac0 <TIM_Base_SetConfig+0x130>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d00b      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a25      	ldr	r2, [pc, #148]	; (800fac4 <TIM_Base_SetConfig+0x134>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d007      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a24      	ldr	r2, [pc, #144]	; (800fac8 <TIM_Base_SetConfig+0x138>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d003      	beq.n	800fa42 <TIM_Base_SetConfig+0xb2>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a23      	ldr	r2, [pc, #140]	; (800facc <TIM_Base_SetConfig+0x13c>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d108      	bne.n	800fa54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	689a      	ldr	r2, [r3, #8]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4a0a      	ldr	r2, [pc, #40]	; (800faa4 <TIM_Base_SetConfig+0x114>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d003      	beq.n	800fa88 <TIM_Base_SetConfig+0xf8>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a0c      	ldr	r2, [pc, #48]	; (800fab4 <TIM_Base_SetConfig+0x124>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d103      	bne.n	800fa90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	691a      	ldr	r2, [r3, #16]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	615a      	str	r2, [r3, #20]
}
 800fa96:	bf00      	nop
 800fa98:	3714      	adds	r7, #20
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	40010000 	.word	0x40010000
 800faa8:	40000400 	.word	0x40000400
 800faac:	40000800 	.word	0x40000800
 800fab0:	40000c00 	.word	0x40000c00
 800fab4:	40010400 	.word	0x40010400
 800fab8:	40014000 	.word	0x40014000
 800fabc:	40014400 	.word	0x40014400
 800fac0:	40014800 	.word	0x40014800
 800fac4:	40001800 	.word	0x40001800
 800fac8:	40001c00 	.word	0x40001c00
 800facc:	40002000 	.word	0x40002000

0800fad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b087      	sub	sp, #28
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	f023 0201 	bic.w	r2, r3, #1
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f023 0303 	bic.w	r3, r3, #3
 800fb06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f023 0302 	bic.w	r3, r3, #2
 800fb18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4a20      	ldr	r2, [pc, #128]	; (800fba8 <TIM_OC1_SetConfig+0xd8>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d003      	beq.n	800fb34 <TIM_OC1_SetConfig+0x64>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a1f      	ldr	r2, [pc, #124]	; (800fbac <TIM_OC1_SetConfig+0xdc>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d10c      	bne.n	800fb4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	f023 0308 	bic.w	r3, r3, #8
 800fb3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	f023 0304 	bic.w	r3, r3, #4
 800fb4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4a15      	ldr	r2, [pc, #84]	; (800fba8 <TIM_OC1_SetConfig+0xd8>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d003      	beq.n	800fb5e <TIM_OC1_SetConfig+0x8e>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4a14      	ldr	r2, [pc, #80]	; (800fbac <TIM_OC1_SetConfig+0xdc>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d111      	bne.n	800fb82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	699b      	ldr	r3, [r3, #24]
 800fb7c:	693a      	ldr	r2, [r7, #16]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	693a      	ldr	r2, [r7, #16]
 800fb86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	685a      	ldr	r2, [r3, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	621a      	str	r2, [r3, #32]
}
 800fb9c:	bf00      	nop
 800fb9e:	371c      	adds	r7, #28
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr
 800fba8:	40010000 	.word	0x40010000
 800fbac:	40010400 	.word	0x40010400

0800fbb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	f023 0210 	bic.w	r2, r3, #16
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	021b      	lsls	r3, r3, #8
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	f023 0320 	bic.w	r3, r3, #32
 800fbfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	011b      	lsls	r3, r3, #4
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	4313      	orrs	r3, r2
 800fc06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	4a22      	ldr	r2, [pc, #136]	; (800fc94 <TIM_OC2_SetConfig+0xe4>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d003      	beq.n	800fc18 <TIM_OC2_SetConfig+0x68>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4a21      	ldr	r2, [pc, #132]	; (800fc98 <TIM_OC2_SetConfig+0xe8>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d10d      	bne.n	800fc34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	011b      	lsls	r3, r3, #4
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a17      	ldr	r2, [pc, #92]	; (800fc94 <TIM_OC2_SetConfig+0xe4>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d003      	beq.n	800fc44 <TIM_OC2_SetConfig+0x94>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a16      	ldr	r2, [pc, #88]	; (800fc98 <TIM_OC2_SetConfig+0xe8>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d113      	bne.n	800fc6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	695b      	ldr	r3, [r3, #20]
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	699b      	ldr	r3, [r3, #24]
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	693a      	ldr	r2, [r7, #16]
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	621a      	str	r2, [r3, #32]
}
 800fc86:	bf00      	nop
 800fc88:	371c      	adds	r7, #28
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	40010000 	.word	0x40010000
 800fc98:	40010400 	.word	0x40010400

0800fc9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b087      	sub	sp, #28
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a1b      	ldr	r3, [r3, #32]
 800fcaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6a1b      	ldr	r3, [r3, #32]
 800fcb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f023 0303 	bic.w	r3, r3, #3
 800fcd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	021b      	lsls	r3, r3, #8
 800fcec:	697a      	ldr	r2, [r7, #20]
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4a21      	ldr	r2, [pc, #132]	; (800fd7c <TIM_OC3_SetConfig+0xe0>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d003      	beq.n	800fd02 <TIM_OC3_SetConfig+0x66>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a20      	ldr	r2, [pc, #128]	; (800fd80 <TIM_OC3_SetConfig+0xe4>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d10d      	bne.n	800fd1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	021b      	lsls	r3, r3, #8
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4a16      	ldr	r2, [pc, #88]	; (800fd7c <TIM_OC3_SetConfig+0xe0>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d003      	beq.n	800fd2e <TIM_OC3_SetConfig+0x92>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4a15      	ldr	r2, [pc, #84]	; (800fd80 <TIM_OC3_SetConfig+0xe4>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d113      	bne.n	800fd56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	011b      	lsls	r3, r3, #4
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	699b      	ldr	r3, [r3, #24]
 800fd4e:	011b      	lsls	r3, r3, #4
 800fd50:	693a      	ldr	r2, [r7, #16]
 800fd52:	4313      	orrs	r3, r2
 800fd54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	685a      	ldr	r2, [r3, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	621a      	str	r2, [r3, #32]
}
 800fd70:	bf00      	nop
 800fd72:	371c      	adds	r7, #28
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	40010000 	.word	0x40010000
 800fd80:	40010400 	.word	0x40010400

0800fd84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b087      	sub	sp, #28
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a1b      	ldr	r3, [r3, #32]
 800fd92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6a1b      	ldr	r3, [r3, #32]
 800fd9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	69db      	ldr	r3, [r3, #28]
 800fdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	021b      	lsls	r3, r3, #8
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	031b      	lsls	r3, r3, #12
 800fdd6:	693a      	ldr	r2, [r7, #16]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4a12      	ldr	r2, [pc, #72]	; (800fe28 <TIM_OC4_SetConfig+0xa4>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d003      	beq.n	800fdec <TIM_OC4_SetConfig+0x68>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4a11      	ldr	r2, [pc, #68]	; (800fe2c <TIM_OC4_SetConfig+0xa8>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d109      	bne.n	800fe00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	019b      	lsls	r3, r3, #6
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	697a      	ldr	r2, [r7, #20]
 800fe04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	685a      	ldr	r2, [r3, #4]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	693a      	ldr	r2, [r7, #16]
 800fe18:	621a      	str	r2, [r3, #32]
}
 800fe1a:	bf00      	nop
 800fe1c:	371c      	adds	r7, #28
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	40010000 	.word	0x40010000
 800fe2c:	40010400 	.word	0x40010400

0800fe30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b087      	sub	sp, #28
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6a1b      	ldr	r3, [r3, #32]
 800fe40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	f023 0201 	bic.w	r2, r3, #1
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	4313      	orrs	r3, r2
 800fe64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f023 030a 	bic.w	r3, r3, #10
 800fe6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	4313      	orrs	r3, r2
 800fe74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	621a      	str	r2, [r3, #32]
}
 800fe82:	bf00      	nop
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr

0800fe8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe8e:	b480      	push	{r7}
 800fe90:	b087      	sub	sp, #28
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	60f8      	str	r0, [r7, #12]
 800fe96:	60b9      	str	r1, [r7, #8]
 800fe98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6a1b      	ldr	r3, [r3, #32]
 800fe9e:	f023 0210 	bic.w	r2, r3, #16
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	699b      	ldr	r3, [r3, #24]
 800feaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800feb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	031b      	lsls	r3, r3, #12
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	4313      	orrs	r3, r2
 800fec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800feca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	011b      	lsls	r3, r3, #4
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	693a      	ldr	r2, [r7, #16]
 800fee0:	621a      	str	r2, [r3, #32]
}
 800fee2:	bf00      	nop
 800fee4:	371c      	adds	r7, #28
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800feee:	b480      	push	{r7}
 800fef0:	b085      	sub	sp, #20
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	f043 0307 	orr.w	r3, r3, #7
 800ff10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	609a      	str	r2, [r3, #8]
}
 800ff18:	bf00      	nop
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b087      	sub	sp, #28
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	021a      	lsls	r2, r3, #8
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	431a      	orrs	r2, r3
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	697a      	ldr	r2, [r7, #20]
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	697a      	ldr	r2, [r7, #20]
 800ff56:	609a      	str	r2, [r3, #8]
}
 800ff58:	bf00      	nop
 800ff5a:	371c      	adds	r7, #28
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b087      	sub	sp, #28
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	f003 031f 	and.w	r3, r3, #31
 800ff76:	2201      	movs	r2, #1
 800ff78:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6a1a      	ldr	r2, [r3, #32]
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	43db      	mvns	r3, r3
 800ff86:	401a      	ands	r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6a1a      	ldr	r2, [r3, #32]
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f003 031f 	and.w	r3, r3, #31
 800ff96:	6879      	ldr	r1, [r7, #4]
 800ff98:	fa01 f303 	lsl.w	r3, r1, r3
 800ff9c:	431a      	orrs	r2, r3
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	621a      	str	r2, [r3, #32]
}
 800ffa2:	bf00      	nop
 800ffa4:	371c      	adds	r7, #28
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d101      	bne.n	800ffc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	e05a      	b.n	801007e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	4313      	orrs	r3, r2
 800fff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a21      	ldr	r2, [pc, #132]	; (801008c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d022      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010014:	d01d      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a1d      	ldr	r2, [pc, #116]	; (8010090 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d018      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a1b      	ldr	r2, [pc, #108]	; (8010094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d013      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a1a      	ldr	r2, [pc, #104]	; (8010098 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d00e      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4a18      	ldr	r2, [pc, #96]	; (801009c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d009      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a17      	ldr	r2, [pc, #92]	; (80100a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d004      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a15      	ldr	r2, [pc, #84]	; (80100a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d10c      	bne.n	801006c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	4313      	orrs	r3, r2
 8010062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	40010000 	.word	0x40010000
 8010090:	40000400 	.word	0x40000400
 8010094:	40000800 	.word	0x40000800
 8010098:	40000c00 	.word	0x40000c00
 801009c:	40010400 	.word	0x40010400
 80100a0:	40014000 	.word	0x40014000
 80100a4:	40001800 	.word	0x40001800

080100a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d101      	bne.n	80100c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100c0:	2302      	movs	r3, #2
 80100c2:	e03d      	b.n	8010140 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	4313      	orrs	r3, r2
 80100f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4313      	orrs	r3, r2
 8010102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	4313      	orrs	r3, r2
 8010110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	4313      	orrs	r3, r2
 801011e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	69db      	ldr	r3, [r3, #28]
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010154:	bf00      	nop
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010182:	2301      	movs	r3, #1
 8010184:	e03f      	b.n	8010206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801018c:	b2db      	uxtb	r3, r3
 801018e:	2b00      	cmp	r3, #0
 8010190:	d106      	bne.n	80101a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7f5 f816 	bl	80051cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2224      	movs	r2, #36	; 0x24
 80101a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68da      	ldr	r2, [r3, #12]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80101b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fa9b 	bl	80106f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	691a      	ldr	r2, [r3, #16]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80101cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	695a      	ldr	r2, [r3, #20]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80101dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68da      	ldr	r2, [r3, #12]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80101ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2220      	movs	r2, #32
 80101f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2220      	movs	r2, #32
 8010200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	60f8      	str	r0, [r7, #12]
 8010216:	60b9      	str	r1, [r7, #8]
 8010218:	4613      	mov	r3, r2
 801021a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b20      	cmp	r3, #32
 8010226:	d11d      	bne.n	8010264 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d002      	beq.n	8010234 <HAL_UART_Receive_DMA+0x26>
 801022e:	88fb      	ldrh	r3, [r7, #6]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	e016      	b.n	8010266 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801023e:	2b01      	cmp	r3, #1
 8010240:	d101      	bne.n	8010246 <HAL_UART_Receive_DMA+0x38>
 8010242:	2302      	movs	r3, #2
 8010244:	e00f      	b.n	8010266 <HAL_UART_Receive_DMA+0x58>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2200      	movs	r2, #0
 8010252:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010254:	88fb      	ldrh	r3, [r7, #6]
 8010256:	461a      	mov	r2, r3
 8010258:	68b9      	ldr	r1, [r7, #8]
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 f920 	bl	80104a0 <UART_Start_Receive_DMA>
 8010260:	4603      	mov	r3, r0
 8010262:	e000      	b.n	8010266 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010264:	2302      	movs	r3, #2
  }
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801026e:	b480      	push	{r7}
 8010270:	b083      	sub	sp, #12
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010276:	bf00      	nop
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr

08010282 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010282:	b480      	push	{r7}
 8010284:	b083      	sub	sp, #12
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801028a:	bf00      	nop
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010296:	b480      	push	{r7}
 8010298:	b083      	sub	sp, #12
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	460b      	mov	r3, r1
 80102a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80102a2:	bf00      	nop
 80102a4:	370c      	adds	r7, #12
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr

080102ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b09c      	sub	sp, #112	; 0x70
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d172      	bne.n	80103b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80102ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102cc:	2200      	movs	r2, #0
 80102ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	330c      	adds	r3, #12
 80102d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102da:	e853 3f00 	ldrex	r3, [r3]
 80102de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80102e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80102e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	330c      	adds	r3, #12
 80102ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80102f2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102f8:	e841 2300 	strex	r3, r2, [r1]
 80102fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80102fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1e5      	bne.n	80102d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3314      	adds	r3, #20
 801030a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	e853 3f00 	ldrex	r3, [r3]
 8010312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010316:	f023 0301 	bic.w	r3, r3, #1
 801031a:	667b      	str	r3, [r7, #100]	; 0x64
 801031c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3314      	adds	r3, #20
 8010322:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010324:	647a      	str	r2, [r7, #68]	; 0x44
 8010326:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801032a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801032c:	e841 2300 	strex	r3, r2, [r1]
 8010330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1e5      	bne.n	8010304 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3314      	adds	r3, #20
 801033e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	e853 3f00 	ldrex	r3, [r3]
 8010346:	623b      	str	r3, [r7, #32]
   return(result);
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801034e:	663b      	str	r3, [r7, #96]	; 0x60
 8010350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3314      	adds	r3, #20
 8010356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010358:	633a      	str	r2, [r7, #48]	; 0x30
 801035a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801035e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010360:	e841 2300 	strex	r3, r2, [r1]
 8010364:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1e5      	bne.n	8010338 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801036c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801036e:	2220      	movs	r2, #32
 8010370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010378:	2b01      	cmp	r3, #1
 801037a:	d119      	bne.n	80103b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801037c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	330c      	adds	r3, #12
 8010382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	e853 3f00 	ldrex	r3, [r3]
 801038a:	60fb      	str	r3, [r7, #12]
   return(result);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f023 0310 	bic.w	r3, r3, #16
 8010392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	330c      	adds	r3, #12
 801039a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801039c:	61fa      	str	r2, [r7, #28]
 801039e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a0:	69b9      	ldr	r1, [r7, #24]
 80103a2:	69fa      	ldr	r2, [r7, #28]
 80103a4:	e841 2300 	strex	r3, r2, [r1]
 80103a8:	617b      	str	r3, [r7, #20]
   return(result);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1e5      	bne.n	801037c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d106      	bne.n	80103c6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80103bc:	4619      	mov	r1, r3
 80103be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80103c0:	f7ff ff69 	bl	8010296 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80103c4:	e002      	b.n	80103cc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80103c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80103c8:	f7f4 f8c8 	bl	800455c <HAL_UART_RxCpltCallback>
}
 80103cc:	bf00      	nop
 80103ce:	3770      	adds	r7, #112	; 0x70
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d108      	bne.n	80103fc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80103ee:	085b      	lsrs	r3, r3, #1
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	4619      	mov	r1, r3
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f7ff ff4e 	bl	8010296 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80103fa:	e002      	b.n	8010402 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7ff ff36 	bl	801026e <HAL_UART_RxHalfCpltCallback>
}
 8010402:	bf00      	nop
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b084      	sub	sp, #16
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010412:	2300      	movs	r3, #0
 8010414:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801041a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	695b      	ldr	r3, [r3, #20]
 8010422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010426:	2b80      	cmp	r3, #128	; 0x80
 8010428:	bf0c      	ite	eq
 801042a:	2301      	moveq	r3, #1
 801042c:	2300      	movne	r3, #0
 801042e:	b2db      	uxtb	r3, r3
 8010430:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b21      	cmp	r3, #33	; 0x21
 801043c:	d108      	bne.n	8010450 <UART_DMAError+0x46>
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d005      	beq.n	8010450 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	2200      	movs	r2, #0
 8010448:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801044a:	68b8      	ldr	r0, [r7, #8]
 801044c:	f000 f8c6 	bl	80105dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801045a:	2b40      	cmp	r3, #64	; 0x40
 801045c:	bf0c      	ite	eq
 801045e:	2301      	moveq	r3, #1
 8010460:	2300      	movne	r3, #0
 8010462:	b2db      	uxtb	r3, r3
 8010464:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801046c:	b2db      	uxtb	r3, r3
 801046e:	2b22      	cmp	r3, #34	; 0x22
 8010470:	d108      	bne.n	8010484 <UART_DMAError+0x7a>
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d005      	beq.n	8010484 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	2200      	movs	r2, #0
 801047c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801047e:	68b8      	ldr	r0, [r7, #8]
 8010480:	f000 f8d4 	bl	801062c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010488:	f043 0210 	orr.w	r2, r3, #16
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010490:	68b8      	ldr	r0, [r7, #8]
 8010492:	f7ff fef6 	bl	8010282 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
	...

080104a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b098      	sub	sp, #96	; 0x60
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	4613      	mov	r3, r2
 80104ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	88fa      	ldrh	r2, [r7, #6]
 80104b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2222      	movs	r2, #34	; 0x22
 80104c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	4a40      	ldr	r2, [pc, #256]	; (80105d0 <UART_Start_Receive_DMA+0x130>)
 80104ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104d4:	4a3f      	ldr	r2, [pc, #252]	; (80105d4 <UART_Start_Receive_DMA+0x134>)
 80104d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104dc:	4a3e      	ldr	r2, [pc, #248]	; (80105d8 <UART_Start_Receive_DMA+0x138>)
 80104de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e4:	2200      	movs	r2, #0
 80104e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80104e8:	f107 0308 	add.w	r3, r7, #8
 80104ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3304      	adds	r3, #4
 80104f8:	4619      	mov	r1, r3
 80104fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	88fb      	ldrh	r3, [r7, #6]
 8010500:	f7fa ff31 	bl	800b366 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010504:	2300      	movs	r3, #0
 8010506:	613b      	str	r3, [r7, #16]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	613b      	str	r3, [r7, #16]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	613b      	str	r3, [r7, #16]
 8010518:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2200      	movs	r2, #0
 801051e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d019      	beq.n	801055e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	330c      	adds	r3, #12
 8010530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010534:	e853 3f00 	ldrex	r3, [r3]
 8010538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801053a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010540:	65bb      	str	r3, [r7, #88]	; 0x58
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	330c      	adds	r3, #12
 8010548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801054a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801054c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010552:	e841 2300 	strex	r3, r2, [r1]
 8010556:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1e5      	bne.n	801052a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3314      	adds	r3, #20
 8010564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	e853 3f00 	ldrex	r3, [r3]
 801056c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	f043 0301 	orr.w	r3, r3, #1
 8010574:	657b      	str	r3, [r7, #84]	; 0x54
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3314      	adds	r3, #20
 801057c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801057e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e5      	bne.n	801055e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3314      	adds	r3, #20
 8010598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	617b      	str	r3, [r7, #20]
   return(result);
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a8:	653b      	str	r3, [r7, #80]	; 0x50
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	3314      	adds	r3, #20
 80105b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105b2:	627a      	str	r2, [r7, #36]	; 0x24
 80105b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b6:	6a39      	ldr	r1, [r7, #32]
 80105b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ba:	e841 2300 	strex	r3, r2, [r1]
 80105be:	61fb      	str	r3, [r7, #28]
   return(result);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d1e5      	bne.n	8010592 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3760      	adds	r7, #96	; 0x60
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	080102af 	.word	0x080102af
 80105d4:	080103d5 	.word	0x080103d5
 80105d8:	0801040b 	.word	0x0801040b

080105dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105dc:	b480      	push	{r7}
 80105de:	b089      	sub	sp, #36	; 0x24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	330c      	adds	r3, #12
 80105ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	e853 3f00 	ldrex	r3, [r3]
 80105f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80105fa:	61fb      	str	r3, [r7, #28]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	330c      	adds	r3, #12
 8010602:	69fa      	ldr	r2, [r7, #28]
 8010604:	61ba      	str	r2, [r7, #24]
 8010606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010608:	6979      	ldr	r1, [r7, #20]
 801060a:	69ba      	ldr	r2, [r7, #24]
 801060c:	e841 2300 	strex	r3, r2, [r1]
 8010610:	613b      	str	r3, [r7, #16]
   return(result);
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1e5      	bne.n	80105e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2220      	movs	r2, #32
 801061c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8010620:	bf00      	nop
 8010622:	3724      	adds	r7, #36	; 0x24
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801062c:	b480      	push	{r7}
 801062e:	b095      	sub	sp, #84	; 0x54
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	330c      	adds	r3, #12
 801063a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063e:	e853 3f00 	ldrex	r3, [r3]
 8010642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801064a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	330c      	adds	r3, #12
 8010652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010654:	643a      	str	r2, [r7, #64]	; 0x40
 8010656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801065a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801065c:	e841 2300 	strex	r3, r2, [r1]
 8010660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1e5      	bne.n	8010634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	3314      	adds	r3, #20
 801066e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010670:	6a3b      	ldr	r3, [r7, #32]
 8010672:	e853 3f00 	ldrex	r3, [r3]
 8010676:	61fb      	str	r3, [r7, #28]
   return(result);
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	f023 0301 	bic.w	r3, r3, #1
 801067e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	3314      	adds	r3, #20
 8010686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010688:	62fa      	str	r2, [r7, #44]	; 0x2c
 801068a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801068e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010690:	e841 2300 	strex	r3, r2, [r1]
 8010694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1e5      	bne.n	8010668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d119      	bne.n	80106d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	330c      	adds	r3, #12
 80106aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	e853 3f00 	ldrex	r3, [r3]
 80106b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	f023 0310 	bic.w	r3, r3, #16
 80106ba:	647b      	str	r3, [r7, #68]	; 0x44
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	330c      	adds	r3, #12
 80106c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106c4:	61ba      	str	r2, [r7, #24]
 80106c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c8:	6979      	ldr	r1, [r7, #20]
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	e841 2300 	strex	r3, r2, [r1]
 80106d0:	613b      	str	r3, [r7, #16]
   return(result);
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e5      	bne.n	80106a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2220      	movs	r2, #32
 80106dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80106e6:	bf00      	nop
 80106e8:	3754      	adds	r7, #84	; 0x54
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
	...

080106f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106f8:	b0c0      	sub	sp, #256	; 0x100
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	691b      	ldr	r3, [r3, #16]
 8010708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801070c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010710:	68d9      	ldr	r1, [r3, #12]
 8010712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	ea40 0301 	orr.w	r3, r0, r1
 801071c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801071e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010722:	689a      	ldr	r2, [r3, #8]
 8010724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	431a      	orrs	r2, r3
 801072c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010730:	695b      	ldr	r3, [r3, #20]
 8010732:	431a      	orrs	r2, r3
 8010734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	4313      	orrs	r3, r2
 801073c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801074c:	f021 010c 	bic.w	r1, r1, #12
 8010750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801075a:	430b      	orrs	r3, r1
 801075c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801075e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	695b      	ldr	r3, [r3, #20]
 8010766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801076a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801076e:	6999      	ldr	r1, [r3, #24]
 8010770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	ea40 0301 	orr.w	r3, r0, r1
 801077a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801077c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	4b8f      	ldr	r3, [pc, #572]	; (80109c0 <UART_SetConfig+0x2cc>)
 8010784:	429a      	cmp	r2, r3
 8010786:	d005      	beq.n	8010794 <UART_SetConfig+0xa0>
 8010788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	4b8d      	ldr	r3, [pc, #564]	; (80109c4 <UART_SetConfig+0x2d0>)
 8010790:	429a      	cmp	r2, r3
 8010792:	d104      	bne.n	801079e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010794:	f7fc fd48 	bl	800d228 <HAL_RCC_GetPCLK2Freq>
 8010798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801079c:	e003      	b.n	80107a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801079e:	f7fc fd2f 	bl	800d200 <HAL_RCC_GetPCLK1Freq>
 80107a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80107a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107aa:	69db      	ldr	r3, [r3, #28]
 80107ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107b0:	f040 810c 	bne.w	80109cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80107b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80107b8:	2200      	movs	r2, #0
 80107ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80107c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80107c6:	4622      	mov	r2, r4
 80107c8:	462b      	mov	r3, r5
 80107ca:	1891      	adds	r1, r2, r2
 80107cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80107ce:	415b      	adcs	r3, r3
 80107d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80107d6:	4621      	mov	r1, r4
 80107d8:	eb12 0801 	adds.w	r8, r2, r1
 80107dc:	4629      	mov	r1, r5
 80107de:	eb43 0901 	adc.w	r9, r3, r1
 80107e2:	f04f 0200 	mov.w	r2, #0
 80107e6:	f04f 0300 	mov.w	r3, #0
 80107ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80107ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80107f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80107f6:	4690      	mov	r8, r2
 80107f8:	4699      	mov	r9, r3
 80107fa:	4623      	mov	r3, r4
 80107fc:	eb18 0303 	adds.w	r3, r8, r3
 8010800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010804:	462b      	mov	r3, r5
 8010806:	eb49 0303 	adc.w	r3, r9, r3
 801080a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801080e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801081a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801081e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010822:	460b      	mov	r3, r1
 8010824:	18db      	adds	r3, r3, r3
 8010826:	653b      	str	r3, [r7, #80]	; 0x50
 8010828:	4613      	mov	r3, r2
 801082a:	eb42 0303 	adc.w	r3, r2, r3
 801082e:	657b      	str	r3, [r7, #84]	; 0x54
 8010830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010838:	f7f0 fa46 	bl	8000cc8 <__aeabi_uldivmod>
 801083c:	4602      	mov	r2, r0
 801083e:	460b      	mov	r3, r1
 8010840:	4b61      	ldr	r3, [pc, #388]	; (80109c8 <UART_SetConfig+0x2d4>)
 8010842:	fba3 2302 	umull	r2, r3, r3, r2
 8010846:	095b      	lsrs	r3, r3, #5
 8010848:	011c      	lsls	r4, r3, #4
 801084a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801084e:	2200      	movs	r2, #0
 8010850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801085c:	4642      	mov	r2, r8
 801085e:	464b      	mov	r3, r9
 8010860:	1891      	adds	r1, r2, r2
 8010862:	64b9      	str	r1, [r7, #72]	; 0x48
 8010864:	415b      	adcs	r3, r3
 8010866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801086c:	4641      	mov	r1, r8
 801086e:	eb12 0a01 	adds.w	sl, r2, r1
 8010872:	4649      	mov	r1, r9
 8010874:	eb43 0b01 	adc.w	fp, r3, r1
 8010878:	f04f 0200 	mov.w	r2, #0
 801087c:	f04f 0300 	mov.w	r3, #0
 8010880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801088c:	4692      	mov	sl, r2
 801088e:	469b      	mov	fp, r3
 8010890:	4643      	mov	r3, r8
 8010892:	eb1a 0303 	adds.w	r3, sl, r3
 8010896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801089a:	464b      	mov	r3, r9
 801089c:	eb4b 0303 	adc.w	r3, fp, r3
 80108a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80108a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80108b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80108b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80108b8:	460b      	mov	r3, r1
 80108ba:	18db      	adds	r3, r3, r3
 80108bc:	643b      	str	r3, [r7, #64]	; 0x40
 80108be:	4613      	mov	r3, r2
 80108c0:	eb42 0303 	adc.w	r3, r2, r3
 80108c4:	647b      	str	r3, [r7, #68]	; 0x44
 80108c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80108ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80108ce:	f7f0 f9fb 	bl	8000cc8 <__aeabi_uldivmod>
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	4611      	mov	r1, r2
 80108d8:	4b3b      	ldr	r3, [pc, #236]	; (80109c8 <UART_SetConfig+0x2d4>)
 80108da:	fba3 2301 	umull	r2, r3, r3, r1
 80108de:	095b      	lsrs	r3, r3, #5
 80108e0:	2264      	movs	r2, #100	; 0x64
 80108e2:	fb02 f303 	mul.w	r3, r2, r3
 80108e6:	1acb      	subs	r3, r1, r3
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80108ee:	4b36      	ldr	r3, [pc, #216]	; (80109c8 <UART_SetConfig+0x2d4>)
 80108f0:	fba3 2302 	umull	r2, r3, r3, r2
 80108f4:	095b      	lsrs	r3, r3, #5
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80108fc:	441c      	add	r4, r3
 80108fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010902:	2200      	movs	r2, #0
 8010904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801090c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010910:	4642      	mov	r2, r8
 8010912:	464b      	mov	r3, r9
 8010914:	1891      	adds	r1, r2, r2
 8010916:	63b9      	str	r1, [r7, #56]	; 0x38
 8010918:	415b      	adcs	r3, r3
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801091c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010920:	4641      	mov	r1, r8
 8010922:	1851      	adds	r1, r2, r1
 8010924:	6339      	str	r1, [r7, #48]	; 0x30
 8010926:	4649      	mov	r1, r9
 8010928:	414b      	adcs	r3, r1
 801092a:	637b      	str	r3, [r7, #52]	; 0x34
 801092c:	f04f 0200 	mov.w	r2, #0
 8010930:	f04f 0300 	mov.w	r3, #0
 8010934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010938:	4659      	mov	r1, fp
 801093a:	00cb      	lsls	r3, r1, #3
 801093c:	4651      	mov	r1, sl
 801093e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010942:	4651      	mov	r1, sl
 8010944:	00ca      	lsls	r2, r1, #3
 8010946:	4610      	mov	r0, r2
 8010948:	4619      	mov	r1, r3
 801094a:	4603      	mov	r3, r0
 801094c:	4642      	mov	r2, r8
 801094e:	189b      	adds	r3, r3, r2
 8010950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010954:	464b      	mov	r3, r9
 8010956:	460a      	mov	r2, r1
 8010958:	eb42 0303 	adc.w	r3, r2, r3
 801095c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801096c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010974:	460b      	mov	r3, r1
 8010976:	18db      	adds	r3, r3, r3
 8010978:	62bb      	str	r3, [r7, #40]	; 0x28
 801097a:	4613      	mov	r3, r2
 801097c:	eb42 0303 	adc.w	r3, r2, r3
 8010980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801098a:	f7f0 f99d 	bl	8000cc8 <__aeabi_uldivmod>
 801098e:	4602      	mov	r2, r0
 8010990:	460b      	mov	r3, r1
 8010992:	4b0d      	ldr	r3, [pc, #52]	; (80109c8 <UART_SetConfig+0x2d4>)
 8010994:	fba3 1302 	umull	r1, r3, r3, r2
 8010998:	095b      	lsrs	r3, r3, #5
 801099a:	2164      	movs	r1, #100	; 0x64
 801099c:	fb01 f303 	mul.w	r3, r1, r3
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	00db      	lsls	r3, r3, #3
 80109a4:	3332      	adds	r3, #50	; 0x32
 80109a6:	4a08      	ldr	r2, [pc, #32]	; (80109c8 <UART_SetConfig+0x2d4>)
 80109a8:	fba2 2303 	umull	r2, r3, r2, r3
 80109ac:	095b      	lsrs	r3, r3, #5
 80109ae:	f003 0207 	and.w	r2, r3, #7
 80109b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4422      	add	r2, r4
 80109ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80109bc:	e105      	b.n	8010bca <UART_SetConfig+0x4d6>
 80109be:	bf00      	nop
 80109c0:	40011000 	.word	0x40011000
 80109c4:	40011400 	.word	0x40011400
 80109c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80109cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109d0:	2200      	movs	r2, #0
 80109d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80109d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80109da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80109de:	4642      	mov	r2, r8
 80109e0:	464b      	mov	r3, r9
 80109e2:	1891      	adds	r1, r2, r2
 80109e4:	6239      	str	r1, [r7, #32]
 80109e6:	415b      	adcs	r3, r3
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
 80109ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80109ee:	4641      	mov	r1, r8
 80109f0:	1854      	adds	r4, r2, r1
 80109f2:	4649      	mov	r1, r9
 80109f4:	eb43 0501 	adc.w	r5, r3, r1
 80109f8:	f04f 0200 	mov.w	r2, #0
 80109fc:	f04f 0300 	mov.w	r3, #0
 8010a00:	00eb      	lsls	r3, r5, #3
 8010a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010a06:	00e2      	lsls	r2, r4, #3
 8010a08:	4614      	mov	r4, r2
 8010a0a:	461d      	mov	r5, r3
 8010a0c:	4643      	mov	r3, r8
 8010a0e:	18e3      	adds	r3, r4, r3
 8010a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a14:	464b      	mov	r3, r9
 8010a16:	eb45 0303 	adc.w	r3, r5, r3
 8010a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	2200      	movs	r2, #0
 8010a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010a2e:	f04f 0200 	mov.w	r2, #0
 8010a32:	f04f 0300 	mov.w	r3, #0
 8010a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010a3a:	4629      	mov	r1, r5
 8010a3c:	008b      	lsls	r3, r1, #2
 8010a3e:	4621      	mov	r1, r4
 8010a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010a44:	4621      	mov	r1, r4
 8010a46:	008a      	lsls	r2, r1, #2
 8010a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010a4c:	f7f0 f93c 	bl	8000cc8 <__aeabi_uldivmod>
 8010a50:	4602      	mov	r2, r0
 8010a52:	460b      	mov	r3, r1
 8010a54:	4b60      	ldr	r3, [pc, #384]	; (8010bd8 <UART_SetConfig+0x4e4>)
 8010a56:	fba3 2302 	umull	r2, r3, r3, r2
 8010a5a:	095b      	lsrs	r3, r3, #5
 8010a5c:	011c      	lsls	r4, r3, #4
 8010a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a62:	2200      	movs	r2, #0
 8010a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010a70:	4642      	mov	r2, r8
 8010a72:	464b      	mov	r3, r9
 8010a74:	1891      	adds	r1, r2, r2
 8010a76:	61b9      	str	r1, [r7, #24]
 8010a78:	415b      	adcs	r3, r3
 8010a7a:	61fb      	str	r3, [r7, #28]
 8010a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a80:	4641      	mov	r1, r8
 8010a82:	1851      	adds	r1, r2, r1
 8010a84:	6139      	str	r1, [r7, #16]
 8010a86:	4649      	mov	r1, r9
 8010a88:	414b      	adcs	r3, r1
 8010a8a:	617b      	str	r3, [r7, #20]
 8010a8c:	f04f 0200 	mov.w	r2, #0
 8010a90:	f04f 0300 	mov.w	r3, #0
 8010a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010a98:	4659      	mov	r1, fp
 8010a9a:	00cb      	lsls	r3, r1, #3
 8010a9c:	4651      	mov	r1, sl
 8010a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010aa2:	4651      	mov	r1, sl
 8010aa4:	00ca      	lsls	r2, r1, #3
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4603      	mov	r3, r0
 8010aac:	4642      	mov	r2, r8
 8010aae:	189b      	adds	r3, r3, r2
 8010ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010ab4:	464b      	mov	r3, r9
 8010ab6:	460a      	mov	r2, r1
 8010ab8:	eb42 0303 	adc.w	r3, r2, r3
 8010abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8010aca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010acc:	f04f 0200 	mov.w	r2, #0
 8010ad0:	f04f 0300 	mov.w	r3, #0
 8010ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8010ad8:	4649      	mov	r1, r9
 8010ada:	008b      	lsls	r3, r1, #2
 8010adc:	4641      	mov	r1, r8
 8010ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010ae2:	4641      	mov	r1, r8
 8010ae4:	008a      	lsls	r2, r1, #2
 8010ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010aea:	f7f0 f8ed 	bl	8000cc8 <__aeabi_uldivmod>
 8010aee:	4602      	mov	r2, r0
 8010af0:	460b      	mov	r3, r1
 8010af2:	4b39      	ldr	r3, [pc, #228]	; (8010bd8 <UART_SetConfig+0x4e4>)
 8010af4:	fba3 1302 	umull	r1, r3, r3, r2
 8010af8:	095b      	lsrs	r3, r3, #5
 8010afa:	2164      	movs	r1, #100	; 0x64
 8010afc:	fb01 f303 	mul.w	r3, r1, r3
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	011b      	lsls	r3, r3, #4
 8010b04:	3332      	adds	r3, #50	; 0x32
 8010b06:	4a34      	ldr	r2, [pc, #208]	; (8010bd8 <UART_SetConfig+0x4e4>)
 8010b08:	fba2 2303 	umull	r2, r3, r2, r3
 8010b0c:	095b      	lsrs	r3, r3, #5
 8010b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b12:	441c      	add	r4, r3
 8010b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b18:	2200      	movs	r2, #0
 8010b1a:	673b      	str	r3, [r7, #112]	; 0x70
 8010b1c:	677a      	str	r2, [r7, #116]	; 0x74
 8010b1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010b22:	4642      	mov	r2, r8
 8010b24:	464b      	mov	r3, r9
 8010b26:	1891      	adds	r1, r2, r2
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	415b      	adcs	r3, r3
 8010b2c:	60fb      	str	r3, [r7, #12]
 8010b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010b32:	4641      	mov	r1, r8
 8010b34:	1851      	adds	r1, r2, r1
 8010b36:	6039      	str	r1, [r7, #0]
 8010b38:	4649      	mov	r1, r9
 8010b3a:	414b      	adcs	r3, r1
 8010b3c:	607b      	str	r3, [r7, #4]
 8010b3e:	f04f 0200 	mov.w	r2, #0
 8010b42:	f04f 0300 	mov.w	r3, #0
 8010b46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010b4a:	4659      	mov	r1, fp
 8010b4c:	00cb      	lsls	r3, r1, #3
 8010b4e:	4651      	mov	r1, sl
 8010b50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010b54:	4651      	mov	r1, sl
 8010b56:	00ca      	lsls	r2, r1, #3
 8010b58:	4610      	mov	r0, r2
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	4642      	mov	r2, r8
 8010b60:	189b      	adds	r3, r3, r2
 8010b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b64:	464b      	mov	r3, r9
 8010b66:	460a      	mov	r2, r1
 8010b68:	eb42 0303 	adc.w	r3, r2, r3
 8010b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	663b      	str	r3, [r7, #96]	; 0x60
 8010b78:	667a      	str	r2, [r7, #100]	; 0x64
 8010b7a:	f04f 0200 	mov.w	r2, #0
 8010b7e:	f04f 0300 	mov.w	r3, #0
 8010b82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010b86:	4649      	mov	r1, r9
 8010b88:	008b      	lsls	r3, r1, #2
 8010b8a:	4641      	mov	r1, r8
 8010b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010b90:	4641      	mov	r1, r8
 8010b92:	008a      	lsls	r2, r1, #2
 8010b94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010b98:	f7f0 f896 	bl	8000cc8 <__aeabi_uldivmod>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	4b0d      	ldr	r3, [pc, #52]	; (8010bd8 <UART_SetConfig+0x4e4>)
 8010ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8010ba6:	095b      	lsrs	r3, r3, #5
 8010ba8:	2164      	movs	r1, #100	; 0x64
 8010baa:	fb01 f303 	mul.w	r3, r1, r3
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	011b      	lsls	r3, r3, #4
 8010bb2:	3332      	adds	r3, #50	; 0x32
 8010bb4:	4a08      	ldr	r2, [pc, #32]	; (8010bd8 <UART_SetConfig+0x4e4>)
 8010bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bba:	095b      	lsrs	r3, r3, #5
 8010bbc:	f003 020f 	and.w	r2, r3, #15
 8010bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4422      	add	r2, r4
 8010bc8:	609a      	str	r2, [r3, #8]
}
 8010bca:	bf00      	nop
 8010bcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bd6:	bf00      	nop
 8010bd8:	51eb851f 	.word	0x51eb851f

08010bdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010bdc:	b084      	sub	sp, #16
 8010bde:	b480      	push	{r7}
 8010be0:	b085      	sub	sp, #20
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	f107 001c 	add.w	r0, r7, #28
 8010bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010bf2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010bf6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010bfa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010bfe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010c02:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010c06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	431a      	orrs	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	b004      	add	sp, #16
 8010c30:	4770      	bx	lr

08010c32 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010c32:	b480      	push	{r7}
 8010c34:	b083      	sub	sp, #12
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c60:	2300      	movs	r3, #0
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2203      	movs	r2, #3
 8010c7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f003 0303 	and.w	r3, r3, #3
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010ca6:	b480      	push	{r7}
 8010ca8:	b085      	sub	sp, #20
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cc4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010cca:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010cd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010ce0:	f023 030f 	bic.w	r3, r3, #15
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	431a      	orrs	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010cfa:	b480      	push	{r7}
 8010cfc:	b083      	sub	sp, #12
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	691b      	ldr	r3, [r3, #16]
 8010d06:	b2db      	uxtb	r3, r3
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b085      	sub	sp, #20
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3314      	adds	r3, #20
 8010d22:	461a      	mov	r2, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	4413      	add	r3, r2
 8010d28:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
}  
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010d3a:	b480      	push	{r7}
 8010d3c:	b085      	sub	sp, #20
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
 8010d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	685a      	ldr	r2, [r3, #4]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d60:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010d66:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d78:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	431a      	orrs	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010d84:	2300      	movs	r3, #0

}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3714      	adds	r7, #20
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr

08010d92 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b088      	sub	sp, #32
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010da0:	2310      	movs	r3, #16
 8010da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010da4:	2340      	movs	r3, #64	; 0x40
 8010da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010da8:	2300      	movs	r3, #0
 8010daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010db2:	f107 0308 	add.w	r3, r7, #8
 8010db6:	4619      	mov	r1, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff ff74 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dc2:	2110      	movs	r1, #16
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f000 f9d7 	bl	8011178 <SDMMC_GetCmdResp1>
 8010dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3720      	adds	r7, #32
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b088      	sub	sp, #32
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010de4:	2311      	movs	r3, #17
 8010de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010de8:	2340      	movs	r3, #64	; 0x40
 8010dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010dec:	2300      	movs	r3, #0
 8010dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010df4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010df6:	f107 0308 	add.w	r3, r7, #8
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff ff52 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e06:	2111      	movs	r1, #17
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f9b5 	bl	8011178 <SDMMC_GetCmdResp1>
 8010e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e10:	69fb      	ldr	r3, [r7, #28]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3720      	adds	r7, #32
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b088      	sub	sp, #32
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
 8010e22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010e28:	2312      	movs	r3, #18
 8010e2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e2c:	2340      	movs	r3, #64	; 0x40
 8010e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e30:	2300      	movs	r3, #0
 8010e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e3a:	f107 0308 	add.w	r3, r7, #8
 8010e3e:	4619      	mov	r1, r3
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f7ff ff30 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e4a:	2112      	movs	r1, #18
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f993 	bl	8011178 <SDMMC_GetCmdResp1>
 8010e52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e54:	69fb      	ldr	r3, [r7, #28]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3720      	adds	r7, #32
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b088      	sub	sp, #32
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e6c:	2318      	movs	r3, #24
 8010e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e70:	2340      	movs	r3, #64	; 0x40
 8010e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e74:	2300      	movs	r3, #0
 8010e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e7e:	f107 0308 	add.w	r3, r7, #8
 8010e82:	4619      	mov	r1, r3
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7ff ff0e 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e8e:	2118      	movs	r1, #24
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f971 	bl	8011178 <SDMMC_GetCmdResp1>
 8010e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e98:	69fb      	ldr	r3, [r7, #28]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3720      	adds	r7, #32
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b088      	sub	sp, #32
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010eb0:	2319      	movs	r3, #25
 8010eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010eb4:	2340      	movs	r3, #64	; 0x40
 8010eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ec0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ec2:	f107 0308 	add.w	r3, r7, #8
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff feec 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ed2:	2119      	movs	r1, #25
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 f94f 	bl	8011178 <SDMMC_GetCmdResp1>
 8010eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010edc:	69fb      	ldr	r3, [r7, #28]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3720      	adds	r7, #32
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
	...

08010ee8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b088      	sub	sp, #32
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ef4:	230c      	movs	r3, #12
 8010ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ef8:	2340      	movs	r3, #64	; 0x40
 8010efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010efc:	2300      	movs	r3, #0
 8010efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f06:	f107 0308 	add.w	r3, r7, #8
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f7ff feca 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010f12:	4a05      	ldr	r2, [pc, #20]	; (8010f28 <SDMMC_CmdStopTransfer+0x40>)
 8010f14:	210c      	movs	r1, #12
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 f92e 	bl	8011178 <SDMMC_GetCmdResp1>
 8010f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f1e:	69fb      	ldr	r3, [r7, #28]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3720      	adds	r7, #32
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	05f5e100 	.word	0x05f5e100

08010f2c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b08a      	sub	sp, #40	; 0x28
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f3c:	2307      	movs	r3, #7
 8010f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f40:	2340      	movs	r3, #64	; 0x40
 8010f42:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f44:	2300      	movs	r3, #0
 8010f46:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f4c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f4e:	f107 0310 	add.w	r3, r7, #16
 8010f52:	4619      	mov	r1, r3
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f7ff fea6 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f5e:	2107      	movs	r1, #7
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f000 f909 	bl	8011178 <SDMMC_GetCmdResp1>
 8010f66:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3728      	adds	r7, #40	; 0x28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b088      	sub	sp, #32
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010f82:	2300      	movs	r3, #0
 8010f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f86:	2300      	movs	r3, #0
 8010f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f90:	f107 0308 	add.w	r3, r7, #8
 8010f94:	4619      	mov	r1, r3
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7ff fe85 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 fb23 	bl	80115e8 <SDMMC_GetCmdError>
 8010fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa4:	69fb      	ldr	r3, [r7, #28]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3720      	adds	r7, #32
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b088      	sub	sp, #32
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010fb6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fbc:	2308      	movs	r3, #8
 8010fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010fc0:	2340      	movs	r3, #64	; 0x40
 8010fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010fce:	f107 0308 	add.w	r3, r7, #8
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7ff fe66 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fab6 	bl	801154c <SDMMC_GetCmdResp7>
 8010fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fe2:	69fb      	ldr	r3, [r7, #28]
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3720      	adds	r7, #32
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b088      	sub	sp, #32
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ffa:	2337      	movs	r3, #55	; 0x37
 8010ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ffe:	2340      	movs	r3, #64	; 0x40
 8011000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011002:	2300      	movs	r3, #0
 8011004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801100a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801100c:	f107 0308 	add.w	r3, r7, #8
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff fe47 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011018:	f241 3288 	movw	r2, #5000	; 0x1388
 801101c:	2137      	movs	r1, #55	; 0x37
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f8aa 	bl	8011178 <SDMMC_GetCmdResp1>
 8011024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011026:	69fb      	ldr	r3, [r7, #28]
}
 8011028:	4618      	mov	r0, r3
 801102a:	3720      	adds	r7, #32
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b088      	sub	sp, #32
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011046:	2329      	movs	r3, #41	; 0x29
 8011048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801104a:	2340      	movs	r3, #64	; 0x40
 801104c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801104e:	2300      	movs	r3, #0
 8011050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011058:	f107 0308 	add.w	r3, r7, #8
 801105c:	4619      	mov	r1, r3
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f7ff fe21 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f9bd 	bl	80113e4 <SDMMC_GetCmdResp3>
 801106a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801106c:	69fb      	ldr	r3, [r7, #28]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3720      	adds	r7, #32
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}

08011076 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011076:	b580      	push	{r7, lr}
 8011078:	b088      	sub	sp, #32
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801107e:	2300      	movs	r3, #0
 8011080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011082:	2302      	movs	r3, #2
 8011084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011086:	23c0      	movs	r3, #192	; 0xc0
 8011088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801108a:	2300      	movs	r3, #0
 801108c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011094:	f107 0308 	add.w	r3, r7, #8
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7ff fe03 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f957 	bl	8011354 <SDMMC_GetCmdResp2>
 80110a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a8:	69fb      	ldr	r3, [r7, #28]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b088      	sub	sp, #32
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80110c0:	2309      	movs	r3, #9
 80110c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80110c4:	23c0      	movs	r3, #192	; 0xc0
 80110c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80110c8:	2300      	movs	r3, #0
 80110ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80110cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80110d2:	f107 0308 	add.w	r3, r7, #8
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7ff fde4 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f938 	bl	8011354 <SDMMC_GetCmdResp2>
 80110e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110e6:	69fb      	ldr	r3, [r7, #28]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3720      	adds	r7, #32
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b088      	sub	sp, #32
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80110fe:	2303      	movs	r3, #3
 8011100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011102:	2340      	movs	r3, #64	; 0x40
 8011104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801110e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011110:	f107 0308 	add.w	r3, r7, #8
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fdc5 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801111c:	683a      	ldr	r2, [r7, #0]
 801111e:	2103      	movs	r1, #3
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 f99d 	bl	8011460 <SDMMC_GetCmdResp6>
 8011126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011128:	69fb      	ldr	r3, [r7, #28]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3720      	adds	r7, #32
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b088      	sub	sp, #32
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011140:	230d      	movs	r3, #13
 8011142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011144:	2340      	movs	r3, #64	; 0x40
 8011146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011148:	2300      	movs	r3, #0
 801114a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801114c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011152:	f107 0308 	add.w	r3, r7, #8
 8011156:	4619      	mov	r1, r3
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7ff fda4 	bl	8010ca6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801115e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011162:	210d      	movs	r1, #13
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 f807 	bl	8011178 <SDMMC_GetCmdResp1>
 801116a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801116c:	69fb      	ldr	r3, [r7, #28]
}
 801116e:	4618      	mov	r0, r3
 8011170:	3720      	adds	r7, #32
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
	...

08011178 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b088      	sub	sp, #32
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	460b      	mov	r3, r1
 8011182:	607a      	str	r2, [r7, #4]
 8011184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011186:	4b70      	ldr	r3, [pc, #448]	; (8011348 <SDMMC_GetCmdResp1+0x1d0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4a70      	ldr	r2, [pc, #448]	; (801134c <SDMMC_GetCmdResp1+0x1d4>)
 801118c:	fba2 2303 	umull	r2, r3, r2, r3
 8011190:	0a5a      	lsrs	r2, r3, #9
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	fb02 f303 	mul.w	r3, r2, r3
 8011198:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	1e5a      	subs	r2, r3, #1
 801119e:	61fa      	str	r2, [r7, #28]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d102      	bne.n	80111aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80111a8:	e0c9      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0ef      	beq.n	801119a <SDMMC_GetCmdResp1+0x22>
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1ea      	bne.n	801119a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c8:	f003 0304 	and.w	r3, r3, #4
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d004      	beq.n	80111da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2204      	movs	r2, #4
 80111d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111d6:	2304      	movs	r3, #4
 80111d8:	e0b1      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111de:	f003 0301 	and.w	r3, r3, #1
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d004      	beq.n	80111f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80111ec:	2301      	movs	r3, #1
 80111ee:	e0a6      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	22c5      	movs	r2, #197	; 0xc5
 80111f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f7ff fd7f 	bl	8010cfa <SDIO_GetCommandResponse>
 80111fc:	4603      	mov	r3, r0
 80111fe:	461a      	mov	r2, r3
 8011200:	7afb      	ldrb	r3, [r7, #11]
 8011202:	4293      	cmp	r3, r2
 8011204:	d001      	beq.n	801120a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011206:	2301      	movs	r3, #1
 8011208:	e099      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801120a:	2100      	movs	r1, #0
 801120c:	68f8      	ldr	r0, [r7, #12]
 801120e:	f7ff fd81 	bl	8010d14 <SDIO_GetResponse>
 8011212:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011214:	697a      	ldr	r2, [r7, #20]
 8011216:	4b4e      	ldr	r3, [pc, #312]	; (8011350 <SDMMC_GetCmdResp1+0x1d8>)
 8011218:	4013      	ands	r3, r2
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801121e:	2300      	movs	r3, #0
 8011220:	e08d      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b00      	cmp	r3, #0
 8011226:	da02      	bge.n	801122e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801122c:	e087      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011234:	2b00      	cmp	r3, #0
 8011236:	d001      	beq.n	801123c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011238:	2340      	movs	r3, #64	; 0x40
 801123a:	e080      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011246:	2380      	movs	r3, #128	; 0x80
 8011248:	e079      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011258:	e071      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011268:	e069      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011278:	e061      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d002      	beq.n	801128a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011288:	e059      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011290:	2b00      	cmp	r3, #0
 8011292:	d002      	beq.n	801129a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011298:	e051      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112a8:	e049      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d002      	beq.n	80112ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80112b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80112b8:	e041      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d002      	beq.n	80112ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80112c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112c8:	e039      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80112d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80112d8:	e031      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80112e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80112e8:	e029      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80112f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80112f8:	e021      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011308:	e019      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011318:	e011      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011320:	2b00      	cmp	r3, #0
 8011322:	d002      	beq.n	801132a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011328:	e009      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	f003 0308 	and.w	r3, r3, #8
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011338:	e001      	b.n	801133e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801133a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801133e:	4618      	mov	r0, r3
 8011340:	3720      	adds	r7, #32
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	200000a8 	.word	0x200000a8
 801134c:	10624dd3 	.word	0x10624dd3
 8011350:	fdffe008 	.word	0xfdffe008

08011354 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801135c:	4b1f      	ldr	r3, [pc, #124]	; (80113dc <SDMMC_GetCmdResp2+0x88>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a1f      	ldr	r2, [pc, #124]	; (80113e0 <SDMMC_GetCmdResp2+0x8c>)
 8011362:	fba2 2303 	umull	r2, r3, r2, r3
 8011366:	0a5b      	lsrs	r3, r3, #9
 8011368:	f241 3288 	movw	r2, #5000	; 0x1388
 801136c:	fb02 f303 	mul.w	r3, r2, r3
 8011370:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	1e5a      	subs	r2, r3, #1
 8011376:	60fa      	str	r2, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d102      	bne.n	8011382 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801137c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011380:	e026      	b.n	80113d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801138e:	2b00      	cmp	r3, #0
 8011390:	d0ef      	beq.n	8011372 <SDMMC_GetCmdResp2+0x1e>
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011398:	2b00      	cmp	r3, #0
 801139a:	d1ea      	bne.n	8011372 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a0:	f003 0304 	and.w	r3, r3, #4
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d004      	beq.n	80113b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2204      	movs	r2, #4
 80113ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113ae:	2304      	movs	r3, #4
 80113b0:	e00e      	b.n	80113d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113b6:	f003 0301 	and.w	r3, r3, #1
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d004      	beq.n	80113c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2201      	movs	r2, #1
 80113c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e003      	b.n	80113d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	22c5      	movs	r2, #197	; 0xc5
 80113cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80113ce:	2300      	movs	r3, #0
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3714      	adds	r7, #20
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	200000a8 	.word	0x200000a8
 80113e0:	10624dd3 	.word	0x10624dd3

080113e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b085      	sub	sp, #20
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80113ec:	4b1a      	ldr	r3, [pc, #104]	; (8011458 <SDMMC_GetCmdResp3+0x74>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a1a      	ldr	r2, [pc, #104]	; (801145c <SDMMC_GetCmdResp3+0x78>)
 80113f2:	fba2 2303 	umull	r2, r3, r2, r3
 80113f6:	0a5b      	lsrs	r3, r3, #9
 80113f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80113fc:	fb02 f303 	mul.w	r3, r2, r3
 8011400:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	1e5a      	subs	r2, r3, #1
 8011406:	60fa      	str	r2, [r7, #12]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d102      	bne.n	8011412 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801140c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011410:	e01b      	b.n	801144a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011416:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801141e:	2b00      	cmp	r3, #0
 8011420:	d0ef      	beq.n	8011402 <SDMMC_GetCmdResp3+0x1e>
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1ea      	bne.n	8011402 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011430:	f003 0304 	and.w	r3, r3, #4
 8011434:	2b00      	cmp	r3, #0
 8011436:	d004      	beq.n	8011442 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2204      	movs	r2, #4
 801143c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801143e:	2304      	movs	r3, #4
 8011440:	e003      	b.n	801144a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	22c5      	movs	r2, #197	; 0xc5
 8011446:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011448:	2300      	movs	r3, #0
}
 801144a:	4618      	mov	r0, r3
 801144c:	3714      	adds	r7, #20
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	200000a8 	.word	0x200000a8
 801145c:	10624dd3 	.word	0x10624dd3

08011460 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b088      	sub	sp, #32
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	460b      	mov	r3, r1
 801146a:	607a      	str	r2, [r7, #4]
 801146c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801146e:	4b35      	ldr	r3, [pc, #212]	; (8011544 <SDMMC_GetCmdResp6+0xe4>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a35      	ldr	r2, [pc, #212]	; (8011548 <SDMMC_GetCmdResp6+0xe8>)
 8011474:	fba2 2303 	umull	r2, r3, r2, r3
 8011478:	0a5b      	lsrs	r3, r3, #9
 801147a:	f241 3288 	movw	r2, #5000	; 0x1388
 801147e:	fb02 f303 	mul.w	r3, r2, r3
 8011482:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	1e5a      	subs	r2, r3, #1
 8011488:	61fa      	str	r2, [r7, #28]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d102      	bne.n	8011494 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801148e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011492:	e052      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011498:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d0ef      	beq.n	8011484 <SDMMC_GetCmdResp6+0x24>
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1ea      	bne.n	8011484 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114b2:	f003 0304 	and.w	r3, r3, #4
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d004      	beq.n	80114c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2204      	movs	r2, #4
 80114be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114c0:	2304      	movs	r3, #4
 80114c2:	e03a      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114c8:	f003 0301 	and.w	r3, r3, #1
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d004      	beq.n	80114da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2201      	movs	r2, #1
 80114d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114d6:	2301      	movs	r3, #1
 80114d8:	e02f      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f7ff fc0d 	bl	8010cfa <SDIO_GetCommandResponse>
 80114e0:	4603      	mov	r3, r0
 80114e2:	461a      	mov	r2, r3
 80114e4:	7afb      	ldrb	r3, [r7, #11]
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d001      	beq.n	80114ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114ea:	2301      	movs	r3, #1
 80114ec:	e025      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	22c5      	movs	r2, #197	; 0xc5
 80114f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80114f4:	2100      	movs	r1, #0
 80114f6:	68f8      	ldr	r0, [r7, #12]
 80114f8:	f7ff fc0c 	bl	8010d14 <SDIO_GetResponse>
 80114fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011504:	2b00      	cmp	r3, #0
 8011506:	d106      	bne.n	8011516 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	0c1b      	lsrs	r3, r3, #16
 801150c:	b29a      	uxth	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011512:	2300      	movs	r3, #0
 8011514:	e011      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d002      	beq.n	8011526 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011524:	e009      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801152c:	2b00      	cmp	r3, #0
 801152e:	d002      	beq.n	8011536 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011534:	e001      	b.n	801153a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801153a:	4618      	mov	r0, r3
 801153c:	3720      	adds	r7, #32
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	200000a8 	.word	0x200000a8
 8011548:	10624dd3 	.word	0x10624dd3

0801154c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011554:	4b22      	ldr	r3, [pc, #136]	; (80115e0 <SDMMC_GetCmdResp7+0x94>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a22      	ldr	r2, [pc, #136]	; (80115e4 <SDMMC_GetCmdResp7+0x98>)
 801155a:	fba2 2303 	umull	r2, r3, r2, r3
 801155e:	0a5b      	lsrs	r3, r3, #9
 8011560:	f241 3288 	movw	r2, #5000	; 0x1388
 8011564:	fb02 f303 	mul.w	r3, r2, r3
 8011568:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	1e5a      	subs	r2, r3, #1
 801156e:	60fa      	str	r2, [r7, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011578:	e02c      	b.n	80115d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011586:	2b00      	cmp	r3, #0
 8011588:	d0ef      	beq.n	801156a <SDMMC_GetCmdResp7+0x1e>
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1ea      	bne.n	801156a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	d004      	beq.n	80115aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2204      	movs	r2, #4
 80115a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80115a6:	2304      	movs	r3, #4
 80115a8:	e014      	b.n	80115d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ae:	f003 0301 	and.w	r3, r3, #1
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d004      	beq.n	80115c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2201      	movs	r2, #1
 80115ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115bc:	2301      	movs	r3, #1
 80115be:	e009      	b.n	80115d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d002      	beq.n	80115d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2240      	movs	r2, #64	; 0x40
 80115d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80115d2:	2300      	movs	r3, #0
  
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3714      	adds	r7, #20
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	200000a8 	.word	0x200000a8
 80115e4:	10624dd3 	.word	0x10624dd3

080115e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80115f0:	4b11      	ldr	r3, [pc, #68]	; (8011638 <SDMMC_GetCmdError+0x50>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a11      	ldr	r2, [pc, #68]	; (801163c <SDMMC_GetCmdError+0x54>)
 80115f6:	fba2 2303 	umull	r2, r3, r2, r3
 80115fa:	0a5b      	lsrs	r3, r3, #9
 80115fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011600:	fb02 f303 	mul.w	r3, r2, r3
 8011604:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	1e5a      	subs	r2, r3, #1
 801160a:	60fa      	str	r2, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011614:	e009      	b.n	801162a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801161e:	2b00      	cmp	r3, #0
 8011620:	d0f1      	beq.n	8011606 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	22c5      	movs	r2, #197	; 0xc5
 8011626:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011628:	2300      	movs	r3, #0
}
 801162a:	4618      	mov	r0, r3
 801162c:	3714      	adds	r7, #20
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr
 8011636:	bf00      	nop
 8011638:	200000a8 	.word	0x200000a8
 801163c:	10624dd3 	.word	0x10624dd3

08011640 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011644:	4904      	ldr	r1, [pc, #16]	; (8011658 <MX_FATFS_Init+0x18>)
 8011646:	4805      	ldr	r0, [pc, #20]	; (801165c <MX_FATFS_Init+0x1c>)
 8011648:	f003 f8f4 	bl	8014834 <FATFS_LinkDriver>
 801164c:	4603      	mov	r3, r0
 801164e:	461a      	mov	r2, r3
 8011650:	4b03      	ldr	r3, [pc, #12]	; (8011660 <MX_FATFS_Init+0x20>)
 8011652:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011654:	bf00      	nop
 8011656:	bd80      	pop	{r7, pc}
 8011658:	20005e0c 	.word	0x20005e0c
 801165c:	08073418 	.word	0x08073418
 8011660:	20005e08 	.word	0x20005e08

08011664 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011664:	b480      	push	{r7}
 8011666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011668:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801166a:	4618      	mov	r0, r3
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801167e:	f000 f86b 	bl	8011758 <BSP_SD_IsDetected>
 8011682:	4603      	mov	r3, r0
 8011684:	2b01      	cmp	r3, #1
 8011686:	d001      	beq.n	801168c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011688:	2301      	movs	r3, #1
 801168a:	e005      	b.n	8011698 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801168c:	4804      	ldr	r0, [pc, #16]	; (80116a0 <BSP_SD_Init+0x2c>)
 801168e:	f7fc fa9d 	bl	800dbcc <HAL_SD_Init>
 8011692:	4603      	mov	r3, r0
 8011694:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8011696:	79fb      	ldrb	r3, [r7, #7]
}
 8011698:	4618      	mov	r0, r3
 801169a:	3708      	adds	r7, #8
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	20005a98 	.word	0x20005a98

080116a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b088      	sub	sp, #32
 80116a8:	af02      	add	r7, sp, #8
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68ba      	ldr	r2, [r7, #8]
 80116be:	68f9      	ldr	r1, [r7, #12]
 80116c0:	4806      	ldr	r0, [pc, #24]	; (80116dc <BSP_SD_ReadBlocks+0x38>)
 80116c2:	f7fc fb33 	bl	800dd2c <HAL_SD_ReadBlocks>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d001      	beq.n	80116d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80116cc:	2301      	movs	r3, #1
 80116ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80116d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3718      	adds	r7, #24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	20005a98 	.word	0x20005a98

080116e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af02      	add	r7, sp, #8
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80116ee:	2300      	movs	r3, #0
 80116f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	68ba      	ldr	r2, [r7, #8]
 80116fa:	68f9      	ldr	r1, [r7, #12]
 80116fc:	4806      	ldr	r0, [pc, #24]	; (8011718 <BSP_SD_WriteBlocks+0x38>)
 80116fe:	f7fc fcf3 	bl	800e0e8 <HAL_SD_WriteBlocks>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d001      	beq.n	801170c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011708:	2301      	movs	r3, #1
 801170a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801170c:	7dfb      	ldrb	r3, [r7, #23]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3718      	adds	r7, #24
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	20005a98 	.word	0x20005a98

0801171c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011720:	4805      	ldr	r0, [pc, #20]	; (8011738 <BSP_SD_GetCardState+0x1c>)
 8011722:	f7fd f837 	bl	800e794 <HAL_SD_GetCardState>
 8011726:	4603      	mov	r3, r0
 8011728:	2b04      	cmp	r3, #4
 801172a:	bf14      	ite	ne
 801172c:	2301      	movne	r3, #1
 801172e:	2300      	moveq	r3, #0
 8011730:	b2db      	uxtb	r3, r3
}
 8011732:	4618      	mov	r0, r3
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	20005a98 	.word	0x20005a98

0801173c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011744:	6879      	ldr	r1, [r7, #4]
 8011746:	4803      	ldr	r0, [pc, #12]	; (8011754 <BSP_SD_GetCardInfo+0x18>)
 8011748:	f7fc fff8 	bl	800e73c <HAL_SD_GetCardInfo>
}
 801174c:	bf00      	nop
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	20005a98 	.word	0x20005a98

08011758 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801175e:	2301      	movs	r3, #1
 8011760:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011762:	79fb      	ldrb	r3, [r7, #7]
 8011764:	b2db      	uxtb	r3, r3
}
 8011766:	4618      	mov	r0, r3
 8011768:	370c      	adds	r7, #12
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
	...

08011774 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	4603      	mov	r3, r0
 801177c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801177e:	4b0b      	ldr	r3, [pc, #44]	; (80117ac <SD_CheckStatus+0x38>)
 8011780:	2201      	movs	r2, #1
 8011782:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011784:	f7ff ffca 	bl	801171c <BSP_SD_GetCardState>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d107      	bne.n	801179e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801178e:	4b07      	ldr	r3, [pc, #28]	; (80117ac <SD_CheckStatus+0x38>)
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	b2db      	uxtb	r3, r3
 8011794:	f023 0301 	bic.w	r3, r3, #1
 8011798:	b2da      	uxtb	r2, r3
 801179a:	4b04      	ldr	r3, [pc, #16]	; (80117ac <SD_CheckStatus+0x38>)
 801179c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801179e:	4b03      	ldr	r3, [pc, #12]	; (80117ac <SD_CheckStatus+0x38>)
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	b2db      	uxtb	r3, r3
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	20000221 	.word	0x20000221

080117b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	4603      	mov	r3, r0
 80117b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80117ba:	4b0b      	ldr	r3, [pc, #44]	; (80117e8 <SD_initialize+0x38>)
 80117bc:	2201      	movs	r2, #1
 80117be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80117c0:	f7ff ff58 	bl	8011674 <BSP_SD_Init>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d107      	bne.n	80117da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80117ca:	79fb      	ldrb	r3, [r7, #7]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7ff ffd1 	bl	8011774 <SD_CheckStatus>
 80117d2:	4603      	mov	r3, r0
 80117d4:	461a      	mov	r2, r3
 80117d6:	4b04      	ldr	r3, [pc, #16]	; (80117e8 <SD_initialize+0x38>)
 80117d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80117da:	4b03      	ldr	r3, [pc, #12]	; (80117e8 <SD_initialize+0x38>)
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	b2db      	uxtb	r3, r3
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	20000221 	.word	0x20000221

080117ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	4603      	mov	r3, r0
 80117f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80117f6:	79fb      	ldrb	r3, [r7, #7]
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff ffbb 	bl	8011774 <SD_CheckStatus>
 80117fe:	4603      	mov	r3, r0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b086      	sub	sp, #24
 801180c:	af00      	add	r7, sp, #0
 801180e:	60b9      	str	r1, [r7, #8]
 8011810:	607a      	str	r2, [r7, #4]
 8011812:	603b      	str	r3, [r7, #0]
 8011814:	4603      	mov	r3, r0
 8011816:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011818:	2301      	movs	r3, #1
 801181a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801181c:	f04f 33ff 	mov.w	r3, #4294967295
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	6879      	ldr	r1, [r7, #4]
 8011824:	68b8      	ldr	r0, [r7, #8]
 8011826:	f7ff ff3d 	bl	80116a4 <BSP_SD_ReadBlocks>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d107      	bne.n	8011840 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011830:	bf00      	nop
 8011832:	f7ff ff73 	bl	801171c <BSP_SD_GetCardState>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1fa      	bne.n	8011832 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801183c:	2300      	movs	r3, #0
 801183e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011840:	7dfb      	ldrb	r3, [r7, #23]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3718      	adds	r7, #24
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b086      	sub	sp, #24
 801184e:	af00      	add	r7, sp, #0
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	603b      	str	r3, [r7, #0]
 8011856:	4603      	mov	r3, r0
 8011858:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801185a:	2301      	movs	r3, #1
 801185c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801185e:	f04f 33ff 	mov.w	r3, #4294967295
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	6879      	ldr	r1, [r7, #4]
 8011866:	68b8      	ldr	r0, [r7, #8]
 8011868:	f7ff ff3a 	bl	80116e0 <BSP_SD_WriteBlocks>
 801186c:	4603      	mov	r3, r0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d107      	bne.n	8011882 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011872:	bf00      	nop
 8011874:	f7ff ff52 	bl	801171c <BSP_SD_GetCardState>
 8011878:	4603      	mov	r3, r0
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1fa      	bne.n	8011874 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011882:	7dfb      	ldrb	r3, [r7, #23]
}
 8011884:	4618      	mov	r0, r3
 8011886:	3718      	adds	r7, #24
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08c      	sub	sp, #48	; 0x30
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	603a      	str	r2, [r7, #0]
 8011896:	71fb      	strb	r3, [r7, #7]
 8011898:	460b      	mov	r3, r1
 801189a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801189c:	2301      	movs	r3, #1
 801189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80118a2:	4b25      	ldr	r3, [pc, #148]	; (8011938 <SD_ioctl+0xac>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	f003 0301 	and.w	r3, r3, #1
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d001      	beq.n	80118b4 <SD_ioctl+0x28>
 80118b0:	2303      	movs	r3, #3
 80118b2:	e03c      	b.n	801192e <SD_ioctl+0xa2>

  switch (cmd)
 80118b4:	79bb      	ldrb	r3, [r7, #6]
 80118b6:	2b03      	cmp	r3, #3
 80118b8:	d834      	bhi.n	8011924 <SD_ioctl+0x98>
 80118ba:	a201      	add	r2, pc, #4	; (adr r2, 80118c0 <SD_ioctl+0x34>)
 80118bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c0:	080118d1 	.word	0x080118d1
 80118c4:	080118d9 	.word	0x080118d9
 80118c8:	080118f1 	.word	0x080118f1
 80118cc:	0801190b 	.word	0x0801190b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80118d0:	2300      	movs	r3, #0
 80118d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80118d6:	e028      	b.n	801192a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80118d8:	f107 030c 	add.w	r3, r7, #12
 80118dc:	4618      	mov	r0, r3
 80118de:	f7ff ff2d 	bl	801173c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80118e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80118e8:	2300      	movs	r3, #0
 80118ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80118ee:	e01c      	b.n	801192a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80118f0:	f107 030c 	add.w	r3, r7, #12
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7ff ff21 	bl	801173c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80118fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011908:	e00f      	b.n	801192a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	4618      	mov	r0, r3
 8011910:	f7ff ff14 	bl	801173c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	0a5a      	lsrs	r2, r3, #9
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011922:	e002      	b.n	801192a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011924:	2304      	movs	r3, #4
 8011926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801192a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801192e:	4618      	mov	r0, r3
 8011930:	3730      	adds	r7, #48	; 0x30
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	20000221 	.word	0x20000221

0801193c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	4a08      	ldr	r2, [pc, #32]	; (801196c <disk_status+0x30>)
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	79fa      	ldrb	r2, [r7, #7]
 8011954:	4905      	ldr	r1, [pc, #20]	; (801196c <disk_status+0x30>)
 8011956:	440a      	add	r2, r1
 8011958:	7a12      	ldrb	r2, [r2, #8]
 801195a:	4610      	mov	r0, r2
 801195c:	4798      	blx	r3
 801195e:	4603      	mov	r3, r0
 8011960:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011962:	7bfb      	ldrb	r3, [r7, #15]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	20005e38 	.word	0x20005e38

08011970 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801197a:	2300      	movs	r3, #0
 801197c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801197e:	79fb      	ldrb	r3, [r7, #7]
 8011980:	4a0d      	ldr	r2, [pc, #52]	; (80119b8 <disk_initialize+0x48>)
 8011982:	5cd3      	ldrb	r3, [r2, r3]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d111      	bne.n	80119ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011988:	79fb      	ldrb	r3, [r7, #7]
 801198a:	4a0b      	ldr	r2, [pc, #44]	; (80119b8 <disk_initialize+0x48>)
 801198c:	2101      	movs	r1, #1
 801198e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011990:	79fb      	ldrb	r3, [r7, #7]
 8011992:	4a09      	ldr	r2, [pc, #36]	; (80119b8 <disk_initialize+0x48>)
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	4413      	add	r3, r2
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	79fa      	ldrb	r2, [r7, #7]
 801199e:	4906      	ldr	r1, [pc, #24]	; (80119b8 <disk_initialize+0x48>)
 80119a0:	440a      	add	r2, r1
 80119a2:	7a12      	ldrb	r2, [r2, #8]
 80119a4:	4610      	mov	r0, r2
 80119a6:	4798      	blx	r3
 80119a8:	4603      	mov	r3, r0
 80119aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	20005e38 	.word	0x20005e38

080119bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80119bc:	b590      	push	{r4, r7, lr}
 80119be:	b087      	sub	sp, #28
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60b9      	str	r1, [r7, #8]
 80119c4:	607a      	str	r2, [r7, #4]
 80119c6:	603b      	str	r3, [r7, #0]
 80119c8:	4603      	mov	r3, r0
 80119ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80119cc:	7bfb      	ldrb	r3, [r7, #15]
 80119ce:	4a0a      	ldr	r2, [pc, #40]	; (80119f8 <disk_read+0x3c>)
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	689c      	ldr	r4, [r3, #8]
 80119d8:	7bfb      	ldrb	r3, [r7, #15]
 80119da:	4a07      	ldr	r2, [pc, #28]	; (80119f8 <disk_read+0x3c>)
 80119dc:	4413      	add	r3, r2
 80119de:	7a18      	ldrb	r0, [r3, #8]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	68b9      	ldr	r1, [r7, #8]
 80119e6:	47a0      	blx	r4
 80119e8:	4603      	mov	r3, r0
 80119ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80119ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	371c      	adds	r7, #28
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd90      	pop	{r4, r7, pc}
 80119f6:	bf00      	nop
 80119f8:	20005e38 	.word	0x20005e38

080119fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80119fc:	b590      	push	{r4, r7, lr}
 80119fe:	b087      	sub	sp, #28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60b9      	str	r1, [r7, #8]
 8011a04:	607a      	str	r2, [r7, #4]
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	4603      	mov	r3, r0
 8011a0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011a0c:	7bfb      	ldrb	r3, [r7, #15]
 8011a0e:	4a0a      	ldr	r2, [pc, #40]	; (8011a38 <disk_write+0x3c>)
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4413      	add	r3, r2
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	68dc      	ldr	r4, [r3, #12]
 8011a18:	7bfb      	ldrb	r3, [r7, #15]
 8011a1a:	4a07      	ldr	r2, [pc, #28]	; (8011a38 <disk_write+0x3c>)
 8011a1c:	4413      	add	r3, r2
 8011a1e:	7a18      	ldrb	r0, [r3, #8]
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	68b9      	ldr	r1, [r7, #8]
 8011a26:	47a0      	blx	r4
 8011a28:	4603      	mov	r3, r0
 8011a2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	371c      	adds	r7, #28
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd90      	pop	{r4, r7, pc}
 8011a36:	bf00      	nop
 8011a38:	20005e38 	.word	0x20005e38

08011a3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	4603      	mov	r3, r0
 8011a44:	603a      	str	r2, [r7, #0]
 8011a46:	71fb      	strb	r3, [r7, #7]
 8011a48:	460b      	mov	r3, r1
 8011a4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011a4c:	79fb      	ldrb	r3, [r7, #7]
 8011a4e:	4a09      	ldr	r2, [pc, #36]	; (8011a74 <disk_ioctl+0x38>)
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	691b      	ldr	r3, [r3, #16]
 8011a58:	79fa      	ldrb	r2, [r7, #7]
 8011a5a:	4906      	ldr	r1, [pc, #24]	; (8011a74 <disk_ioctl+0x38>)
 8011a5c:	440a      	add	r2, r1
 8011a5e:	7a10      	ldrb	r0, [r2, #8]
 8011a60:	79b9      	ldrb	r1, [r7, #6]
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	4798      	blx	r3
 8011a66:	4603      	mov	r3, r0
 8011a68:	73fb      	strb	r3, [r7, #15]
  return res;
 8011a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	20005e38 	.word	0x20005e38

08011a78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	3301      	adds	r3, #1
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011a88:	89fb      	ldrh	r3, [r7, #14]
 8011a8a:	021b      	lsls	r3, r3, #8
 8011a8c:	b21a      	sxth	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	b21b      	sxth	r3, r3
 8011a94:	4313      	orrs	r3, r2
 8011a96:	b21b      	sxth	r3, r3
 8011a98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011a9a:	89fb      	ldrh	r3, [r7, #14]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3714      	adds	r7, #20
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	3303      	adds	r3, #3
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	021b      	lsls	r3, r3, #8
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	3202      	adds	r2, #2
 8011ac0:	7812      	ldrb	r2, [r2, #0]
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	021b      	lsls	r3, r3, #8
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	3201      	adds	r2, #1
 8011ace:	7812      	ldrb	r2, [r2, #0]
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	021b      	lsls	r3, r3, #8
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	7812      	ldrb	r2, [r2, #0]
 8011adc:	4313      	orrs	r3, r2
 8011ade:	60fb      	str	r3, [r7, #12]
	return rv;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3714      	adds	r7, #20
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	1c5a      	adds	r2, r3, #1
 8011afe:	607a      	str	r2, [r7, #4]
 8011b00:	887a      	ldrh	r2, [r7, #2]
 8011b02:	b2d2      	uxtb	r2, r2
 8011b04:	701a      	strb	r2, [r3, #0]
 8011b06:	887b      	ldrh	r3, [r7, #2]
 8011b08:	0a1b      	lsrs	r3, r3, #8
 8011b0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	607a      	str	r2, [r7, #4]
 8011b12:	887a      	ldrh	r2, [r7, #2]
 8011b14:	b2d2      	uxtb	r2, r2
 8011b16:	701a      	strb	r2, [r3, #0]
}
 8011b18:	bf00      	nop
 8011b1a:	370c      	adds	r7, #12
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	683a      	ldr	r2, [r7, #0]
 8011b36:	b2d2      	uxtb	r2, r2
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	0a1b      	lsrs	r3, r3, #8
 8011b3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	1c5a      	adds	r2, r3, #1
 8011b44:	607a      	str	r2, [r7, #4]
 8011b46:	683a      	ldr	r2, [r7, #0]
 8011b48:	b2d2      	uxtb	r2, r2
 8011b4a:	701a      	strb	r2, [r3, #0]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	0a1b      	lsrs	r3, r3, #8
 8011b50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	1c5a      	adds	r2, r3, #1
 8011b56:	607a      	str	r2, [r7, #4]
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	b2d2      	uxtb	r2, r2
 8011b5c:	701a      	strb	r2, [r3, #0]
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	0a1b      	lsrs	r3, r3, #8
 8011b62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	1c5a      	adds	r2, r3, #1
 8011b68:	607a      	str	r2, [r7, #4]
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	b2d2      	uxtb	r2, r2
 8011b6e:	701a      	strb	r2, [r3, #0]
}
 8011b70:	bf00      	nop
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011b7c:	b480      	push	{r7}
 8011b7e:	b087      	sub	sp, #28
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00d      	beq.n	8011bb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011b96:	693a      	ldr	r2, [r7, #16]
 8011b98:	1c53      	adds	r3, r2, #1
 8011b9a:	613b      	str	r3, [r7, #16]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	1c59      	adds	r1, r3, #1
 8011ba0:	6179      	str	r1, [r7, #20]
 8011ba2:	7812      	ldrb	r2, [r2, #0]
 8011ba4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	607b      	str	r3, [r7, #4]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1f1      	bne.n	8011b96 <mem_cpy+0x1a>
	}
}
 8011bb2:	bf00      	nop
 8011bb4:	371c      	adds	r7, #28
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbc:	4770      	bx	lr

08011bbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011bbe:	b480      	push	{r7}
 8011bc0:	b087      	sub	sp, #28
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	60f8      	str	r0, [r7, #12]
 8011bc6:	60b9      	str	r1, [r7, #8]
 8011bc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	1c5a      	adds	r2, r3, #1
 8011bd2:	617a      	str	r2, [r7, #20]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	b2d2      	uxtb	r2, r2
 8011bd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	607b      	str	r3, [r7, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1f3      	bne.n	8011bce <mem_set+0x10>
}
 8011be6:	bf00      	nop
 8011be8:	bf00      	nop
 8011bea:	371c      	adds	r7, #28
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011bf4:	b480      	push	{r7}
 8011bf6:	b089      	sub	sp, #36	; 0x24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	61fb      	str	r3, [r7, #28]
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	1c5a      	adds	r2, r3, #1
 8011c10:	61fa      	str	r2, [r7, #28]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	4619      	mov	r1, r3
 8011c16:	69bb      	ldr	r3, [r7, #24]
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	61ba      	str	r2, [r7, #24]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	1acb      	subs	r3, r1, r3
 8011c20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	3b01      	subs	r3, #1
 8011c26:	607b      	str	r3, [r7, #4]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <mem_cmp+0x40>
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d0eb      	beq.n	8011c0c <mem_cmp+0x18>

	return r;
 8011c34:	697b      	ldr	r3, [r7, #20]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3724      	adds	r7, #36	; 0x24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011c42:	b480      	push	{r7}
 8011c44:	b083      	sub	sp, #12
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
 8011c4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011c4c:	e002      	b.n	8011c54 <chk_chr+0x12>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	3301      	adds	r3, #1
 8011c52:	607b      	str	r3, [r7, #4]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d005      	beq.n	8011c68 <chk_chr+0x26>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	461a      	mov	r2, r3
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d1f2      	bne.n	8011c4e <chk_chr+0xc>
	return *str;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	781b      	ldrb	r3, [r3, #0]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c82:	2300      	movs	r3, #0
 8011c84:	60bb      	str	r3, [r7, #8]
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	60fb      	str	r3, [r7, #12]
 8011c8a:	e029      	b.n	8011ce0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011c8c:	4a27      	ldr	r2, [pc, #156]	; (8011d2c <chk_lock+0xb4>)
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	011b      	lsls	r3, r3, #4
 8011c92:	4413      	add	r3, r2
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d01d      	beq.n	8011cd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011c9a:	4a24      	ldr	r2, [pc, #144]	; (8011d2c <chk_lock+0xb4>)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	011b      	lsls	r3, r3, #4
 8011ca0:	4413      	add	r3, r2
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d116      	bne.n	8011cda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011cac:	4a1f      	ldr	r2, [pc, #124]	; (8011d2c <chk_lock+0xb4>)
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	011b      	lsls	r3, r3, #4
 8011cb2:	4413      	add	r3, r2
 8011cb4:	3304      	adds	r3, #4
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d10c      	bne.n	8011cda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011cc0:	4a1a      	ldr	r2, [pc, #104]	; (8011d2c <chk_lock+0xb4>)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	011b      	lsls	r3, r3, #4
 8011cc6:	4413      	add	r3, r2
 8011cc8:	3308      	adds	r3, #8
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d102      	bne.n	8011cda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011cd4:	e007      	b.n	8011ce6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d9d2      	bls.n	8011c8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2b02      	cmp	r3, #2
 8011cea:	d109      	bne.n	8011d00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d102      	bne.n	8011cf8 <chk_lock+0x80>
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	d101      	bne.n	8011cfc <chk_lock+0x84>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	e010      	b.n	8011d1e <chk_lock+0xa6>
 8011cfc:	2312      	movs	r3, #18
 8011cfe:	e00e      	b.n	8011d1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d108      	bne.n	8011d18 <chk_lock+0xa0>
 8011d06:	4a09      	ldr	r2, [pc, #36]	; (8011d2c <chk_lock+0xb4>)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	011b      	lsls	r3, r3, #4
 8011d0c:	4413      	add	r3, r2
 8011d0e:	330c      	adds	r3, #12
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d16:	d101      	bne.n	8011d1c <chk_lock+0xa4>
 8011d18:	2310      	movs	r3, #16
 8011d1a:	e000      	b.n	8011d1e <chk_lock+0xa6>
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3714      	adds	r7, #20
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop
 8011d2c:	20005e18 	.word	0x20005e18

08011d30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d36:	2300      	movs	r3, #0
 8011d38:	607b      	str	r3, [r7, #4]
 8011d3a:	e002      	b.n	8011d42 <enq_lock+0x12>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	607b      	str	r3, [r7, #4]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d806      	bhi.n	8011d56 <enq_lock+0x26>
 8011d48:	4a09      	ldr	r2, [pc, #36]	; (8011d70 <enq_lock+0x40>)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	011b      	lsls	r3, r3, #4
 8011d4e:	4413      	add	r3, r2
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1f2      	bne.n	8011d3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b02      	cmp	r3, #2
 8011d5a:	bf14      	ite	ne
 8011d5c:	2301      	movne	r3, #1
 8011d5e:	2300      	moveq	r3, #0
 8011d60:	b2db      	uxtb	r3, r3
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	20005e18 	.word	0x20005e18

08011d74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b085      	sub	sp, #20
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60fb      	str	r3, [r7, #12]
 8011d82:	e01f      	b.n	8011dc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011d84:	4a41      	ldr	r2, [pc, #260]	; (8011e8c <inc_lock+0x118>)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	011b      	lsls	r3, r3, #4
 8011d8a:	4413      	add	r3, r2
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d113      	bne.n	8011dbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011d96:	4a3d      	ldr	r2, [pc, #244]	; (8011e8c <inc_lock+0x118>)
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	011b      	lsls	r3, r3, #4
 8011d9c:	4413      	add	r3, r2
 8011d9e:	3304      	adds	r3, #4
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d109      	bne.n	8011dbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011daa:	4a38      	ldr	r2, [pc, #224]	; (8011e8c <inc_lock+0x118>)
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	011b      	lsls	r3, r3, #4
 8011db0:	4413      	add	r3, r2
 8011db2:	3308      	adds	r3, #8
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d006      	beq.n	8011dcc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	60fb      	str	r3, [r7, #12]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d9dc      	bls.n	8011d84 <inc_lock+0x10>
 8011dca:	e000      	b.n	8011dce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011dcc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d132      	bne.n	8011e3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	e002      	b.n	8011de0 <inc_lock+0x6c>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	60fb      	str	r3, [r7, #12]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2b01      	cmp	r3, #1
 8011de4:	d806      	bhi.n	8011df4 <inc_lock+0x80>
 8011de6:	4a29      	ldr	r2, [pc, #164]	; (8011e8c <inc_lock+0x118>)
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	011b      	lsls	r3, r3, #4
 8011dec:	4413      	add	r3, r2
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1f2      	bne.n	8011dda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d101      	bne.n	8011dfe <inc_lock+0x8a>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e040      	b.n	8011e80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	4922      	ldr	r1, [pc, #136]	; (8011e8c <inc_lock+0x118>)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	011b      	lsls	r3, r3, #4
 8011e08:	440b      	add	r3, r1
 8011e0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	689a      	ldr	r2, [r3, #8]
 8011e10:	491e      	ldr	r1, [pc, #120]	; (8011e8c <inc_lock+0x118>)
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	011b      	lsls	r3, r3, #4
 8011e16:	440b      	add	r3, r1
 8011e18:	3304      	adds	r3, #4
 8011e1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	695a      	ldr	r2, [r3, #20]
 8011e20:	491a      	ldr	r1, [pc, #104]	; (8011e8c <inc_lock+0x118>)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	011b      	lsls	r3, r3, #4
 8011e26:	440b      	add	r3, r1
 8011e28:	3308      	adds	r3, #8
 8011e2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011e2c:	4a17      	ldr	r2, [pc, #92]	; (8011e8c <inc_lock+0x118>)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	011b      	lsls	r3, r3, #4
 8011e32:	4413      	add	r3, r2
 8011e34:	330c      	adds	r3, #12
 8011e36:	2200      	movs	r2, #0
 8011e38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d009      	beq.n	8011e54 <inc_lock+0xe0>
 8011e40:	4a12      	ldr	r2, [pc, #72]	; (8011e8c <inc_lock+0x118>)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	011b      	lsls	r3, r3, #4
 8011e46:	4413      	add	r3, r2
 8011e48:	330c      	adds	r3, #12
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d001      	beq.n	8011e54 <inc_lock+0xe0>
 8011e50:	2300      	movs	r3, #0
 8011e52:	e015      	b.n	8011e80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d108      	bne.n	8011e6c <inc_lock+0xf8>
 8011e5a:	4a0c      	ldr	r2, [pc, #48]	; (8011e8c <inc_lock+0x118>)
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	4413      	add	r3, r2
 8011e62:	330c      	adds	r3, #12
 8011e64:	881b      	ldrh	r3, [r3, #0]
 8011e66:	3301      	adds	r3, #1
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	e001      	b.n	8011e70 <inc_lock+0xfc>
 8011e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e70:	4906      	ldr	r1, [pc, #24]	; (8011e8c <inc_lock+0x118>)
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	011b      	lsls	r3, r3, #4
 8011e76:	440b      	add	r3, r1
 8011e78:	330c      	adds	r3, #12
 8011e7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	3301      	adds	r3, #1
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3714      	adds	r7, #20
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	20005e18 	.word	0x20005e18

08011e90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	3b01      	subs	r3, #1
 8011e9c:	607b      	str	r3, [r7, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d825      	bhi.n	8011ef0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011ea4:	4a17      	ldr	r2, [pc, #92]	; (8011f04 <dec_lock+0x74>)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	011b      	lsls	r3, r3, #4
 8011eaa:	4413      	add	r3, r2
 8011eac:	330c      	adds	r3, #12
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011eb2:	89fb      	ldrh	r3, [r7, #14]
 8011eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eb8:	d101      	bne.n	8011ebe <dec_lock+0x2e>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ebe:	89fb      	ldrh	r3, [r7, #14]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d002      	beq.n	8011eca <dec_lock+0x3a>
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011eca:	4a0e      	ldr	r2, [pc, #56]	; (8011f04 <dec_lock+0x74>)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	4413      	add	r3, r2
 8011ed2:	330c      	adds	r3, #12
 8011ed4:	89fa      	ldrh	r2, [r7, #14]
 8011ed6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011ed8:	89fb      	ldrh	r3, [r7, #14]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d105      	bne.n	8011eea <dec_lock+0x5a>
 8011ede:	4a09      	ldr	r2, [pc, #36]	; (8011f04 <dec_lock+0x74>)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	011b      	lsls	r3, r3, #4
 8011ee4:	4413      	add	r3, r2
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	737b      	strb	r3, [r7, #13]
 8011eee:	e001      	b.n	8011ef4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011ef4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3714      	adds	r7, #20
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	20005e18 	.word	0x20005e18

08011f08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011f10:	2300      	movs	r3, #0
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	e010      	b.n	8011f38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011f16:	4a0d      	ldr	r2, [pc, #52]	; (8011f4c <clear_lock+0x44>)
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	011b      	lsls	r3, r3, #4
 8011f1c:	4413      	add	r3, r2
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d105      	bne.n	8011f32 <clear_lock+0x2a>
 8011f26:	4a09      	ldr	r2, [pc, #36]	; (8011f4c <clear_lock+0x44>)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	011b      	lsls	r3, r3, #4
 8011f2c:	4413      	add	r3, r2
 8011f2e:	2200      	movs	r2, #0
 8011f30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	3301      	adds	r3, #1
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d9eb      	bls.n	8011f16 <clear_lock+0xe>
	}
}
 8011f3e:	bf00      	nop
 8011f40:	bf00      	nop
 8011f42:	3714      	adds	r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	20005e18 	.word	0x20005e18

08011f50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	78db      	ldrb	r3, [r3, #3]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d034      	beq.n	8011fce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	7858      	ldrb	r0, [r3, #1]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f74:	2301      	movs	r3, #1
 8011f76:	697a      	ldr	r2, [r7, #20]
 8011f78:	f7ff fd40 	bl	80119fc <disk_write>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d002      	beq.n	8011f88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	73fb      	strb	r3, [r7, #15]
 8011f86:	e022      	b.n	8011fce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f92:	697a      	ldr	r2, [r7, #20]
 8011f94:	1ad2      	subs	r2, r2, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d217      	bcs.n	8011fce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	789b      	ldrb	r3, [r3, #2]
 8011fa2:	613b      	str	r3, [r7, #16]
 8011fa4:	e010      	b.n	8011fc8 <sync_window+0x78>
					wsect += fs->fsize;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	69db      	ldr	r3, [r3, #28]
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	4413      	add	r3, r2
 8011fae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	7858      	ldrb	r0, [r3, #1]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011fba:	2301      	movs	r3, #1
 8011fbc:	697a      	ldr	r2, [r7, #20]
 8011fbe:	f7ff fd1d 	bl	80119fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	3b01      	subs	r3, #1
 8011fc6:	613b      	str	r3, [r7, #16]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d8eb      	bhi.n	8011fa6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d01b      	beq.n	8012028 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff ffad 	bl	8011f50 <sync_window>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d113      	bne.n	8012028 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7858      	ldrb	r0, [r3, #1]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801200a:	2301      	movs	r3, #1
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	f7ff fcd5 	bl	80119bc <disk_read>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012018:	f04f 33ff 	mov.w	r3, #4294967295
 801201c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801201e:	2301      	movs	r3, #1
 8012020:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	683a      	ldr	r2, [r7, #0]
 8012026:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8012028:	7bfb      	ldrb	r3, [r7, #15]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
	...

08012034 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7ff ff87 	bl	8011f50 <sync_window>
 8012042:	4603      	mov	r3, r0
 8012044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012046:	7bfb      	ldrb	r3, [r7, #15]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d159      	bne.n	8012100 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b03      	cmp	r3, #3
 8012052:	d149      	bne.n	80120e8 <sync_fs+0xb4>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	791b      	ldrb	r3, [r3, #4]
 8012058:	2b01      	cmp	r3, #1
 801205a:	d145      	bne.n	80120e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	461a      	mov	r2, r3
 8012068:	2100      	movs	r1, #0
 801206a:	f7ff fda8 	bl	8011bbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	3334      	adds	r3, #52	; 0x34
 8012072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012076:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801207a:	4618      	mov	r0, r3
 801207c:	f7ff fd37 	bl	8011aee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	3334      	adds	r3, #52	; 0x34
 8012084:	4921      	ldr	r1, [pc, #132]	; (801210c <sync_fs+0xd8>)
 8012086:	4618      	mov	r0, r3
 8012088:	f7ff fd4c 	bl	8011b24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	3334      	adds	r3, #52	; 0x34
 8012090:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012094:	491e      	ldr	r1, [pc, #120]	; (8012110 <sync_fs+0xdc>)
 8012096:	4618      	mov	r0, r3
 8012098:	f7ff fd44 	bl	8011b24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	3334      	adds	r3, #52	; 0x34
 80120a0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	4619      	mov	r1, r3
 80120aa:	4610      	mov	r0, r2
 80120ac:	f7ff fd3a 	bl	8011b24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3334      	adds	r3, #52	; 0x34
 80120b4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	691b      	ldr	r3, [r3, #16]
 80120bc:	4619      	mov	r1, r3
 80120be:	4610      	mov	r0, r2
 80120c0:	f7ff fd30 	bl	8011b24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6a1b      	ldr	r3, [r3, #32]
 80120c8:	1c5a      	adds	r2, r3, #1
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	7858      	ldrb	r0, [r3, #1]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120dc:	2301      	movs	r3, #1
 80120de:	f7ff fc8d 	bl	80119fc <disk_write>
			fs->fsi_flag = 0;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	785b      	ldrb	r3, [r3, #1]
 80120ec:	2200      	movs	r2, #0
 80120ee:	2100      	movs	r1, #0
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7ff fca3 	bl	8011a3c <disk_ioctl>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <sync_fs+0xcc>
 80120fc:	2301      	movs	r3, #1
 80120fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	41615252 	.word	0x41615252
 8012110:	61417272 	.word	0x61417272

08012114 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	3b02      	subs	r3, #2
 8012122:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	699b      	ldr	r3, [r3, #24]
 8012128:	3b02      	subs	r3, #2
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	429a      	cmp	r2, r3
 801212e:	d301      	bcc.n	8012134 <clust2sect+0x20>
 8012130:	2300      	movs	r3, #0
 8012132:	e008      	b.n	8012146 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	895b      	ldrh	r3, [r3, #10]
 8012138:	461a      	mov	r2, r3
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	fb03 f202 	mul.w	r2, r3, r2
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012144:	4413      	add	r3, r2
}
 8012146:	4618      	mov	r0, r3
 8012148:	370c      	adds	r7, #12
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr

08012152 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b086      	sub	sp, #24
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	2b01      	cmp	r3, #1
 8012166:	d904      	bls.n	8012172 <get_fat+0x20>
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	699b      	ldr	r3, [r3, #24]
 801216c:	683a      	ldr	r2, [r7, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d302      	bcc.n	8012178 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012172:	2301      	movs	r3, #1
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	e0bb      	b.n	80122f0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012178:	f04f 33ff 	mov.w	r3, #4294967295
 801217c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	2b03      	cmp	r3, #3
 8012184:	f000 8083 	beq.w	801228e <get_fat+0x13c>
 8012188:	2b03      	cmp	r3, #3
 801218a:	f300 80a7 	bgt.w	80122dc <get_fat+0x18a>
 801218e:	2b01      	cmp	r3, #1
 8012190:	d002      	beq.n	8012198 <get_fat+0x46>
 8012192:	2b02      	cmp	r3, #2
 8012194:	d056      	beq.n	8012244 <get_fat+0xf2>
 8012196:	e0a1      	b.n	80122dc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	60fb      	str	r3, [r7, #12]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	085b      	lsrs	r3, r3, #1
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	4413      	add	r3, r2
 80121a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	4619      	mov	r1, r3
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80121b6:	4413      	add	r3, r2
 80121b8:	4619      	mov	r1, r3
 80121ba:	6938      	ldr	r0, [r7, #16]
 80121bc:	f7ff ff0c 	bl	8011fd8 <move_window>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f040 808d 	bne.w	80122e2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	1c5a      	adds	r2, r3, #1
 80121cc:	60fa      	str	r2, [r7, #12]
 80121ce:	693a      	ldr	r2, [r7, #16]
 80121d0:	8992      	ldrh	r2, [r2, #12]
 80121d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80121d6:	fb01 f202 	mul.w	r2, r1, r2
 80121da:	1a9b      	subs	r3, r3, r2
 80121dc:	693a      	ldr	r2, [r7, #16]
 80121de:	4413      	add	r3, r2
 80121e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80121e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	899b      	ldrh	r3, [r3, #12]
 80121ee:	4619      	mov	r1, r3
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80121f6:	4413      	add	r3, r2
 80121f8:	4619      	mov	r1, r3
 80121fa:	6938      	ldr	r0, [r7, #16]
 80121fc:	f7ff feec 	bl	8011fd8 <move_window>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d16f      	bne.n	80122e6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	899b      	ldrh	r3, [r3, #12]
 801220a:	461a      	mov	r2, r3
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012212:	fb01 f202 	mul.w	r2, r1, r2
 8012216:	1a9b      	subs	r3, r3, r2
 8012218:	693a      	ldr	r2, [r7, #16]
 801221a:	4413      	add	r3, r2
 801221c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012220:	021b      	lsls	r3, r3, #8
 8012222:	461a      	mov	r2, r3
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	4313      	orrs	r3, r2
 8012228:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <get_fat+0xe8>
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	091b      	lsrs	r3, r3, #4
 8012238:	e002      	b.n	8012240 <get_fat+0xee>
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012240:	617b      	str	r3, [r7, #20]
			break;
 8012242:	e055      	b.n	80122f0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	899b      	ldrh	r3, [r3, #12]
 801224c:	085b      	lsrs	r3, r3, #1
 801224e:	b29b      	uxth	r3, r3
 8012250:	4619      	mov	r1, r3
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	fbb3 f3f1 	udiv	r3, r3, r1
 8012258:	4413      	add	r3, r2
 801225a:	4619      	mov	r1, r3
 801225c:	6938      	ldr	r0, [r7, #16]
 801225e:	f7ff febb 	bl	8011fd8 <move_window>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d140      	bne.n	80122ea <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	693a      	ldr	r2, [r7, #16]
 8012274:	8992      	ldrh	r2, [r2, #12]
 8012276:	fbb3 f0f2 	udiv	r0, r3, r2
 801227a:	fb00 f202 	mul.w	r2, r0, r2
 801227e:	1a9b      	subs	r3, r3, r2
 8012280:	440b      	add	r3, r1
 8012282:	4618      	mov	r0, r3
 8012284:	f7ff fbf8 	bl	8011a78 <ld_word>
 8012288:	4603      	mov	r3, r0
 801228a:	617b      	str	r3, [r7, #20]
			break;
 801228c:	e030      	b.n	80122f0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	899b      	ldrh	r3, [r3, #12]
 8012296:	089b      	lsrs	r3, r3, #2
 8012298:	b29b      	uxth	r3, r3
 801229a:	4619      	mov	r1, r3
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80122a2:	4413      	add	r3, r2
 80122a4:	4619      	mov	r1, r3
 80122a6:	6938      	ldr	r0, [r7, #16]
 80122a8:	f7ff fe96 	bl	8011fd8 <move_window>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d11d      	bne.n	80122ee <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	693a      	ldr	r2, [r7, #16]
 80122be:	8992      	ldrh	r2, [r2, #12]
 80122c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80122c4:	fb00 f202 	mul.w	r2, r0, r2
 80122c8:	1a9b      	subs	r3, r3, r2
 80122ca:	440b      	add	r3, r1
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ff fbeb 	bl	8011aa8 <ld_dword>
 80122d2:	4603      	mov	r3, r0
 80122d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80122d8:	617b      	str	r3, [r7, #20]
			break;
 80122da:	e009      	b.n	80122f0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80122dc:	2301      	movs	r3, #1
 80122de:	617b      	str	r3, [r7, #20]
 80122e0:	e006      	b.n	80122f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80122e2:	bf00      	nop
 80122e4:	e004      	b.n	80122f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80122e6:	bf00      	nop
 80122e8:	e002      	b.n	80122f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80122ea:	bf00      	nop
 80122ec:	e000      	b.n	80122f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80122ee:	bf00      	nop
		}
	}

	return val;
 80122f0:	697b      	ldr	r3, [r7, #20]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3718      	adds	r7, #24
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80122fa:	b590      	push	{r4, r7, lr}
 80122fc:	b089      	sub	sp, #36	; 0x24
 80122fe:	af00      	add	r7, sp, #0
 8012300:	60f8      	str	r0, [r7, #12]
 8012302:	60b9      	str	r1, [r7, #8]
 8012304:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012306:	2302      	movs	r3, #2
 8012308:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2b01      	cmp	r3, #1
 801230e:	f240 8102 	bls.w	8012516 <put_fat+0x21c>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	699b      	ldr	r3, [r3, #24]
 8012316:	68ba      	ldr	r2, [r7, #8]
 8012318:	429a      	cmp	r2, r3
 801231a:	f080 80fc 	bcs.w	8012516 <put_fat+0x21c>
		switch (fs->fs_type) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b03      	cmp	r3, #3
 8012324:	f000 80b6 	beq.w	8012494 <put_fat+0x19a>
 8012328:	2b03      	cmp	r3, #3
 801232a:	f300 80fd 	bgt.w	8012528 <put_fat+0x22e>
 801232e:	2b01      	cmp	r3, #1
 8012330:	d003      	beq.n	801233a <put_fat+0x40>
 8012332:	2b02      	cmp	r3, #2
 8012334:	f000 8083 	beq.w	801243e <put_fat+0x144>
 8012338:	e0f6      	b.n	8012528 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	61bb      	str	r3, [r7, #24]
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	085b      	lsrs	r3, r3, #1
 8012342:	69ba      	ldr	r2, [r7, #24]
 8012344:	4413      	add	r3, r2
 8012346:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	899b      	ldrh	r3, [r3, #12]
 8012350:	4619      	mov	r1, r3
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	fbb3 f3f1 	udiv	r3, r3, r1
 8012358:	4413      	add	r3, r2
 801235a:	4619      	mov	r1, r3
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f7ff fe3b 	bl	8011fd8 <move_window>
 8012362:	4603      	mov	r3, r0
 8012364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012366:	7ffb      	ldrb	r3, [r7, #31]
 8012368:	2b00      	cmp	r3, #0
 801236a:	f040 80d6 	bne.w	801251a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	1c5a      	adds	r2, r3, #1
 8012378:	61ba      	str	r2, [r7, #24]
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	8992      	ldrh	r2, [r2, #12]
 801237e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012382:	fb00 f202 	mul.w	r2, r0, r2
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	440b      	add	r3, r1
 801238a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	f003 0301 	and.w	r3, r3, #1
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00d      	beq.n	80123b2 <put_fat+0xb8>
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	b25b      	sxtb	r3, r3
 801239c:	f003 030f 	and.w	r3, r3, #15
 80123a0:	b25a      	sxtb	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	011b      	lsls	r3, r3, #4
 80123a8:	b25b      	sxtb	r3, r3
 80123aa:	4313      	orrs	r3, r2
 80123ac:	b25b      	sxtb	r3, r3
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	e001      	b.n	80123b6 <put_fat+0xbc>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2201      	movs	r2, #1
 80123be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	899b      	ldrh	r3, [r3, #12]
 80123c8:	4619      	mov	r1, r3
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80123d0:	4413      	add	r3, r2
 80123d2:	4619      	mov	r1, r3
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7ff fdff 	bl	8011fd8 <move_window>
 80123da:	4603      	mov	r3, r0
 80123dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80123de:	7ffb      	ldrb	r3, [r7, #31]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f040 809c 	bne.w	801251e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	899b      	ldrh	r3, [r3, #12]
 80123f0:	461a      	mov	r2, r3
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80123f8:	fb00 f202 	mul.w	r2, r0, r2
 80123fc:	1a9b      	subs	r3, r3, r2
 80123fe:	440b      	add	r3, r1
 8012400:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	f003 0301 	and.w	r3, r3, #1
 8012408:	2b00      	cmp	r3, #0
 801240a:	d003      	beq.n	8012414 <put_fat+0x11a>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	091b      	lsrs	r3, r3, #4
 8012410:	b2db      	uxtb	r3, r3
 8012412:	e00e      	b.n	8012432 <put_fat+0x138>
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	b25b      	sxtb	r3, r3
 801241a:	f023 030f 	bic.w	r3, r3, #15
 801241e:	b25a      	sxtb	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	0a1b      	lsrs	r3, r3, #8
 8012424:	b25b      	sxtb	r3, r3
 8012426:	f003 030f 	and.w	r3, r3, #15
 801242a:	b25b      	sxtb	r3, r3
 801242c:	4313      	orrs	r3, r2
 801242e:	b25b      	sxtb	r3, r3
 8012430:	b2db      	uxtb	r3, r3
 8012432:	697a      	ldr	r2, [r7, #20]
 8012434:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2201      	movs	r2, #1
 801243a:	70da      	strb	r2, [r3, #3]
			break;
 801243c:	e074      	b.n	8012528 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	899b      	ldrh	r3, [r3, #12]
 8012446:	085b      	lsrs	r3, r3, #1
 8012448:	b29b      	uxth	r3, r3
 801244a:	4619      	mov	r1, r3
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012452:	4413      	add	r3, r2
 8012454:	4619      	mov	r1, r3
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f7ff fdbe 	bl	8011fd8 <move_window>
 801245c:	4603      	mov	r3, r0
 801245e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012460:	7ffb      	ldrb	r3, [r7, #31]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d15d      	bne.n	8012522 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	005b      	lsls	r3, r3, #1
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	8992      	ldrh	r2, [r2, #12]
 8012474:	fbb3 f0f2 	udiv	r0, r3, r2
 8012478:	fb00 f202 	mul.w	r2, r0, r2
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	440b      	add	r3, r1
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	b292      	uxth	r2, r2
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f7ff fb31 	bl	8011aee <st_word>
			fs->wflag = 1;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2201      	movs	r2, #1
 8012490:	70da      	strb	r2, [r3, #3]
			break;
 8012492:	e049      	b.n	8012528 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	899b      	ldrh	r3, [r3, #12]
 801249c:	089b      	lsrs	r3, r3, #2
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4619      	mov	r1, r3
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80124a8:	4413      	add	r3, r2
 80124aa:	4619      	mov	r1, r3
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff fd93 	bl	8011fd8 <move_window>
 80124b2:	4603      	mov	r3, r0
 80124b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80124b6:	7ffb      	ldrb	r3, [r7, #31]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d134      	bne.n	8012526 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	68fa      	ldr	r2, [r7, #12]
 80124ce:	8992      	ldrh	r2, [r2, #12]
 80124d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80124d4:	fb00 f202 	mul.w	r2, r0, r2
 80124d8:	1a9b      	subs	r3, r3, r2
 80124da:	440b      	add	r3, r1
 80124dc:	4618      	mov	r0, r3
 80124de:	f7ff fae3 	bl	8011aa8 <ld_dword>
 80124e2:	4603      	mov	r3, r0
 80124e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80124e8:	4323      	orrs	r3, r4
 80124ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	68fa      	ldr	r2, [r7, #12]
 80124f8:	8992      	ldrh	r2, [r2, #12]
 80124fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80124fe:	fb00 f202 	mul.w	r2, r0, r2
 8012502:	1a9b      	subs	r3, r3, r2
 8012504:	440b      	add	r3, r1
 8012506:	6879      	ldr	r1, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fb0b 	bl	8011b24 <st_dword>
			fs->wflag = 1;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2201      	movs	r2, #1
 8012512:	70da      	strb	r2, [r3, #3]
			break;
 8012514:	e008      	b.n	8012528 <put_fat+0x22e>
		}
	}
 8012516:	bf00      	nop
 8012518:	e006      	b.n	8012528 <put_fat+0x22e>
			if (res != FR_OK) break;
 801251a:	bf00      	nop
 801251c:	e004      	b.n	8012528 <put_fat+0x22e>
			if (res != FR_OK) break;
 801251e:	bf00      	nop
 8012520:	e002      	b.n	8012528 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012522:	bf00      	nop
 8012524:	e000      	b.n	8012528 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012526:	bf00      	nop
	return res;
 8012528:	7ffb      	ldrb	r3, [r7, #31]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3724      	adds	r7, #36	; 0x24
 801252e:	46bd      	mov	sp, r7
 8012530:	bd90      	pop	{r4, r7, pc}

08012532 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b088      	sub	sp, #32
 8012536:	af00      	add	r7, sp, #0
 8012538:	60f8      	str	r0, [r7, #12]
 801253a:	60b9      	str	r1, [r7, #8]
 801253c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801253e:	2300      	movs	r3, #0
 8012540:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d904      	bls.n	8012558 <remove_chain+0x26>
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	699b      	ldr	r3, [r3, #24]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	429a      	cmp	r2, r3
 8012556:	d301      	bcc.n	801255c <remove_chain+0x2a>
 8012558:	2302      	movs	r3, #2
 801255a:	e04b      	b.n	80125f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00c      	beq.n	801257c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012562:	f04f 32ff 	mov.w	r2, #4294967295
 8012566:	6879      	ldr	r1, [r7, #4]
 8012568:	69b8      	ldr	r0, [r7, #24]
 801256a:	f7ff fec6 	bl	80122fa <put_fat>
 801256e:	4603      	mov	r3, r0
 8012570:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012572:	7ffb      	ldrb	r3, [r7, #31]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d001      	beq.n	801257c <remove_chain+0x4a>
 8012578:	7ffb      	ldrb	r3, [r7, #31]
 801257a:	e03b      	b.n	80125f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff fde7 	bl	8012152 <get_fat>
 8012584:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d031      	beq.n	80125f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	2b01      	cmp	r3, #1
 8012590:	d101      	bne.n	8012596 <remove_chain+0x64>
 8012592:	2302      	movs	r3, #2
 8012594:	e02e      	b.n	80125f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801259c:	d101      	bne.n	80125a2 <remove_chain+0x70>
 801259e:	2301      	movs	r3, #1
 80125a0:	e028      	b.n	80125f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80125a2:	2200      	movs	r2, #0
 80125a4:	68b9      	ldr	r1, [r7, #8]
 80125a6:	69b8      	ldr	r0, [r7, #24]
 80125a8:	f7ff fea7 	bl	80122fa <put_fat>
 80125ac:	4603      	mov	r3, r0
 80125ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80125b0:	7ffb      	ldrb	r3, [r7, #31]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <remove_chain+0x88>
 80125b6:	7ffb      	ldrb	r3, [r7, #31]
 80125b8:	e01c      	b.n	80125f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	695a      	ldr	r2, [r3, #20]
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	699b      	ldr	r3, [r3, #24]
 80125c2:	3b02      	subs	r3, #2
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d20b      	bcs.n	80125e0 <remove_chain+0xae>
			fs->free_clst++;
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	1c5a      	adds	r2, r3, #1
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	791b      	ldrb	r3, [r3, #4]
 80125d6:	f043 0301 	orr.w	r3, r3, #1
 80125da:	b2da      	uxtb	r2, r3
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80125e4:	69bb      	ldr	r3, [r7, #24]
 80125e6:	699b      	ldr	r3, [r3, #24]
 80125e8:	68ba      	ldr	r2, [r7, #8]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d3c6      	bcc.n	801257c <remove_chain+0x4a>
 80125ee:	e000      	b.n	80125f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80125f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80125f2:	2300      	movs	r3, #0
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3720      	adds	r7, #32
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b088      	sub	sp, #32
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d10d      	bne.n	801262e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d004      	beq.n	8012628 <create_chain+0x2c>
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	699b      	ldr	r3, [r3, #24]
 8012622:	69ba      	ldr	r2, [r7, #24]
 8012624:	429a      	cmp	r2, r3
 8012626:	d31b      	bcc.n	8012660 <create_chain+0x64>
 8012628:	2301      	movs	r3, #1
 801262a:	61bb      	str	r3, [r7, #24]
 801262c:	e018      	b.n	8012660 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801262e:	6839      	ldr	r1, [r7, #0]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff fd8e 	bl	8012152 <get_fat>
 8012636:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b01      	cmp	r3, #1
 801263c:	d801      	bhi.n	8012642 <create_chain+0x46>
 801263e:	2301      	movs	r3, #1
 8012640:	e070      	b.n	8012724 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012648:	d101      	bne.n	801264e <create_chain+0x52>
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	e06a      	b.n	8012724 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	699b      	ldr	r3, [r3, #24]
 8012652:	68fa      	ldr	r2, [r7, #12]
 8012654:	429a      	cmp	r2, r3
 8012656:	d201      	bcs.n	801265c <create_chain+0x60>
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	e063      	b.n	8012724 <create_chain+0x128>
		scl = clst;
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	3301      	adds	r3, #1
 8012668:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	699b      	ldr	r3, [r3, #24]
 801266e:	69fa      	ldr	r2, [r7, #28]
 8012670:	429a      	cmp	r2, r3
 8012672:	d307      	bcc.n	8012684 <create_chain+0x88>
				ncl = 2;
 8012674:	2302      	movs	r3, #2
 8012676:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012678:	69fa      	ldr	r2, [r7, #28]
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	429a      	cmp	r2, r3
 801267e:	d901      	bls.n	8012684 <create_chain+0x88>
 8012680:	2300      	movs	r3, #0
 8012682:	e04f      	b.n	8012724 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012684:	69f9      	ldr	r1, [r7, #28]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ff fd63 	bl	8012152 <get_fat>
 801268c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00e      	beq.n	80126b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d003      	beq.n	80126a2 <create_chain+0xa6>
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126a0:	d101      	bne.n	80126a6 <create_chain+0xaa>
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	e03e      	b.n	8012724 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80126a6:	69fa      	ldr	r2, [r7, #28]
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d1da      	bne.n	8012664 <create_chain+0x68>
 80126ae:	2300      	movs	r3, #0
 80126b0:	e038      	b.n	8012724 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80126b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80126b4:	f04f 32ff 	mov.w	r2, #4294967295
 80126b8:	69f9      	ldr	r1, [r7, #28]
 80126ba:	6938      	ldr	r0, [r7, #16]
 80126bc:	f7ff fe1d 	bl	80122fa <put_fat>
 80126c0:	4603      	mov	r3, r0
 80126c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80126c4:	7dfb      	ldrb	r3, [r7, #23]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d109      	bne.n	80126de <create_chain+0xe2>
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d006      	beq.n	80126de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80126d0:	69fa      	ldr	r2, [r7, #28]
 80126d2:	6839      	ldr	r1, [r7, #0]
 80126d4:	6938      	ldr	r0, [r7, #16]
 80126d6:	f7ff fe10 	bl	80122fa <put_fat>
 80126da:	4603      	mov	r3, r0
 80126dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80126de:	7dfb      	ldrb	r3, [r7, #23]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d116      	bne.n	8012712 <create_chain+0x116>
		fs->last_clst = ncl;
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	69fa      	ldr	r2, [r7, #28]
 80126e8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	695a      	ldr	r2, [r3, #20]
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	699b      	ldr	r3, [r3, #24]
 80126f2:	3b02      	subs	r3, #2
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d804      	bhi.n	8012702 <create_chain+0x106>
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	695b      	ldr	r3, [r3, #20]
 80126fc:	1e5a      	subs	r2, r3, #1
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	791b      	ldrb	r3, [r3, #4]
 8012706:	f043 0301 	orr.w	r3, r3, #1
 801270a:	b2da      	uxtb	r2, r3
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	711a      	strb	r2, [r3, #4]
 8012710:	e007      	b.n	8012722 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d102      	bne.n	801271e <create_chain+0x122>
 8012718:	f04f 33ff 	mov.w	r3, #4294967295
 801271c:	e000      	b.n	8012720 <create_chain+0x124>
 801271e:	2301      	movs	r3, #1
 8012720:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012722:	69fb      	ldr	r3, [r7, #28]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3720      	adds	r7, #32
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801272c:	b480      	push	{r7}
 801272e:	b087      	sub	sp, #28
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012740:	3304      	adds	r3, #4
 8012742:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	899b      	ldrh	r3, [r3, #12]
 8012748:	461a      	mov	r2, r3
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	8952      	ldrh	r2, [r2, #10]
 8012754:	fbb3 f3f2 	udiv	r3, r3, r2
 8012758:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	1d1a      	adds	r2, r3, #4
 801275e:	613a      	str	r2, [r7, #16]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <clmt_clust+0x42>
 801276a:	2300      	movs	r3, #0
 801276c:	e010      	b.n	8012790 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	429a      	cmp	r2, r3
 8012774:	d307      	bcc.n	8012786 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	617b      	str	r3, [r7, #20]
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	3304      	adds	r3, #4
 8012782:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012784:	e7e9      	b.n	801275a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012786:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	4413      	add	r3, r2
}
 8012790:	4618      	mov	r0, r3
 8012792:	371c      	adds	r7, #28
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80127b2:	d204      	bcs.n	80127be <dir_sdi+0x22>
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	f003 031f 	and.w	r3, r3, #31
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d001      	beq.n	80127c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80127be:	2302      	movs	r3, #2
 80127c0:	e071      	b.n	80128a6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	683a      	ldr	r2, [r7, #0]
 80127c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	689b      	ldr	r3, [r3, #8]
 80127cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d106      	bne.n	80127e2 <dir_sdi+0x46>
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b02      	cmp	r3, #2
 80127da:	d902      	bls.n	80127e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d10c      	bne.n	8012802 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	095b      	lsrs	r3, r3, #5
 80127ec:	693a      	ldr	r2, [r7, #16]
 80127ee:	8912      	ldrh	r2, [r2, #8]
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d301      	bcc.n	80127f8 <dir_sdi+0x5c>
 80127f4:	2302      	movs	r3, #2
 80127f6:	e056      	b.n	80128a6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	61da      	str	r2, [r3, #28]
 8012800:	e02d      	b.n	801285e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	895b      	ldrh	r3, [r3, #10]
 8012806:	461a      	mov	r2, r3
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	fb02 f303 	mul.w	r3, r2, r3
 8012810:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012812:	e019      	b.n	8012848 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6979      	ldr	r1, [r7, #20]
 8012818:	4618      	mov	r0, r3
 801281a:	f7ff fc9a 	bl	8012152 <get_fat>
 801281e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012826:	d101      	bne.n	801282c <dir_sdi+0x90>
 8012828:	2301      	movs	r3, #1
 801282a:	e03c      	b.n	80128a6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d904      	bls.n	801283c <dir_sdi+0xa0>
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	697a      	ldr	r2, [r7, #20]
 8012838:	429a      	cmp	r2, r3
 801283a:	d301      	bcc.n	8012840 <dir_sdi+0xa4>
 801283c:	2302      	movs	r3, #2
 801283e:	e032      	b.n	80128a6 <dir_sdi+0x10a>
			ofs -= csz;
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	1ad3      	subs	r3, r2, r3
 8012846:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012848:	683a      	ldr	r2, [r7, #0]
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	429a      	cmp	r2, r3
 801284e:	d2e1      	bcs.n	8012814 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012850:	6979      	ldr	r1, [r7, #20]
 8012852:	6938      	ldr	r0, [r7, #16]
 8012854:	f7ff fc5e 	bl	8012114 <clust2sect>
 8012858:	4602      	mov	r2, r0
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	69db      	ldr	r3, [r3, #28]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d101      	bne.n	8012870 <dir_sdi+0xd4>
 801286c:	2302      	movs	r3, #2
 801286e:	e01a      	b.n	80128a6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	69da      	ldr	r2, [r3, #28]
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	899b      	ldrh	r3, [r3, #12]
 8012878:	4619      	mov	r1, r3
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012880:	441a      	add	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	461a      	mov	r2, r3
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	fbb3 f0f2 	udiv	r0, r3, r2
 8012898:	fb00 f202 	mul.w	r2, r0, r2
 801289c:	1a9b      	subs	r3, r3, r2
 801289e:	18ca      	adds	r2, r1, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3718      	adds	r7, #24
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b086      	sub	sp, #24
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
 80128b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	695b      	ldr	r3, [r3, #20]
 80128c2:	3320      	adds	r3, #32
 80128c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	69db      	ldr	r3, [r3, #28]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d003      	beq.n	80128d6 <dir_next+0x28>
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80128d4:	d301      	bcc.n	80128da <dir_next+0x2c>
 80128d6:	2304      	movs	r3, #4
 80128d8:	e0bb      	b.n	8012a52 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	899b      	ldrh	r3, [r3, #12]
 80128de:	461a      	mov	r2, r3
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80128e6:	fb01 f202 	mul.w	r2, r1, r2
 80128ea:	1a9b      	subs	r3, r3, r2
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f040 809d 	bne.w	8012a2c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	69db      	ldr	r3, [r3, #28]
 80128f6:	1c5a      	adds	r2, r3, #1
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	699b      	ldr	r3, [r3, #24]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d10b      	bne.n	801291c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	095b      	lsrs	r3, r3, #5
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	8912      	ldrh	r2, [r2, #8]
 801290c:	4293      	cmp	r3, r2
 801290e:	f0c0 808d 	bcc.w	8012a2c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2200      	movs	r2, #0
 8012916:	61da      	str	r2, [r3, #28]
 8012918:	2304      	movs	r3, #4
 801291a:	e09a      	b.n	8012a52 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	899b      	ldrh	r3, [r3, #12]
 8012920:	461a      	mov	r2, r3
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	fbb3 f3f2 	udiv	r3, r3, r2
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	8952      	ldrh	r2, [r2, #10]
 801292c:	3a01      	subs	r2, #1
 801292e:	4013      	ands	r3, r2
 8012930:	2b00      	cmp	r3, #0
 8012932:	d17b      	bne.n	8012a2c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f7ff fc08 	bl	8012152 <get_fat>
 8012942:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	2b01      	cmp	r3, #1
 8012948:	d801      	bhi.n	801294e <dir_next+0xa0>
 801294a:	2302      	movs	r3, #2
 801294c:	e081      	b.n	8012a52 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012954:	d101      	bne.n	801295a <dir_next+0xac>
 8012956:	2301      	movs	r3, #1
 8012958:	e07b      	b.n	8012a52 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	699b      	ldr	r3, [r3, #24]
 801295e:	697a      	ldr	r2, [r7, #20]
 8012960:	429a      	cmp	r2, r3
 8012962:	d359      	bcc.n	8012a18 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d104      	bne.n	8012974 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	61da      	str	r2, [r3, #28]
 8012970:	2304      	movs	r3, #4
 8012972:	e06e      	b.n	8012a52 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	699b      	ldr	r3, [r3, #24]
 801297a:	4619      	mov	r1, r3
 801297c:	4610      	mov	r0, r2
 801297e:	f7ff fe3d 	bl	80125fc <create_chain>
 8012982:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d101      	bne.n	801298e <dir_next+0xe0>
 801298a:	2307      	movs	r3, #7
 801298c:	e061      	b.n	8012a52 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	2b01      	cmp	r3, #1
 8012992:	d101      	bne.n	8012998 <dir_next+0xea>
 8012994:	2302      	movs	r3, #2
 8012996:	e05c      	b.n	8012a52 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801299e:	d101      	bne.n	80129a4 <dir_next+0xf6>
 80129a0:	2301      	movs	r3, #1
 80129a2:	e056      	b.n	8012a52 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80129a4:	68f8      	ldr	r0, [r7, #12]
 80129a6:	f7ff fad3 	bl	8011f50 <sync_window>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <dir_next+0x106>
 80129b0:	2301      	movs	r3, #1
 80129b2:	e04e      	b.n	8012a52 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	899b      	ldrh	r3, [r3, #12]
 80129be:	461a      	mov	r2, r3
 80129c0:	2100      	movs	r1, #0
 80129c2:	f7ff f8fc 	bl	8011bbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80129c6:	2300      	movs	r3, #0
 80129c8:	613b      	str	r3, [r7, #16]
 80129ca:	6979      	ldr	r1, [r7, #20]
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f7ff fba1 	bl	8012114 <clust2sect>
 80129d2:	4602      	mov	r2, r0
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	631a      	str	r2, [r3, #48]	; 0x30
 80129d8:	e012      	b.n	8012a00 <dir_next+0x152>
						fs->wflag = 1;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2201      	movs	r2, #1
 80129de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f7ff fab5 	bl	8011f50 <sync_window>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d001      	beq.n	80129f0 <dir_next+0x142>
 80129ec:	2301      	movs	r3, #1
 80129ee:	e030      	b.n	8012a52 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	3301      	adds	r3, #1
 80129f4:	613b      	str	r3, [r7, #16]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	631a      	str	r2, [r3, #48]	; 0x30
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	895b      	ldrh	r3, [r3, #10]
 8012a04:	461a      	mov	r2, r3
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d3e6      	bcc.n	80129da <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	1ad2      	subs	r2, r2, r3
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	697a      	ldr	r2, [r7, #20]
 8012a1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012a1e:	6979      	ldr	r1, [r7, #20]
 8012a20:	68f8      	ldr	r0, [r7, #12]
 8012a22:	f7ff fb77 	bl	8012114 <clust2sect>
 8012a26:	4602      	mov	r2, r0
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68ba      	ldr	r2, [r7, #8]
 8012a30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	899b      	ldrh	r3, [r3, #12]
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a44:	fb00 f202 	mul.w	r2, r0, r2
 8012a48:	1a9b      	subs	r3, r3, r2
 8012a4a:	18ca      	adds	r2, r1, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012a50:	2300      	movs	r3, #0
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b086      	sub	sp, #24
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	6078      	str	r0, [r7, #4]
 8012a62:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7ff fe95 	bl	801279c <dir_sdi>
 8012a72:	4603      	mov	r3, r0
 8012a74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012a76:	7dfb      	ldrb	r3, [r7, #23]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d12b      	bne.n	8012ad4 <dir_alloc+0x7a>
		n = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	69db      	ldr	r3, [r3, #28]
 8012a84:	4619      	mov	r1, r3
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f7ff faa6 	bl	8011fd8 <move_window>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a90:	7dfb      	ldrb	r3, [r7, #23]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d11d      	bne.n	8012ad2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2be5      	cmp	r3, #229	; 0xe5
 8012a9e:	d004      	beq.n	8012aaa <dir_alloc+0x50>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d107      	bne.n	8012aba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	3301      	adds	r3, #1
 8012aae:	613b      	str	r3, [r7, #16]
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d102      	bne.n	8012abe <dir_alloc+0x64>
 8012ab8:	e00c      	b.n	8012ad4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012aba:	2300      	movs	r3, #0
 8012abc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012abe:	2101      	movs	r1, #1
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff fef4 	bl	80128ae <dir_next>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012aca:	7dfb      	ldrb	r3, [r7, #23]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d0d7      	beq.n	8012a80 <dir_alloc+0x26>
 8012ad0:	e000      	b.n	8012ad4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012ad2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012ad4:	7dfb      	ldrb	r3, [r7, #23]
 8012ad6:	2b04      	cmp	r3, #4
 8012ad8:	d101      	bne.n	8012ade <dir_alloc+0x84>
 8012ada:	2307      	movs	r3, #7
 8012adc:	75fb      	strb	r3, [r7, #23]
	return res;
 8012ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	331a      	adds	r3, #26
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fe ffbe 	bl	8011a78 <ld_word>
 8012afc:	4603      	mov	r3, r0
 8012afe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2b03      	cmp	r3, #3
 8012b06:	d109      	bne.n	8012b1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	3314      	adds	r3, #20
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7fe ffb3 	bl	8011a78 <ld_word>
 8012b12:	4603      	mov	r3, r0
 8012b14:	041b      	lsls	r3, r3, #16
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3710      	adds	r7, #16
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b084      	sub	sp, #16
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	60f8      	str	r0, [r7, #12]
 8012b2e:	60b9      	str	r1, [r7, #8]
 8012b30:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	331a      	adds	r3, #26
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	b292      	uxth	r2, r2
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fe ffd6 	bl	8011aee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	2b03      	cmp	r3, #3
 8012b48:	d109      	bne.n	8012b5e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	f103 0214 	add.w	r2, r3, #20
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	0c1b      	lsrs	r3, r3, #16
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	4619      	mov	r1, r3
 8012b58:	4610      	mov	r0, r2
 8012b5a:	f7fe ffc8 	bl	8011aee <st_word>
	}
}
 8012b5e:	bf00      	nop
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b086      	sub	sp, #24
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012b70:	2304      	movs	r3, #4
 8012b72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012b7a:	e03c      	b.n	8012bf6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	4619      	mov	r1, r3
 8012b82:	6938      	ldr	r0, [r7, #16]
 8012b84:	f7ff fa28 	bl	8011fd8 <move_window>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d136      	bne.n	8012c00 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6a1b      	ldr	r3, [r3, #32]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012b9a:	7bfb      	ldrb	r3, [r7, #15]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d102      	bne.n	8012ba6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012ba0:	2304      	movs	r3, #4
 8012ba2:	75fb      	strb	r3, [r7, #23]
 8012ba4:	e031      	b.n	8012c0a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6a1b      	ldr	r3, [r3, #32]
 8012baa:	330b      	adds	r3, #11
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bb2:	73bb      	strb	r3, [r7, #14]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	7bba      	ldrb	r2, [r7, #14]
 8012bb8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
 8012bbc:	2be5      	cmp	r3, #229	; 0xe5
 8012bbe:	d011      	beq.n	8012be4 <dir_read+0x7e>
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
 8012bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8012bc4:	d00e      	beq.n	8012be4 <dir_read+0x7e>
 8012bc6:	7bbb      	ldrb	r3, [r7, #14]
 8012bc8:	2b0f      	cmp	r3, #15
 8012bca:	d00b      	beq.n	8012be4 <dir_read+0x7e>
 8012bcc:	7bbb      	ldrb	r3, [r7, #14]
 8012bce:	f023 0320 	bic.w	r3, r3, #32
 8012bd2:	2b08      	cmp	r3, #8
 8012bd4:	bf0c      	ite	eq
 8012bd6:	2301      	moveq	r3, #1
 8012bd8:	2300      	movne	r3, #0
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	461a      	mov	r2, r3
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d00f      	beq.n	8012c04 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012be4:	2100      	movs	r1, #0
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7ff fe61 	bl	80128ae <dir_next>
 8012bec:	4603      	mov	r3, r0
 8012bee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012bf0:	7dfb      	ldrb	r3, [r7, #23]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d108      	bne.n	8012c08 <dir_read+0xa2>
	while (dp->sect) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	69db      	ldr	r3, [r3, #28]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d1be      	bne.n	8012b7c <dir_read+0x16>
 8012bfe:	e004      	b.n	8012c0a <dir_read+0xa4>
		if (res != FR_OK) break;
 8012c00:	bf00      	nop
 8012c02:	e002      	b.n	8012c0a <dir_read+0xa4>
				break;
 8012c04:	bf00      	nop
 8012c06:	e000      	b.n	8012c0a <dir_read+0xa4>
		if (res != FR_OK) break;
 8012c08:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012c0a:	7dfb      	ldrb	r3, [r7, #23]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <dir_read+0xb0>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	61da      	str	r2, [r3, #28]
	return res;
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3718      	adds	r7, #24
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b086      	sub	sp, #24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012c2e:	2100      	movs	r1, #0
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff fdb3 	bl	801279c <dir_sdi>
 8012c36:	4603      	mov	r3, r0
 8012c38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012c3a:	7dfb      	ldrb	r3, [r7, #23]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d001      	beq.n	8012c44 <dir_find+0x24>
 8012c40:	7dfb      	ldrb	r3, [r7, #23]
 8012c42:	e03e      	b.n	8012cc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	69db      	ldr	r3, [r3, #28]
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6938      	ldr	r0, [r7, #16]
 8012c4c:	f7ff f9c4 	bl	8011fd8 <move_window>
 8012c50:	4603      	mov	r3, r0
 8012c52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c54:	7dfb      	ldrb	r3, [r7, #23]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d12f      	bne.n	8012cba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6a1b      	ldr	r3, [r3, #32]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012c62:	7bfb      	ldrb	r3, [r7, #15]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d102      	bne.n	8012c6e <dir_find+0x4e>
 8012c68:	2304      	movs	r3, #4
 8012c6a:	75fb      	strb	r3, [r7, #23]
 8012c6c:	e028      	b.n	8012cc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	330b      	adds	r3, #11
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6a1b      	ldr	r3, [r3, #32]
 8012c84:	330b      	adds	r3, #11
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	f003 0308 	and.w	r3, r3, #8
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d10a      	bne.n	8012ca6 <dir_find+0x86>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6a18      	ldr	r0, [r3, #32]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	3324      	adds	r3, #36	; 0x24
 8012c98:	220b      	movs	r2, #11
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	f7fe ffaa 	bl	8011bf4 <mem_cmp>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d00b      	beq.n	8012cbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012ca6:	2100      	movs	r1, #0
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f7ff fe00 	bl	80128ae <dir_next>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012cb2:	7dfb      	ldrb	r3, [r7, #23]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d0c5      	beq.n	8012c44 <dir_find+0x24>
 8012cb8:	e002      	b.n	8012cc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012cba:	bf00      	nop
 8012cbc:	e000      	b.n	8012cc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012cbe:	bf00      	nop

	return res;
 8012cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b084      	sub	sp, #16
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012cd8:	2101      	movs	r1, #1
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7ff febd 	bl	8012a5a <dir_alloc>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012ce4:	7bfb      	ldrb	r3, [r7, #15]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d11c      	bne.n	8012d24 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	69db      	ldr	r3, [r3, #28]
 8012cee:	4619      	mov	r1, r3
 8012cf0:	68b8      	ldr	r0, [r7, #8]
 8012cf2:	f7ff f971 	bl	8011fd8 <move_window>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012cfa:	7bfb      	ldrb	r3, [r7, #15]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d111      	bne.n	8012d24 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a1b      	ldr	r3, [r3, #32]
 8012d04:	2220      	movs	r2, #32
 8012d06:	2100      	movs	r1, #0
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fe ff58 	bl	8011bbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a18      	ldr	r0, [r3, #32]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	3324      	adds	r3, #36	; 0x24
 8012d16:	220b      	movs	r2, #11
 8012d18:	4619      	mov	r1, r3
 8012d1a:	f7fe ff2f 	bl	8011b7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	2201      	movs	r2, #1
 8012d22:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}

08012d2e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b086      	sub	sp, #24
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
 8012d36:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	69db      	ldr	r3, [r3, #28]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d04e      	beq.n	8012de4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	613b      	str	r3, [r7, #16]
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012d4e:	e021      	b.n	8012d94 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6a1a      	ldr	r2, [r3, #32]
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	1c59      	adds	r1, r3, #1
 8012d58:	6179      	str	r1, [r7, #20]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	2b20      	cmp	r3, #32
 8012d64:	d100      	bne.n	8012d68 <get_fileinfo+0x3a>
 8012d66:	e015      	b.n	8012d94 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012d68:	7bfb      	ldrb	r3, [r7, #15]
 8012d6a:	2b05      	cmp	r3, #5
 8012d6c:	d101      	bne.n	8012d72 <get_fileinfo+0x44>
 8012d6e:	23e5      	movs	r3, #229	; 0xe5
 8012d70:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	2b09      	cmp	r3, #9
 8012d76:	d106      	bne.n	8012d86 <get_fileinfo+0x58>
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	613a      	str	r2, [r7, #16]
 8012d7e:	683a      	ldr	r2, [r7, #0]
 8012d80:	4413      	add	r3, r2
 8012d82:	222e      	movs	r2, #46	; 0x2e
 8012d84:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	1c5a      	adds	r2, r3, #1
 8012d8a:	613a      	str	r2, [r7, #16]
 8012d8c:	683a      	ldr	r2, [r7, #0]
 8012d8e:	4413      	add	r3, r2
 8012d90:	7bfa      	ldrb	r2, [r7, #15]
 8012d92:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	2b0a      	cmp	r3, #10
 8012d98:	d9da      	bls.n	8012d50 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012d9a:	683a      	ldr	r2, [r7, #0]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	4413      	add	r3, r2
 8012da0:	3309      	adds	r3, #9
 8012da2:	2200      	movs	r2, #0
 8012da4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6a1b      	ldr	r3, [r3, #32]
 8012daa:	7ada      	ldrb	r2, [r3, #11]
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6a1b      	ldr	r3, [r3, #32]
 8012db4:	331c      	adds	r3, #28
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fe fe76 	bl	8011aa8 <ld_dword>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a1b      	ldr	r3, [r3, #32]
 8012dc6:	3316      	adds	r3, #22
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7fe fe6d 	bl	8011aa8 <ld_dword>
 8012dce:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	80da      	strh	r2, [r3, #6]
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	0c1b      	lsrs	r3, r3, #16
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	809a      	strh	r2, [r3, #4]
 8012de2:	e000      	b.n	8012de6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012de4:	bf00      	nop
}
 8012de6:	3718      	adds	r7, #24
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b088      	sub	sp, #32
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	60fb      	str	r3, [r7, #12]
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	3324      	adds	r3, #36	; 0x24
 8012e00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012e02:	220b      	movs	r2, #11
 8012e04:	2120      	movs	r1, #32
 8012e06:	68b8      	ldr	r0, [r7, #8]
 8012e08:	f7fe fed9 	bl	8011bbe <mem_set>
	si = i = 0; ni = 8;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	613b      	str	r3, [r7, #16]
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	61fb      	str	r3, [r7, #28]
 8012e14:	2308      	movs	r3, #8
 8012e16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	1c5a      	adds	r2, r3, #1
 8012e1c:	61fa      	str	r2, [r7, #28]
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	4413      	add	r3, r2
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012e26:	7efb      	ldrb	r3, [r7, #27]
 8012e28:	2b20      	cmp	r3, #32
 8012e2a:	d94e      	bls.n	8012eca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012e2c:	7efb      	ldrb	r3, [r7, #27]
 8012e2e:	2b2f      	cmp	r3, #47	; 0x2f
 8012e30:	d006      	beq.n	8012e40 <create_name+0x54>
 8012e32:	7efb      	ldrb	r3, [r7, #27]
 8012e34:	2b5c      	cmp	r3, #92	; 0x5c
 8012e36:	d110      	bne.n	8012e5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012e38:	e002      	b.n	8012e40 <create_name+0x54>
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	61fb      	str	r3, [r7, #28]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	4413      	add	r3, r2
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b2f      	cmp	r3, #47	; 0x2f
 8012e4a:	d0f6      	beq.n	8012e3a <create_name+0x4e>
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	4413      	add	r3, r2
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	2b5c      	cmp	r3, #92	; 0x5c
 8012e56:	d0f0      	beq.n	8012e3a <create_name+0x4e>
			break;
 8012e58:	e038      	b.n	8012ecc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012e5a:	7efb      	ldrb	r3, [r7, #27]
 8012e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e5e:	d003      	beq.n	8012e68 <create_name+0x7c>
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d30c      	bcc.n	8012e82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	2b0b      	cmp	r3, #11
 8012e6c:	d002      	beq.n	8012e74 <create_name+0x88>
 8012e6e:	7efb      	ldrb	r3, [r7, #27]
 8012e70:	2b2e      	cmp	r3, #46	; 0x2e
 8012e72:	d001      	beq.n	8012e78 <create_name+0x8c>
 8012e74:	2306      	movs	r3, #6
 8012e76:	e044      	b.n	8012f02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012e78:	2308      	movs	r3, #8
 8012e7a:	613b      	str	r3, [r7, #16]
 8012e7c:	230b      	movs	r3, #11
 8012e7e:	617b      	str	r3, [r7, #20]
			continue;
 8012e80:	e022      	b.n	8012ec8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012e82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	da04      	bge.n	8012e94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012e8a:	7efb      	ldrb	r3, [r7, #27]
 8012e8c:	3b80      	subs	r3, #128	; 0x80
 8012e8e:	4a1f      	ldr	r2, [pc, #124]	; (8012f0c <create_name+0x120>)
 8012e90:	5cd3      	ldrb	r3, [r2, r3]
 8012e92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012e94:	7efb      	ldrb	r3, [r7, #27]
 8012e96:	4619      	mov	r1, r3
 8012e98:	481d      	ldr	r0, [pc, #116]	; (8012f10 <create_name+0x124>)
 8012e9a:	f7fe fed2 	bl	8011c42 <chk_chr>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <create_name+0xbc>
 8012ea4:	2306      	movs	r3, #6
 8012ea6:	e02c      	b.n	8012f02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012ea8:	7efb      	ldrb	r3, [r7, #27]
 8012eaa:	2b60      	cmp	r3, #96	; 0x60
 8012eac:	d905      	bls.n	8012eba <create_name+0xce>
 8012eae:	7efb      	ldrb	r3, [r7, #27]
 8012eb0:	2b7a      	cmp	r3, #122	; 0x7a
 8012eb2:	d802      	bhi.n	8012eba <create_name+0xce>
 8012eb4:	7efb      	ldrb	r3, [r7, #27]
 8012eb6:	3b20      	subs	r3, #32
 8012eb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	1c5a      	adds	r2, r3, #1
 8012ebe:	613a      	str	r2, [r7, #16]
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	7efa      	ldrb	r2, [r7, #27]
 8012ec6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012ec8:	e7a6      	b.n	8012e18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012eca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	441a      	add	r2, r3
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <create_name+0xf4>
 8012edc:	2306      	movs	r3, #6
 8012ede:	e010      	b.n	8012f02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2be5      	cmp	r3, #229	; 0xe5
 8012ee6:	d102      	bne.n	8012eee <create_name+0x102>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2205      	movs	r2, #5
 8012eec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012eee:	7efb      	ldrb	r3, [r7, #27]
 8012ef0:	2b20      	cmp	r3, #32
 8012ef2:	d801      	bhi.n	8012ef8 <create_name+0x10c>
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	e000      	b.n	8012efa <create_name+0x10e>
 8012ef8:	2200      	movs	r2, #0
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	330b      	adds	r3, #11
 8012efe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012f00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	0807342c 	.word	0x0807342c
 8012f10:	0801e018 	.word	0x0801e018

08012f14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b086      	sub	sp, #24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012f28:	e002      	b.n	8012f30 <follow_path+0x1c>
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	603b      	str	r3, [r7, #0]
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	2b2f      	cmp	r3, #47	; 0x2f
 8012f36:	d0f8      	beq.n	8012f2a <follow_path+0x16>
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8012f3e:	d0f4      	beq.n	8012f2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	2200      	movs	r2, #0
 8012f44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2b1f      	cmp	r3, #31
 8012f4c:	d80a      	bhi.n	8012f64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2280      	movs	r2, #128	; 0x80
 8012f52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012f56:	2100      	movs	r1, #0
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fc1f 	bl	801279c <dir_sdi>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	75fb      	strb	r3, [r7, #23]
 8012f62:	e048      	b.n	8012ff6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012f64:	463b      	mov	r3, r7
 8012f66:	4619      	mov	r1, r3
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff ff3f 	bl	8012dec <create_name>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012f72:	7dfb      	ldrb	r3, [r7, #23]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d139      	bne.n	8012fec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff fe51 	bl	8012c20 <dir_find>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00a      	beq.n	8012fa6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012f90:	7dfb      	ldrb	r3, [r7, #23]
 8012f92:	2b04      	cmp	r3, #4
 8012f94:	d12c      	bne.n	8012ff0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	f003 0304 	and.w	r3, r3, #4
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d127      	bne.n	8012ff0 <follow_path+0xdc>
 8012fa0:	2305      	movs	r3, #5
 8012fa2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012fa4:	e024      	b.n	8012ff0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012fa6:	7afb      	ldrb	r3, [r7, #11]
 8012fa8:	f003 0304 	and.w	r3, r3, #4
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d121      	bne.n	8012ff4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	799b      	ldrb	r3, [r3, #6]
 8012fb4:	f003 0310 	and.w	r3, r3, #16
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d102      	bne.n	8012fc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012fbc:	2305      	movs	r3, #5
 8012fbe:	75fb      	strb	r3, [r7, #23]
 8012fc0:	e019      	b.n	8012ff6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	695b      	ldr	r3, [r3, #20]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	8992      	ldrh	r2, [r2, #12]
 8012fd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8012fd4:	fb00 f202 	mul.w	r2, r0, r2
 8012fd8:	1a9b      	subs	r3, r3, r2
 8012fda:	440b      	add	r3, r1
 8012fdc:	4619      	mov	r1, r3
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f7ff fd82 	bl	8012ae8 <ld_clust>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012fea:	e7bb      	b.n	8012f64 <follow_path+0x50>
			if (res != FR_OK) break;
 8012fec:	bf00      	nop
 8012fee:	e002      	b.n	8012ff6 <follow_path+0xe2>
				break;
 8012ff0:	bf00      	nop
 8012ff2:	e000      	b.n	8012ff6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ff4:	bf00      	nop
			}
		}
	}

	return res;
 8012ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3718      	adds	r7, #24
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013000:	b480      	push	{r7}
 8013002:	b087      	sub	sp, #28
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013008:	f04f 33ff 	mov.w	r3, #4294967295
 801300c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d031      	beq.n	801307a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	617b      	str	r3, [r7, #20]
 801301c:	e002      	b.n	8013024 <get_ldnumber+0x24>
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	3301      	adds	r3, #1
 8013022:	617b      	str	r3, [r7, #20]
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b20      	cmp	r3, #32
 801302a:	d903      	bls.n	8013034 <get_ldnumber+0x34>
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	2b3a      	cmp	r3, #58	; 0x3a
 8013032:	d1f4      	bne.n	801301e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	2b3a      	cmp	r3, #58	; 0x3a
 801303a:	d11c      	bne.n	8013076 <get_ldnumber+0x76>
			tp = *path;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	1c5a      	adds	r2, r3, #1
 8013046:	60fa      	str	r2, [r7, #12]
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	3b30      	subs	r3, #48	; 0x30
 801304c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	2b09      	cmp	r3, #9
 8013052:	d80e      	bhi.n	8013072 <get_ldnumber+0x72>
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	429a      	cmp	r2, r3
 801305a:	d10a      	bne.n	8013072 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d107      	bne.n	8013072 <get_ldnumber+0x72>
					vol = (int)i;
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	3301      	adds	r3, #1
 801306a:	617b      	str	r3, [r7, #20]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	697a      	ldr	r2, [r7, #20]
 8013070:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	e002      	b.n	801307c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013076:	2300      	movs	r3, #0
 8013078:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801307a:	693b      	ldr	r3, [r7, #16]
}
 801307c:	4618      	mov	r0, r3
 801307e:	371c      	adds	r7, #28
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2200      	movs	r2, #0
 8013096:	70da      	strb	r2, [r3, #3]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f04f 32ff 	mov.w	r2, #4294967295
 801309e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80130a0:	6839      	ldr	r1, [r7, #0]
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7fe ff98 	bl	8011fd8 <move_window>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <check_fs+0x2a>
 80130ae:	2304      	movs	r3, #4
 80130b0:	e038      	b.n	8013124 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	3334      	adds	r3, #52	; 0x34
 80130b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7fe fcdc 	bl	8011a78 <ld_word>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461a      	mov	r2, r3
 80130c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d001      	beq.n	80130d0 <check_fs+0x48>
 80130cc:	2303      	movs	r3, #3
 80130ce:	e029      	b.n	8013124 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80130d6:	2be9      	cmp	r3, #233	; 0xe9
 80130d8:	d009      	beq.n	80130ee <check_fs+0x66>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80130e0:	2beb      	cmp	r3, #235	; 0xeb
 80130e2:	d11e      	bne.n	8013122 <check_fs+0x9a>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80130ea:	2b90      	cmp	r3, #144	; 0x90
 80130ec:	d119      	bne.n	8013122 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	3334      	adds	r3, #52	; 0x34
 80130f2:	3336      	adds	r3, #54	; 0x36
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fe fcd7 	bl	8011aa8 <ld_dword>
 80130fa:	4603      	mov	r3, r0
 80130fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013100:	4a0a      	ldr	r2, [pc, #40]	; (801312c <check_fs+0xa4>)
 8013102:	4293      	cmp	r3, r2
 8013104:	d101      	bne.n	801310a <check_fs+0x82>
 8013106:	2300      	movs	r3, #0
 8013108:	e00c      	b.n	8013124 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	3334      	adds	r3, #52	; 0x34
 801310e:	3352      	adds	r3, #82	; 0x52
 8013110:	4618      	mov	r0, r3
 8013112:	f7fe fcc9 	bl	8011aa8 <ld_dword>
 8013116:	4603      	mov	r3, r0
 8013118:	4a05      	ldr	r2, [pc, #20]	; (8013130 <check_fs+0xa8>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d101      	bne.n	8013122 <check_fs+0x9a>
 801311e:	2300      	movs	r3, #0
 8013120:	e000      	b.n	8013124 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013122:	2302      	movs	r3, #2
}
 8013124:	4618      	mov	r0, r3
 8013126:	3708      	adds	r7, #8
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	00544146 	.word	0x00544146
 8013130:	33544146 	.word	0x33544146

08013134 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b096      	sub	sp, #88	; 0x58
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	4613      	mov	r3, r2
 8013140:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	2200      	movs	r2, #0
 8013146:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013148:	68f8      	ldr	r0, [r7, #12]
 801314a:	f7ff ff59 	bl	8013000 <get_ldnumber>
 801314e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013152:	2b00      	cmp	r3, #0
 8013154:	da01      	bge.n	801315a <find_volume+0x26>
 8013156:	230b      	movs	r3, #11
 8013158:	e262      	b.n	8013620 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801315a:	4a9f      	ldr	r2, [pc, #636]	; (80133d8 <find_volume+0x2a4>)
 801315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013162:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	2b00      	cmp	r3, #0
 8013168:	d101      	bne.n	801316e <find_volume+0x3a>
 801316a:	230c      	movs	r3, #12
 801316c:	e258      	b.n	8013620 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013172:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013174:	79fb      	ldrb	r3, [r7, #7]
 8013176:	f023 0301 	bic.w	r3, r3, #1
 801317a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d01a      	beq.n	80131ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013186:	785b      	ldrb	r3, [r3, #1]
 8013188:	4618      	mov	r0, r3
 801318a:	f7fe fbd7 	bl	801193c <disk_status>
 801318e:	4603      	mov	r3, r0
 8013190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013198:	f003 0301 	and.w	r3, r3, #1
 801319c:	2b00      	cmp	r3, #0
 801319e:	d10c      	bne.n	80131ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80131a0:	79fb      	ldrb	r3, [r7, #7]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d007      	beq.n	80131b6 <find_volume+0x82>
 80131a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131aa:	f003 0304 	and.w	r3, r3, #4
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d001      	beq.n	80131b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80131b2:	230a      	movs	r3, #10
 80131b4:	e234      	b.n	8013620 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80131b6:	2300      	movs	r3, #0
 80131b8:	e232      	b.n	8013620 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	2200      	movs	r2, #0
 80131be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80131c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c2:	b2da      	uxtb	r2, r3
 80131c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	785b      	ldrb	r3, [r3, #1]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fe fbcf 	bl	8011970 <disk_initialize>
 80131d2:	4603      	mov	r3, r0
 80131d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80131d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131dc:	f003 0301 	and.w	r3, r3, #1
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80131e4:	2303      	movs	r3, #3
 80131e6:	e21b      	b.n	8013620 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80131e8:	79fb      	ldrb	r3, [r7, #7]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d007      	beq.n	80131fe <find_volume+0xca>
 80131ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131f2:	f003 0304 	and.w	r3, r3, #4
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d001      	beq.n	80131fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80131fa:	230a      	movs	r3, #10
 80131fc:	e210      	b.n	8013620 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80131fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013200:	7858      	ldrb	r0, [r3, #1]
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	330c      	adds	r3, #12
 8013206:	461a      	mov	r2, r3
 8013208:	2102      	movs	r1, #2
 801320a:	f7fe fc17 	bl	8011a3c <disk_ioctl>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <find_volume+0xe4>
 8013214:	2301      	movs	r3, #1
 8013216:	e203      	b.n	8013620 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321a:	899b      	ldrh	r3, [r3, #12]
 801321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013220:	d80d      	bhi.n	801323e <find_volume+0x10a>
 8013222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013224:	899b      	ldrh	r3, [r3, #12]
 8013226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801322a:	d308      	bcc.n	801323e <find_volume+0x10a>
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	899b      	ldrh	r3, [r3, #12]
 8013230:	461a      	mov	r2, r3
 8013232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013234:	899b      	ldrh	r3, [r3, #12]
 8013236:	3b01      	subs	r3, #1
 8013238:	4013      	ands	r3, r2
 801323a:	2b00      	cmp	r3, #0
 801323c:	d001      	beq.n	8013242 <find_volume+0x10e>
 801323e:	2301      	movs	r3, #1
 8013240:	e1ee      	b.n	8013620 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013246:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801324a:	f7ff ff1d 	bl	8013088 <check_fs>
 801324e:	4603      	mov	r3, r0
 8013250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013258:	2b02      	cmp	r3, #2
 801325a:	d149      	bne.n	80132f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801325c:	2300      	movs	r3, #0
 801325e:	643b      	str	r3, [r7, #64]	; 0x40
 8013260:	e01e      	b.n	80132a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013264:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326a:	011b      	lsls	r3, r3, #4
 801326c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013270:	4413      	add	r3, r2
 8013272:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013276:	3304      	adds	r3, #4
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <find_volume+0x158>
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	3308      	adds	r3, #8
 8013282:	4618      	mov	r0, r3
 8013284:	f7fe fc10 	bl	8011aa8 <ld_dword>
 8013288:	4602      	mov	r2, r0
 801328a:	e000      	b.n	801328e <find_volume+0x15a>
 801328c:	2200      	movs	r2, #0
 801328e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	3358      	adds	r3, #88	; 0x58
 8013294:	443b      	add	r3, r7
 8013296:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801329a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801329c:	3301      	adds	r3, #1
 801329e:	643b      	str	r3, [r7, #64]	; 0x40
 80132a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a2:	2b03      	cmp	r3, #3
 80132a4:	d9dd      	bls.n	8013262 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80132a6:	2300      	movs	r3, #0
 80132a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80132aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <find_volume+0x182>
 80132b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132b2:	3b01      	subs	r3, #1
 80132b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80132b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132b8:	009b      	lsls	r3, r3, #2
 80132ba:	3358      	adds	r3, #88	; 0x58
 80132bc:	443b      	add	r3, r7
 80132be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80132c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80132c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d005      	beq.n	80132d6 <find_volume+0x1a2>
 80132ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80132cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132ce:	f7ff fedb 	bl	8013088 <check_fs>
 80132d2:	4603      	mov	r3, r0
 80132d4:	e000      	b.n	80132d8 <find_volume+0x1a4>
 80132d6:	2303      	movs	r3, #3
 80132d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80132dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d905      	bls.n	80132f0 <find_volume+0x1bc>
 80132e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132e6:	3301      	adds	r3, #1
 80132e8:	643b      	str	r3, [r7, #64]	; 0x40
 80132ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ec:	2b03      	cmp	r3, #3
 80132ee:	d9e2      	bls.n	80132b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80132f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80132f4:	2b04      	cmp	r3, #4
 80132f6:	d101      	bne.n	80132fc <find_volume+0x1c8>
 80132f8:	2301      	movs	r3, #1
 80132fa:	e191      	b.n	8013620 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80132fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013300:	2b01      	cmp	r3, #1
 8013302:	d901      	bls.n	8013308 <find_volume+0x1d4>
 8013304:	230d      	movs	r3, #13
 8013306:	e18b      	b.n	8013620 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330a:	3334      	adds	r3, #52	; 0x34
 801330c:	330b      	adds	r3, #11
 801330e:	4618      	mov	r0, r3
 8013310:	f7fe fbb2 	bl	8011a78 <ld_word>
 8013314:	4603      	mov	r3, r0
 8013316:	461a      	mov	r2, r3
 8013318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331a:	899b      	ldrh	r3, [r3, #12]
 801331c:	429a      	cmp	r2, r3
 801331e:	d001      	beq.n	8013324 <find_volume+0x1f0>
 8013320:	230d      	movs	r3, #13
 8013322:	e17d      	b.n	8013620 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013326:	3334      	adds	r3, #52	; 0x34
 8013328:	3316      	adds	r3, #22
 801332a:	4618      	mov	r0, r3
 801332c:	f7fe fba4 	bl	8011a78 <ld_word>
 8013330:	4603      	mov	r3, r0
 8013332:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <find_volume+0x214>
 801333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333c:	3334      	adds	r3, #52	; 0x34
 801333e:	3324      	adds	r3, #36	; 0x24
 8013340:	4618      	mov	r0, r3
 8013342:	f7fe fbb1 	bl	8011aa8 <ld_dword>
 8013346:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801334a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801334c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013350:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013356:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801335a:	789b      	ldrb	r3, [r3, #2]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d005      	beq.n	801336c <find_volume+0x238>
 8013360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013362:	789b      	ldrb	r3, [r3, #2]
 8013364:	2b02      	cmp	r3, #2
 8013366:	d001      	beq.n	801336c <find_volume+0x238>
 8013368:	230d      	movs	r3, #13
 801336a:	e159      	b.n	8013620 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	789b      	ldrb	r3, [r3, #2]
 8013370:	461a      	mov	r2, r3
 8013372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013374:	fb02 f303 	mul.w	r3, r2, r3
 8013378:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013380:	b29a      	uxth	r2, r3
 8013382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013388:	895b      	ldrh	r3, [r3, #10]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d008      	beq.n	80133a0 <find_volume+0x26c>
 801338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013390:	895b      	ldrh	r3, [r3, #10]
 8013392:	461a      	mov	r2, r3
 8013394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013396:	895b      	ldrh	r3, [r3, #10]
 8013398:	3b01      	subs	r3, #1
 801339a:	4013      	ands	r3, r2
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <find_volume+0x270>
 80133a0:	230d      	movs	r3, #13
 80133a2:	e13d      	b.n	8013620 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80133a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a6:	3334      	adds	r3, #52	; 0x34
 80133a8:	3311      	adds	r3, #17
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fe fb64 	bl	8011a78 <ld_word>
 80133b0:	4603      	mov	r3, r0
 80133b2:	461a      	mov	r2, r3
 80133b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80133b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ba:	891b      	ldrh	r3, [r3, #8]
 80133bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133be:	8992      	ldrh	r2, [r2, #12]
 80133c0:	0952      	lsrs	r2, r2, #5
 80133c2:	b292      	uxth	r2, r2
 80133c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80133c8:	fb01 f202 	mul.w	r2, r1, r2
 80133cc:	1a9b      	subs	r3, r3, r2
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <find_volume+0x2a8>
 80133d4:	230d      	movs	r3, #13
 80133d6:	e123      	b.n	8013620 <find_volume+0x4ec>
 80133d8:	20005e10 	.word	0x20005e10

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80133dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133de:	3334      	adds	r3, #52	; 0x34
 80133e0:	3313      	adds	r3, #19
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fe fb48 	bl	8011a78 <ld_word>
 80133e8:	4603      	mov	r3, r0
 80133ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80133ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d106      	bne.n	8013400 <find_volume+0x2cc>
 80133f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f4:	3334      	adds	r3, #52	; 0x34
 80133f6:	3320      	adds	r3, #32
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fe fb55 	bl	8011aa8 <ld_dword>
 80133fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013402:	3334      	adds	r3, #52	; 0x34
 8013404:	330e      	adds	r3, #14
 8013406:	4618      	mov	r0, r3
 8013408:	f7fe fb36 	bl	8011a78 <ld_word>
 801340c:	4603      	mov	r3, r0
 801340e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013410:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013412:	2b00      	cmp	r3, #0
 8013414:	d101      	bne.n	801341a <find_volume+0x2e6>
 8013416:	230d      	movs	r3, #13
 8013418:	e102      	b.n	8013620 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801341a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801341c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801341e:	4413      	add	r3, r2
 8013420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013422:	8911      	ldrh	r1, [r2, #8]
 8013424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013426:	8992      	ldrh	r2, [r2, #12]
 8013428:	0952      	lsrs	r2, r2, #5
 801342a:	b292      	uxth	r2, r2
 801342c:	fbb1 f2f2 	udiv	r2, r1, r2
 8013430:	b292      	uxth	r2, r2
 8013432:	4413      	add	r3, r2
 8013434:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	429a      	cmp	r2, r3
 801343c:	d201      	bcs.n	8013442 <find_volume+0x30e>
 801343e:	230d      	movs	r3, #13
 8013440:	e0ee      	b.n	8013620 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801344a:	8952      	ldrh	r2, [r2, #10]
 801344c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013450:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <find_volume+0x328>
 8013458:	230d      	movs	r3, #13
 801345a:	e0e1      	b.n	8013620 <find_volume+0x4ec>
		fmt = FS_FAT32;
 801345c:	2303      	movs	r3, #3
 801345e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013464:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013468:	4293      	cmp	r3, r2
 801346a:	d802      	bhi.n	8013472 <find_volume+0x33e>
 801346c:	2302      	movs	r3, #2
 801346e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013474:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013478:	4293      	cmp	r3, r2
 801347a:	d802      	bhi.n	8013482 <find_volume+0x34e>
 801347c:	2301      	movs	r3, #1
 801347e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	1c9a      	adds	r2, r3, #2
 8013486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013488:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801348c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801348e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013494:	441a      	add	r2, r3
 8013496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013498:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801349a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349e:	441a      	add	r2, r3
 80134a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80134a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134a8:	2b03      	cmp	r3, #3
 80134aa:	d11e      	bne.n	80134ea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80134ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ae:	3334      	adds	r3, #52	; 0x34
 80134b0:	332a      	adds	r3, #42	; 0x2a
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fe fae0 	bl	8011a78 <ld_word>
 80134b8:	4603      	mov	r3, r0
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d001      	beq.n	80134c2 <find_volume+0x38e>
 80134be:	230d      	movs	r3, #13
 80134c0:	e0ae      	b.n	8013620 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80134c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c4:	891b      	ldrh	r3, [r3, #8]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d001      	beq.n	80134ce <find_volume+0x39a>
 80134ca:	230d      	movs	r3, #13
 80134cc:	e0a8      	b.n	8013620 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80134ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134d0:	3334      	adds	r3, #52	; 0x34
 80134d2:	332c      	adds	r3, #44	; 0x2c
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fe fae7 	bl	8011aa8 <ld_dword>
 80134da:	4602      	mov	r2, r0
 80134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134de:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80134e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e2:	699b      	ldr	r3, [r3, #24]
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	647b      	str	r3, [r7, #68]	; 0x44
 80134e8:	e01f      	b.n	801352a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80134ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ec:	891b      	ldrh	r3, [r3, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d101      	bne.n	80134f6 <find_volume+0x3c2>
 80134f2:	230d      	movs	r3, #13
 80134f4:	e094      	b.n	8013620 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80134f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134fc:	441a      	add	r2, r3
 80134fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013500:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013506:	2b02      	cmp	r3, #2
 8013508:	d103      	bne.n	8013512 <find_volume+0x3de>
 801350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801350c:	699b      	ldr	r3, [r3, #24]
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	e00a      	b.n	8013528 <find_volume+0x3f4>
 8013512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013514:	699a      	ldr	r2, [r3, #24]
 8013516:	4613      	mov	r3, r2
 8013518:	005b      	lsls	r3, r3, #1
 801351a:	4413      	add	r3, r2
 801351c:	085a      	lsrs	r2, r3, #1
 801351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013520:	699b      	ldr	r3, [r3, #24]
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013528:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352c:	69da      	ldr	r2, [r3, #28]
 801352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013530:	899b      	ldrh	r3, [r3, #12]
 8013532:	4619      	mov	r1, r3
 8013534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013536:	440b      	add	r3, r1
 8013538:	3b01      	subs	r3, #1
 801353a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801353c:	8989      	ldrh	r1, [r1, #12]
 801353e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013542:	429a      	cmp	r2, r3
 8013544:	d201      	bcs.n	801354a <find_volume+0x416>
 8013546:	230d      	movs	r3, #13
 8013548:	e06a      	b.n	8013620 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801354c:	f04f 32ff 	mov.w	r2, #4294967295
 8013550:	615a      	str	r2, [r3, #20]
 8013552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013554:	695a      	ldr	r2, [r3, #20]
 8013556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013558:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355c:	2280      	movs	r2, #128	; 0x80
 801355e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013564:	2b03      	cmp	r3, #3
 8013566:	d149      	bne.n	80135fc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801356a:	3334      	adds	r3, #52	; 0x34
 801356c:	3330      	adds	r3, #48	; 0x30
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe fa82 	bl	8011a78 <ld_word>
 8013574:	4603      	mov	r3, r0
 8013576:	2b01      	cmp	r3, #1
 8013578:	d140      	bne.n	80135fc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801357c:	3301      	adds	r3, #1
 801357e:	4619      	mov	r1, r3
 8013580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013582:	f7fe fd29 	bl	8011fd8 <move_window>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d137      	bne.n	80135fc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358e:	2200      	movs	r2, #0
 8013590:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013594:	3334      	adds	r3, #52	; 0x34
 8013596:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801359a:	4618      	mov	r0, r3
 801359c:	f7fe fa6c 	bl	8011a78 <ld_word>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d127      	bne.n	80135fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	3334      	adds	r3, #52	; 0x34
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fe fa79 	bl	8011aa8 <ld_dword>
 80135b6:	4603      	mov	r3, r0
 80135b8:	4a1b      	ldr	r2, [pc, #108]	; (8013628 <find_volume+0x4f4>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d11e      	bne.n	80135fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80135be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c0:	3334      	adds	r3, #52	; 0x34
 80135c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7fe fa6e 	bl	8011aa8 <ld_dword>
 80135cc:	4603      	mov	r3, r0
 80135ce:	4a17      	ldr	r2, [pc, #92]	; (801362c <find_volume+0x4f8>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d113      	bne.n	80135fc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80135d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d6:	3334      	adds	r3, #52	; 0x34
 80135d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe fa63 	bl	8011aa8 <ld_dword>
 80135e2:	4602      	mov	r2, r0
 80135e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80135e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ea:	3334      	adds	r3, #52	; 0x34
 80135ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7fe fa59 	bl	8011aa8 <ld_dword>
 80135f6:	4602      	mov	r2, r0
 80135f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80135fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013602:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013604:	4b0a      	ldr	r3, [pc, #40]	; (8013630 <find_volume+0x4fc>)
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	3301      	adds	r3, #1
 801360a:	b29a      	uxth	r2, r3
 801360c:	4b08      	ldr	r3, [pc, #32]	; (8013630 <find_volume+0x4fc>)
 801360e:	801a      	strh	r2, [r3, #0]
 8013610:	4b07      	ldr	r3, [pc, #28]	; (8013630 <find_volume+0x4fc>)
 8013612:	881a      	ldrh	r2, [r3, #0]
 8013614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013616:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801361a:	f7fe fc75 	bl	8011f08 <clear_lock>
#endif
	return FR_OK;
 801361e:	2300      	movs	r3, #0
}
 8013620:	4618      	mov	r0, r3
 8013622:	3758      	adds	r7, #88	; 0x58
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	41615252 	.word	0x41615252
 801362c:	61417272 	.word	0x61417272
 8013630:	20005e14 	.word	0x20005e14

08013634 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801363e:	2309      	movs	r3, #9
 8013640:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d01c      	beq.n	8013682 <validate+0x4e>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d018      	beq.n	8013682 <validate+0x4e>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d013      	beq.n	8013682 <validate+0x4e>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	889a      	ldrh	r2, [r3, #4]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	88db      	ldrh	r3, [r3, #6]
 8013664:	429a      	cmp	r2, r3
 8013666:	d10c      	bne.n	8013682 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	785b      	ldrb	r3, [r3, #1]
 801366e:	4618      	mov	r0, r3
 8013670:	f7fe f964 	bl	801193c <disk_status>
 8013674:	4603      	mov	r3, r0
 8013676:	f003 0301 	and.w	r3, r3, #1
 801367a:	2b00      	cmp	r3, #0
 801367c:	d101      	bne.n	8013682 <validate+0x4e>
			res = FR_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013682:	7bfb      	ldrb	r3, [r7, #15]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <validate+0x5a>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	e000      	b.n	8013690 <validate+0x5c>
 801368e:	2300      	movs	r3, #0
 8013690:	683a      	ldr	r2, [r7, #0]
 8013692:	6013      	str	r3, [r2, #0]
	return res;
 8013694:	7bfb      	ldrb	r3, [r7, #15]
}
 8013696:	4618      	mov	r0, r3
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
	...

080136a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	4613      	mov	r3, r2
 80136ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80136b2:	f107 0310 	add.w	r3, r7, #16
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff fca2 	bl	8013000 <get_ldnumber>
 80136bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80136be:	69fb      	ldr	r3, [r7, #28]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	da01      	bge.n	80136c8 <f_mount+0x28>
 80136c4:	230b      	movs	r3, #11
 80136c6:	e02b      	b.n	8013720 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80136c8:	4a17      	ldr	r2, [pc, #92]	; (8013728 <f_mount+0x88>)
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d005      	beq.n	80136e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80136d8:	69b8      	ldr	r0, [r7, #24]
 80136da:	f7fe fc15 	bl	8011f08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	2200      	movs	r2, #0
 80136e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d002      	beq.n	80136f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2200      	movs	r2, #0
 80136ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80136f0:	68fa      	ldr	r2, [r7, #12]
 80136f2:	490d      	ldr	r1, [pc, #52]	; (8013728 <f_mount+0x88>)
 80136f4:	69fb      	ldr	r3, [r7, #28]
 80136f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d002      	beq.n	8013706 <f_mount+0x66>
 8013700:	79fb      	ldrb	r3, [r7, #7]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d001      	beq.n	801370a <f_mount+0x6a>
 8013706:	2300      	movs	r3, #0
 8013708:	e00a      	b.n	8013720 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801370a:	f107 010c 	add.w	r1, r7, #12
 801370e:	f107 0308 	add.w	r3, r7, #8
 8013712:	2200      	movs	r2, #0
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff fd0d 	bl	8013134 <find_volume>
 801371a:	4603      	mov	r3, r0
 801371c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013720:	4618      	mov	r0, r3
 8013722:	3720      	adds	r7, #32
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	20005e10 	.word	0x20005e10

0801372c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b098      	sub	sp, #96	; 0x60
 8013730:	af00      	add	r7, sp, #0
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	4613      	mov	r3, r2
 8013738:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d101      	bne.n	8013744 <f_open+0x18>
 8013740:	2309      	movs	r3, #9
 8013742:	e1bb      	b.n	8013abc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013744:	79fb      	ldrb	r3, [r7, #7]
 8013746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801374a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801374c:	79fa      	ldrb	r2, [r7, #7]
 801374e:	f107 0110 	add.w	r1, r7, #16
 8013752:	f107 0308 	add.w	r3, r7, #8
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff fcec 	bl	8013134 <find_volume>
 801375c:	4603      	mov	r3, r0
 801375e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013766:	2b00      	cmp	r3, #0
 8013768:	f040 819f 	bne.w	8013aaa <f_open+0x37e>
		dj.obj.fs = fs;
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013770:	68ba      	ldr	r2, [r7, #8]
 8013772:	f107 0314 	add.w	r3, r7, #20
 8013776:	4611      	mov	r1, r2
 8013778:	4618      	mov	r0, r3
 801377a:	f7ff fbcb 	bl	8012f14 <follow_path>
 801377e:	4603      	mov	r3, r0
 8013780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013788:	2b00      	cmp	r3, #0
 801378a:	d11a      	bne.n	80137c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801378c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013790:	b25b      	sxtb	r3, r3
 8013792:	2b00      	cmp	r3, #0
 8013794:	da03      	bge.n	801379e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013796:	2306      	movs	r3, #6
 8013798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801379c:	e011      	b.n	80137c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801379e:	79fb      	ldrb	r3, [r7, #7]
 80137a0:	f023 0301 	bic.w	r3, r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	bf14      	ite	ne
 80137a8:	2301      	movne	r3, #1
 80137aa:	2300      	moveq	r3, #0
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	461a      	mov	r2, r3
 80137b0:	f107 0314 	add.w	r3, r7, #20
 80137b4:	4611      	mov	r1, r2
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fe fa5e 	bl	8011c78 <chk_lock>
 80137bc:	4603      	mov	r3, r0
 80137be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80137c2:	79fb      	ldrb	r3, [r7, #7]
 80137c4:	f003 031c 	and.w	r3, r3, #28
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d07f      	beq.n	80138cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80137cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d017      	beq.n	8013804 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80137d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137d8:	2b04      	cmp	r3, #4
 80137da:	d10e      	bne.n	80137fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80137dc:	f7fe faa8 	bl	8011d30 <enq_lock>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d006      	beq.n	80137f4 <f_open+0xc8>
 80137e6:	f107 0314 	add.w	r3, r7, #20
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff fa6d 	bl	8012cca <dir_register>
 80137f0:	4603      	mov	r3, r0
 80137f2:	e000      	b.n	80137f6 <f_open+0xca>
 80137f4:	2312      	movs	r3, #18
 80137f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80137fa:	79fb      	ldrb	r3, [r7, #7]
 80137fc:	f043 0308 	orr.w	r3, r3, #8
 8013800:	71fb      	strb	r3, [r7, #7]
 8013802:	e010      	b.n	8013826 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013804:	7ebb      	ldrb	r3, [r7, #26]
 8013806:	f003 0311 	and.w	r3, r3, #17
 801380a:	2b00      	cmp	r3, #0
 801380c:	d003      	beq.n	8013816 <f_open+0xea>
					res = FR_DENIED;
 801380e:	2307      	movs	r3, #7
 8013810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013814:	e007      	b.n	8013826 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013816:	79fb      	ldrb	r3, [r7, #7]
 8013818:	f003 0304 	and.w	r3, r3, #4
 801381c:	2b00      	cmp	r3, #0
 801381e:	d002      	beq.n	8013826 <f_open+0xfa>
 8013820:	2308      	movs	r3, #8
 8013822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801382a:	2b00      	cmp	r3, #0
 801382c:	d168      	bne.n	8013900 <f_open+0x1d4>
 801382e:	79fb      	ldrb	r3, [r7, #7]
 8013830:	f003 0308 	and.w	r3, r3, #8
 8013834:	2b00      	cmp	r3, #0
 8013836:	d063      	beq.n	8013900 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013838:	f7fd ff14 	bl	8011664 <get_fattime>
 801383c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013840:	330e      	adds	r3, #14
 8013842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013844:	4618      	mov	r0, r3
 8013846:	f7fe f96d 	bl	8011b24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384c:	3316      	adds	r3, #22
 801384e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013850:	4618      	mov	r0, r3
 8013852:	f7fe f967 	bl	8011b24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013858:	330b      	adds	r3, #11
 801385a:	2220      	movs	r2, #32
 801385c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013862:	4611      	mov	r1, r2
 8013864:	4618      	mov	r0, r3
 8013866:	f7ff f93f 	bl	8012ae8 <ld_clust>
 801386a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013870:	2200      	movs	r2, #0
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff f957 	bl	8012b26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387a:	331c      	adds	r3, #28
 801387c:	2100      	movs	r1, #0
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe f950 	bl	8011b24 <st_dword>
					fs->wflag = 1;
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	2201      	movs	r2, #1
 8013888:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801388c:	2b00      	cmp	r3, #0
 801388e:	d037      	beq.n	8013900 <f_open+0x1d4>
						dw = fs->winsect;
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013894:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013896:	f107 0314 	add.w	r3, r7, #20
 801389a:	2200      	movs	r2, #0
 801389c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fe fe47 	bl	8012532 <remove_chain>
 80138a4:	4603      	mov	r3, r0
 80138a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80138aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d126      	bne.n	8013900 <f_open+0x1d4>
							res = move_window(fs, dw);
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7fe fb8e 	bl	8011fd8 <move_window>
 80138bc:	4603      	mov	r3, r0
 80138be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138c6:	3a01      	subs	r2, #1
 80138c8:	611a      	str	r2, [r3, #16]
 80138ca:	e019      	b.n	8013900 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80138cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d115      	bne.n	8013900 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80138d4:	7ebb      	ldrb	r3, [r7, #26]
 80138d6:	f003 0310 	and.w	r3, r3, #16
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d003      	beq.n	80138e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80138de:	2304      	movs	r3, #4
 80138e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80138e4:	e00c      	b.n	8013900 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80138e6:	79fb      	ldrb	r3, [r7, #7]
 80138e8:	f003 0302 	and.w	r3, r3, #2
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d007      	beq.n	8013900 <f_open+0x1d4>
 80138f0:	7ebb      	ldrb	r3, [r7, #26]
 80138f2:	f003 0301 	and.w	r3, r3, #1
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d002      	beq.n	8013900 <f_open+0x1d4>
						res = FR_DENIED;
 80138fa:	2307      	movs	r3, #7
 80138fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013904:	2b00      	cmp	r3, #0
 8013906:	d128      	bne.n	801395a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013908:	79fb      	ldrb	r3, [r7, #7]
 801390a:	f003 0308 	and.w	r3, r3, #8
 801390e:	2b00      	cmp	r3, #0
 8013910:	d003      	beq.n	801391a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013918:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013928:	79fb      	ldrb	r3, [r7, #7]
 801392a:	f023 0301 	bic.w	r3, r3, #1
 801392e:	2b00      	cmp	r3, #0
 8013930:	bf14      	ite	ne
 8013932:	2301      	movne	r3, #1
 8013934:	2300      	moveq	r3, #0
 8013936:	b2db      	uxtb	r3, r3
 8013938:	461a      	mov	r2, r3
 801393a:	f107 0314 	add.w	r3, r7, #20
 801393e:	4611      	mov	r1, r2
 8013940:	4618      	mov	r0, r3
 8013942:	f7fe fa17 	bl	8011d74 <inc_lock>
 8013946:	4602      	mov	r2, r0
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	691b      	ldr	r3, [r3, #16]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d102      	bne.n	801395a <f_open+0x22e>
 8013954:	2302      	movs	r3, #2
 8013956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801395a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801395e:	2b00      	cmp	r3, #0
 8013960:	f040 80a3 	bne.w	8013aaa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013968:	4611      	mov	r1, r2
 801396a:	4618      	mov	r0, r3
 801396c:	f7ff f8bc 	bl	8012ae8 <ld_clust>
 8013970:	4602      	mov	r2, r0
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013978:	331c      	adds	r3, #28
 801397a:	4618      	mov	r0, r3
 801397c:	f7fe f894 	bl	8011aa8 <ld_dword>
 8013980:	4602      	mov	r2, r0
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2200      	movs	r2, #0
 801398a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	88da      	ldrh	r2, [r3, #6]
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	79fa      	ldrb	r2, [r7, #7]
 801399e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2200      	movs	r2, #0
 80139a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2200      	movs	r2, #0
 80139aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2200      	movs	r2, #0
 80139b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	3330      	adds	r3, #48	; 0x30
 80139b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80139ba:	2100      	movs	r1, #0
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe f8fe 	bl	8011bbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80139c2:	79fb      	ldrb	r3, [r7, #7]
 80139c4:	f003 0320 	and.w	r3, r3, #32
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d06e      	beq.n	8013aaa <f_open+0x37e>
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d06a      	beq.n	8013aaa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	68da      	ldr	r2, [r3, #12]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	895b      	ldrh	r3, [r3, #10]
 80139e0:	461a      	mov	r2, r3
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	899b      	ldrh	r3, [r3, #12]
 80139e6:	fb02 f303 	mul.w	r3, r2, r3
 80139ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	689b      	ldr	r3, [r3, #8]
 80139f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	657b      	str	r3, [r7, #84]	; 0x54
 80139f8:	e016      	b.n	8013a28 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fe fba7 	bl	8012152 <get_fat>
 8013a04:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d802      	bhi.n	8013a12 <f_open+0x2e6>
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a18:	d102      	bne.n	8013a20 <f_open+0x2f4>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	657b      	str	r3, [r7, #84]	; 0x54
 8013a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d103      	bne.n	8013a38 <f_open+0x30c>
 8013a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d8e0      	bhi.n	80139fa <f_open+0x2ce>
				}
				fp->clust = clst;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013a3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013a3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d131      	bne.n	8013aaa <f_open+0x37e>
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	899b      	ldrh	r3, [r3, #12]
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a52:	fb01 f202 	mul.w	r2, r1, r2
 8013a56:	1a9b      	subs	r3, r3, r2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d026      	beq.n	8013aaa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe fb57 	bl	8012114 <clust2sect>
 8013a66:	6478      	str	r0, [r7, #68]	; 0x44
 8013a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d103      	bne.n	8013a76 <f_open+0x34a>
						res = FR_INT_ERR;
 8013a6e:	2302      	movs	r3, #2
 8013a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a74:	e019      	b.n	8013aaa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a84:	441a      	add	r2, r3
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	7858      	ldrb	r0, [r3, #1]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	6a1a      	ldr	r2, [r3, #32]
 8013a98:	2301      	movs	r3, #1
 8013a9a:	f7fd ff8f 	bl	80119bc <disk_read>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <f_open+0x37e>
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d002      	beq.n	8013ab8 <f_open+0x38c>
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3760      	adds	r7, #96	; 0x60
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b08e      	sub	sp, #56	; 0x38
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	607a      	str	r2, [r7, #4]
 8013ad0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f107 0214 	add.w	r2, r7, #20
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7ff fda5 	bl	8013634 <validate>
 8013aea:	4603      	mov	r3, r0
 8013aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d107      	bne.n	8013b08 <f_read+0x44>
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	7d5b      	ldrb	r3, [r3, #21]
 8013afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d002      	beq.n	8013b0e <f_read+0x4a>
 8013b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b0c:	e135      	b.n	8013d7a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	7d1b      	ldrb	r3, [r3, #20]
 8013b12:	f003 0301 	and.w	r3, r3, #1
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d101      	bne.n	8013b1e <f_read+0x5a>
 8013b1a:	2307      	movs	r3, #7
 8013b1c:	e12d      	b.n	8013d7a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	68da      	ldr	r2, [r3, #12]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	699b      	ldr	r3, [r3, #24]
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	6a3b      	ldr	r3, [r7, #32]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	f240 811e 	bls.w	8013d70 <f_read+0x2ac>
 8013b34:	6a3b      	ldr	r3, [r7, #32]
 8013b36:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013b38:	e11a      	b.n	8013d70 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	697a      	ldr	r2, [r7, #20]
 8013b40:	8992      	ldrh	r2, [r2, #12]
 8013b42:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b46:	fb01 f202 	mul.w	r2, r1, r2
 8013b4a:	1a9b      	subs	r3, r3, r2
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f040 80d5 	bne.w	8013cfc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	699b      	ldr	r3, [r3, #24]
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	8992      	ldrh	r2, [r2, #12]
 8013b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b5e:	697a      	ldr	r2, [r7, #20]
 8013b60:	8952      	ldrh	r2, [r2, #10]
 8013b62:	3a01      	subs	r2, #1
 8013b64:	4013      	ands	r3, r2
 8013b66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d12f      	bne.n	8013bce <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	699b      	ldr	r3, [r3, #24]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d103      	bne.n	8013b7e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	689b      	ldr	r3, [r3, #8]
 8013b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8013b7c:	e013      	b.n	8013ba6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d007      	beq.n	8013b96 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f7fe fdcd 	bl	801272c <clmt_clust>
 8013b92:	6338      	str	r0, [r7, #48]	; 0x30
 8013b94:	e007      	b.n	8013ba6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013b96:	68fa      	ldr	r2, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	69db      	ldr	r3, [r3, #28]
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	f7fe fad7 	bl	8012152 <get_fat>
 8013ba4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d804      	bhi.n	8013bb6 <f_read+0xf2>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2202      	movs	r2, #2
 8013bb0:	755a      	strb	r2, [r3, #21]
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	e0e1      	b.n	8013d7a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bbc:	d104      	bne.n	8013bc8 <f_read+0x104>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	755a      	strb	r2, [r3, #21]
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e0d8      	b.n	8013d7a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bcc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013bce:	697a      	ldr	r2, [r7, #20]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	69db      	ldr	r3, [r3, #28]
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	4610      	mov	r0, r2
 8013bd8:	f7fe fa9c 	bl	8012114 <clust2sect>
 8013bdc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d104      	bne.n	8013bee <f_read+0x12a>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2202      	movs	r2, #2
 8013be8:	755a      	strb	r2, [r3, #21]
 8013bea:	2302      	movs	r3, #2
 8013bec:	e0c5      	b.n	8013d7a <f_read+0x2b6>
			sect += csect;
 8013bee:	69ba      	ldr	r2, [r7, #24]
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	899b      	ldrh	r3, [r3, #12]
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d041      	beq.n	8013c8e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c0a:	69fa      	ldr	r2, [r7, #28]
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	4413      	add	r3, r2
 8013c10:	697a      	ldr	r2, [r7, #20]
 8013c12:	8952      	ldrh	r2, [r2, #10]
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d905      	bls.n	8013c24 <f_read+0x160>
					cc = fs->csize - csect;
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	895b      	ldrh	r3, [r3, #10]
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	69fb      	ldr	r3, [r7, #28]
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	7858      	ldrb	r0, [r3, #1]
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	69ba      	ldr	r2, [r7, #24]
 8013c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c2e:	f7fd fec5 	bl	80119bc <disk_read>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d004      	beq.n	8013c42 <f_read+0x17e>
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2201      	movs	r2, #1
 8013c3c:	755a      	strb	r2, [r3, #21]
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e09b      	b.n	8013d7a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	7d1b      	ldrb	r3, [r3, #20]
 8013c46:	b25b      	sxtb	r3, r3
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	da18      	bge.n	8013c7e <f_read+0x1ba>
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	6a1a      	ldr	r2, [r3, #32]
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d911      	bls.n	8013c7e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6a1a      	ldr	r2, [r3, #32]
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	1ad3      	subs	r3, r2, r3
 8013c62:	697a      	ldr	r2, [r7, #20]
 8013c64:	8992      	ldrh	r2, [r2, #12]
 8013c66:	fb02 f303 	mul.w	r3, r2, r3
 8013c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c6c:	18d0      	adds	r0, r2, r3
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	899b      	ldrh	r3, [r3, #12]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	f7fd ff7f 	bl	8011b7c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	899b      	ldrh	r3, [r3, #12]
 8013c82:	461a      	mov	r2, r3
 8013c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c86:	fb02 f303 	mul.w	r3, r2, r3
 8013c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013c8c:	e05c      	b.n	8013d48 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	6a1b      	ldr	r3, [r3, #32]
 8013c92:	69ba      	ldr	r2, [r7, #24]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d02e      	beq.n	8013cf6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	7d1b      	ldrb	r3, [r3, #20]
 8013c9c:	b25b      	sxtb	r3, r3
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	da18      	bge.n	8013cd4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	7858      	ldrb	r0, [r3, #1]
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6a1a      	ldr	r2, [r3, #32]
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	f7fd fea3 	bl	80119fc <disk_write>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d004      	beq.n	8013cc6 <f_read+0x202>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	755a      	strb	r2, [r3, #21]
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e059      	b.n	8013d7a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	7d1b      	ldrb	r3, [r3, #20]
 8013cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cce:	b2da      	uxtb	r2, r3
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	7858      	ldrb	r0, [r3, #1]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cde:	2301      	movs	r3, #1
 8013ce0:	69ba      	ldr	r2, [r7, #24]
 8013ce2:	f7fd fe6b 	bl	80119bc <disk_read>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d004      	beq.n	8013cf6 <f_read+0x232>
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2201      	movs	r2, #1
 8013cf0:	755a      	strb	r2, [r3, #21]
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	e041      	b.n	8013d7a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	69ba      	ldr	r2, [r7, #24]
 8013cfa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	899b      	ldrh	r3, [r3, #12]
 8013d00:	4618      	mov	r0, r3
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	699b      	ldr	r3, [r3, #24]
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	8992      	ldrh	r2, [r2, #12]
 8013d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d0e:	fb01 f202 	mul.w	r2, r1, r2
 8013d12:	1a9b      	subs	r3, r3, r2
 8013d14:	1ac3      	subs	r3, r0, r3
 8013d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d901      	bls.n	8013d24 <f_read+0x260>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	699b      	ldr	r3, [r3, #24]
 8013d2e:	697a      	ldr	r2, [r7, #20]
 8013d30:	8992      	ldrh	r2, [r2, #12]
 8013d32:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d36:	fb00 f202 	mul.w	r2, r0, r2
 8013d3a:	1a9b      	subs	r3, r3, r2
 8013d3c:	440b      	add	r3, r1
 8013d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d40:	4619      	mov	r1, r3
 8013d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d44:	f7fd ff1a 	bl	8011b7c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4c:	4413      	add	r3, r2
 8013d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	699a      	ldr	r2, [r3, #24]
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	441a      	add	r2, r3
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	619a      	str	r2, [r3, #24]
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d62:	441a      	add	r2, r3
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	601a      	str	r2, [r3, #0]
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f47f aee1 	bne.w	8013b3a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013d78:	2300      	movs	r3, #0
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3738      	adds	r7, #56	; 0x38
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}

08013d82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013d82:	b580      	push	{r7, lr}
 8013d84:	b08c      	sub	sp, #48	; 0x30
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	60f8      	str	r0, [r7, #12]
 8013d8a:	60b9      	str	r1, [r7, #8]
 8013d8c:	607a      	str	r2, [r7, #4]
 8013d8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	2200      	movs	r2, #0
 8013d98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f107 0210 	add.w	r2, r7, #16
 8013da0:	4611      	mov	r1, r2
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7ff fc46 	bl	8013634 <validate>
 8013da8:	4603      	mov	r3, r0
 8013daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d107      	bne.n	8013dc6 <f_write+0x44>
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	7d5b      	ldrb	r3, [r3, #21]
 8013dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d002      	beq.n	8013dcc <f_write+0x4a>
 8013dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dca:	e16a      	b.n	80140a2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	7d1b      	ldrb	r3, [r3, #20]
 8013dd0:	f003 0302 	and.w	r3, r3, #2
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <f_write+0x5a>
 8013dd8:	2307      	movs	r3, #7
 8013dda:	e162      	b.n	80140a2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	699a      	ldr	r2, [r3, #24]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	441a      	add	r2, r3
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	f080 814c 	bcs.w	8014086 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	699b      	ldr	r3, [r3, #24]
 8013df2:	43db      	mvns	r3, r3
 8013df4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013df6:	e146      	b.n	8014086 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	699b      	ldr	r3, [r3, #24]
 8013dfc:	693a      	ldr	r2, [r7, #16]
 8013dfe:	8992      	ldrh	r2, [r2, #12]
 8013e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e04:	fb01 f202 	mul.w	r2, r1, r2
 8013e08:	1a9b      	subs	r3, r3, r2
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	f040 80f1 	bne.w	8013ff2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	699b      	ldr	r3, [r3, #24]
 8013e14:	693a      	ldr	r2, [r7, #16]
 8013e16:	8992      	ldrh	r2, [r2, #12]
 8013e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e1c:	693a      	ldr	r2, [r7, #16]
 8013e1e:	8952      	ldrh	r2, [r2, #10]
 8013e20:	3a01      	subs	r2, #1
 8013e22:	4013      	ands	r3, r2
 8013e24:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d143      	bne.n	8013eb4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	699b      	ldr	r3, [r3, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d10c      	bne.n	8013e4e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d11a      	bne.n	8013e76 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2100      	movs	r1, #0
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7fe fbd9 	bl	80125fc <create_chain>
 8013e4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e4c:	e013      	b.n	8013e76 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d007      	beq.n	8013e66 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	699b      	ldr	r3, [r3, #24]
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	68f8      	ldr	r0, [r7, #12]
 8013e5e:	f7fe fc65 	bl	801272c <clmt_clust>
 8013e62:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e64:	e007      	b.n	8013e76 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013e66:	68fa      	ldr	r2, [r7, #12]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	69db      	ldr	r3, [r3, #28]
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4610      	mov	r0, r2
 8013e70:	f7fe fbc4 	bl	80125fc <create_chain>
 8013e74:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 8109 	beq.w	8014090 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d104      	bne.n	8013e8e <f_write+0x10c>
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	2202      	movs	r2, #2
 8013e88:	755a      	strb	r2, [r3, #21]
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	e109      	b.n	80140a2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e94:	d104      	bne.n	8013ea0 <f_write+0x11e>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2201      	movs	r2, #1
 8013e9a:	755a      	strb	r2, [r3, #21]
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e100      	b.n	80140a2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ea4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	689b      	ldr	r3, [r3, #8]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d102      	bne.n	8013eb4 <f_write+0x132>
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eb2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	b25b      	sxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	da18      	bge.n	8013ef0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	7858      	ldrb	r0, [r3, #1]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6a1a      	ldr	r2, [r3, #32]
 8013ecc:	2301      	movs	r3, #1
 8013ece:	f7fd fd95 	bl	80119fc <disk_write>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d004      	beq.n	8013ee2 <f_write+0x160>
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2201      	movs	r2, #1
 8013edc:	755a      	strb	r2, [r3, #21]
 8013ede:	2301      	movs	r3, #1
 8013ee0:	e0df      	b.n	80140a2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	7d1b      	ldrb	r3, [r3, #20]
 8013ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eea:	b2da      	uxtb	r2, r3
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ef0:	693a      	ldr	r2, [r7, #16]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	69db      	ldr	r3, [r3, #28]
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	4610      	mov	r0, r2
 8013efa:	f7fe f90b 	bl	8012114 <clust2sect>
 8013efe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d104      	bne.n	8013f10 <f_write+0x18e>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2202      	movs	r2, #2
 8013f0a:	755a      	strb	r2, [r3, #21]
 8013f0c:	2302      	movs	r3, #2
 8013f0e:	e0c8      	b.n	80140a2 <f_write+0x320>
			sect += csect;
 8013f10:	697a      	ldr	r2, [r7, #20]
 8013f12:	69bb      	ldr	r3, [r7, #24]
 8013f14:	4413      	add	r3, r2
 8013f16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	899b      	ldrh	r3, [r3, #12]
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013f26:	6a3b      	ldr	r3, [r7, #32]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d043      	beq.n	8013fb4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013f2c:	69ba      	ldr	r2, [r7, #24]
 8013f2e:	6a3b      	ldr	r3, [r7, #32]
 8013f30:	4413      	add	r3, r2
 8013f32:	693a      	ldr	r2, [r7, #16]
 8013f34:	8952      	ldrh	r2, [r2, #10]
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d905      	bls.n	8013f46 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	895b      	ldrh	r3, [r3, #10]
 8013f3e:	461a      	mov	r2, r3
 8013f40:	69bb      	ldr	r3, [r7, #24]
 8013f42:	1ad3      	subs	r3, r2, r3
 8013f44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	7858      	ldrb	r0, [r3, #1]
 8013f4a:	6a3b      	ldr	r3, [r7, #32]
 8013f4c:	697a      	ldr	r2, [r7, #20]
 8013f4e:	69f9      	ldr	r1, [r7, #28]
 8013f50:	f7fd fd54 	bl	80119fc <disk_write>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d004      	beq.n	8013f64 <f_write+0x1e2>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	755a      	strb	r2, [r3, #21]
 8013f60:	2301      	movs	r3, #1
 8013f62:	e09e      	b.n	80140a2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	6a1a      	ldr	r2, [r3, #32]
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	1ad3      	subs	r3, r2, r3
 8013f6c:	6a3a      	ldr	r2, [r7, #32]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d918      	bls.n	8013fa4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	6a1a      	ldr	r2, [r3, #32]
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	693a      	ldr	r2, [r7, #16]
 8013f82:	8992      	ldrh	r2, [r2, #12]
 8013f84:	fb02 f303 	mul.w	r3, r2, r3
 8013f88:	69fa      	ldr	r2, [r7, #28]
 8013f8a:	18d1      	adds	r1, r2, r3
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	899b      	ldrh	r3, [r3, #12]
 8013f90:	461a      	mov	r2, r3
 8013f92:	f7fd fdf3 	bl	8011b7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	7d1b      	ldrb	r3, [r3, #20]
 8013f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	899b      	ldrh	r3, [r3, #12]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	6a3b      	ldr	r3, [r7, #32]
 8013fac:	fb02 f303 	mul.w	r3, r2, r3
 8013fb0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013fb2:	e04b      	b.n	801404c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	6a1b      	ldr	r3, [r3, #32]
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d016      	beq.n	8013fec <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	699a      	ldr	r2, [r3, #24]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d210      	bcs.n	8013fec <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	7858      	ldrb	r0, [r3, #1]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	697a      	ldr	r2, [r7, #20]
 8013fd8:	f7fd fcf0 	bl	80119bc <disk_read>
 8013fdc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d004      	beq.n	8013fec <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	755a      	strb	r2, [r3, #21]
 8013fe8:	2301      	movs	r3, #1
 8013fea:	e05a      	b.n	80140a2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	697a      	ldr	r2, [r7, #20]
 8013ff0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	899b      	ldrh	r3, [r3, #12]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	699b      	ldr	r3, [r3, #24]
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	8992      	ldrh	r2, [r2, #12]
 8014000:	fbb3 f1f2 	udiv	r1, r3, r2
 8014004:	fb01 f202 	mul.w	r2, r1, r2
 8014008:	1a9b      	subs	r3, r3, r2
 801400a:	1ac3      	subs	r3, r0, r3
 801400c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	429a      	cmp	r2, r3
 8014014:	d901      	bls.n	801401a <f_write+0x298>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	699b      	ldr	r3, [r3, #24]
 8014024:	693a      	ldr	r2, [r7, #16]
 8014026:	8992      	ldrh	r2, [r2, #12]
 8014028:	fbb3 f0f2 	udiv	r0, r3, r2
 801402c:	fb00 f202 	mul.w	r2, r0, r2
 8014030:	1a9b      	subs	r3, r3, r2
 8014032:	440b      	add	r3, r1
 8014034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014036:	69f9      	ldr	r1, [r7, #28]
 8014038:	4618      	mov	r0, r3
 801403a:	f7fd fd9f 	bl	8011b7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	7d1b      	ldrb	r3, [r3, #20]
 8014042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014046:	b2da      	uxtb	r2, r3
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801404c:	69fa      	ldr	r2, [r7, #28]
 801404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014050:	4413      	add	r3, r2
 8014052:	61fb      	str	r3, [r7, #28]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	699a      	ldr	r2, [r3, #24]
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	441a      	add	r2, r3
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	619a      	str	r2, [r3, #24]
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	68da      	ldr	r2, [r3, #12]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	699b      	ldr	r3, [r3, #24]
 8014068:	429a      	cmp	r2, r3
 801406a:	bf38      	it	cc
 801406c:	461a      	movcc	r2, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	60da      	str	r2, [r3, #12]
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	681a      	ldr	r2, [r3, #0]
 8014076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014078:	441a      	add	r2, r3
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	f47f aeb5 	bne.w	8013df8 <f_write+0x76>
 801408e:	e000      	b.n	8014092 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014090:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	7d1b      	ldrb	r3, [r3, #20]
 8014096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801409a:	b2da      	uxtb	r2, r3
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3730      	adds	r7, #48	; 0x30
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}

080140aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b086      	sub	sp, #24
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f107 0208 	add.w	r2, r7, #8
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7ff faba 	bl	8013634 <validate>
 80140c0:	4603      	mov	r3, r0
 80140c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80140c4:	7dfb      	ldrb	r3, [r7, #23]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d168      	bne.n	801419c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	7d1b      	ldrb	r3, [r3, #20]
 80140ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d062      	beq.n	801419c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	7d1b      	ldrb	r3, [r3, #20]
 80140da:	b25b      	sxtb	r3, r3
 80140dc:	2b00      	cmp	r3, #0
 80140de:	da15      	bge.n	801410c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	7858      	ldrb	r0, [r3, #1]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6a1a      	ldr	r2, [r3, #32]
 80140ee:	2301      	movs	r3, #1
 80140f0:	f7fd fc84 	bl	80119fc <disk_write>
 80140f4:	4603      	mov	r3, r0
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d001      	beq.n	80140fe <f_sync+0x54>
 80140fa:	2301      	movs	r3, #1
 80140fc:	e04f      	b.n	801419e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	7d1b      	ldrb	r3, [r3, #20]
 8014102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014106:	b2da      	uxtb	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801410c:	f7fd faaa 	bl	8011664 <get_fattime>
 8014110:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014112:	68ba      	ldr	r2, [r7, #8]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014118:	4619      	mov	r1, r3
 801411a:	4610      	mov	r0, r2
 801411c:	f7fd ff5c 	bl	8011fd8 <move_window>
 8014120:	4603      	mov	r3, r0
 8014122:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014124:	7dfb      	ldrb	r3, [r7, #23]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d138      	bne.n	801419c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801412e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	330b      	adds	r3, #11
 8014134:	781a      	ldrb	r2, [r3, #0]
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	330b      	adds	r3, #11
 801413a:	f042 0220 	orr.w	r2, r2, #32
 801413e:	b2d2      	uxtb	r2, r2
 8014140:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6818      	ldr	r0, [r3, #0]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	689b      	ldr	r3, [r3, #8]
 801414a:	461a      	mov	r2, r3
 801414c:	68f9      	ldr	r1, [r7, #12]
 801414e:	f7fe fcea 	bl	8012b26 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f103 021c 	add.w	r2, r3, #28
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	4619      	mov	r1, r3
 801415e:	4610      	mov	r0, r2
 8014160:	f7fd fce0 	bl	8011b24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3316      	adds	r3, #22
 8014168:	6939      	ldr	r1, [r7, #16]
 801416a:	4618      	mov	r0, r3
 801416c:	f7fd fcda 	bl	8011b24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	3312      	adds	r3, #18
 8014174:	2100      	movs	r1, #0
 8014176:	4618      	mov	r0, r3
 8014178:	f7fd fcb9 	bl	8011aee <st_word>
					fs->wflag = 1;
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2201      	movs	r2, #1
 8014180:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	4618      	mov	r0, r3
 8014186:	f7fd ff55 	bl	8012034 <sync_fs>
 801418a:	4603      	mov	r3, r0
 801418c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	7d1b      	ldrb	r3, [r3, #20]
 8014192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014196:	b2da      	uxtb	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801419c:	7dfb      	ldrb	r3, [r7, #23]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3718      	adds	r7, #24
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b084      	sub	sp, #16
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f7ff ff7b 	bl	80140aa <f_sync>
 80141b4:	4603      	mov	r3, r0
 80141b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80141b8:	7bfb      	ldrb	r3, [r7, #15]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d118      	bne.n	80141f0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f107 0208 	add.w	r2, r7, #8
 80141c4:	4611      	mov	r1, r2
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7ff fa34 	bl	8013634 <validate>
 80141cc:	4603      	mov	r3, r0
 80141ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141d0:	7bfb      	ldrb	r3, [r7, #15]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d10c      	bne.n	80141f0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd fe58 	bl	8011e90 <dec_lock>
 80141e0:	4603      	mov	r3, r0
 80141e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80141e4:	7bfb      	ldrb	r3, [r7, #15]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2200      	movs	r2, #0
 80141ee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80141f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	3710      	adds	r7, #16
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}

080141fa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80141fa:	b580      	push	{r7, lr}
 80141fc:	b086      	sub	sp, #24
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
 8014202:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d101      	bne.n	801420e <f_opendir+0x14>
 801420a:	2309      	movs	r3, #9
 801420c:	e064      	b.n	80142d8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014212:	f107 010c 	add.w	r1, r7, #12
 8014216:	463b      	mov	r3, r7
 8014218:	2200      	movs	r2, #0
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe ff8a 	bl	8013134 <find_volume>
 8014220:	4603      	mov	r3, r0
 8014222:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014224:	7dfb      	ldrb	r3, [r7, #23]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d14f      	bne.n	80142ca <f_opendir+0xd0>
		obj->fs = fs;
 801422a:	68fa      	ldr	r2, [r7, #12]
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	4619      	mov	r1, r3
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f7fe fe6d 	bl	8012f14 <follow_path>
 801423a:	4603      	mov	r3, r0
 801423c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801423e:	7dfb      	ldrb	r3, [r7, #23]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d13d      	bne.n	80142c0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801424a:	b25b      	sxtb	r3, r3
 801424c:	2b00      	cmp	r3, #0
 801424e:	db12      	blt.n	8014276 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	799b      	ldrb	r3, [r3, #6]
 8014254:	f003 0310 	and.w	r3, r3, #16
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00a      	beq.n	8014272 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6a1b      	ldr	r3, [r3, #32]
 8014262:	4619      	mov	r1, r3
 8014264:	4610      	mov	r0, r2
 8014266:	f7fe fc3f 	bl	8012ae8 <ld_clust>
 801426a:	4602      	mov	r2, r0
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	609a      	str	r2, [r3, #8]
 8014270:	e001      	b.n	8014276 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014272:	2305      	movs	r3, #5
 8014274:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014276:	7dfb      	ldrb	r3, [r7, #23]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d121      	bne.n	80142c0 <f_opendir+0xc6>
				obj->id = fs->id;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	88da      	ldrh	r2, [r3, #6]
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014284:	2100      	movs	r1, #0
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7fe fa88 	bl	801279c <dir_sdi>
 801428c:	4603      	mov	r3, r0
 801428e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014290:	7dfb      	ldrb	r3, [r7, #23]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d114      	bne.n	80142c0 <f_opendir+0xc6>
					if (obj->sclust) {
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00d      	beq.n	80142ba <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801429e:	2100      	movs	r1, #0
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7fd fd67 	bl	8011d74 <inc_lock>
 80142a6:	4602      	mov	r2, r0
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d105      	bne.n	80142c0 <f_opendir+0xc6>
 80142b4:	2312      	movs	r3, #18
 80142b6:	75fb      	strb	r3, [r7, #23]
 80142b8:	e002      	b.n	80142c0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	2200      	movs	r2, #0
 80142be:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80142c0:	7dfb      	ldrb	r3, [r7, #23]
 80142c2:	2b04      	cmp	r3, #4
 80142c4:	d101      	bne.n	80142ca <f_opendir+0xd0>
 80142c6:	2305      	movs	r3, #5
 80142c8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80142ca:	7dfb      	ldrb	r3, [r7, #23]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d002      	beq.n	80142d6 <f_opendir+0xdc>
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	2200      	movs	r2, #0
 80142d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80142d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3718      	adds	r7, #24
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f107 0208 	add.w	r2, r7, #8
 80142ee:	4611      	mov	r1, r2
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7ff f99f 	bl	8013634 <validate>
 80142f6:	4603      	mov	r3, r0
 80142f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d110      	bne.n	8014322 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d006      	beq.n	8014316 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	691b      	ldr	r3, [r3, #16]
 801430c:	4618      	mov	r0, r3
 801430e:	f7fd fdbf 	bl	8011e90 <dec_lock>
 8014312:	4603      	mov	r3, r0
 8014314:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014316:	7bfb      	ldrb	r3, [r7, #15]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d102      	bne.n	8014322 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2200      	movs	r2, #0
 8014320:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014322:	7bfb      	ldrb	r3, [r7, #15]
}
 8014324:	4618      	mov	r0, r3
 8014326:	3710      	adds	r7, #16
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f107 0208 	add.w	r2, r7, #8
 801433c:	4611      	mov	r1, r2
 801433e:	4618      	mov	r0, r3
 8014340:	f7ff f978 	bl	8013634 <validate>
 8014344:	4603      	mov	r3, r0
 8014346:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014348:	7bfb      	ldrb	r3, [r7, #15]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d126      	bne.n	801439c <f_readdir+0x70>
		if (!fno) {
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014354:	2100      	movs	r1, #0
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f7fe fa20 	bl	801279c <dir_sdi>
 801435c:	4603      	mov	r3, r0
 801435e:	73fb      	strb	r3, [r7, #15]
 8014360:	e01c      	b.n	801439c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014362:	2100      	movs	r1, #0
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7fe fbfe 	bl	8012b66 <dir_read>
 801436a:	4603      	mov	r3, r0
 801436c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801436e:	7bfb      	ldrb	r3, [r7, #15]
 8014370:	2b04      	cmp	r3, #4
 8014372:	d101      	bne.n	8014378 <f_readdir+0x4c>
 8014374:	2300      	movs	r3, #0
 8014376:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014378:	7bfb      	ldrb	r3, [r7, #15]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d10e      	bne.n	801439c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801437e:	6839      	ldr	r1, [r7, #0]
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7fe fcd4 	bl	8012d2e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014386:	2100      	movs	r1, #0
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7fe fa90 	bl	80128ae <dir_next>
 801438e:	4603      	mov	r3, r0
 8014390:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014392:	7bfb      	ldrb	r3, [r7, #15]
 8014394:	2b04      	cmp	r3, #4
 8014396:	d101      	bne.n	801439c <f_readdir+0x70>
 8014398:	2300      	movs	r3, #0
 801439a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801439c:	7bfb      	ldrb	r3, [r7, #15]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b090      	sub	sp, #64	; 0x40
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80143b0:	f107 010c 	add.w	r1, r7, #12
 80143b4:	1d3b      	adds	r3, r7, #4
 80143b6:	2200      	movs	r2, #0
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fe febb 	bl	8013134 <find_volume>
 80143be:	4603      	mov	r3, r0
 80143c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80143c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d11f      	bne.n	801440c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	f107 030c 	add.w	r3, r7, #12
 80143d2:	4611      	mov	r1, r2
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fe fd9d 	bl	8012f14 <follow_path>
 80143da:	4603      	mov	r3, r0
 80143dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80143e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d111      	bne.n	801440c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80143e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80143ec:	b25b      	sxtb	r3, r3
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	da03      	bge.n	80143fa <f_stat+0x54>
				res = FR_INVALID_NAME;
 80143f2:	2306      	movs	r3, #6
 80143f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80143f8:	e008      	b.n	801440c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d005      	beq.n	801440c <f_stat+0x66>
 8014400:	f107 030c 	add.w	r3, r7, #12
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	4618      	mov	r0, r3
 8014408:	f7fe fc91 	bl	8012d2e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801440c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014410:	4618      	mov	r0, r3
 8014412:	3740      	adds	r7, #64	; 0x40
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b092      	sub	sp, #72	; 0x48
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014424:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014428:	f107 030c 	add.w	r3, r7, #12
 801442c:	2200      	movs	r2, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f7fe fe80 	bl	8013134 <find_volume>
 8014434:	4603      	mov	r3, r0
 8014436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801443a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801443e:	2b00      	cmp	r3, #0
 8014440:	f040 8099 	bne.w	8014576 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444c:	695a      	ldr	r2, [r3, #20]
 801444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014450:	699b      	ldr	r3, [r3, #24]
 8014452:	3b02      	subs	r3, #2
 8014454:	429a      	cmp	r2, r3
 8014456:	d804      	bhi.n	8014462 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801445a:	695a      	ldr	r2, [r3, #20]
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	601a      	str	r2, [r3, #0]
 8014460:	e089      	b.n	8014576 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8014462:	2300      	movs	r3, #0
 8014464:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	2b01      	cmp	r3, #1
 801446c:	d128      	bne.n	80144c0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801446e:	2302      	movs	r3, #2
 8014470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014474:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014476:	f107 0314 	add.w	r3, r7, #20
 801447a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801447c:	4618      	mov	r0, r3
 801447e:	f7fd fe68 	bl	8012152 <get_fat>
 8014482:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801448a:	d103      	bne.n	8014494 <f_getfree+0x7c>
 801448c:	2301      	movs	r3, #1
 801448e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014492:	e063      	b.n	801455c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8014494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014496:	2b01      	cmp	r3, #1
 8014498:	d103      	bne.n	80144a2 <f_getfree+0x8a>
 801449a:	2302      	movs	r3, #2
 801449c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80144a0:	e05c      	b.n	801455c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80144a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d102      	bne.n	80144ae <f_getfree+0x96>
 80144a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144aa:	3301      	adds	r3, #1
 80144ac:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80144ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b0:	3301      	adds	r3, #1
 80144b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b6:	699b      	ldr	r3, [r3, #24]
 80144b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d3db      	bcc.n	8014476 <f_getfree+0x5e>
 80144be:	e04d      	b.n	801455c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80144c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c2:	699b      	ldr	r3, [r3, #24]
 80144c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ca:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80144cc:	2300      	movs	r3, #0
 80144ce:	637b      	str	r3, [r7, #52]	; 0x34
 80144d0:	2300      	movs	r3, #0
 80144d2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80144d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d113      	bne.n	8014502 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80144da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144de:	1c5a      	adds	r2, r3, #1
 80144e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80144e2:	4619      	mov	r1, r3
 80144e4:	f7fd fd78 	bl	8011fd8 <move_window>
 80144e8:	4603      	mov	r3, r0
 80144ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80144ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d131      	bne.n	801455a <f_getfree+0x142>
							p = fs->win;
 80144f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f8:	3334      	adds	r3, #52	; 0x34
 80144fa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80144fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144fe:	899b      	ldrh	r3, [r3, #12]
 8014500:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8014502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b02      	cmp	r3, #2
 8014508:	d10f      	bne.n	801452a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801450a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801450c:	f7fd fab4 	bl	8011a78 <ld_word>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	d102      	bne.n	801451c <f_getfree+0x104>
 8014516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014518:	3301      	adds	r3, #1
 801451a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451e:	3302      	adds	r3, #2
 8014520:	633b      	str	r3, [r7, #48]	; 0x30
 8014522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014524:	3b02      	subs	r3, #2
 8014526:	637b      	str	r3, [r7, #52]	; 0x34
 8014528:	e010      	b.n	801454c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801452c:	f7fd fabc 	bl	8011aa8 <ld_dword>
 8014530:	4603      	mov	r3, r0
 8014532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014536:	2b00      	cmp	r3, #0
 8014538:	d102      	bne.n	8014540 <f_getfree+0x128>
 801453a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801453c:	3301      	adds	r3, #1
 801453e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8014540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014542:	3304      	adds	r3, #4
 8014544:	633b      	str	r3, [r7, #48]	; 0x30
 8014546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014548:	3b04      	subs	r3, #4
 801454a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801454e:	3b01      	subs	r3, #1
 8014550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014554:	2b00      	cmp	r3, #0
 8014556:	d1bd      	bne.n	80144d4 <f_getfree+0xbc>
 8014558:	e000      	b.n	801455c <f_getfree+0x144>
							if (res != FR_OK) break;
 801455a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014560:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014566:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456a:	791a      	ldrb	r2, [r3, #4]
 801456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456e:	f042 0201 	orr.w	r2, r2, #1
 8014572:	b2d2      	uxtb	r2, r2
 8014574:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014576:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801457a:	4618      	mov	r0, r3
 801457c:	3748      	adds	r7, #72	; 0x48
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}

08014582 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014582:	b580      	push	{r7, lr}
 8014584:	b096      	sub	sp, #88	; 0x58
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801458a:	f107 0108 	add.w	r1, r7, #8
 801458e:	1d3b      	adds	r3, r7, #4
 8014590:	2202      	movs	r2, #2
 8014592:	4618      	mov	r0, r3
 8014594:	f7fe fdce 	bl	8013134 <find_volume>
 8014598:	4603      	mov	r3, r0
 801459a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80145a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f040 80f2 	bne.w	8014790 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	f107 030c 	add.w	r3, r7, #12
 80145b2:	4611      	mov	r1, r2
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fe fcad 	bl	8012f14 <follow_path>
 80145ba:	4603      	mov	r3, r0
 80145bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d102      	bne.n	80145ce <f_mkdir+0x4c>
 80145c8:	2308      	movs	r3, #8
 80145ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145d2:	2b04      	cmp	r3, #4
 80145d4:	f040 80dc 	bne.w	8014790 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145d8:	f107 030c 	add.w	r3, r7, #12
 80145dc:	2100      	movs	r1, #0
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe f80c 	bl	80125fc <create_chain>
 80145e4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	895b      	ldrh	r3, [r3, #10]
 80145ea:	461a      	mov	r2, r3
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	899b      	ldrh	r3, [r3, #12]
 80145f0:	fb02 f303 	mul.w	r3, r2, r3
 80145f4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80145f6:	2300      	movs	r3, #0
 80145f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80145fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d102      	bne.n	8014608 <f_mkdir+0x86>
 8014602:	2307      	movs	r3, #7
 8014604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801460a:	2b01      	cmp	r3, #1
 801460c:	d102      	bne.n	8014614 <f_mkdir+0x92>
 801460e:	2302      	movs	r3, #2
 8014610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801461a:	d102      	bne.n	8014622 <f_mkdir+0xa0>
 801461c:	2301      	movs	r3, #1
 801461e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014626:	2b00      	cmp	r3, #0
 8014628:	d106      	bne.n	8014638 <f_mkdir+0xb6>
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	4618      	mov	r0, r3
 801462e:	f7fd fc8f 	bl	8011f50 <sync_window>
 8014632:	4603      	mov	r3, r0
 8014634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014638:	f7fd f814 	bl	8011664 <get_fattime>
 801463c:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801463e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014642:	2b00      	cmp	r3, #0
 8014644:	d16c      	bne.n	8014720 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801464a:	4618      	mov	r0, r3
 801464c:	f7fd fd62 	bl	8012114 <clust2sect>
 8014650:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	3334      	adds	r3, #52	; 0x34
 8014656:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	899b      	ldrh	r3, [r3, #12]
 801465c:	461a      	mov	r2, r3
 801465e:	2100      	movs	r1, #0
 8014660:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014662:	f7fd faac 	bl	8011bbe <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014666:	220b      	movs	r2, #11
 8014668:	2120      	movs	r1, #32
 801466a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801466c:	f7fd faa7 	bl	8011bbe <mem_set>
					dir[DIR_Name] = '.';
 8014670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014672:	222e      	movs	r2, #46	; 0x2e
 8014674:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014678:	330b      	adds	r3, #11
 801467a:	2210      	movs	r2, #16
 801467c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801467e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014680:	3316      	adds	r3, #22
 8014682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014684:	4618      	mov	r0, r3
 8014686:	f7fd fa4d 	bl	8011b24 <st_dword>
					st_clust(fs, dir, dcl);
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801468e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014690:	4618      	mov	r0, r3
 8014692:	f7fe fa48 	bl	8012b26 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014698:	3320      	adds	r3, #32
 801469a:	2220      	movs	r2, #32
 801469c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fd fa6c 	bl	8011b7c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	3321      	adds	r3, #33	; 0x21
 80146a8:	222e      	movs	r2, #46	; 0x2e
 80146aa:	701a      	strb	r2, [r3, #0]
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	2b03      	cmp	r3, #3
 80146b6:	d106      	bne.n	80146c6 <f_mkdir+0x144>
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146be:	429a      	cmp	r2, r3
 80146c0:	d101      	bne.n	80146c6 <f_mkdir+0x144>
 80146c2:	2300      	movs	r3, #0
 80146c4:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146c6:	68b8      	ldr	r0, [r7, #8]
 80146c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ca:	3320      	adds	r3, #32
 80146cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146ce:	4619      	mov	r1, r3
 80146d0:	f7fe fa29 	bl	8012b26 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	895b      	ldrh	r3, [r3, #10]
 80146d8:	653b      	str	r3, [r7, #80]	; 0x50
 80146da:	e01c      	b.n	8014716 <f_mkdir+0x194>
					fs->winsect = dsc++;
 80146dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146de:	1c5a      	adds	r2, r3, #1
 80146e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	2201      	movs	r2, #1
 80146ea:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fd fc2e 	bl	8011f50 <sync_window>
 80146f4:	4603      	mov	r3, r0
 80146f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80146fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d10d      	bne.n	801471e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	899b      	ldrh	r3, [r3, #12]
 8014706:	461a      	mov	r2, r3
 8014708:	2100      	movs	r1, #0
 801470a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801470c:	f7fd fa57 	bl	8011bbe <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014712:	3b01      	subs	r3, #1
 8014714:	653b      	str	r3, [r7, #80]	; 0x50
 8014716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014718:	2b00      	cmp	r3, #0
 801471a:	d1df      	bne.n	80146dc <f_mkdir+0x15a>
 801471c:	e000      	b.n	8014720 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 801471e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014724:	2b00      	cmp	r3, #0
 8014726:	d107      	bne.n	8014738 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014728:	f107 030c 	add.w	r3, r7, #12
 801472c:	4618      	mov	r0, r3
 801472e:	f7fe facc 	bl	8012cca <dir_register>
 8014732:	4603      	mov	r3, r0
 8014734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801473c:	2b00      	cmp	r3, #0
 801473e:	d120      	bne.n	8014782 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014742:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014746:	3316      	adds	r3, #22
 8014748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801474a:	4618      	mov	r0, r3
 801474c:	f7fd f9ea 	bl	8011b24 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014756:	4618      	mov	r0, r3
 8014758:	f7fe f9e5 	bl	8012b26 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801475e:	330b      	adds	r3, #11
 8014760:	2210      	movs	r2, #16
 8014762:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	2201      	movs	r2, #1
 8014768:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801476a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801476e:	2b00      	cmp	r3, #0
 8014770:	d10e      	bne.n	8014790 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	4618      	mov	r0, r3
 8014776:	f7fd fc5d 	bl	8012034 <sync_fs>
 801477a:	4603      	mov	r3, r0
 801477c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014780:	e006      	b.n	8014790 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014782:	f107 030c 	add.w	r3, r7, #12
 8014786:	2200      	movs	r2, #0
 8014788:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801478a:	4618      	mov	r0, r3
 801478c:	f7fd fed1 	bl	8012532 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014794:	4618      	mov	r0, r3
 8014796:	3758      	adds	r7, #88	; 0x58
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}

0801479c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801479c:	b480      	push	{r7}
 801479e:	b087      	sub	sp, #28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	4613      	mov	r3, r2
 80147a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80147aa:	2301      	movs	r3, #1
 80147ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80147ae:	2300      	movs	r3, #0
 80147b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80147b2:	4b1f      	ldr	r3, [pc, #124]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147b4:	7a5b      	ldrb	r3, [r3, #9]
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d131      	bne.n	8014820 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80147bc:	4b1c      	ldr	r3, [pc, #112]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147be:	7a5b      	ldrb	r3, [r3, #9]
 80147c0:	b2db      	uxtb	r3, r3
 80147c2:	461a      	mov	r2, r3
 80147c4:	4b1a      	ldr	r3, [pc, #104]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147c6:	2100      	movs	r1, #0
 80147c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80147ca:	4b19      	ldr	r3, [pc, #100]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147cc:	7a5b      	ldrb	r3, [r3, #9]
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	4a17      	ldr	r2, [pc, #92]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4413      	add	r3, r2
 80147d6:	68fa      	ldr	r2, [r7, #12]
 80147d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80147da:	4b15      	ldr	r3, [pc, #84]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147dc:	7a5b      	ldrb	r3, [r3, #9]
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	461a      	mov	r2, r3
 80147e2:	4b13      	ldr	r3, [pc, #76]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147e4:	4413      	add	r3, r2
 80147e6:	79fa      	ldrb	r2, [r7, #7]
 80147e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80147ea:	4b11      	ldr	r3, [pc, #68]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147ec:	7a5b      	ldrb	r3, [r3, #9]
 80147ee:	b2db      	uxtb	r3, r3
 80147f0:	1c5a      	adds	r2, r3, #1
 80147f2:	b2d1      	uxtb	r1, r2
 80147f4:	4a0e      	ldr	r2, [pc, #56]	; (8014830 <FATFS_LinkDriverEx+0x94>)
 80147f6:	7251      	strb	r1, [r2, #9]
 80147f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80147fa:	7dbb      	ldrb	r3, [r7, #22]
 80147fc:	3330      	adds	r3, #48	; 0x30
 80147fe:	b2da      	uxtb	r2, r3
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	3301      	adds	r3, #1
 8014808:	223a      	movs	r2, #58	; 0x3a
 801480a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	3302      	adds	r3, #2
 8014810:	222f      	movs	r2, #47	; 0x2f
 8014812:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	3303      	adds	r3, #3
 8014818:	2200      	movs	r2, #0
 801481a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014820:	7dfb      	ldrb	r3, [r7, #23]
}
 8014822:	4618      	mov	r0, r3
 8014824:	371c      	adds	r7, #28
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop
 8014830:	20005e38 	.word	0x20005e38

08014834 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801483e:	2200      	movs	r2, #0
 8014840:	6839      	ldr	r1, [r7, #0]
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f7ff ffaa 	bl	801479c <FATFS_LinkDriverEx>
 8014848:	4603      	mov	r3, r0
}
 801484a:	4618      	mov	r0, r3
 801484c:	3708      	adds	r7, #8
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
	...

08014854 <asctime>:
 8014854:	4b0d      	ldr	r3, [pc, #52]	; (801488c <asctime+0x38>)
 8014856:	b570      	push	{r4, r5, r6, lr}
 8014858:	681d      	ldr	r5, [r3, #0]
 801485a:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 801485c:	4604      	mov	r4, r0
 801485e:	b976      	cbnz	r6, 801487e <asctime+0x2a>
 8014860:	201a      	movs	r0, #26
 8014862:	f000 f8a1 	bl	80149a8 <malloc>
 8014866:	4602      	mov	r2, r0
 8014868:	6428      	str	r0, [r5, #64]	; 0x40
 801486a:	b920      	cbnz	r0, 8014876 <asctime+0x22>
 801486c:	4b08      	ldr	r3, [pc, #32]	; (8014890 <asctime+0x3c>)
 801486e:	4809      	ldr	r0, [pc, #36]	; (8014894 <asctime+0x40>)
 8014870:	2137      	movs	r1, #55	; 0x37
 8014872:	f000 f837 	bl	80148e4 <__assert_func>
 8014876:	221a      	movs	r2, #26
 8014878:	4631      	mov	r1, r6
 801487a:	f000 f8b3 	bl	80149e4 <memset>
 801487e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014880:	4620      	mov	r0, r4
 8014882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014886:	f000 b807 	b.w	8014898 <asctime_r>
 801488a:	bf00      	nop
 801488c:	20000224 	.word	0x20000224
 8014890:	080734ac 	.word	0x080734ac
 8014894:	080734c3 	.word	0x080734c3

08014898 <asctime_r>:
 8014898:	b510      	push	{r4, lr}
 801489a:	460c      	mov	r4, r1
 801489c:	6941      	ldr	r1, [r0, #20]
 801489e:	6903      	ldr	r3, [r0, #16]
 80148a0:	6982      	ldr	r2, [r0, #24]
 80148a2:	b086      	sub	sp, #24
 80148a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80148a8:	9104      	str	r1, [sp, #16]
 80148aa:	6801      	ldr	r1, [r0, #0]
 80148ac:	9103      	str	r1, [sp, #12]
 80148ae:	6841      	ldr	r1, [r0, #4]
 80148b0:	9102      	str	r1, [sp, #8]
 80148b2:	6881      	ldr	r1, [r0, #8]
 80148b4:	9101      	str	r1, [sp, #4]
 80148b6:	68c1      	ldr	r1, [r0, #12]
 80148b8:	9100      	str	r1, [sp, #0]
 80148ba:	4907      	ldr	r1, [pc, #28]	; (80148d8 <asctime_r+0x40>)
 80148bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148c0:	440b      	add	r3, r1
 80148c2:	4906      	ldr	r1, [pc, #24]	; (80148dc <asctime_r+0x44>)
 80148c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148c8:	440a      	add	r2, r1
 80148ca:	4620      	mov	r0, r4
 80148cc:	4904      	ldr	r1, [pc, #16]	; (80148e0 <asctime_r+0x48>)
 80148ce:	f001 f9b7 	bl	8015c40 <siprintf>
 80148d2:	4620      	mov	r0, r4
 80148d4:	b006      	add	sp, #24
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	08073554 	.word	0x08073554
 80148dc:	0807353f 	.word	0x0807353f
 80148e0:	0807351f 	.word	0x0807351f

080148e4 <__assert_func>:
 80148e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148e6:	4614      	mov	r4, r2
 80148e8:	461a      	mov	r2, r3
 80148ea:	4b09      	ldr	r3, [pc, #36]	; (8014910 <__assert_func+0x2c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	4605      	mov	r5, r0
 80148f0:	68d8      	ldr	r0, [r3, #12]
 80148f2:	b14c      	cbz	r4, 8014908 <__assert_func+0x24>
 80148f4:	4b07      	ldr	r3, [pc, #28]	; (8014914 <__assert_func+0x30>)
 80148f6:	9100      	str	r1, [sp, #0]
 80148f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148fc:	4906      	ldr	r1, [pc, #24]	; (8014918 <__assert_func+0x34>)
 80148fe:	462b      	mov	r3, r5
 8014900:	f000 f81c 	bl	801493c <fiprintf>
 8014904:	f002 fc9e 	bl	8017244 <abort>
 8014908:	4b04      	ldr	r3, [pc, #16]	; (801491c <__assert_func+0x38>)
 801490a:	461c      	mov	r4, r3
 801490c:	e7f3      	b.n	80148f6 <__assert_func+0x12>
 801490e:	bf00      	nop
 8014910:	20000224 	.word	0x20000224
 8014914:	08073578 	.word	0x08073578
 8014918:	08073585 	.word	0x08073585
 801491c:	0807353e 	.word	0x0807353e

08014920 <atof>:
 8014920:	2100      	movs	r1, #0
 8014922:	f002 b88b 	b.w	8016a3c <strtod>

08014926 <atoi>:
 8014926:	220a      	movs	r2, #10
 8014928:	2100      	movs	r1, #0
 801492a:	f002 b973 	b.w	8016c14 <strtol>
	...

08014930 <__errno>:
 8014930:	4b01      	ldr	r3, [pc, #4]	; (8014938 <__errno+0x8>)
 8014932:	6818      	ldr	r0, [r3, #0]
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop
 8014938:	20000224 	.word	0x20000224

0801493c <fiprintf>:
 801493c:	b40e      	push	{r1, r2, r3}
 801493e:	b503      	push	{r0, r1, lr}
 8014940:	4601      	mov	r1, r0
 8014942:	ab03      	add	r3, sp, #12
 8014944:	4805      	ldr	r0, [pc, #20]	; (801495c <fiprintf+0x20>)
 8014946:	f853 2b04 	ldr.w	r2, [r3], #4
 801494a:	6800      	ldr	r0, [r0, #0]
 801494c:	9301      	str	r3, [sp, #4]
 801494e:	f000 fbcd 	bl	80150ec <_vfiprintf_r>
 8014952:	b002      	add	sp, #8
 8014954:	f85d eb04 	ldr.w	lr, [sp], #4
 8014958:	b003      	add	sp, #12
 801495a:	4770      	bx	lr
 801495c:	20000224 	.word	0x20000224

08014960 <__libc_init_array>:
 8014960:	b570      	push	{r4, r5, r6, lr}
 8014962:	4d0d      	ldr	r5, [pc, #52]	; (8014998 <__libc_init_array+0x38>)
 8014964:	4c0d      	ldr	r4, [pc, #52]	; (801499c <__libc_init_array+0x3c>)
 8014966:	1b64      	subs	r4, r4, r5
 8014968:	10a4      	asrs	r4, r4, #2
 801496a:	2600      	movs	r6, #0
 801496c:	42a6      	cmp	r6, r4
 801496e:	d109      	bne.n	8014984 <__libc_init_array+0x24>
 8014970:	4d0b      	ldr	r5, [pc, #44]	; (80149a0 <__libc_init_array+0x40>)
 8014972:	4c0c      	ldr	r4, [pc, #48]	; (80149a4 <__libc_init_array+0x44>)
 8014974:	f008 f892 	bl	801ca9c <_init>
 8014978:	1b64      	subs	r4, r4, r5
 801497a:	10a4      	asrs	r4, r4, #2
 801497c:	2600      	movs	r6, #0
 801497e:	42a6      	cmp	r6, r4
 8014980:	d105      	bne.n	801498e <__libc_init_array+0x2e>
 8014982:	bd70      	pop	{r4, r5, r6, pc}
 8014984:	f855 3b04 	ldr.w	r3, [r5], #4
 8014988:	4798      	blx	r3
 801498a:	3601      	adds	r6, #1
 801498c:	e7ee      	b.n	801496c <__libc_init_array+0xc>
 801498e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014992:	4798      	blx	r3
 8014994:	3601      	adds	r6, #1
 8014996:	e7f2      	b.n	801497e <__libc_init_array+0x1e>
 8014998:	08073d88 	.word	0x08073d88
 801499c:	08073d88 	.word	0x08073d88
 80149a0:	08073d88 	.word	0x08073d88
 80149a4:	08073d8c 	.word	0x08073d8c

080149a8 <malloc>:
 80149a8:	4b02      	ldr	r3, [pc, #8]	; (80149b4 <malloc+0xc>)
 80149aa:	4601      	mov	r1, r0
 80149ac:	6818      	ldr	r0, [r3, #0]
 80149ae:	f000 baff 	b.w	8014fb0 <_malloc_r>
 80149b2:	bf00      	nop
 80149b4:	20000224 	.word	0x20000224

080149b8 <free>:
 80149b8:	4b02      	ldr	r3, [pc, #8]	; (80149c4 <free+0xc>)
 80149ba:	4601      	mov	r1, r0
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	f000 ba8b 	b.w	8014ed8 <_free_r>
 80149c2:	bf00      	nop
 80149c4:	20000224 	.word	0x20000224

080149c8 <memcpy>:
 80149c8:	440a      	add	r2, r1
 80149ca:	4291      	cmp	r1, r2
 80149cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80149d0:	d100      	bne.n	80149d4 <memcpy+0xc>
 80149d2:	4770      	bx	lr
 80149d4:	b510      	push	{r4, lr}
 80149d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149de:	4291      	cmp	r1, r2
 80149e0:	d1f9      	bne.n	80149d6 <memcpy+0xe>
 80149e2:	bd10      	pop	{r4, pc}

080149e4 <memset>:
 80149e4:	4402      	add	r2, r0
 80149e6:	4603      	mov	r3, r0
 80149e8:	4293      	cmp	r3, r2
 80149ea:	d100      	bne.n	80149ee <memset+0xa>
 80149ec:	4770      	bx	lr
 80149ee:	f803 1b01 	strb.w	r1, [r3], #1
 80149f2:	e7f9      	b.n	80149e8 <memset+0x4>

080149f4 <validate_structure>:
 80149f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149f6:	6801      	ldr	r1, [r0, #0]
 80149f8:	293b      	cmp	r1, #59	; 0x3b
 80149fa:	4604      	mov	r4, r0
 80149fc:	d911      	bls.n	8014a22 <validate_structure+0x2e>
 80149fe:	223c      	movs	r2, #60	; 0x3c
 8014a00:	4668      	mov	r0, sp
 8014a02:	f002 fc37 	bl	8017274 <div>
 8014a06:	9a01      	ldr	r2, [sp, #4]
 8014a08:	6863      	ldr	r3, [r4, #4]
 8014a0a:	9900      	ldr	r1, [sp, #0]
 8014a0c:	2a00      	cmp	r2, #0
 8014a0e:	440b      	add	r3, r1
 8014a10:	6063      	str	r3, [r4, #4]
 8014a12:	bfbb      	ittet	lt
 8014a14:	323c      	addlt	r2, #60	; 0x3c
 8014a16:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a1a:	6022      	strge	r2, [r4, #0]
 8014a1c:	6022      	strlt	r2, [r4, #0]
 8014a1e:	bfb8      	it	lt
 8014a20:	6063      	strlt	r3, [r4, #4]
 8014a22:	6861      	ldr	r1, [r4, #4]
 8014a24:	293b      	cmp	r1, #59	; 0x3b
 8014a26:	d911      	bls.n	8014a4c <validate_structure+0x58>
 8014a28:	223c      	movs	r2, #60	; 0x3c
 8014a2a:	4668      	mov	r0, sp
 8014a2c:	f002 fc22 	bl	8017274 <div>
 8014a30:	9a01      	ldr	r2, [sp, #4]
 8014a32:	68a3      	ldr	r3, [r4, #8]
 8014a34:	9900      	ldr	r1, [sp, #0]
 8014a36:	2a00      	cmp	r2, #0
 8014a38:	440b      	add	r3, r1
 8014a3a:	60a3      	str	r3, [r4, #8]
 8014a3c:	bfbb      	ittet	lt
 8014a3e:	323c      	addlt	r2, #60	; 0x3c
 8014a40:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a44:	6062      	strge	r2, [r4, #4]
 8014a46:	6062      	strlt	r2, [r4, #4]
 8014a48:	bfb8      	it	lt
 8014a4a:	60a3      	strlt	r3, [r4, #8]
 8014a4c:	68a1      	ldr	r1, [r4, #8]
 8014a4e:	2917      	cmp	r1, #23
 8014a50:	d911      	bls.n	8014a76 <validate_structure+0x82>
 8014a52:	2218      	movs	r2, #24
 8014a54:	4668      	mov	r0, sp
 8014a56:	f002 fc0d 	bl	8017274 <div>
 8014a5a:	9a01      	ldr	r2, [sp, #4]
 8014a5c:	68e3      	ldr	r3, [r4, #12]
 8014a5e:	9900      	ldr	r1, [sp, #0]
 8014a60:	2a00      	cmp	r2, #0
 8014a62:	440b      	add	r3, r1
 8014a64:	60e3      	str	r3, [r4, #12]
 8014a66:	bfbb      	ittet	lt
 8014a68:	3218      	addlt	r2, #24
 8014a6a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a6e:	60a2      	strge	r2, [r4, #8]
 8014a70:	60a2      	strlt	r2, [r4, #8]
 8014a72:	bfb8      	it	lt
 8014a74:	60e3      	strlt	r3, [r4, #12]
 8014a76:	6921      	ldr	r1, [r4, #16]
 8014a78:	290b      	cmp	r1, #11
 8014a7a:	d911      	bls.n	8014aa0 <validate_structure+0xac>
 8014a7c:	220c      	movs	r2, #12
 8014a7e:	4668      	mov	r0, sp
 8014a80:	f002 fbf8 	bl	8017274 <div>
 8014a84:	9a01      	ldr	r2, [sp, #4]
 8014a86:	6963      	ldr	r3, [r4, #20]
 8014a88:	9900      	ldr	r1, [sp, #0]
 8014a8a:	2a00      	cmp	r2, #0
 8014a8c:	440b      	add	r3, r1
 8014a8e:	6163      	str	r3, [r4, #20]
 8014a90:	bfbb      	ittet	lt
 8014a92:	320c      	addlt	r2, #12
 8014a94:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014a98:	6122      	strge	r2, [r4, #16]
 8014a9a:	6122      	strlt	r2, [r4, #16]
 8014a9c:	bfb8      	it	lt
 8014a9e:	6163      	strlt	r3, [r4, #20]
 8014aa0:	6963      	ldr	r3, [r4, #20]
 8014aa2:	0798      	lsls	r0, r3, #30
 8014aa4:	d120      	bne.n	8014ae8 <validate_structure+0xf4>
 8014aa6:	2164      	movs	r1, #100	; 0x64
 8014aa8:	fb93 f2f1 	sdiv	r2, r3, r1
 8014aac:	fb01 3212 	mls	r2, r1, r2, r3
 8014ab0:	b9e2      	cbnz	r2, 8014aec <validate_structure+0xf8>
 8014ab2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8014ab6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014aba:	fb93 f1f2 	sdiv	r1, r3, r2
 8014abe:	fb02 3311 	mls	r3, r2, r1, r3
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	bf14      	ite	ne
 8014ac6:	231c      	movne	r3, #28
 8014ac8:	231d      	moveq	r3, #29
 8014aca:	68e2      	ldr	r2, [r4, #12]
 8014acc:	2a00      	cmp	r2, #0
 8014ace:	dc0f      	bgt.n	8014af0 <validate_structure+0xfc>
 8014ad0:	4f33      	ldr	r7, [pc, #204]	; (8014ba0 <validate_structure+0x1ac>)
 8014ad2:	260b      	movs	r6, #11
 8014ad4:	2064      	movs	r0, #100	; 0x64
 8014ad6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014ada:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014ade:	f1bc 0f00 	cmp.w	ip, #0
 8014ae2:	dd31      	ble.n	8014b48 <validate_structure+0x154>
 8014ae4:	b003      	add	sp, #12
 8014ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae8:	231c      	movs	r3, #28
 8014aea:	e7ee      	b.n	8014aca <validate_structure+0xd6>
 8014aec:	231d      	movs	r3, #29
 8014aee:	e7ec      	b.n	8014aca <validate_structure+0xd6>
 8014af0:	4e2b      	ldr	r6, [pc, #172]	; (8014ba0 <validate_structure+0x1ac>)
 8014af2:	2700      	movs	r7, #0
 8014af4:	2064      	movs	r0, #100	; 0x64
 8014af6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014afa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014afe:	2a01      	cmp	r2, #1
 8014b00:	bf14      	ite	ne
 8014b02:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8014b06:	469c      	moveq	ip, r3
 8014b08:	4561      	cmp	r1, ip
 8014b0a:	ddeb      	ble.n	8014ae4 <validate_structure+0xf0>
 8014b0c:	3201      	adds	r2, #1
 8014b0e:	eba1 010c 	sub.w	r1, r1, ip
 8014b12:	2a0c      	cmp	r2, #12
 8014b14:	60e1      	str	r1, [r4, #12]
 8014b16:	6122      	str	r2, [r4, #16]
 8014b18:	d1ef      	bne.n	8014afa <validate_structure+0x106>
 8014b1a:	6963      	ldr	r3, [r4, #20]
 8014b1c:	1c5a      	adds	r2, r3, #1
 8014b1e:	0791      	lsls	r1, r2, #30
 8014b20:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014b24:	d137      	bne.n	8014b96 <validate_structure+0x1a2>
 8014b26:	fb92 f1f0 	sdiv	r1, r2, r0
 8014b2a:	fb00 2211 	mls	r2, r0, r1, r2
 8014b2e:	2a00      	cmp	r2, #0
 8014b30:	d133      	bne.n	8014b9a <validate_structure+0x1a6>
 8014b32:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014b36:	fb93 f2f5 	sdiv	r2, r3, r5
 8014b3a:	fb05 3312 	mls	r3, r5, r2, r3
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	bf14      	ite	ne
 8014b42:	231c      	movne	r3, #28
 8014b44:	231d      	moveq	r3, #29
 8014b46:	e7d8      	b.n	8014afa <validate_structure+0x106>
 8014b48:	6921      	ldr	r1, [r4, #16]
 8014b4a:	3901      	subs	r1, #1
 8014b4c:	6121      	str	r1, [r4, #16]
 8014b4e:	3101      	adds	r1, #1
 8014b50:	d114      	bne.n	8014b7c <validate_structure+0x188>
 8014b52:	6963      	ldr	r3, [r4, #20]
 8014b54:	1e5a      	subs	r2, r3, #1
 8014b56:	0791      	lsls	r1, r2, #30
 8014b58:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014b5c:	d117      	bne.n	8014b8e <validate_structure+0x19a>
 8014b5e:	fb92 f1f0 	sdiv	r1, r2, r0
 8014b62:	fb00 2211 	mls	r2, r0, r1, r2
 8014b66:	b9a2      	cbnz	r2, 8014b92 <validate_structure+0x19e>
 8014b68:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014b6c:	fb93 f2f5 	sdiv	r2, r3, r5
 8014b70:	fb05 3312 	mls	r3, r5, r2, r3
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	bf14      	ite	ne
 8014b78:	231c      	movne	r3, #28
 8014b7a:	231d      	moveq	r3, #29
 8014b7c:	6922      	ldr	r2, [r4, #16]
 8014b7e:	2a01      	cmp	r2, #1
 8014b80:	bf14      	ite	ne
 8014b82:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014b86:	461a      	moveq	r2, r3
 8014b88:	4462      	add	r2, ip
 8014b8a:	60e2      	str	r2, [r4, #12]
 8014b8c:	e7a5      	b.n	8014ada <validate_structure+0xe6>
 8014b8e:	231c      	movs	r3, #28
 8014b90:	e7f4      	b.n	8014b7c <validate_structure+0x188>
 8014b92:	231d      	movs	r3, #29
 8014b94:	e7f2      	b.n	8014b7c <validate_structure+0x188>
 8014b96:	231c      	movs	r3, #28
 8014b98:	e7af      	b.n	8014afa <validate_structure+0x106>
 8014b9a:	231d      	movs	r3, #29
 8014b9c:	e7ad      	b.n	8014afa <validate_structure+0x106>
 8014b9e:	bf00      	nop
 8014ba0:	080735b8 	.word	0x080735b8

08014ba4 <mktime>:
 8014ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba8:	b085      	sub	sp, #20
 8014baa:	4607      	mov	r7, r0
 8014bac:	f003 ff5c 	bl	8018a68 <__gettzinfo>
 8014bb0:	4681      	mov	r9, r0
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	f7ff ff1e 	bl	80149f4 <validate_structure>
 8014bb8:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014bbc:	233c      	movs	r3, #60	; 0x3c
 8014bbe:	fb03 4400 	mla	r4, r3, r0, r4
 8014bc2:	68b8      	ldr	r0, [r7, #8]
 8014bc4:	4abc      	ldr	r2, [pc, #752]	; (8014eb8 <mktime+0x314>)
 8014bc6:	697e      	ldr	r6, [r7, #20]
 8014bc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014bcc:	fb03 4400 	mla	r4, r3, r0, r4
 8014bd0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014bd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014bd8:	3d01      	subs	r5, #1
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	4415      	add	r5, r2
 8014bde:	dd11      	ble.n	8014c04 <mktime+0x60>
 8014be0:	07b1      	lsls	r1, r6, #30
 8014be2:	d10f      	bne.n	8014c04 <mktime+0x60>
 8014be4:	2264      	movs	r2, #100	; 0x64
 8014be6:	fb96 f3f2 	sdiv	r3, r6, r2
 8014bea:	fb02 6313 	mls	r3, r2, r3, r6
 8014bee:	b943      	cbnz	r3, 8014c02 <mktime+0x5e>
 8014bf0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014bf4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014bf8:	fb93 f1f2 	sdiv	r1, r3, r2
 8014bfc:	fb02 3311 	mls	r3, r2, r1, r3
 8014c00:	b903      	cbnz	r3, 8014c04 <mktime+0x60>
 8014c02:	3501      	adds	r5, #1
 8014c04:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014c08:	3310      	adds	r3, #16
 8014c0a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	61fd      	str	r5, [r7, #28]
 8014c12:	f200 815d 	bhi.w	8014ed0 <mktime+0x32c>
 8014c16:	2e46      	cmp	r6, #70	; 0x46
 8014c18:	dd71      	ble.n	8014cfe <mktime+0x15a>
 8014c1a:	2346      	movs	r3, #70	; 0x46
 8014c1c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014c20:	2164      	movs	r1, #100	; 0x64
 8014c22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014c26:	079a      	lsls	r2, r3, #30
 8014c28:	d163      	bne.n	8014cf2 <mktime+0x14e>
 8014c2a:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c2e:	fb01 3212 	mls	r2, r1, r2, r3
 8014c32:	2a00      	cmp	r2, #0
 8014c34:	d160      	bne.n	8014cf8 <mktime+0x154>
 8014c36:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014c3a:	fb92 fef0 	sdiv	lr, r2, r0
 8014c3e:	fb00 221e 	mls	r2, r0, lr, r2
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	bf14      	ite	ne
 8014c46:	4662      	movne	r2, ip
 8014c48:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	429e      	cmp	r6, r3
 8014c50:	4415      	add	r5, r2
 8014c52:	d1e8      	bne.n	8014c26 <mktime+0x82>
 8014c54:	4b99      	ldr	r3, [pc, #612]	; (8014ebc <mktime+0x318>)
 8014c56:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014c5a:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014c5e:	f002 f88d 	bl	8016d7c <__tz_lock>
 8014c62:	f002 f897 	bl	8016d94 <_tzset_unlocked>
 8014c66:	4b96      	ldr	r3, [pc, #600]	; (8014ec0 <mktime+0x31c>)
 8014c68:	f8d3 b000 	ldr.w	fp, [r3]
 8014c6c:	f1bb 0f00 	cmp.w	fp, #0
 8014c70:	d039      	beq.n	8014ce6 <mktime+0x142>
 8014c72:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8014c76:	6978      	ldr	r0, [r7, #20]
 8014c78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c7c:	f1bb 0f01 	cmp.w	fp, #1
 8014c80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014c84:	46da      	mov	sl, fp
 8014c86:	bfa8      	it	ge
 8014c88:	f04f 0a01 	movge.w	sl, #1
 8014c8c:	4283      	cmp	r3, r0
 8014c8e:	d178      	bne.n	8014d82 <mktime+0x1de>
 8014c90:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014c94:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014c98:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014c9c:	1a5b      	subs	r3, r3, r1
 8014c9e:	9302      	str	r3, [sp, #8]
 8014ca0:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014ca4:	9303      	str	r3, [sp, #12]
 8014ca6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014caa:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014cae:	9301      	str	r3, [sp, #4]
 8014cb0:	ebb3 0c02 	subs.w	ip, r3, r2
 8014cb4:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8014cb8:	4564      	cmp	r4, ip
 8014cba:	eb78 0300 	sbcs.w	r3, r8, r0
 8014cbe:	da66      	bge.n	8014d8e <mktime+0x1ea>
 8014cc0:	f8d9 3000 	ldr.w	r3, [r9]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d06f      	beq.n	8014da8 <mktime+0x204>
 8014cc8:	9b02      	ldr	r3, [sp, #8]
 8014cca:	429c      	cmp	r4, r3
 8014ccc:	9b03      	ldr	r3, [sp, #12]
 8014cce:	eb78 0303 	sbcs.w	r3, r8, r3
 8014cd2:	db03      	blt.n	8014cdc <mktime+0x138>
 8014cd4:	4564      	cmp	r4, ip
 8014cd6:	eb78 0300 	sbcs.w	r3, r8, r0
 8014cda:	db6b      	blt.n	8014db4 <mktime+0x210>
 8014cdc:	f1bb 0f00 	cmp.w	fp, #0
 8014ce0:	f04f 0b00 	mov.w	fp, #0
 8014ce4:	da6b      	bge.n	8014dbe <mktime+0x21a>
 8014ce6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8014cea:	190c      	adds	r4, r1, r4
 8014cec:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014cf0:	e0a9      	b.n	8014e46 <mktime+0x2a2>
 8014cf2:	f240 126d 	movw	r2, #365	; 0x16d
 8014cf6:	e7a9      	b.n	8014c4c <mktime+0xa8>
 8014cf8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014cfc:	e7a6      	b.n	8014c4c <mktime+0xa8>
 8014cfe:	d0a9      	beq.n	8014c54 <mktime+0xb0>
 8014d00:	2345      	movs	r3, #69	; 0x45
 8014d02:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014d06:	2164      	movs	r1, #100	; 0x64
 8014d08:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014d0c:	e012      	b.n	8014d34 <mktime+0x190>
 8014d0e:	bb62      	cbnz	r2, 8014d6a <mktime+0x1c6>
 8014d10:	fb93 f2f1 	sdiv	r2, r3, r1
 8014d14:	fb01 3212 	mls	r2, r1, r2, r3
 8014d18:	bb52      	cbnz	r2, 8014d70 <mktime+0x1cc>
 8014d1a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014d1e:	fb92 fef0 	sdiv	lr, r2, r0
 8014d22:	fb00 221e 	mls	r2, r0, lr, r2
 8014d26:	2a00      	cmp	r2, #0
 8014d28:	bf14      	ite	ne
 8014d2a:	4662      	movne	r2, ip
 8014d2c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014d30:	1aad      	subs	r5, r5, r2
 8014d32:	3b01      	subs	r3, #1
 8014d34:	429e      	cmp	r6, r3
 8014d36:	f003 0203 	and.w	r2, r3, #3
 8014d3a:	dbe8      	blt.n	8014d0e <mktime+0x16a>
 8014d3c:	b9da      	cbnz	r2, 8014d76 <mktime+0x1d2>
 8014d3e:	2264      	movs	r2, #100	; 0x64
 8014d40:	fb96 f3f2 	sdiv	r3, r6, r2
 8014d44:	fb02 6313 	mls	r3, r2, r3, r6
 8014d48:	b9c3      	cbnz	r3, 8014d7c <mktime+0x1d8>
 8014d4a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014d4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d52:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d56:	fb02 3311 	mls	r3, r2, r1, r3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f240 136d 	movw	r3, #365	; 0x16d
 8014d60:	bf08      	it	eq
 8014d62:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014d66:	1aed      	subs	r5, r5, r3
 8014d68:	e774      	b.n	8014c54 <mktime+0xb0>
 8014d6a:	f240 126d 	movw	r2, #365	; 0x16d
 8014d6e:	e7df      	b.n	8014d30 <mktime+0x18c>
 8014d70:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014d74:	e7dc      	b.n	8014d30 <mktime+0x18c>
 8014d76:	f240 136d 	movw	r3, #365	; 0x16d
 8014d7a:	e7f4      	b.n	8014d66 <mktime+0x1c2>
 8014d7c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014d80:	e7f1      	b.n	8014d66 <mktime+0x1c2>
 8014d82:	f001 ff51 	bl	8016c28 <__tzcalc_limits>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d182      	bne.n	8014c90 <mktime+0xec>
 8014d8a:	46d3      	mov	fp, sl
 8014d8c:	e050      	b.n	8014e30 <mktime+0x28c>
 8014d8e:	9b01      	ldr	r3, [sp, #4]
 8014d90:	1a5b      	subs	r3, r3, r1
 8014d92:	9301      	str	r3, [sp, #4]
 8014d94:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014d98:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014d9c:	9b01      	ldr	r3, [sp, #4]
 8014d9e:	429c      	cmp	r4, r3
 8014da0:	eb78 030e 	sbcs.w	r3, r8, lr
 8014da4:	dbf1      	blt.n	8014d8a <mktime+0x1e6>
 8014da6:	e78b      	b.n	8014cc0 <mktime+0x11c>
 8014da8:	9b02      	ldr	r3, [sp, #8]
 8014daa:	429c      	cmp	r4, r3
 8014dac:	9b03      	ldr	r3, [sp, #12]
 8014dae:	eb78 0303 	sbcs.w	r3, r8, r3
 8014db2:	db8f      	blt.n	8014cd4 <mktime+0x130>
 8014db4:	f1bb 0f00 	cmp.w	fp, #0
 8014db8:	db3e      	blt.n	8014e38 <mktime+0x294>
 8014dba:	f04f 0b01 	mov.w	fp, #1
 8014dbe:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014dc2:	f1ba 0f01 	cmp.w	sl, #1
 8014dc6:	d133      	bne.n	8014e30 <mktime+0x28c>
 8014dc8:	f1bb 0f00 	cmp.w	fp, #0
 8014dcc:	d04e      	beq.n	8014e6c <mktime+0x2c8>
 8014dce:	1a52      	subs	r2, r2, r1
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	1914      	adds	r4, r2, r4
 8014dda:	603b      	str	r3, [r7, #0]
 8014ddc:	4638      	mov	r0, r7
 8014dde:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014de2:	f7ff fe07 	bl	80149f4 <validate_structure>
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	ebb2 020a 	subs.w	r2, r2, sl
 8014dec:	d020      	beq.n	8014e30 <mktime+0x28c>
 8014dee:	2a01      	cmp	r2, #1
 8014df0:	dc3e      	bgt.n	8014e70 <mktime+0x2cc>
 8014df2:	1c90      	adds	r0, r2, #2
 8014df4:	bfd8      	it	le
 8014df6:	2201      	movle	r2, #1
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	18d3      	adds	r3, r2, r3
 8014dfc:	4415      	add	r5, r2
 8014dfe:	d540      	bpl.n	8014e82 <mktime+0x2de>
 8014e00:	1e73      	subs	r3, r6, #1
 8014e02:	0799      	lsls	r1, r3, #30
 8014e04:	d137      	bne.n	8014e76 <mktime+0x2d2>
 8014e06:	2264      	movs	r2, #100	; 0x64
 8014e08:	fb93 f1f2 	sdiv	r1, r3, r2
 8014e0c:	fb02 3311 	mls	r3, r2, r1, r3
 8014e10:	bba3      	cbnz	r3, 8014e7c <mktime+0x2d8>
 8014e12:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014e16:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014e1a:	fb96 f2f3 	sdiv	r2, r6, r3
 8014e1e:	fb03 6612 	mls	r6, r3, r2, r6
 8014e22:	2e00      	cmp	r6, #0
 8014e24:	f240 136d 	movw	r3, #365	; 0x16d
 8014e28:	bf18      	it	ne
 8014e2a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014e2e:	61fb      	str	r3, [r7, #28]
 8014e30:	f1bb 0f01 	cmp.w	fp, #1
 8014e34:	f47f af57 	bne.w	8014ce6 <mktime+0x142>
 8014e38:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014e3c:	190c      	adds	r4, r1, r4
 8014e3e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014e42:	f04f 0b01 	mov.w	fp, #1
 8014e46:	f001 ff9f 	bl	8016d88 <__tz_unlock>
 8014e4a:	3504      	adds	r5, #4
 8014e4c:	2307      	movs	r3, #7
 8014e4e:	fb95 f3f3 	sdiv	r3, r5, r3
 8014e52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014e56:	1aed      	subs	r5, r5, r3
 8014e58:	bf48      	it	mi
 8014e5a:	3507      	addmi	r5, #7
 8014e5c:	f8c7 b020 	str.w	fp, [r7, #32]
 8014e60:	61bd      	str	r5, [r7, #24]
 8014e62:	4620      	mov	r0, r4
 8014e64:	4641      	mov	r1, r8
 8014e66:	b005      	add	sp, #20
 8014e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e6c:	1a8a      	subs	r2, r1, r2
 8014e6e:	e7af      	b.n	8014dd0 <mktime+0x22c>
 8014e70:	f04f 32ff 	mov.w	r2, #4294967295
 8014e74:	e7c0      	b.n	8014df8 <mktime+0x254>
 8014e76:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014e7a:	e7d8      	b.n	8014e2e <mktime+0x28a>
 8014e7c:	f240 136d 	movw	r3, #365	; 0x16d
 8014e80:	e7d5      	b.n	8014e2e <mktime+0x28a>
 8014e82:	07b2      	lsls	r2, r6, #30
 8014e84:	d11e      	bne.n	8014ec4 <mktime+0x320>
 8014e86:	2164      	movs	r1, #100	; 0x64
 8014e88:	fb96 f2f1 	sdiv	r2, r6, r1
 8014e8c:	fb01 6212 	mls	r2, r1, r2, r6
 8014e90:	b9da      	cbnz	r2, 8014eca <mktime+0x326>
 8014e92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014e96:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014e9a:	fb96 f1f2 	sdiv	r1, r6, r2
 8014e9e:	fb02 6611 	mls	r6, r2, r1, r6
 8014ea2:	2e00      	cmp	r6, #0
 8014ea4:	f240 126d 	movw	r2, #365	; 0x16d
 8014ea8:	bf08      	it	eq
 8014eaa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	bfa8      	it	ge
 8014eb2:	1a9b      	subge	r3, r3, r2
 8014eb4:	e7bb      	b.n	8014e2e <mktime+0x28a>
 8014eb6:	bf00      	nop
 8014eb8:	080735e8 	.word	0x080735e8
 8014ebc:	00015180 	.word	0x00015180
 8014ec0:	20005e68 	.word	0x20005e68
 8014ec4:	f240 126d 	movw	r2, #365	; 0x16d
 8014ec8:	e7f1      	b.n	8014eae <mktime+0x30a>
 8014eca:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014ece:	e7ee      	b.n	8014eae <mktime+0x30a>
 8014ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8014ed4:	46a0      	mov	r8, r4
 8014ed6:	e7c4      	b.n	8014e62 <mktime+0x2be>

08014ed8 <_free_r>:
 8014ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014eda:	2900      	cmp	r1, #0
 8014edc:	d044      	beq.n	8014f68 <_free_r+0x90>
 8014ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ee2:	9001      	str	r0, [sp, #4]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8014eea:	bfb8      	it	lt
 8014eec:	18e4      	addlt	r4, r4, r3
 8014eee:	f003 fe6d 	bl	8018bcc <__malloc_lock>
 8014ef2:	4a1e      	ldr	r2, [pc, #120]	; (8014f6c <_free_r+0x94>)
 8014ef4:	9801      	ldr	r0, [sp, #4]
 8014ef6:	6813      	ldr	r3, [r2, #0]
 8014ef8:	b933      	cbnz	r3, 8014f08 <_free_r+0x30>
 8014efa:	6063      	str	r3, [r4, #4]
 8014efc:	6014      	str	r4, [r2, #0]
 8014efe:	b003      	add	sp, #12
 8014f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f04:	f003 be68 	b.w	8018bd8 <__malloc_unlock>
 8014f08:	42a3      	cmp	r3, r4
 8014f0a:	d908      	bls.n	8014f1e <_free_r+0x46>
 8014f0c:	6825      	ldr	r5, [r4, #0]
 8014f0e:	1961      	adds	r1, r4, r5
 8014f10:	428b      	cmp	r3, r1
 8014f12:	bf01      	itttt	eq
 8014f14:	6819      	ldreq	r1, [r3, #0]
 8014f16:	685b      	ldreq	r3, [r3, #4]
 8014f18:	1949      	addeq	r1, r1, r5
 8014f1a:	6021      	streq	r1, [r4, #0]
 8014f1c:	e7ed      	b.n	8014efa <_free_r+0x22>
 8014f1e:	461a      	mov	r2, r3
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	b10b      	cbz	r3, 8014f28 <_free_r+0x50>
 8014f24:	42a3      	cmp	r3, r4
 8014f26:	d9fa      	bls.n	8014f1e <_free_r+0x46>
 8014f28:	6811      	ldr	r1, [r2, #0]
 8014f2a:	1855      	adds	r5, r2, r1
 8014f2c:	42a5      	cmp	r5, r4
 8014f2e:	d10b      	bne.n	8014f48 <_free_r+0x70>
 8014f30:	6824      	ldr	r4, [r4, #0]
 8014f32:	4421      	add	r1, r4
 8014f34:	1854      	adds	r4, r2, r1
 8014f36:	42a3      	cmp	r3, r4
 8014f38:	6011      	str	r1, [r2, #0]
 8014f3a:	d1e0      	bne.n	8014efe <_free_r+0x26>
 8014f3c:	681c      	ldr	r4, [r3, #0]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	6053      	str	r3, [r2, #4]
 8014f42:	4421      	add	r1, r4
 8014f44:	6011      	str	r1, [r2, #0]
 8014f46:	e7da      	b.n	8014efe <_free_r+0x26>
 8014f48:	d902      	bls.n	8014f50 <_free_r+0x78>
 8014f4a:	230c      	movs	r3, #12
 8014f4c:	6003      	str	r3, [r0, #0]
 8014f4e:	e7d6      	b.n	8014efe <_free_r+0x26>
 8014f50:	6825      	ldr	r5, [r4, #0]
 8014f52:	1961      	adds	r1, r4, r5
 8014f54:	428b      	cmp	r3, r1
 8014f56:	bf04      	itt	eq
 8014f58:	6819      	ldreq	r1, [r3, #0]
 8014f5a:	685b      	ldreq	r3, [r3, #4]
 8014f5c:	6063      	str	r3, [r4, #4]
 8014f5e:	bf04      	itt	eq
 8014f60:	1949      	addeq	r1, r1, r5
 8014f62:	6021      	streq	r1, [r4, #0]
 8014f64:	6054      	str	r4, [r2, #4]
 8014f66:	e7ca      	b.n	8014efe <_free_r+0x26>
 8014f68:	b003      	add	sp, #12
 8014f6a:	bd30      	pop	{r4, r5, pc}
 8014f6c:	20005e44 	.word	0x20005e44

08014f70 <sbrk_aligned>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	4e0e      	ldr	r6, [pc, #56]	; (8014fac <sbrk_aligned+0x3c>)
 8014f74:	460c      	mov	r4, r1
 8014f76:	6831      	ldr	r1, [r6, #0]
 8014f78:	4605      	mov	r5, r0
 8014f7a:	b911      	cbnz	r1, 8014f82 <sbrk_aligned+0x12>
 8014f7c:	f000 fe50 	bl	8015c20 <_sbrk_r>
 8014f80:	6030      	str	r0, [r6, #0]
 8014f82:	4621      	mov	r1, r4
 8014f84:	4628      	mov	r0, r5
 8014f86:	f000 fe4b 	bl	8015c20 <_sbrk_r>
 8014f8a:	1c43      	adds	r3, r0, #1
 8014f8c:	d00a      	beq.n	8014fa4 <sbrk_aligned+0x34>
 8014f8e:	1cc4      	adds	r4, r0, #3
 8014f90:	f024 0403 	bic.w	r4, r4, #3
 8014f94:	42a0      	cmp	r0, r4
 8014f96:	d007      	beq.n	8014fa8 <sbrk_aligned+0x38>
 8014f98:	1a21      	subs	r1, r4, r0
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f000 fe40 	bl	8015c20 <_sbrk_r>
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d101      	bne.n	8014fa8 <sbrk_aligned+0x38>
 8014fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8014fa8:	4620      	mov	r0, r4
 8014faa:	bd70      	pop	{r4, r5, r6, pc}
 8014fac:	20005e48 	.word	0x20005e48

08014fb0 <_malloc_r>:
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	1ccd      	adds	r5, r1, #3
 8014fb6:	f025 0503 	bic.w	r5, r5, #3
 8014fba:	3508      	adds	r5, #8
 8014fbc:	2d0c      	cmp	r5, #12
 8014fbe:	bf38      	it	cc
 8014fc0:	250c      	movcc	r5, #12
 8014fc2:	2d00      	cmp	r5, #0
 8014fc4:	4607      	mov	r7, r0
 8014fc6:	db01      	blt.n	8014fcc <_malloc_r+0x1c>
 8014fc8:	42a9      	cmp	r1, r5
 8014fca:	d905      	bls.n	8014fd8 <_malloc_r+0x28>
 8014fcc:	230c      	movs	r3, #12
 8014fce:	603b      	str	r3, [r7, #0]
 8014fd0:	2600      	movs	r6, #0
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd8:	4e2e      	ldr	r6, [pc, #184]	; (8015094 <_malloc_r+0xe4>)
 8014fda:	f003 fdf7 	bl	8018bcc <__malloc_lock>
 8014fde:	6833      	ldr	r3, [r6, #0]
 8014fe0:	461c      	mov	r4, r3
 8014fe2:	bb34      	cbnz	r4, 8015032 <_malloc_r+0x82>
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	4638      	mov	r0, r7
 8014fe8:	f7ff ffc2 	bl	8014f70 <sbrk_aligned>
 8014fec:	1c43      	adds	r3, r0, #1
 8014fee:	4604      	mov	r4, r0
 8014ff0:	d14d      	bne.n	801508e <_malloc_r+0xde>
 8014ff2:	6834      	ldr	r4, [r6, #0]
 8014ff4:	4626      	mov	r6, r4
 8014ff6:	2e00      	cmp	r6, #0
 8014ff8:	d140      	bne.n	801507c <_malloc_r+0xcc>
 8014ffa:	6823      	ldr	r3, [r4, #0]
 8014ffc:	4631      	mov	r1, r6
 8014ffe:	4638      	mov	r0, r7
 8015000:	eb04 0803 	add.w	r8, r4, r3
 8015004:	f000 fe0c 	bl	8015c20 <_sbrk_r>
 8015008:	4580      	cmp	r8, r0
 801500a:	d13a      	bne.n	8015082 <_malloc_r+0xd2>
 801500c:	6821      	ldr	r1, [r4, #0]
 801500e:	3503      	adds	r5, #3
 8015010:	1a6d      	subs	r5, r5, r1
 8015012:	f025 0503 	bic.w	r5, r5, #3
 8015016:	3508      	adds	r5, #8
 8015018:	2d0c      	cmp	r5, #12
 801501a:	bf38      	it	cc
 801501c:	250c      	movcc	r5, #12
 801501e:	4629      	mov	r1, r5
 8015020:	4638      	mov	r0, r7
 8015022:	f7ff ffa5 	bl	8014f70 <sbrk_aligned>
 8015026:	3001      	adds	r0, #1
 8015028:	d02b      	beq.n	8015082 <_malloc_r+0xd2>
 801502a:	6823      	ldr	r3, [r4, #0]
 801502c:	442b      	add	r3, r5
 801502e:	6023      	str	r3, [r4, #0]
 8015030:	e00e      	b.n	8015050 <_malloc_r+0xa0>
 8015032:	6822      	ldr	r2, [r4, #0]
 8015034:	1b52      	subs	r2, r2, r5
 8015036:	d41e      	bmi.n	8015076 <_malloc_r+0xc6>
 8015038:	2a0b      	cmp	r2, #11
 801503a:	d916      	bls.n	801506a <_malloc_r+0xba>
 801503c:	1961      	adds	r1, r4, r5
 801503e:	42a3      	cmp	r3, r4
 8015040:	6025      	str	r5, [r4, #0]
 8015042:	bf18      	it	ne
 8015044:	6059      	strne	r1, [r3, #4]
 8015046:	6863      	ldr	r3, [r4, #4]
 8015048:	bf08      	it	eq
 801504a:	6031      	streq	r1, [r6, #0]
 801504c:	5162      	str	r2, [r4, r5]
 801504e:	604b      	str	r3, [r1, #4]
 8015050:	4638      	mov	r0, r7
 8015052:	f104 060b 	add.w	r6, r4, #11
 8015056:	f003 fdbf 	bl	8018bd8 <__malloc_unlock>
 801505a:	f026 0607 	bic.w	r6, r6, #7
 801505e:	1d23      	adds	r3, r4, #4
 8015060:	1af2      	subs	r2, r6, r3
 8015062:	d0b6      	beq.n	8014fd2 <_malloc_r+0x22>
 8015064:	1b9b      	subs	r3, r3, r6
 8015066:	50a3      	str	r3, [r4, r2]
 8015068:	e7b3      	b.n	8014fd2 <_malloc_r+0x22>
 801506a:	6862      	ldr	r2, [r4, #4]
 801506c:	42a3      	cmp	r3, r4
 801506e:	bf0c      	ite	eq
 8015070:	6032      	streq	r2, [r6, #0]
 8015072:	605a      	strne	r2, [r3, #4]
 8015074:	e7ec      	b.n	8015050 <_malloc_r+0xa0>
 8015076:	4623      	mov	r3, r4
 8015078:	6864      	ldr	r4, [r4, #4]
 801507a:	e7b2      	b.n	8014fe2 <_malloc_r+0x32>
 801507c:	4634      	mov	r4, r6
 801507e:	6876      	ldr	r6, [r6, #4]
 8015080:	e7b9      	b.n	8014ff6 <_malloc_r+0x46>
 8015082:	230c      	movs	r3, #12
 8015084:	603b      	str	r3, [r7, #0]
 8015086:	4638      	mov	r0, r7
 8015088:	f003 fda6 	bl	8018bd8 <__malloc_unlock>
 801508c:	e7a1      	b.n	8014fd2 <_malloc_r+0x22>
 801508e:	6025      	str	r5, [r4, #0]
 8015090:	e7de      	b.n	8015050 <_malloc_r+0xa0>
 8015092:	bf00      	nop
 8015094:	20005e44 	.word	0x20005e44

08015098 <__sfputc_r>:
 8015098:	6893      	ldr	r3, [r2, #8]
 801509a:	3b01      	subs	r3, #1
 801509c:	2b00      	cmp	r3, #0
 801509e:	b410      	push	{r4}
 80150a0:	6093      	str	r3, [r2, #8]
 80150a2:	da08      	bge.n	80150b6 <__sfputc_r+0x1e>
 80150a4:	6994      	ldr	r4, [r2, #24]
 80150a6:	42a3      	cmp	r3, r4
 80150a8:	db01      	blt.n	80150ae <__sfputc_r+0x16>
 80150aa:	290a      	cmp	r1, #10
 80150ac:	d103      	bne.n	80150b6 <__sfputc_r+0x1e>
 80150ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150b2:	f001 bff5 	b.w	80170a0 <__swbuf_r>
 80150b6:	6813      	ldr	r3, [r2, #0]
 80150b8:	1c58      	adds	r0, r3, #1
 80150ba:	6010      	str	r0, [r2, #0]
 80150bc:	7019      	strb	r1, [r3, #0]
 80150be:	4608      	mov	r0, r1
 80150c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c4:	4770      	bx	lr

080150c6 <__sfputs_r>:
 80150c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c8:	4606      	mov	r6, r0
 80150ca:	460f      	mov	r7, r1
 80150cc:	4614      	mov	r4, r2
 80150ce:	18d5      	adds	r5, r2, r3
 80150d0:	42ac      	cmp	r4, r5
 80150d2:	d101      	bne.n	80150d8 <__sfputs_r+0x12>
 80150d4:	2000      	movs	r0, #0
 80150d6:	e007      	b.n	80150e8 <__sfputs_r+0x22>
 80150d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150dc:	463a      	mov	r2, r7
 80150de:	4630      	mov	r0, r6
 80150e0:	f7ff ffda 	bl	8015098 <__sfputc_r>
 80150e4:	1c43      	adds	r3, r0, #1
 80150e6:	d1f3      	bne.n	80150d0 <__sfputs_r+0xa>
 80150e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080150ec <_vfiprintf_r>:
 80150ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f0:	460d      	mov	r5, r1
 80150f2:	b09d      	sub	sp, #116	; 0x74
 80150f4:	4614      	mov	r4, r2
 80150f6:	4698      	mov	r8, r3
 80150f8:	4606      	mov	r6, r0
 80150fa:	b118      	cbz	r0, 8015104 <_vfiprintf_r+0x18>
 80150fc:	6983      	ldr	r3, [r0, #24]
 80150fe:	b90b      	cbnz	r3, 8015104 <_vfiprintf_r+0x18>
 8015100:	f003 f862 	bl	80181c8 <__sinit>
 8015104:	4b89      	ldr	r3, [pc, #548]	; (801532c <_vfiprintf_r+0x240>)
 8015106:	429d      	cmp	r5, r3
 8015108:	d11b      	bne.n	8015142 <_vfiprintf_r+0x56>
 801510a:	6875      	ldr	r5, [r6, #4]
 801510c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801510e:	07d9      	lsls	r1, r3, #31
 8015110:	d405      	bmi.n	801511e <_vfiprintf_r+0x32>
 8015112:	89ab      	ldrh	r3, [r5, #12]
 8015114:	059a      	lsls	r2, r3, #22
 8015116:	d402      	bmi.n	801511e <_vfiprintf_r+0x32>
 8015118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801511a:	f003 fcaf 	bl	8018a7c <__retarget_lock_acquire_recursive>
 801511e:	89ab      	ldrh	r3, [r5, #12]
 8015120:	071b      	lsls	r3, r3, #28
 8015122:	d501      	bpl.n	8015128 <_vfiprintf_r+0x3c>
 8015124:	692b      	ldr	r3, [r5, #16]
 8015126:	b9eb      	cbnz	r3, 8015164 <_vfiprintf_r+0x78>
 8015128:	4629      	mov	r1, r5
 801512a:	4630      	mov	r0, r6
 801512c:	f002 f81c 	bl	8017168 <__swsetup_r>
 8015130:	b1c0      	cbz	r0, 8015164 <_vfiprintf_r+0x78>
 8015132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015134:	07dc      	lsls	r4, r3, #31
 8015136:	d50e      	bpl.n	8015156 <_vfiprintf_r+0x6a>
 8015138:	f04f 30ff 	mov.w	r0, #4294967295
 801513c:	b01d      	add	sp, #116	; 0x74
 801513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015142:	4b7b      	ldr	r3, [pc, #492]	; (8015330 <_vfiprintf_r+0x244>)
 8015144:	429d      	cmp	r5, r3
 8015146:	d101      	bne.n	801514c <_vfiprintf_r+0x60>
 8015148:	68b5      	ldr	r5, [r6, #8]
 801514a:	e7df      	b.n	801510c <_vfiprintf_r+0x20>
 801514c:	4b79      	ldr	r3, [pc, #484]	; (8015334 <_vfiprintf_r+0x248>)
 801514e:	429d      	cmp	r5, r3
 8015150:	bf08      	it	eq
 8015152:	68f5      	ldreq	r5, [r6, #12]
 8015154:	e7da      	b.n	801510c <_vfiprintf_r+0x20>
 8015156:	89ab      	ldrh	r3, [r5, #12]
 8015158:	0598      	lsls	r0, r3, #22
 801515a:	d4ed      	bmi.n	8015138 <_vfiprintf_r+0x4c>
 801515c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801515e:	f003 fc8f 	bl	8018a80 <__retarget_lock_release_recursive>
 8015162:	e7e9      	b.n	8015138 <_vfiprintf_r+0x4c>
 8015164:	2300      	movs	r3, #0
 8015166:	9309      	str	r3, [sp, #36]	; 0x24
 8015168:	2320      	movs	r3, #32
 801516a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801516e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015172:	2330      	movs	r3, #48	; 0x30
 8015174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015338 <_vfiprintf_r+0x24c>
 8015178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801517c:	f04f 0901 	mov.w	r9, #1
 8015180:	4623      	mov	r3, r4
 8015182:	469a      	mov	sl, r3
 8015184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015188:	b10a      	cbz	r2, 801518e <_vfiprintf_r+0xa2>
 801518a:	2a25      	cmp	r2, #37	; 0x25
 801518c:	d1f9      	bne.n	8015182 <_vfiprintf_r+0x96>
 801518e:	ebba 0b04 	subs.w	fp, sl, r4
 8015192:	d00b      	beq.n	80151ac <_vfiprintf_r+0xc0>
 8015194:	465b      	mov	r3, fp
 8015196:	4622      	mov	r2, r4
 8015198:	4629      	mov	r1, r5
 801519a:	4630      	mov	r0, r6
 801519c:	f7ff ff93 	bl	80150c6 <__sfputs_r>
 80151a0:	3001      	adds	r0, #1
 80151a2:	f000 80aa 	beq.w	80152fa <_vfiprintf_r+0x20e>
 80151a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151a8:	445a      	add	r2, fp
 80151aa:	9209      	str	r2, [sp, #36]	; 0x24
 80151ac:	f89a 3000 	ldrb.w	r3, [sl]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	f000 80a2 	beq.w	80152fa <_vfiprintf_r+0x20e>
 80151b6:	2300      	movs	r3, #0
 80151b8:	f04f 32ff 	mov.w	r2, #4294967295
 80151bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151c0:	f10a 0a01 	add.w	sl, sl, #1
 80151c4:	9304      	str	r3, [sp, #16]
 80151c6:	9307      	str	r3, [sp, #28]
 80151c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151cc:	931a      	str	r3, [sp, #104]	; 0x68
 80151ce:	4654      	mov	r4, sl
 80151d0:	2205      	movs	r2, #5
 80151d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151d6:	4858      	ldr	r0, [pc, #352]	; (8015338 <_vfiprintf_r+0x24c>)
 80151d8:	f7eb f822 	bl	8000220 <memchr>
 80151dc:	9a04      	ldr	r2, [sp, #16]
 80151de:	b9d8      	cbnz	r0, 8015218 <_vfiprintf_r+0x12c>
 80151e0:	06d1      	lsls	r1, r2, #27
 80151e2:	bf44      	itt	mi
 80151e4:	2320      	movmi	r3, #32
 80151e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151ea:	0713      	lsls	r3, r2, #28
 80151ec:	bf44      	itt	mi
 80151ee:	232b      	movmi	r3, #43	; 0x2b
 80151f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151f4:	f89a 3000 	ldrb.w	r3, [sl]
 80151f8:	2b2a      	cmp	r3, #42	; 0x2a
 80151fa:	d015      	beq.n	8015228 <_vfiprintf_r+0x13c>
 80151fc:	9a07      	ldr	r2, [sp, #28]
 80151fe:	4654      	mov	r4, sl
 8015200:	2000      	movs	r0, #0
 8015202:	f04f 0c0a 	mov.w	ip, #10
 8015206:	4621      	mov	r1, r4
 8015208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801520c:	3b30      	subs	r3, #48	; 0x30
 801520e:	2b09      	cmp	r3, #9
 8015210:	d94e      	bls.n	80152b0 <_vfiprintf_r+0x1c4>
 8015212:	b1b0      	cbz	r0, 8015242 <_vfiprintf_r+0x156>
 8015214:	9207      	str	r2, [sp, #28]
 8015216:	e014      	b.n	8015242 <_vfiprintf_r+0x156>
 8015218:	eba0 0308 	sub.w	r3, r0, r8
 801521c:	fa09 f303 	lsl.w	r3, r9, r3
 8015220:	4313      	orrs	r3, r2
 8015222:	9304      	str	r3, [sp, #16]
 8015224:	46a2      	mov	sl, r4
 8015226:	e7d2      	b.n	80151ce <_vfiprintf_r+0xe2>
 8015228:	9b03      	ldr	r3, [sp, #12]
 801522a:	1d19      	adds	r1, r3, #4
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	9103      	str	r1, [sp, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	bfbb      	ittet	lt
 8015234:	425b      	neglt	r3, r3
 8015236:	f042 0202 	orrlt.w	r2, r2, #2
 801523a:	9307      	strge	r3, [sp, #28]
 801523c:	9307      	strlt	r3, [sp, #28]
 801523e:	bfb8      	it	lt
 8015240:	9204      	strlt	r2, [sp, #16]
 8015242:	7823      	ldrb	r3, [r4, #0]
 8015244:	2b2e      	cmp	r3, #46	; 0x2e
 8015246:	d10c      	bne.n	8015262 <_vfiprintf_r+0x176>
 8015248:	7863      	ldrb	r3, [r4, #1]
 801524a:	2b2a      	cmp	r3, #42	; 0x2a
 801524c:	d135      	bne.n	80152ba <_vfiprintf_r+0x1ce>
 801524e:	9b03      	ldr	r3, [sp, #12]
 8015250:	1d1a      	adds	r2, r3, #4
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	9203      	str	r2, [sp, #12]
 8015256:	2b00      	cmp	r3, #0
 8015258:	bfb8      	it	lt
 801525a:	f04f 33ff 	movlt.w	r3, #4294967295
 801525e:	3402      	adds	r4, #2
 8015260:	9305      	str	r3, [sp, #20]
 8015262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015348 <_vfiprintf_r+0x25c>
 8015266:	7821      	ldrb	r1, [r4, #0]
 8015268:	2203      	movs	r2, #3
 801526a:	4650      	mov	r0, sl
 801526c:	f7ea ffd8 	bl	8000220 <memchr>
 8015270:	b140      	cbz	r0, 8015284 <_vfiprintf_r+0x198>
 8015272:	2340      	movs	r3, #64	; 0x40
 8015274:	eba0 000a 	sub.w	r0, r0, sl
 8015278:	fa03 f000 	lsl.w	r0, r3, r0
 801527c:	9b04      	ldr	r3, [sp, #16]
 801527e:	4303      	orrs	r3, r0
 8015280:	3401      	adds	r4, #1
 8015282:	9304      	str	r3, [sp, #16]
 8015284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015288:	482c      	ldr	r0, [pc, #176]	; (801533c <_vfiprintf_r+0x250>)
 801528a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801528e:	2206      	movs	r2, #6
 8015290:	f7ea ffc6 	bl	8000220 <memchr>
 8015294:	2800      	cmp	r0, #0
 8015296:	d03f      	beq.n	8015318 <_vfiprintf_r+0x22c>
 8015298:	4b29      	ldr	r3, [pc, #164]	; (8015340 <_vfiprintf_r+0x254>)
 801529a:	bb1b      	cbnz	r3, 80152e4 <_vfiprintf_r+0x1f8>
 801529c:	9b03      	ldr	r3, [sp, #12]
 801529e:	3307      	adds	r3, #7
 80152a0:	f023 0307 	bic.w	r3, r3, #7
 80152a4:	3308      	adds	r3, #8
 80152a6:	9303      	str	r3, [sp, #12]
 80152a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152aa:	443b      	add	r3, r7
 80152ac:	9309      	str	r3, [sp, #36]	; 0x24
 80152ae:	e767      	b.n	8015180 <_vfiprintf_r+0x94>
 80152b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80152b4:	460c      	mov	r4, r1
 80152b6:	2001      	movs	r0, #1
 80152b8:	e7a5      	b.n	8015206 <_vfiprintf_r+0x11a>
 80152ba:	2300      	movs	r3, #0
 80152bc:	3401      	adds	r4, #1
 80152be:	9305      	str	r3, [sp, #20]
 80152c0:	4619      	mov	r1, r3
 80152c2:	f04f 0c0a 	mov.w	ip, #10
 80152c6:	4620      	mov	r0, r4
 80152c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152cc:	3a30      	subs	r2, #48	; 0x30
 80152ce:	2a09      	cmp	r2, #9
 80152d0:	d903      	bls.n	80152da <_vfiprintf_r+0x1ee>
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d0c5      	beq.n	8015262 <_vfiprintf_r+0x176>
 80152d6:	9105      	str	r1, [sp, #20]
 80152d8:	e7c3      	b.n	8015262 <_vfiprintf_r+0x176>
 80152da:	fb0c 2101 	mla	r1, ip, r1, r2
 80152de:	4604      	mov	r4, r0
 80152e0:	2301      	movs	r3, #1
 80152e2:	e7f0      	b.n	80152c6 <_vfiprintf_r+0x1da>
 80152e4:	ab03      	add	r3, sp, #12
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	462a      	mov	r2, r5
 80152ea:	4b16      	ldr	r3, [pc, #88]	; (8015344 <_vfiprintf_r+0x258>)
 80152ec:	a904      	add	r1, sp, #16
 80152ee:	4630      	mov	r0, r6
 80152f0:	f000 f8cc 	bl	801548c <_printf_float>
 80152f4:	4607      	mov	r7, r0
 80152f6:	1c78      	adds	r0, r7, #1
 80152f8:	d1d6      	bne.n	80152a8 <_vfiprintf_r+0x1bc>
 80152fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152fc:	07d9      	lsls	r1, r3, #31
 80152fe:	d405      	bmi.n	801530c <_vfiprintf_r+0x220>
 8015300:	89ab      	ldrh	r3, [r5, #12]
 8015302:	059a      	lsls	r2, r3, #22
 8015304:	d402      	bmi.n	801530c <_vfiprintf_r+0x220>
 8015306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015308:	f003 fbba 	bl	8018a80 <__retarget_lock_release_recursive>
 801530c:	89ab      	ldrh	r3, [r5, #12]
 801530e:	065b      	lsls	r3, r3, #25
 8015310:	f53f af12 	bmi.w	8015138 <_vfiprintf_r+0x4c>
 8015314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015316:	e711      	b.n	801513c <_vfiprintf_r+0x50>
 8015318:	ab03      	add	r3, sp, #12
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	462a      	mov	r2, r5
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <_vfiprintf_r+0x258>)
 8015320:	a904      	add	r1, sp, #16
 8015322:	4630      	mov	r0, r6
 8015324:	f000 fb56 	bl	80159d4 <_printf_i>
 8015328:	e7e4      	b.n	80152f4 <_vfiprintf_r+0x208>
 801532a:	bf00      	nop
 801532c:	080738e4 	.word	0x080738e4
 8015330:	08073904 	.word	0x08073904
 8015334:	080738c4 	.word	0x080738c4
 8015338:	08073618 	.word	0x08073618
 801533c:	08073622 	.word	0x08073622
 8015340:	0801548d 	.word	0x0801548d
 8015344:	080150c7 	.word	0x080150c7
 8015348:	0807361e 	.word	0x0807361e

0801534c <__cvt>:
 801534c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015350:	ec55 4b10 	vmov	r4, r5, d0
 8015354:	2d00      	cmp	r5, #0
 8015356:	460e      	mov	r6, r1
 8015358:	4619      	mov	r1, r3
 801535a:	462b      	mov	r3, r5
 801535c:	bfbb      	ittet	lt
 801535e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015362:	461d      	movlt	r5, r3
 8015364:	2300      	movge	r3, #0
 8015366:	232d      	movlt	r3, #45	; 0x2d
 8015368:	700b      	strb	r3, [r1, #0]
 801536a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801536c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015370:	4691      	mov	r9, r2
 8015372:	f023 0820 	bic.w	r8, r3, #32
 8015376:	bfbc      	itt	lt
 8015378:	4622      	movlt	r2, r4
 801537a:	4614      	movlt	r4, r2
 801537c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015380:	d005      	beq.n	801538e <__cvt+0x42>
 8015382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015386:	d100      	bne.n	801538a <__cvt+0x3e>
 8015388:	3601      	adds	r6, #1
 801538a:	2102      	movs	r1, #2
 801538c:	e000      	b.n	8015390 <__cvt+0x44>
 801538e:	2103      	movs	r1, #3
 8015390:	ab03      	add	r3, sp, #12
 8015392:	9301      	str	r3, [sp, #4]
 8015394:	ab02      	add	r3, sp, #8
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	ec45 4b10 	vmov	d0, r4, r5
 801539c:	4653      	mov	r3, sl
 801539e:	4632      	mov	r2, r6
 80153a0:	f002 f80a 	bl	80173b8 <_dtoa_r>
 80153a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80153a8:	4607      	mov	r7, r0
 80153aa:	d102      	bne.n	80153b2 <__cvt+0x66>
 80153ac:	f019 0f01 	tst.w	r9, #1
 80153b0:	d022      	beq.n	80153f8 <__cvt+0xac>
 80153b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80153b6:	eb07 0906 	add.w	r9, r7, r6
 80153ba:	d110      	bne.n	80153de <__cvt+0x92>
 80153bc:	783b      	ldrb	r3, [r7, #0]
 80153be:	2b30      	cmp	r3, #48	; 0x30
 80153c0:	d10a      	bne.n	80153d8 <__cvt+0x8c>
 80153c2:	2200      	movs	r2, #0
 80153c4:	2300      	movs	r3, #0
 80153c6:	4620      	mov	r0, r4
 80153c8:	4629      	mov	r1, r5
 80153ca:	f7eb fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80153ce:	b918      	cbnz	r0, 80153d8 <__cvt+0x8c>
 80153d0:	f1c6 0601 	rsb	r6, r6, #1
 80153d4:	f8ca 6000 	str.w	r6, [sl]
 80153d8:	f8da 3000 	ldr.w	r3, [sl]
 80153dc:	4499      	add	r9, r3
 80153de:	2200      	movs	r2, #0
 80153e0:	2300      	movs	r3, #0
 80153e2:	4620      	mov	r0, r4
 80153e4:	4629      	mov	r1, r5
 80153e6:	f7eb fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80153ea:	b108      	cbz	r0, 80153f0 <__cvt+0xa4>
 80153ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80153f0:	2230      	movs	r2, #48	; 0x30
 80153f2:	9b03      	ldr	r3, [sp, #12]
 80153f4:	454b      	cmp	r3, r9
 80153f6:	d307      	bcc.n	8015408 <__cvt+0xbc>
 80153f8:	9b03      	ldr	r3, [sp, #12]
 80153fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153fc:	1bdb      	subs	r3, r3, r7
 80153fe:	4638      	mov	r0, r7
 8015400:	6013      	str	r3, [r2, #0]
 8015402:	b004      	add	sp, #16
 8015404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015408:	1c59      	adds	r1, r3, #1
 801540a:	9103      	str	r1, [sp, #12]
 801540c:	701a      	strb	r2, [r3, #0]
 801540e:	e7f0      	b.n	80153f2 <__cvt+0xa6>

08015410 <__exponent>:
 8015410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015412:	4603      	mov	r3, r0
 8015414:	2900      	cmp	r1, #0
 8015416:	bfb8      	it	lt
 8015418:	4249      	neglt	r1, r1
 801541a:	f803 2b02 	strb.w	r2, [r3], #2
 801541e:	bfb4      	ite	lt
 8015420:	222d      	movlt	r2, #45	; 0x2d
 8015422:	222b      	movge	r2, #43	; 0x2b
 8015424:	2909      	cmp	r1, #9
 8015426:	7042      	strb	r2, [r0, #1]
 8015428:	dd2a      	ble.n	8015480 <__exponent+0x70>
 801542a:	f10d 0407 	add.w	r4, sp, #7
 801542e:	46a4      	mov	ip, r4
 8015430:	270a      	movs	r7, #10
 8015432:	46a6      	mov	lr, r4
 8015434:	460a      	mov	r2, r1
 8015436:	fb91 f6f7 	sdiv	r6, r1, r7
 801543a:	fb07 1516 	mls	r5, r7, r6, r1
 801543e:	3530      	adds	r5, #48	; 0x30
 8015440:	2a63      	cmp	r2, #99	; 0x63
 8015442:	f104 34ff 	add.w	r4, r4, #4294967295
 8015446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801544a:	4631      	mov	r1, r6
 801544c:	dcf1      	bgt.n	8015432 <__exponent+0x22>
 801544e:	3130      	adds	r1, #48	; 0x30
 8015450:	f1ae 0502 	sub.w	r5, lr, #2
 8015454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015458:	1c44      	adds	r4, r0, #1
 801545a:	4629      	mov	r1, r5
 801545c:	4561      	cmp	r1, ip
 801545e:	d30a      	bcc.n	8015476 <__exponent+0x66>
 8015460:	f10d 0209 	add.w	r2, sp, #9
 8015464:	eba2 020e 	sub.w	r2, r2, lr
 8015468:	4565      	cmp	r5, ip
 801546a:	bf88      	it	hi
 801546c:	2200      	movhi	r2, #0
 801546e:	4413      	add	r3, r2
 8015470:	1a18      	subs	r0, r3, r0
 8015472:	b003      	add	sp, #12
 8015474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015476:	f811 2b01 	ldrb.w	r2, [r1], #1
 801547a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801547e:	e7ed      	b.n	801545c <__exponent+0x4c>
 8015480:	2330      	movs	r3, #48	; 0x30
 8015482:	3130      	adds	r1, #48	; 0x30
 8015484:	7083      	strb	r3, [r0, #2]
 8015486:	70c1      	strb	r1, [r0, #3]
 8015488:	1d03      	adds	r3, r0, #4
 801548a:	e7f1      	b.n	8015470 <__exponent+0x60>

0801548c <_printf_float>:
 801548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015490:	ed2d 8b02 	vpush	{d8}
 8015494:	b08d      	sub	sp, #52	; 0x34
 8015496:	460c      	mov	r4, r1
 8015498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801549c:	4616      	mov	r6, r2
 801549e:	461f      	mov	r7, r3
 80154a0:	4605      	mov	r5, r0
 80154a2:	f003 fae5 	bl	8018a70 <_localeconv_r>
 80154a6:	f8d0 a000 	ldr.w	sl, [r0]
 80154aa:	4650      	mov	r0, sl
 80154ac:	f7ea feaa 	bl	8000204 <strlen>
 80154b0:	2300      	movs	r3, #0
 80154b2:	930a      	str	r3, [sp, #40]	; 0x28
 80154b4:	6823      	ldr	r3, [r4, #0]
 80154b6:	9305      	str	r3, [sp, #20]
 80154b8:	f8d8 3000 	ldr.w	r3, [r8]
 80154bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80154c0:	3307      	adds	r3, #7
 80154c2:	f023 0307 	bic.w	r3, r3, #7
 80154c6:	f103 0208 	add.w	r2, r3, #8
 80154ca:	f8c8 2000 	str.w	r2, [r8]
 80154ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80154d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80154da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154de:	9307      	str	r3, [sp, #28]
 80154e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80154e4:	ee08 0a10 	vmov	s16, r0
 80154e8:	4b9f      	ldr	r3, [pc, #636]	; (8015768 <_printf_float+0x2dc>)
 80154ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154ee:	f04f 32ff 	mov.w	r2, #4294967295
 80154f2:	f7eb fb3b 	bl	8000b6c <__aeabi_dcmpun>
 80154f6:	bb88      	cbnz	r0, 801555c <_printf_float+0xd0>
 80154f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154fc:	4b9a      	ldr	r3, [pc, #616]	; (8015768 <_printf_float+0x2dc>)
 80154fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015502:	f7eb fb15 	bl	8000b30 <__aeabi_dcmple>
 8015506:	bb48      	cbnz	r0, 801555c <_printf_float+0xd0>
 8015508:	2200      	movs	r2, #0
 801550a:	2300      	movs	r3, #0
 801550c:	4640      	mov	r0, r8
 801550e:	4649      	mov	r1, r9
 8015510:	f7eb fb04 	bl	8000b1c <__aeabi_dcmplt>
 8015514:	b110      	cbz	r0, 801551c <_printf_float+0x90>
 8015516:	232d      	movs	r3, #45	; 0x2d
 8015518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801551c:	4b93      	ldr	r3, [pc, #588]	; (801576c <_printf_float+0x2e0>)
 801551e:	4894      	ldr	r0, [pc, #592]	; (8015770 <_printf_float+0x2e4>)
 8015520:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015524:	bf94      	ite	ls
 8015526:	4698      	movls	r8, r3
 8015528:	4680      	movhi	r8, r0
 801552a:	2303      	movs	r3, #3
 801552c:	6123      	str	r3, [r4, #16]
 801552e:	9b05      	ldr	r3, [sp, #20]
 8015530:	f023 0204 	bic.w	r2, r3, #4
 8015534:	6022      	str	r2, [r4, #0]
 8015536:	f04f 0900 	mov.w	r9, #0
 801553a:	9700      	str	r7, [sp, #0]
 801553c:	4633      	mov	r3, r6
 801553e:	aa0b      	add	r2, sp, #44	; 0x2c
 8015540:	4621      	mov	r1, r4
 8015542:	4628      	mov	r0, r5
 8015544:	f000 f9d8 	bl	80158f8 <_printf_common>
 8015548:	3001      	adds	r0, #1
 801554a:	f040 8090 	bne.w	801566e <_printf_float+0x1e2>
 801554e:	f04f 30ff 	mov.w	r0, #4294967295
 8015552:	b00d      	add	sp, #52	; 0x34
 8015554:	ecbd 8b02 	vpop	{d8}
 8015558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555c:	4642      	mov	r2, r8
 801555e:	464b      	mov	r3, r9
 8015560:	4640      	mov	r0, r8
 8015562:	4649      	mov	r1, r9
 8015564:	f7eb fb02 	bl	8000b6c <__aeabi_dcmpun>
 8015568:	b140      	cbz	r0, 801557c <_printf_float+0xf0>
 801556a:	464b      	mov	r3, r9
 801556c:	2b00      	cmp	r3, #0
 801556e:	bfbc      	itt	lt
 8015570:	232d      	movlt	r3, #45	; 0x2d
 8015572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015576:	487f      	ldr	r0, [pc, #508]	; (8015774 <_printf_float+0x2e8>)
 8015578:	4b7f      	ldr	r3, [pc, #508]	; (8015778 <_printf_float+0x2ec>)
 801557a:	e7d1      	b.n	8015520 <_printf_float+0x94>
 801557c:	6863      	ldr	r3, [r4, #4]
 801557e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015582:	9206      	str	r2, [sp, #24]
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	d13f      	bne.n	8015608 <_printf_float+0x17c>
 8015588:	2306      	movs	r3, #6
 801558a:	6063      	str	r3, [r4, #4]
 801558c:	9b05      	ldr	r3, [sp, #20]
 801558e:	6861      	ldr	r1, [r4, #4]
 8015590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015594:	2300      	movs	r3, #0
 8015596:	9303      	str	r3, [sp, #12]
 8015598:	ab0a      	add	r3, sp, #40	; 0x28
 801559a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801559e:	ab09      	add	r3, sp, #36	; 0x24
 80155a0:	ec49 8b10 	vmov	d0, r8, r9
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	6022      	str	r2, [r4, #0]
 80155a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80155ac:	4628      	mov	r0, r5
 80155ae:	f7ff fecd 	bl	801534c <__cvt>
 80155b2:	9b06      	ldr	r3, [sp, #24]
 80155b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155b6:	2b47      	cmp	r3, #71	; 0x47
 80155b8:	4680      	mov	r8, r0
 80155ba:	d108      	bne.n	80155ce <_printf_float+0x142>
 80155bc:	1cc8      	adds	r0, r1, #3
 80155be:	db02      	blt.n	80155c6 <_printf_float+0x13a>
 80155c0:	6863      	ldr	r3, [r4, #4]
 80155c2:	4299      	cmp	r1, r3
 80155c4:	dd41      	ble.n	801564a <_printf_float+0x1be>
 80155c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80155ca:	fa5f fb8b 	uxtb.w	fp, fp
 80155ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80155d2:	d820      	bhi.n	8015616 <_printf_float+0x18a>
 80155d4:	3901      	subs	r1, #1
 80155d6:	465a      	mov	r2, fp
 80155d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80155dc:	9109      	str	r1, [sp, #36]	; 0x24
 80155de:	f7ff ff17 	bl	8015410 <__exponent>
 80155e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155e4:	1813      	adds	r3, r2, r0
 80155e6:	2a01      	cmp	r2, #1
 80155e8:	4681      	mov	r9, r0
 80155ea:	6123      	str	r3, [r4, #16]
 80155ec:	dc02      	bgt.n	80155f4 <_printf_float+0x168>
 80155ee:	6822      	ldr	r2, [r4, #0]
 80155f0:	07d2      	lsls	r2, r2, #31
 80155f2:	d501      	bpl.n	80155f8 <_printf_float+0x16c>
 80155f4:	3301      	adds	r3, #1
 80155f6:	6123      	str	r3, [r4, #16]
 80155f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d09c      	beq.n	801553a <_printf_float+0xae>
 8015600:	232d      	movs	r3, #45	; 0x2d
 8015602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015606:	e798      	b.n	801553a <_printf_float+0xae>
 8015608:	9a06      	ldr	r2, [sp, #24]
 801560a:	2a47      	cmp	r2, #71	; 0x47
 801560c:	d1be      	bne.n	801558c <_printf_float+0x100>
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1bc      	bne.n	801558c <_printf_float+0x100>
 8015612:	2301      	movs	r3, #1
 8015614:	e7b9      	b.n	801558a <_printf_float+0xfe>
 8015616:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801561a:	d118      	bne.n	801564e <_printf_float+0x1c2>
 801561c:	2900      	cmp	r1, #0
 801561e:	6863      	ldr	r3, [r4, #4]
 8015620:	dd0b      	ble.n	801563a <_printf_float+0x1ae>
 8015622:	6121      	str	r1, [r4, #16]
 8015624:	b913      	cbnz	r3, 801562c <_printf_float+0x1a0>
 8015626:	6822      	ldr	r2, [r4, #0]
 8015628:	07d0      	lsls	r0, r2, #31
 801562a:	d502      	bpl.n	8015632 <_printf_float+0x1a6>
 801562c:	3301      	adds	r3, #1
 801562e:	440b      	add	r3, r1
 8015630:	6123      	str	r3, [r4, #16]
 8015632:	65a1      	str	r1, [r4, #88]	; 0x58
 8015634:	f04f 0900 	mov.w	r9, #0
 8015638:	e7de      	b.n	80155f8 <_printf_float+0x16c>
 801563a:	b913      	cbnz	r3, 8015642 <_printf_float+0x1b6>
 801563c:	6822      	ldr	r2, [r4, #0]
 801563e:	07d2      	lsls	r2, r2, #31
 8015640:	d501      	bpl.n	8015646 <_printf_float+0x1ba>
 8015642:	3302      	adds	r3, #2
 8015644:	e7f4      	b.n	8015630 <_printf_float+0x1a4>
 8015646:	2301      	movs	r3, #1
 8015648:	e7f2      	b.n	8015630 <_printf_float+0x1a4>
 801564a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801564e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015650:	4299      	cmp	r1, r3
 8015652:	db05      	blt.n	8015660 <_printf_float+0x1d4>
 8015654:	6823      	ldr	r3, [r4, #0]
 8015656:	6121      	str	r1, [r4, #16]
 8015658:	07d8      	lsls	r0, r3, #31
 801565a:	d5ea      	bpl.n	8015632 <_printf_float+0x1a6>
 801565c:	1c4b      	adds	r3, r1, #1
 801565e:	e7e7      	b.n	8015630 <_printf_float+0x1a4>
 8015660:	2900      	cmp	r1, #0
 8015662:	bfd4      	ite	le
 8015664:	f1c1 0202 	rsble	r2, r1, #2
 8015668:	2201      	movgt	r2, #1
 801566a:	4413      	add	r3, r2
 801566c:	e7e0      	b.n	8015630 <_printf_float+0x1a4>
 801566e:	6823      	ldr	r3, [r4, #0]
 8015670:	055a      	lsls	r2, r3, #21
 8015672:	d407      	bmi.n	8015684 <_printf_float+0x1f8>
 8015674:	6923      	ldr	r3, [r4, #16]
 8015676:	4642      	mov	r2, r8
 8015678:	4631      	mov	r1, r6
 801567a:	4628      	mov	r0, r5
 801567c:	47b8      	blx	r7
 801567e:	3001      	adds	r0, #1
 8015680:	d12c      	bne.n	80156dc <_printf_float+0x250>
 8015682:	e764      	b.n	801554e <_printf_float+0xc2>
 8015684:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015688:	f240 80e0 	bls.w	801584c <_printf_float+0x3c0>
 801568c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015690:	2200      	movs	r2, #0
 8015692:	2300      	movs	r3, #0
 8015694:	f7eb fa38 	bl	8000b08 <__aeabi_dcmpeq>
 8015698:	2800      	cmp	r0, #0
 801569a:	d034      	beq.n	8015706 <_printf_float+0x27a>
 801569c:	4a37      	ldr	r2, [pc, #220]	; (801577c <_printf_float+0x2f0>)
 801569e:	2301      	movs	r3, #1
 80156a0:	4631      	mov	r1, r6
 80156a2:	4628      	mov	r0, r5
 80156a4:	47b8      	blx	r7
 80156a6:	3001      	adds	r0, #1
 80156a8:	f43f af51 	beq.w	801554e <_printf_float+0xc2>
 80156ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156b0:	429a      	cmp	r2, r3
 80156b2:	db02      	blt.n	80156ba <_printf_float+0x22e>
 80156b4:	6823      	ldr	r3, [r4, #0]
 80156b6:	07d8      	lsls	r0, r3, #31
 80156b8:	d510      	bpl.n	80156dc <_printf_float+0x250>
 80156ba:	ee18 3a10 	vmov	r3, s16
 80156be:	4652      	mov	r2, sl
 80156c0:	4631      	mov	r1, r6
 80156c2:	4628      	mov	r0, r5
 80156c4:	47b8      	blx	r7
 80156c6:	3001      	adds	r0, #1
 80156c8:	f43f af41 	beq.w	801554e <_printf_float+0xc2>
 80156cc:	f04f 0800 	mov.w	r8, #0
 80156d0:	f104 091a 	add.w	r9, r4, #26
 80156d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d6:	3b01      	subs	r3, #1
 80156d8:	4543      	cmp	r3, r8
 80156da:	dc09      	bgt.n	80156f0 <_printf_float+0x264>
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	079b      	lsls	r3, r3, #30
 80156e0:	f100 8105 	bmi.w	80158ee <_printf_float+0x462>
 80156e4:	68e0      	ldr	r0, [r4, #12]
 80156e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156e8:	4298      	cmp	r0, r3
 80156ea:	bfb8      	it	lt
 80156ec:	4618      	movlt	r0, r3
 80156ee:	e730      	b.n	8015552 <_printf_float+0xc6>
 80156f0:	2301      	movs	r3, #1
 80156f2:	464a      	mov	r2, r9
 80156f4:	4631      	mov	r1, r6
 80156f6:	4628      	mov	r0, r5
 80156f8:	47b8      	blx	r7
 80156fa:	3001      	adds	r0, #1
 80156fc:	f43f af27 	beq.w	801554e <_printf_float+0xc2>
 8015700:	f108 0801 	add.w	r8, r8, #1
 8015704:	e7e6      	b.n	80156d4 <_printf_float+0x248>
 8015706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015708:	2b00      	cmp	r3, #0
 801570a:	dc39      	bgt.n	8015780 <_printf_float+0x2f4>
 801570c:	4a1b      	ldr	r2, [pc, #108]	; (801577c <_printf_float+0x2f0>)
 801570e:	2301      	movs	r3, #1
 8015710:	4631      	mov	r1, r6
 8015712:	4628      	mov	r0, r5
 8015714:	47b8      	blx	r7
 8015716:	3001      	adds	r0, #1
 8015718:	f43f af19 	beq.w	801554e <_printf_float+0xc2>
 801571c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015720:	4313      	orrs	r3, r2
 8015722:	d102      	bne.n	801572a <_printf_float+0x29e>
 8015724:	6823      	ldr	r3, [r4, #0]
 8015726:	07d9      	lsls	r1, r3, #31
 8015728:	d5d8      	bpl.n	80156dc <_printf_float+0x250>
 801572a:	ee18 3a10 	vmov	r3, s16
 801572e:	4652      	mov	r2, sl
 8015730:	4631      	mov	r1, r6
 8015732:	4628      	mov	r0, r5
 8015734:	47b8      	blx	r7
 8015736:	3001      	adds	r0, #1
 8015738:	f43f af09 	beq.w	801554e <_printf_float+0xc2>
 801573c:	f04f 0900 	mov.w	r9, #0
 8015740:	f104 0a1a 	add.w	sl, r4, #26
 8015744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015746:	425b      	negs	r3, r3
 8015748:	454b      	cmp	r3, r9
 801574a:	dc01      	bgt.n	8015750 <_printf_float+0x2c4>
 801574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801574e:	e792      	b.n	8015676 <_printf_float+0x1ea>
 8015750:	2301      	movs	r3, #1
 8015752:	4652      	mov	r2, sl
 8015754:	4631      	mov	r1, r6
 8015756:	4628      	mov	r0, r5
 8015758:	47b8      	blx	r7
 801575a:	3001      	adds	r0, #1
 801575c:	f43f aef7 	beq.w	801554e <_printf_float+0xc2>
 8015760:	f109 0901 	add.w	r9, r9, #1
 8015764:	e7ee      	b.n	8015744 <_printf_float+0x2b8>
 8015766:	bf00      	nop
 8015768:	7fefffff 	.word	0x7fefffff
 801576c:	08073629 	.word	0x08073629
 8015770:	0807362d 	.word	0x0807362d
 8015774:	08073635 	.word	0x08073635
 8015778:	08073631 	.word	0x08073631
 801577c:	08073b60 	.word	0x08073b60
 8015780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015784:	429a      	cmp	r2, r3
 8015786:	bfa8      	it	ge
 8015788:	461a      	movge	r2, r3
 801578a:	2a00      	cmp	r2, #0
 801578c:	4691      	mov	r9, r2
 801578e:	dc37      	bgt.n	8015800 <_printf_float+0x374>
 8015790:	f04f 0b00 	mov.w	fp, #0
 8015794:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015798:	f104 021a 	add.w	r2, r4, #26
 801579c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801579e:	9305      	str	r3, [sp, #20]
 80157a0:	eba3 0309 	sub.w	r3, r3, r9
 80157a4:	455b      	cmp	r3, fp
 80157a6:	dc33      	bgt.n	8015810 <_printf_float+0x384>
 80157a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157ac:	429a      	cmp	r2, r3
 80157ae:	db3b      	blt.n	8015828 <_printf_float+0x39c>
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	07da      	lsls	r2, r3, #31
 80157b4:	d438      	bmi.n	8015828 <_printf_float+0x39c>
 80157b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157b8:	9a05      	ldr	r2, [sp, #20]
 80157ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157bc:	1a9a      	subs	r2, r3, r2
 80157be:	eba3 0901 	sub.w	r9, r3, r1
 80157c2:	4591      	cmp	r9, r2
 80157c4:	bfa8      	it	ge
 80157c6:	4691      	movge	r9, r2
 80157c8:	f1b9 0f00 	cmp.w	r9, #0
 80157cc:	dc35      	bgt.n	801583a <_printf_float+0x3ae>
 80157ce:	f04f 0800 	mov.w	r8, #0
 80157d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80157d6:	f104 0a1a 	add.w	sl, r4, #26
 80157da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157de:	1a9b      	subs	r3, r3, r2
 80157e0:	eba3 0309 	sub.w	r3, r3, r9
 80157e4:	4543      	cmp	r3, r8
 80157e6:	f77f af79 	ble.w	80156dc <_printf_float+0x250>
 80157ea:	2301      	movs	r3, #1
 80157ec:	4652      	mov	r2, sl
 80157ee:	4631      	mov	r1, r6
 80157f0:	4628      	mov	r0, r5
 80157f2:	47b8      	blx	r7
 80157f4:	3001      	adds	r0, #1
 80157f6:	f43f aeaa 	beq.w	801554e <_printf_float+0xc2>
 80157fa:	f108 0801 	add.w	r8, r8, #1
 80157fe:	e7ec      	b.n	80157da <_printf_float+0x34e>
 8015800:	4613      	mov	r3, r2
 8015802:	4631      	mov	r1, r6
 8015804:	4642      	mov	r2, r8
 8015806:	4628      	mov	r0, r5
 8015808:	47b8      	blx	r7
 801580a:	3001      	adds	r0, #1
 801580c:	d1c0      	bne.n	8015790 <_printf_float+0x304>
 801580e:	e69e      	b.n	801554e <_printf_float+0xc2>
 8015810:	2301      	movs	r3, #1
 8015812:	4631      	mov	r1, r6
 8015814:	4628      	mov	r0, r5
 8015816:	9205      	str	r2, [sp, #20]
 8015818:	47b8      	blx	r7
 801581a:	3001      	adds	r0, #1
 801581c:	f43f ae97 	beq.w	801554e <_printf_float+0xc2>
 8015820:	9a05      	ldr	r2, [sp, #20]
 8015822:	f10b 0b01 	add.w	fp, fp, #1
 8015826:	e7b9      	b.n	801579c <_printf_float+0x310>
 8015828:	ee18 3a10 	vmov	r3, s16
 801582c:	4652      	mov	r2, sl
 801582e:	4631      	mov	r1, r6
 8015830:	4628      	mov	r0, r5
 8015832:	47b8      	blx	r7
 8015834:	3001      	adds	r0, #1
 8015836:	d1be      	bne.n	80157b6 <_printf_float+0x32a>
 8015838:	e689      	b.n	801554e <_printf_float+0xc2>
 801583a:	9a05      	ldr	r2, [sp, #20]
 801583c:	464b      	mov	r3, r9
 801583e:	4442      	add	r2, r8
 8015840:	4631      	mov	r1, r6
 8015842:	4628      	mov	r0, r5
 8015844:	47b8      	blx	r7
 8015846:	3001      	adds	r0, #1
 8015848:	d1c1      	bne.n	80157ce <_printf_float+0x342>
 801584a:	e680      	b.n	801554e <_printf_float+0xc2>
 801584c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801584e:	2a01      	cmp	r2, #1
 8015850:	dc01      	bgt.n	8015856 <_printf_float+0x3ca>
 8015852:	07db      	lsls	r3, r3, #31
 8015854:	d538      	bpl.n	80158c8 <_printf_float+0x43c>
 8015856:	2301      	movs	r3, #1
 8015858:	4642      	mov	r2, r8
 801585a:	4631      	mov	r1, r6
 801585c:	4628      	mov	r0, r5
 801585e:	47b8      	blx	r7
 8015860:	3001      	adds	r0, #1
 8015862:	f43f ae74 	beq.w	801554e <_printf_float+0xc2>
 8015866:	ee18 3a10 	vmov	r3, s16
 801586a:	4652      	mov	r2, sl
 801586c:	4631      	mov	r1, r6
 801586e:	4628      	mov	r0, r5
 8015870:	47b8      	blx	r7
 8015872:	3001      	adds	r0, #1
 8015874:	f43f ae6b 	beq.w	801554e <_printf_float+0xc2>
 8015878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801587c:	2200      	movs	r2, #0
 801587e:	2300      	movs	r3, #0
 8015880:	f7eb f942 	bl	8000b08 <__aeabi_dcmpeq>
 8015884:	b9d8      	cbnz	r0, 80158be <_printf_float+0x432>
 8015886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015888:	f108 0201 	add.w	r2, r8, #1
 801588c:	3b01      	subs	r3, #1
 801588e:	4631      	mov	r1, r6
 8015890:	4628      	mov	r0, r5
 8015892:	47b8      	blx	r7
 8015894:	3001      	adds	r0, #1
 8015896:	d10e      	bne.n	80158b6 <_printf_float+0x42a>
 8015898:	e659      	b.n	801554e <_printf_float+0xc2>
 801589a:	2301      	movs	r3, #1
 801589c:	4652      	mov	r2, sl
 801589e:	4631      	mov	r1, r6
 80158a0:	4628      	mov	r0, r5
 80158a2:	47b8      	blx	r7
 80158a4:	3001      	adds	r0, #1
 80158a6:	f43f ae52 	beq.w	801554e <_printf_float+0xc2>
 80158aa:	f108 0801 	add.w	r8, r8, #1
 80158ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b0:	3b01      	subs	r3, #1
 80158b2:	4543      	cmp	r3, r8
 80158b4:	dcf1      	bgt.n	801589a <_printf_float+0x40e>
 80158b6:	464b      	mov	r3, r9
 80158b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80158bc:	e6dc      	b.n	8015678 <_printf_float+0x1ec>
 80158be:	f04f 0800 	mov.w	r8, #0
 80158c2:	f104 0a1a 	add.w	sl, r4, #26
 80158c6:	e7f2      	b.n	80158ae <_printf_float+0x422>
 80158c8:	2301      	movs	r3, #1
 80158ca:	4642      	mov	r2, r8
 80158cc:	e7df      	b.n	801588e <_printf_float+0x402>
 80158ce:	2301      	movs	r3, #1
 80158d0:	464a      	mov	r2, r9
 80158d2:	4631      	mov	r1, r6
 80158d4:	4628      	mov	r0, r5
 80158d6:	47b8      	blx	r7
 80158d8:	3001      	adds	r0, #1
 80158da:	f43f ae38 	beq.w	801554e <_printf_float+0xc2>
 80158de:	f108 0801 	add.w	r8, r8, #1
 80158e2:	68e3      	ldr	r3, [r4, #12]
 80158e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158e6:	1a5b      	subs	r3, r3, r1
 80158e8:	4543      	cmp	r3, r8
 80158ea:	dcf0      	bgt.n	80158ce <_printf_float+0x442>
 80158ec:	e6fa      	b.n	80156e4 <_printf_float+0x258>
 80158ee:	f04f 0800 	mov.w	r8, #0
 80158f2:	f104 0919 	add.w	r9, r4, #25
 80158f6:	e7f4      	b.n	80158e2 <_printf_float+0x456>

080158f8 <_printf_common>:
 80158f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158fc:	4616      	mov	r6, r2
 80158fe:	4699      	mov	r9, r3
 8015900:	688a      	ldr	r2, [r1, #8]
 8015902:	690b      	ldr	r3, [r1, #16]
 8015904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015908:	4293      	cmp	r3, r2
 801590a:	bfb8      	it	lt
 801590c:	4613      	movlt	r3, r2
 801590e:	6033      	str	r3, [r6, #0]
 8015910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015914:	4607      	mov	r7, r0
 8015916:	460c      	mov	r4, r1
 8015918:	b10a      	cbz	r2, 801591e <_printf_common+0x26>
 801591a:	3301      	adds	r3, #1
 801591c:	6033      	str	r3, [r6, #0]
 801591e:	6823      	ldr	r3, [r4, #0]
 8015920:	0699      	lsls	r1, r3, #26
 8015922:	bf42      	ittt	mi
 8015924:	6833      	ldrmi	r3, [r6, #0]
 8015926:	3302      	addmi	r3, #2
 8015928:	6033      	strmi	r3, [r6, #0]
 801592a:	6825      	ldr	r5, [r4, #0]
 801592c:	f015 0506 	ands.w	r5, r5, #6
 8015930:	d106      	bne.n	8015940 <_printf_common+0x48>
 8015932:	f104 0a19 	add.w	sl, r4, #25
 8015936:	68e3      	ldr	r3, [r4, #12]
 8015938:	6832      	ldr	r2, [r6, #0]
 801593a:	1a9b      	subs	r3, r3, r2
 801593c:	42ab      	cmp	r3, r5
 801593e:	dc26      	bgt.n	801598e <_printf_common+0x96>
 8015940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015944:	1e13      	subs	r3, r2, #0
 8015946:	6822      	ldr	r2, [r4, #0]
 8015948:	bf18      	it	ne
 801594a:	2301      	movne	r3, #1
 801594c:	0692      	lsls	r2, r2, #26
 801594e:	d42b      	bmi.n	80159a8 <_printf_common+0xb0>
 8015950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015954:	4649      	mov	r1, r9
 8015956:	4638      	mov	r0, r7
 8015958:	47c0      	blx	r8
 801595a:	3001      	adds	r0, #1
 801595c:	d01e      	beq.n	801599c <_printf_common+0xa4>
 801595e:	6823      	ldr	r3, [r4, #0]
 8015960:	68e5      	ldr	r5, [r4, #12]
 8015962:	6832      	ldr	r2, [r6, #0]
 8015964:	f003 0306 	and.w	r3, r3, #6
 8015968:	2b04      	cmp	r3, #4
 801596a:	bf08      	it	eq
 801596c:	1aad      	subeq	r5, r5, r2
 801596e:	68a3      	ldr	r3, [r4, #8]
 8015970:	6922      	ldr	r2, [r4, #16]
 8015972:	bf0c      	ite	eq
 8015974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015978:	2500      	movne	r5, #0
 801597a:	4293      	cmp	r3, r2
 801597c:	bfc4      	itt	gt
 801597e:	1a9b      	subgt	r3, r3, r2
 8015980:	18ed      	addgt	r5, r5, r3
 8015982:	2600      	movs	r6, #0
 8015984:	341a      	adds	r4, #26
 8015986:	42b5      	cmp	r5, r6
 8015988:	d11a      	bne.n	80159c0 <_printf_common+0xc8>
 801598a:	2000      	movs	r0, #0
 801598c:	e008      	b.n	80159a0 <_printf_common+0xa8>
 801598e:	2301      	movs	r3, #1
 8015990:	4652      	mov	r2, sl
 8015992:	4649      	mov	r1, r9
 8015994:	4638      	mov	r0, r7
 8015996:	47c0      	blx	r8
 8015998:	3001      	adds	r0, #1
 801599a:	d103      	bne.n	80159a4 <_printf_common+0xac>
 801599c:	f04f 30ff 	mov.w	r0, #4294967295
 80159a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159a4:	3501      	adds	r5, #1
 80159a6:	e7c6      	b.n	8015936 <_printf_common+0x3e>
 80159a8:	18e1      	adds	r1, r4, r3
 80159aa:	1c5a      	adds	r2, r3, #1
 80159ac:	2030      	movs	r0, #48	; 0x30
 80159ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80159b2:	4422      	add	r2, r4
 80159b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159bc:	3302      	adds	r3, #2
 80159be:	e7c7      	b.n	8015950 <_printf_common+0x58>
 80159c0:	2301      	movs	r3, #1
 80159c2:	4622      	mov	r2, r4
 80159c4:	4649      	mov	r1, r9
 80159c6:	4638      	mov	r0, r7
 80159c8:	47c0      	blx	r8
 80159ca:	3001      	adds	r0, #1
 80159cc:	d0e6      	beq.n	801599c <_printf_common+0xa4>
 80159ce:	3601      	adds	r6, #1
 80159d0:	e7d9      	b.n	8015986 <_printf_common+0x8e>
	...

080159d4 <_printf_i>:
 80159d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159d8:	7e0f      	ldrb	r7, [r1, #24]
 80159da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80159dc:	2f78      	cmp	r7, #120	; 0x78
 80159de:	4691      	mov	r9, r2
 80159e0:	4680      	mov	r8, r0
 80159e2:	460c      	mov	r4, r1
 80159e4:	469a      	mov	sl, r3
 80159e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80159ea:	d807      	bhi.n	80159fc <_printf_i+0x28>
 80159ec:	2f62      	cmp	r7, #98	; 0x62
 80159ee:	d80a      	bhi.n	8015a06 <_printf_i+0x32>
 80159f0:	2f00      	cmp	r7, #0
 80159f2:	f000 80d8 	beq.w	8015ba6 <_printf_i+0x1d2>
 80159f6:	2f58      	cmp	r7, #88	; 0x58
 80159f8:	f000 80a3 	beq.w	8015b42 <_printf_i+0x16e>
 80159fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015a04:	e03a      	b.n	8015a7c <_printf_i+0xa8>
 8015a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015a0a:	2b15      	cmp	r3, #21
 8015a0c:	d8f6      	bhi.n	80159fc <_printf_i+0x28>
 8015a0e:	a101      	add	r1, pc, #4	; (adr r1, 8015a14 <_printf_i+0x40>)
 8015a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015a14:	08015a6d 	.word	0x08015a6d
 8015a18:	08015a81 	.word	0x08015a81
 8015a1c:	080159fd 	.word	0x080159fd
 8015a20:	080159fd 	.word	0x080159fd
 8015a24:	080159fd 	.word	0x080159fd
 8015a28:	080159fd 	.word	0x080159fd
 8015a2c:	08015a81 	.word	0x08015a81
 8015a30:	080159fd 	.word	0x080159fd
 8015a34:	080159fd 	.word	0x080159fd
 8015a38:	080159fd 	.word	0x080159fd
 8015a3c:	080159fd 	.word	0x080159fd
 8015a40:	08015b8d 	.word	0x08015b8d
 8015a44:	08015ab1 	.word	0x08015ab1
 8015a48:	08015b6f 	.word	0x08015b6f
 8015a4c:	080159fd 	.word	0x080159fd
 8015a50:	080159fd 	.word	0x080159fd
 8015a54:	08015baf 	.word	0x08015baf
 8015a58:	080159fd 	.word	0x080159fd
 8015a5c:	08015ab1 	.word	0x08015ab1
 8015a60:	080159fd 	.word	0x080159fd
 8015a64:	080159fd 	.word	0x080159fd
 8015a68:	08015b77 	.word	0x08015b77
 8015a6c:	682b      	ldr	r3, [r5, #0]
 8015a6e:	1d1a      	adds	r2, r3, #4
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	602a      	str	r2, [r5, #0]
 8015a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	e0a3      	b.n	8015bc8 <_printf_i+0x1f4>
 8015a80:	6820      	ldr	r0, [r4, #0]
 8015a82:	6829      	ldr	r1, [r5, #0]
 8015a84:	0606      	lsls	r6, r0, #24
 8015a86:	f101 0304 	add.w	r3, r1, #4
 8015a8a:	d50a      	bpl.n	8015aa2 <_printf_i+0xce>
 8015a8c:	680e      	ldr	r6, [r1, #0]
 8015a8e:	602b      	str	r3, [r5, #0]
 8015a90:	2e00      	cmp	r6, #0
 8015a92:	da03      	bge.n	8015a9c <_printf_i+0xc8>
 8015a94:	232d      	movs	r3, #45	; 0x2d
 8015a96:	4276      	negs	r6, r6
 8015a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a9c:	485e      	ldr	r0, [pc, #376]	; (8015c18 <_printf_i+0x244>)
 8015a9e:	230a      	movs	r3, #10
 8015aa0:	e019      	b.n	8015ad6 <_printf_i+0x102>
 8015aa2:	680e      	ldr	r6, [r1, #0]
 8015aa4:	602b      	str	r3, [r5, #0]
 8015aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015aaa:	bf18      	it	ne
 8015aac:	b236      	sxthne	r6, r6
 8015aae:	e7ef      	b.n	8015a90 <_printf_i+0xbc>
 8015ab0:	682b      	ldr	r3, [r5, #0]
 8015ab2:	6820      	ldr	r0, [r4, #0]
 8015ab4:	1d19      	adds	r1, r3, #4
 8015ab6:	6029      	str	r1, [r5, #0]
 8015ab8:	0601      	lsls	r1, r0, #24
 8015aba:	d501      	bpl.n	8015ac0 <_printf_i+0xec>
 8015abc:	681e      	ldr	r6, [r3, #0]
 8015abe:	e002      	b.n	8015ac6 <_printf_i+0xf2>
 8015ac0:	0646      	lsls	r6, r0, #25
 8015ac2:	d5fb      	bpl.n	8015abc <_printf_i+0xe8>
 8015ac4:	881e      	ldrh	r6, [r3, #0]
 8015ac6:	4854      	ldr	r0, [pc, #336]	; (8015c18 <_printf_i+0x244>)
 8015ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8015aca:	bf0c      	ite	eq
 8015acc:	2308      	moveq	r3, #8
 8015ace:	230a      	movne	r3, #10
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ad6:	6865      	ldr	r5, [r4, #4]
 8015ad8:	60a5      	str	r5, [r4, #8]
 8015ada:	2d00      	cmp	r5, #0
 8015adc:	bfa2      	ittt	ge
 8015ade:	6821      	ldrge	r1, [r4, #0]
 8015ae0:	f021 0104 	bicge.w	r1, r1, #4
 8015ae4:	6021      	strge	r1, [r4, #0]
 8015ae6:	b90e      	cbnz	r6, 8015aec <_printf_i+0x118>
 8015ae8:	2d00      	cmp	r5, #0
 8015aea:	d04d      	beq.n	8015b88 <_printf_i+0x1b4>
 8015aec:	4615      	mov	r5, r2
 8015aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8015af2:	fb03 6711 	mls	r7, r3, r1, r6
 8015af6:	5dc7      	ldrb	r7, [r0, r7]
 8015af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015afc:	4637      	mov	r7, r6
 8015afe:	42bb      	cmp	r3, r7
 8015b00:	460e      	mov	r6, r1
 8015b02:	d9f4      	bls.n	8015aee <_printf_i+0x11a>
 8015b04:	2b08      	cmp	r3, #8
 8015b06:	d10b      	bne.n	8015b20 <_printf_i+0x14c>
 8015b08:	6823      	ldr	r3, [r4, #0]
 8015b0a:	07de      	lsls	r6, r3, #31
 8015b0c:	d508      	bpl.n	8015b20 <_printf_i+0x14c>
 8015b0e:	6923      	ldr	r3, [r4, #16]
 8015b10:	6861      	ldr	r1, [r4, #4]
 8015b12:	4299      	cmp	r1, r3
 8015b14:	bfde      	ittt	le
 8015b16:	2330      	movle	r3, #48	; 0x30
 8015b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015b20:	1b52      	subs	r2, r2, r5
 8015b22:	6122      	str	r2, [r4, #16]
 8015b24:	f8cd a000 	str.w	sl, [sp]
 8015b28:	464b      	mov	r3, r9
 8015b2a:	aa03      	add	r2, sp, #12
 8015b2c:	4621      	mov	r1, r4
 8015b2e:	4640      	mov	r0, r8
 8015b30:	f7ff fee2 	bl	80158f8 <_printf_common>
 8015b34:	3001      	adds	r0, #1
 8015b36:	d14c      	bne.n	8015bd2 <_printf_i+0x1fe>
 8015b38:	f04f 30ff 	mov.w	r0, #4294967295
 8015b3c:	b004      	add	sp, #16
 8015b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b42:	4835      	ldr	r0, [pc, #212]	; (8015c18 <_printf_i+0x244>)
 8015b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015b48:	6829      	ldr	r1, [r5, #0]
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015b50:	6029      	str	r1, [r5, #0]
 8015b52:	061d      	lsls	r5, r3, #24
 8015b54:	d514      	bpl.n	8015b80 <_printf_i+0x1ac>
 8015b56:	07df      	lsls	r7, r3, #31
 8015b58:	bf44      	itt	mi
 8015b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8015b5e:	6023      	strmi	r3, [r4, #0]
 8015b60:	b91e      	cbnz	r6, 8015b6a <_printf_i+0x196>
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	f023 0320 	bic.w	r3, r3, #32
 8015b68:	6023      	str	r3, [r4, #0]
 8015b6a:	2310      	movs	r3, #16
 8015b6c:	e7b0      	b.n	8015ad0 <_printf_i+0xfc>
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	f043 0320 	orr.w	r3, r3, #32
 8015b74:	6023      	str	r3, [r4, #0]
 8015b76:	2378      	movs	r3, #120	; 0x78
 8015b78:	4828      	ldr	r0, [pc, #160]	; (8015c1c <_printf_i+0x248>)
 8015b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b7e:	e7e3      	b.n	8015b48 <_printf_i+0x174>
 8015b80:	0659      	lsls	r1, r3, #25
 8015b82:	bf48      	it	mi
 8015b84:	b2b6      	uxthmi	r6, r6
 8015b86:	e7e6      	b.n	8015b56 <_printf_i+0x182>
 8015b88:	4615      	mov	r5, r2
 8015b8a:	e7bb      	b.n	8015b04 <_printf_i+0x130>
 8015b8c:	682b      	ldr	r3, [r5, #0]
 8015b8e:	6826      	ldr	r6, [r4, #0]
 8015b90:	6961      	ldr	r1, [r4, #20]
 8015b92:	1d18      	adds	r0, r3, #4
 8015b94:	6028      	str	r0, [r5, #0]
 8015b96:	0635      	lsls	r5, r6, #24
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	d501      	bpl.n	8015ba0 <_printf_i+0x1cc>
 8015b9c:	6019      	str	r1, [r3, #0]
 8015b9e:	e002      	b.n	8015ba6 <_printf_i+0x1d2>
 8015ba0:	0670      	lsls	r0, r6, #25
 8015ba2:	d5fb      	bpl.n	8015b9c <_printf_i+0x1c8>
 8015ba4:	8019      	strh	r1, [r3, #0]
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	6123      	str	r3, [r4, #16]
 8015baa:	4615      	mov	r5, r2
 8015bac:	e7ba      	b.n	8015b24 <_printf_i+0x150>
 8015bae:	682b      	ldr	r3, [r5, #0]
 8015bb0:	1d1a      	adds	r2, r3, #4
 8015bb2:	602a      	str	r2, [r5, #0]
 8015bb4:	681d      	ldr	r5, [r3, #0]
 8015bb6:	6862      	ldr	r2, [r4, #4]
 8015bb8:	2100      	movs	r1, #0
 8015bba:	4628      	mov	r0, r5
 8015bbc:	f7ea fb30 	bl	8000220 <memchr>
 8015bc0:	b108      	cbz	r0, 8015bc6 <_printf_i+0x1f2>
 8015bc2:	1b40      	subs	r0, r0, r5
 8015bc4:	6060      	str	r0, [r4, #4]
 8015bc6:	6863      	ldr	r3, [r4, #4]
 8015bc8:	6123      	str	r3, [r4, #16]
 8015bca:	2300      	movs	r3, #0
 8015bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bd0:	e7a8      	b.n	8015b24 <_printf_i+0x150>
 8015bd2:	6923      	ldr	r3, [r4, #16]
 8015bd4:	462a      	mov	r2, r5
 8015bd6:	4649      	mov	r1, r9
 8015bd8:	4640      	mov	r0, r8
 8015bda:	47d0      	blx	sl
 8015bdc:	3001      	adds	r0, #1
 8015bde:	d0ab      	beq.n	8015b38 <_printf_i+0x164>
 8015be0:	6823      	ldr	r3, [r4, #0]
 8015be2:	079b      	lsls	r3, r3, #30
 8015be4:	d413      	bmi.n	8015c0e <_printf_i+0x23a>
 8015be6:	68e0      	ldr	r0, [r4, #12]
 8015be8:	9b03      	ldr	r3, [sp, #12]
 8015bea:	4298      	cmp	r0, r3
 8015bec:	bfb8      	it	lt
 8015bee:	4618      	movlt	r0, r3
 8015bf0:	e7a4      	b.n	8015b3c <_printf_i+0x168>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	4632      	mov	r2, r6
 8015bf6:	4649      	mov	r1, r9
 8015bf8:	4640      	mov	r0, r8
 8015bfa:	47d0      	blx	sl
 8015bfc:	3001      	adds	r0, #1
 8015bfe:	d09b      	beq.n	8015b38 <_printf_i+0x164>
 8015c00:	3501      	adds	r5, #1
 8015c02:	68e3      	ldr	r3, [r4, #12]
 8015c04:	9903      	ldr	r1, [sp, #12]
 8015c06:	1a5b      	subs	r3, r3, r1
 8015c08:	42ab      	cmp	r3, r5
 8015c0a:	dcf2      	bgt.n	8015bf2 <_printf_i+0x21e>
 8015c0c:	e7eb      	b.n	8015be6 <_printf_i+0x212>
 8015c0e:	2500      	movs	r5, #0
 8015c10:	f104 0619 	add.w	r6, r4, #25
 8015c14:	e7f5      	b.n	8015c02 <_printf_i+0x22e>
 8015c16:	bf00      	nop
 8015c18:	08073639 	.word	0x08073639
 8015c1c:	0807364a 	.word	0x0807364a

08015c20 <_sbrk_r>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4d06      	ldr	r5, [pc, #24]	; (8015c3c <_sbrk_r+0x1c>)
 8015c24:	2300      	movs	r3, #0
 8015c26:	4604      	mov	r4, r0
 8015c28:	4608      	mov	r0, r1
 8015c2a:	602b      	str	r3, [r5, #0]
 8015c2c:	f7ee ffdc 	bl	8004be8 <_sbrk>
 8015c30:	1c43      	adds	r3, r0, #1
 8015c32:	d102      	bne.n	8015c3a <_sbrk_r+0x1a>
 8015c34:	682b      	ldr	r3, [r5, #0]
 8015c36:	b103      	cbz	r3, 8015c3a <_sbrk_r+0x1a>
 8015c38:	6023      	str	r3, [r4, #0]
 8015c3a:	bd38      	pop	{r3, r4, r5, pc}
 8015c3c:	20005e78 	.word	0x20005e78

08015c40 <siprintf>:
 8015c40:	b40e      	push	{r1, r2, r3}
 8015c42:	b500      	push	{lr}
 8015c44:	b09c      	sub	sp, #112	; 0x70
 8015c46:	ab1d      	add	r3, sp, #116	; 0x74
 8015c48:	9002      	str	r0, [sp, #8]
 8015c4a:	9006      	str	r0, [sp, #24]
 8015c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c50:	4809      	ldr	r0, [pc, #36]	; (8015c78 <siprintf+0x38>)
 8015c52:	9107      	str	r1, [sp, #28]
 8015c54:	9104      	str	r1, [sp, #16]
 8015c56:	4909      	ldr	r1, [pc, #36]	; (8015c7c <siprintf+0x3c>)
 8015c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c5c:	9105      	str	r1, [sp, #20]
 8015c5e:	6800      	ldr	r0, [r0, #0]
 8015c60:	9301      	str	r3, [sp, #4]
 8015c62:	a902      	add	r1, sp, #8
 8015c64:	f003 fd20 	bl	80196a8 <_svfiprintf_r>
 8015c68:	9b02      	ldr	r3, [sp, #8]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	701a      	strb	r2, [r3, #0]
 8015c6e:	b01c      	add	sp, #112	; 0x70
 8015c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c74:	b003      	add	sp, #12
 8015c76:	4770      	bx	lr
 8015c78:	20000224 	.word	0x20000224
 8015c7c:	ffff0208 	.word	0xffff0208

08015c80 <siscanf>:
 8015c80:	b40e      	push	{r1, r2, r3}
 8015c82:	b510      	push	{r4, lr}
 8015c84:	b09f      	sub	sp, #124	; 0x7c
 8015c86:	ac21      	add	r4, sp, #132	; 0x84
 8015c88:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015c8c:	f854 2b04 	ldr.w	r2, [r4], #4
 8015c90:	9201      	str	r2, [sp, #4]
 8015c92:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015c96:	9004      	str	r0, [sp, #16]
 8015c98:	9008      	str	r0, [sp, #32]
 8015c9a:	f7ea fab3 	bl	8000204 <strlen>
 8015c9e:	4b0c      	ldr	r3, [pc, #48]	; (8015cd0 <siscanf+0x50>)
 8015ca0:	9005      	str	r0, [sp, #20]
 8015ca2:	9009      	str	r0, [sp, #36]	; 0x24
 8015ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ca6:	480b      	ldr	r0, [pc, #44]	; (8015cd4 <siscanf+0x54>)
 8015ca8:	9a01      	ldr	r2, [sp, #4]
 8015caa:	6800      	ldr	r0, [r0, #0]
 8015cac:	9403      	str	r4, [sp, #12]
 8015cae:	2300      	movs	r3, #0
 8015cb0:	9311      	str	r3, [sp, #68]	; 0x44
 8015cb2:	9316      	str	r3, [sp, #88]	; 0x58
 8015cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cb8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015cbc:	a904      	add	r1, sp, #16
 8015cbe:	4623      	mov	r3, r4
 8015cc0:	f003 fe4c 	bl	801995c <__ssvfiscanf_r>
 8015cc4:	b01f      	add	sp, #124	; 0x7c
 8015cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cca:	b003      	add	sp, #12
 8015ccc:	4770      	bx	lr
 8015cce:	bf00      	nop
 8015cd0:	08015cfb 	.word	0x08015cfb
 8015cd4:	20000224 	.word	0x20000224

08015cd8 <__sread>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	460c      	mov	r4, r1
 8015cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ce0:	f004 f906 	bl	8019ef0 <_read_r>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	bfab      	itete	ge
 8015ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cea:	89a3      	ldrhlt	r3, [r4, #12]
 8015cec:	181b      	addge	r3, r3, r0
 8015cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cf2:	bfac      	ite	ge
 8015cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015cf6:	81a3      	strhlt	r3, [r4, #12]
 8015cf8:	bd10      	pop	{r4, pc}

08015cfa <__seofread>:
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	4770      	bx	lr

08015cfe <__swrite>:
 8015cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d02:	461f      	mov	r7, r3
 8015d04:	898b      	ldrh	r3, [r1, #12]
 8015d06:	05db      	lsls	r3, r3, #23
 8015d08:	4605      	mov	r5, r0
 8015d0a:	460c      	mov	r4, r1
 8015d0c:	4616      	mov	r6, r2
 8015d0e:	d505      	bpl.n	8015d1c <__swrite+0x1e>
 8015d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d14:	2302      	movs	r3, #2
 8015d16:	2200      	movs	r2, #0
 8015d18:	f002 feb4 	bl	8018a84 <_lseek_r>
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d26:	81a3      	strh	r3, [r4, #12]
 8015d28:	4632      	mov	r2, r6
 8015d2a:	463b      	mov	r3, r7
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d32:	f001 ba07 	b.w	8017144 <_write_r>

08015d36 <__sseek>:
 8015d36:	b510      	push	{r4, lr}
 8015d38:	460c      	mov	r4, r1
 8015d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d3e:	f002 fea1 	bl	8018a84 <_lseek_r>
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	89a3      	ldrh	r3, [r4, #12]
 8015d46:	bf15      	itete	ne
 8015d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d52:	81a3      	strheq	r3, [r4, #12]
 8015d54:	bf18      	it	ne
 8015d56:	81a3      	strhne	r3, [r4, #12]
 8015d58:	bd10      	pop	{r4, pc}

08015d5a <__sclose>:
 8015d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d5e:	f001 ba79 	b.w	8017254 <_close_r>

08015d62 <strcpy>:
 8015d62:	4603      	mov	r3, r0
 8015d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d68:	f803 2b01 	strb.w	r2, [r3], #1
 8015d6c:	2a00      	cmp	r2, #0
 8015d6e:	d1f9      	bne.n	8015d64 <strcpy+0x2>
 8015d70:	4770      	bx	lr

08015d72 <strncpy>:
 8015d72:	b510      	push	{r4, lr}
 8015d74:	3901      	subs	r1, #1
 8015d76:	4603      	mov	r3, r0
 8015d78:	b132      	cbz	r2, 8015d88 <strncpy+0x16>
 8015d7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d7e:	f803 4b01 	strb.w	r4, [r3], #1
 8015d82:	3a01      	subs	r2, #1
 8015d84:	2c00      	cmp	r4, #0
 8015d86:	d1f7      	bne.n	8015d78 <strncpy+0x6>
 8015d88:	441a      	add	r2, r3
 8015d8a:	2100      	movs	r1, #0
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	d100      	bne.n	8015d92 <strncpy+0x20>
 8015d90:	bd10      	pop	{r4, pc}
 8015d92:	f803 1b01 	strb.w	r1, [r3], #1
 8015d96:	e7f9      	b.n	8015d8c <strncpy+0x1a>

08015d98 <strpbrk>:
 8015d98:	b570      	push	{r4, r5, r6, lr}
 8015d9a:	7803      	ldrb	r3, [r0, #0]
 8015d9c:	b1a3      	cbz	r3, 8015dc8 <strpbrk+0x30>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	460c      	mov	r4, r1
 8015da2:	4618      	mov	r0, r3
 8015da4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8015da8:	b14d      	cbz	r5, 8015dbe <strpbrk+0x26>
 8015daa:	460a      	mov	r2, r1
 8015dac:	e001      	b.n	8015db2 <strpbrk+0x1a>
 8015dae:	42ae      	cmp	r6, r5
 8015db0:	d009      	beq.n	8015dc6 <strpbrk+0x2e>
 8015db2:	4614      	mov	r4, r2
 8015db4:	f812 6b01 	ldrb.w	r6, [r2], #1
 8015db8:	2e00      	cmp	r6, #0
 8015dba:	d1f8      	bne.n	8015dae <strpbrk+0x16>
 8015dbc:	e7f1      	b.n	8015da2 <strpbrk+0xa>
 8015dbe:	7823      	ldrb	r3, [r4, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	bf08      	it	eq
 8015dc4:	2000      	moveq	r0, #0
 8015dc6:	bd70      	pop	{r4, r5, r6, pc}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	e7fc      	b.n	8015dc6 <strpbrk+0x2e>

08015dcc <strstr>:
 8015dcc:	780a      	ldrb	r2, [r1, #0]
 8015dce:	b570      	push	{r4, r5, r6, lr}
 8015dd0:	b96a      	cbnz	r2, 8015dee <strstr+0x22>
 8015dd2:	bd70      	pop	{r4, r5, r6, pc}
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d109      	bne.n	8015dec <strstr+0x20>
 8015dd8:	460c      	mov	r4, r1
 8015dda:	4605      	mov	r5, r0
 8015ddc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d0f6      	beq.n	8015dd2 <strstr+0x6>
 8015de4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015de8:	429e      	cmp	r6, r3
 8015dea:	d0f7      	beq.n	8015ddc <strstr+0x10>
 8015dec:	3001      	adds	r0, #1
 8015dee:	7803      	ldrb	r3, [r0, #0]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d1ef      	bne.n	8015dd4 <strstr+0x8>
 8015df4:	4618      	mov	r0, r3
 8015df6:	e7ec      	b.n	8015dd2 <strstr+0x6>

08015df8 <sulp>:
 8015df8:	b570      	push	{r4, r5, r6, lr}
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	460d      	mov	r5, r1
 8015dfe:	ec45 4b10 	vmov	d0, r4, r5
 8015e02:	4616      	mov	r6, r2
 8015e04:	f003 fa60 	bl	80192c8 <__ulp>
 8015e08:	ec51 0b10 	vmov	r0, r1, d0
 8015e0c:	b17e      	cbz	r6, 8015e2e <sulp+0x36>
 8015e0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	dd09      	ble.n	8015e2e <sulp+0x36>
 8015e1a:	051b      	lsls	r3, r3, #20
 8015e1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e20:	2400      	movs	r4, #0
 8015e22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e26:	4622      	mov	r2, r4
 8015e28:	462b      	mov	r3, r5
 8015e2a:	f7ea fc05 	bl	8000638 <__aeabi_dmul>
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}

08015e30 <_strtod_l>:
 8015e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e34:	ed2d 8b02 	vpush	{d8}
 8015e38:	b09d      	sub	sp, #116	; 0x74
 8015e3a:	461f      	mov	r7, r3
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	9318      	str	r3, [sp, #96]	; 0x60
 8015e40:	4ba2      	ldr	r3, [pc, #648]	; (80160cc <_strtod_l+0x29c>)
 8015e42:	9213      	str	r2, [sp, #76]	; 0x4c
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	9305      	str	r3, [sp, #20]
 8015e48:	4604      	mov	r4, r0
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	4688      	mov	r8, r1
 8015e4e:	f7ea f9d9 	bl	8000204 <strlen>
 8015e52:	f04f 0a00 	mov.w	sl, #0
 8015e56:	4605      	mov	r5, r0
 8015e58:	f04f 0b00 	mov.w	fp, #0
 8015e5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	2a2b      	cmp	r2, #43	; 0x2b
 8015e66:	d04e      	beq.n	8015f06 <_strtod_l+0xd6>
 8015e68:	d83b      	bhi.n	8015ee2 <_strtod_l+0xb2>
 8015e6a:	2a0d      	cmp	r2, #13
 8015e6c:	d834      	bhi.n	8015ed8 <_strtod_l+0xa8>
 8015e6e:	2a08      	cmp	r2, #8
 8015e70:	d834      	bhi.n	8015edc <_strtod_l+0xac>
 8015e72:	2a00      	cmp	r2, #0
 8015e74:	d03e      	beq.n	8015ef4 <_strtod_l+0xc4>
 8015e76:	2300      	movs	r3, #0
 8015e78:	930a      	str	r3, [sp, #40]	; 0x28
 8015e7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015e7c:	7833      	ldrb	r3, [r6, #0]
 8015e7e:	2b30      	cmp	r3, #48	; 0x30
 8015e80:	f040 80b0 	bne.w	8015fe4 <_strtod_l+0x1b4>
 8015e84:	7873      	ldrb	r3, [r6, #1]
 8015e86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015e8a:	2b58      	cmp	r3, #88	; 0x58
 8015e8c:	d168      	bne.n	8015f60 <_strtod_l+0x130>
 8015e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e90:	9301      	str	r3, [sp, #4]
 8015e92:	ab18      	add	r3, sp, #96	; 0x60
 8015e94:	9702      	str	r7, [sp, #8]
 8015e96:	9300      	str	r3, [sp, #0]
 8015e98:	4a8d      	ldr	r2, [pc, #564]	; (80160d0 <_strtod_l+0x2a0>)
 8015e9a:	ab19      	add	r3, sp, #100	; 0x64
 8015e9c:	a917      	add	r1, sp, #92	; 0x5c
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f002 fa96 	bl	80183d0 <__gethex>
 8015ea4:	f010 0707 	ands.w	r7, r0, #7
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	d005      	beq.n	8015eb8 <_strtod_l+0x88>
 8015eac:	2f06      	cmp	r7, #6
 8015eae:	d12c      	bne.n	8015f0a <_strtod_l+0xda>
 8015eb0:	3601      	adds	r6, #1
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	9617      	str	r6, [sp, #92]	; 0x5c
 8015eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f040 8590 	bne.w	80169e0 <_strtod_l+0xbb0>
 8015ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ec2:	b1eb      	cbz	r3, 8015f00 <_strtod_l+0xd0>
 8015ec4:	4652      	mov	r2, sl
 8015ec6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015eca:	ec43 2b10 	vmov	d0, r2, r3
 8015ece:	b01d      	add	sp, #116	; 0x74
 8015ed0:	ecbd 8b02 	vpop	{d8}
 8015ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed8:	2a20      	cmp	r2, #32
 8015eda:	d1cc      	bne.n	8015e76 <_strtod_l+0x46>
 8015edc:	3301      	adds	r3, #1
 8015ede:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ee0:	e7be      	b.n	8015e60 <_strtod_l+0x30>
 8015ee2:	2a2d      	cmp	r2, #45	; 0x2d
 8015ee4:	d1c7      	bne.n	8015e76 <_strtod_l+0x46>
 8015ee6:	2201      	movs	r2, #1
 8015ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8015eea:	1c5a      	adds	r2, r3, #1
 8015eec:	9217      	str	r2, [sp, #92]	; 0x5c
 8015eee:	785b      	ldrb	r3, [r3, #1]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d1c2      	bne.n	8015e7a <_strtod_l+0x4a>
 8015ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ef6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	f040 856e 	bne.w	80169dc <_strtod_l+0xbac>
 8015f00:	4652      	mov	r2, sl
 8015f02:	465b      	mov	r3, fp
 8015f04:	e7e1      	b.n	8015eca <_strtod_l+0x9a>
 8015f06:	2200      	movs	r2, #0
 8015f08:	e7ee      	b.n	8015ee8 <_strtod_l+0xb8>
 8015f0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f0c:	b13a      	cbz	r2, 8015f1e <_strtod_l+0xee>
 8015f0e:	2135      	movs	r1, #53	; 0x35
 8015f10:	a81a      	add	r0, sp, #104	; 0x68
 8015f12:	f003 fae4 	bl	80194de <__copybits>
 8015f16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f002 fea3 	bl	8018c64 <_Bfree>
 8015f1e:	3f01      	subs	r7, #1
 8015f20:	2f04      	cmp	r7, #4
 8015f22:	d806      	bhi.n	8015f32 <_strtod_l+0x102>
 8015f24:	e8df f007 	tbb	[pc, r7]
 8015f28:	1714030a 	.word	0x1714030a
 8015f2c:	0a          	.byte	0x0a
 8015f2d:	00          	.byte	0x00
 8015f2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015f32:	0728      	lsls	r0, r5, #28
 8015f34:	d5c0      	bpl.n	8015eb8 <_strtod_l+0x88>
 8015f36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f3a:	e7bd      	b.n	8015eb8 <_strtod_l+0x88>
 8015f3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015f40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015f4e:	e7f0      	b.n	8015f32 <_strtod_l+0x102>
 8015f50:	f8df b180 	ldr.w	fp, [pc, #384]	; 80160d4 <_strtod_l+0x2a4>
 8015f54:	e7ed      	b.n	8015f32 <_strtod_l+0x102>
 8015f56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8015f5e:	e7e8      	b.n	8015f32 <_strtod_l+0x102>
 8015f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f62:	1c5a      	adds	r2, r3, #1
 8015f64:	9217      	str	r2, [sp, #92]	; 0x5c
 8015f66:	785b      	ldrb	r3, [r3, #1]
 8015f68:	2b30      	cmp	r3, #48	; 0x30
 8015f6a:	d0f9      	beq.n	8015f60 <_strtod_l+0x130>
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d0a3      	beq.n	8015eb8 <_strtod_l+0x88>
 8015f70:	2301      	movs	r3, #1
 8015f72:	f04f 0900 	mov.w	r9, #0
 8015f76:	9304      	str	r3, [sp, #16]
 8015f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f7a:	9308      	str	r3, [sp, #32]
 8015f7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8015f80:	464f      	mov	r7, r9
 8015f82:	220a      	movs	r2, #10
 8015f84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015f86:	7806      	ldrb	r6, [r0, #0]
 8015f88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015f8c:	b2d9      	uxtb	r1, r3
 8015f8e:	2909      	cmp	r1, #9
 8015f90:	d92a      	bls.n	8015fe8 <_strtod_l+0x1b8>
 8015f92:	9905      	ldr	r1, [sp, #20]
 8015f94:	462a      	mov	r2, r5
 8015f96:	f004 f843 	bl	801a020 <strncmp>
 8015f9a:	b398      	cbz	r0, 8016004 <_strtod_l+0x1d4>
 8015f9c:	2000      	movs	r0, #0
 8015f9e:	4632      	mov	r2, r6
 8015fa0:	463d      	mov	r5, r7
 8015fa2:	9005      	str	r0, [sp, #20]
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	2a65      	cmp	r2, #101	; 0x65
 8015fa8:	d001      	beq.n	8015fae <_strtod_l+0x17e>
 8015faa:	2a45      	cmp	r2, #69	; 0x45
 8015fac:	d118      	bne.n	8015fe0 <_strtod_l+0x1b0>
 8015fae:	b91d      	cbnz	r5, 8015fb8 <_strtod_l+0x188>
 8015fb0:	9a04      	ldr	r2, [sp, #16]
 8015fb2:	4302      	orrs	r2, r0
 8015fb4:	d09e      	beq.n	8015ef4 <_strtod_l+0xc4>
 8015fb6:	2500      	movs	r5, #0
 8015fb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8015fbc:	f108 0201 	add.w	r2, r8, #1
 8015fc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015fc6:	2a2b      	cmp	r2, #43	; 0x2b
 8015fc8:	d075      	beq.n	80160b6 <_strtod_l+0x286>
 8015fca:	2a2d      	cmp	r2, #45	; 0x2d
 8015fcc:	d07b      	beq.n	80160c6 <_strtod_l+0x296>
 8015fce:	f04f 0c00 	mov.w	ip, #0
 8015fd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015fd6:	2909      	cmp	r1, #9
 8015fd8:	f240 8082 	bls.w	80160e0 <_strtod_l+0x2b0>
 8015fdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015fe0:	2600      	movs	r6, #0
 8015fe2:	e09d      	b.n	8016120 <_strtod_l+0x2f0>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	e7c4      	b.n	8015f72 <_strtod_l+0x142>
 8015fe8:	2f08      	cmp	r7, #8
 8015fea:	bfd8      	it	le
 8015fec:	9907      	ldrle	r1, [sp, #28]
 8015fee:	f100 0001 	add.w	r0, r0, #1
 8015ff2:	bfda      	itte	le
 8015ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8015ff8:	9307      	strle	r3, [sp, #28]
 8015ffa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015ffe:	3701      	adds	r7, #1
 8016000:	9017      	str	r0, [sp, #92]	; 0x5c
 8016002:	e7bf      	b.n	8015f84 <_strtod_l+0x154>
 8016004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016006:	195a      	adds	r2, r3, r5
 8016008:	9217      	str	r2, [sp, #92]	; 0x5c
 801600a:	5d5a      	ldrb	r2, [r3, r5]
 801600c:	2f00      	cmp	r7, #0
 801600e:	d037      	beq.n	8016080 <_strtod_l+0x250>
 8016010:	9005      	str	r0, [sp, #20]
 8016012:	463d      	mov	r5, r7
 8016014:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016018:	2b09      	cmp	r3, #9
 801601a:	d912      	bls.n	8016042 <_strtod_l+0x212>
 801601c:	2301      	movs	r3, #1
 801601e:	e7c2      	b.n	8015fa6 <_strtod_l+0x176>
 8016020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016022:	1c5a      	adds	r2, r3, #1
 8016024:	9217      	str	r2, [sp, #92]	; 0x5c
 8016026:	785a      	ldrb	r2, [r3, #1]
 8016028:	3001      	adds	r0, #1
 801602a:	2a30      	cmp	r2, #48	; 0x30
 801602c:	d0f8      	beq.n	8016020 <_strtod_l+0x1f0>
 801602e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016032:	2b08      	cmp	r3, #8
 8016034:	f200 84d9 	bhi.w	80169ea <_strtod_l+0xbba>
 8016038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801603a:	9005      	str	r0, [sp, #20]
 801603c:	2000      	movs	r0, #0
 801603e:	9308      	str	r3, [sp, #32]
 8016040:	4605      	mov	r5, r0
 8016042:	3a30      	subs	r2, #48	; 0x30
 8016044:	f100 0301 	add.w	r3, r0, #1
 8016048:	d014      	beq.n	8016074 <_strtod_l+0x244>
 801604a:	9905      	ldr	r1, [sp, #20]
 801604c:	4419      	add	r1, r3
 801604e:	9105      	str	r1, [sp, #20]
 8016050:	462b      	mov	r3, r5
 8016052:	eb00 0e05 	add.w	lr, r0, r5
 8016056:	210a      	movs	r1, #10
 8016058:	4573      	cmp	r3, lr
 801605a:	d113      	bne.n	8016084 <_strtod_l+0x254>
 801605c:	182b      	adds	r3, r5, r0
 801605e:	2b08      	cmp	r3, #8
 8016060:	f105 0501 	add.w	r5, r5, #1
 8016064:	4405      	add	r5, r0
 8016066:	dc1c      	bgt.n	80160a2 <_strtod_l+0x272>
 8016068:	9907      	ldr	r1, [sp, #28]
 801606a:	230a      	movs	r3, #10
 801606c:	fb03 2301 	mla	r3, r3, r1, r2
 8016070:	9307      	str	r3, [sp, #28]
 8016072:	2300      	movs	r3, #0
 8016074:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016076:	1c51      	adds	r1, r2, #1
 8016078:	9117      	str	r1, [sp, #92]	; 0x5c
 801607a:	7852      	ldrb	r2, [r2, #1]
 801607c:	4618      	mov	r0, r3
 801607e:	e7c9      	b.n	8016014 <_strtod_l+0x1e4>
 8016080:	4638      	mov	r0, r7
 8016082:	e7d2      	b.n	801602a <_strtod_l+0x1fa>
 8016084:	2b08      	cmp	r3, #8
 8016086:	dc04      	bgt.n	8016092 <_strtod_l+0x262>
 8016088:	9e07      	ldr	r6, [sp, #28]
 801608a:	434e      	muls	r6, r1
 801608c:	9607      	str	r6, [sp, #28]
 801608e:	3301      	adds	r3, #1
 8016090:	e7e2      	b.n	8016058 <_strtod_l+0x228>
 8016092:	f103 0c01 	add.w	ip, r3, #1
 8016096:	f1bc 0f10 	cmp.w	ip, #16
 801609a:	bfd8      	it	le
 801609c:	fb01 f909 	mulle.w	r9, r1, r9
 80160a0:	e7f5      	b.n	801608e <_strtod_l+0x25e>
 80160a2:	2d10      	cmp	r5, #16
 80160a4:	bfdc      	itt	le
 80160a6:	230a      	movle	r3, #10
 80160a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80160ac:	e7e1      	b.n	8016072 <_strtod_l+0x242>
 80160ae:	2300      	movs	r3, #0
 80160b0:	9305      	str	r3, [sp, #20]
 80160b2:	2301      	movs	r3, #1
 80160b4:	e77c      	b.n	8015fb0 <_strtod_l+0x180>
 80160b6:	f04f 0c00 	mov.w	ip, #0
 80160ba:	f108 0202 	add.w	r2, r8, #2
 80160be:	9217      	str	r2, [sp, #92]	; 0x5c
 80160c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80160c4:	e785      	b.n	8015fd2 <_strtod_l+0x1a2>
 80160c6:	f04f 0c01 	mov.w	ip, #1
 80160ca:	e7f6      	b.n	80160ba <_strtod_l+0x28a>
 80160cc:	0807398c 	.word	0x0807398c
 80160d0:	0807365c 	.word	0x0807365c
 80160d4:	7ff00000 	.word	0x7ff00000
 80160d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160da:	1c51      	adds	r1, r2, #1
 80160dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80160de:	7852      	ldrb	r2, [r2, #1]
 80160e0:	2a30      	cmp	r2, #48	; 0x30
 80160e2:	d0f9      	beq.n	80160d8 <_strtod_l+0x2a8>
 80160e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80160e8:	2908      	cmp	r1, #8
 80160ea:	f63f af79 	bhi.w	8015fe0 <_strtod_l+0x1b0>
 80160ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80160f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160f4:	9206      	str	r2, [sp, #24]
 80160f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80160f8:	1c51      	adds	r1, r2, #1
 80160fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80160fc:	7852      	ldrb	r2, [r2, #1]
 80160fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016102:	2e09      	cmp	r6, #9
 8016104:	d937      	bls.n	8016176 <_strtod_l+0x346>
 8016106:	9e06      	ldr	r6, [sp, #24]
 8016108:	1b89      	subs	r1, r1, r6
 801610a:	2908      	cmp	r1, #8
 801610c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016110:	dc02      	bgt.n	8016118 <_strtod_l+0x2e8>
 8016112:	4576      	cmp	r6, lr
 8016114:	bfa8      	it	ge
 8016116:	4676      	movge	r6, lr
 8016118:	f1bc 0f00 	cmp.w	ip, #0
 801611c:	d000      	beq.n	8016120 <_strtod_l+0x2f0>
 801611e:	4276      	negs	r6, r6
 8016120:	2d00      	cmp	r5, #0
 8016122:	d14d      	bne.n	80161c0 <_strtod_l+0x390>
 8016124:	9904      	ldr	r1, [sp, #16]
 8016126:	4301      	orrs	r1, r0
 8016128:	f47f aec6 	bne.w	8015eb8 <_strtod_l+0x88>
 801612c:	2b00      	cmp	r3, #0
 801612e:	f47f aee1 	bne.w	8015ef4 <_strtod_l+0xc4>
 8016132:	2a69      	cmp	r2, #105	; 0x69
 8016134:	d027      	beq.n	8016186 <_strtod_l+0x356>
 8016136:	dc24      	bgt.n	8016182 <_strtod_l+0x352>
 8016138:	2a49      	cmp	r2, #73	; 0x49
 801613a:	d024      	beq.n	8016186 <_strtod_l+0x356>
 801613c:	2a4e      	cmp	r2, #78	; 0x4e
 801613e:	f47f aed9 	bne.w	8015ef4 <_strtod_l+0xc4>
 8016142:	499f      	ldr	r1, [pc, #636]	; (80163c0 <_strtod_l+0x590>)
 8016144:	a817      	add	r0, sp, #92	; 0x5c
 8016146:	f002 fb9b 	bl	8018880 <__match>
 801614a:	2800      	cmp	r0, #0
 801614c:	f43f aed2 	beq.w	8015ef4 <_strtod_l+0xc4>
 8016150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	2b28      	cmp	r3, #40	; 0x28
 8016156:	d12d      	bne.n	80161b4 <_strtod_l+0x384>
 8016158:	499a      	ldr	r1, [pc, #616]	; (80163c4 <_strtod_l+0x594>)
 801615a:	aa1a      	add	r2, sp, #104	; 0x68
 801615c:	a817      	add	r0, sp, #92	; 0x5c
 801615e:	f002 fba3 	bl	80188a8 <__hexnan>
 8016162:	2805      	cmp	r0, #5
 8016164:	d126      	bne.n	80161b4 <_strtod_l+0x384>
 8016166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016168:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801616c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016170:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016174:	e6a0      	b.n	8015eb8 <_strtod_l+0x88>
 8016176:	210a      	movs	r1, #10
 8016178:	fb01 2e0e 	mla	lr, r1, lr, r2
 801617c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016180:	e7b9      	b.n	80160f6 <_strtod_l+0x2c6>
 8016182:	2a6e      	cmp	r2, #110	; 0x6e
 8016184:	e7db      	b.n	801613e <_strtod_l+0x30e>
 8016186:	4990      	ldr	r1, [pc, #576]	; (80163c8 <_strtod_l+0x598>)
 8016188:	a817      	add	r0, sp, #92	; 0x5c
 801618a:	f002 fb79 	bl	8018880 <__match>
 801618e:	2800      	cmp	r0, #0
 8016190:	f43f aeb0 	beq.w	8015ef4 <_strtod_l+0xc4>
 8016194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016196:	498d      	ldr	r1, [pc, #564]	; (80163cc <_strtod_l+0x59c>)
 8016198:	3b01      	subs	r3, #1
 801619a:	a817      	add	r0, sp, #92	; 0x5c
 801619c:	9317      	str	r3, [sp, #92]	; 0x5c
 801619e:	f002 fb6f 	bl	8018880 <__match>
 80161a2:	b910      	cbnz	r0, 80161aa <_strtod_l+0x37a>
 80161a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161a6:	3301      	adds	r3, #1
 80161a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80161aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80163dc <_strtod_l+0x5ac>
 80161ae:	f04f 0a00 	mov.w	sl, #0
 80161b2:	e681      	b.n	8015eb8 <_strtod_l+0x88>
 80161b4:	4886      	ldr	r0, [pc, #536]	; (80163d0 <_strtod_l+0x5a0>)
 80161b6:	f003 feaf 	bl	8019f18 <nan>
 80161ba:	ec5b ab10 	vmov	sl, fp, d0
 80161be:	e67b      	b.n	8015eb8 <_strtod_l+0x88>
 80161c0:	9b05      	ldr	r3, [sp, #20]
 80161c2:	9807      	ldr	r0, [sp, #28]
 80161c4:	1af3      	subs	r3, r6, r3
 80161c6:	2f00      	cmp	r7, #0
 80161c8:	bf08      	it	eq
 80161ca:	462f      	moveq	r7, r5
 80161cc:	2d10      	cmp	r5, #16
 80161ce:	9306      	str	r3, [sp, #24]
 80161d0:	46a8      	mov	r8, r5
 80161d2:	bfa8      	it	ge
 80161d4:	f04f 0810 	movge.w	r8, #16
 80161d8:	f7ea f9b4 	bl	8000544 <__aeabi_ui2d>
 80161dc:	2d09      	cmp	r5, #9
 80161de:	4682      	mov	sl, r0
 80161e0:	468b      	mov	fp, r1
 80161e2:	dd13      	ble.n	801620c <_strtod_l+0x3dc>
 80161e4:	4b7b      	ldr	r3, [pc, #492]	; (80163d4 <_strtod_l+0x5a4>)
 80161e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80161ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80161ee:	f7ea fa23 	bl	8000638 <__aeabi_dmul>
 80161f2:	4682      	mov	sl, r0
 80161f4:	4648      	mov	r0, r9
 80161f6:	468b      	mov	fp, r1
 80161f8:	f7ea f9a4 	bl	8000544 <__aeabi_ui2d>
 80161fc:	4602      	mov	r2, r0
 80161fe:	460b      	mov	r3, r1
 8016200:	4650      	mov	r0, sl
 8016202:	4659      	mov	r1, fp
 8016204:	f7ea f862 	bl	80002cc <__adddf3>
 8016208:	4682      	mov	sl, r0
 801620a:	468b      	mov	fp, r1
 801620c:	2d0f      	cmp	r5, #15
 801620e:	dc38      	bgt.n	8016282 <_strtod_l+0x452>
 8016210:	9b06      	ldr	r3, [sp, #24]
 8016212:	2b00      	cmp	r3, #0
 8016214:	f43f ae50 	beq.w	8015eb8 <_strtod_l+0x88>
 8016218:	dd24      	ble.n	8016264 <_strtod_l+0x434>
 801621a:	2b16      	cmp	r3, #22
 801621c:	dc0b      	bgt.n	8016236 <_strtod_l+0x406>
 801621e:	496d      	ldr	r1, [pc, #436]	; (80163d4 <_strtod_l+0x5a4>)
 8016220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016228:	4652      	mov	r2, sl
 801622a:	465b      	mov	r3, fp
 801622c:	f7ea fa04 	bl	8000638 <__aeabi_dmul>
 8016230:	4682      	mov	sl, r0
 8016232:	468b      	mov	fp, r1
 8016234:	e640      	b.n	8015eb8 <_strtod_l+0x88>
 8016236:	9a06      	ldr	r2, [sp, #24]
 8016238:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801623c:	4293      	cmp	r3, r2
 801623e:	db20      	blt.n	8016282 <_strtod_l+0x452>
 8016240:	4c64      	ldr	r4, [pc, #400]	; (80163d4 <_strtod_l+0x5a4>)
 8016242:	f1c5 050f 	rsb	r5, r5, #15
 8016246:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801624a:	4652      	mov	r2, sl
 801624c:	465b      	mov	r3, fp
 801624e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016252:	f7ea f9f1 	bl	8000638 <__aeabi_dmul>
 8016256:	9b06      	ldr	r3, [sp, #24]
 8016258:	1b5d      	subs	r5, r3, r5
 801625a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801625e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016262:	e7e3      	b.n	801622c <_strtod_l+0x3fc>
 8016264:	9b06      	ldr	r3, [sp, #24]
 8016266:	3316      	adds	r3, #22
 8016268:	db0b      	blt.n	8016282 <_strtod_l+0x452>
 801626a:	9b05      	ldr	r3, [sp, #20]
 801626c:	1b9e      	subs	r6, r3, r6
 801626e:	4b59      	ldr	r3, [pc, #356]	; (80163d4 <_strtod_l+0x5a4>)
 8016270:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8016274:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016278:	4650      	mov	r0, sl
 801627a:	4659      	mov	r1, fp
 801627c:	f7ea fb06 	bl	800088c <__aeabi_ddiv>
 8016280:	e7d6      	b.n	8016230 <_strtod_l+0x400>
 8016282:	9b06      	ldr	r3, [sp, #24]
 8016284:	eba5 0808 	sub.w	r8, r5, r8
 8016288:	4498      	add	r8, r3
 801628a:	f1b8 0f00 	cmp.w	r8, #0
 801628e:	dd74      	ble.n	801637a <_strtod_l+0x54a>
 8016290:	f018 030f 	ands.w	r3, r8, #15
 8016294:	d00a      	beq.n	80162ac <_strtod_l+0x47c>
 8016296:	494f      	ldr	r1, [pc, #316]	; (80163d4 <_strtod_l+0x5a4>)
 8016298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801629c:	4652      	mov	r2, sl
 801629e:	465b      	mov	r3, fp
 80162a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162a4:	f7ea f9c8 	bl	8000638 <__aeabi_dmul>
 80162a8:	4682      	mov	sl, r0
 80162aa:	468b      	mov	fp, r1
 80162ac:	f038 080f 	bics.w	r8, r8, #15
 80162b0:	d04f      	beq.n	8016352 <_strtod_l+0x522>
 80162b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80162b6:	dd22      	ble.n	80162fe <_strtod_l+0x4ce>
 80162b8:	2500      	movs	r5, #0
 80162ba:	462e      	mov	r6, r5
 80162bc:	9507      	str	r5, [sp, #28]
 80162be:	9505      	str	r5, [sp, #20]
 80162c0:	2322      	movs	r3, #34	; 0x22
 80162c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80163dc <_strtod_l+0x5ac>
 80162c6:	6023      	str	r3, [r4, #0]
 80162c8:	f04f 0a00 	mov.w	sl, #0
 80162cc:	9b07      	ldr	r3, [sp, #28]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	f43f adf2 	beq.w	8015eb8 <_strtod_l+0x88>
 80162d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80162d6:	4620      	mov	r0, r4
 80162d8:	f002 fcc4 	bl	8018c64 <_Bfree>
 80162dc:	9905      	ldr	r1, [sp, #20]
 80162de:	4620      	mov	r0, r4
 80162e0:	f002 fcc0 	bl	8018c64 <_Bfree>
 80162e4:	4631      	mov	r1, r6
 80162e6:	4620      	mov	r0, r4
 80162e8:	f002 fcbc 	bl	8018c64 <_Bfree>
 80162ec:	9907      	ldr	r1, [sp, #28]
 80162ee:	4620      	mov	r0, r4
 80162f0:	f002 fcb8 	bl	8018c64 <_Bfree>
 80162f4:	4629      	mov	r1, r5
 80162f6:	4620      	mov	r0, r4
 80162f8:	f002 fcb4 	bl	8018c64 <_Bfree>
 80162fc:	e5dc      	b.n	8015eb8 <_strtod_l+0x88>
 80162fe:	4b36      	ldr	r3, [pc, #216]	; (80163d8 <_strtod_l+0x5a8>)
 8016300:	9304      	str	r3, [sp, #16]
 8016302:	2300      	movs	r3, #0
 8016304:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016308:	4650      	mov	r0, sl
 801630a:	4659      	mov	r1, fp
 801630c:	4699      	mov	r9, r3
 801630e:	f1b8 0f01 	cmp.w	r8, #1
 8016312:	dc21      	bgt.n	8016358 <_strtod_l+0x528>
 8016314:	b10b      	cbz	r3, 801631a <_strtod_l+0x4ea>
 8016316:	4682      	mov	sl, r0
 8016318:	468b      	mov	fp, r1
 801631a:	4b2f      	ldr	r3, [pc, #188]	; (80163d8 <_strtod_l+0x5a8>)
 801631c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016320:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016324:	4652      	mov	r2, sl
 8016326:	465b      	mov	r3, fp
 8016328:	e9d9 0100 	ldrd	r0, r1, [r9]
 801632c:	f7ea f984 	bl	8000638 <__aeabi_dmul>
 8016330:	4b2a      	ldr	r3, [pc, #168]	; (80163dc <_strtod_l+0x5ac>)
 8016332:	460a      	mov	r2, r1
 8016334:	400b      	ands	r3, r1
 8016336:	492a      	ldr	r1, [pc, #168]	; (80163e0 <_strtod_l+0x5b0>)
 8016338:	428b      	cmp	r3, r1
 801633a:	4682      	mov	sl, r0
 801633c:	d8bc      	bhi.n	80162b8 <_strtod_l+0x488>
 801633e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016342:	428b      	cmp	r3, r1
 8016344:	bf86      	itte	hi
 8016346:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80163e4 <_strtod_l+0x5b4>
 801634a:	f04f 3aff 	movhi.w	sl, #4294967295
 801634e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016352:	2300      	movs	r3, #0
 8016354:	9304      	str	r3, [sp, #16]
 8016356:	e084      	b.n	8016462 <_strtod_l+0x632>
 8016358:	f018 0f01 	tst.w	r8, #1
 801635c:	d005      	beq.n	801636a <_strtod_l+0x53a>
 801635e:	9b04      	ldr	r3, [sp, #16]
 8016360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016364:	f7ea f968 	bl	8000638 <__aeabi_dmul>
 8016368:	2301      	movs	r3, #1
 801636a:	9a04      	ldr	r2, [sp, #16]
 801636c:	3208      	adds	r2, #8
 801636e:	f109 0901 	add.w	r9, r9, #1
 8016372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016376:	9204      	str	r2, [sp, #16]
 8016378:	e7c9      	b.n	801630e <_strtod_l+0x4de>
 801637a:	d0ea      	beq.n	8016352 <_strtod_l+0x522>
 801637c:	f1c8 0800 	rsb	r8, r8, #0
 8016380:	f018 020f 	ands.w	r2, r8, #15
 8016384:	d00a      	beq.n	801639c <_strtod_l+0x56c>
 8016386:	4b13      	ldr	r3, [pc, #76]	; (80163d4 <_strtod_l+0x5a4>)
 8016388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801638c:	4650      	mov	r0, sl
 801638e:	4659      	mov	r1, fp
 8016390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016394:	f7ea fa7a 	bl	800088c <__aeabi_ddiv>
 8016398:	4682      	mov	sl, r0
 801639a:	468b      	mov	fp, r1
 801639c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80163a0:	d0d7      	beq.n	8016352 <_strtod_l+0x522>
 80163a2:	f1b8 0f1f 	cmp.w	r8, #31
 80163a6:	dd1f      	ble.n	80163e8 <_strtod_l+0x5b8>
 80163a8:	2500      	movs	r5, #0
 80163aa:	462e      	mov	r6, r5
 80163ac:	9507      	str	r5, [sp, #28]
 80163ae:	9505      	str	r5, [sp, #20]
 80163b0:	2322      	movs	r3, #34	; 0x22
 80163b2:	f04f 0a00 	mov.w	sl, #0
 80163b6:	f04f 0b00 	mov.w	fp, #0
 80163ba:	6023      	str	r3, [r4, #0]
 80163bc:	e786      	b.n	80162cc <_strtod_l+0x49c>
 80163be:	bf00      	nop
 80163c0:	08073636 	.word	0x08073636
 80163c4:	08073670 	.word	0x08073670
 80163c8:	0807362e 	.word	0x0807362e
 80163cc:	0807384d 	.word	0x0807384d
 80163d0:	0807353e 	.word	0x0807353e
 80163d4:	08073a88 	.word	0x08073a88
 80163d8:	08073a60 	.word	0x08073a60
 80163dc:	7ff00000 	.word	0x7ff00000
 80163e0:	7ca00000 	.word	0x7ca00000
 80163e4:	7fefffff 	.word	0x7fefffff
 80163e8:	f018 0310 	ands.w	r3, r8, #16
 80163ec:	bf18      	it	ne
 80163ee:	236a      	movne	r3, #106	; 0x6a
 80163f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80167a0 <_strtod_l+0x970>
 80163f4:	9304      	str	r3, [sp, #16]
 80163f6:	4650      	mov	r0, sl
 80163f8:	4659      	mov	r1, fp
 80163fa:	2300      	movs	r3, #0
 80163fc:	f018 0f01 	tst.w	r8, #1
 8016400:	d004      	beq.n	801640c <_strtod_l+0x5dc>
 8016402:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016406:	f7ea f917 	bl	8000638 <__aeabi_dmul>
 801640a:	2301      	movs	r3, #1
 801640c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016410:	f109 0908 	add.w	r9, r9, #8
 8016414:	d1f2      	bne.n	80163fc <_strtod_l+0x5cc>
 8016416:	b10b      	cbz	r3, 801641c <_strtod_l+0x5ec>
 8016418:	4682      	mov	sl, r0
 801641a:	468b      	mov	fp, r1
 801641c:	9b04      	ldr	r3, [sp, #16]
 801641e:	b1c3      	cbz	r3, 8016452 <_strtod_l+0x622>
 8016420:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016424:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016428:	2b00      	cmp	r3, #0
 801642a:	4659      	mov	r1, fp
 801642c:	dd11      	ble.n	8016452 <_strtod_l+0x622>
 801642e:	2b1f      	cmp	r3, #31
 8016430:	f340 8124 	ble.w	801667c <_strtod_l+0x84c>
 8016434:	2b34      	cmp	r3, #52	; 0x34
 8016436:	bfde      	ittt	le
 8016438:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801643c:	f04f 33ff 	movle.w	r3, #4294967295
 8016440:	fa03 f202 	lslle.w	r2, r3, r2
 8016444:	f04f 0a00 	mov.w	sl, #0
 8016448:	bfcc      	ite	gt
 801644a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801644e:	ea02 0b01 	andle.w	fp, r2, r1
 8016452:	2200      	movs	r2, #0
 8016454:	2300      	movs	r3, #0
 8016456:	4650      	mov	r0, sl
 8016458:	4659      	mov	r1, fp
 801645a:	f7ea fb55 	bl	8000b08 <__aeabi_dcmpeq>
 801645e:	2800      	cmp	r0, #0
 8016460:	d1a2      	bne.n	80163a8 <_strtod_l+0x578>
 8016462:	9b07      	ldr	r3, [sp, #28]
 8016464:	9300      	str	r3, [sp, #0]
 8016466:	9908      	ldr	r1, [sp, #32]
 8016468:	462b      	mov	r3, r5
 801646a:	463a      	mov	r2, r7
 801646c:	4620      	mov	r0, r4
 801646e:	f002 fc61 	bl	8018d34 <__s2b>
 8016472:	9007      	str	r0, [sp, #28]
 8016474:	2800      	cmp	r0, #0
 8016476:	f43f af1f 	beq.w	80162b8 <_strtod_l+0x488>
 801647a:	9b05      	ldr	r3, [sp, #20]
 801647c:	1b9e      	subs	r6, r3, r6
 801647e:	9b06      	ldr	r3, [sp, #24]
 8016480:	2b00      	cmp	r3, #0
 8016482:	bfb4      	ite	lt
 8016484:	4633      	movlt	r3, r6
 8016486:	2300      	movge	r3, #0
 8016488:	930c      	str	r3, [sp, #48]	; 0x30
 801648a:	9b06      	ldr	r3, [sp, #24]
 801648c:	2500      	movs	r5, #0
 801648e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016492:	9312      	str	r3, [sp, #72]	; 0x48
 8016494:	462e      	mov	r6, r5
 8016496:	9b07      	ldr	r3, [sp, #28]
 8016498:	4620      	mov	r0, r4
 801649a:	6859      	ldr	r1, [r3, #4]
 801649c:	f002 fba2 	bl	8018be4 <_Balloc>
 80164a0:	9005      	str	r0, [sp, #20]
 80164a2:	2800      	cmp	r0, #0
 80164a4:	f43f af0c 	beq.w	80162c0 <_strtod_l+0x490>
 80164a8:	9b07      	ldr	r3, [sp, #28]
 80164aa:	691a      	ldr	r2, [r3, #16]
 80164ac:	3202      	adds	r2, #2
 80164ae:	f103 010c 	add.w	r1, r3, #12
 80164b2:	0092      	lsls	r2, r2, #2
 80164b4:	300c      	adds	r0, #12
 80164b6:	f7fe fa87 	bl	80149c8 <memcpy>
 80164ba:	ec4b ab10 	vmov	d0, sl, fp
 80164be:	aa1a      	add	r2, sp, #104	; 0x68
 80164c0:	a919      	add	r1, sp, #100	; 0x64
 80164c2:	4620      	mov	r0, r4
 80164c4:	f002 ff7c 	bl	80193c0 <__d2b>
 80164c8:	ec4b ab18 	vmov	d8, sl, fp
 80164cc:	9018      	str	r0, [sp, #96]	; 0x60
 80164ce:	2800      	cmp	r0, #0
 80164d0:	f43f aef6 	beq.w	80162c0 <_strtod_l+0x490>
 80164d4:	2101      	movs	r1, #1
 80164d6:	4620      	mov	r0, r4
 80164d8:	f002 fcc6 	bl	8018e68 <__i2b>
 80164dc:	4606      	mov	r6, r0
 80164de:	2800      	cmp	r0, #0
 80164e0:	f43f aeee 	beq.w	80162c0 <_strtod_l+0x490>
 80164e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164e6:	9904      	ldr	r1, [sp, #16]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	bfab      	itete	ge
 80164ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80164ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80164f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80164f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80164f6:	bfac      	ite	ge
 80164f8:	eb03 0902 	addge.w	r9, r3, r2
 80164fc:	1ad7      	sublt	r7, r2, r3
 80164fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016500:	eba3 0801 	sub.w	r8, r3, r1
 8016504:	4490      	add	r8, r2
 8016506:	4ba1      	ldr	r3, [pc, #644]	; (801678c <_strtod_l+0x95c>)
 8016508:	f108 38ff 	add.w	r8, r8, #4294967295
 801650c:	4598      	cmp	r8, r3
 801650e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016512:	f280 80c7 	bge.w	80166a4 <_strtod_l+0x874>
 8016516:	eba3 0308 	sub.w	r3, r3, r8
 801651a:	2b1f      	cmp	r3, #31
 801651c:	eba2 0203 	sub.w	r2, r2, r3
 8016520:	f04f 0101 	mov.w	r1, #1
 8016524:	f300 80b1 	bgt.w	801668a <_strtod_l+0x85a>
 8016528:	fa01 f303 	lsl.w	r3, r1, r3
 801652c:	930d      	str	r3, [sp, #52]	; 0x34
 801652e:	2300      	movs	r3, #0
 8016530:	9308      	str	r3, [sp, #32]
 8016532:	eb09 0802 	add.w	r8, r9, r2
 8016536:	9b04      	ldr	r3, [sp, #16]
 8016538:	45c1      	cmp	r9, r8
 801653a:	4417      	add	r7, r2
 801653c:	441f      	add	r7, r3
 801653e:	464b      	mov	r3, r9
 8016540:	bfa8      	it	ge
 8016542:	4643      	movge	r3, r8
 8016544:	42bb      	cmp	r3, r7
 8016546:	bfa8      	it	ge
 8016548:	463b      	movge	r3, r7
 801654a:	2b00      	cmp	r3, #0
 801654c:	bfc2      	ittt	gt
 801654e:	eba8 0803 	subgt.w	r8, r8, r3
 8016552:	1aff      	subgt	r7, r7, r3
 8016554:	eba9 0903 	subgt.w	r9, r9, r3
 8016558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801655a:	2b00      	cmp	r3, #0
 801655c:	dd17      	ble.n	801658e <_strtod_l+0x75e>
 801655e:	4631      	mov	r1, r6
 8016560:	461a      	mov	r2, r3
 8016562:	4620      	mov	r0, r4
 8016564:	f002 fd40 	bl	8018fe8 <__pow5mult>
 8016568:	4606      	mov	r6, r0
 801656a:	2800      	cmp	r0, #0
 801656c:	f43f aea8 	beq.w	80162c0 <_strtod_l+0x490>
 8016570:	4601      	mov	r1, r0
 8016572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016574:	4620      	mov	r0, r4
 8016576:	f002 fc8d 	bl	8018e94 <__multiply>
 801657a:	900b      	str	r0, [sp, #44]	; 0x2c
 801657c:	2800      	cmp	r0, #0
 801657e:	f43f ae9f 	beq.w	80162c0 <_strtod_l+0x490>
 8016582:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016584:	4620      	mov	r0, r4
 8016586:	f002 fb6d 	bl	8018c64 <_Bfree>
 801658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801658c:	9318      	str	r3, [sp, #96]	; 0x60
 801658e:	f1b8 0f00 	cmp.w	r8, #0
 8016592:	f300 808c 	bgt.w	80166ae <_strtod_l+0x87e>
 8016596:	9b06      	ldr	r3, [sp, #24]
 8016598:	2b00      	cmp	r3, #0
 801659a:	dd08      	ble.n	80165ae <_strtod_l+0x77e>
 801659c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801659e:	9905      	ldr	r1, [sp, #20]
 80165a0:	4620      	mov	r0, r4
 80165a2:	f002 fd21 	bl	8018fe8 <__pow5mult>
 80165a6:	9005      	str	r0, [sp, #20]
 80165a8:	2800      	cmp	r0, #0
 80165aa:	f43f ae89 	beq.w	80162c0 <_strtod_l+0x490>
 80165ae:	2f00      	cmp	r7, #0
 80165b0:	dd08      	ble.n	80165c4 <_strtod_l+0x794>
 80165b2:	9905      	ldr	r1, [sp, #20]
 80165b4:	463a      	mov	r2, r7
 80165b6:	4620      	mov	r0, r4
 80165b8:	f002 fd70 	bl	801909c <__lshift>
 80165bc:	9005      	str	r0, [sp, #20]
 80165be:	2800      	cmp	r0, #0
 80165c0:	f43f ae7e 	beq.w	80162c0 <_strtod_l+0x490>
 80165c4:	f1b9 0f00 	cmp.w	r9, #0
 80165c8:	dd08      	ble.n	80165dc <_strtod_l+0x7ac>
 80165ca:	4631      	mov	r1, r6
 80165cc:	464a      	mov	r2, r9
 80165ce:	4620      	mov	r0, r4
 80165d0:	f002 fd64 	bl	801909c <__lshift>
 80165d4:	4606      	mov	r6, r0
 80165d6:	2800      	cmp	r0, #0
 80165d8:	f43f ae72 	beq.w	80162c0 <_strtod_l+0x490>
 80165dc:	9a05      	ldr	r2, [sp, #20]
 80165de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165e0:	4620      	mov	r0, r4
 80165e2:	f002 fde7 	bl	80191b4 <__mdiff>
 80165e6:	4605      	mov	r5, r0
 80165e8:	2800      	cmp	r0, #0
 80165ea:	f43f ae69 	beq.w	80162c0 <_strtod_l+0x490>
 80165ee:	68c3      	ldr	r3, [r0, #12]
 80165f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80165f2:	2300      	movs	r3, #0
 80165f4:	60c3      	str	r3, [r0, #12]
 80165f6:	4631      	mov	r1, r6
 80165f8:	f002 fdc0 	bl	801917c <__mcmp>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	da60      	bge.n	80166c2 <_strtod_l+0x892>
 8016600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016602:	ea53 030a 	orrs.w	r3, r3, sl
 8016606:	f040 8082 	bne.w	801670e <_strtod_l+0x8de>
 801660a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801660e:	2b00      	cmp	r3, #0
 8016610:	d17d      	bne.n	801670e <_strtod_l+0x8de>
 8016612:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016616:	0d1b      	lsrs	r3, r3, #20
 8016618:	051b      	lsls	r3, r3, #20
 801661a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801661e:	d976      	bls.n	801670e <_strtod_l+0x8de>
 8016620:	696b      	ldr	r3, [r5, #20]
 8016622:	b913      	cbnz	r3, 801662a <_strtod_l+0x7fa>
 8016624:	692b      	ldr	r3, [r5, #16]
 8016626:	2b01      	cmp	r3, #1
 8016628:	dd71      	ble.n	801670e <_strtod_l+0x8de>
 801662a:	4629      	mov	r1, r5
 801662c:	2201      	movs	r2, #1
 801662e:	4620      	mov	r0, r4
 8016630:	f002 fd34 	bl	801909c <__lshift>
 8016634:	4631      	mov	r1, r6
 8016636:	4605      	mov	r5, r0
 8016638:	f002 fda0 	bl	801917c <__mcmp>
 801663c:	2800      	cmp	r0, #0
 801663e:	dd66      	ble.n	801670e <_strtod_l+0x8de>
 8016640:	9904      	ldr	r1, [sp, #16]
 8016642:	4a53      	ldr	r2, [pc, #332]	; (8016790 <_strtod_l+0x960>)
 8016644:	465b      	mov	r3, fp
 8016646:	2900      	cmp	r1, #0
 8016648:	f000 8081 	beq.w	801674e <_strtod_l+0x91e>
 801664c:	ea02 010b 	and.w	r1, r2, fp
 8016650:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016654:	dc7b      	bgt.n	801674e <_strtod_l+0x91e>
 8016656:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801665a:	f77f aea9 	ble.w	80163b0 <_strtod_l+0x580>
 801665e:	4b4d      	ldr	r3, [pc, #308]	; (8016794 <_strtod_l+0x964>)
 8016660:	4650      	mov	r0, sl
 8016662:	4659      	mov	r1, fp
 8016664:	2200      	movs	r2, #0
 8016666:	f7e9 ffe7 	bl	8000638 <__aeabi_dmul>
 801666a:	460b      	mov	r3, r1
 801666c:	4303      	orrs	r3, r0
 801666e:	bf08      	it	eq
 8016670:	2322      	moveq	r3, #34	; 0x22
 8016672:	4682      	mov	sl, r0
 8016674:	468b      	mov	fp, r1
 8016676:	bf08      	it	eq
 8016678:	6023      	streq	r3, [r4, #0]
 801667a:	e62b      	b.n	80162d4 <_strtod_l+0x4a4>
 801667c:	f04f 32ff 	mov.w	r2, #4294967295
 8016680:	fa02 f303 	lsl.w	r3, r2, r3
 8016684:	ea03 0a0a 	and.w	sl, r3, sl
 8016688:	e6e3      	b.n	8016452 <_strtod_l+0x622>
 801668a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801668e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016692:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016696:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801669a:	fa01 f308 	lsl.w	r3, r1, r8
 801669e:	9308      	str	r3, [sp, #32]
 80166a0:	910d      	str	r1, [sp, #52]	; 0x34
 80166a2:	e746      	b.n	8016532 <_strtod_l+0x702>
 80166a4:	2300      	movs	r3, #0
 80166a6:	9308      	str	r3, [sp, #32]
 80166a8:	2301      	movs	r3, #1
 80166aa:	930d      	str	r3, [sp, #52]	; 0x34
 80166ac:	e741      	b.n	8016532 <_strtod_l+0x702>
 80166ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80166b0:	4642      	mov	r2, r8
 80166b2:	4620      	mov	r0, r4
 80166b4:	f002 fcf2 	bl	801909c <__lshift>
 80166b8:	9018      	str	r0, [sp, #96]	; 0x60
 80166ba:	2800      	cmp	r0, #0
 80166bc:	f47f af6b 	bne.w	8016596 <_strtod_l+0x766>
 80166c0:	e5fe      	b.n	80162c0 <_strtod_l+0x490>
 80166c2:	465f      	mov	r7, fp
 80166c4:	d16e      	bne.n	80167a4 <_strtod_l+0x974>
 80166c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80166cc:	b342      	cbz	r2, 8016720 <_strtod_l+0x8f0>
 80166ce:	4a32      	ldr	r2, [pc, #200]	; (8016798 <_strtod_l+0x968>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d128      	bne.n	8016726 <_strtod_l+0x8f6>
 80166d4:	9b04      	ldr	r3, [sp, #16]
 80166d6:	4651      	mov	r1, sl
 80166d8:	b1eb      	cbz	r3, 8016716 <_strtod_l+0x8e6>
 80166da:	4b2d      	ldr	r3, [pc, #180]	; (8016790 <_strtod_l+0x960>)
 80166dc:	403b      	ands	r3, r7
 80166de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80166e2:	f04f 32ff 	mov.w	r2, #4294967295
 80166e6:	d819      	bhi.n	801671c <_strtod_l+0x8ec>
 80166e8:	0d1b      	lsrs	r3, r3, #20
 80166ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166ee:	fa02 f303 	lsl.w	r3, r2, r3
 80166f2:	4299      	cmp	r1, r3
 80166f4:	d117      	bne.n	8016726 <_strtod_l+0x8f6>
 80166f6:	4b29      	ldr	r3, [pc, #164]	; (801679c <_strtod_l+0x96c>)
 80166f8:	429f      	cmp	r7, r3
 80166fa:	d102      	bne.n	8016702 <_strtod_l+0x8d2>
 80166fc:	3101      	adds	r1, #1
 80166fe:	f43f addf 	beq.w	80162c0 <_strtod_l+0x490>
 8016702:	4b23      	ldr	r3, [pc, #140]	; (8016790 <_strtod_l+0x960>)
 8016704:	403b      	ands	r3, r7
 8016706:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801670a:	f04f 0a00 	mov.w	sl, #0
 801670e:	9b04      	ldr	r3, [sp, #16]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d1a4      	bne.n	801665e <_strtod_l+0x82e>
 8016714:	e5de      	b.n	80162d4 <_strtod_l+0x4a4>
 8016716:	f04f 33ff 	mov.w	r3, #4294967295
 801671a:	e7ea      	b.n	80166f2 <_strtod_l+0x8c2>
 801671c:	4613      	mov	r3, r2
 801671e:	e7e8      	b.n	80166f2 <_strtod_l+0x8c2>
 8016720:	ea53 030a 	orrs.w	r3, r3, sl
 8016724:	d08c      	beq.n	8016640 <_strtod_l+0x810>
 8016726:	9b08      	ldr	r3, [sp, #32]
 8016728:	b1db      	cbz	r3, 8016762 <_strtod_l+0x932>
 801672a:	423b      	tst	r3, r7
 801672c:	d0ef      	beq.n	801670e <_strtod_l+0x8de>
 801672e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016730:	9a04      	ldr	r2, [sp, #16]
 8016732:	4650      	mov	r0, sl
 8016734:	4659      	mov	r1, fp
 8016736:	b1c3      	cbz	r3, 801676a <_strtod_l+0x93a>
 8016738:	f7ff fb5e 	bl	8015df8 <sulp>
 801673c:	4602      	mov	r2, r0
 801673e:	460b      	mov	r3, r1
 8016740:	ec51 0b18 	vmov	r0, r1, d8
 8016744:	f7e9 fdc2 	bl	80002cc <__adddf3>
 8016748:	4682      	mov	sl, r0
 801674a:	468b      	mov	fp, r1
 801674c:	e7df      	b.n	801670e <_strtod_l+0x8de>
 801674e:	4013      	ands	r3, r2
 8016750:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016754:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016758:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801675c:	f04f 3aff 	mov.w	sl, #4294967295
 8016760:	e7d5      	b.n	801670e <_strtod_l+0x8de>
 8016762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016764:	ea13 0f0a 	tst.w	r3, sl
 8016768:	e7e0      	b.n	801672c <_strtod_l+0x8fc>
 801676a:	f7ff fb45 	bl	8015df8 <sulp>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	ec51 0b18 	vmov	r0, r1, d8
 8016776:	f7e9 fda7 	bl	80002c8 <__aeabi_dsub>
 801677a:	2200      	movs	r2, #0
 801677c:	2300      	movs	r3, #0
 801677e:	4682      	mov	sl, r0
 8016780:	468b      	mov	fp, r1
 8016782:	f7ea f9c1 	bl	8000b08 <__aeabi_dcmpeq>
 8016786:	2800      	cmp	r0, #0
 8016788:	d0c1      	beq.n	801670e <_strtod_l+0x8de>
 801678a:	e611      	b.n	80163b0 <_strtod_l+0x580>
 801678c:	fffffc02 	.word	0xfffffc02
 8016790:	7ff00000 	.word	0x7ff00000
 8016794:	39500000 	.word	0x39500000
 8016798:	000fffff 	.word	0x000fffff
 801679c:	7fefffff 	.word	0x7fefffff
 80167a0:	08073688 	.word	0x08073688
 80167a4:	4631      	mov	r1, r6
 80167a6:	4628      	mov	r0, r5
 80167a8:	f002 fe66 	bl	8019478 <__ratio>
 80167ac:	ec59 8b10 	vmov	r8, r9, d0
 80167b0:	ee10 0a10 	vmov	r0, s0
 80167b4:	2200      	movs	r2, #0
 80167b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167ba:	4649      	mov	r1, r9
 80167bc:	f7ea f9b8 	bl	8000b30 <__aeabi_dcmple>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d07a      	beq.n	80168ba <_strtod_l+0xa8a>
 80167c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d04a      	beq.n	8016860 <_strtod_l+0xa30>
 80167ca:	4b95      	ldr	r3, [pc, #596]	; (8016a20 <_strtod_l+0xbf0>)
 80167cc:	2200      	movs	r2, #0
 80167ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80167d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016a20 <_strtod_l+0xbf0>
 80167d6:	f04f 0800 	mov.w	r8, #0
 80167da:	4b92      	ldr	r3, [pc, #584]	; (8016a24 <_strtod_l+0xbf4>)
 80167dc:	403b      	ands	r3, r7
 80167de:	930d      	str	r3, [sp, #52]	; 0x34
 80167e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80167e2:	4b91      	ldr	r3, [pc, #580]	; (8016a28 <_strtod_l+0xbf8>)
 80167e4:	429a      	cmp	r2, r3
 80167e6:	f040 80b0 	bne.w	801694a <_strtod_l+0xb1a>
 80167ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80167f2:	ec4b ab10 	vmov	d0, sl, fp
 80167f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167fa:	f002 fd65 	bl	80192c8 <__ulp>
 80167fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016802:	ec53 2b10 	vmov	r2, r3, d0
 8016806:	f7e9 ff17 	bl	8000638 <__aeabi_dmul>
 801680a:	4652      	mov	r2, sl
 801680c:	465b      	mov	r3, fp
 801680e:	f7e9 fd5d 	bl	80002cc <__adddf3>
 8016812:	460b      	mov	r3, r1
 8016814:	4983      	ldr	r1, [pc, #524]	; (8016a24 <_strtod_l+0xbf4>)
 8016816:	4a85      	ldr	r2, [pc, #532]	; (8016a2c <_strtod_l+0xbfc>)
 8016818:	4019      	ands	r1, r3
 801681a:	4291      	cmp	r1, r2
 801681c:	4682      	mov	sl, r0
 801681e:	d960      	bls.n	80168e2 <_strtod_l+0xab2>
 8016820:	ee18 3a90 	vmov	r3, s17
 8016824:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016828:	4293      	cmp	r3, r2
 801682a:	d104      	bne.n	8016836 <_strtod_l+0xa06>
 801682c:	ee18 3a10 	vmov	r3, s16
 8016830:	3301      	adds	r3, #1
 8016832:	f43f ad45 	beq.w	80162c0 <_strtod_l+0x490>
 8016836:	f8df b200 	ldr.w	fp, [pc, #512]	; 8016a38 <_strtod_l+0xc08>
 801683a:	f04f 3aff 	mov.w	sl, #4294967295
 801683e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016840:	4620      	mov	r0, r4
 8016842:	f002 fa0f 	bl	8018c64 <_Bfree>
 8016846:	9905      	ldr	r1, [sp, #20]
 8016848:	4620      	mov	r0, r4
 801684a:	f002 fa0b 	bl	8018c64 <_Bfree>
 801684e:	4631      	mov	r1, r6
 8016850:	4620      	mov	r0, r4
 8016852:	f002 fa07 	bl	8018c64 <_Bfree>
 8016856:	4629      	mov	r1, r5
 8016858:	4620      	mov	r0, r4
 801685a:	f002 fa03 	bl	8018c64 <_Bfree>
 801685e:	e61a      	b.n	8016496 <_strtod_l+0x666>
 8016860:	f1ba 0f00 	cmp.w	sl, #0
 8016864:	d11b      	bne.n	801689e <_strtod_l+0xa6e>
 8016866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801686a:	b9f3      	cbnz	r3, 80168aa <_strtod_l+0xa7a>
 801686c:	4b6c      	ldr	r3, [pc, #432]	; (8016a20 <_strtod_l+0xbf0>)
 801686e:	2200      	movs	r2, #0
 8016870:	4640      	mov	r0, r8
 8016872:	4649      	mov	r1, r9
 8016874:	f7ea f952 	bl	8000b1c <__aeabi_dcmplt>
 8016878:	b9d0      	cbnz	r0, 80168b0 <_strtod_l+0xa80>
 801687a:	4640      	mov	r0, r8
 801687c:	4649      	mov	r1, r9
 801687e:	4b6c      	ldr	r3, [pc, #432]	; (8016a30 <_strtod_l+0xc00>)
 8016880:	2200      	movs	r2, #0
 8016882:	f7e9 fed9 	bl	8000638 <__aeabi_dmul>
 8016886:	4680      	mov	r8, r0
 8016888:	4689      	mov	r9, r1
 801688a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801688e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8016892:	9315      	str	r3, [sp, #84]	; 0x54
 8016894:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801689c:	e79d      	b.n	80167da <_strtod_l+0x9aa>
 801689e:	f1ba 0f01 	cmp.w	sl, #1
 80168a2:	d102      	bne.n	80168aa <_strtod_l+0xa7a>
 80168a4:	2f00      	cmp	r7, #0
 80168a6:	f43f ad83 	beq.w	80163b0 <_strtod_l+0x580>
 80168aa:	4b62      	ldr	r3, [pc, #392]	; (8016a34 <_strtod_l+0xc04>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	e78e      	b.n	80167ce <_strtod_l+0x99e>
 80168b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8016a30 <_strtod_l+0xc00>
 80168b4:	f04f 0800 	mov.w	r8, #0
 80168b8:	e7e7      	b.n	801688a <_strtod_l+0xa5a>
 80168ba:	4b5d      	ldr	r3, [pc, #372]	; (8016a30 <_strtod_l+0xc00>)
 80168bc:	4640      	mov	r0, r8
 80168be:	4649      	mov	r1, r9
 80168c0:	2200      	movs	r2, #0
 80168c2:	f7e9 feb9 	bl	8000638 <__aeabi_dmul>
 80168c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168c8:	4680      	mov	r8, r0
 80168ca:	4689      	mov	r9, r1
 80168cc:	b933      	cbnz	r3, 80168dc <_strtod_l+0xaac>
 80168ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168d2:	900e      	str	r0, [sp, #56]	; 0x38
 80168d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80168d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80168da:	e7dd      	b.n	8016898 <_strtod_l+0xa68>
 80168dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80168e0:	e7f9      	b.n	80168d6 <_strtod_l+0xaa6>
 80168e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80168e6:	9b04      	ldr	r3, [sp, #16]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d1a8      	bne.n	801683e <_strtod_l+0xa0e>
 80168ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168f2:	0d1b      	lsrs	r3, r3, #20
 80168f4:	051b      	lsls	r3, r3, #20
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d1a1      	bne.n	801683e <_strtod_l+0xa0e>
 80168fa:	4640      	mov	r0, r8
 80168fc:	4649      	mov	r1, r9
 80168fe:	f7ea f9fb 	bl	8000cf8 <__aeabi_d2lz>
 8016902:	f7e9 fe6b 	bl	80005dc <__aeabi_l2d>
 8016906:	4602      	mov	r2, r0
 8016908:	460b      	mov	r3, r1
 801690a:	4640      	mov	r0, r8
 801690c:	4649      	mov	r1, r9
 801690e:	f7e9 fcdb 	bl	80002c8 <__aeabi_dsub>
 8016912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016914:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016918:	ea43 030a 	orr.w	r3, r3, sl
 801691c:	4313      	orrs	r3, r2
 801691e:	4680      	mov	r8, r0
 8016920:	4689      	mov	r9, r1
 8016922:	d055      	beq.n	80169d0 <_strtod_l+0xba0>
 8016924:	a336      	add	r3, pc, #216	; (adr r3, 8016a00 <_strtod_l+0xbd0>)
 8016926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692a:	f7ea f8f7 	bl	8000b1c <__aeabi_dcmplt>
 801692e:	2800      	cmp	r0, #0
 8016930:	f47f acd0 	bne.w	80162d4 <_strtod_l+0x4a4>
 8016934:	a334      	add	r3, pc, #208	; (adr r3, 8016a08 <_strtod_l+0xbd8>)
 8016936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693a:	4640      	mov	r0, r8
 801693c:	4649      	mov	r1, r9
 801693e:	f7ea f90b 	bl	8000b58 <__aeabi_dcmpgt>
 8016942:	2800      	cmp	r0, #0
 8016944:	f43f af7b 	beq.w	801683e <_strtod_l+0xa0e>
 8016948:	e4c4      	b.n	80162d4 <_strtod_l+0x4a4>
 801694a:	9b04      	ldr	r3, [sp, #16]
 801694c:	b333      	cbz	r3, 801699c <_strtod_l+0xb6c>
 801694e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016950:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016954:	d822      	bhi.n	801699c <_strtod_l+0xb6c>
 8016956:	a32e      	add	r3, pc, #184	; (adr r3, 8016a10 <_strtod_l+0xbe0>)
 8016958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801695c:	4640      	mov	r0, r8
 801695e:	4649      	mov	r1, r9
 8016960:	f7ea f8e6 	bl	8000b30 <__aeabi_dcmple>
 8016964:	b1a0      	cbz	r0, 8016990 <_strtod_l+0xb60>
 8016966:	4649      	mov	r1, r9
 8016968:	4640      	mov	r0, r8
 801696a:	f7ea f93d 	bl	8000be8 <__aeabi_d2uiz>
 801696e:	2801      	cmp	r0, #1
 8016970:	bf38      	it	cc
 8016972:	2001      	movcc	r0, #1
 8016974:	f7e9 fde6 	bl	8000544 <__aeabi_ui2d>
 8016978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801697a:	4680      	mov	r8, r0
 801697c:	4689      	mov	r9, r1
 801697e:	bb23      	cbnz	r3, 80169ca <_strtod_l+0xb9a>
 8016980:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016984:	9010      	str	r0, [sp, #64]	; 0x40
 8016986:	9311      	str	r3, [sp, #68]	; 0x44
 8016988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801698c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016994:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016998:	1a9b      	subs	r3, r3, r2
 801699a:	9309      	str	r3, [sp, #36]	; 0x24
 801699c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169a0:	eeb0 0a48 	vmov.f32	s0, s16
 80169a4:	eef0 0a68 	vmov.f32	s1, s17
 80169a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80169ac:	f002 fc8c 	bl	80192c8 <__ulp>
 80169b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169b4:	ec53 2b10 	vmov	r2, r3, d0
 80169b8:	f7e9 fe3e 	bl	8000638 <__aeabi_dmul>
 80169bc:	ec53 2b18 	vmov	r2, r3, d8
 80169c0:	f7e9 fc84 	bl	80002cc <__adddf3>
 80169c4:	4682      	mov	sl, r0
 80169c6:	468b      	mov	fp, r1
 80169c8:	e78d      	b.n	80168e6 <_strtod_l+0xab6>
 80169ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80169ce:	e7db      	b.n	8016988 <_strtod_l+0xb58>
 80169d0:	a311      	add	r3, pc, #68	; (adr r3, 8016a18 <_strtod_l+0xbe8>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7ea f8a1 	bl	8000b1c <__aeabi_dcmplt>
 80169da:	e7b2      	b.n	8016942 <_strtod_l+0xb12>
 80169dc:	2300      	movs	r3, #0
 80169de:	930a      	str	r3, [sp, #40]	; 0x28
 80169e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80169e4:	6013      	str	r3, [r2, #0]
 80169e6:	f7ff ba6b 	b.w	8015ec0 <_strtod_l+0x90>
 80169ea:	2a65      	cmp	r2, #101	; 0x65
 80169ec:	f43f ab5f 	beq.w	80160ae <_strtod_l+0x27e>
 80169f0:	2a45      	cmp	r2, #69	; 0x45
 80169f2:	f43f ab5c 	beq.w	80160ae <_strtod_l+0x27e>
 80169f6:	2301      	movs	r3, #1
 80169f8:	f7ff bb94 	b.w	8016124 <_strtod_l+0x2f4>
 80169fc:	f3af 8000 	nop.w
 8016a00:	94a03595 	.word	0x94a03595
 8016a04:	3fdfffff 	.word	0x3fdfffff
 8016a08:	35afe535 	.word	0x35afe535
 8016a0c:	3fe00000 	.word	0x3fe00000
 8016a10:	ffc00000 	.word	0xffc00000
 8016a14:	41dfffff 	.word	0x41dfffff
 8016a18:	94a03595 	.word	0x94a03595
 8016a1c:	3fcfffff 	.word	0x3fcfffff
 8016a20:	3ff00000 	.word	0x3ff00000
 8016a24:	7ff00000 	.word	0x7ff00000
 8016a28:	7fe00000 	.word	0x7fe00000
 8016a2c:	7c9fffff 	.word	0x7c9fffff
 8016a30:	3fe00000 	.word	0x3fe00000
 8016a34:	bff00000 	.word	0xbff00000
 8016a38:	7fefffff 	.word	0x7fefffff

08016a3c <strtod>:
 8016a3c:	460a      	mov	r2, r1
 8016a3e:	4601      	mov	r1, r0
 8016a40:	4802      	ldr	r0, [pc, #8]	; (8016a4c <strtod+0x10>)
 8016a42:	4b03      	ldr	r3, [pc, #12]	; (8016a50 <strtod+0x14>)
 8016a44:	6800      	ldr	r0, [r0, #0]
 8016a46:	f7ff b9f3 	b.w	8015e30 <_strtod_l>
 8016a4a:	bf00      	nop
 8016a4c:	20000224 	.word	0x20000224
 8016a50:	200002ec 	.word	0x200002ec

08016a54 <strtok>:
 8016a54:	4b16      	ldr	r3, [pc, #88]	; (8016ab0 <strtok+0x5c>)
 8016a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a58:	681e      	ldr	r6, [r3, #0]
 8016a5a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016a5c:	4605      	mov	r5, r0
 8016a5e:	b9fc      	cbnz	r4, 8016aa0 <strtok+0x4c>
 8016a60:	2050      	movs	r0, #80	; 0x50
 8016a62:	9101      	str	r1, [sp, #4]
 8016a64:	f7fd ffa0 	bl	80149a8 <malloc>
 8016a68:	9901      	ldr	r1, [sp, #4]
 8016a6a:	65b0      	str	r0, [r6, #88]	; 0x58
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	b920      	cbnz	r0, 8016a7a <strtok+0x26>
 8016a70:	4b10      	ldr	r3, [pc, #64]	; (8016ab4 <strtok+0x60>)
 8016a72:	4811      	ldr	r0, [pc, #68]	; (8016ab8 <strtok+0x64>)
 8016a74:	2157      	movs	r1, #87	; 0x57
 8016a76:	f7fd ff35 	bl	80148e4 <__assert_func>
 8016a7a:	e9c0 4400 	strd	r4, r4, [r0]
 8016a7e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016a82:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016a86:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016a8a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016a8e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016a92:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016a96:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016a9a:	6184      	str	r4, [r0, #24]
 8016a9c:	7704      	strb	r4, [r0, #28]
 8016a9e:	6244      	str	r4, [r0, #36]	; 0x24
 8016aa0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	4628      	mov	r0, r5
 8016aa6:	b002      	add	sp, #8
 8016aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aac:	f000 b806 	b.w	8016abc <__strtok_r>
 8016ab0:	20000224 	.word	0x20000224
 8016ab4:	080734ac 	.word	0x080734ac
 8016ab8:	080736b0 	.word	0x080736b0

08016abc <__strtok_r>:
 8016abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016abe:	b908      	cbnz	r0, 8016ac4 <__strtok_r+0x8>
 8016ac0:	6810      	ldr	r0, [r2, #0]
 8016ac2:	b188      	cbz	r0, 8016ae8 <__strtok_r+0x2c>
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016acc:	460f      	mov	r7, r1
 8016ace:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016ad2:	b91e      	cbnz	r6, 8016adc <__strtok_r+0x20>
 8016ad4:	b965      	cbnz	r5, 8016af0 <__strtok_r+0x34>
 8016ad6:	6015      	str	r5, [r2, #0]
 8016ad8:	4628      	mov	r0, r5
 8016ada:	e005      	b.n	8016ae8 <__strtok_r+0x2c>
 8016adc:	42b5      	cmp	r5, r6
 8016ade:	d1f6      	bne.n	8016ace <__strtok_r+0x12>
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1f0      	bne.n	8016ac6 <__strtok_r+0xa>
 8016ae4:	6014      	str	r4, [r2, #0]
 8016ae6:	7003      	strb	r3, [r0, #0]
 8016ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aea:	461c      	mov	r4, r3
 8016aec:	e00c      	b.n	8016b08 <__strtok_r+0x4c>
 8016aee:	b915      	cbnz	r5, 8016af6 <__strtok_r+0x3a>
 8016af0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016af4:	460e      	mov	r6, r1
 8016af6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016afa:	42ab      	cmp	r3, r5
 8016afc:	d1f7      	bne.n	8016aee <__strtok_r+0x32>
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d0f3      	beq.n	8016aea <__strtok_r+0x2e>
 8016b02:	2300      	movs	r3, #0
 8016b04:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016b08:	6014      	str	r4, [r2, #0]
 8016b0a:	e7ed      	b.n	8016ae8 <__strtok_r+0x2c>

08016b0c <_strtol_l.constprop.0>:
 8016b0c:	2b01      	cmp	r3, #1
 8016b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b12:	d001      	beq.n	8016b18 <_strtol_l.constprop.0+0xc>
 8016b14:	2b24      	cmp	r3, #36	; 0x24
 8016b16:	d906      	bls.n	8016b26 <_strtol_l.constprop.0+0x1a>
 8016b18:	f7fd ff0a 	bl	8014930 <__errno>
 8016b1c:	2316      	movs	r3, #22
 8016b1e:	6003      	str	r3, [r0, #0]
 8016b20:	2000      	movs	r0, #0
 8016b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016c0c <_strtol_l.constprop.0+0x100>
 8016b2a:	460d      	mov	r5, r1
 8016b2c:	462e      	mov	r6, r5
 8016b2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016b36:	f017 0708 	ands.w	r7, r7, #8
 8016b3a:	d1f7      	bne.n	8016b2c <_strtol_l.constprop.0+0x20>
 8016b3c:	2c2d      	cmp	r4, #45	; 0x2d
 8016b3e:	d132      	bne.n	8016ba6 <_strtol_l.constprop.0+0x9a>
 8016b40:	782c      	ldrb	r4, [r5, #0]
 8016b42:	2701      	movs	r7, #1
 8016b44:	1cb5      	adds	r5, r6, #2
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d05b      	beq.n	8016c02 <_strtol_l.constprop.0+0xf6>
 8016b4a:	2b10      	cmp	r3, #16
 8016b4c:	d109      	bne.n	8016b62 <_strtol_l.constprop.0+0x56>
 8016b4e:	2c30      	cmp	r4, #48	; 0x30
 8016b50:	d107      	bne.n	8016b62 <_strtol_l.constprop.0+0x56>
 8016b52:	782c      	ldrb	r4, [r5, #0]
 8016b54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016b58:	2c58      	cmp	r4, #88	; 0x58
 8016b5a:	d14d      	bne.n	8016bf8 <_strtol_l.constprop.0+0xec>
 8016b5c:	786c      	ldrb	r4, [r5, #1]
 8016b5e:	2310      	movs	r3, #16
 8016b60:	3502      	adds	r5, #2
 8016b62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016b66:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b6a:	f04f 0c00 	mov.w	ip, #0
 8016b6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8016b72:	4666      	mov	r6, ip
 8016b74:	fb03 8a19 	mls	sl, r3, r9, r8
 8016b78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016b7c:	f1be 0f09 	cmp.w	lr, #9
 8016b80:	d816      	bhi.n	8016bb0 <_strtol_l.constprop.0+0xa4>
 8016b82:	4674      	mov	r4, lr
 8016b84:	42a3      	cmp	r3, r4
 8016b86:	dd24      	ble.n	8016bd2 <_strtol_l.constprop.0+0xc6>
 8016b88:	f1bc 0f00 	cmp.w	ip, #0
 8016b8c:	db1e      	blt.n	8016bcc <_strtol_l.constprop.0+0xc0>
 8016b8e:	45b1      	cmp	r9, r6
 8016b90:	d31c      	bcc.n	8016bcc <_strtol_l.constprop.0+0xc0>
 8016b92:	d101      	bne.n	8016b98 <_strtol_l.constprop.0+0x8c>
 8016b94:	45a2      	cmp	sl, r4
 8016b96:	db19      	blt.n	8016bcc <_strtol_l.constprop.0+0xc0>
 8016b98:	fb06 4603 	mla	r6, r6, r3, r4
 8016b9c:	f04f 0c01 	mov.w	ip, #1
 8016ba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ba4:	e7e8      	b.n	8016b78 <_strtol_l.constprop.0+0x6c>
 8016ba6:	2c2b      	cmp	r4, #43	; 0x2b
 8016ba8:	bf04      	itt	eq
 8016baa:	782c      	ldrbeq	r4, [r5, #0]
 8016bac:	1cb5      	addeq	r5, r6, #2
 8016bae:	e7ca      	b.n	8016b46 <_strtol_l.constprop.0+0x3a>
 8016bb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016bb4:	f1be 0f19 	cmp.w	lr, #25
 8016bb8:	d801      	bhi.n	8016bbe <_strtol_l.constprop.0+0xb2>
 8016bba:	3c37      	subs	r4, #55	; 0x37
 8016bbc:	e7e2      	b.n	8016b84 <_strtol_l.constprop.0+0x78>
 8016bbe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016bc2:	f1be 0f19 	cmp.w	lr, #25
 8016bc6:	d804      	bhi.n	8016bd2 <_strtol_l.constprop.0+0xc6>
 8016bc8:	3c57      	subs	r4, #87	; 0x57
 8016bca:	e7db      	b.n	8016b84 <_strtol_l.constprop.0+0x78>
 8016bcc:	f04f 3cff 	mov.w	ip, #4294967295
 8016bd0:	e7e6      	b.n	8016ba0 <_strtol_l.constprop.0+0x94>
 8016bd2:	f1bc 0f00 	cmp.w	ip, #0
 8016bd6:	da05      	bge.n	8016be4 <_strtol_l.constprop.0+0xd8>
 8016bd8:	2322      	movs	r3, #34	; 0x22
 8016bda:	6003      	str	r3, [r0, #0]
 8016bdc:	4646      	mov	r6, r8
 8016bde:	b942      	cbnz	r2, 8016bf2 <_strtol_l.constprop.0+0xe6>
 8016be0:	4630      	mov	r0, r6
 8016be2:	e79e      	b.n	8016b22 <_strtol_l.constprop.0+0x16>
 8016be4:	b107      	cbz	r7, 8016be8 <_strtol_l.constprop.0+0xdc>
 8016be6:	4276      	negs	r6, r6
 8016be8:	2a00      	cmp	r2, #0
 8016bea:	d0f9      	beq.n	8016be0 <_strtol_l.constprop.0+0xd4>
 8016bec:	f1bc 0f00 	cmp.w	ip, #0
 8016bf0:	d000      	beq.n	8016bf4 <_strtol_l.constprop.0+0xe8>
 8016bf2:	1e69      	subs	r1, r5, #1
 8016bf4:	6011      	str	r1, [r2, #0]
 8016bf6:	e7f3      	b.n	8016be0 <_strtol_l.constprop.0+0xd4>
 8016bf8:	2430      	movs	r4, #48	; 0x30
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d1b1      	bne.n	8016b62 <_strtol_l.constprop.0+0x56>
 8016bfe:	2308      	movs	r3, #8
 8016c00:	e7af      	b.n	8016b62 <_strtol_l.constprop.0+0x56>
 8016c02:	2c30      	cmp	r4, #48	; 0x30
 8016c04:	d0a5      	beq.n	8016b52 <_strtol_l.constprop.0+0x46>
 8016c06:	230a      	movs	r3, #10
 8016c08:	e7ab      	b.n	8016b62 <_strtol_l.constprop.0+0x56>
 8016c0a:	bf00      	nop
 8016c0c:	0807374a 	.word	0x0807374a

08016c10 <_strtol_r>:
 8016c10:	f7ff bf7c 	b.w	8016b0c <_strtol_l.constprop.0>

08016c14 <strtol>:
 8016c14:	4613      	mov	r3, r2
 8016c16:	460a      	mov	r2, r1
 8016c18:	4601      	mov	r1, r0
 8016c1a:	4802      	ldr	r0, [pc, #8]	; (8016c24 <strtol+0x10>)
 8016c1c:	6800      	ldr	r0, [r0, #0]
 8016c1e:	f7ff bf75 	b.w	8016b0c <_strtol_l.constprop.0>
 8016c22:	bf00      	nop
 8016c24:	20000224 	.word	0x20000224

08016c28 <__tzcalc_limits>:
 8016c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	f001 ff1b 	bl	8018a68 <__gettzinfo>
 8016c32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8016c36:	429d      	cmp	r5, r3
 8016c38:	f340 8099 	ble.w	8016d6e <__tzcalc_limits+0x146>
 8016c3c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8016c40:	18ac      	adds	r4, r5, r2
 8016c42:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8016c46:	f240 126d 	movw	r2, #365	; 0x16d
 8016c4a:	10a4      	asrs	r4, r4, #2
 8016c4c:	fb02 4403 	mla	r4, r2, r3, r4
 8016c50:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8016c54:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8016c58:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c5c:	441c      	add	r4, r3
 8016c5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016c62:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8016c66:	fb95 fcf3 	sdiv	ip, r5, r3
 8016c6a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8016c6e:	186a      	adds	r2, r5, r1
 8016c70:	fabc f68c 	clz	r6, ip
 8016c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8016c78:	f005 0303 	and.w	r3, r5, #3
 8016c7c:	4414      	add	r4, r2
 8016c7e:	2264      	movs	r2, #100	; 0x64
 8016c80:	6045      	str	r5, [r0, #4]
 8016c82:	fb95 f7f2 	sdiv	r7, r5, r2
 8016c86:	0976      	lsrs	r6, r6, #5
 8016c88:	fb02 5717 	mls	r7, r2, r7, r5
 8016c8c:	4601      	mov	r1, r0
 8016c8e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	f04f 0a07 	mov.w	sl, #7
 8016c98:	7a0d      	ldrb	r5, [r1, #8]
 8016c9a:	694b      	ldr	r3, [r1, #20]
 8016c9c:	2d4a      	cmp	r5, #74	; 0x4a
 8016c9e:	d12d      	bne.n	8016cfc <__tzcalc_limits+0xd4>
 8016ca0:	9a00      	ldr	r2, [sp, #0]
 8016ca2:	eb04 0e03 	add.w	lr, r4, r3
 8016ca6:	b902      	cbnz	r2, 8016caa <__tzcalc_limits+0x82>
 8016ca8:	b917      	cbnz	r7, 8016cb0 <__tzcalc_limits+0x88>
 8016caa:	f1bc 0f00 	cmp.w	ip, #0
 8016cae:	d123      	bne.n	8016cf8 <__tzcalc_limits+0xd0>
 8016cb0:	2b3b      	cmp	r3, #59	; 0x3b
 8016cb2:	bfd4      	ite	le
 8016cb4:	2300      	movle	r3, #0
 8016cb6:	2301      	movgt	r3, #1
 8016cb8:	4473      	add	r3, lr
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	698d      	ldr	r5, [r1, #24]
 8016cbe:	4a2d      	ldr	r2, [pc, #180]	; (8016d74 <__tzcalc_limits+0x14c>)
 8016cc0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8016cc4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8016cc8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8016cca:	18ed      	adds	r5, r5, r3
 8016ccc:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8016cd0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8016cd4:	3128      	adds	r1, #40	; 0x28
 8016cd6:	458b      	cmp	fp, r1
 8016cd8:	d1de      	bne.n	8016c98 <__tzcalc_limits+0x70>
 8016cda:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8016cde:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8016ce2:	428c      	cmp	r4, r1
 8016ce4:	eb72 0303 	sbcs.w	r3, r2, r3
 8016ce8:	bfb4      	ite	lt
 8016cea:	2301      	movlt	r3, #1
 8016cec:	2300      	movge	r3, #0
 8016cee:	6003      	str	r3, [r0, #0]
 8016cf0:	2001      	movs	r0, #1
 8016cf2:	b003      	add	sp, #12
 8016cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	e7dd      	b.n	8016cb8 <__tzcalc_limits+0x90>
 8016cfc:	2d44      	cmp	r5, #68	; 0x44
 8016cfe:	d101      	bne.n	8016d04 <__tzcalc_limits+0xdc>
 8016d00:	4423      	add	r3, r4
 8016d02:	e7db      	b.n	8016cbc <__tzcalc_limits+0x94>
 8016d04:	9a00      	ldr	r2, [sp, #0]
 8016d06:	bb62      	cbnz	r2, 8016d62 <__tzcalc_limits+0x13a>
 8016d08:	2f00      	cmp	r7, #0
 8016d0a:	bf0c      	ite	eq
 8016d0c:	4635      	moveq	r5, r6
 8016d0e:	2501      	movne	r5, #1
 8016d10:	68ca      	ldr	r2, [r1, #12]
 8016d12:	9201      	str	r2, [sp, #4]
 8016d14:	4a18      	ldr	r2, [pc, #96]	; (8016d78 <__tzcalc_limits+0x150>)
 8016d16:	f04f 0930 	mov.w	r9, #48	; 0x30
 8016d1a:	fb09 2505 	mla	r5, r9, r5, r2
 8016d1e:	46a6      	mov	lr, r4
 8016d20:	f04f 0800 	mov.w	r8, #0
 8016d24:	3d04      	subs	r5, #4
 8016d26:	9a01      	ldr	r2, [sp, #4]
 8016d28:	f108 0801 	add.w	r8, r8, #1
 8016d2c:	4542      	cmp	r2, r8
 8016d2e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8016d32:	dc18      	bgt.n	8016d66 <__tzcalc_limits+0x13e>
 8016d34:	f10e 0504 	add.w	r5, lr, #4
 8016d38:	fb95 f8fa 	sdiv	r8, r5, sl
 8016d3c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8016d40:	eba5 0808 	sub.w	r8, r5, r8
 8016d44:	ebb3 0808 	subs.w	r8, r3, r8
 8016d48:	690b      	ldr	r3, [r1, #16]
 8016d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8016d4e:	bf48      	it	mi
 8016d50:	f108 0807 	addmi.w	r8, r8, #7
 8016d54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8016d58:	4443      	add	r3, r8
 8016d5a:	454b      	cmp	r3, r9
 8016d5c:	da05      	bge.n	8016d6a <__tzcalc_limits+0x142>
 8016d5e:	4473      	add	r3, lr
 8016d60:	e7ac      	b.n	8016cbc <__tzcalc_limits+0x94>
 8016d62:	4635      	mov	r5, r6
 8016d64:	e7d4      	b.n	8016d10 <__tzcalc_limits+0xe8>
 8016d66:	44ce      	add	lr, r9
 8016d68:	e7dd      	b.n	8016d26 <__tzcalc_limits+0xfe>
 8016d6a:	3b07      	subs	r3, #7
 8016d6c:	e7f5      	b.n	8016d5a <__tzcalc_limits+0x132>
 8016d6e:	2000      	movs	r0, #0
 8016d70:	e7bf      	b.n	8016cf2 <__tzcalc_limits+0xca>
 8016d72:	bf00      	nop
 8016d74:	00015180 	.word	0x00015180
 8016d78:	080739a0 	.word	0x080739a0

08016d7c <__tz_lock>:
 8016d7c:	4801      	ldr	r0, [pc, #4]	; (8016d84 <__tz_lock+0x8>)
 8016d7e:	f001 be7c 	b.w	8018a7a <__retarget_lock_acquire>
 8016d82:	bf00      	nop
 8016d84:	20005e74 	.word	0x20005e74

08016d88 <__tz_unlock>:
 8016d88:	4801      	ldr	r0, [pc, #4]	; (8016d90 <__tz_unlock+0x8>)
 8016d8a:	f001 be78 	b.w	8018a7e <__retarget_lock_release>
 8016d8e:	bf00      	nop
 8016d90:	20005e74 	.word	0x20005e74

08016d94 <_tzset_unlocked>:
 8016d94:	4b01      	ldr	r3, [pc, #4]	; (8016d9c <_tzset_unlocked+0x8>)
 8016d96:	6818      	ldr	r0, [r3, #0]
 8016d98:	f000 b802 	b.w	8016da0 <_tzset_unlocked_r>
 8016d9c:	20000224 	.word	0x20000224

08016da0 <_tzset_unlocked_r>:
 8016da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da4:	b08d      	sub	sp, #52	; 0x34
 8016da6:	4607      	mov	r7, r0
 8016da8:	f001 fe5e 	bl	8018a68 <__gettzinfo>
 8016dac:	49b0      	ldr	r1, [pc, #704]	; (8017070 <_tzset_unlocked_r+0x2d0>)
 8016dae:	4eb1      	ldr	r6, [pc, #708]	; (8017074 <_tzset_unlocked_r+0x2d4>)
 8016db0:	4605      	mov	r5, r0
 8016db2:	4638      	mov	r0, r7
 8016db4:	f001 fe50 	bl	8018a58 <_getenv_r>
 8016db8:	4604      	mov	r4, r0
 8016dba:	b970      	cbnz	r0, 8016dda <_tzset_unlocked_r+0x3a>
 8016dbc:	4bae      	ldr	r3, [pc, #696]	; (8017078 <_tzset_unlocked_r+0x2d8>)
 8016dbe:	4aaf      	ldr	r2, [pc, #700]	; (801707c <_tzset_unlocked_r+0x2dc>)
 8016dc0:	6018      	str	r0, [r3, #0]
 8016dc2:	4baf      	ldr	r3, [pc, #700]	; (8017080 <_tzset_unlocked_r+0x2e0>)
 8016dc4:	6018      	str	r0, [r3, #0]
 8016dc6:	4baf      	ldr	r3, [pc, #700]	; (8017084 <_tzset_unlocked_r+0x2e4>)
 8016dc8:	6830      	ldr	r0, [r6, #0]
 8016dca:	e9c3 2200 	strd	r2, r2, [r3]
 8016dce:	f7fd fdf3 	bl	80149b8 <free>
 8016dd2:	6034      	str	r4, [r6, #0]
 8016dd4:	b00d      	add	sp, #52	; 0x34
 8016dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dda:	6831      	ldr	r1, [r6, #0]
 8016ddc:	2900      	cmp	r1, #0
 8016dde:	d162      	bne.n	8016ea6 <_tzset_unlocked_r+0x106>
 8016de0:	6830      	ldr	r0, [r6, #0]
 8016de2:	f7fd fde9 	bl	80149b8 <free>
 8016de6:	4620      	mov	r0, r4
 8016de8:	f7e9 fa0c 	bl	8000204 <strlen>
 8016dec:	1c41      	adds	r1, r0, #1
 8016dee:	4638      	mov	r0, r7
 8016df0:	f7fe f8de 	bl	8014fb0 <_malloc_r>
 8016df4:	6030      	str	r0, [r6, #0]
 8016df6:	2800      	cmp	r0, #0
 8016df8:	d15a      	bne.n	8016eb0 <_tzset_unlocked_r+0x110>
 8016dfa:	7823      	ldrb	r3, [r4, #0]
 8016dfc:	4aa2      	ldr	r2, [pc, #648]	; (8017088 <_tzset_unlocked_r+0x2e8>)
 8016dfe:	49a3      	ldr	r1, [pc, #652]	; (801708c <_tzset_unlocked_r+0x2ec>)
 8016e00:	2b3a      	cmp	r3, #58	; 0x3a
 8016e02:	bf08      	it	eq
 8016e04:	3401      	addeq	r4, #1
 8016e06:	ae0a      	add	r6, sp, #40	; 0x28
 8016e08:	4633      	mov	r3, r6
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f7fe ff38 	bl	8015c80 <siscanf>
 8016e10:	2800      	cmp	r0, #0
 8016e12:	dddf      	ble.n	8016dd4 <_tzset_unlocked_r+0x34>
 8016e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e16:	18e7      	adds	r7, r4, r3
 8016e18:	5ce3      	ldrb	r3, [r4, r3]
 8016e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8016e1c:	d14c      	bne.n	8016eb8 <_tzset_unlocked_r+0x118>
 8016e1e:	3701      	adds	r7, #1
 8016e20:	f04f 38ff 	mov.w	r8, #4294967295
 8016e24:	f10d 0a20 	add.w	sl, sp, #32
 8016e28:	f10d 0b1e 	add.w	fp, sp, #30
 8016e2c:	2400      	movs	r4, #0
 8016e2e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8016e32:	4997      	ldr	r1, [pc, #604]	; (8017090 <_tzset_unlocked_r+0x2f0>)
 8016e34:	9603      	str	r6, [sp, #12]
 8016e36:	f8cd b000 	str.w	fp, [sp]
 8016e3a:	4633      	mov	r3, r6
 8016e3c:	aa07      	add	r2, sp, #28
 8016e3e:	4638      	mov	r0, r7
 8016e40:	f8ad 401e 	strh.w	r4, [sp, #30]
 8016e44:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016e48:	f7fe ff1a 	bl	8015c80 <siscanf>
 8016e4c:	42a0      	cmp	r0, r4
 8016e4e:	ddc1      	ble.n	8016dd4 <_tzset_unlocked_r+0x34>
 8016e50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016e54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016e58:	f8df 9240 	ldr.w	r9, [pc, #576]	; 801709c <_tzset_unlocked_r+0x2fc>
 8016e5c:	213c      	movs	r1, #60	; 0x3c
 8016e5e:	fb01 3302 	mla	r3, r1, r2, r3
 8016e62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016e66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016e6a:	fb01 3302 	mla	r3, r1, r2, r3
 8016e6e:	fb08 f303 	mul.w	r3, r8, r3
 8016e72:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8017084 <_tzset_unlocked_r+0x2e4>
 8016e76:	62ab      	str	r3, [r5, #40]	; 0x28
 8016e78:	4b83      	ldr	r3, [pc, #524]	; (8017088 <_tzset_unlocked_r+0x2e8>)
 8016e7a:	f8c8 3000 	str.w	r3, [r8]
 8016e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e80:	4982      	ldr	r1, [pc, #520]	; (801708c <_tzset_unlocked_r+0x2ec>)
 8016e82:	441f      	add	r7, r3
 8016e84:	464a      	mov	r2, r9
 8016e86:	4633      	mov	r3, r6
 8016e88:	4638      	mov	r0, r7
 8016e8a:	f7fe fef9 	bl	8015c80 <siscanf>
 8016e8e:	42a0      	cmp	r0, r4
 8016e90:	dc18      	bgt.n	8016ec4 <_tzset_unlocked_r+0x124>
 8016e92:	f8d8 3000 	ldr.w	r3, [r8]
 8016e96:	f8c8 3004 	str.w	r3, [r8, #4]
 8016e9a:	4b77      	ldr	r3, [pc, #476]	; (8017078 <_tzset_unlocked_r+0x2d8>)
 8016e9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016e9e:	601a      	str	r2, [r3, #0]
 8016ea0:	4b77      	ldr	r3, [pc, #476]	; (8017080 <_tzset_unlocked_r+0x2e0>)
 8016ea2:	601c      	str	r4, [r3, #0]
 8016ea4:	e796      	b.n	8016dd4 <_tzset_unlocked_r+0x34>
 8016ea6:	f7e9 f9a3 	bl	80001f0 <strcmp>
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	d198      	bne.n	8016de0 <_tzset_unlocked_r+0x40>
 8016eae:	e791      	b.n	8016dd4 <_tzset_unlocked_r+0x34>
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	f7fe ff56 	bl	8015d62 <strcpy>
 8016eb6:	e7a0      	b.n	8016dfa <_tzset_unlocked_r+0x5a>
 8016eb8:	2b2b      	cmp	r3, #43	; 0x2b
 8016eba:	bf08      	it	eq
 8016ebc:	3701      	addeq	r7, #1
 8016ebe:	f04f 0801 	mov.w	r8, #1
 8016ec2:	e7af      	b.n	8016e24 <_tzset_unlocked_r+0x84>
 8016ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ec6:	f8c8 9004 	str.w	r9, [r8, #4]
 8016eca:	18fc      	adds	r4, r7, r3
 8016ecc:	5cfb      	ldrb	r3, [r7, r3]
 8016ece:	2b2d      	cmp	r3, #45	; 0x2d
 8016ed0:	f040 808b 	bne.w	8016fea <_tzset_unlocked_r+0x24a>
 8016ed4:	3401      	adds	r4, #1
 8016ed6:	f04f 37ff 	mov.w	r7, #4294967295
 8016eda:	2300      	movs	r3, #0
 8016edc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016ee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8016eea:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016eee:	e9cd b600 	strd	fp, r6, [sp]
 8016ef2:	4967      	ldr	r1, [pc, #412]	; (8017090 <_tzset_unlocked_r+0x2f0>)
 8016ef4:	4633      	mov	r3, r6
 8016ef6:	aa07      	add	r2, sp, #28
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f7fe fec1 	bl	8015c80 <siscanf>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	dc78      	bgt.n	8016ff4 <_tzset_unlocked_r+0x254>
 8016f02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016f04:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8016f08:	652b      	str	r3, [r5, #80]	; 0x50
 8016f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f0c:	462f      	mov	r7, r5
 8016f0e:	441c      	add	r4, r3
 8016f10:	f04f 0900 	mov.w	r9, #0
 8016f14:	7823      	ldrb	r3, [r4, #0]
 8016f16:	2b2c      	cmp	r3, #44	; 0x2c
 8016f18:	bf08      	it	eq
 8016f1a:	3401      	addeq	r4, #1
 8016f1c:	f894 8000 	ldrb.w	r8, [r4]
 8016f20:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8016f24:	d178      	bne.n	8017018 <_tzset_unlocked_r+0x278>
 8016f26:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8016f2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016f2e:	ab09      	add	r3, sp, #36	; 0x24
 8016f30:	9300      	str	r3, [sp, #0]
 8016f32:	4958      	ldr	r1, [pc, #352]	; (8017094 <_tzset_unlocked_r+0x2f4>)
 8016f34:	9603      	str	r6, [sp, #12]
 8016f36:	4633      	mov	r3, r6
 8016f38:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7fe fe9f 	bl	8015c80 <siscanf>
 8016f42:	2803      	cmp	r0, #3
 8016f44:	f47f af46 	bne.w	8016dd4 <_tzset_unlocked_r+0x34>
 8016f48:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016f4c:	1e4b      	subs	r3, r1, #1
 8016f4e:	2b0b      	cmp	r3, #11
 8016f50:	f63f af40 	bhi.w	8016dd4 <_tzset_unlocked_r+0x34>
 8016f54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016f58:	1e53      	subs	r3, r2, #1
 8016f5a:	2b04      	cmp	r3, #4
 8016f5c:	f63f af3a 	bhi.w	8016dd4 <_tzset_unlocked_r+0x34>
 8016f60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8016f64:	2b06      	cmp	r3, #6
 8016f66:	f63f af35 	bhi.w	8016dd4 <_tzset_unlocked_r+0x34>
 8016f6a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8016f6e:	f887 8008 	strb.w	r8, [r7, #8]
 8016f72:	617b      	str	r3, [r7, #20]
 8016f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f76:	eb04 0803 	add.w	r8, r4, r3
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016f80:	2300      	movs	r3, #0
 8016f82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016f86:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f8c:	f898 3000 	ldrb.w	r3, [r8]
 8016f90:	2b2f      	cmp	r3, #47	; 0x2f
 8016f92:	d109      	bne.n	8016fa8 <_tzset_unlocked_r+0x208>
 8016f94:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016f98:	e9cd b600 	strd	fp, r6, [sp]
 8016f9c:	493e      	ldr	r1, [pc, #248]	; (8017098 <_tzset_unlocked_r+0x2f8>)
 8016f9e:	4633      	mov	r3, r6
 8016fa0:	aa07      	add	r2, sp, #28
 8016fa2:	4640      	mov	r0, r8
 8016fa4:	f7fe fe6c 	bl	8015c80 <siscanf>
 8016fa8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016fac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016fb0:	213c      	movs	r1, #60	; 0x3c
 8016fb2:	fb01 3302 	mla	r3, r1, r2, r3
 8016fb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016fba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016fbe:	fb01 3302 	mla	r3, r1, r2, r3
 8016fc2:	61bb      	str	r3, [r7, #24]
 8016fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016fc6:	3728      	adds	r7, #40	; 0x28
 8016fc8:	4444      	add	r4, r8
 8016fca:	f1b9 0f00 	cmp.w	r9, #0
 8016fce:	d020      	beq.n	8017012 <_tzset_unlocked_r+0x272>
 8016fd0:	6868      	ldr	r0, [r5, #4]
 8016fd2:	f7ff fe29 	bl	8016c28 <__tzcalc_limits>
 8016fd6:	4b28      	ldr	r3, [pc, #160]	; (8017078 <_tzset_unlocked_r+0x2d8>)
 8016fd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016fda:	601a      	str	r2, [r3, #0]
 8016fdc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8016fde:	1a9b      	subs	r3, r3, r2
 8016fe0:	4a27      	ldr	r2, [pc, #156]	; (8017080 <_tzset_unlocked_r+0x2e0>)
 8016fe2:	bf18      	it	ne
 8016fe4:	2301      	movne	r3, #1
 8016fe6:	6013      	str	r3, [r2, #0]
 8016fe8:	e6f4      	b.n	8016dd4 <_tzset_unlocked_r+0x34>
 8016fea:	2b2b      	cmp	r3, #43	; 0x2b
 8016fec:	bf08      	it	eq
 8016fee:	3401      	addeq	r4, #1
 8016ff0:	2701      	movs	r7, #1
 8016ff2:	e772      	b.n	8016eda <_tzset_unlocked_r+0x13a>
 8016ff4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016ff8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016ffc:	213c      	movs	r1, #60	; 0x3c
 8016ffe:	fb01 3302 	mla	r3, r1, r2, r3
 8017002:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8017006:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801700a:	fb01 3302 	mla	r3, r1, r2, r3
 801700e:	437b      	muls	r3, r7
 8017010:	e77a      	b.n	8016f08 <_tzset_unlocked_r+0x168>
 8017012:	f04f 0901 	mov.w	r9, #1
 8017016:	e77d      	b.n	8016f14 <_tzset_unlocked_r+0x174>
 8017018:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801701c:	bf06      	itte	eq
 801701e:	3401      	addeq	r4, #1
 8017020:	4643      	moveq	r3, r8
 8017022:	2344      	movne	r3, #68	; 0x44
 8017024:	220a      	movs	r2, #10
 8017026:	a90b      	add	r1, sp, #44	; 0x2c
 8017028:	4620      	mov	r0, r4
 801702a:	9305      	str	r3, [sp, #20]
 801702c:	f003 f880 	bl	801a130 <strtoul>
 8017030:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8017034:	9b05      	ldr	r3, [sp, #20]
 8017036:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801703a:	45a0      	cmp	r8, r4
 801703c:	d114      	bne.n	8017068 <_tzset_unlocked_r+0x2c8>
 801703e:	234d      	movs	r3, #77	; 0x4d
 8017040:	f1b9 0f00 	cmp.w	r9, #0
 8017044:	d107      	bne.n	8017056 <_tzset_unlocked_r+0x2b6>
 8017046:	722b      	strb	r3, [r5, #8]
 8017048:	2103      	movs	r1, #3
 801704a:	2302      	movs	r3, #2
 801704c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8017050:	f8c5 9014 	str.w	r9, [r5, #20]
 8017054:	e791      	b.n	8016f7a <_tzset_unlocked_r+0x1da>
 8017056:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801705a:	220b      	movs	r2, #11
 801705c:	2301      	movs	r3, #1
 801705e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8017062:	2300      	movs	r3, #0
 8017064:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017066:	e788      	b.n	8016f7a <_tzset_unlocked_r+0x1da>
 8017068:	b280      	uxth	r0, r0
 801706a:	723b      	strb	r3, [r7, #8]
 801706c:	6178      	str	r0, [r7, #20]
 801706e:	e784      	b.n	8016f7a <_tzset_unlocked_r+0x1da>
 8017070:	0807370d 	.word	0x0807370d
 8017074:	20005e64 	.word	0x20005e64
 8017078:	20005e6c 	.word	0x20005e6c
 801707c:	08073710 	.word	0x08073710
 8017080:	20005e68 	.word	0x20005e68
 8017084:	20000288 	.word	0x20000288
 8017088:	20005e57 	.word	0x20005e57
 801708c:	08073714 	.word	0x08073714
 8017090:	08073737 	.word	0x08073737
 8017094:	08073723 	.word	0x08073723
 8017098:	08073736 	.word	0x08073736
 801709c:	20005e4c 	.word	0x20005e4c

080170a0 <__swbuf_r>:
 80170a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170a2:	460e      	mov	r6, r1
 80170a4:	4614      	mov	r4, r2
 80170a6:	4605      	mov	r5, r0
 80170a8:	b118      	cbz	r0, 80170b2 <__swbuf_r+0x12>
 80170aa:	6983      	ldr	r3, [r0, #24]
 80170ac:	b90b      	cbnz	r3, 80170b2 <__swbuf_r+0x12>
 80170ae:	f001 f88b 	bl	80181c8 <__sinit>
 80170b2:	4b21      	ldr	r3, [pc, #132]	; (8017138 <__swbuf_r+0x98>)
 80170b4:	429c      	cmp	r4, r3
 80170b6:	d12b      	bne.n	8017110 <__swbuf_r+0x70>
 80170b8:	686c      	ldr	r4, [r5, #4]
 80170ba:	69a3      	ldr	r3, [r4, #24]
 80170bc:	60a3      	str	r3, [r4, #8]
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	071a      	lsls	r2, r3, #28
 80170c2:	d52f      	bpl.n	8017124 <__swbuf_r+0x84>
 80170c4:	6923      	ldr	r3, [r4, #16]
 80170c6:	b36b      	cbz	r3, 8017124 <__swbuf_r+0x84>
 80170c8:	6923      	ldr	r3, [r4, #16]
 80170ca:	6820      	ldr	r0, [r4, #0]
 80170cc:	1ac0      	subs	r0, r0, r3
 80170ce:	6963      	ldr	r3, [r4, #20]
 80170d0:	b2f6      	uxtb	r6, r6
 80170d2:	4283      	cmp	r3, r0
 80170d4:	4637      	mov	r7, r6
 80170d6:	dc04      	bgt.n	80170e2 <__swbuf_r+0x42>
 80170d8:	4621      	mov	r1, r4
 80170da:	4628      	mov	r0, r5
 80170dc:	f000 ffe0 	bl	80180a0 <_fflush_r>
 80170e0:	bb30      	cbnz	r0, 8017130 <__swbuf_r+0x90>
 80170e2:	68a3      	ldr	r3, [r4, #8]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	60a3      	str	r3, [r4, #8]
 80170e8:	6823      	ldr	r3, [r4, #0]
 80170ea:	1c5a      	adds	r2, r3, #1
 80170ec:	6022      	str	r2, [r4, #0]
 80170ee:	701e      	strb	r6, [r3, #0]
 80170f0:	6963      	ldr	r3, [r4, #20]
 80170f2:	3001      	adds	r0, #1
 80170f4:	4283      	cmp	r3, r0
 80170f6:	d004      	beq.n	8017102 <__swbuf_r+0x62>
 80170f8:	89a3      	ldrh	r3, [r4, #12]
 80170fa:	07db      	lsls	r3, r3, #31
 80170fc:	d506      	bpl.n	801710c <__swbuf_r+0x6c>
 80170fe:	2e0a      	cmp	r6, #10
 8017100:	d104      	bne.n	801710c <__swbuf_r+0x6c>
 8017102:	4621      	mov	r1, r4
 8017104:	4628      	mov	r0, r5
 8017106:	f000 ffcb 	bl	80180a0 <_fflush_r>
 801710a:	b988      	cbnz	r0, 8017130 <__swbuf_r+0x90>
 801710c:	4638      	mov	r0, r7
 801710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017110:	4b0a      	ldr	r3, [pc, #40]	; (801713c <__swbuf_r+0x9c>)
 8017112:	429c      	cmp	r4, r3
 8017114:	d101      	bne.n	801711a <__swbuf_r+0x7a>
 8017116:	68ac      	ldr	r4, [r5, #8]
 8017118:	e7cf      	b.n	80170ba <__swbuf_r+0x1a>
 801711a:	4b09      	ldr	r3, [pc, #36]	; (8017140 <__swbuf_r+0xa0>)
 801711c:	429c      	cmp	r4, r3
 801711e:	bf08      	it	eq
 8017120:	68ec      	ldreq	r4, [r5, #12]
 8017122:	e7ca      	b.n	80170ba <__swbuf_r+0x1a>
 8017124:	4621      	mov	r1, r4
 8017126:	4628      	mov	r0, r5
 8017128:	f000 f81e 	bl	8017168 <__swsetup_r>
 801712c:	2800      	cmp	r0, #0
 801712e:	d0cb      	beq.n	80170c8 <__swbuf_r+0x28>
 8017130:	f04f 37ff 	mov.w	r7, #4294967295
 8017134:	e7ea      	b.n	801710c <__swbuf_r+0x6c>
 8017136:	bf00      	nop
 8017138:	080738e4 	.word	0x080738e4
 801713c:	08073904 	.word	0x08073904
 8017140:	080738c4 	.word	0x080738c4

08017144 <_write_r>:
 8017144:	b538      	push	{r3, r4, r5, lr}
 8017146:	4d07      	ldr	r5, [pc, #28]	; (8017164 <_write_r+0x20>)
 8017148:	4604      	mov	r4, r0
 801714a:	4608      	mov	r0, r1
 801714c:	4611      	mov	r1, r2
 801714e:	2200      	movs	r2, #0
 8017150:	602a      	str	r2, [r5, #0]
 8017152:	461a      	mov	r2, r3
 8017154:	f7ed fcf7 	bl	8004b46 <_write>
 8017158:	1c43      	adds	r3, r0, #1
 801715a:	d102      	bne.n	8017162 <_write_r+0x1e>
 801715c:	682b      	ldr	r3, [r5, #0]
 801715e:	b103      	cbz	r3, 8017162 <_write_r+0x1e>
 8017160:	6023      	str	r3, [r4, #0]
 8017162:	bd38      	pop	{r3, r4, r5, pc}
 8017164:	20005e78 	.word	0x20005e78

08017168 <__swsetup_r>:
 8017168:	4b32      	ldr	r3, [pc, #200]	; (8017234 <__swsetup_r+0xcc>)
 801716a:	b570      	push	{r4, r5, r6, lr}
 801716c:	681d      	ldr	r5, [r3, #0]
 801716e:	4606      	mov	r6, r0
 8017170:	460c      	mov	r4, r1
 8017172:	b125      	cbz	r5, 801717e <__swsetup_r+0x16>
 8017174:	69ab      	ldr	r3, [r5, #24]
 8017176:	b913      	cbnz	r3, 801717e <__swsetup_r+0x16>
 8017178:	4628      	mov	r0, r5
 801717a:	f001 f825 	bl	80181c8 <__sinit>
 801717e:	4b2e      	ldr	r3, [pc, #184]	; (8017238 <__swsetup_r+0xd0>)
 8017180:	429c      	cmp	r4, r3
 8017182:	d10f      	bne.n	80171a4 <__swsetup_r+0x3c>
 8017184:	686c      	ldr	r4, [r5, #4]
 8017186:	89a3      	ldrh	r3, [r4, #12]
 8017188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801718c:	0719      	lsls	r1, r3, #28
 801718e:	d42c      	bmi.n	80171ea <__swsetup_r+0x82>
 8017190:	06dd      	lsls	r5, r3, #27
 8017192:	d411      	bmi.n	80171b8 <__swsetup_r+0x50>
 8017194:	2309      	movs	r3, #9
 8017196:	6033      	str	r3, [r6, #0]
 8017198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801719c:	81a3      	strh	r3, [r4, #12]
 801719e:	f04f 30ff 	mov.w	r0, #4294967295
 80171a2:	e03e      	b.n	8017222 <__swsetup_r+0xba>
 80171a4:	4b25      	ldr	r3, [pc, #148]	; (801723c <__swsetup_r+0xd4>)
 80171a6:	429c      	cmp	r4, r3
 80171a8:	d101      	bne.n	80171ae <__swsetup_r+0x46>
 80171aa:	68ac      	ldr	r4, [r5, #8]
 80171ac:	e7eb      	b.n	8017186 <__swsetup_r+0x1e>
 80171ae:	4b24      	ldr	r3, [pc, #144]	; (8017240 <__swsetup_r+0xd8>)
 80171b0:	429c      	cmp	r4, r3
 80171b2:	bf08      	it	eq
 80171b4:	68ec      	ldreq	r4, [r5, #12]
 80171b6:	e7e6      	b.n	8017186 <__swsetup_r+0x1e>
 80171b8:	0758      	lsls	r0, r3, #29
 80171ba:	d512      	bpl.n	80171e2 <__swsetup_r+0x7a>
 80171bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171be:	b141      	cbz	r1, 80171d2 <__swsetup_r+0x6a>
 80171c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171c4:	4299      	cmp	r1, r3
 80171c6:	d002      	beq.n	80171ce <__swsetup_r+0x66>
 80171c8:	4630      	mov	r0, r6
 80171ca:	f7fd fe85 	bl	8014ed8 <_free_r>
 80171ce:	2300      	movs	r3, #0
 80171d0:	6363      	str	r3, [r4, #52]	; 0x34
 80171d2:	89a3      	ldrh	r3, [r4, #12]
 80171d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80171d8:	81a3      	strh	r3, [r4, #12]
 80171da:	2300      	movs	r3, #0
 80171dc:	6063      	str	r3, [r4, #4]
 80171de:	6923      	ldr	r3, [r4, #16]
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	89a3      	ldrh	r3, [r4, #12]
 80171e4:	f043 0308 	orr.w	r3, r3, #8
 80171e8:	81a3      	strh	r3, [r4, #12]
 80171ea:	6923      	ldr	r3, [r4, #16]
 80171ec:	b94b      	cbnz	r3, 8017202 <__swsetup_r+0x9a>
 80171ee:	89a3      	ldrh	r3, [r4, #12]
 80171f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171f8:	d003      	beq.n	8017202 <__swsetup_r+0x9a>
 80171fa:	4621      	mov	r1, r4
 80171fc:	4630      	mov	r0, r6
 80171fe:	f001 fc79 	bl	8018af4 <__smakebuf_r>
 8017202:	89a0      	ldrh	r0, [r4, #12]
 8017204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017208:	f010 0301 	ands.w	r3, r0, #1
 801720c:	d00a      	beq.n	8017224 <__swsetup_r+0xbc>
 801720e:	2300      	movs	r3, #0
 8017210:	60a3      	str	r3, [r4, #8]
 8017212:	6963      	ldr	r3, [r4, #20]
 8017214:	425b      	negs	r3, r3
 8017216:	61a3      	str	r3, [r4, #24]
 8017218:	6923      	ldr	r3, [r4, #16]
 801721a:	b943      	cbnz	r3, 801722e <__swsetup_r+0xc6>
 801721c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017220:	d1ba      	bne.n	8017198 <__swsetup_r+0x30>
 8017222:	bd70      	pop	{r4, r5, r6, pc}
 8017224:	0781      	lsls	r1, r0, #30
 8017226:	bf58      	it	pl
 8017228:	6963      	ldrpl	r3, [r4, #20]
 801722a:	60a3      	str	r3, [r4, #8]
 801722c:	e7f4      	b.n	8017218 <__swsetup_r+0xb0>
 801722e:	2000      	movs	r0, #0
 8017230:	e7f7      	b.n	8017222 <__swsetup_r+0xba>
 8017232:	bf00      	nop
 8017234:	20000224 	.word	0x20000224
 8017238:	080738e4 	.word	0x080738e4
 801723c:	08073904 	.word	0x08073904
 8017240:	080738c4 	.word	0x080738c4

08017244 <abort>:
 8017244:	b508      	push	{r3, lr}
 8017246:	2006      	movs	r0, #6
 8017248:	f002 fece 	bl	8019fe8 <raise>
 801724c:	2001      	movs	r0, #1
 801724e:	f7ed fc53 	bl	8004af8 <_exit>
	...

08017254 <_close_r>:
 8017254:	b538      	push	{r3, r4, r5, lr}
 8017256:	4d06      	ldr	r5, [pc, #24]	; (8017270 <_close_r+0x1c>)
 8017258:	2300      	movs	r3, #0
 801725a:	4604      	mov	r4, r0
 801725c:	4608      	mov	r0, r1
 801725e:	602b      	str	r3, [r5, #0]
 8017260:	f7ed fc8d 	bl	8004b7e <_close>
 8017264:	1c43      	adds	r3, r0, #1
 8017266:	d102      	bne.n	801726e <_close_r+0x1a>
 8017268:	682b      	ldr	r3, [r5, #0]
 801726a:	b103      	cbz	r3, 801726e <_close_r+0x1a>
 801726c:	6023      	str	r3, [r4, #0]
 801726e:	bd38      	pop	{r3, r4, r5, pc}
 8017270:	20005e78 	.word	0x20005e78

08017274 <div>:
 8017274:	2900      	cmp	r1, #0
 8017276:	b510      	push	{r4, lr}
 8017278:	fb91 f4f2 	sdiv	r4, r1, r2
 801727c:	fb02 1314 	mls	r3, r2, r4, r1
 8017280:	db06      	blt.n	8017290 <div+0x1c>
 8017282:	2b00      	cmp	r3, #0
 8017284:	da01      	bge.n	801728a <div+0x16>
 8017286:	3401      	adds	r4, #1
 8017288:	1a9b      	subs	r3, r3, r2
 801728a:	e9c0 4300 	strd	r4, r3, [r0]
 801728e:	bd10      	pop	{r4, pc}
 8017290:	2b00      	cmp	r3, #0
 8017292:	bfc4      	itt	gt
 8017294:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8017298:	189b      	addgt	r3, r3, r2
 801729a:	e7f6      	b.n	801728a <div+0x16>

0801729c <quorem>:
 801729c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a0:	6903      	ldr	r3, [r0, #16]
 80172a2:	690c      	ldr	r4, [r1, #16]
 80172a4:	42a3      	cmp	r3, r4
 80172a6:	4607      	mov	r7, r0
 80172a8:	f2c0 8081 	blt.w	80173ae <quorem+0x112>
 80172ac:	3c01      	subs	r4, #1
 80172ae:	f101 0814 	add.w	r8, r1, #20
 80172b2:	f100 0514 	add.w	r5, r0, #20
 80172b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172ba:	9301      	str	r3, [sp, #4]
 80172bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80172c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172c4:	3301      	adds	r3, #1
 80172c6:	429a      	cmp	r2, r3
 80172c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80172cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80172d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80172d4:	d331      	bcc.n	801733a <quorem+0x9e>
 80172d6:	f04f 0e00 	mov.w	lr, #0
 80172da:	4640      	mov	r0, r8
 80172dc:	46ac      	mov	ip, r5
 80172de:	46f2      	mov	sl, lr
 80172e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80172e4:	b293      	uxth	r3, r2
 80172e6:	fb06 e303 	mla	r3, r6, r3, lr
 80172ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	ebaa 0303 	sub.w	r3, sl, r3
 80172f4:	f8dc a000 	ldr.w	sl, [ip]
 80172f8:	0c12      	lsrs	r2, r2, #16
 80172fa:	fa13 f38a 	uxtah	r3, r3, sl
 80172fe:	fb06 e202 	mla	r2, r6, r2, lr
 8017302:	9300      	str	r3, [sp, #0]
 8017304:	9b00      	ldr	r3, [sp, #0]
 8017306:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801730a:	b292      	uxth	r2, r2
 801730c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017314:	f8bd 3000 	ldrh.w	r3, [sp]
 8017318:	4581      	cmp	r9, r0
 801731a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801731e:	f84c 3b04 	str.w	r3, [ip], #4
 8017322:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017326:	d2db      	bcs.n	80172e0 <quorem+0x44>
 8017328:	f855 300b 	ldr.w	r3, [r5, fp]
 801732c:	b92b      	cbnz	r3, 801733a <quorem+0x9e>
 801732e:	9b01      	ldr	r3, [sp, #4]
 8017330:	3b04      	subs	r3, #4
 8017332:	429d      	cmp	r5, r3
 8017334:	461a      	mov	r2, r3
 8017336:	d32e      	bcc.n	8017396 <quorem+0xfa>
 8017338:	613c      	str	r4, [r7, #16]
 801733a:	4638      	mov	r0, r7
 801733c:	f001 ff1e 	bl	801917c <__mcmp>
 8017340:	2800      	cmp	r0, #0
 8017342:	db24      	blt.n	801738e <quorem+0xf2>
 8017344:	3601      	adds	r6, #1
 8017346:	4628      	mov	r0, r5
 8017348:	f04f 0c00 	mov.w	ip, #0
 801734c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017350:	f8d0 e000 	ldr.w	lr, [r0]
 8017354:	b293      	uxth	r3, r2
 8017356:	ebac 0303 	sub.w	r3, ip, r3
 801735a:	0c12      	lsrs	r2, r2, #16
 801735c:	fa13 f38e 	uxtah	r3, r3, lr
 8017360:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017368:	b29b      	uxth	r3, r3
 801736a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801736e:	45c1      	cmp	r9, r8
 8017370:	f840 3b04 	str.w	r3, [r0], #4
 8017374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017378:	d2e8      	bcs.n	801734c <quorem+0xb0>
 801737a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801737e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017382:	b922      	cbnz	r2, 801738e <quorem+0xf2>
 8017384:	3b04      	subs	r3, #4
 8017386:	429d      	cmp	r5, r3
 8017388:	461a      	mov	r2, r3
 801738a:	d30a      	bcc.n	80173a2 <quorem+0x106>
 801738c:	613c      	str	r4, [r7, #16]
 801738e:	4630      	mov	r0, r6
 8017390:	b003      	add	sp, #12
 8017392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017396:	6812      	ldr	r2, [r2, #0]
 8017398:	3b04      	subs	r3, #4
 801739a:	2a00      	cmp	r2, #0
 801739c:	d1cc      	bne.n	8017338 <quorem+0x9c>
 801739e:	3c01      	subs	r4, #1
 80173a0:	e7c7      	b.n	8017332 <quorem+0x96>
 80173a2:	6812      	ldr	r2, [r2, #0]
 80173a4:	3b04      	subs	r3, #4
 80173a6:	2a00      	cmp	r2, #0
 80173a8:	d1f0      	bne.n	801738c <quorem+0xf0>
 80173aa:	3c01      	subs	r4, #1
 80173ac:	e7eb      	b.n	8017386 <quorem+0xea>
 80173ae:	2000      	movs	r0, #0
 80173b0:	e7ee      	b.n	8017390 <quorem+0xf4>
 80173b2:	0000      	movs	r0, r0
 80173b4:	0000      	movs	r0, r0
	...

080173b8 <_dtoa_r>:
 80173b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173bc:	ed2d 8b04 	vpush	{d8-d9}
 80173c0:	ec57 6b10 	vmov	r6, r7, d0
 80173c4:	b093      	sub	sp, #76	; 0x4c
 80173c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80173c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80173cc:	9106      	str	r1, [sp, #24]
 80173ce:	ee10 aa10 	vmov	sl, s0
 80173d2:	4604      	mov	r4, r0
 80173d4:	9209      	str	r2, [sp, #36]	; 0x24
 80173d6:	930c      	str	r3, [sp, #48]	; 0x30
 80173d8:	46bb      	mov	fp, r7
 80173da:	b975      	cbnz	r5, 80173fa <_dtoa_r+0x42>
 80173dc:	2010      	movs	r0, #16
 80173de:	f7fd fae3 	bl	80149a8 <malloc>
 80173e2:	4602      	mov	r2, r0
 80173e4:	6260      	str	r0, [r4, #36]	; 0x24
 80173e6:	b920      	cbnz	r0, 80173f2 <_dtoa_r+0x3a>
 80173e8:	4ba7      	ldr	r3, [pc, #668]	; (8017688 <_dtoa_r+0x2d0>)
 80173ea:	21ea      	movs	r1, #234	; 0xea
 80173ec:	48a7      	ldr	r0, [pc, #668]	; (801768c <_dtoa_r+0x2d4>)
 80173ee:	f7fd fa79 	bl	80148e4 <__assert_func>
 80173f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80173f6:	6005      	str	r5, [r0, #0]
 80173f8:	60c5      	str	r5, [r0, #12]
 80173fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173fc:	6819      	ldr	r1, [r3, #0]
 80173fe:	b151      	cbz	r1, 8017416 <_dtoa_r+0x5e>
 8017400:	685a      	ldr	r2, [r3, #4]
 8017402:	604a      	str	r2, [r1, #4]
 8017404:	2301      	movs	r3, #1
 8017406:	4093      	lsls	r3, r2
 8017408:	608b      	str	r3, [r1, #8]
 801740a:	4620      	mov	r0, r4
 801740c:	f001 fc2a 	bl	8018c64 <_Bfree>
 8017410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017412:	2200      	movs	r2, #0
 8017414:	601a      	str	r2, [r3, #0]
 8017416:	1e3b      	subs	r3, r7, #0
 8017418:	bfaa      	itet	ge
 801741a:	2300      	movge	r3, #0
 801741c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017420:	f8c8 3000 	strge.w	r3, [r8]
 8017424:	4b9a      	ldr	r3, [pc, #616]	; (8017690 <_dtoa_r+0x2d8>)
 8017426:	bfbc      	itt	lt
 8017428:	2201      	movlt	r2, #1
 801742a:	f8c8 2000 	strlt.w	r2, [r8]
 801742e:	ea33 030b 	bics.w	r3, r3, fp
 8017432:	d11b      	bne.n	801746c <_dtoa_r+0xb4>
 8017434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017436:	f242 730f 	movw	r3, #9999	; 0x270f
 801743a:	6013      	str	r3, [r2, #0]
 801743c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017440:	4333      	orrs	r3, r6
 8017442:	f000 8592 	beq.w	8017f6a <_dtoa_r+0xbb2>
 8017446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017448:	b963      	cbnz	r3, 8017464 <_dtoa_r+0xac>
 801744a:	4b92      	ldr	r3, [pc, #584]	; (8017694 <_dtoa_r+0x2dc>)
 801744c:	e022      	b.n	8017494 <_dtoa_r+0xdc>
 801744e:	4b92      	ldr	r3, [pc, #584]	; (8017698 <_dtoa_r+0x2e0>)
 8017450:	9301      	str	r3, [sp, #4]
 8017452:	3308      	adds	r3, #8
 8017454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017456:	6013      	str	r3, [r2, #0]
 8017458:	9801      	ldr	r0, [sp, #4]
 801745a:	b013      	add	sp, #76	; 0x4c
 801745c:	ecbd 8b04 	vpop	{d8-d9}
 8017460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017464:	4b8b      	ldr	r3, [pc, #556]	; (8017694 <_dtoa_r+0x2dc>)
 8017466:	9301      	str	r3, [sp, #4]
 8017468:	3303      	adds	r3, #3
 801746a:	e7f3      	b.n	8017454 <_dtoa_r+0x9c>
 801746c:	2200      	movs	r2, #0
 801746e:	2300      	movs	r3, #0
 8017470:	4650      	mov	r0, sl
 8017472:	4659      	mov	r1, fp
 8017474:	f7e9 fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8017478:	ec4b ab19 	vmov	d9, sl, fp
 801747c:	4680      	mov	r8, r0
 801747e:	b158      	cbz	r0, 8017498 <_dtoa_r+0xe0>
 8017480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017482:	2301      	movs	r3, #1
 8017484:	6013      	str	r3, [r2, #0]
 8017486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017488:	2b00      	cmp	r3, #0
 801748a:	f000 856b 	beq.w	8017f64 <_dtoa_r+0xbac>
 801748e:	4883      	ldr	r0, [pc, #524]	; (801769c <_dtoa_r+0x2e4>)
 8017490:	6018      	str	r0, [r3, #0]
 8017492:	1e43      	subs	r3, r0, #1
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	e7df      	b.n	8017458 <_dtoa_r+0xa0>
 8017498:	ec4b ab10 	vmov	d0, sl, fp
 801749c:	aa10      	add	r2, sp, #64	; 0x40
 801749e:	a911      	add	r1, sp, #68	; 0x44
 80174a0:	4620      	mov	r0, r4
 80174a2:	f001 ff8d 	bl	80193c0 <__d2b>
 80174a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80174aa:	ee08 0a10 	vmov	s16, r0
 80174ae:	2d00      	cmp	r5, #0
 80174b0:	f000 8084 	beq.w	80175bc <_dtoa_r+0x204>
 80174b4:	ee19 3a90 	vmov	r3, s19
 80174b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80174c0:	4656      	mov	r6, sl
 80174c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80174c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80174ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80174ce:	4b74      	ldr	r3, [pc, #464]	; (80176a0 <_dtoa_r+0x2e8>)
 80174d0:	2200      	movs	r2, #0
 80174d2:	4630      	mov	r0, r6
 80174d4:	4639      	mov	r1, r7
 80174d6:	f7e8 fef7 	bl	80002c8 <__aeabi_dsub>
 80174da:	a365      	add	r3, pc, #404	; (adr r3, 8017670 <_dtoa_r+0x2b8>)
 80174dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e0:	f7e9 f8aa 	bl	8000638 <__aeabi_dmul>
 80174e4:	a364      	add	r3, pc, #400	; (adr r3, 8017678 <_dtoa_r+0x2c0>)
 80174e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ea:	f7e8 feef 	bl	80002cc <__adddf3>
 80174ee:	4606      	mov	r6, r0
 80174f0:	4628      	mov	r0, r5
 80174f2:	460f      	mov	r7, r1
 80174f4:	f7e9 f836 	bl	8000564 <__aeabi_i2d>
 80174f8:	a361      	add	r3, pc, #388	; (adr r3, 8017680 <_dtoa_r+0x2c8>)
 80174fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fe:	f7e9 f89b 	bl	8000638 <__aeabi_dmul>
 8017502:	4602      	mov	r2, r0
 8017504:	460b      	mov	r3, r1
 8017506:	4630      	mov	r0, r6
 8017508:	4639      	mov	r1, r7
 801750a:	f7e8 fedf 	bl	80002cc <__adddf3>
 801750e:	4606      	mov	r6, r0
 8017510:	460f      	mov	r7, r1
 8017512:	f7e9 fb41 	bl	8000b98 <__aeabi_d2iz>
 8017516:	2200      	movs	r2, #0
 8017518:	9000      	str	r0, [sp, #0]
 801751a:	2300      	movs	r3, #0
 801751c:	4630      	mov	r0, r6
 801751e:	4639      	mov	r1, r7
 8017520:	f7e9 fafc 	bl	8000b1c <__aeabi_dcmplt>
 8017524:	b150      	cbz	r0, 801753c <_dtoa_r+0x184>
 8017526:	9800      	ldr	r0, [sp, #0]
 8017528:	f7e9 f81c 	bl	8000564 <__aeabi_i2d>
 801752c:	4632      	mov	r2, r6
 801752e:	463b      	mov	r3, r7
 8017530:	f7e9 faea 	bl	8000b08 <__aeabi_dcmpeq>
 8017534:	b910      	cbnz	r0, 801753c <_dtoa_r+0x184>
 8017536:	9b00      	ldr	r3, [sp, #0]
 8017538:	3b01      	subs	r3, #1
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	9b00      	ldr	r3, [sp, #0]
 801753e:	2b16      	cmp	r3, #22
 8017540:	d85a      	bhi.n	80175f8 <_dtoa_r+0x240>
 8017542:	9a00      	ldr	r2, [sp, #0]
 8017544:	4b57      	ldr	r3, [pc, #348]	; (80176a4 <_dtoa_r+0x2ec>)
 8017546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754e:	ec51 0b19 	vmov	r0, r1, d9
 8017552:	f7e9 fae3 	bl	8000b1c <__aeabi_dcmplt>
 8017556:	2800      	cmp	r0, #0
 8017558:	d050      	beq.n	80175fc <_dtoa_r+0x244>
 801755a:	9b00      	ldr	r3, [sp, #0]
 801755c:	3b01      	subs	r3, #1
 801755e:	9300      	str	r3, [sp, #0]
 8017560:	2300      	movs	r3, #0
 8017562:	930b      	str	r3, [sp, #44]	; 0x2c
 8017564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017566:	1b5d      	subs	r5, r3, r5
 8017568:	1e6b      	subs	r3, r5, #1
 801756a:	9305      	str	r3, [sp, #20]
 801756c:	bf45      	ittet	mi
 801756e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017572:	9304      	strmi	r3, [sp, #16]
 8017574:	2300      	movpl	r3, #0
 8017576:	2300      	movmi	r3, #0
 8017578:	bf4c      	ite	mi
 801757a:	9305      	strmi	r3, [sp, #20]
 801757c:	9304      	strpl	r3, [sp, #16]
 801757e:	9b00      	ldr	r3, [sp, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	db3d      	blt.n	8017600 <_dtoa_r+0x248>
 8017584:	9b05      	ldr	r3, [sp, #20]
 8017586:	9a00      	ldr	r2, [sp, #0]
 8017588:	920a      	str	r2, [sp, #40]	; 0x28
 801758a:	4413      	add	r3, r2
 801758c:	9305      	str	r3, [sp, #20]
 801758e:	2300      	movs	r3, #0
 8017590:	9307      	str	r3, [sp, #28]
 8017592:	9b06      	ldr	r3, [sp, #24]
 8017594:	2b09      	cmp	r3, #9
 8017596:	f200 8089 	bhi.w	80176ac <_dtoa_r+0x2f4>
 801759a:	2b05      	cmp	r3, #5
 801759c:	bfc4      	itt	gt
 801759e:	3b04      	subgt	r3, #4
 80175a0:	9306      	strgt	r3, [sp, #24]
 80175a2:	9b06      	ldr	r3, [sp, #24]
 80175a4:	f1a3 0302 	sub.w	r3, r3, #2
 80175a8:	bfcc      	ite	gt
 80175aa:	2500      	movgt	r5, #0
 80175ac:	2501      	movle	r5, #1
 80175ae:	2b03      	cmp	r3, #3
 80175b0:	f200 8087 	bhi.w	80176c2 <_dtoa_r+0x30a>
 80175b4:	e8df f003 	tbb	[pc, r3]
 80175b8:	59383a2d 	.word	0x59383a2d
 80175bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80175c0:	441d      	add	r5, r3
 80175c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80175c6:	2b20      	cmp	r3, #32
 80175c8:	bfc1      	itttt	gt
 80175ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80175ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80175d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80175d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80175da:	bfda      	itte	le
 80175dc:	f1c3 0320 	rsble	r3, r3, #32
 80175e0:	fa06 f003 	lslle.w	r0, r6, r3
 80175e4:	4318      	orrgt	r0, r3
 80175e6:	f7e8 ffad 	bl	8000544 <__aeabi_ui2d>
 80175ea:	2301      	movs	r3, #1
 80175ec:	4606      	mov	r6, r0
 80175ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80175f2:	3d01      	subs	r5, #1
 80175f4:	930e      	str	r3, [sp, #56]	; 0x38
 80175f6:	e76a      	b.n	80174ce <_dtoa_r+0x116>
 80175f8:	2301      	movs	r3, #1
 80175fa:	e7b2      	b.n	8017562 <_dtoa_r+0x1aa>
 80175fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80175fe:	e7b1      	b.n	8017564 <_dtoa_r+0x1ac>
 8017600:	9b04      	ldr	r3, [sp, #16]
 8017602:	9a00      	ldr	r2, [sp, #0]
 8017604:	1a9b      	subs	r3, r3, r2
 8017606:	9304      	str	r3, [sp, #16]
 8017608:	4253      	negs	r3, r2
 801760a:	9307      	str	r3, [sp, #28]
 801760c:	2300      	movs	r3, #0
 801760e:	930a      	str	r3, [sp, #40]	; 0x28
 8017610:	e7bf      	b.n	8017592 <_dtoa_r+0x1da>
 8017612:	2300      	movs	r3, #0
 8017614:	9308      	str	r3, [sp, #32]
 8017616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017618:	2b00      	cmp	r3, #0
 801761a:	dc55      	bgt.n	80176c8 <_dtoa_r+0x310>
 801761c:	2301      	movs	r3, #1
 801761e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017622:	461a      	mov	r2, r3
 8017624:	9209      	str	r2, [sp, #36]	; 0x24
 8017626:	e00c      	b.n	8017642 <_dtoa_r+0x28a>
 8017628:	2301      	movs	r3, #1
 801762a:	e7f3      	b.n	8017614 <_dtoa_r+0x25c>
 801762c:	2300      	movs	r3, #0
 801762e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017630:	9308      	str	r3, [sp, #32]
 8017632:	9b00      	ldr	r3, [sp, #0]
 8017634:	4413      	add	r3, r2
 8017636:	9302      	str	r3, [sp, #8]
 8017638:	3301      	adds	r3, #1
 801763a:	2b01      	cmp	r3, #1
 801763c:	9303      	str	r3, [sp, #12]
 801763e:	bfb8      	it	lt
 8017640:	2301      	movlt	r3, #1
 8017642:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017644:	2200      	movs	r2, #0
 8017646:	6042      	str	r2, [r0, #4]
 8017648:	2204      	movs	r2, #4
 801764a:	f102 0614 	add.w	r6, r2, #20
 801764e:	429e      	cmp	r6, r3
 8017650:	6841      	ldr	r1, [r0, #4]
 8017652:	d93d      	bls.n	80176d0 <_dtoa_r+0x318>
 8017654:	4620      	mov	r0, r4
 8017656:	f001 fac5 	bl	8018be4 <_Balloc>
 801765a:	9001      	str	r0, [sp, #4]
 801765c:	2800      	cmp	r0, #0
 801765e:	d13b      	bne.n	80176d8 <_dtoa_r+0x320>
 8017660:	4b11      	ldr	r3, [pc, #68]	; (80176a8 <_dtoa_r+0x2f0>)
 8017662:	4602      	mov	r2, r0
 8017664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017668:	e6c0      	b.n	80173ec <_dtoa_r+0x34>
 801766a:	2301      	movs	r3, #1
 801766c:	e7df      	b.n	801762e <_dtoa_r+0x276>
 801766e:	bf00      	nop
 8017670:	636f4361 	.word	0x636f4361
 8017674:	3fd287a7 	.word	0x3fd287a7
 8017678:	8b60c8b3 	.word	0x8b60c8b3
 801767c:	3fc68a28 	.word	0x3fc68a28
 8017680:	509f79fb 	.word	0x509f79fb
 8017684:	3fd34413 	.word	0x3fd34413
 8017688:	080734ac 	.word	0x080734ac
 801768c:	08073857 	.word	0x08073857
 8017690:	7ff00000 	.word	0x7ff00000
 8017694:	08073853 	.word	0x08073853
 8017698:	0807384a 	.word	0x0807384a
 801769c:	08073b61 	.word	0x08073b61
 80176a0:	3ff80000 	.word	0x3ff80000
 80176a4:	08073a88 	.word	0x08073a88
 80176a8:	080738b2 	.word	0x080738b2
 80176ac:	2501      	movs	r5, #1
 80176ae:	2300      	movs	r3, #0
 80176b0:	9306      	str	r3, [sp, #24]
 80176b2:	9508      	str	r5, [sp, #32]
 80176b4:	f04f 33ff 	mov.w	r3, #4294967295
 80176b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80176bc:	2200      	movs	r2, #0
 80176be:	2312      	movs	r3, #18
 80176c0:	e7b0      	b.n	8017624 <_dtoa_r+0x26c>
 80176c2:	2301      	movs	r3, #1
 80176c4:	9308      	str	r3, [sp, #32]
 80176c6:	e7f5      	b.n	80176b4 <_dtoa_r+0x2fc>
 80176c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80176ce:	e7b8      	b.n	8017642 <_dtoa_r+0x28a>
 80176d0:	3101      	adds	r1, #1
 80176d2:	6041      	str	r1, [r0, #4]
 80176d4:	0052      	lsls	r2, r2, #1
 80176d6:	e7b8      	b.n	801764a <_dtoa_r+0x292>
 80176d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176da:	9a01      	ldr	r2, [sp, #4]
 80176dc:	601a      	str	r2, [r3, #0]
 80176de:	9b03      	ldr	r3, [sp, #12]
 80176e0:	2b0e      	cmp	r3, #14
 80176e2:	f200 809d 	bhi.w	8017820 <_dtoa_r+0x468>
 80176e6:	2d00      	cmp	r5, #0
 80176e8:	f000 809a 	beq.w	8017820 <_dtoa_r+0x468>
 80176ec:	9b00      	ldr	r3, [sp, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	dd32      	ble.n	8017758 <_dtoa_r+0x3a0>
 80176f2:	4ab7      	ldr	r2, [pc, #732]	; (80179d0 <_dtoa_r+0x618>)
 80176f4:	f003 030f 	and.w	r3, r3, #15
 80176f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80176fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017700:	9b00      	ldr	r3, [sp, #0]
 8017702:	05d8      	lsls	r0, r3, #23
 8017704:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017708:	d516      	bpl.n	8017738 <_dtoa_r+0x380>
 801770a:	4bb2      	ldr	r3, [pc, #712]	; (80179d4 <_dtoa_r+0x61c>)
 801770c:	ec51 0b19 	vmov	r0, r1, d9
 8017710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017714:	f7e9 f8ba 	bl	800088c <__aeabi_ddiv>
 8017718:	f007 070f 	and.w	r7, r7, #15
 801771c:	4682      	mov	sl, r0
 801771e:	468b      	mov	fp, r1
 8017720:	2503      	movs	r5, #3
 8017722:	4eac      	ldr	r6, [pc, #688]	; (80179d4 <_dtoa_r+0x61c>)
 8017724:	b957      	cbnz	r7, 801773c <_dtoa_r+0x384>
 8017726:	4642      	mov	r2, r8
 8017728:	464b      	mov	r3, r9
 801772a:	4650      	mov	r0, sl
 801772c:	4659      	mov	r1, fp
 801772e:	f7e9 f8ad 	bl	800088c <__aeabi_ddiv>
 8017732:	4682      	mov	sl, r0
 8017734:	468b      	mov	fp, r1
 8017736:	e028      	b.n	801778a <_dtoa_r+0x3d2>
 8017738:	2502      	movs	r5, #2
 801773a:	e7f2      	b.n	8017722 <_dtoa_r+0x36a>
 801773c:	07f9      	lsls	r1, r7, #31
 801773e:	d508      	bpl.n	8017752 <_dtoa_r+0x39a>
 8017740:	4640      	mov	r0, r8
 8017742:	4649      	mov	r1, r9
 8017744:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017748:	f7e8 ff76 	bl	8000638 <__aeabi_dmul>
 801774c:	3501      	adds	r5, #1
 801774e:	4680      	mov	r8, r0
 8017750:	4689      	mov	r9, r1
 8017752:	107f      	asrs	r7, r7, #1
 8017754:	3608      	adds	r6, #8
 8017756:	e7e5      	b.n	8017724 <_dtoa_r+0x36c>
 8017758:	f000 809b 	beq.w	8017892 <_dtoa_r+0x4da>
 801775c:	9b00      	ldr	r3, [sp, #0]
 801775e:	4f9d      	ldr	r7, [pc, #628]	; (80179d4 <_dtoa_r+0x61c>)
 8017760:	425e      	negs	r6, r3
 8017762:	4b9b      	ldr	r3, [pc, #620]	; (80179d0 <_dtoa_r+0x618>)
 8017764:	f006 020f 	and.w	r2, r6, #15
 8017768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017770:	ec51 0b19 	vmov	r0, r1, d9
 8017774:	f7e8 ff60 	bl	8000638 <__aeabi_dmul>
 8017778:	1136      	asrs	r6, r6, #4
 801777a:	4682      	mov	sl, r0
 801777c:	468b      	mov	fp, r1
 801777e:	2300      	movs	r3, #0
 8017780:	2502      	movs	r5, #2
 8017782:	2e00      	cmp	r6, #0
 8017784:	d17a      	bne.n	801787c <_dtoa_r+0x4c4>
 8017786:	2b00      	cmp	r3, #0
 8017788:	d1d3      	bne.n	8017732 <_dtoa_r+0x37a>
 801778a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801778c:	2b00      	cmp	r3, #0
 801778e:	f000 8082 	beq.w	8017896 <_dtoa_r+0x4de>
 8017792:	4b91      	ldr	r3, [pc, #580]	; (80179d8 <_dtoa_r+0x620>)
 8017794:	2200      	movs	r2, #0
 8017796:	4650      	mov	r0, sl
 8017798:	4659      	mov	r1, fp
 801779a:	f7e9 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 801779e:	2800      	cmp	r0, #0
 80177a0:	d079      	beq.n	8017896 <_dtoa_r+0x4de>
 80177a2:	9b03      	ldr	r3, [sp, #12]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d076      	beq.n	8017896 <_dtoa_r+0x4de>
 80177a8:	9b02      	ldr	r3, [sp, #8]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	dd36      	ble.n	801781c <_dtoa_r+0x464>
 80177ae:	9b00      	ldr	r3, [sp, #0]
 80177b0:	4650      	mov	r0, sl
 80177b2:	4659      	mov	r1, fp
 80177b4:	1e5f      	subs	r7, r3, #1
 80177b6:	2200      	movs	r2, #0
 80177b8:	4b88      	ldr	r3, [pc, #544]	; (80179dc <_dtoa_r+0x624>)
 80177ba:	f7e8 ff3d 	bl	8000638 <__aeabi_dmul>
 80177be:	9e02      	ldr	r6, [sp, #8]
 80177c0:	4682      	mov	sl, r0
 80177c2:	468b      	mov	fp, r1
 80177c4:	3501      	adds	r5, #1
 80177c6:	4628      	mov	r0, r5
 80177c8:	f7e8 fecc 	bl	8000564 <__aeabi_i2d>
 80177cc:	4652      	mov	r2, sl
 80177ce:	465b      	mov	r3, fp
 80177d0:	f7e8 ff32 	bl	8000638 <__aeabi_dmul>
 80177d4:	4b82      	ldr	r3, [pc, #520]	; (80179e0 <_dtoa_r+0x628>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	f7e8 fd78 	bl	80002cc <__adddf3>
 80177dc:	46d0      	mov	r8, sl
 80177de:	46d9      	mov	r9, fp
 80177e0:	4682      	mov	sl, r0
 80177e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80177e6:	2e00      	cmp	r6, #0
 80177e8:	d158      	bne.n	801789c <_dtoa_r+0x4e4>
 80177ea:	4b7e      	ldr	r3, [pc, #504]	; (80179e4 <_dtoa_r+0x62c>)
 80177ec:	2200      	movs	r2, #0
 80177ee:	4640      	mov	r0, r8
 80177f0:	4649      	mov	r1, r9
 80177f2:	f7e8 fd69 	bl	80002c8 <__aeabi_dsub>
 80177f6:	4652      	mov	r2, sl
 80177f8:	465b      	mov	r3, fp
 80177fa:	4680      	mov	r8, r0
 80177fc:	4689      	mov	r9, r1
 80177fe:	f7e9 f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 8017802:	2800      	cmp	r0, #0
 8017804:	f040 8295 	bne.w	8017d32 <_dtoa_r+0x97a>
 8017808:	4652      	mov	r2, sl
 801780a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801780e:	4640      	mov	r0, r8
 8017810:	4649      	mov	r1, r9
 8017812:	f7e9 f983 	bl	8000b1c <__aeabi_dcmplt>
 8017816:	2800      	cmp	r0, #0
 8017818:	f040 8289 	bne.w	8017d2e <_dtoa_r+0x976>
 801781c:	ec5b ab19 	vmov	sl, fp, d9
 8017820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017822:	2b00      	cmp	r3, #0
 8017824:	f2c0 8148 	blt.w	8017ab8 <_dtoa_r+0x700>
 8017828:	9a00      	ldr	r2, [sp, #0]
 801782a:	2a0e      	cmp	r2, #14
 801782c:	f300 8144 	bgt.w	8017ab8 <_dtoa_r+0x700>
 8017830:	4b67      	ldr	r3, [pc, #412]	; (80179d0 <_dtoa_r+0x618>)
 8017832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017836:	e9d3 8900 	ldrd	r8, r9, [r3]
 801783a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801783c:	2b00      	cmp	r3, #0
 801783e:	f280 80d5 	bge.w	80179ec <_dtoa_r+0x634>
 8017842:	9b03      	ldr	r3, [sp, #12]
 8017844:	2b00      	cmp	r3, #0
 8017846:	f300 80d1 	bgt.w	80179ec <_dtoa_r+0x634>
 801784a:	f040 826f 	bne.w	8017d2c <_dtoa_r+0x974>
 801784e:	4b65      	ldr	r3, [pc, #404]	; (80179e4 <_dtoa_r+0x62c>)
 8017850:	2200      	movs	r2, #0
 8017852:	4640      	mov	r0, r8
 8017854:	4649      	mov	r1, r9
 8017856:	f7e8 feef 	bl	8000638 <__aeabi_dmul>
 801785a:	4652      	mov	r2, sl
 801785c:	465b      	mov	r3, fp
 801785e:	f7e9 f971 	bl	8000b44 <__aeabi_dcmpge>
 8017862:	9e03      	ldr	r6, [sp, #12]
 8017864:	4637      	mov	r7, r6
 8017866:	2800      	cmp	r0, #0
 8017868:	f040 8245 	bne.w	8017cf6 <_dtoa_r+0x93e>
 801786c:	9d01      	ldr	r5, [sp, #4]
 801786e:	2331      	movs	r3, #49	; 0x31
 8017870:	f805 3b01 	strb.w	r3, [r5], #1
 8017874:	9b00      	ldr	r3, [sp, #0]
 8017876:	3301      	adds	r3, #1
 8017878:	9300      	str	r3, [sp, #0]
 801787a:	e240      	b.n	8017cfe <_dtoa_r+0x946>
 801787c:	07f2      	lsls	r2, r6, #31
 801787e:	d505      	bpl.n	801788c <_dtoa_r+0x4d4>
 8017880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017884:	f7e8 fed8 	bl	8000638 <__aeabi_dmul>
 8017888:	3501      	adds	r5, #1
 801788a:	2301      	movs	r3, #1
 801788c:	1076      	asrs	r6, r6, #1
 801788e:	3708      	adds	r7, #8
 8017890:	e777      	b.n	8017782 <_dtoa_r+0x3ca>
 8017892:	2502      	movs	r5, #2
 8017894:	e779      	b.n	801778a <_dtoa_r+0x3d2>
 8017896:	9f00      	ldr	r7, [sp, #0]
 8017898:	9e03      	ldr	r6, [sp, #12]
 801789a:	e794      	b.n	80177c6 <_dtoa_r+0x40e>
 801789c:	9901      	ldr	r1, [sp, #4]
 801789e:	4b4c      	ldr	r3, [pc, #304]	; (80179d0 <_dtoa_r+0x618>)
 80178a0:	4431      	add	r1, r6
 80178a2:	910d      	str	r1, [sp, #52]	; 0x34
 80178a4:	9908      	ldr	r1, [sp, #32]
 80178a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80178aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80178ae:	2900      	cmp	r1, #0
 80178b0:	d043      	beq.n	801793a <_dtoa_r+0x582>
 80178b2:	494d      	ldr	r1, [pc, #308]	; (80179e8 <_dtoa_r+0x630>)
 80178b4:	2000      	movs	r0, #0
 80178b6:	f7e8 ffe9 	bl	800088c <__aeabi_ddiv>
 80178ba:	4652      	mov	r2, sl
 80178bc:	465b      	mov	r3, fp
 80178be:	f7e8 fd03 	bl	80002c8 <__aeabi_dsub>
 80178c2:	9d01      	ldr	r5, [sp, #4]
 80178c4:	4682      	mov	sl, r0
 80178c6:	468b      	mov	fp, r1
 80178c8:	4649      	mov	r1, r9
 80178ca:	4640      	mov	r0, r8
 80178cc:	f7e9 f964 	bl	8000b98 <__aeabi_d2iz>
 80178d0:	4606      	mov	r6, r0
 80178d2:	f7e8 fe47 	bl	8000564 <__aeabi_i2d>
 80178d6:	4602      	mov	r2, r0
 80178d8:	460b      	mov	r3, r1
 80178da:	4640      	mov	r0, r8
 80178dc:	4649      	mov	r1, r9
 80178de:	f7e8 fcf3 	bl	80002c8 <__aeabi_dsub>
 80178e2:	3630      	adds	r6, #48	; 0x30
 80178e4:	f805 6b01 	strb.w	r6, [r5], #1
 80178e8:	4652      	mov	r2, sl
 80178ea:	465b      	mov	r3, fp
 80178ec:	4680      	mov	r8, r0
 80178ee:	4689      	mov	r9, r1
 80178f0:	f7e9 f914 	bl	8000b1c <__aeabi_dcmplt>
 80178f4:	2800      	cmp	r0, #0
 80178f6:	d163      	bne.n	80179c0 <_dtoa_r+0x608>
 80178f8:	4642      	mov	r2, r8
 80178fa:	464b      	mov	r3, r9
 80178fc:	4936      	ldr	r1, [pc, #216]	; (80179d8 <_dtoa_r+0x620>)
 80178fe:	2000      	movs	r0, #0
 8017900:	f7e8 fce2 	bl	80002c8 <__aeabi_dsub>
 8017904:	4652      	mov	r2, sl
 8017906:	465b      	mov	r3, fp
 8017908:	f7e9 f908 	bl	8000b1c <__aeabi_dcmplt>
 801790c:	2800      	cmp	r0, #0
 801790e:	f040 80b5 	bne.w	8017a7c <_dtoa_r+0x6c4>
 8017912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017914:	429d      	cmp	r5, r3
 8017916:	d081      	beq.n	801781c <_dtoa_r+0x464>
 8017918:	4b30      	ldr	r3, [pc, #192]	; (80179dc <_dtoa_r+0x624>)
 801791a:	2200      	movs	r2, #0
 801791c:	4650      	mov	r0, sl
 801791e:	4659      	mov	r1, fp
 8017920:	f7e8 fe8a 	bl	8000638 <__aeabi_dmul>
 8017924:	4b2d      	ldr	r3, [pc, #180]	; (80179dc <_dtoa_r+0x624>)
 8017926:	4682      	mov	sl, r0
 8017928:	468b      	mov	fp, r1
 801792a:	4640      	mov	r0, r8
 801792c:	4649      	mov	r1, r9
 801792e:	2200      	movs	r2, #0
 8017930:	f7e8 fe82 	bl	8000638 <__aeabi_dmul>
 8017934:	4680      	mov	r8, r0
 8017936:	4689      	mov	r9, r1
 8017938:	e7c6      	b.n	80178c8 <_dtoa_r+0x510>
 801793a:	4650      	mov	r0, sl
 801793c:	4659      	mov	r1, fp
 801793e:	f7e8 fe7b 	bl	8000638 <__aeabi_dmul>
 8017942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017944:	9d01      	ldr	r5, [sp, #4]
 8017946:	930f      	str	r3, [sp, #60]	; 0x3c
 8017948:	4682      	mov	sl, r0
 801794a:	468b      	mov	fp, r1
 801794c:	4649      	mov	r1, r9
 801794e:	4640      	mov	r0, r8
 8017950:	f7e9 f922 	bl	8000b98 <__aeabi_d2iz>
 8017954:	4606      	mov	r6, r0
 8017956:	f7e8 fe05 	bl	8000564 <__aeabi_i2d>
 801795a:	3630      	adds	r6, #48	; 0x30
 801795c:	4602      	mov	r2, r0
 801795e:	460b      	mov	r3, r1
 8017960:	4640      	mov	r0, r8
 8017962:	4649      	mov	r1, r9
 8017964:	f7e8 fcb0 	bl	80002c8 <__aeabi_dsub>
 8017968:	f805 6b01 	strb.w	r6, [r5], #1
 801796c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801796e:	429d      	cmp	r5, r3
 8017970:	4680      	mov	r8, r0
 8017972:	4689      	mov	r9, r1
 8017974:	f04f 0200 	mov.w	r2, #0
 8017978:	d124      	bne.n	80179c4 <_dtoa_r+0x60c>
 801797a:	4b1b      	ldr	r3, [pc, #108]	; (80179e8 <_dtoa_r+0x630>)
 801797c:	4650      	mov	r0, sl
 801797e:	4659      	mov	r1, fp
 8017980:	f7e8 fca4 	bl	80002cc <__adddf3>
 8017984:	4602      	mov	r2, r0
 8017986:	460b      	mov	r3, r1
 8017988:	4640      	mov	r0, r8
 801798a:	4649      	mov	r1, r9
 801798c:	f7e9 f8e4 	bl	8000b58 <__aeabi_dcmpgt>
 8017990:	2800      	cmp	r0, #0
 8017992:	d173      	bne.n	8017a7c <_dtoa_r+0x6c4>
 8017994:	4652      	mov	r2, sl
 8017996:	465b      	mov	r3, fp
 8017998:	4913      	ldr	r1, [pc, #76]	; (80179e8 <_dtoa_r+0x630>)
 801799a:	2000      	movs	r0, #0
 801799c:	f7e8 fc94 	bl	80002c8 <__aeabi_dsub>
 80179a0:	4602      	mov	r2, r0
 80179a2:	460b      	mov	r3, r1
 80179a4:	4640      	mov	r0, r8
 80179a6:	4649      	mov	r1, r9
 80179a8:	f7e9 f8b8 	bl	8000b1c <__aeabi_dcmplt>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	f43f af35 	beq.w	801781c <_dtoa_r+0x464>
 80179b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80179b4:	1e6b      	subs	r3, r5, #1
 80179b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80179b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179bc:	2b30      	cmp	r3, #48	; 0x30
 80179be:	d0f8      	beq.n	80179b2 <_dtoa_r+0x5fa>
 80179c0:	9700      	str	r7, [sp, #0]
 80179c2:	e049      	b.n	8017a58 <_dtoa_r+0x6a0>
 80179c4:	4b05      	ldr	r3, [pc, #20]	; (80179dc <_dtoa_r+0x624>)
 80179c6:	f7e8 fe37 	bl	8000638 <__aeabi_dmul>
 80179ca:	4680      	mov	r8, r0
 80179cc:	4689      	mov	r9, r1
 80179ce:	e7bd      	b.n	801794c <_dtoa_r+0x594>
 80179d0:	08073a88 	.word	0x08073a88
 80179d4:	08073a60 	.word	0x08073a60
 80179d8:	3ff00000 	.word	0x3ff00000
 80179dc:	40240000 	.word	0x40240000
 80179e0:	401c0000 	.word	0x401c0000
 80179e4:	40140000 	.word	0x40140000
 80179e8:	3fe00000 	.word	0x3fe00000
 80179ec:	9d01      	ldr	r5, [sp, #4]
 80179ee:	4656      	mov	r6, sl
 80179f0:	465f      	mov	r7, fp
 80179f2:	4642      	mov	r2, r8
 80179f4:	464b      	mov	r3, r9
 80179f6:	4630      	mov	r0, r6
 80179f8:	4639      	mov	r1, r7
 80179fa:	f7e8 ff47 	bl	800088c <__aeabi_ddiv>
 80179fe:	f7e9 f8cb 	bl	8000b98 <__aeabi_d2iz>
 8017a02:	4682      	mov	sl, r0
 8017a04:	f7e8 fdae 	bl	8000564 <__aeabi_i2d>
 8017a08:	4642      	mov	r2, r8
 8017a0a:	464b      	mov	r3, r9
 8017a0c:	f7e8 fe14 	bl	8000638 <__aeabi_dmul>
 8017a10:	4602      	mov	r2, r0
 8017a12:	460b      	mov	r3, r1
 8017a14:	4630      	mov	r0, r6
 8017a16:	4639      	mov	r1, r7
 8017a18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8017a1c:	f7e8 fc54 	bl	80002c8 <__aeabi_dsub>
 8017a20:	f805 6b01 	strb.w	r6, [r5], #1
 8017a24:	9e01      	ldr	r6, [sp, #4]
 8017a26:	9f03      	ldr	r7, [sp, #12]
 8017a28:	1bae      	subs	r6, r5, r6
 8017a2a:	42b7      	cmp	r7, r6
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	460b      	mov	r3, r1
 8017a30:	d135      	bne.n	8017a9e <_dtoa_r+0x6e6>
 8017a32:	f7e8 fc4b 	bl	80002cc <__adddf3>
 8017a36:	4642      	mov	r2, r8
 8017a38:	464b      	mov	r3, r9
 8017a3a:	4606      	mov	r6, r0
 8017a3c:	460f      	mov	r7, r1
 8017a3e:	f7e9 f88b 	bl	8000b58 <__aeabi_dcmpgt>
 8017a42:	b9d0      	cbnz	r0, 8017a7a <_dtoa_r+0x6c2>
 8017a44:	4642      	mov	r2, r8
 8017a46:	464b      	mov	r3, r9
 8017a48:	4630      	mov	r0, r6
 8017a4a:	4639      	mov	r1, r7
 8017a4c:	f7e9 f85c 	bl	8000b08 <__aeabi_dcmpeq>
 8017a50:	b110      	cbz	r0, 8017a58 <_dtoa_r+0x6a0>
 8017a52:	f01a 0f01 	tst.w	sl, #1
 8017a56:	d110      	bne.n	8017a7a <_dtoa_r+0x6c2>
 8017a58:	4620      	mov	r0, r4
 8017a5a:	ee18 1a10 	vmov	r1, s16
 8017a5e:	f001 f901 	bl	8018c64 <_Bfree>
 8017a62:	2300      	movs	r3, #0
 8017a64:	9800      	ldr	r0, [sp, #0]
 8017a66:	702b      	strb	r3, [r5, #0]
 8017a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a6a:	3001      	adds	r0, #1
 8017a6c:	6018      	str	r0, [r3, #0]
 8017a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f43f acf1 	beq.w	8017458 <_dtoa_r+0xa0>
 8017a76:	601d      	str	r5, [r3, #0]
 8017a78:	e4ee      	b.n	8017458 <_dtoa_r+0xa0>
 8017a7a:	9f00      	ldr	r7, [sp, #0]
 8017a7c:	462b      	mov	r3, r5
 8017a7e:	461d      	mov	r5, r3
 8017a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017a84:	2a39      	cmp	r2, #57	; 0x39
 8017a86:	d106      	bne.n	8017a96 <_dtoa_r+0x6de>
 8017a88:	9a01      	ldr	r2, [sp, #4]
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d1f7      	bne.n	8017a7e <_dtoa_r+0x6c6>
 8017a8e:	9901      	ldr	r1, [sp, #4]
 8017a90:	2230      	movs	r2, #48	; 0x30
 8017a92:	3701      	adds	r7, #1
 8017a94:	700a      	strb	r2, [r1, #0]
 8017a96:	781a      	ldrb	r2, [r3, #0]
 8017a98:	3201      	adds	r2, #1
 8017a9a:	701a      	strb	r2, [r3, #0]
 8017a9c:	e790      	b.n	80179c0 <_dtoa_r+0x608>
 8017a9e:	4ba6      	ldr	r3, [pc, #664]	; (8017d38 <_dtoa_r+0x980>)
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	f7e8 fdc9 	bl	8000638 <__aeabi_dmul>
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	4606      	mov	r6, r0
 8017aac:	460f      	mov	r7, r1
 8017aae:	f7e9 f82b 	bl	8000b08 <__aeabi_dcmpeq>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d09d      	beq.n	80179f2 <_dtoa_r+0x63a>
 8017ab6:	e7cf      	b.n	8017a58 <_dtoa_r+0x6a0>
 8017ab8:	9a08      	ldr	r2, [sp, #32]
 8017aba:	2a00      	cmp	r2, #0
 8017abc:	f000 80d7 	beq.w	8017c6e <_dtoa_r+0x8b6>
 8017ac0:	9a06      	ldr	r2, [sp, #24]
 8017ac2:	2a01      	cmp	r2, #1
 8017ac4:	f300 80ba 	bgt.w	8017c3c <_dtoa_r+0x884>
 8017ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017aca:	2a00      	cmp	r2, #0
 8017acc:	f000 80b2 	beq.w	8017c34 <_dtoa_r+0x87c>
 8017ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017ad4:	9e07      	ldr	r6, [sp, #28]
 8017ad6:	9d04      	ldr	r5, [sp, #16]
 8017ad8:	9a04      	ldr	r2, [sp, #16]
 8017ada:	441a      	add	r2, r3
 8017adc:	9204      	str	r2, [sp, #16]
 8017ade:	9a05      	ldr	r2, [sp, #20]
 8017ae0:	2101      	movs	r1, #1
 8017ae2:	441a      	add	r2, r3
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	9205      	str	r2, [sp, #20]
 8017ae8:	f001 f9be 	bl	8018e68 <__i2b>
 8017aec:	4607      	mov	r7, r0
 8017aee:	2d00      	cmp	r5, #0
 8017af0:	dd0c      	ble.n	8017b0c <_dtoa_r+0x754>
 8017af2:	9b05      	ldr	r3, [sp, #20]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	dd09      	ble.n	8017b0c <_dtoa_r+0x754>
 8017af8:	42ab      	cmp	r3, r5
 8017afa:	9a04      	ldr	r2, [sp, #16]
 8017afc:	bfa8      	it	ge
 8017afe:	462b      	movge	r3, r5
 8017b00:	1ad2      	subs	r2, r2, r3
 8017b02:	9204      	str	r2, [sp, #16]
 8017b04:	9a05      	ldr	r2, [sp, #20]
 8017b06:	1aed      	subs	r5, r5, r3
 8017b08:	1ad3      	subs	r3, r2, r3
 8017b0a:	9305      	str	r3, [sp, #20]
 8017b0c:	9b07      	ldr	r3, [sp, #28]
 8017b0e:	b31b      	cbz	r3, 8017b58 <_dtoa_r+0x7a0>
 8017b10:	9b08      	ldr	r3, [sp, #32]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	f000 80af 	beq.w	8017c76 <_dtoa_r+0x8be>
 8017b18:	2e00      	cmp	r6, #0
 8017b1a:	dd13      	ble.n	8017b44 <_dtoa_r+0x78c>
 8017b1c:	4639      	mov	r1, r7
 8017b1e:	4632      	mov	r2, r6
 8017b20:	4620      	mov	r0, r4
 8017b22:	f001 fa61 	bl	8018fe8 <__pow5mult>
 8017b26:	ee18 2a10 	vmov	r2, s16
 8017b2a:	4601      	mov	r1, r0
 8017b2c:	4607      	mov	r7, r0
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f001 f9b0 	bl	8018e94 <__multiply>
 8017b34:	ee18 1a10 	vmov	r1, s16
 8017b38:	4680      	mov	r8, r0
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f001 f892 	bl	8018c64 <_Bfree>
 8017b40:	ee08 8a10 	vmov	s16, r8
 8017b44:	9b07      	ldr	r3, [sp, #28]
 8017b46:	1b9a      	subs	r2, r3, r6
 8017b48:	d006      	beq.n	8017b58 <_dtoa_r+0x7a0>
 8017b4a:	ee18 1a10 	vmov	r1, s16
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f001 fa4a 	bl	8018fe8 <__pow5mult>
 8017b54:	ee08 0a10 	vmov	s16, r0
 8017b58:	2101      	movs	r1, #1
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f001 f984 	bl	8018e68 <__i2b>
 8017b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	4606      	mov	r6, r0
 8017b66:	f340 8088 	ble.w	8017c7a <_dtoa_r+0x8c2>
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	4601      	mov	r1, r0
 8017b6e:	4620      	mov	r0, r4
 8017b70:	f001 fa3a 	bl	8018fe8 <__pow5mult>
 8017b74:	9b06      	ldr	r3, [sp, #24]
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	4606      	mov	r6, r0
 8017b7a:	f340 8081 	ble.w	8017c80 <_dtoa_r+0x8c8>
 8017b7e:	f04f 0800 	mov.w	r8, #0
 8017b82:	6933      	ldr	r3, [r6, #16]
 8017b84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017b88:	6918      	ldr	r0, [r3, #16]
 8017b8a:	f001 f91d 	bl	8018dc8 <__hi0bits>
 8017b8e:	f1c0 0020 	rsb	r0, r0, #32
 8017b92:	9b05      	ldr	r3, [sp, #20]
 8017b94:	4418      	add	r0, r3
 8017b96:	f010 001f 	ands.w	r0, r0, #31
 8017b9a:	f000 8092 	beq.w	8017cc2 <_dtoa_r+0x90a>
 8017b9e:	f1c0 0320 	rsb	r3, r0, #32
 8017ba2:	2b04      	cmp	r3, #4
 8017ba4:	f340 808a 	ble.w	8017cbc <_dtoa_r+0x904>
 8017ba8:	f1c0 001c 	rsb	r0, r0, #28
 8017bac:	9b04      	ldr	r3, [sp, #16]
 8017bae:	4403      	add	r3, r0
 8017bb0:	9304      	str	r3, [sp, #16]
 8017bb2:	9b05      	ldr	r3, [sp, #20]
 8017bb4:	4403      	add	r3, r0
 8017bb6:	4405      	add	r5, r0
 8017bb8:	9305      	str	r3, [sp, #20]
 8017bba:	9b04      	ldr	r3, [sp, #16]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	dd07      	ble.n	8017bd0 <_dtoa_r+0x818>
 8017bc0:	ee18 1a10 	vmov	r1, s16
 8017bc4:	461a      	mov	r2, r3
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	f001 fa68 	bl	801909c <__lshift>
 8017bcc:	ee08 0a10 	vmov	s16, r0
 8017bd0:	9b05      	ldr	r3, [sp, #20]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	dd05      	ble.n	8017be2 <_dtoa_r+0x82a>
 8017bd6:	4631      	mov	r1, r6
 8017bd8:	461a      	mov	r2, r3
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f001 fa5e 	bl	801909c <__lshift>
 8017be0:	4606      	mov	r6, r0
 8017be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d06e      	beq.n	8017cc6 <_dtoa_r+0x90e>
 8017be8:	ee18 0a10 	vmov	r0, s16
 8017bec:	4631      	mov	r1, r6
 8017bee:	f001 fac5 	bl	801917c <__mcmp>
 8017bf2:	2800      	cmp	r0, #0
 8017bf4:	da67      	bge.n	8017cc6 <_dtoa_r+0x90e>
 8017bf6:	9b00      	ldr	r3, [sp, #0]
 8017bf8:	3b01      	subs	r3, #1
 8017bfa:	ee18 1a10 	vmov	r1, s16
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	220a      	movs	r2, #10
 8017c02:	2300      	movs	r3, #0
 8017c04:	4620      	mov	r0, r4
 8017c06:	f001 f84f 	bl	8018ca8 <__multadd>
 8017c0a:	9b08      	ldr	r3, [sp, #32]
 8017c0c:	ee08 0a10 	vmov	s16, r0
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	f000 81b1 	beq.w	8017f78 <_dtoa_r+0xbc0>
 8017c16:	2300      	movs	r3, #0
 8017c18:	4639      	mov	r1, r7
 8017c1a:	220a      	movs	r2, #10
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f001 f843 	bl	8018ca8 <__multadd>
 8017c22:	9b02      	ldr	r3, [sp, #8]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	4607      	mov	r7, r0
 8017c28:	f300 808e 	bgt.w	8017d48 <_dtoa_r+0x990>
 8017c2c:	9b06      	ldr	r3, [sp, #24]
 8017c2e:	2b02      	cmp	r3, #2
 8017c30:	dc51      	bgt.n	8017cd6 <_dtoa_r+0x91e>
 8017c32:	e089      	b.n	8017d48 <_dtoa_r+0x990>
 8017c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c3a:	e74b      	b.n	8017ad4 <_dtoa_r+0x71c>
 8017c3c:	9b03      	ldr	r3, [sp, #12]
 8017c3e:	1e5e      	subs	r6, r3, #1
 8017c40:	9b07      	ldr	r3, [sp, #28]
 8017c42:	42b3      	cmp	r3, r6
 8017c44:	bfbf      	itttt	lt
 8017c46:	9b07      	ldrlt	r3, [sp, #28]
 8017c48:	9607      	strlt	r6, [sp, #28]
 8017c4a:	1af2      	sublt	r2, r6, r3
 8017c4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017c4e:	bfb6      	itet	lt
 8017c50:	189b      	addlt	r3, r3, r2
 8017c52:	1b9e      	subge	r6, r3, r6
 8017c54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8017c56:	9b03      	ldr	r3, [sp, #12]
 8017c58:	bfb8      	it	lt
 8017c5a:	2600      	movlt	r6, #0
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	bfb7      	itett	lt
 8017c60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017c64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017c68:	1a9d      	sublt	r5, r3, r2
 8017c6a:	2300      	movlt	r3, #0
 8017c6c:	e734      	b.n	8017ad8 <_dtoa_r+0x720>
 8017c6e:	9e07      	ldr	r6, [sp, #28]
 8017c70:	9d04      	ldr	r5, [sp, #16]
 8017c72:	9f08      	ldr	r7, [sp, #32]
 8017c74:	e73b      	b.n	8017aee <_dtoa_r+0x736>
 8017c76:	9a07      	ldr	r2, [sp, #28]
 8017c78:	e767      	b.n	8017b4a <_dtoa_r+0x792>
 8017c7a:	9b06      	ldr	r3, [sp, #24]
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	dc18      	bgt.n	8017cb2 <_dtoa_r+0x8fa>
 8017c80:	f1ba 0f00 	cmp.w	sl, #0
 8017c84:	d115      	bne.n	8017cb2 <_dtoa_r+0x8fa>
 8017c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017c8a:	b993      	cbnz	r3, 8017cb2 <_dtoa_r+0x8fa>
 8017c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017c90:	0d1b      	lsrs	r3, r3, #20
 8017c92:	051b      	lsls	r3, r3, #20
 8017c94:	b183      	cbz	r3, 8017cb8 <_dtoa_r+0x900>
 8017c96:	9b04      	ldr	r3, [sp, #16]
 8017c98:	3301      	adds	r3, #1
 8017c9a:	9304      	str	r3, [sp, #16]
 8017c9c:	9b05      	ldr	r3, [sp, #20]
 8017c9e:	3301      	adds	r3, #1
 8017ca0:	9305      	str	r3, [sp, #20]
 8017ca2:	f04f 0801 	mov.w	r8, #1
 8017ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	f47f af6a 	bne.w	8017b82 <_dtoa_r+0x7ca>
 8017cae:	2001      	movs	r0, #1
 8017cb0:	e76f      	b.n	8017b92 <_dtoa_r+0x7da>
 8017cb2:	f04f 0800 	mov.w	r8, #0
 8017cb6:	e7f6      	b.n	8017ca6 <_dtoa_r+0x8ee>
 8017cb8:	4698      	mov	r8, r3
 8017cba:	e7f4      	b.n	8017ca6 <_dtoa_r+0x8ee>
 8017cbc:	f43f af7d 	beq.w	8017bba <_dtoa_r+0x802>
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	301c      	adds	r0, #28
 8017cc4:	e772      	b.n	8017bac <_dtoa_r+0x7f4>
 8017cc6:	9b03      	ldr	r3, [sp, #12]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	dc37      	bgt.n	8017d3c <_dtoa_r+0x984>
 8017ccc:	9b06      	ldr	r3, [sp, #24]
 8017cce:	2b02      	cmp	r3, #2
 8017cd0:	dd34      	ble.n	8017d3c <_dtoa_r+0x984>
 8017cd2:	9b03      	ldr	r3, [sp, #12]
 8017cd4:	9302      	str	r3, [sp, #8]
 8017cd6:	9b02      	ldr	r3, [sp, #8]
 8017cd8:	b96b      	cbnz	r3, 8017cf6 <_dtoa_r+0x93e>
 8017cda:	4631      	mov	r1, r6
 8017cdc:	2205      	movs	r2, #5
 8017cde:	4620      	mov	r0, r4
 8017ce0:	f000 ffe2 	bl	8018ca8 <__multadd>
 8017ce4:	4601      	mov	r1, r0
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	ee18 0a10 	vmov	r0, s16
 8017cec:	f001 fa46 	bl	801917c <__mcmp>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	f73f adbb 	bgt.w	801786c <_dtoa_r+0x4b4>
 8017cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cf8:	9d01      	ldr	r5, [sp, #4]
 8017cfa:	43db      	mvns	r3, r3
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	f04f 0800 	mov.w	r8, #0
 8017d02:	4631      	mov	r1, r6
 8017d04:	4620      	mov	r0, r4
 8017d06:	f000 ffad 	bl	8018c64 <_Bfree>
 8017d0a:	2f00      	cmp	r7, #0
 8017d0c:	f43f aea4 	beq.w	8017a58 <_dtoa_r+0x6a0>
 8017d10:	f1b8 0f00 	cmp.w	r8, #0
 8017d14:	d005      	beq.n	8017d22 <_dtoa_r+0x96a>
 8017d16:	45b8      	cmp	r8, r7
 8017d18:	d003      	beq.n	8017d22 <_dtoa_r+0x96a>
 8017d1a:	4641      	mov	r1, r8
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f000 ffa1 	bl	8018c64 <_Bfree>
 8017d22:	4639      	mov	r1, r7
 8017d24:	4620      	mov	r0, r4
 8017d26:	f000 ff9d 	bl	8018c64 <_Bfree>
 8017d2a:	e695      	b.n	8017a58 <_dtoa_r+0x6a0>
 8017d2c:	2600      	movs	r6, #0
 8017d2e:	4637      	mov	r7, r6
 8017d30:	e7e1      	b.n	8017cf6 <_dtoa_r+0x93e>
 8017d32:	9700      	str	r7, [sp, #0]
 8017d34:	4637      	mov	r7, r6
 8017d36:	e599      	b.n	801786c <_dtoa_r+0x4b4>
 8017d38:	40240000 	.word	0x40240000
 8017d3c:	9b08      	ldr	r3, [sp, #32]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	f000 80ca 	beq.w	8017ed8 <_dtoa_r+0xb20>
 8017d44:	9b03      	ldr	r3, [sp, #12]
 8017d46:	9302      	str	r3, [sp, #8]
 8017d48:	2d00      	cmp	r5, #0
 8017d4a:	dd05      	ble.n	8017d58 <_dtoa_r+0x9a0>
 8017d4c:	4639      	mov	r1, r7
 8017d4e:	462a      	mov	r2, r5
 8017d50:	4620      	mov	r0, r4
 8017d52:	f001 f9a3 	bl	801909c <__lshift>
 8017d56:	4607      	mov	r7, r0
 8017d58:	f1b8 0f00 	cmp.w	r8, #0
 8017d5c:	d05b      	beq.n	8017e16 <_dtoa_r+0xa5e>
 8017d5e:	6879      	ldr	r1, [r7, #4]
 8017d60:	4620      	mov	r0, r4
 8017d62:	f000 ff3f 	bl	8018be4 <_Balloc>
 8017d66:	4605      	mov	r5, r0
 8017d68:	b928      	cbnz	r0, 8017d76 <_dtoa_r+0x9be>
 8017d6a:	4b87      	ldr	r3, [pc, #540]	; (8017f88 <_dtoa_r+0xbd0>)
 8017d6c:	4602      	mov	r2, r0
 8017d6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017d72:	f7ff bb3b 	b.w	80173ec <_dtoa_r+0x34>
 8017d76:	693a      	ldr	r2, [r7, #16]
 8017d78:	3202      	adds	r2, #2
 8017d7a:	0092      	lsls	r2, r2, #2
 8017d7c:	f107 010c 	add.w	r1, r7, #12
 8017d80:	300c      	adds	r0, #12
 8017d82:	f7fc fe21 	bl	80149c8 <memcpy>
 8017d86:	2201      	movs	r2, #1
 8017d88:	4629      	mov	r1, r5
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f001 f986 	bl	801909c <__lshift>
 8017d90:	9b01      	ldr	r3, [sp, #4]
 8017d92:	f103 0901 	add.w	r9, r3, #1
 8017d96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017d9a:	4413      	add	r3, r2
 8017d9c:	9305      	str	r3, [sp, #20]
 8017d9e:	f00a 0301 	and.w	r3, sl, #1
 8017da2:	46b8      	mov	r8, r7
 8017da4:	9304      	str	r3, [sp, #16]
 8017da6:	4607      	mov	r7, r0
 8017da8:	4631      	mov	r1, r6
 8017daa:	ee18 0a10 	vmov	r0, s16
 8017dae:	f7ff fa75 	bl	801729c <quorem>
 8017db2:	4641      	mov	r1, r8
 8017db4:	9002      	str	r0, [sp, #8]
 8017db6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017dba:	ee18 0a10 	vmov	r0, s16
 8017dbe:	f001 f9dd 	bl	801917c <__mcmp>
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	9003      	str	r0, [sp, #12]
 8017dc6:	4631      	mov	r1, r6
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f001 f9f3 	bl	80191b4 <__mdiff>
 8017dce:	68c2      	ldr	r2, [r0, #12]
 8017dd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8017dd4:	4605      	mov	r5, r0
 8017dd6:	bb02      	cbnz	r2, 8017e1a <_dtoa_r+0xa62>
 8017dd8:	4601      	mov	r1, r0
 8017dda:	ee18 0a10 	vmov	r0, s16
 8017dde:	f001 f9cd 	bl	801917c <__mcmp>
 8017de2:	4602      	mov	r2, r0
 8017de4:	4629      	mov	r1, r5
 8017de6:	4620      	mov	r0, r4
 8017de8:	9207      	str	r2, [sp, #28]
 8017dea:	f000 ff3b 	bl	8018c64 <_Bfree>
 8017dee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017df2:	ea43 0102 	orr.w	r1, r3, r2
 8017df6:	9b04      	ldr	r3, [sp, #16]
 8017df8:	430b      	orrs	r3, r1
 8017dfa:	464d      	mov	r5, r9
 8017dfc:	d10f      	bne.n	8017e1e <_dtoa_r+0xa66>
 8017dfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017e02:	d02a      	beq.n	8017e5a <_dtoa_r+0xaa2>
 8017e04:	9b03      	ldr	r3, [sp, #12]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	dd02      	ble.n	8017e10 <_dtoa_r+0xa58>
 8017e0a:	9b02      	ldr	r3, [sp, #8]
 8017e0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017e10:	f88b a000 	strb.w	sl, [fp]
 8017e14:	e775      	b.n	8017d02 <_dtoa_r+0x94a>
 8017e16:	4638      	mov	r0, r7
 8017e18:	e7ba      	b.n	8017d90 <_dtoa_r+0x9d8>
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	e7e2      	b.n	8017de4 <_dtoa_r+0xa2c>
 8017e1e:	9b03      	ldr	r3, [sp, #12]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	db04      	blt.n	8017e2e <_dtoa_r+0xa76>
 8017e24:	9906      	ldr	r1, [sp, #24]
 8017e26:	430b      	orrs	r3, r1
 8017e28:	9904      	ldr	r1, [sp, #16]
 8017e2a:	430b      	orrs	r3, r1
 8017e2c:	d122      	bne.n	8017e74 <_dtoa_r+0xabc>
 8017e2e:	2a00      	cmp	r2, #0
 8017e30:	ddee      	ble.n	8017e10 <_dtoa_r+0xa58>
 8017e32:	ee18 1a10 	vmov	r1, s16
 8017e36:	2201      	movs	r2, #1
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f001 f92f 	bl	801909c <__lshift>
 8017e3e:	4631      	mov	r1, r6
 8017e40:	ee08 0a10 	vmov	s16, r0
 8017e44:	f001 f99a 	bl	801917c <__mcmp>
 8017e48:	2800      	cmp	r0, #0
 8017e4a:	dc03      	bgt.n	8017e54 <_dtoa_r+0xa9c>
 8017e4c:	d1e0      	bne.n	8017e10 <_dtoa_r+0xa58>
 8017e4e:	f01a 0f01 	tst.w	sl, #1
 8017e52:	d0dd      	beq.n	8017e10 <_dtoa_r+0xa58>
 8017e54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017e58:	d1d7      	bne.n	8017e0a <_dtoa_r+0xa52>
 8017e5a:	2339      	movs	r3, #57	; 0x39
 8017e5c:	f88b 3000 	strb.w	r3, [fp]
 8017e60:	462b      	mov	r3, r5
 8017e62:	461d      	mov	r5, r3
 8017e64:	3b01      	subs	r3, #1
 8017e66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017e6a:	2a39      	cmp	r2, #57	; 0x39
 8017e6c:	d071      	beq.n	8017f52 <_dtoa_r+0xb9a>
 8017e6e:	3201      	adds	r2, #1
 8017e70:	701a      	strb	r2, [r3, #0]
 8017e72:	e746      	b.n	8017d02 <_dtoa_r+0x94a>
 8017e74:	2a00      	cmp	r2, #0
 8017e76:	dd07      	ble.n	8017e88 <_dtoa_r+0xad0>
 8017e78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017e7c:	d0ed      	beq.n	8017e5a <_dtoa_r+0xaa2>
 8017e7e:	f10a 0301 	add.w	r3, sl, #1
 8017e82:	f88b 3000 	strb.w	r3, [fp]
 8017e86:	e73c      	b.n	8017d02 <_dtoa_r+0x94a>
 8017e88:	9b05      	ldr	r3, [sp, #20]
 8017e8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017e8e:	4599      	cmp	r9, r3
 8017e90:	d047      	beq.n	8017f22 <_dtoa_r+0xb6a>
 8017e92:	ee18 1a10 	vmov	r1, s16
 8017e96:	2300      	movs	r3, #0
 8017e98:	220a      	movs	r2, #10
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	f000 ff04 	bl	8018ca8 <__multadd>
 8017ea0:	45b8      	cmp	r8, r7
 8017ea2:	ee08 0a10 	vmov	s16, r0
 8017ea6:	f04f 0300 	mov.w	r3, #0
 8017eaa:	f04f 020a 	mov.w	r2, #10
 8017eae:	4641      	mov	r1, r8
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	d106      	bne.n	8017ec2 <_dtoa_r+0xb0a>
 8017eb4:	f000 fef8 	bl	8018ca8 <__multadd>
 8017eb8:	4680      	mov	r8, r0
 8017eba:	4607      	mov	r7, r0
 8017ebc:	f109 0901 	add.w	r9, r9, #1
 8017ec0:	e772      	b.n	8017da8 <_dtoa_r+0x9f0>
 8017ec2:	f000 fef1 	bl	8018ca8 <__multadd>
 8017ec6:	4639      	mov	r1, r7
 8017ec8:	4680      	mov	r8, r0
 8017eca:	2300      	movs	r3, #0
 8017ecc:	220a      	movs	r2, #10
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f000 feea 	bl	8018ca8 <__multadd>
 8017ed4:	4607      	mov	r7, r0
 8017ed6:	e7f1      	b.n	8017ebc <_dtoa_r+0xb04>
 8017ed8:	9b03      	ldr	r3, [sp, #12]
 8017eda:	9302      	str	r3, [sp, #8]
 8017edc:	9d01      	ldr	r5, [sp, #4]
 8017ede:	ee18 0a10 	vmov	r0, s16
 8017ee2:	4631      	mov	r1, r6
 8017ee4:	f7ff f9da 	bl	801729c <quorem>
 8017ee8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017eec:	9b01      	ldr	r3, [sp, #4]
 8017eee:	f805 ab01 	strb.w	sl, [r5], #1
 8017ef2:	1aea      	subs	r2, r5, r3
 8017ef4:	9b02      	ldr	r3, [sp, #8]
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	dd09      	ble.n	8017f0e <_dtoa_r+0xb56>
 8017efa:	ee18 1a10 	vmov	r1, s16
 8017efe:	2300      	movs	r3, #0
 8017f00:	220a      	movs	r2, #10
 8017f02:	4620      	mov	r0, r4
 8017f04:	f000 fed0 	bl	8018ca8 <__multadd>
 8017f08:	ee08 0a10 	vmov	s16, r0
 8017f0c:	e7e7      	b.n	8017ede <_dtoa_r+0xb26>
 8017f0e:	9b02      	ldr	r3, [sp, #8]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	bfc8      	it	gt
 8017f14:	461d      	movgt	r5, r3
 8017f16:	9b01      	ldr	r3, [sp, #4]
 8017f18:	bfd8      	it	le
 8017f1a:	2501      	movle	r5, #1
 8017f1c:	441d      	add	r5, r3
 8017f1e:	f04f 0800 	mov.w	r8, #0
 8017f22:	ee18 1a10 	vmov	r1, s16
 8017f26:	2201      	movs	r2, #1
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f001 f8b7 	bl	801909c <__lshift>
 8017f2e:	4631      	mov	r1, r6
 8017f30:	ee08 0a10 	vmov	s16, r0
 8017f34:	f001 f922 	bl	801917c <__mcmp>
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	dc91      	bgt.n	8017e60 <_dtoa_r+0xaa8>
 8017f3c:	d102      	bne.n	8017f44 <_dtoa_r+0xb8c>
 8017f3e:	f01a 0f01 	tst.w	sl, #1
 8017f42:	d18d      	bne.n	8017e60 <_dtoa_r+0xaa8>
 8017f44:	462b      	mov	r3, r5
 8017f46:	461d      	mov	r5, r3
 8017f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017f4c:	2a30      	cmp	r2, #48	; 0x30
 8017f4e:	d0fa      	beq.n	8017f46 <_dtoa_r+0xb8e>
 8017f50:	e6d7      	b.n	8017d02 <_dtoa_r+0x94a>
 8017f52:	9a01      	ldr	r2, [sp, #4]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d184      	bne.n	8017e62 <_dtoa_r+0xaaa>
 8017f58:	9b00      	ldr	r3, [sp, #0]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	9300      	str	r3, [sp, #0]
 8017f5e:	2331      	movs	r3, #49	; 0x31
 8017f60:	7013      	strb	r3, [r2, #0]
 8017f62:	e6ce      	b.n	8017d02 <_dtoa_r+0x94a>
 8017f64:	4b09      	ldr	r3, [pc, #36]	; (8017f8c <_dtoa_r+0xbd4>)
 8017f66:	f7ff ba95 	b.w	8017494 <_dtoa_r+0xdc>
 8017f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	f47f aa6e 	bne.w	801744e <_dtoa_r+0x96>
 8017f72:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <_dtoa_r+0xbd8>)
 8017f74:	f7ff ba8e 	b.w	8017494 <_dtoa_r+0xdc>
 8017f78:	9b02      	ldr	r3, [sp, #8]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	dcae      	bgt.n	8017edc <_dtoa_r+0xb24>
 8017f7e:	9b06      	ldr	r3, [sp, #24]
 8017f80:	2b02      	cmp	r3, #2
 8017f82:	f73f aea8 	bgt.w	8017cd6 <_dtoa_r+0x91e>
 8017f86:	e7a9      	b.n	8017edc <_dtoa_r+0xb24>
 8017f88:	080738b2 	.word	0x080738b2
 8017f8c:	08073b60 	.word	0x08073b60
 8017f90:	0807384a 	.word	0x0807384a

08017f94 <__sflush_r>:
 8017f94:	898a      	ldrh	r2, [r1, #12]
 8017f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	0710      	lsls	r0, r2, #28
 8017f9e:	460c      	mov	r4, r1
 8017fa0:	d458      	bmi.n	8018054 <__sflush_r+0xc0>
 8017fa2:	684b      	ldr	r3, [r1, #4]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	dc05      	bgt.n	8017fb4 <__sflush_r+0x20>
 8017fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	dc02      	bgt.n	8017fb4 <__sflush_r+0x20>
 8017fae:	2000      	movs	r0, #0
 8017fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fb6:	2e00      	cmp	r6, #0
 8017fb8:	d0f9      	beq.n	8017fae <__sflush_r+0x1a>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fc0:	682f      	ldr	r7, [r5, #0]
 8017fc2:	602b      	str	r3, [r5, #0]
 8017fc4:	d032      	beq.n	801802c <__sflush_r+0x98>
 8017fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fc8:	89a3      	ldrh	r3, [r4, #12]
 8017fca:	075a      	lsls	r2, r3, #29
 8017fcc:	d505      	bpl.n	8017fda <__sflush_r+0x46>
 8017fce:	6863      	ldr	r3, [r4, #4]
 8017fd0:	1ac0      	subs	r0, r0, r3
 8017fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fd4:	b10b      	cbz	r3, 8017fda <__sflush_r+0x46>
 8017fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017fd8:	1ac0      	subs	r0, r0, r3
 8017fda:	2300      	movs	r3, #0
 8017fdc:	4602      	mov	r2, r0
 8017fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fe0:	6a21      	ldr	r1, [r4, #32]
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	47b0      	blx	r6
 8017fe6:	1c43      	adds	r3, r0, #1
 8017fe8:	89a3      	ldrh	r3, [r4, #12]
 8017fea:	d106      	bne.n	8017ffa <__sflush_r+0x66>
 8017fec:	6829      	ldr	r1, [r5, #0]
 8017fee:	291d      	cmp	r1, #29
 8017ff0:	d82c      	bhi.n	801804c <__sflush_r+0xb8>
 8017ff2:	4a2a      	ldr	r2, [pc, #168]	; (801809c <__sflush_r+0x108>)
 8017ff4:	40ca      	lsrs	r2, r1
 8017ff6:	07d6      	lsls	r6, r2, #31
 8017ff8:	d528      	bpl.n	801804c <__sflush_r+0xb8>
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	6062      	str	r2, [r4, #4]
 8017ffe:	04d9      	lsls	r1, r3, #19
 8018000:	6922      	ldr	r2, [r4, #16]
 8018002:	6022      	str	r2, [r4, #0]
 8018004:	d504      	bpl.n	8018010 <__sflush_r+0x7c>
 8018006:	1c42      	adds	r2, r0, #1
 8018008:	d101      	bne.n	801800e <__sflush_r+0x7a>
 801800a:	682b      	ldr	r3, [r5, #0]
 801800c:	b903      	cbnz	r3, 8018010 <__sflush_r+0x7c>
 801800e:	6560      	str	r0, [r4, #84]	; 0x54
 8018010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018012:	602f      	str	r7, [r5, #0]
 8018014:	2900      	cmp	r1, #0
 8018016:	d0ca      	beq.n	8017fae <__sflush_r+0x1a>
 8018018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801801c:	4299      	cmp	r1, r3
 801801e:	d002      	beq.n	8018026 <__sflush_r+0x92>
 8018020:	4628      	mov	r0, r5
 8018022:	f7fc ff59 	bl	8014ed8 <_free_r>
 8018026:	2000      	movs	r0, #0
 8018028:	6360      	str	r0, [r4, #52]	; 0x34
 801802a:	e7c1      	b.n	8017fb0 <__sflush_r+0x1c>
 801802c:	6a21      	ldr	r1, [r4, #32]
 801802e:	2301      	movs	r3, #1
 8018030:	4628      	mov	r0, r5
 8018032:	47b0      	blx	r6
 8018034:	1c41      	adds	r1, r0, #1
 8018036:	d1c7      	bne.n	8017fc8 <__sflush_r+0x34>
 8018038:	682b      	ldr	r3, [r5, #0]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d0c4      	beq.n	8017fc8 <__sflush_r+0x34>
 801803e:	2b1d      	cmp	r3, #29
 8018040:	d001      	beq.n	8018046 <__sflush_r+0xb2>
 8018042:	2b16      	cmp	r3, #22
 8018044:	d101      	bne.n	801804a <__sflush_r+0xb6>
 8018046:	602f      	str	r7, [r5, #0]
 8018048:	e7b1      	b.n	8017fae <__sflush_r+0x1a>
 801804a:	89a3      	ldrh	r3, [r4, #12]
 801804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018050:	81a3      	strh	r3, [r4, #12]
 8018052:	e7ad      	b.n	8017fb0 <__sflush_r+0x1c>
 8018054:	690f      	ldr	r7, [r1, #16]
 8018056:	2f00      	cmp	r7, #0
 8018058:	d0a9      	beq.n	8017fae <__sflush_r+0x1a>
 801805a:	0793      	lsls	r3, r2, #30
 801805c:	680e      	ldr	r6, [r1, #0]
 801805e:	bf08      	it	eq
 8018060:	694b      	ldreq	r3, [r1, #20]
 8018062:	600f      	str	r7, [r1, #0]
 8018064:	bf18      	it	ne
 8018066:	2300      	movne	r3, #0
 8018068:	eba6 0807 	sub.w	r8, r6, r7
 801806c:	608b      	str	r3, [r1, #8]
 801806e:	f1b8 0f00 	cmp.w	r8, #0
 8018072:	dd9c      	ble.n	8017fae <__sflush_r+0x1a>
 8018074:	6a21      	ldr	r1, [r4, #32]
 8018076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018078:	4643      	mov	r3, r8
 801807a:	463a      	mov	r2, r7
 801807c:	4628      	mov	r0, r5
 801807e:	47b0      	blx	r6
 8018080:	2800      	cmp	r0, #0
 8018082:	dc06      	bgt.n	8018092 <__sflush_r+0xfe>
 8018084:	89a3      	ldrh	r3, [r4, #12]
 8018086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801808a:	81a3      	strh	r3, [r4, #12]
 801808c:	f04f 30ff 	mov.w	r0, #4294967295
 8018090:	e78e      	b.n	8017fb0 <__sflush_r+0x1c>
 8018092:	4407      	add	r7, r0
 8018094:	eba8 0800 	sub.w	r8, r8, r0
 8018098:	e7e9      	b.n	801806e <__sflush_r+0xda>
 801809a:	bf00      	nop
 801809c:	20400001 	.word	0x20400001

080180a0 <_fflush_r>:
 80180a0:	b538      	push	{r3, r4, r5, lr}
 80180a2:	690b      	ldr	r3, [r1, #16]
 80180a4:	4605      	mov	r5, r0
 80180a6:	460c      	mov	r4, r1
 80180a8:	b913      	cbnz	r3, 80180b0 <_fflush_r+0x10>
 80180aa:	2500      	movs	r5, #0
 80180ac:	4628      	mov	r0, r5
 80180ae:	bd38      	pop	{r3, r4, r5, pc}
 80180b0:	b118      	cbz	r0, 80180ba <_fflush_r+0x1a>
 80180b2:	6983      	ldr	r3, [r0, #24]
 80180b4:	b90b      	cbnz	r3, 80180ba <_fflush_r+0x1a>
 80180b6:	f000 f887 	bl	80181c8 <__sinit>
 80180ba:	4b14      	ldr	r3, [pc, #80]	; (801810c <_fflush_r+0x6c>)
 80180bc:	429c      	cmp	r4, r3
 80180be:	d11b      	bne.n	80180f8 <_fflush_r+0x58>
 80180c0:	686c      	ldr	r4, [r5, #4]
 80180c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d0ef      	beq.n	80180aa <_fflush_r+0xa>
 80180ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180cc:	07d0      	lsls	r0, r2, #31
 80180ce:	d404      	bmi.n	80180da <_fflush_r+0x3a>
 80180d0:	0599      	lsls	r1, r3, #22
 80180d2:	d402      	bmi.n	80180da <_fflush_r+0x3a>
 80180d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180d6:	f000 fcd1 	bl	8018a7c <__retarget_lock_acquire_recursive>
 80180da:	4628      	mov	r0, r5
 80180dc:	4621      	mov	r1, r4
 80180de:	f7ff ff59 	bl	8017f94 <__sflush_r>
 80180e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180e4:	07da      	lsls	r2, r3, #31
 80180e6:	4605      	mov	r5, r0
 80180e8:	d4e0      	bmi.n	80180ac <_fflush_r+0xc>
 80180ea:	89a3      	ldrh	r3, [r4, #12]
 80180ec:	059b      	lsls	r3, r3, #22
 80180ee:	d4dd      	bmi.n	80180ac <_fflush_r+0xc>
 80180f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180f2:	f000 fcc5 	bl	8018a80 <__retarget_lock_release_recursive>
 80180f6:	e7d9      	b.n	80180ac <_fflush_r+0xc>
 80180f8:	4b05      	ldr	r3, [pc, #20]	; (8018110 <_fflush_r+0x70>)
 80180fa:	429c      	cmp	r4, r3
 80180fc:	d101      	bne.n	8018102 <_fflush_r+0x62>
 80180fe:	68ac      	ldr	r4, [r5, #8]
 8018100:	e7df      	b.n	80180c2 <_fflush_r+0x22>
 8018102:	4b04      	ldr	r3, [pc, #16]	; (8018114 <_fflush_r+0x74>)
 8018104:	429c      	cmp	r4, r3
 8018106:	bf08      	it	eq
 8018108:	68ec      	ldreq	r4, [r5, #12]
 801810a:	e7da      	b.n	80180c2 <_fflush_r+0x22>
 801810c:	080738e4 	.word	0x080738e4
 8018110:	08073904 	.word	0x08073904
 8018114:	080738c4 	.word	0x080738c4

08018118 <std>:
 8018118:	2300      	movs	r3, #0
 801811a:	b510      	push	{r4, lr}
 801811c:	4604      	mov	r4, r0
 801811e:	e9c0 3300 	strd	r3, r3, [r0]
 8018122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018126:	6083      	str	r3, [r0, #8]
 8018128:	8181      	strh	r1, [r0, #12]
 801812a:	6643      	str	r3, [r0, #100]	; 0x64
 801812c:	81c2      	strh	r2, [r0, #14]
 801812e:	6183      	str	r3, [r0, #24]
 8018130:	4619      	mov	r1, r3
 8018132:	2208      	movs	r2, #8
 8018134:	305c      	adds	r0, #92	; 0x5c
 8018136:	f7fc fc55 	bl	80149e4 <memset>
 801813a:	4b05      	ldr	r3, [pc, #20]	; (8018150 <std+0x38>)
 801813c:	6263      	str	r3, [r4, #36]	; 0x24
 801813e:	4b05      	ldr	r3, [pc, #20]	; (8018154 <std+0x3c>)
 8018140:	62a3      	str	r3, [r4, #40]	; 0x28
 8018142:	4b05      	ldr	r3, [pc, #20]	; (8018158 <std+0x40>)
 8018144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018146:	4b05      	ldr	r3, [pc, #20]	; (801815c <std+0x44>)
 8018148:	6224      	str	r4, [r4, #32]
 801814a:	6323      	str	r3, [r4, #48]	; 0x30
 801814c:	bd10      	pop	{r4, pc}
 801814e:	bf00      	nop
 8018150:	08015cd9 	.word	0x08015cd9
 8018154:	08015cff 	.word	0x08015cff
 8018158:	08015d37 	.word	0x08015d37
 801815c:	08015d5b 	.word	0x08015d5b

08018160 <_cleanup_r>:
 8018160:	4901      	ldr	r1, [pc, #4]	; (8018168 <_cleanup_r+0x8>)
 8018162:	f000 b8af 	b.w	80182c4 <_fwalk_reent>
 8018166:	bf00      	nop
 8018168:	080180a1 	.word	0x080180a1

0801816c <__sfmoreglue>:
 801816c:	b570      	push	{r4, r5, r6, lr}
 801816e:	2268      	movs	r2, #104	; 0x68
 8018170:	1e4d      	subs	r5, r1, #1
 8018172:	4355      	muls	r5, r2
 8018174:	460e      	mov	r6, r1
 8018176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801817a:	f7fc ff19 	bl	8014fb0 <_malloc_r>
 801817e:	4604      	mov	r4, r0
 8018180:	b140      	cbz	r0, 8018194 <__sfmoreglue+0x28>
 8018182:	2100      	movs	r1, #0
 8018184:	e9c0 1600 	strd	r1, r6, [r0]
 8018188:	300c      	adds	r0, #12
 801818a:	60a0      	str	r0, [r4, #8]
 801818c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018190:	f7fc fc28 	bl	80149e4 <memset>
 8018194:	4620      	mov	r0, r4
 8018196:	bd70      	pop	{r4, r5, r6, pc}

08018198 <__sfp_lock_acquire>:
 8018198:	4801      	ldr	r0, [pc, #4]	; (80181a0 <__sfp_lock_acquire+0x8>)
 801819a:	f000 bc6f 	b.w	8018a7c <__retarget_lock_acquire_recursive>
 801819e:	bf00      	nop
 80181a0:	20005e72 	.word	0x20005e72

080181a4 <__sfp_lock_release>:
 80181a4:	4801      	ldr	r0, [pc, #4]	; (80181ac <__sfp_lock_release+0x8>)
 80181a6:	f000 bc6b 	b.w	8018a80 <__retarget_lock_release_recursive>
 80181aa:	bf00      	nop
 80181ac:	20005e72 	.word	0x20005e72

080181b0 <__sinit_lock_acquire>:
 80181b0:	4801      	ldr	r0, [pc, #4]	; (80181b8 <__sinit_lock_acquire+0x8>)
 80181b2:	f000 bc63 	b.w	8018a7c <__retarget_lock_acquire_recursive>
 80181b6:	bf00      	nop
 80181b8:	20005e73 	.word	0x20005e73

080181bc <__sinit_lock_release>:
 80181bc:	4801      	ldr	r0, [pc, #4]	; (80181c4 <__sinit_lock_release+0x8>)
 80181be:	f000 bc5f 	b.w	8018a80 <__retarget_lock_release_recursive>
 80181c2:	bf00      	nop
 80181c4:	20005e73 	.word	0x20005e73

080181c8 <__sinit>:
 80181c8:	b510      	push	{r4, lr}
 80181ca:	4604      	mov	r4, r0
 80181cc:	f7ff fff0 	bl	80181b0 <__sinit_lock_acquire>
 80181d0:	69a3      	ldr	r3, [r4, #24]
 80181d2:	b11b      	cbz	r3, 80181dc <__sinit+0x14>
 80181d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181d8:	f7ff bff0 	b.w	80181bc <__sinit_lock_release>
 80181dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80181e0:	6523      	str	r3, [r4, #80]	; 0x50
 80181e2:	4b13      	ldr	r3, [pc, #76]	; (8018230 <__sinit+0x68>)
 80181e4:	4a13      	ldr	r2, [pc, #76]	; (8018234 <__sinit+0x6c>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80181ea:	42a3      	cmp	r3, r4
 80181ec:	bf04      	itt	eq
 80181ee:	2301      	moveq	r3, #1
 80181f0:	61a3      	streq	r3, [r4, #24]
 80181f2:	4620      	mov	r0, r4
 80181f4:	f000 f820 	bl	8018238 <__sfp>
 80181f8:	6060      	str	r0, [r4, #4]
 80181fa:	4620      	mov	r0, r4
 80181fc:	f000 f81c 	bl	8018238 <__sfp>
 8018200:	60a0      	str	r0, [r4, #8]
 8018202:	4620      	mov	r0, r4
 8018204:	f000 f818 	bl	8018238 <__sfp>
 8018208:	2200      	movs	r2, #0
 801820a:	60e0      	str	r0, [r4, #12]
 801820c:	2104      	movs	r1, #4
 801820e:	6860      	ldr	r0, [r4, #4]
 8018210:	f7ff ff82 	bl	8018118 <std>
 8018214:	68a0      	ldr	r0, [r4, #8]
 8018216:	2201      	movs	r2, #1
 8018218:	2109      	movs	r1, #9
 801821a:	f7ff ff7d 	bl	8018118 <std>
 801821e:	68e0      	ldr	r0, [r4, #12]
 8018220:	2202      	movs	r2, #2
 8018222:	2112      	movs	r1, #18
 8018224:	f7ff ff78 	bl	8018118 <std>
 8018228:	2301      	movs	r3, #1
 801822a:	61a3      	str	r3, [r4, #24]
 801822c:	e7d2      	b.n	80181d4 <__sinit+0xc>
 801822e:	bf00      	nop
 8018230:	080735b4 	.word	0x080735b4
 8018234:	08018161 	.word	0x08018161

08018238 <__sfp>:
 8018238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801823a:	4607      	mov	r7, r0
 801823c:	f7ff ffac 	bl	8018198 <__sfp_lock_acquire>
 8018240:	4b1e      	ldr	r3, [pc, #120]	; (80182bc <__sfp+0x84>)
 8018242:	681e      	ldr	r6, [r3, #0]
 8018244:	69b3      	ldr	r3, [r6, #24]
 8018246:	b913      	cbnz	r3, 801824e <__sfp+0x16>
 8018248:	4630      	mov	r0, r6
 801824a:	f7ff ffbd 	bl	80181c8 <__sinit>
 801824e:	3648      	adds	r6, #72	; 0x48
 8018250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018254:	3b01      	subs	r3, #1
 8018256:	d503      	bpl.n	8018260 <__sfp+0x28>
 8018258:	6833      	ldr	r3, [r6, #0]
 801825a:	b30b      	cbz	r3, 80182a0 <__sfp+0x68>
 801825c:	6836      	ldr	r6, [r6, #0]
 801825e:	e7f7      	b.n	8018250 <__sfp+0x18>
 8018260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018264:	b9d5      	cbnz	r5, 801829c <__sfp+0x64>
 8018266:	4b16      	ldr	r3, [pc, #88]	; (80182c0 <__sfp+0x88>)
 8018268:	60e3      	str	r3, [r4, #12]
 801826a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801826e:	6665      	str	r5, [r4, #100]	; 0x64
 8018270:	f000 fc02 	bl	8018a78 <__retarget_lock_init_recursive>
 8018274:	f7ff ff96 	bl	80181a4 <__sfp_lock_release>
 8018278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801827c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018280:	6025      	str	r5, [r4, #0]
 8018282:	61a5      	str	r5, [r4, #24]
 8018284:	2208      	movs	r2, #8
 8018286:	4629      	mov	r1, r5
 8018288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801828c:	f7fc fbaa 	bl	80149e4 <memset>
 8018290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018298:	4620      	mov	r0, r4
 801829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801829c:	3468      	adds	r4, #104	; 0x68
 801829e:	e7d9      	b.n	8018254 <__sfp+0x1c>
 80182a0:	2104      	movs	r1, #4
 80182a2:	4638      	mov	r0, r7
 80182a4:	f7ff ff62 	bl	801816c <__sfmoreglue>
 80182a8:	4604      	mov	r4, r0
 80182aa:	6030      	str	r0, [r6, #0]
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d1d5      	bne.n	801825c <__sfp+0x24>
 80182b0:	f7ff ff78 	bl	80181a4 <__sfp_lock_release>
 80182b4:	230c      	movs	r3, #12
 80182b6:	603b      	str	r3, [r7, #0]
 80182b8:	e7ee      	b.n	8018298 <__sfp+0x60>
 80182ba:	bf00      	nop
 80182bc:	080735b4 	.word	0x080735b4
 80182c0:	ffff0001 	.word	0xffff0001

080182c4 <_fwalk_reent>:
 80182c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182c8:	4606      	mov	r6, r0
 80182ca:	4688      	mov	r8, r1
 80182cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80182d0:	2700      	movs	r7, #0
 80182d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182d6:	f1b9 0901 	subs.w	r9, r9, #1
 80182da:	d505      	bpl.n	80182e8 <_fwalk_reent+0x24>
 80182dc:	6824      	ldr	r4, [r4, #0]
 80182de:	2c00      	cmp	r4, #0
 80182e0:	d1f7      	bne.n	80182d2 <_fwalk_reent+0xe>
 80182e2:	4638      	mov	r0, r7
 80182e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182e8:	89ab      	ldrh	r3, [r5, #12]
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d907      	bls.n	80182fe <_fwalk_reent+0x3a>
 80182ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182f2:	3301      	adds	r3, #1
 80182f4:	d003      	beq.n	80182fe <_fwalk_reent+0x3a>
 80182f6:	4629      	mov	r1, r5
 80182f8:	4630      	mov	r0, r6
 80182fa:	47c0      	blx	r8
 80182fc:	4307      	orrs	r7, r0
 80182fe:	3568      	adds	r5, #104	; 0x68
 8018300:	e7e9      	b.n	80182d6 <_fwalk_reent+0x12>

08018302 <rshift>:
 8018302:	6903      	ldr	r3, [r0, #16]
 8018304:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801830c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018310:	f100 0414 	add.w	r4, r0, #20
 8018314:	dd45      	ble.n	80183a2 <rshift+0xa0>
 8018316:	f011 011f 	ands.w	r1, r1, #31
 801831a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801831e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018322:	d10c      	bne.n	801833e <rshift+0x3c>
 8018324:	f100 0710 	add.w	r7, r0, #16
 8018328:	4629      	mov	r1, r5
 801832a:	42b1      	cmp	r1, r6
 801832c:	d334      	bcc.n	8018398 <rshift+0x96>
 801832e:	1a9b      	subs	r3, r3, r2
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	1eea      	subs	r2, r5, #3
 8018334:	4296      	cmp	r6, r2
 8018336:	bf38      	it	cc
 8018338:	2300      	movcc	r3, #0
 801833a:	4423      	add	r3, r4
 801833c:	e015      	b.n	801836a <rshift+0x68>
 801833e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018342:	f1c1 0820 	rsb	r8, r1, #32
 8018346:	40cf      	lsrs	r7, r1
 8018348:	f105 0e04 	add.w	lr, r5, #4
 801834c:	46a1      	mov	r9, r4
 801834e:	4576      	cmp	r6, lr
 8018350:	46f4      	mov	ip, lr
 8018352:	d815      	bhi.n	8018380 <rshift+0x7e>
 8018354:	1a9a      	subs	r2, r3, r2
 8018356:	0092      	lsls	r2, r2, #2
 8018358:	3a04      	subs	r2, #4
 801835a:	3501      	adds	r5, #1
 801835c:	42ae      	cmp	r6, r5
 801835e:	bf38      	it	cc
 8018360:	2200      	movcc	r2, #0
 8018362:	18a3      	adds	r3, r4, r2
 8018364:	50a7      	str	r7, [r4, r2]
 8018366:	b107      	cbz	r7, 801836a <rshift+0x68>
 8018368:	3304      	adds	r3, #4
 801836a:	1b1a      	subs	r2, r3, r4
 801836c:	42a3      	cmp	r3, r4
 801836e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018372:	bf08      	it	eq
 8018374:	2300      	moveq	r3, #0
 8018376:	6102      	str	r2, [r0, #16]
 8018378:	bf08      	it	eq
 801837a:	6143      	streq	r3, [r0, #20]
 801837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018380:	f8dc c000 	ldr.w	ip, [ip]
 8018384:	fa0c fc08 	lsl.w	ip, ip, r8
 8018388:	ea4c 0707 	orr.w	r7, ip, r7
 801838c:	f849 7b04 	str.w	r7, [r9], #4
 8018390:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018394:	40cf      	lsrs	r7, r1
 8018396:	e7da      	b.n	801834e <rshift+0x4c>
 8018398:	f851 cb04 	ldr.w	ip, [r1], #4
 801839c:	f847 cf04 	str.w	ip, [r7, #4]!
 80183a0:	e7c3      	b.n	801832a <rshift+0x28>
 80183a2:	4623      	mov	r3, r4
 80183a4:	e7e1      	b.n	801836a <rshift+0x68>

080183a6 <__hexdig_fun>:
 80183a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80183aa:	2b09      	cmp	r3, #9
 80183ac:	d802      	bhi.n	80183b4 <__hexdig_fun+0xe>
 80183ae:	3820      	subs	r0, #32
 80183b0:	b2c0      	uxtb	r0, r0
 80183b2:	4770      	bx	lr
 80183b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80183b8:	2b05      	cmp	r3, #5
 80183ba:	d801      	bhi.n	80183c0 <__hexdig_fun+0x1a>
 80183bc:	3847      	subs	r0, #71	; 0x47
 80183be:	e7f7      	b.n	80183b0 <__hexdig_fun+0xa>
 80183c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80183c4:	2b05      	cmp	r3, #5
 80183c6:	d801      	bhi.n	80183cc <__hexdig_fun+0x26>
 80183c8:	3827      	subs	r0, #39	; 0x27
 80183ca:	e7f1      	b.n	80183b0 <__hexdig_fun+0xa>
 80183cc:	2000      	movs	r0, #0
 80183ce:	4770      	bx	lr

080183d0 <__gethex>:
 80183d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d4:	ed2d 8b02 	vpush	{d8}
 80183d8:	b089      	sub	sp, #36	; 0x24
 80183da:	ee08 0a10 	vmov	s16, r0
 80183de:	9304      	str	r3, [sp, #16]
 80183e0:	4bb4      	ldr	r3, [pc, #720]	; (80186b4 <__gethex+0x2e4>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	9301      	str	r3, [sp, #4]
 80183e6:	4618      	mov	r0, r3
 80183e8:	468b      	mov	fp, r1
 80183ea:	4690      	mov	r8, r2
 80183ec:	f7e7 ff0a 	bl	8000204 <strlen>
 80183f0:	9b01      	ldr	r3, [sp, #4]
 80183f2:	f8db 2000 	ldr.w	r2, [fp]
 80183f6:	4403      	add	r3, r0
 80183f8:	4682      	mov	sl, r0
 80183fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80183fe:	9305      	str	r3, [sp, #20]
 8018400:	1c93      	adds	r3, r2, #2
 8018402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801840a:	32fe      	adds	r2, #254	; 0xfe
 801840c:	18d1      	adds	r1, r2, r3
 801840e:	461f      	mov	r7, r3
 8018410:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018414:	9100      	str	r1, [sp, #0]
 8018416:	2830      	cmp	r0, #48	; 0x30
 8018418:	d0f8      	beq.n	801840c <__gethex+0x3c>
 801841a:	f7ff ffc4 	bl	80183a6 <__hexdig_fun>
 801841e:	4604      	mov	r4, r0
 8018420:	2800      	cmp	r0, #0
 8018422:	d13a      	bne.n	801849a <__gethex+0xca>
 8018424:	9901      	ldr	r1, [sp, #4]
 8018426:	4652      	mov	r2, sl
 8018428:	4638      	mov	r0, r7
 801842a:	f001 fdf9 	bl	801a020 <strncmp>
 801842e:	4605      	mov	r5, r0
 8018430:	2800      	cmp	r0, #0
 8018432:	d168      	bne.n	8018506 <__gethex+0x136>
 8018434:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018438:	eb07 060a 	add.w	r6, r7, sl
 801843c:	f7ff ffb3 	bl	80183a6 <__hexdig_fun>
 8018440:	2800      	cmp	r0, #0
 8018442:	d062      	beq.n	801850a <__gethex+0x13a>
 8018444:	4633      	mov	r3, r6
 8018446:	7818      	ldrb	r0, [r3, #0]
 8018448:	2830      	cmp	r0, #48	; 0x30
 801844a:	461f      	mov	r7, r3
 801844c:	f103 0301 	add.w	r3, r3, #1
 8018450:	d0f9      	beq.n	8018446 <__gethex+0x76>
 8018452:	f7ff ffa8 	bl	80183a6 <__hexdig_fun>
 8018456:	2301      	movs	r3, #1
 8018458:	fab0 f480 	clz	r4, r0
 801845c:	0964      	lsrs	r4, r4, #5
 801845e:	4635      	mov	r5, r6
 8018460:	9300      	str	r3, [sp, #0]
 8018462:	463a      	mov	r2, r7
 8018464:	4616      	mov	r6, r2
 8018466:	3201      	adds	r2, #1
 8018468:	7830      	ldrb	r0, [r6, #0]
 801846a:	f7ff ff9c 	bl	80183a6 <__hexdig_fun>
 801846e:	2800      	cmp	r0, #0
 8018470:	d1f8      	bne.n	8018464 <__gethex+0x94>
 8018472:	9901      	ldr	r1, [sp, #4]
 8018474:	4652      	mov	r2, sl
 8018476:	4630      	mov	r0, r6
 8018478:	f001 fdd2 	bl	801a020 <strncmp>
 801847c:	b980      	cbnz	r0, 80184a0 <__gethex+0xd0>
 801847e:	b94d      	cbnz	r5, 8018494 <__gethex+0xc4>
 8018480:	eb06 050a 	add.w	r5, r6, sl
 8018484:	462a      	mov	r2, r5
 8018486:	4616      	mov	r6, r2
 8018488:	3201      	adds	r2, #1
 801848a:	7830      	ldrb	r0, [r6, #0]
 801848c:	f7ff ff8b 	bl	80183a6 <__hexdig_fun>
 8018490:	2800      	cmp	r0, #0
 8018492:	d1f8      	bne.n	8018486 <__gethex+0xb6>
 8018494:	1bad      	subs	r5, r5, r6
 8018496:	00ad      	lsls	r5, r5, #2
 8018498:	e004      	b.n	80184a4 <__gethex+0xd4>
 801849a:	2400      	movs	r4, #0
 801849c:	4625      	mov	r5, r4
 801849e:	e7e0      	b.n	8018462 <__gethex+0x92>
 80184a0:	2d00      	cmp	r5, #0
 80184a2:	d1f7      	bne.n	8018494 <__gethex+0xc4>
 80184a4:	7833      	ldrb	r3, [r6, #0]
 80184a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80184aa:	2b50      	cmp	r3, #80	; 0x50
 80184ac:	d13b      	bne.n	8018526 <__gethex+0x156>
 80184ae:	7873      	ldrb	r3, [r6, #1]
 80184b0:	2b2b      	cmp	r3, #43	; 0x2b
 80184b2:	d02c      	beq.n	801850e <__gethex+0x13e>
 80184b4:	2b2d      	cmp	r3, #45	; 0x2d
 80184b6:	d02e      	beq.n	8018516 <__gethex+0x146>
 80184b8:	1c71      	adds	r1, r6, #1
 80184ba:	f04f 0900 	mov.w	r9, #0
 80184be:	7808      	ldrb	r0, [r1, #0]
 80184c0:	f7ff ff71 	bl	80183a6 <__hexdig_fun>
 80184c4:	1e43      	subs	r3, r0, #1
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	2b18      	cmp	r3, #24
 80184ca:	d82c      	bhi.n	8018526 <__gethex+0x156>
 80184cc:	f1a0 0210 	sub.w	r2, r0, #16
 80184d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80184d4:	f7ff ff67 	bl	80183a6 <__hexdig_fun>
 80184d8:	1e43      	subs	r3, r0, #1
 80184da:	b2db      	uxtb	r3, r3
 80184dc:	2b18      	cmp	r3, #24
 80184de:	d91d      	bls.n	801851c <__gethex+0x14c>
 80184e0:	f1b9 0f00 	cmp.w	r9, #0
 80184e4:	d000      	beq.n	80184e8 <__gethex+0x118>
 80184e6:	4252      	negs	r2, r2
 80184e8:	4415      	add	r5, r2
 80184ea:	f8cb 1000 	str.w	r1, [fp]
 80184ee:	b1e4      	cbz	r4, 801852a <__gethex+0x15a>
 80184f0:	9b00      	ldr	r3, [sp, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	bf14      	ite	ne
 80184f6:	2700      	movne	r7, #0
 80184f8:	2706      	moveq	r7, #6
 80184fa:	4638      	mov	r0, r7
 80184fc:	b009      	add	sp, #36	; 0x24
 80184fe:	ecbd 8b02 	vpop	{d8}
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018506:	463e      	mov	r6, r7
 8018508:	4625      	mov	r5, r4
 801850a:	2401      	movs	r4, #1
 801850c:	e7ca      	b.n	80184a4 <__gethex+0xd4>
 801850e:	f04f 0900 	mov.w	r9, #0
 8018512:	1cb1      	adds	r1, r6, #2
 8018514:	e7d3      	b.n	80184be <__gethex+0xee>
 8018516:	f04f 0901 	mov.w	r9, #1
 801851a:	e7fa      	b.n	8018512 <__gethex+0x142>
 801851c:	230a      	movs	r3, #10
 801851e:	fb03 0202 	mla	r2, r3, r2, r0
 8018522:	3a10      	subs	r2, #16
 8018524:	e7d4      	b.n	80184d0 <__gethex+0x100>
 8018526:	4631      	mov	r1, r6
 8018528:	e7df      	b.n	80184ea <__gethex+0x11a>
 801852a:	1bf3      	subs	r3, r6, r7
 801852c:	3b01      	subs	r3, #1
 801852e:	4621      	mov	r1, r4
 8018530:	2b07      	cmp	r3, #7
 8018532:	dc0b      	bgt.n	801854c <__gethex+0x17c>
 8018534:	ee18 0a10 	vmov	r0, s16
 8018538:	f000 fb54 	bl	8018be4 <_Balloc>
 801853c:	4604      	mov	r4, r0
 801853e:	b940      	cbnz	r0, 8018552 <__gethex+0x182>
 8018540:	4b5d      	ldr	r3, [pc, #372]	; (80186b8 <__gethex+0x2e8>)
 8018542:	4602      	mov	r2, r0
 8018544:	21de      	movs	r1, #222	; 0xde
 8018546:	485d      	ldr	r0, [pc, #372]	; (80186bc <__gethex+0x2ec>)
 8018548:	f7fc f9cc 	bl	80148e4 <__assert_func>
 801854c:	3101      	adds	r1, #1
 801854e:	105b      	asrs	r3, r3, #1
 8018550:	e7ee      	b.n	8018530 <__gethex+0x160>
 8018552:	f100 0914 	add.w	r9, r0, #20
 8018556:	f04f 0b00 	mov.w	fp, #0
 801855a:	f1ca 0301 	rsb	r3, sl, #1
 801855e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018562:	f8cd b000 	str.w	fp, [sp]
 8018566:	9306      	str	r3, [sp, #24]
 8018568:	42b7      	cmp	r7, r6
 801856a:	d340      	bcc.n	80185ee <__gethex+0x21e>
 801856c:	9802      	ldr	r0, [sp, #8]
 801856e:	9b00      	ldr	r3, [sp, #0]
 8018570:	f840 3b04 	str.w	r3, [r0], #4
 8018574:	eba0 0009 	sub.w	r0, r0, r9
 8018578:	1080      	asrs	r0, r0, #2
 801857a:	0146      	lsls	r6, r0, #5
 801857c:	6120      	str	r0, [r4, #16]
 801857e:	4618      	mov	r0, r3
 8018580:	f000 fc22 	bl	8018dc8 <__hi0bits>
 8018584:	1a30      	subs	r0, r6, r0
 8018586:	f8d8 6000 	ldr.w	r6, [r8]
 801858a:	42b0      	cmp	r0, r6
 801858c:	dd63      	ble.n	8018656 <__gethex+0x286>
 801858e:	1b87      	subs	r7, r0, r6
 8018590:	4639      	mov	r1, r7
 8018592:	4620      	mov	r0, r4
 8018594:	f000 ffc6 	bl	8019524 <__any_on>
 8018598:	4682      	mov	sl, r0
 801859a:	b1a8      	cbz	r0, 80185c8 <__gethex+0x1f8>
 801859c:	1e7b      	subs	r3, r7, #1
 801859e:	1159      	asrs	r1, r3, #5
 80185a0:	f003 021f 	and.w	r2, r3, #31
 80185a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80185a8:	f04f 0a01 	mov.w	sl, #1
 80185ac:	fa0a f202 	lsl.w	r2, sl, r2
 80185b0:	420a      	tst	r2, r1
 80185b2:	d009      	beq.n	80185c8 <__gethex+0x1f8>
 80185b4:	4553      	cmp	r3, sl
 80185b6:	dd05      	ble.n	80185c4 <__gethex+0x1f4>
 80185b8:	1eb9      	subs	r1, r7, #2
 80185ba:	4620      	mov	r0, r4
 80185bc:	f000 ffb2 	bl	8019524 <__any_on>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d145      	bne.n	8018650 <__gethex+0x280>
 80185c4:	f04f 0a02 	mov.w	sl, #2
 80185c8:	4639      	mov	r1, r7
 80185ca:	4620      	mov	r0, r4
 80185cc:	f7ff fe99 	bl	8018302 <rshift>
 80185d0:	443d      	add	r5, r7
 80185d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185d6:	42ab      	cmp	r3, r5
 80185d8:	da4c      	bge.n	8018674 <__gethex+0x2a4>
 80185da:	ee18 0a10 	vmov	r0, s16
 80185de:	4621      	mov	r1, r4
 80185e0:	f000 fb40 	bl	8018c64 <_Bfree>
 80185e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80185e6:	2300      	movs	r3, #0
 80185e8:	6013      	str	r3, [r2, #0]
 80185ea:	27a3      	movs	r7, #163	; 0xa3
 80185ec:	e785      	b.n	80184fa <__gethex+0x12a>
 80185ee:	1e73      	subs	r3, r6, #1
 80185f0:	9a05      	ldr	r2, [sp, #20]
 80185f2:	9303      	str	r3, [sp, #12]
 80185f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80185f8:	4293      	cmp	r3, r2
 80185fa:	d019      	beq.n	8018630 <__gethex+0x260>
 80185fc:	f1bb 0f20 	cmp.w	fp, #32
 8018600:	d107      	bne.n	8018612 <__gethex+0x242>
 8018602:	9b02      	ldr	r3, [sp, #8]
 8018604:	9a00      	ldr	r2, [sp, #0]
 8018606:	f843 2b04 	str.w	r2, [r3], #4
 801860a:	9302      	str	r3, [sp, #8]
 801860c:	2300      	movs	r3, #0
 801860e:	9300      	str	r3, [sp, #0]
 8018610:	469b      	mov	fp, r3
 8018612:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018616:	f7ff fec6 	bl	80183a6 <__hexdig_fun>
 801861a:	9b00      	ldr	r3, [sp, #0]
 801861c:	f000 000f 	and.w	r0, r0, #15
 8018620:	fa00 f00b 	lsl.w	r0, r0, fp
 8018624:	4303      	orrs	r3, r0
 8018626:	9300      	str	r3, [sp, #0]
 8018628:	f10b 0b04 	add.w	fp, fp, #4
 801862c:	9b03      	ldr	r3, [sp, #12]
 801862e:	e00d      	b.n	801864c <__gethex+0x27c>
 8018630:	9b03      	ldr	r3, [sp, #12]
 8018632:	9a06      	ldr	r2, [sp, #24]
 8018634:	4413      	add	r3, r2
 8018636:	42bb      	cmp	r3, r7
 8018638:	d3e0      	bcc.n	80185fc <__gethex+0x22c>
 801863a:	4618      	mov	r0, r3
 801863c:	9901      	ldr	r1, [sp, #4]
 801863e:	9307      	str	r3, [sp, #28]
 8018640:	4652      	mov	r2, sl
 8018642:	f001 fced 	bl	801a020 <strncmp>
 8018646:	9b07      	ldr	r3, [sp, #28]
 8018648:	2800      	cmp	r0, #0
 801864a:	d1d7      	bne.n	80185fc <__gethex+0x22c>
 801864c:	461e      	mov	r6, r3
 801864e:	e78b      	b.n	8018568 <__gethex+0x198>
 8018650:	f04f 0a03 	mov.w	sl, #3
 8018654:	e7b8      	b.n	80185c8 <__gethex+0x1f8>
 8018656:	da0a      	bge.n	801866e <__gethex+0x29e>
 8018658:	1a37      	subs	r7, r6, r0
 801865a:	4621      	mov	r1, r4
 801865c:	ee18 0a10 	vmov	r0, s16
 8018660:	463a      	mov	r2, r7
 8018662:	f000 fd1b 	bl	801909c <__lshift>
 8018666:	1bed      	subs	r5, r5, r7
 8018668:	4604      	mov	r4, r0
 801866a:	f100 0914 	add.w	r9, r0, #20
 801866e:	f04f 0a00 	mov.w	sl, #0
 8018672:	e7ae      	b.n	80185d2 <__gethex+0x202>
 8018674:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018678:	42a8      	cmp	r0, r5
 801867a:	dd72      	ble.n	8018762 <__gethex+0x392>
 801867c:	1b45      	subs	r5, r0, r5
 801867e:	42ae      	cmp	r6, r5
 8018680:	dc36      	bgt.n	80186f0 <__gethex+0x320>
 8018682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018686:	2b02      	cmp	r3, #2
 8018688:	d02a      	beq.n	80186e0 <__gethex+0x310>
 801868a:	2b03      	cmp	r3, #3
 801868c:	d02c      	beq.n	80186e8 <__gethex+0x318>
 801868e:	2b01      	cmp	r3, #1
 8018690:	d11c      	bne.n	80186cc <__gethex+0x2fc>
 8018692:	42ae      	cmp	r6, r5
 8018694:	d11a      	bne.n	80186cc <__gethex+0x2fc>
 8018696:	2e01      	cmp	r6, #1
 8018698:	d112      	bne.n	80186c0 <__gethex+0x2f0>
 801869a:	9a04      	ldr	r2, [sp, #16]
 801869c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186a0:	6013      	str	r3, [r2, #0]
 80186a2:	2301      	movs	r3, #1
 80186a4:	6123      	str	r3, [r4, #16]
 80186a6:	f8c9 3000 	str.w	r3, [r9]
 80186aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186ac:	2762      	movs	r7, #98	; 0x62
 80186ae:	601c      	str	r4, [r3, #0]
 80186b0:	e723      	b.n	80184fa <__gethex+0x12a>
 80186b2:	bf00      	nop
 80186b4:	0807398c 	.word	0x0807398c
 80186b8:	080738b2 	.word	0x080738b2
 80186bc:	08073924 	.word	0x08073924
 80186c0:	1e71      	subs	r1, r6, #1
 80186c2:	4620      	mov	r0, r4
 80186c4:	f000 ff2e 	bl	8019524 <__any_on>
 80186c8:	2800      	cmp	r0, #0
 80186ca:	d1e6      	bne.n	801869a <__gethex+0x2ca>
 80186cc:	ee18 0a10 	vmov	r0, s16
 80186d0:	4621      	mov	r1, r4
 80186d2:	f000 fac7 	bl	8018c64 <_Bfree>
 80186d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186d8:	2300      	movs	r3, #0
 80186da:	6013      	str	r3, [r2, #0]
 80186dc:	2750      	movs	r7, #80	; 0x50
 80186de:	e70c      	b.n	80184fa <__gethex+0x12a>
 80186e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d1f2      	bne.n	80186cc <__gethex+0x2fc>
 80186e6:	e7d8      	b.n	801869a <__gethex+0x2ca>
 80186e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d1d5      	bne.n	801869a <__gethex+0x2ca>
 80186ee:	e7ed      	b.n	80186cc <__gethex+0x2fc>
 80186f0:	1e6f      	subs	r7, r5, #1
 80186f2:	f1ba 0f00 	cmp.w	sl, #0
 80186f6:	d131      	bne.n	801875c <__gethex+0x38c>
 80186f8:	b127      	cbz	r7, 8018704 <__gethex+0x334>
 80186fa:	4639      	mov	r1, r7
 80186fc:	4620      	mov	r0, r4
 80186fe:	f000 ff11 	bl	8019524 <__any_on>
 8018702:	4682      	mov	sl, r0
 8018704:	117b      	asrs	r3, r7, #5
 8018706:	2101      	movs	r1, #1
 8018708:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801870c:	f007 071f 	and.w	r7, r7, #31
 8018710:	fa01 f707 	lsl.w	r7, r1, r7
 8018714:	421f      	tst	r7, r3
 8018716:	4629      	mov	r1, r5
 8018718:	4620      	mov	r0, r4
 801871a:	bf18      	it	ne
 801871c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018720:	1b76      	subs	r6, r6, r5
 8018722:	f7ff fdee 	bl	8018302 <rshift>
 8018726:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801872a:	2702      	movs	r7, #2
 801872c:	f1ba 0f00 	cmp.w	sl, #0
 8018730:	d048      	beq.n	80187c4 <__gethex+0x3f4>
 8018732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018736:	2b02      	cmp	r3, #2
 8018738:	d015      	beq.n	8018766 <__gethex+0x396>
 801873a:	2b03      	cmp	r3, #3
 801873c:	d017      	beq.n	801876e <__gethex+0x39e>
 801873e:	2b01      	cmp	r3, #1
 8018740:	d109      	bne.n	8018756 <__gethex+0x386>
 8018742:	f01a 0f02 	tst.w	sl, #2
 8018746:	d006      	beq.n	8018756 <__gethex+0x386>
 8018748:	f8d9 0000 	ldr.w	r0, [r9]
 801874c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018750:	f01a 0f01 	tst.w	sl, #1
 8018754:	d10e      	bne.n	8018774 <__gethex+0x3a4>
 8018756:	f047 0710 	orr.w	r7, r7, #16
 801875a:	e033      	b.n	80187c4 <__gethex+0x3f4>
 801875c:	f04f 0a01 	mov.w	sl, #1
 8018760:	e7d0      	b.n	8018704 <__gethex+0x334>
 8018762:	2701      	movs	r7, #1
 8018764:	e7e2      	b.n	801872c <__gethex+0x35c>
 8018766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018768:	f1c3 0301 	rsb	r3, r3, #1
 801876c:	9315      	str	r3, [sp, #84]	; 0x54
 801876e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018770:	2b00      	cmp	r3, #0
 8018772:	d0f0      	beq.n	8018756 <__gethex+0x386>
 8018774:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018778:	f104 0314 	add.w	r3, r4, #20
 801877c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018780:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018784:	f04f 0c00 	mov.w	ip, #0
 8018788:	4618      	mov	r0, r3
 801878a:	f853 2b04 	ldr.w	r2, [r3], #4
 801878e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018792:	d01c      	beq.n	80187ce <__gethex+0x3fe>
 8018794:	3201      	adds	r2, #1
 8018796:	6002      	str	r2, [r0, #0]
 8018798:	2f02      	cmp	r7, #2
 801879a:	f104 0314 	add.w	r3, r4, #20
 801879e:	d13f      	bne.n	8018820 <__gethex+0x450>
 80187a0:	f8d8 2000 	ldr.w	r2, [r8]
 80187a4:	3a01      	subs	r2, #1
 80187a6:	42b2      	cmp	r2, r6
 80187a8:	d10a      	bne.n	80187c0 <__gethex+0x3f0>
 80187aa:	1171      	asrs	r1, r6, #5
 80187ac:	2201      	movs	r2, #1
 80187ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187b2:	f006 061f 	and.w	r6, r6, #31
 80187b6:	fa02 f606 	lsl.w	r6, r2, r6
 80187ba:	421e      	tst	r6, r3
 80187bc:	bf18      	it	ne
 80187be:	4617      	movne	r7, r2
 80187c0:	f047 0720 	orr.w	r7, r7, #32
 80187c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187c6:	601c      	str	r4, [r3, #0]
 80187c8:	9b04      	ldr	r3, [sp, #16]
 80187ca:	601d      	str	r5, [r3, #0]
 80187cc:	e695      	b.n	80184fa <__gethex+0x12a>
 80187ce:	4299      	cmp	r1, r3
 80187d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80187d4:	d8d8      	bhi.n	8018788 <__gethex+0x3b8>
 80187d6:	68a3      	ldr	r3, [r4, #8]
 80187d8:	459b      	cmp	fp, r3
 80187da:	db19      	blt.n	8018810 <__gethex+0x440>
 80187dc:	6861      	ldr	r1, [r4, #4]
 80187de:	ee18 0a10 	vmov	r0, s16
 80187e2:	3101      	adds	r1, #1
 80187e4:	f000 f9fe 	bl	8018be4 <_Balloc>
 80187e8:	4681      	mov	r9, r0
 80187ea:	b918      	cbnz	r0, 80187f4 <__gethex+0x424>
 80187ec:	4b1a      	ldr	r3, [pc, #104]	; (8018858 <__gethex+0x488>)
 80187ee:	4602      	mov	r2, r0
 80187f0:	2184      	movs	r1, #132	; 0x84
 80187f2:	e6a8      	b.n	8018546 <__gethex+0x176>
 80187f4:	6922      	ldr	r2, [r4, #16]
 80187f6:	3202      	adds	r2, #2
 80187f8:	f104 010c 	add.w	r1, r4, #12
 80187fc:	0092      	lsls	r2, r2, #2
 80187fe:	300c      	adds	r0, #12
 8018800:	f7fc f8e2 	bl	80149c8 <memcpy>
 8018804:	4621      	mov	r1, r4
 8018806:	ee18 0a10 	vmov	r0, s16
 801880a:	f000 fa2b 	bl	8018c64 <_Bfree>
 801880e:	464c      	mov	r4, r9
 8018810:	6923      	ldr	r3, [r4, #16]
 8018812:	1c5a      	adds	r2, r3, #1
 8018814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018818:	6122      	str	r2, [r4, #16]
 801881a:	2201      	movs	r2, #1
 801881c:	615a      	str	r2, [r3, #20]
 801881e:	e7bb      	b.n	8018798 <__gethex+0x3c8>
 8018820:	6922      	ldr	r2, [r4, #16]
 8018822:	455a      	cmp	r2, fp
 8018824:	dd0b      	ble.n	801883e <__gethex+0x46e>
 8018826:	2101      	movs	r1, #1
 8018828:	4620      	mov	r0, r4
 801882a:	f7ff fd6a 	bl	8018302 <rshift>
 801882e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018832:	3501      	adds	r5, #1
 8018834:	42ab      	cmp	r3, r5
 8018836:	f6ff aed0 	blt.w	80185da <__gethex+0x20a>
 801883a:	2701      	movs	r7, #1
 801883c:	e7c0      	b.n	80187c0 <__gethex+0x3f0>
 801883e:	f016 061f 	ands.w	r6, r6, #31
 8018842:	d0fa      	beq.n	801883a <__gethex+0x46a>
 8018844:	4453      	add	r3, sl
 8018846:	f1c6 0620 	rsb	r6, r6, #32
 801884a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801884e:	f000 fabb 	bl	8018dc8 <__hi0bits>
 8018852:	42b0      	cmp	r0, r6
 8018854:	dbe7      	blt.n	8018826 <__gethex+0x456>
 8018856:	e7f0      	b.n	801883a <__gethex+0x46a>
 8018858:	080738b2 	.word	0x080738b2

0801885c <L_shift>:
 801885c:	f1c2 0208 	rsb	r2, r2, #8
 8018860:	0092      	lsls	r2, r2, #2
 8018862:	b570      	push	{r4, r5, r6, lr}
 8018864:	f1c2 0620 	rsb	r6, r2, #32
 8018868:	6843      	ldr	r3, [r0, #4]
 801886a:	6804      	ldr	r4, [r0, #0]
 801886c:	fa03 f506 	lsl.w	r5, r3, r6
 8018870:	432c      	orrs	r4, r5
 8018872:	40d3      	lsrs	r3, r2
 8018874:	6004      	str	r4, [r0, #0]
 8018876:	f840 3f04 	str.w	r3, [r0, #4]!
 801887a:	4288      	cmp	r0, r1
 801887c:	d3f4      	bcc.n	8018868 <L_shift+0xc>
 801887e:	bd70      	pop	{r4, r5, r6, pc}

08018880 <__match>:
 8018880:	b530      	push	{r4, r5, lr}
 8018882:	6803      	ldr	r3, [r0, #0]
 8018884:	3301      	adds	r3, #1
 8018886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801888a:	b914      	cbnz	r4, 8018892 <__match+0x12>
 801888c:	6003      	str	r3, [r0, #0]
 801888e:	2001      	movs	r0, #1
 8018890:	bd30      	pop	{r4, r5, pc}
 8018892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801889a:	2d19      	cmp	r5, #25
 801889c:	bf98      	it	ls
 801889e:	3220      	addls	r2, #32
 80188a0:	42a2      	cmp	r2, r4
 80188a2:	d0f0      	beq.n	8018886 <__match+0x6>
 80188a4:	2000      	movs	r0, #0
 80188a6:	e7f3      	b.n	8018890 <__match+0x10>

080188a8 <__hexnan>:
 80188a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ac:	680b      	ldr	r3, [r1, #0]
 80188ae:	115e      	asrs	r6, r3, #5
 80188b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80188b4:	f013 031f 	ands.w	r3, r3, #31
 80188b8:	b087      	sub	sp, #28
 80188ba:	bf18      	it	ne
 80188bc:	3604      	addne	r6, #4
 80188be:	2500      	movs	r5, #0
 80188c0:	1f37      	subs	r7, r6, #4
 80188c2:	4690      	mov	r8, r2
 80188c4:	6802      	ldr	r2, [r0, #0]
 80188c6:	9301      	str	r3, [sp, #4]
 80188c8:	4682      	mov	sl, r0
 80188ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80188ce:	46b9      	mov	r9, r7
 80188d0:	463c      	mov	r4, r7
 80188d2:	9502      	str	r5, [sp, #8]
 80188d4:	46ab      	mov	fp, r5
 80188d6:	7851      	ldrb	r1, [r2, #1]
 80188d8:	1c53      	adds	r3, r2, #1
 80188da:	9303      	str	r3, [sp, #12]
 80188dc:	b341      	cbz	r1, 8018930 <__hexnan+0x88>
 80188de:	4608      	mov	r0, r1
 80188e0:	9205      	str	r2, [sp, #20]
 80188e2:	9104      	str	r1, [sp, #16]
 80188e4:	f7ff fd5f 	bl	80183a6 <__hexdig_fun>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d14f      	bne.n	801898c <__hexnan+0xe4>
 80188ec:	9904      	ldr	r1, [sp, #16]
 80188ee:	9a05      	ldr	r2, [sp, #20]
 80188f0:	2920      	cmp	r1, #32
 80188f2:	d818      	bhi.n	8018926 <__hexnan+0x7e>
 80188f4:	9b02      	ldr	r3, [sp, #8]
 80188f6:	459b      	cmp	fp, r3
 80188f8:	dd13      	ble.n	8018922 <__hexnan+0x7a>
 80188fa:	454c      	cmp	r4, r9
 80188fc:	d206      	bcs.n	801890c <__hexnan+0x64>
 80188fe:	2d07      	cmp	r5, #7
 8018900:	dc04      	bgt.n	801890c <__hexnan+0x64>
 8018902:	462a      	mov	r2, r5
 8018904:	4649      	mov	r1, r9
 8018906:	4620      	mov	r0, r4
 8018908:	f7ff ffa8 	bl	801885c <L_shift>
 801890c:	4544      	cmp	r4, r8
 801890e:	d950      	bls.n	80189b2 <__hexnan+0x10a>
 8018910:	2300      	movs	r3, #0
 8018912:	f1a4 0904 	sub.w	r9, r4, #4
 8018916:	f844 3c04 	str.w	r3, [r4, #-4]
 801891a:	f8cd b008 	str.w	fp, [sp, #8]
 801891e:	464c      	mov	r4, r9
 8018920:	461d      	mov	r5, r3
 8018922:	9a03      	ldr	r2, [sp, #12]
 8018924:	e7d7      	b.n	80188d6 <__hexnan+0x2e>
 8018926:	2929      	cmp	r1, #41	; 0x29
 8018928:	d156      	bne.n	80189d8 <__hexnan+0x130>
 801892a:	3202      	adds	r2, #2
 801892c:	f8ca 2000 	str.w	r2, [sl]
 8018930:	f1bb 0f00 	cmp.w	fp, #0
 8018934:	d050      	beq.n	80189d8 <__hexnan+0x130>
 8018936:	454c      	cmp	r4, r9
 8018938:	d206      	bcs.n	8018948 <__hexnan+0xa0>
 801893a:	2d07      	cmp	r5, #7
 801893c:	dc04      	bgt.n	8018948 <__hexnan+0xa0>
 801893e:	462a      	mov	r2, r5
 8018940:	4649      	mov	r1, r9
 8018942:	4620      	mov	r0, r4
 8018944:	f7ff ff8a 	bl	801885c <L_shift>
 8018948:	4544      	cmp	r4, r8
 801894a:	d934      	bls.n	80189b6 <__hexnan+0x10e>
 801894c:	f1a8 0204 	sub.w	r2, r8, #4
 8018950:	4623      	mov	r3, r4
 8018952:	f853 1b04 	ldr.w	r1, [r3], #4
 8018956:	f842 1f04 	str.w	r1, [r2, #4]!
 801895a:	429f      	cmp	r7, r3
 801895c:	d2f9      	bcs.n	8018952 <__hexnan+0xaa>
 801895e:	1b3b      	subs	r3, r7, r4
 8018960:	f023 0303 	bic.w	r3, r3, #3
 8018964:	3304      	adds	r3, #4
 8018966:	3401      	adds	r4, #1
 8018968:	3e03      	subs	r6, #3
 801896a:	42b4      	cmp	r4, r6
 801896c:	bf88      	it	hi
 801896e:	2304      	movhi	r3, #4
 8018970:	4443      	add	r3, r8
 8018972:	2200      	movs	r2, #0
 8018974:	f843 2b04 	str.w	r2, [r3], #4
 8018978:	429f      	cmp	r7, r3
 801897a:	d2fb      	bcs.n	8018974 <__hexnan+0xcc>
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	b91b      	cbnz	r3, 8018988 <__hexnan+0xe0>
 8018980:	4547      	cmp	r7, r8
 8018982:	d127      	bne.n	80189d4 <__hexnan+0x12c>
 8018984:	2301      	movs	r3, #1
 8018986:	603b      	str	r3, [r7, #0]
 8018988:	2005      	movs	r0, #5
 801898a:	e026      	b.n	80189da <__hexnan+0x132>
 801898c:	3501      	adds	r5, #1
 801898e:	2d08      	cmp	r5, #8
 8018990:	f10b 0b01 	add.w	fp, fp, #1
 8018994:	dd06      	ble.n	80189a4 <__hexnan+0xfc>
 8018996:	4544      	cmp	r4, r8
 8018998:	d9c3      	bls.n	8018922 <__hexnan+0x7a>
 801899a:	2300      	movs	r3, #0
 801899c:	f844 3c04 	str.w	r3, [r4, #-4]
 80189a0:	2501      	movs	r5, #1
 80189a2:	3c04      	subs	r4, #4
 80189a4:	6822      	ldr	r2, [r4, #0]
 80189a6:	f000 000f 	and.w	r0, r0, #15
 80189aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80189ae:	6022      	str	r2, [r4, #0]
 80189b0:	e7b7      	b.n	8018922 <__hexnan+0x7a>
 80189b2:	2508      	movs	r5, #8
 80189b4:	e7b5      	b.n	8018922 <__hexnan+0x7a>
 80189b6:	9b01      	ldr	r3, [sp, #4]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d0df      	beq.n	801897c <__hexnan+0xd4>
 80189bc:	f04f 32ff 	mov.w	r2, #4294967295
 80189c0:	f1c3 0320 	rsb	r3, r3, #32
 80189c4:	fa22 f303 	lsr.w	r3, r2, r3
 80189c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80189cc:	401a      	ands	r2, r3
 80189ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80189d2:	e7d3      	b.n	801897c <__hexnan+0xd4>
 80189d4:	3f04      	subs	r7, #4
 80189d6:	e7d1      	b.n	801897c <__hexnan+0xd4>
 80189d8:	2004      	movs	r0, #4
 80189da:	b007      	add	sp, #28
 80189dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189e0 <_findenv_r>:
 80189e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189e4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8018a54 <_findenv_r+0x74>
 80189e8:	4607      	mov	r7, r0
 80189ea:	4689      	mov	r9, r1
 80189ec:	4616      	mov	r6, r2
 80189ee:	f001 fbf1 	bl	801a1d4 <__env_lock>
 80189f2:	f8da 4000 	ldr.w	r4, [sl]
 80189f6:	b134      	cbz	r4, 8018a06 <_findenv_r+0x26>
 80189f8:	464b      	mov	r3, r9
 80189fa:	4698      	mov	r8, r3
 80189fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a00:	b13a      	cbz	r2, 8018a12 <_findenv_r+0x32>
 8018a02:	2a3d      	cmp	r2, #61	; 0x3d
 8018a04:	d1f9      	bne.n	80189fa <_findenv_r+0x1a>
 8018a06:	4638      	mov	r0, r7
 8018a08:	f001 fbea 	bl	801a1e0 <__env_unlock>
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a12:	eba8 0809 	sub.w	r8, r8, r9
 8018a16:	46a3      	mov	fp, r4
 8018a18:	f854 0b04 	ldr.w	r0, [r4], #4
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	d0f2      	beq.n	8018a06 <_findenv_r+0x26>
 8018a20:	4642      	mov	r2, r8
 8018a22:	4649      	mov	r1, r9
 8018a24:	f001 fafc 	bl	801a020 <strncmp>
 8018a28:	2800      	cmp	r0, #0
 8018a2a:	d1f4      	bne.n	8018a16 <_findenv_r+0x36>
 8018a2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018a30:	eb03 0508 	add.w	r5, r3, r8
 8018a34:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018a38:	2b3d      	cmp	r3, #61	; 0x3d
 8018a3a:	d1ec      	bne.n	8018a16 <_findenv_r+0x36>
 8018a3c:	f8da 3000 	ldr.w	r3, [sl]
 8018a40:	ebab 0303 	sub.w	r3, fp, r3
 8018a44:	109b      	asrs	r3, r3, #2
 8018a46:	4638      	mov	r0, r7
 8018a48:	6033      	str	r3, [r6, #0]
 8018a4a:	f001 fbc9 	bl	801a1e0 <__env_unlock>
 8018a4e:	1c68      	adds	r0, r5, #1
 8018a50:	e7dd      	b.n	8018a0e <_findenv_r+0x2e>
 8018a52:	bf00      	nop
 8018a54:	200000a4 	.word	0x200000a4

08018a58 <_getenv_r>:
 8018a58:	b507      	push	{r0, r1, r2, lr}
 8018a5a:	aa01      	add	r2, sp, #4
 8018a5c:	f7ff ffc0 	bl	80189e0 <_findenv_r>
 8018a60:	b003      	add	sp, #12
 8018a62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018a68 <__gettzinfo>:
 8018a68:	4800      	ldr	r0, [pc, #0]	; (8018a6c <__gettzinfo+0x4>)
 8018a6a:	4770      	bx	lr
 8018a6c:	20000290 	.word	0x20000290

08018a70 <_localeconv_r>:
 8018a70:	4800      	ldr	r0, [pc, #0]	; (8018a74 <_localeconv_r+0x4>)
 8018a72:	4770      	bx	lr
 8018a74:	200003dc 	.word	0x200003dc

08018a78 <__retarget_lock_init_recursive>:
 8018a78:	4770      	bx	lr

08018a7a <__retarget_lock_acquire>:
 8018a7a:	4770      	bx	lr

08018a7c <__retarget_lock_acquire_recursive>:
 8018a7c:	4770      	bx	lr

08018a7e <__retarget_lock_release>:
 8018a7e:	4770      	bx	lr

08018a80 <__retarget_lock_release_recursive>:
 8018a80:	4770      	bx	lr
	...

08018a84 <_lseek_r>:
 8018a84:	b538      	push	{r3, r4, r5, lr}
 8018a86:	4d07      	ldr	r5, [pc, #28]	; (8018aa4 <_lseek_r+0x20>)
 8018a88:	4604      	mov	r4, r0
 8018a8a:	4608      	mov	r0, r1
 8018a8c:	4611      	mov	r1, r2
 8018a8e:	2200      	movs	r2, #0
 8018a90:	602a      	str	r2, [r5, #0]
 8018a92:	461a      	mov	r2, r3
 8018a94:	f7ec f89a 	bl	8004bcc <_lseek>
 8018a98:	1c43      	adds	r3, r0, #1
 8018a9a:	d102      	bne.n	8018aa2 <_lseek_r+0x1e>
 8018a9c:	682b      	ldr	r3, [r5, #0]
 8018a9e:	b103      	cbz	r3, 8018aa2 <_lseek_r+0x1e>
 8018aa0:	6023      	str	r3, [r4, #0]
 8018aa2:	bd38      	pop	{r3, r4, r5, pc}
 8018aa4:	20005e78 	.word	0x20005e78

08018aa8 <__swhatbuf_r>:
 8018aa8:	b570      	push	{r4, r5, r6, lr}
 8018aaa:	460e      	mov	r6, r1
 8018aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ab0:	2900      	cmp	r1, #0
 8018ab2:	b096      	sub	sp, #88	; 0x58
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	461d      	mov	r5, r3
 8018ab8:	da08      	bge.n	8018acc <__swhatbuf_r+0x24>
 8018aba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018abe:	2200      	movs	r2, #0
 8018ac0:	602a      	str	r2, [r5, #0]
 8018ac2:	061a      	lsls	r2, r3, #24
 8018ac4:	d410      	bmi.n	8018ae8 <__swhatbuf_r+0x40>
 8018ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018aca:	e00e      	b.n	8018aea <__swhatbuf_r+0x42>
 8018acc:	466a      	mov	r2, sp
 8018ace:	f001 fb8d 	bl	801a1ec <_fstat_r>
 8018ad2:	2800      	cmp	r0, #0
 8018ad4:	dbf1      	blt.n	8018aba <__swhatbuf_r+0x12>
 8018ad6:	9a01      	ldr	r2, [sp, #4]
 8018ad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018adc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018ae0:	425a      	negs	r2, r3
 8018ae2:	415a      	adcs	r2, r3
 8018ae4:	602a      	str	r2, [r5, #0]
 8018ae6:	e7ee      	b.n	8018ac6 <__swhatbuf_r+0x1e>
 8018ae8:	2340      	movs	r3, #64	; 0x40
 8018aea:	2000      	movs	r0, #0
 8018aec:	6023      	str	r3, [r4, #0]
 8018aee:	b016      	add	sp, #88	; 0x58
 8018af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08018af4 <__smakebuf_r>:
 8018af4:	898b      	ldrh	r3, [r1, #12]
 8018af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018af8:	079d      	lsls	r5, r3, #30
 8018afa:	4606      	mov	r6, r0
 8018afc:	460c      	mov	r4, r1
 8018afe:	d507      	bpl.n	8018b10 <__smakebuf_r+0x1c>
 8018b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018b04:	6023      	str	r3, [r4, #0]
 8018b06:	6123      	str	r3, [r4, #16]
 8018b08:	2301      	movs	r3, #1
 8018b0a:	6163      	str	r3, [r4, #20]
 8018b0c:	b002      	add	sp, #8
 8018b0e:	bd70      	pop	{r4, r5, r6, pc}
 8018b10:	ab01      	add	r3, sp, #4
 8018b12:	466a      	mov	r2, sp
 8018b14:	f7ff ffc8 	bl	8018aa8 <__swhatbuf_r>
 8018b18:	9900      	ldr	r1, [sp, #0]
 8018b1a:	4605      	mov	r5, r0
 8018b1c:	4630      	mov	r0, r6
 8018b1e:	f7fc fa47 	bl	8014fb0 <_malloc_r>
 8018b22:	b948      	cbnz	r0, 8018b38 <__smakebuf_r+0x44>
 8018b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b28:	059a      	lsls	r2, r3, #22
 8018b2a:	d4ef      	bmi.n	8018b0c <__smakebuf_r+0x18>
 8018b2c:	f023 0303 	bic.w	r3, r3, #3
 8018b30:	f043 0302 	orr.w	r3, r3, #2
 8018b34:	81a3      	strh	r3, [r4, #12]
 8018b36:	e7e3      	b.n	8018b00 <__smakebuf_r+0xc>
 8018b38:	4b0d      	ldr	r3, [pc, #52]	; (8018b70 <__smakebuf_r+0x7c>)
 8018b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018b3c:	89a3      	ldrh	r3, [r4, #12]
 8018b3e:	6020      	str	r0, [r4, #0]
 8018b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b44:	81a3      	strh	r3, [r4, #12]
 8018b46:	9b00      	ldr	r3, [sp, #0]
 8018b48:	6163      	str	r3, [r4, #20]
 8018b4a:	9b01      	ldr	r3, [sp, #4]
 8018b4c:	6120      	str	r0, [r4, #16]
 8018b4e:	b15b      	cbz	r3, 8018b68 <__smakebuf_r+0x74>
 8018b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b54:	4630      	mov	r0, r6
 8018b56:	f001 fb5b 	bl	801a210 <_isatty_r>
 8018b5a:	b128      	cbz	r0, 8018b68 <__smakebuf_r+0x74>
 8018b5c:	89a3      	ldrh	r3, [r4, #12]
 8018b5e:	f023 0303 	bic.w	r3, r3, #3
 8018b62:	f043 0301 	orr.w	r3, r3, #1
 8018b66:	81a3      	strh	r3, [r4, #12]
 8018b68:	89a0      	ldrh	r0, [r4, #12]
 8018b6a:	4305      	orrs	r5, r0
 8018b6c:	81a5      	strh	r5, [r4, #12]
 8018b6e:	e7cd      	b.n	8018b0c <__smakebuf_r+0x18>
 8018b70:	08018161 	.word	0x08018161

08018b74 <__ascii_mbtowc>:
 8018b74:	b082      	sub	sp, #8
 8018b76:	b901      	cbnz	r1, 8018b7a <__ascii_mbtowc+0x6>
 8018b78:	a901      	add	r1, sp, #4
 8018b7a:	b142      	cbz	r2, 8018b8e <__ascii_mbtowc+0x1a>
 8018b7c:	b14b      	cbz	r3, 8018b92 <__ascii_mbtowc+0x1e>
 8018b7e:	7813      	ldrb	r3, [r2, #0]
 8018b80:	600b      	str	r3, [r1, #0]
 8018b82:	7812      	ldrb	r2, [r2, #0]
 8018b84:	1e10      	subs	r0, r2, #0
 8018b86:	bf18      	it	ne
 8018b88:	2001      	movne	r0, #1
 8018b8a:	b002      	add	sp, #8
 8018b8c:	4770      	bx	lr
 8018b8e:	4610      	mov	r0, r2
 8018b90:	e7fb      	b.n	8018b8a <__ascii_mbtowc+0x16>
 8018b92:	f06f 0001 	mvn.w	r0, #1
 8018b96:	e7f8      	b.n	8018b8a <__ascii_mbtowc+0x16>

08018b98 <memmove>:
 8018b98:	4288      	cmp	r0, r1
 8018b9a:	b510      	push	{r4, lr}
 8018b9c:	eb01 0402 	add.w	r4, r1, r2
 8018ba0:	d902      	bls.n	8018ba8 <memmove+0x10>
 8018ba2:	4284      	cmp	r4, r0
 8018ba4:	4623      	mov	r3, r4
 8018ba6:	d807      	bhi.n	8018bb8 <memmove+0x20>
 8018ba8:	1e43      	subs	r3, r0, #1
 8018baa:	42a1      	cmp	r1, r4
 8018bac:	d008      	beq.n	8018bc0 <memmove+0x28>
 8018bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018bb6:	e7f8      	b.n	8018baa <memmove+0x12>
 8018bb8:	4402      	add	r2, r0
 8018bba:	4601      	mov	r1, r0
 8018bbc:	428a      	cmp	r2, r1
 8018bbe:	d100      	bne.n	8018bc2 <memmove+0x2a>
 8018bc0:	bd10      	pop	{r4, pc}
 8018bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018bca:	e7f7      	b.n	8018bbc <memmove+0x24>

08018bcc <__malloc_lock>:
 8018bcc:	4801      	ldr	r0, [pc, #4]	; (8018bd4 <__malloc_lock+0x8>)
 8018bce:	f7ff bf55 	b.w	8018a7c <__retarget_lock_acquire_recursive>
 8018bd2:	bf00      	nop
 8018bd4:	20005e71 	.word	0x20005e71

08018bd8 <__malloc_unlock>:
 8018bd8:	4801      	ldr	r0, [pc, #4]	; (8018be0 <__malloc_unlock+0x8>)
 8018bda:	f7ff bf51 	b.w	8018a80 <__retarget_lock_release_recursive>
 8018bde:	bf00      	nop
 8018be0:	20005e71 	.word	0x20005e71

08018be4 <_Balloc>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018be8:	4604      	mov	r4, r0
 8018bea:	460d      	mov	r5, r1
 8018bec:	b976      	cbnz	r6, 8018c0c <_Balloc+0x28>
 8018bee:	2010      	movs	r0, #16
 8018bf0:	f7fb feda 	bl	80149a8 <malloc>
 8018bf4:	4602      	mov	r2, r0
 8018bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8018bf8:	b920      	cbnz	r0, 8018c04 <_Balloc+0x20>
 8018bfa:	4b18      	ldr	r3, [pc, #96]	; (8018c5c <_Balloc+0x78>)
 8018bfc:	4818      	ldr	r0, [pc, #96]	; (8018c60 <_Balloc+0x7c>)
 8018bfe:	2166      	movs	r1, #102	; 0x66
 8018c00:	f7fb fe70 	bl	80148e4 <__assert_func>
 8018c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c08:	6006      	str	r6, [r0, #0]
 8018c0a:	60c6      	str	r6, [r0, #12]
 8018c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c0e:	68f3      	ldr	r3, [r6, #12]
 8018c10:	b183      	cbz	r3, 8018c34 <_Balloc+0x50>
 8018c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c14:	68db      	ldr	r3, [r3, #12]
 8018c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c1a:	b9b8      	cbnz	r0, 8018c4c <_Balloc+0x68>
 8018c1c:	2101      	movs	r1, #1
 8018c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8018c22:	1d72      	adds	r2, r6, #5
 8018c24:	0092      	lsls	r2, r2, #2
 8018c26:	4620      	mov	r0, r4
 8018c28:	f000 fc9d 	bl	8019566 <_calloc_r>
 8018c2c:	b160      	cbz	r0, 8018c48 <_Balloc+0x64>
 8018c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c32:	e00e      	b.n	8018c52 <_Balloc+0x6e>
 8018c34:	2221      	movs	r2, #33	; 0x21
 8018c36:	2104      	movs	r1, #4
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f000 fc94 	bl	8019566 <_calloc_r>
 8018c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c40:	60f0      	str	r0, [r6, #12]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d1e4      	bne.n	8018c12 <_Balloc+0x2e>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	bd70      	pop	{r4, r5, r6, pc}
 8018c4c:	6802      	ldr	r2, [r0, #0]
 8018c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c52:	2300      	movs	r3, #0
 8018c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c58:	e7f7      	b.n	8018c4a <_Balloc+0x66>
 8018c5a:	bf00      	nop
 8018c5c:	080734ac 	.word	0x080734ac
 8018c60:	08073a00 	.word	0x08073a00

08018c64 <_Bfree>:
 8018c64:	b570      	push	{r4, r5, r6, lr}
 8018c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c68:	4605      	mov	r5, r0
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	b976      	cbnz	r6, 8018c8c <_Bfree+0x28>
 8018c6e:	2010      	movs	r0, #16
 8018c70:	f7fb fe9a 	bl	80149a8 <malloc>
 8018c74:	4602      	mov	r2, r0
 8018c76:	6268      	str	r0, [r5, #36]	; 0x24
 8018c78:	b920      	cbnz	r0, 8018c84 <_Bfree+0x20>
 8018c7a:	4b09      	ldr	r3, [pc, #36]	; (8018ca0 <_Bfree+0x3c>)
 8018c7c:	4809      	ldr	r0, [pc, #36]	; (8018ca4 <_Bfree+0x40>)
 8018c7e:	218a      	movs	r1, #138	; 0x8a
 8018c80:	f7fb fe30 	bl	80148e4 <__assert_func>
 8018c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c88:	6006      	str	r6, [r0, #0]
 8018c8a:	60c6      	str	r6, [r0, #12]
 8018c8c:	b13c      	cbz	r4, 8018c9e <_Bfree+0x3a>
 8018c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018c90:	6862      	ldr	r2, [r4, #4]
 8018c92:	68db      	ldr	r3, [r3, #12]
 8018c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c98:	6021      	str	r1, [r4, #0]
 8018c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018c9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ca0:	080734ac 	.word	0x080734ac
 8018ca4:	08073a00 	.word	0x08073a00

08018ca8 <__multadd>:
 8018ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cac:	690d      	ldr	r5, [r1, #16]
 8018cae:	4607      	mov	r7, r0
 8018cb0:	460c      	mov	r4, r1
 8018cb2:	461e      	mov	r6, r3
 8018cb4:	f101 0c14 	add.w	ip, r1, #20
 8018cb8:	2000      	movs	r0, #0
 8018cba:	f8dc 3000 	ldr.w	r3, [ip]
 8018cbe:	b299      	uxth	r1, r3
 8018cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8018cc4:	0c1e      	lsrs	r6, r3, #16
 8018cc6:	0c0b      	lsrs	r3, r1, #16
 8018cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8018ccc:	b289      	uxth	r1, r1
 8018cce:	3001      	adds	r0, #1
 8018cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018cd4:	4285      	cmp	r5, r0
 8018cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8018cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018cde:	dcec      	bgt.n	8018cba <__multadd+0x12>
 8018ce0:	b30e      	cbz	r6, 8018d26 <__multadd+0x7e>
 8018ce2:	68a3      	ldr	r3, [r4, #8]
 8018ce4:	42ab      	cmp	r3, r5
 8018ce6:	dc19      	bgt.n	8018d1c <__multadd+0x74>
 8018ce8:	6861      	ldr	r1, [r4, #4]
 8018cea:	4638      	mov	r0, r7
 8018cec:	3101      	adds	r1, #1
 8018cee:	f7ff ff79 	bl	8018be4 <_Balloc>
 8018cf2:	4680      	mov	r8, r0
 8018cf4:	b928      	cbnz	r0, 8018d02 <__multadd+0x5a>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	4b0c      	ldr	r3, [pc, #48]	; (8018d2c <__multadd+0x84>)
 8018cfa:	480d      	ldr	r0, [pc, #52]	; (8018d30 <__multadd+0x88>)
 8018cfc:	21b5      	movs	r1, #181	; 0xb5
 8018cfe:	f7fb fdf1 	bl	80148e4 <__assert_func>
 8018d02:	6922      	ldr	r2, [r4, #16]
 8018d04:	3202      	adds	r2, #2
 8018d06:	f104 010c 	add.w	r1, r4, #12
 8018d0a:	0092      	lsls	r2, r2, #2
 8018d0c:	300c      	adds	r0, #12
 8018d0e:	f7fb fe5b 	bl	80149c8 <memcpy>
 8018d12:	4621      	mov	r1, r4
 8018d14:	4638      	mov	r0, r7
 8018d16:	f7ff ffa5 	bl	8018c64 <_Bfree>
 8018d1a:	4644      	mov	r4, r8
 8018d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018d20:	3501      	adds	r5, #1
 8018d22:	615e      	str	r6, [r3, #20]
 8018d24:	6125      	str	r5, [r4, #16]
 8018d26:	4620      	mov	r0, r4
 8018d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2c:	080738b2 	.word	0x080738b2
 8018d30:	08073a00 	.word	0x08073a00

08018d34 <__s2b>:
 8018d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d38:	460c      	mov	r4, r1
 8018d3a:	4615      	mov	r5, r2
 8018d3c:	461f      	mov	r7, r3
 8018d3e:	2209      	movs	r2, #9
 8018d40:	3308      	adds	r3, #8
 8018d42:	4606      	mov	r6, r0
 8018d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8018d48:	2100      	movs	r1, #0
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	db09      	blt.n	8018d64 <__s2b+0x30>
 8018d50:	4630      	mov	r0, r6
 8018d52:	f7ff ff47 	bl	8018be4 <_Balloc>
 8018d56:	b940      	cbnz	r0, 8018d6a <__s2b+0x36>
 8018d58:	4602      	mov	r2, r0
 8018d5a:	4b19      	ldr	r3, [pc, #100]	; (8018dc0 <__s2b+0x8c>)
 8018d5c:	4819      	ldr	r0, [pc, #100]	; (8018dc4 <__s2b+0x90>)
 8018d5e:	21ce      	movs	r1, #206	; 0xce
 8018d60:	f7fb fdc0 	bl	80148e4 <__assert_func>
 8018d64:	0052      	lsls	r2, r2, #1
 8018d66:	3101      	adds	r1, #1
 8018d68:	e7f0      	b.n	8018d4c <__s2b+0x18>
 8018d6a:	9b08      	ldr	r3, [sp, #32]
 8018d6c:	6143      	str	r3, [r0, #20]
 8018d6e:	2d09      	cmp	r5, #9
 8018d70:	f04f 0301 	mov.w	r3, #1
 8018d74:	6103      	str	r3, [r0, #16]
 8018d76:	dd16      	ble.n	8018da6 <__s2b+0x72>
 8018d78:	f104 0909 	add.w	r9, r4, #9
 8018d7c:	46c8      	mov	r8, r9
 8018d7e:	442c      	add	r4, r5
 8018d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018d84:	4601      	mov	r1, r0
 8018d86:	3b30      	subs	r3, #48	; 0x30
 8018d88:	220a      	movs	r2, #10
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f7ff ff8c 	bl	8018ca8 <__multadd>
 8018d90:	45a0      	cmp	r8, r4
 8018d92:	d1f5      	bne.n	8018d80 <__s2b+0x4c>
 8018d94:	f1a5 0408 	sub.w	r4, r5, #8
 8018d98:	444c      	add	r4, r9
 8018d9a:	1b2d      	subs	r5, r5, r4
 8018d9c:	1963      	adds	r3, r4, r5
 8018d9e:	42bb      	cmp	r3, r7
 8018da0:	db04      	blt.n	8018dac <__s2b+0x78>
 8018da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018da6:	340a      	adds	r4, #10
 8018da8:	2509      	movs	r5, #9
 8018daa:	e7f6      	b.n	8018d9a <__s2b+0x66>
 8018dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018db0:	4601      	mov	r1, r0
 8018db2:	3b30      	subs	r3, #48	; 0x30
 8018db4:	220a      	movs	r2, #10
 8018db6:	4630      	mov	r0, r6
 8018db8:	f7ff ff76 	bl	8018ca8 <__multadd>
 8018dbc:	e7ee      	b.n	8018d9c <__s2b+0x68>
 8018dbe:	bf00      	nop
 8018dc0:	080738b2 	.word	0x080738b2
 8018dc4:	08073a00 	.word	0x08073a00

08018dc8 <__hi0bits>:
 8018dc8:	0c03      	lsrs	r3, r0, #16
 8018dca:	041b      	lsls	r3, r3, #16
 8018dcc:	b9d3      	cbnz	r3, 8018e04 <__hi0bits+0x3c>
 8018dce:	0400      	lsls	r0, r0, #16
 8018dd0:	2310      	movs	r3, #16
 8018dd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018dd6:	bf04      	itt	eq
 8018dd8:	0200      	lsleq	r0, r0, #8
 8018dda:	3308      	addeq	r3, #8
 8018ddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018de0:	bf04      	itt	eq
 8018de2:	0100      	lsleq	r0, r0, #4
 8018de4:	3304      	addeq	r3, #4
 8018de6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018dea:	bf04      	itt	eq
 8018dec:	0080      	lsleq	r0, r0, #2
 8018dee:	3302      	addeq	r3, #2
 8018df0:	2800      	cmp	r0, #0
 8018df2:	db05      	blt.n	8018e00 <__hi0bits+0x38>
 8018df4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018df8:	f103 0301 	add.w	r3, r3, #1
 8018dfc:	bf08      	it	eq
 8018dfe:	2320      	moveq	r3, #32
 8018e00:	4618      	mov	r0, r3
 8018e02:	4770      	bx	lr
 8018e04:	2300      	movs	r3, #0
 8018e06:	e7e4      	b.n	8018dd2 <__hi0bits+0xa>

08018e08 <__lo0bits>:
 8018e08:	6803      	ldr	r3, [r0, #0]
 8018e0a:	f013 0207 	ands.w	r2, r3, #7
 8018e0e:	4601      	mov	r1, r0
 8018e10:	d00b      	beq.n	8018e2a <__lo0bits+0x22>
 8018e12:	07da      	lsls	r2, r3, #31
 8018e14:	d423      	bmi.n	8018e5e <__lo0bits+0x56>
 8018e16:	0798      	lsls	r0, r3, #30
 8018e18:	bf49      	itett	mi
 8018e1a:	085b      	lsrmi	r3, r3, #1
 8018e1c:	089b      	lsrpl	r3, r3, #2
 8018e1e:	2001      	movmi	r0, #1
 8018e20:	600b      	strmi	r3, [r1, #0]
 8018e22:	bf5c      	itt	pl
 8018e24:	600b      	strpl	r3, [r1, #0]
 8018e26:	2002      	movpl	r0, #2
 8018e28:	4770      	bx	lr
 8018e2a:	b298      	uxth	r0, r3
 8018e2c:	b9a8      	cbnz	r0, 8018e5a <__lo0bits+0x52>
 8018e2e:	0c1b      	lsrs	r3, r3, #16
 8018e30:	2010      	movs	r0, #16
 8018e32:	b2da      	uxtb	r2, r3
 8018e34:	b90a      	cbnz	r2, 8018e3a <__lo0bits+0x32>
 8018e36:	3008      	adds	r0, #8
 8018e38:	0a1b      	lsrs	r3, r3, #8
 8018e3a:	071a      	lsls	r2, r3, #28
 8018e3c:	bf04      	itt	eq
 8018e3e:	091b      	lsreq	r3, r3, #4
 8018e40:	3004      	addeq	r0, #4
 8018e42:	079a      	lsls	r2, r3, #30
 8018e44:	bf04      	itt	eq
 8018e46:	089b      	lsreq	r3, r3, #2
 8018e48:	3002      	addeq	r0, #2
 8018e4a:	07da      	lsls	r2, r3, #31
 8018e4c:	d403      	bmi.n	8018e56 <__lo0bits+0x4e>
 8018e4e:	085b      	lsrs	r3, r3, #1
 8018e50:	f100 0001 	add.w	r0, r0, #1
 8018e54:	d005      	beq.n	8018e62 <__lo0bits+0x5a>
 8018e56:	600b      	str	r3, [r1, #0]
 8018e58:	4770      	bx	lr
 8018e5a:	4610      	mov	r0, r2
 8018e5c:	e7e9      	b.n	8018e32 <__lo0bits+0x2a>
 8018e5e:	2000      	movs	r0, #0
 8018e60:	4770      	bx	lr
 8018e62:	2020      	movs	r0, #32
 8018e64:	4770      	bx	lr
	...

08018e68 <__i2b>:
 8018e68:	b510      	push	{r4, lr}
 8018e6a:	460c      	mov	r4, r1
 8018e6c:	2101      	movs	r1, #1
 8018e6e:	f7ff feb9 	bl	8018be4 <_Balloc>
 8018e72:	4602      	mov	r2, r0
 8018e74:	b928      	cbnz	r0, 8018e82 <__i2b+0x1a>
 8018e76:	4b05      	ldr	r3, [pc, #20]	; (8018e8c <__i2b+0x24>)
 8018e78:	4805      	ldr	r0, [pc, #20]	; (8018e90 <__i2b+0x28>)
 8018e7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018e7e:	f7fb fd31 	bl	80148e4 <__assert_func>
 8018e82:	2301      	movs	r3, #1
 8018e84:	6144      	str	r4, [r0, #20]
 8018e86:	6103      	str	r3, [r0, #16]
 8018e88:	bd10      	pop	{r4, pc}
 8018e8a:	bf00      	nop
 8018e8c:	080738b2 	.word	0x080738b2
 8018e90:	08073a00 	.word	0x08073a00

08018e94 <__multiply>:
 8018e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e98:	4691      	mov	r9, r2
 8018e9a:	690a      	ldr	r2, [r1, #16]
 8018e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	bfb8      	it	lt
 8018ea4:	460b      	movlt	r3, r1
 8018ea6:	460c      	mov	r4, r1
 8018ea8:	bfbc      	itt	lt
 8018eaa:	464c      	movlt	r4, r9
 8018eac:	4699      	movlt	r9, r3
 8018eae:	6927      	ldr	r7, [r4, #16]
 8018eb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018eb4:	68a3      	ldr	r3, [r4, #8]
 8018eb6:	6861      	ldr	r1, [r4, #4]
 8018eb8:	eb07 060a 	add.w	r6, r7, sl
 8018ebc:	42b3      	cmp	r3, r6
 8018ebe:	b085      	sub	sp, #20
 8018ec0:	bfb8      	it	lt
 8018ec2:	3101      	addlt	r1, #1
 8018ec4:	f7ff fe8e 	bl	8018be4 <_Balloc>
 8018ec8:	b930      	cbnz	r0, 8018ed8 <__multiply+0x44>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	4b44      	ldr	r3, [pc, #272]	; (8018fe0 <__multiply+0x14c>)
 8018ece:	4845      	ldr	r0, [pc, #276]	; (8018fe4 <__multiply+0x150>)
 8018ed0:	f240 115d 	movw	r1, #349	; 0x15d
 8018ed4:	f7fb fd06 	bl	80148e4 <__assert_func>
 8018ed8:	f100 0514 	add.w	r5, r0, #20
 8018edc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018ee0:	462b      	mov	r3, r5
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	4543      	cmp	r3, r8
 8018ee6:	d321      	bcc.n	8018f2c <__multiply+0x98>
 8018ee8:	f104 0314 	add.w	r3, r4, #20
 8018eec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018ef0:	f109 0314 	add.w	r3, r9, #20
 8018ef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018ef8:	9202      	str	r2, [sp, #8]
 8018efa:	1b3a      	subs	r2, r7, r4
 8018efc:	3a15      	subs	r2, #21
 8018efe:	f022 0203 	bic.w	r2, r2, #3
 8018f02:	3204      	adds	r2, #4
 8018f04:	f104 0115 	add.w	r1, r4, #21
 8018f08:	428f      	cmp	r7, r1
 8018f0a:	bf38      	it	cc
 8018f0c:	2204      	movcc	r2, #4
 8018f0e:	9201      	str	r2, [sp, #4]
 8018f10:	9a02      	ldr	r2, [sp, #8]
 8018f12:	9303      	str	r3, [sp, #12]
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d80c      	bhi.n	8018f32 <__multiply+0x9e>
 8018f18:	2e00      	cmp	r6, #0
 8018f1a:	dd03      	ble.n	8018f24 <__multiply+0x90>
 8018f1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d05a      	beq.n	8018fda <__multiply+0x146>
 8018f24:	6106      	str	r6, [r0, #16]
 8018f26:	b005      	add	sp, #20
 8018f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2c:	f843 2b04 	str.w	r2, [r3], #4
 8018f30:	e7d8      	b.n	8018ee4 <__multiply+0x50>
 8018f32:	f8b3 a000 	ldrh.w	sl, [r3]
 8018f36:	f1ba 0f00 	cmp.w	sl, #0
 8018f3a:	d024      	beq.n	8018f86 <__multiply+0xf2>
 8018f3c:	f104 0e14 	add.w	lr, r4, #20
 8018f40:	46a9      	mov	r9, r5
 8018f42:	f04f 0c00 	mov.w	ip, #0
 8018f46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8018f4e:	fa1f fb82 	uxth.w	fp, r2
 8018f52:	b289      	uxth	r1, r1
 8018f54:	fb0a 110b 	mla	r1, sl, fp, r1
 8018f58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8018f60:	4461      	add	r1, ip
 8018f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018f66:	fb0a c20b 	mla	r2, sl, fp, ip
 8018f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018f6e:	b289      	uxth	r1, r1
 8018f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018f74:	4577      	cmp	r7, lr
 8018f76:	f849 1b04 	str.w	r1, [r9], #4
 8018f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018f7e:	d8e2      	bhi.n	8018f46 <__multiply+0xb2>
 8018f80:	9a01      	ldr	r2, [sp, #4]
 8018f82:	f845 c002 	str.w	ip, [r5, r2]
 8018f86:	9a03      	ldr	r2, [sp, #12]
 8018f88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018f8c:	3304      	adds	r3, #4
 8018f8e:	f1b9 0f00 	cmp.w	r9, #0
 8018f92:	d020      	beq.n	8018fd6 <__multiply+0x142>
 8018f94:	6829      	ldr	r1, [r5, #0]
 8018f96:	f104 0c14 	add.w	ip, r4, #20
 8018f9a:	46ae      	mov	lr, r5
 8018f9c:	f04f 0a00 	mov.w	sl, #0
 8018fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8018fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018fa8:	fb09 220b 	mla	r2, r9, fp, r2
 8018fac:	4492      	add	sl, r2
 8018fae:	b289      	uxth	r1, r1
 8018fb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8018fb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018fbc:	f8be 1000 	ldrh.w	r1, [lr]
 8018fc0:	0c12      	lsrs	r2, r2, #16
 8018fc2:	fb09 1102 	mla	r1, r9, r2, r1
 8018fc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018fca:	4567      	cmp	r7, ip
 8018fcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018fd0:	d8e6      	bhi.n	8018fa0 <__multiply+0x10c>
 8018fd2:	9a01      	ldr	r2, [sp, #4]
 8018fd4:	50a9      	str	r1, [r5, r2]
 8018fd6:	3504      	adds	r5, #4
 8018fd8:	e79a      	b.n	8018f10 <__multiply+0x7c>
 8018fda:	3e01      	subs	r6, #1
 8018fdc:	e79c      	b.n	8018f18 <__multiply+0x84>
 8018fde:	bf00      	nop
 8018fe0:	080738b2 	.word	0x080738b2
 8018fe4:	08073a00 	.word	0x08073a00

08018fe8 <__pow5mult>:
 8018fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fec:	4615      	mov	r5, r2
 8018fee:	f012 0203 	ands.w	r2, r2, #3
 8018ff2:	4606      	mov	r6, r0
 8018ff4:	460f      	mov	r7, r1
 8018ff6:	d007      	beq.n	8019008 <__pow5mult+0x20>
 8018ff8:	4c25      	ldr	r4, [pc, #148]	; (8019090 <__pow5mult+0xa8>)
 8018ffa:	3a01      	subs	r2, #1
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019002:	f7ff fe51 	bl	8018ca8 <__multadd>
 8019006:	4607      	mov	r7, r0
 8019008:	10ad      	asrs	r5, r5, #2
 801900a:	d03d      	beq.n	8019088 <__pow5mult+0xa0>
 801900c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801900e:	b97c      	cbnz	r4, 8019030 <__pow5mult+0x48>
 8019010:	2010      	movs	r0, #16
 8019012:	f7fb fcc9 	bl	80149a8 <malloc>
 8019016:	4602      	mov	r2, r0
 8019018:	6270      	str	r0, [r6, #36]	; 0x24
 801901a:	b928      	cbnz	r0, 8019028 <__pow5mult+0x40>
 801901c:	4b1d      	ldr	r3, [pc, #116]	; (8019094 <__pow5mult+0xac>)
 801901e:	481e      	ldr	r0, [pc, #120]	; (8019098 <__pow5mult+0xb0>)
 8019020:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019024:	f7fb fc5e 	bl	80148e4 <__assert_func>
 8019028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801902c:	6004      	str	r4, [r0, #0]
 801902e:	60c4      	str	r4, [r0, #12]
 8019030:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019038:	b94c      	cbnz	r4, 801904e <__pow5mult+0x66>
 801903a:	f240 2171 	movw	r1, #625	; 0x271
 801903e:	4630      	mov	r0, r6
 8019040:	f7ff ff12 	bl	8018e68 <__i2b>
 8019044:	2300      	movs	r3, #0
 8019046:	f8c8 0008 	str.w	r0, [r8, #8]
 801904a:	4604      	mov	r4, r0
 801904c:	6003      	str	r3, [r0, #0]
 801904e:	f04f 0900 	mov.w	r9, #0
 8019052:	07eb      	lsls	r3, r5, #31
 8019054:	d50a      	bpl.n	801906c <__pow5mult+0x84>
 8019056:	4639      	mov	r1, r7
 8019058:	4622      	mov	r2, r4
 801905a:	4630      	mov	r0, r6
 801905c:	f7ff ff1a 	bl	8018e94 <__multiply>
 8019060:	4639      	mov	r1, r7
 8019062:	4680      	mov	r8, r0
 8019064:	4630      	mov	r0, r6
 8019066:	f7ff fdfd 	bl	8018c64 <_Bfree>
 801906a:	4647      	mov	r7, r8
 801906c:	106d      	asrs	r5, r5, #1
 801906e:	d00b      	beq.n	8019088 <__pow5mult+0xa0>
 8019070:	6820      	ldr	r0, [r4, #0]
 8019072:	b938      	cbnz	r0, 8019084 <__pow5mult+0x9c>
 8019074:	4622      	mov	r2, r4
 8019076:	4621      	mov	r1, r4
 8019078:	4630      	mov	r0, r6
 801907a:	f7ff ff0b 	bl	8018e94 <__multiply>
 801907e:	6020      	str	r0, [r4, #0]
 8019080:	f8c0 9000 	str.w	r9, [r0]
 8019084:	4604      	mov	r4, r0
 8019086:	e7e4      	b.n	8019052 <__pow5mult+0x6a>
 8019088:	4638      	mov	r0, r7
 801908a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801908e:	bf00      	nop
 8019090:	08073b50 	.word	0x08073b50
 8019094:	080734ac 	.word	0x080734ac
 8019098:	08073a00 	.word	0x08073a00

0801909c <__lshift>:
 801909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190a0:	460c      	mov	r4, r1
 80190a2:	6849      	ldr	r1, [r1, #4]
 80190a4:	6923      	ldr	r3, [r4, #16]
 80190a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80190aa:	68a3      	ldr	r3, [r4, #8]
 80190ac:	4607      	mov	r7, r0
 80190ae:	4691      	mov	r9, r2
 80190b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80190b4:	f108 0601 	add.w	r6, r8, #1
 80190b8:	42b3      	cmp	r3, r6
 80190ba:	db0b      	blt.n	80190d4 <__lshift+0x38>
 80190bc:	4638      	mov	r0, r7
 80190be:	f7ff fd91 	bl	8018be4 <_Balloc>
 80190c2:	4605      	mov	r5, r0
 80190c4:	b948      	cbnz	r0, 80190da <__lshift+0x3e>
 80190c6:	4602      	mov	r2, r0
 80190c8:	4b2a      	ldr	r3, [pc, #168]	; (8019174 <__lshift+0xd8>)
 80190ca:	482b      	ldr	r0, [pc, #172]	; (8019178 <__lshift+0xdc>)
 80190cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80190d0:	f7fb fc08 	bl	80148e4 <__assert_func>
 80190d4:	3101      	adds	r1, #1
 80190d6:	005b      	lsls	r3, r3, #1
 80190d8:	e7ee      	b.n	80190b8 <__lshift+0x1c>
 80190da:	2300      	movs	r3, #0
 80190dc:	f100 0114 	add.w	r1, r0, #20
 80190e0:	f100 0210 	add.w	r2, r0, #16
 80190e4:	4618      	mov	r0, r3
 80190e6:	4553      	cmp	r3, sl
 80190e8:	db37      	blt.n	801915a <__lshift+0xbe>
 80190ea:	6920      	ldr	r0, [r4, #16]
 80190ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80190f0:	f104 0314 	add.w	r3, r4, #20
 80190f4:	f019 091f 	ands.w	r9, r9, #31
 80190f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80190fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019100:	d02f      	beq.n	8019162 <__lshift+0xc6>
 8019102:	f1c9 0e20 	rsb	lr, r9, #32
 8019106:	468a      	mov	sl, r1
 8019108:	f04f 0c00 	mov.w	ip, #0
 801910c:	681a      	ldr	r2, [r3, #0]
 801910e:	fa02 f209 	lsl.w	r2, r2, r9
 8019112:	ea42 020c 	orr.w	r2, r2, ip
 8019116:	f84a 2b04 	str.w	r2, [sl], #4
 801911a:	f853 2b04 	ldr.w	r2, [r3], #4
 801911e:	4298      	cmp	r0, r3
 8019120:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019124:	d8f2      	bhi.n	801910c <__lshift+0x70>
 8019126:	1b03      	subs	r3, r0, r4
 8019128:	3b15      	subs	r3, #21
 801912a:	f023 0303 	bic.w	r3, r3, #3
 801912e:	3304      	adds	r3, #4
 8019130:	f104 0215 	add.w	r2, r4, #21
 8019134:	4290      	cmp	r0, r2
 8019136:	bf38      	it	cc
 8019138:	2304      	movcc	r3, #4
 801913a:	f841 c003 	str.w	ip, [r1, r3]
 801913e:	f1bc 0f00 	cmp.w	ip, #0
 8019142:	d001      	beq.n	8019148 <__lshift+0xac>
 8019144:	f108 0602 	add.w	r6, r8, #2
 8019148:	3e01      	subs	r6, #1
 801914a:	4638      	mov	r0, r7
 801914c:	612e      	str	r6, [r5, #16]
 801914e:	4621      	mov	r1, r4
 8019150:	f7ff fd88 	bl	8018c64 <_Bfree>
 8019154:	4628      	mov	r0, r5
 8019156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801915a:	f842 0f04 	str.w	r0, [r2, #4]!
 801915e:	3301      	adds	r3, #1
 8019160:	e7c1      	b.n	80190e6 <__lshift+0x4a>
 8019162:	3904      	subs	r1, #4
 8019164:	f853 2b04 	ldr.w	r2, [r3], #4
 8019168:	f841 2f04 	str.w	r2, [r1, #4]!
 801916c:	4298      	cmp	r0, r3
 801916e:	d8f9      	bhi.n	8019164 <__lshift+0xc8>
 8019170:	e7ea      	b.n	8019148 <__lshift+0xac>
 8019172:	bf00      	nop
 8019174:	080738b2 	.word	0x080738b2
 8019178:	08073a00 	.word	0x08073a00

0801917c <__mcmp>:
 801917c:	b530      	push	{r4, r5, lr}
 801917e:	6902      	ldr	r2, [r0, #16]
 8019180:	690c      	ldr	r4, [r1, #16]
 8019182:	1b12      	subs	r2, r2, r4
 8019184:	d10e      	bne.n	80191a4 <__mcmp+0x28>
 8019186:	f100 0314 	add.w	r3, r0, #20
 801918a:	3114      	adds	r1, #20
 801918c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801919c:	42a5      	cmp	r5, r4
 801919e:	d003      	beq.n	80191a8 <__mcmp+0x2c>
 80191a0:	d305      	bcc.n	80191ae <__mcmp+0x32>
 80191a2:	2201      	movs	r2, #1
 80191a4:	4610      	mov	r0, r2
 80191a6:	bd30      	pop	{r4, r5, pc}
 80191a8:	4283      	cmp	r3, r0
 80191aa:	d3f3      	bcc.n	8019194 <__mcmp+0x18>
 80191ac:	e7fa      	b.n	80191a4 <__mcmp+0x28>
 80191ae:	f04f 32ff 	mov.w	r2, #4294967295
 80191b2:	e7f7      	b.n	80191a4 <__mcmp+0x28>

080191b4 <__mdiff>:
 80191b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b8:	460c      	mov	r4, r1
 80191ba:	4606      	mov	r6, r0
 80191bc:	4611      	mov	r1, r2
 80191be:	4620      	mov	r0, r4
 80191c0:	4690      	mov	r8, r2
 80191c2:	f7ff ffdb 	bl	801917c <__mcmp>
 80191c6:	1e05      	subs	r5, r0, #0
 80191c8:	d110      	bne.n	80191ec <__mdiff+0x38>
 80191ca:	4629      	mov	r1, r5
 80191cc:	4630      	mov	r0, r6
 80191ce:	f7ff fd09 	bl	8018be4 <_Balloc>
 80191d2:	b930      	cbnz	r0, 80191e2 <__mdiff+0x2e>
 80191d4:	4b3a      	ldr	r3, [pc, #232]	; (80192c0 <__mdiff+0x10c>)
 80191d6:	4602      	mov	r2, r0
 80191d8:	f240 2132 	movw	r1, #562	; 0x232
 80191dc:	4839      	ldr	r0, [pc, #228]	; (80192c4 <__mdiff+0x110>)
 80191de:	f7fb fb81 	bl	80148e4 <__assert_func>
 80191e2:	2301      	movs	r3, #1
 80191e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80191e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ec:	bfa4      	itt	ge
 80191ee:	4643      	movge	r3, r8
 80191f0:	46a0      	movge	r8, r4
 80191f2:	4630      	mov	r0, r6
 80191f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80191f8:	bfa6      	itte	ge
 80191fa:	461c      	movge	r4, r3
 80191fc:	2500      	movge	r5, #0
 80191fe:	2501      	movlt	r5, #1
 8019200:	f7ff fcf0 	bl	8018be4 <_Balloc>
 8019204:	b920      	cbnz	r0, 8019210 <__mdiff+0x5c>
 8019206:	4b2e      	ldr	r3, [pc, #184]	; (80192c0 <__mdiff+0x10c>)
 8019208:	4602      	mov	r2, r0
 801920a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801920e:	e7e5      	b.n	80191dc <__mdiff+0x28>
 8019210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019214:	6926      	ldr	r6, [r4, #16]
 8019216:	60c5      	str	r5, [r0, #12]
 8019218:	f104 0914 	add.w	r9, r4, #20
 801921c:	f108 0514 	add.w	r5, r8, #20
 8019220:	f100 0e14 	add.w	lr, r0, #20
 8019224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801922c:	f108 0210 	add.w	r2, r8, #16
 8019230:	46f2      	mov	sl, lr
 8019232:	2100      	movs	r1, #0
 8019234:	f859 3b04 	ldr.w	r3, [r9], #4
 8019238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801923c:	fa1f f883 	uxth.w	r8, r3
 8019240:	fa11 f18b 	uxtah	r1, r1, fp
 8019244:	0c1b      	lsrs	r3, r3, #16
 8019246:	eba1 0808 	sub.w	r8, r1, r8
 801924a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801924e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019252:	fa1f f888 	uxth.w	r8, r8
 8019256:	1419      	asrs	r1, r3, #16
 8019258:	454e      	cmp	r6, r9
 801925a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801925e:	f84a 3b04 	str.w	r3, [sl], #4
 8019262:	d8e7      	bhi.n	8019234 <__mdiff+0x80>
 8019264:	1b33      	subs	r3, r6, r4
 8019266:	3b15      	subs	r3, #21
 8019268:	f023 0303 	bic.w	r3, r3, #3
 801926c:	3304      	adds	r3, #4
 801926e:	3415      	adds	r4, #21
 8019270:	42a6      	cmp	r6, r4
 8019272:	bf38      	it	cc
 8019274:	2304      	movcc	r3, #4
 8019276:	441d      	add	r5, r3
 8019278:	4473      	add	r3, lr
 801927a:	469e      	mov	lr, r3
 801927c:	462e      	mov	r6, r5
 801927e:	4566      	cmp	r6, ip
 8019280:	d30e      	bcc.n	80192a0 <__mdiff+0xec>
 8019282:	f10c 0203 	add.w	r2, ip, #3
 8019286:	1b52      	subs	r2, r2, r5
 8019288:	f022 0203 	bic.w	r2, r2, #3
 801928c:	3d03      	subs	r5, #3
 801928e:	45ac      	cmp	ip, r5
 8019290:	bf38      	it	cc
 8019292:	2200      	movcc	r2, #0
 8019294:	441a      	add	r2, r3
 8019296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801929a:	b17b      	cbz	r3, 80192bc <__mdiff+0x108>
 801929c:	6107      	str	r7, [r0, #16]
 801929e:	e7a3      	b.n	80191e8 <__mdiff+0x34>
 80192a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80192a4:	fa11 f288 	uxtah	r2, r1, r8
 80192a8:	1414      	asrs	r4, r2, #16
 80192aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80192ae:	b292      	uxth	r2, r2
 80192b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80192b4:	f84e 2b04 	str.w	r2, [lr], #4
 80192b8:	1421      	asrs	r1, r4, #16
 80192ba:	e7e0      	b.n	801927e <__mdiff+0xca>
 80192bc:	3f01      	subs	r7, #1
 80192be:	e7ea      	b.n	8019296 <__mdiff+0xe2>
 80192c0:	080738b2 	.word	0x080738b2
 80192c4:	08073a00 	.word	0x08073a00

080192c8 <__ulp>:
 80192c8:	b082      	sub	sp, #8
 80192ca:	ed8d 0b00 	vstr	d0, [sp]
 80192ce:	9b01      	ldr	r3, [sp, #4]
 80192d0:	4912      	ldr	r1, [pc, #72]	; (801931c <__ulp+0x54>)
 80192d2:	4019      	ands	r1, r3
 80192d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80192d8:	2900      	cmp	r1, #0
 80192da:	dd05      	ble.n	80192e8 <__ulp+0x20>
 80192dc:	2200      	movs	r2, #0
 80192de:	460b      	mov	r3, r1
 80192e0:	ec43 2b10 	vmov	d0, r2, r3
 80192e4:	b002      	add	sp, #8
 80192e6:	4770      	bx	lr
 80192e8:	4249      	negs	r1, r1
 80192ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80192ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80192f2:	f04f 0200 	mov.w	r2, #0
 80192f6:	f04f 0300 	mov.w	r3, #0
 80192fa:	da04      	bge.n	8019306 <__ulp+0x3e>
 80192fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019300:	fa41 f300 	asr.w	r3, r1, r0
 8019304:	e7ec      	b.n	80192e0 <__ulp+0x18>
 8019306:	f1a0 0114 	sub.w	r1, r0, #20
 801930a:	291e      	cmp	r1, #30
 801930c:	bfda      	itte	le
 801930e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019312:	fa20 f101 	lsrle.w	r1, r0, r1
 8019316:	2101      	movgt	r1, #1
 8019318:	460a      	mov	r2, r1
 801931a:	e7e1      	b.n	80192e0 <__ulp+0x18>
 801931c:	7ff00000 	.word	0x7ff00000

08019320 <__b2d>:
 8019320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019322:	6905      	ldr	r5, [r0, #16]
 8019324:	f100 0714 	add.w	r7, r0, #20
 8019328:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801932c:	1f2e      	subs	r6, r5, #4
 801932e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019332:	4620      	mov	r0, r4
 8019334:	f7ff fd48 	bl	8018dc8 <__hi0bits>
 8019338:	f1c0 0320 	rsb	r3, r0, #32
 801933c:	280a      	cmp	r0, #10
 801933e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80193bc <__b2d+0x9c>
 8019342:	600b      	str	r3, [r1, #0]
 8019344:	dc14      	bgt.n	8019370 <__b2d+0x50>
 8019346:	f1c0 0e0b 	rsb	lr, r0, #11
 801934a:	fa24 f10e 	lsr.w	r1, r4, lr
 801934e:	42b7      	cmp	r7, r6
 8019350:	ea41 030c 	orr.w	r3, r1, ip
 8019354:	bf34      	ite	cc
 8019356:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801935a:	2100      	movcs	r1, #0
 801935c:	3015      	adds	r0, #21
 801935e:	fa04 f000 	lsl.w	r0, r4, r0
 8019362:	fa21 f10e 	lsr.w	r1, r1, lr
 8019366:	ea40 0201 	orr.w	r2, r0, r1
 801936a:	ec43 2b10 	vmov	d0, r2, r3
 801936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019370:	42b7      	cmp	r7, r6
 8019372:	bf3a      	itte	cc
 8019374:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019378:	f1a5 0608 	subcc.w	r6, r5, #8
 801937c:	2100      	movcs	r1, #0
 801937e:	380b      	subs	r0, #11
 8019380:	d017      	beq.n	80193b2 <__b2d+0x92>
 8019382:	f1c0 0c20 	rsb	ip, r0, #32
 8019386:	fa04 f500 	lsl.w	r5, r4, r0
 801938a:	42be      	cmp	r6, r7
 801938c:	fa21 f40c 	lsr.w	r4, r1, ip
 8019390:	ea45 0504 	orr.w	r5, r5, r4
 8019394:	bf8c      	ite	hi
 8019396:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801939a:	2400      	movls	r4, #0
 801939c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80193a0:	fa01 f000 	lsl.w	r0, r1, r0
 80193a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80193a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80193ac:	ea40 0204 	orr.w	r2, r0, r4
 80193b0:	e7db      	b.n	801936a <__b2d+0x4a>
 80193b2:	ea44 030c 	orr.w	r3, r4, ip
 80193b6:	460a      	mov	r2, r1
 80193b8:	e7d7      	b.n	801936a <__b2d+0x4a>
 80193ba:	bf00      	nop
 80193bc:	3ff00000 	.word	0x3ff00000

080193c0 <__d2b>:
 80193c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80193c4:	4689      	mov	r9, r1
 80193c6:	2101      	movs	r1, #1
 80193c8:	ec57 6b10 	vmov	r6, r7, d0
 80193cc:	4690      	mov	r8, r2
 80193ce:	f7ff fc09 	bl	8018be4 <_Balloc>
 80193d2:	4604      	mov	r4, r0
 80193d4:	b930      	cbnz	r0, 80193e4 <__d2b+0x24>
 80193d6:	4602      	mov	r2, r0
 80193d8:	4b25      	ldr	r3, [pc, #148]	; (8019470 <__d2b+0xb0>)
 80193da:	4826      	ldr	r0, [pc, #152]	; (8019474 <__d2b+0xb4>)
 80193dc:	f240 310a 	movw	r1, #778	; 0x30a
 80193e0:	f7fb fa80 	bl	80148e4 <__assert_func>
 80193e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80193e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80193ec:	bb35      	cbnz	r5, 801943c <__d2b+0x7c>
 80193ee:	2e00      	cmp	r6, #0
 80193f0:	9301      	str	r3, [sp, #4]
 80193f2:	d028      	beq.n	8019446 <__d2b+0x86>
 80193f4:	4668      	mov	r0, sp
 80193f6:	9600      	str	r6, [sp, #0]
 80193f8:	f7ff fd06 	bl	8018e08 <__lo0bits>
 80193fc:	9900      	ldr	r1, [sp, #0]
 80193fe:	b300      	cbz	r0, 8019442 <__d2b+0x82>
 8019400:	9a01      	ldr	r2, [sp, #4]
 8019402:	f1c0 0320 	rsb	r3, r0, #32
 8019406:	fa02 f303 	lsl.w	r3, r2, r3
 801940a:	430b      	orrs	r3, r1
 801940c:	40c2      	lsrs	r2, r0
 801940e:	6163      	str	r3, [r4, #20]
 8019410:	9201      	str	r2, [sp, #4]
 8019412:	9b01      	ldr	r3, [sp, #4]
 8019414:	61a3      	str	r3, [r4, #24]
 8019416:	2b00      	cmp	r3, #0
 8019418:	bf14      	ite	ne
 801941a:	2202      	movne	r2, #2
 801941c:	2201      	moveq	r2, #1
 801941e:	6122      	str	r2, [r4, #16]
 8019420:	b1d5      	cbz	r5, 8019458 <__d2b+0x98>
 8019422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019426:	4405      	add	r5, r0
 8019428:	f8c9 5000 	str.w	r5, [r9]
 801942c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019430:	f8c8 0000 	str.w	r0, [r8]
 8019434:	4620      	mov	r0, r4
 8019436:	b003      	add	sp, #12
 8019438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801943c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019440:	e7d5      	b.n	80193ee <__d2b+0x2e>
 8019442:	6161      	str	r1, [r4, #20]
 8019444:	e7e5      	b.n	8019412 <__d2b+0x52>
 8019446:	a801      	add	r0, sp, #4
 8019448:	f7ff fcde 	bl	8018e08 <__lo0bits>
 801944c:	9b01      	ldr	r3, [sp, #4]
 801944e:	6163      	str	r3, [r4, #20]
 8019450:	2201      	movs	r2, #1
 8019452:	6122      	str	r2, [r4, #16]
 8019454:	3020      	adds	r0, #32
 8019456:	e7e3      	b.n	8019420 <__d2b+0x60>
 8019458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801945c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019460:	f8c9 0000 	str.w	r0, [r9]
 8019464:	6918      	ldr	r0, [r3, #16]
 8019466:	f7ff fcaf 	bl	8018dc8 <__hi0bits>
 801946a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801946e:	e7df      	b.n	8019430 <__d2b+0x70>
 8019470:	080738b2 	.word	0x080738b2
 8019474:	08073a00 	.word	0x08073a00

08019478 <__ratio>:
 8019478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801947c:	4688      	mov	r8, r1
 801947e:	4669      	mov	r1, sp
 8019480:	4681      	mov	r9, r0
 8019482:	f7ff ff4d 	bl	8019320 <__b2d>
 8019486:	a901      	add	r1, sp, #4
 8019488:	4640      	mov	r0, r8
 801948a:	ec55 4b10 	vmov	r4, r5, d0
 801948e:	f7ff ff47 	bl	8019320 <__b2d>
 8019492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801949a:	eba3 0c02 	sub.w	ip, r3, r2
 801949e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80194a2:	1a9b      	subs	r3, r3, r2
 80194a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80194a8:	ec51 0b10 	vmov	r0, r1, d0
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	bfd6      	itet	le
 80194b0:	460a      	movle	r2, r1
 80194b2:	462a      	movgt	r2, r5
 80194b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80194b8:	468b      	mov	fp, r1
 80194ba:	462f      	mov	r7, r5
 80194bc:	bfd4      	ite	le
 80194be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80194c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80194c6:	4620      	mov	r0, r4
 80194c8:	ee10 2a10 	vmov	r2, s0
 80194cc:	465b      	mov	r3, fp
 80194ce:	4639      	mov	r1, r7
 80194d0:	f7e7 f9dc 	bl	800088c <__aeabi_ddiv>
 80194d4:	ec41 0b10 	vmov	d0, r0, r1
 80194d8:	b003      	add	sp, #12
 80194da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194de <__copybits>:
 80194de:	3901      	subs	r1, #1
 80194e0:	b570      	push	{r4, r5, r6, lr}
 80194e2:	1149      	asrs	r1, r1, #5
 80194e4:	6914      	ldr	r4, [r2, #16]
 80194e6:	3101      	adds	r1, #1
 80194e8:	f102 0314 	add.w	r3, r2, #20
 80194ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80194f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80194f4:	1f05      	subs	r5, r0, #4
 80194f6:	42a3      	cmp	r3, r4
 80194f8:	d30c      	bcc.n	8019514 <__copybits+0x36>
 80194fa:	1aa3      	subs	r3, r4, r2
 80194fc:	3b11      	subs	r3, #17
 80194fe:	f023 0303 	bic.w	r3, r3, #3
 8019502:	3211      	adds	r2, #17
 8019504:	42a2      	cmp	r2, r4
 8019506:	bf88      	it	hi
 8019508:	2300      	movhi	r3, #0
 801950a:	4418      	add	r0, r3
 801950c:	2300      	movs	r3, #0
 801950e:	4288      	cmp	r0, r1
 8019510:	d305      	bcc.n	801951e <__copybits+0x40>
 8019512:	bd70      	pop	{r4, r5, r6, pc}
 8019514:	f853 6b04 	ldr.w	r6, [r3], #4
 8019518:	f845 6f04 	str.w	r6, [r5, #4]!
 801951c:	e7eb      	b.n	80194f6 <__copybits+0x18>
 801951e:	f840 3b04 	str.w	r3, [r0], #4
 8019522:	e7f4      	b.n	801950e <__copybits+0x30>

08019524 <__any_on>:
 8019524:	f100 0214 	add.w	r2, r0, #20
 8019528:	6900      	ldr	r0, [r0, #16]
 801952a:	114b      	asrs	r3, r1, #5
 801952c:	4298      	cmp	r0, r3
 801952e:	b510      	push	{r4, lr}
 8019530:	db11      	blt.n	8019556 <__any_on+0x32>
 8019532:	dd0a      	ble.n	801954a <__any_on+0x26>
 8019534:	f011 011f 	ands.w	r1, r1, #31
 8019538:	d007      	beq.n	801954a <__any_on+0x26>
 801953a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801953e:	fa24 f001 	lsr.w	r0, r4, r1
 8019542:	fa00 f101 	lsl.w	r1, r0, r1
 8019546:	428c      	cmp	r4, r1
 8019548:	d10b      	bne.n	8019562 <__any_on+0x3e>
 801954a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801954e:	4293      	cmp	r3, r2
 8019550:	d803      	bhi.n	801955a <__any_on+0x36>
 8019552:	2000      	movs	r0, #0
 8019554:	bd10      	pop	{r4, pc}
 8019556:	4603      	mov	r3, r0
 8019558:	e7f7      	b.n	801954a <__any_on+0x26>
 801955a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801955e:	2900      	cmp	r1, #0
 8019560:	d0f5      	beq.n	801954e <__any_on+0x2a>
 8019562:	2001      	movs	r0, #1
 8019564:	e7f6      	b.n	8019554 <__any_on+0x30>

08019566 <_calloc_r>:
 8019566:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019568:	fba1 2402 	umull	r2, r4, r1, r2
 801956c:	b94c      	cbnz	r4, 8019582 <_calloc_r+0x1c>
 801956e:	4611      	mov	r1, r2
 8019570:	9201      	str	r2, [sp, #4]
 8019572:	f7fb fd1d 	bl	8014fb0 <_malloc_r>
 8019576:	9a01      	ldr	r2, [sp, #4]
 8019578:	4605      	mov	r5, r0
 801957a:	b930      	cbnz	r0, 801958a <_calloc_r+0x24>
 801957c:	4628      	mov	r0, r5
 801957e:	b003      	add	sp, #12
 8019580:	bd30      	pop	{r4, r5, pc}
 8019582:	220c      	movs	r2, #12
 8019584:	6002      	str	r2, [r0, #0]
 8019586:	2500      	movs	r5, #0
 8019588:	e7f8      	b.n	801957c <_calloc_r+0x16>
 801958a:	4621      	mov	r1, r4
 801958c:	f7fb fa2a 	bl	80149e4 <memset>
 8019590:	e7f4      	b.n	801957c <_calloc_r+0x16>

08019592 <_realloc_r>:
 8019592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019596:	4680      	mov	r8, r0
 8019598:	4614      	mov	r4, r2
 801959a:	460e      	mov	r6, r1
 801959c:	b921      	cbnz	r1, 80195a8 <_realloc_r+0x16>
 801959e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195a2:	4611      	mov	r1, r2
 80195a4:	f7fb bd04 	b.w	8014fb0 <_malloc_r>
 80195a8:	b92a      	cbnz	r2, 80195b6 <_realloc_r+0x24>
 80195aa:	f7fb fc95 	bl	8014ed8 <_free_r>
 80195ae:	4625      	mov	r5, r4
 80195b0:	4628      	mov	r0, r5
 80195b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b6:	f000 fe3b 	bl	801a230 <_malloc_usable_size_r>
 80195ba:	4284      	cmp	r4, r0
 80195bc:	4607      	mov	r7, r0
 80195be:	d802      	bhi.n	80195c6 <_realloc_r+0x34>
 80195c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80195c4:	d812      	bhi.n	80195ec <_realloc_r+0x5a>
 80195c6:	4621      	mov	r1, r4
 80195c8:	4640      	mov	r0, r8
 80195ca:	f7fb fcf1 	bl	8014fb0 <_malloc_r>
 80195ce:	4605      	mov	r5, r0
 80195d0:	2800      	cmp	r0, #0
 80195d2:	d0ed      	beq.n	80195b0 <_realloc_r+0x1e>
 80195d4:	42bc      	cmp	r4, r7
 80195d6:	4622      	mov	r2, r4
 80195d8:	4631      	mov	r1, r6
 80195da:	bf28      	it	cs
 80195dc:	463a      	movcs	r2, r7
 80195de:	f7fb f9f3 	bl	80149c8 <memcpy>
 80195e2:	4631      	mov	r1, r6
 80195e4:	4640      	mov	r0, r8
 80195e6:	f7fb fc77 	bl	8014ed8 <_free_r>
 80195ea:	e7e1      	b.n	80195b0 <_realloc_r+0x1e>
 80195ec:	4635      	mov	r5, r6
 80195ee:	e7df      	b.n	80195b0 <_realloc_r+0x1e>

080195f0 <__ssputs_r>:
 80195f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f4:	688e      	ldr	r6, [r1, #8]
 80195f6:	429e      	cmp	r6, r3
 80195f8:	4682      	mov	sl, r0
 80195fa:	460c      	mov	r4, r1
 80195fc:	4690      	mov	r8, r2
 80195fe:	461f      	mov	r7, r3
 8019600:	d838      	bhi.n	8019674 <__ssputs_r+0x84>
 8019602:	898a      	ldrh	r2, [r1, #12]
 8019604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019608:	d032      	beq.n	8019670 <__ssputs_r+0x80>
 801960a:	6825      	ldr	r5, [r4, #0]
 801960c:	6909      	ldr	r1, [r1, #16]
 801960e:	eba5 0901 	sub.w	r9, r5, r1
 8019612:	6965      	ldr	r5, [r4, #20]
 8019614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801961c:	3301      	adds	r3, #1
 801961e:	444b      	add	r3, r9
 8019620:	106d      	asrs	r5, r5, #1
 8019622:	429d      	cmp	r5, r3
 8019624:	bf38      	it	cc
 8019626:	461d      	movcc	r5, r3
 8019628:	0553      	lsls	r3, r2, #21
 801962a:	d531      	bpl.n	8019690 <__ssputs_r+0xa0>
 801962c:	4629      	mov	r1, r5
 801962e:	f7fb fcbf 	bl	8014fb0 <_malloc_r>
 8019632:	4606      	mov	r6, r0
 8019634:	b950      	cbnz	r0, 801964c <__ssputs_r+0x5c>
 8019636:	230c      	movs	r3, #12
 8019638:	f8ca 3000 	str.w	r3, [sl]
 801963c:	89a3      	ldrh	r3, [r4, #12]
 801963e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019642:	81a3      	strh	r3, [r4, #12]
 8019644:	f04f 30ff 	mov.w	r0, #4294967295
 8019648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801964c:	6921      	ldr	r1, [r4, #16]
 801964e:	464a      	mov	r2, r9
 8019650:	f7fb f9ba 	bl	80149c8 <memcpy>
 8019654:	89a3      	ldrh	r3, [r4, #12]
 8019656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801965a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801965e:	81a3      	strh	r3, [r4, #12]
 8019660:	6126      	str	r6, [r4, #16]
 8019662:	6165      	str	r5, [r4, #20]
 8019664:	444e      	add	r6, r9
 8019666:	eba5 0509 	sub.w	r5, r5, r9
 801966a:	6026      	str	r6, [r4, #0]
 801966c:	60a5      	str	r5, [r4, #8]
 801966e:	463e      	mov	r6, r7
 8019670:	42be      	cmp	r6, r7
 8019672:	d900      	bls.n	8019676 <__ssputs_r+0x86>
 8019674:	463e      	mov	r6, r7
 8019676:	6820      	ldr	r0, [r4, #0]
 8019678:	4632      	mov	r2, r6
 801967a:	4641      	mov	r1, r8
 801967c:	f7ff fa8c 	bl	8018b98 <memmove>
 8019680:	68a3      	ldr	r3, [r4, #8]
 8019682:	1b9b      	subs	r3, r3, r6
 8019684:	60a3      	str	r3, [r4, #8]
 8019686:	6823      	ldr	r3, [r4, #0]
 8019688:	4433      	add	r3, r6
 801968a:	6023      	str	r3, [r4, #0]
 801968c:	2000      	movs	r0, #0
 801968e:	e7db      	b.n	8019648 <__ssputs_r+0x58>
 8019690:	462a      	mov	r2, r5
 8019692:	f7ff ff7e 	bl	8019592 <_realloc_r>
 8019696:	4606      	mov	r6, r0
 8019698:	2800      	cmp	r0, #0
 801969a:	d1e1      	bne.n	8019660 <__ssputs_r+0x70>
 801969c:	6921      	ldr	r1, [r4, #16]
 801969e:	4650      	mov	r0, sl
 80196a0:	f7fb fc1a 	bl	8014ed8 <_free_r>
 80196a4:	e7c7      	b.n	8019636 <__ssputs_r+0x46>
	...

080196a8 <_svfiprintf_r>:
 80196a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ac:	4698      	mov	r8, r3
 80196ae:	898b      	ldrh	r3, [r1, #12]
 80196b0:	061b      	lsls	r3, r3, #24
 80196b2:	b09d      	sub	sp, #116	; 0x74
 80196b4:	4607      	mov	r7, r0
 80196b6:	460d      	mov	r5, r1
 80196b8:	4614      	mov	r4, r2
 80196ba:	d50e      	bpl.n	80196da <_svfiprintf_r+0x32>
 80196bc:	690b      	ldr	r3, [r1, #16]
 80196be:	b963      	cbnz	r3, 80196da <_svfiprintf_r+0x32>
 80196c0:	2140      	movs	r1, #64	; 0x40
 80196c2:	f7fb fc75 	bl	8014fb0 <_malloc_r>
 80196c6:	6028      	str	r0, [r5, #0]
 80196c8:	6128      	str	r0, [r5, #16]
 80196ca:	b920      	cbnz	r0, 80196d6 <_svfiprintf_r+0x2e>
 80196cc:	230c      	movs	r3, #12
 80196ce:	603b      	str	r3, [r7, #0]
 80196d0:	f04f 30ff 	mov.w	r0, #4294967295
 80196d4:	e0d1      	b.n	801987a <_svfiprintf_r+0x1d2>
 80196d6:	2340      	movs	r3, #64	; 0x40
 80196d8:	616b      	str	r3, [r5, #20]
 80196da:	2300      	movs	r3, #0
 80196dc:	9309      	str	r3, [sp, #36]	; 0x24
 80196de:	2320      	movs	r3, #32
 80196e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80196e8:	2330      	movs	r3, #48	; 0x30
 80196ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019894 <_svfiprintf_r+0x1ec>
 80196ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196f2:	f04f 0901 	mov.w	r9, #1
 80196f6:	4623      	mov	r3, r4
 80196f8:	469a      	mov	sl, r3
 80196fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196fe:	b10a      	cbz	r2, 8019704 <_svfiprintf_r+0x5c>
 8019700:	2a25      	cmp	r2, #37	; 0x25
 8019702:	d1f9      	bne.n	80196f8 <_svfiprintf_r+0x50>
 8019704:	ebba 0b04 	subs.w	fp, sl, r4
 8019708:	d00b      	beq.n	8019722 <_svfiprintf_r+0x7a>
 801970a:	465b      	mov	r3, fp
 801970c:	4622      	mov	r2, r4
 801970e:	4629      	mov	r1, r5
 8019710:	4638      	mov	r0, r7
 8019712:	f7ff ff6d 	bl	80195f0 <__ssputs_r>
 8019716:	3001      	adds	r0, #1
 8019718:	f000 80aa 	beq.w	8019870 <_svfiprintf_r+0x1c8>
 801971c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801971e:	445a      	add	r2, fp
 8019720:	9209      	str	r2, [sp, #36]	; 0x24
 8019722:	f89a 3000 	ldrb.w	r3, [sl]
 8019726:	2b00      	cmp	r3, #0
 8019728:	f000 80a2 	beq.w	8019870 <_svfiprintf_r+0x1c8>
 801972c:	2300      	movs	r3, #0
 801972e:	f04f 32ff 	mov.w	r2, #4294967295
 8019732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019736:	f10a 0a01 	add.w	sl, sl, #1
 801973a:	9304      	str	r3, [sp, #16]
 801973c:	9307      	str	r3, [sp, #28]
 801973e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019742:	931a      	str	r3, [sp, #104]	; 0x68
 8019744:	4654      	mov	r4, sl
 8019746:	2205      	movs	r2, #5
 8019748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801974c:	4851      	ldr	r0, [pc, #324]	; (8019894 <_svfiprintf_r+0x1ec>)
 801974e:	f7e6 fd67 	bl	8000220 <memchr>
 8019752:	9a04      	ldr	r2, [sp, #16]
 8019754:	b9d8      	cbnz	r0, 801978e <_svfiprintf_r+0xe6>
 8019756:	06d0      	lsls	r0, r2, #27
 8019758:	bf44      	itt	mi
 801975a:	2320      	movmi	r3, #32
 801975c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019760:	0711      	lsls	r1, r2, #28
 8019762:	bf44      	itt	mi
 8019764:	232b      	movmi	r3, #43	; 0x2b
 8019766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801976a:	f89a 3000 	ldrb.w	r3, [sl]
 801976e:	2b2a      	cmp	r3, #42	; 0x2a
 8019770:	d015      	beq.n	801979e <_svfiprintf_r+0xf6>
 8019772:	9a07      	ldr	r2, [sp, #28]
 8019774:	4654      	mov	r4, sl
 8019776:	2000      	movs	r0, #0
 8019778:	f04f 0c0a 	mov.w	ip, #10
 801977c:	4621      	mov	r1, r4
 801977e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019782:	3b30      	subs	r3, #48	; 0x30
 8019784:	2b09      	cmp	r3, #9
 8019786:	d94e      	bls.n	8019826 <_svfiprintf_r+0x17e>
 8019788:	b1b0      	cbz	r0, 80197b8 <_svfiprintf_r+0x110>
 801978a:	9207      	str	r2, [sp, #28]
 801978c:	e014      	b.n	80197b8 <_svfiprintf_r+0x110>
 801978e:	eba0 0308 	sub.w	r3, r0, r8
 8019792:	fa09 f303 	lsl.w	r3, r9, r3
 8019796:	4313      	orrs	r3, r2
 8019798:	9304      	str	r3, [sp, #16]
 801979a:	46a2      	mov	sl, r4
 801979c:	e7d2      	b.n	8019744 <_svfiprintf_r+0x9c>
 801979e:	9b03      	ldr	r3, [sp, #12]
 80197a0:	1d19      	adds	r1, r3, #4
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	9103      	str	r1, [sp, #12]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	bfbb      	ittet	lt
 80197aa:	425b      	neglt	r3, r3
 80197ac:	f042 0202 	orrlt.w	r2, r2, #2
 80197b0:	9307      	strge	r3, [sp, #28]
 80197b2:	9307      	strlt	r3, [sp, #28]
 80197b4:	bfb8      	it	lt
 80197b6:	9204      	strlt	r2, [sp, #16]
 80197b8:	7823      	ldrb	r3, [r4, #0]
 80197ba:	2b2e      	cmp	r3, #46	; 0x2e
 80197bc:	d10c      	bne.n	80197d8 <_svfiprintf_r+0x130>
 80197be:	7863      	ldrb	r3, [r4, #1]
 80197c0:	2b2a      	cmp	r3, #42	; 0x2a
 80197c2:	d135      	bne.n	8019830 <_svfiprintf_r+0x188>
 80197c4:	9b03      	ldr	r3, [sp, #12]
 80197c6:	1d1a      	adds	r2, r3, #4
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	9203      	str	r2, [sp, #12]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	bfb8      	it	lt
 80197d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80197d4:	3402      	adds	r4, #2
 80197d6:	9305      	str	r3, [sp, #20]
 80197d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80198a4 <_svfiprintf_r+0x1fc>
 80197dc:	7821      	ldrb	r1, [r4, #0]
 80197de:	2203      	movs	r2, #3
 80197e0:	4650      	mov	r0, sl
 80197e2:	f7e6 fd1d 	bl	8000220 <memchr>
 80197e6:	b140      	cbz	r0, 80197fa <_svfiprintf_r+0x152>
 80197e8:	2340      	movs	r3, #64	; 0x40
 80197ea:	eba0 000a 	sub.w	r0, r0, sl
 80197ee:	fa03 f000 	lsl.w	r0, r3, r0
 80197f2:	9b04      	ldr	r3, [sp, #16]
 80197f4:	4303      	orrs	r3, r0
 80197f6:	3401      	adds	r4, #1
 80197f8:	9304      	str	r3, [sp, #16]
 80197fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197fe:	4826      	ldr	r0, [pc, #152]	; (8019898 <_svfiprintf_r+0x1f0>)
 8019800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019804:	2206      	movs	r2, #6
 8019806:	f7e6 fd0b 	bl	8000220 <memchr>
 801980a:	2800      	cmp	r0, #0
 801980c:	d038      	beq.n	8019880 <_svfiprintf_r+0x1d8>
 801980e:	4b23      	ldr	r3, [pc, #140]	; (801989c <_svfiprintf_r+0x1f4>)
 8019810:	bb1b      	cbnz	r3, 801985a <_svfiprintf_r+0x1b2>
 8019812:	9b03      	ldr	r3, [sp, #12]
 8019814:	3307      	adds	r3, #7
 8019816:	f023 0307 	bic.w	r3, r3, #7
 801981a:	3308      	adds	r3, #8
 801981c:	9303      	str	r3, [sp, #12]
 801981e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019820:	4433      	add	r3, r6
 8019822:	9309      	str	r3, [sp, #36]	; 0x24
 8019824:	e767      	b.n	80196f6 <_svfiprintf_r+0x4e>
 8019826:	fb0c 3202 	mla	r2, ip, r2, r3
 801982a:	460c      	mov	r4, r1
 801982c:	2001      	movs	r0, #1
 801982e:	e7a5      	b.n	801977c <_svfiprintf_r+0xd4>
 8019830:	2300      	movs	r3, #0
 8019832:	3401      	adds	r4, #1
 8019834:	9305      	str	r3, [sp, #20]
 8019836:	4619      	mov	r1, r3
 8019838:	f04f 0c0a 	mov.w	ip, #10
 801983c:	4620      	mov	r0, r4
 801983e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019842:	3a30      	subs	r2, #48	; 0x30
 8019844:	2a09      	cmp	r2, #9
 8019846:	d903      	bls.n	8019850 <_svfiprintf_r+0x1a8>
 8019848:	2b00      	cmp	r3, #0
 801984a:	d0c5      	beq.n	80197d8 <_svfiprintf_r+0x130>
 801984c:	9105      	str	r1, [sp, #20]
 801984e:	e7c3      	b.n	80197d8 <_svfiprintf_r+0x130>
 8019850:	fb0c 2101 	mla	r1, ip, r1, r2
 8019854:	4604      	mov	r4, r0
 8019856:	2301      	movs	r3, #1
 8019858:	e7f0      	b.n	801983c <_svfiprintf_r+0x194>
 801985a:	ab03      	add	r3, sp, #12
 801985c:	9300      	str	r3, [sp, #0]
 801985e:	462a      	mov	r2, r5
 8019860:	4b0f      	ldr	r3, [pc, #60]	; (80198a0 <_svfiprintf_r+0x1f8>)
 8019862:	a904      	add	r1, sp, #16
 8019864:	4638      	mov	r0, r7
 8019866:	f7fb fe11 	bl	801548c <_printf_float>
 801986a:	1c42      	adds	r2, r0, #1
 801986c:	4606      	mov	r6, r0
 801986e:	d1d6      	bne.n	801981e <_svfiprintf_r+0x176>
 8019870:	89ab      	ldrh	r3, [r5, #12]
 8019872:	065b      	lsls	r3, r3, #25
 8019874:	f53f af2c 	bmi.w	80196d0 <_svfiprintf_r+0x28>
 8019878:	9809      	ldr	r0, [sp, #36]	; 0x24
 801987a:	b01d      	add	sp, #116	; 0x74
 801987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019880:	ab03      	add	r3, sp, #12
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	462a      	mov	r2, r5
 8019886:	4b06      	ldr	r3, [pc, #24]	; (80198a0 <_svfiprintf_r+0x1f8>)
 8019888:	a904      	add	r1, sp, #16
 801988a:	4638      	mov	r0, r7
 801988c:	f7fc f8a2 	bl	80159d4 <_printf_i>
 8019890:	e7eb      	b.n	801986a <_svfiprintf_r+0x1c2>
 8019892:	bf00      	nop
 8019894:	08073618 	.word	0x08073618
 8019898:	08073622 	.word	0x08073622
 801989c:	0801548d 	.word	0x0801548d
 80198a0:	080195f1 	.word	0x080195f1
 80198a4:	0807361e 	.word	0x0807361e

080198a8 <_sungetc_r>:
 80198a8:	b538      	push	{r3, r4, r5, lr}
 80198aa:	1c4b      	adds	r3, r1, #1
 80198ac:	4614      	mov	r4, r2
 80198ae:	d103      	bne.n	80198b8 <_sungetc_r+0x10>
 80198b0:	f04f 35ff 	mov.w	r5, #4294967295
 80198b4:	4628      	mov	r0, r5
 80198b6:	bd38      	pop	{r3, r4, r5, pc}
 80198b8:	8993      	ldrh	r3, [r2, #12]
 80198ba:	f023 0320 	bic.w	r3, r3, #32
 80198be:	8193      	strh	r3, [r2, #12]
 80198c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198c2:	6852      	ldr	r2, [r2, #4]
 80198c4:	b2cd      	uxtb	r5, r1
 80198c6:	b18b      	cbz	r3, 80198ec <_sungetc_r+0x44>
 80198c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80198ca:	4293      	cmp	r3, r2
 80198cc:	dd08      	ble.n	80198e0 <_sungetc_r+0x38>
 80198ce:	6823      	ldr	r3, [r4, #0]
 80198d0:	1e5a      	subs	r2, r3, #1
 80198d2:	6022      	str	r2, [r4, #0]
 80198d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80198d8:	6863      	ldr	r3, [r4, #4]
 80198da:	3301      	adds	r3, #1
 80198dc:	6063      	str	r3, [r4, #4]
 80198de:	e7e9      	b.n	80198b4 <_sungetc_r+0xc>
 80198e0:	4621      	mov	r1, r4
 80198e2:	f000 fc2f 	bl	801a144 <__submore>
 80198e6:	2800      	cmp	r0, #0
 80198e8:	d0f1      	beq.n	80198ce <_sungetc_r+0x26>
 80198ea:	e7e1      	b.n	80198b0 <_sungetc_r+0x8>
 80198ec:	6921      	ldr	r1, [r4, #16]
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	b151      	cbz	r1, 8019908 <_sungetc_r+0x60>
 80198f2:	4299      	cmp	r1, r3
 80198f4:	d208      	bcs.n	8019908 <_sungetc_r+0x60>
 80198f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80198fa:	42a9      	cmp	r1, r5
 80198fc:	d104      	bne.n	8019908 <_sungetc_r+0x60>
 80198fe:	3b01      	subs	r3, #1
 8019900:	3201      	adds	r2, #1
 8019902:	6023      	str	r3, [r4, #0]
 8019904:	6062      	str	r2, [r4, #4]
 8019906:	e7d5      	b.n	80198b4 <_sungetc_r+0xc>
 8019908:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019910:	6363      	str	r3, [r4, #52]	; 0x34
 8019912:	2303      	movs	r3, #3
 8019914:	63a3      	str	r3, [r4, #56]	; 0x38
 8019916:	4623      	mov	r3, r4
 8019918:	f803 5f46 	strb.w	r5, [r3, #70]!
 801991c:	6023      	str	r3, [r4, #0]
 801991e:	2301      	movs	r3, #1
 8019920:	e7dc      	b.n	80198dc <_sungetc_r+0x34>

08019922 <__ssrefill_r>:
 8019922:	b510      	push	{r4, lr}
 8019924:	460c      	mov	r4, r1
 8019926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019928:	b169      	cbz	r1, 8019946 <__ssrefill_r+0x24>
 801992a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801992e:	4299      	cmp	r1, r3
 8019930:	d001      	beq.n	8019936 <__ssrefill_r+0x14>
 8019932:	f7fb fad1 	bl	8014ed8 <_free_r>
 8019936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019938:	6063      	str	r3, [r4, #4]
 801993a:	2000      	movs	r0, #0
 801993c:	6360      	str	r0, [r4, #52]	; 0x34
 801993e:	b113      	cbz	r3, 8019946 <__ssrefill_r+0x24>
 8019940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019942:	6023      	str	r3, [r4, #0]
 8019944:	bd10      	pop	{r4, pc}
 8019946:	6923      	ldr	r3, [r4, #16]
 8019948:	6023      	str	r3, [r4, #0]
 801994a:	2300      	movs	r3, #0
 801994c:	6063      	str	r3, [r4, #4]
 801994e:	89a3      	ldrh	r3, [r4, #12]
 8019950:	f043 0320 	orr.w	r3, r3, #32
 8019954:	81a3      	strh	r3, [r4, #12]
 8019956:	f04f 30ff 	mov.w	r0, #4294967295
 801995a:	e7f3      	b.n	8019944 <__ssrefill_r+0x22>

0801995c <__ssvfiscanf_r>:
 801995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019960:	460c      	mov	r4, r1
 8019962:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019966:	2100      	movs	r1, #0
 8019968:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801996c:	49a6      	ldr	r1, [pc, #664]	; (8019c08 <__ssvfiscanf_r+0x2ac>)
 801996e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019970:	f10d 0804 	add.w	r8, sp, #4
 8019974:	49a5      	ldr	r1, [pc, #660]	; (8019c0c <__ssvfiscanf_r+0x2b0>)
 8019976:	4fa6      	ldr	r7, [pc, #664]	; (8019c10 <__ssvfiscanf_r+0x2b4>)
 8019978:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8019c14 <__ssvfiscanf_r+0x2b8>
 801997c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019980:	4606      	mov	r6, r0
 8019982:	91a1      	str	r1, [sp, #644]	; 0x284
 8019984:	9300      	str	r3, [sp, #0]
 8019986:	7813      	ldrb	r3, [r2, #0]
 8019988:	2b00      	cmp	r3, #0
 801998a:	f000 815a 	beq.w	8019c42 <__ssvfiscanf_r+0x2e6>
 801998e:	5dd9      	ldrb	r1, [r3, r7]
 8019990:	f011 0108 	ands.w	r1, r1, #8
 8019994:	f102 0501 	add.w	r5, r2, #1
 8019998:	d019      	beq.n	80199ce <__ssvfiscanf_r+0x72>
 801999a:	6863      	ldr	r3, [r4, #4]
 801999c:	2b00      	cmp	r3, #0
 801999e:	dd0f      	ble.n	80199c0 <__ssvfiscanf_r+0x64>
 80199a0:	6823      	ldr	r3, [r4, #0]
 80199a2:	781a      	ldrb	r2, [r3, #0]
 80199a4:	5cba      	ldrb	r2, [r7, r2]
 80199a6:	0712      	lsls	r2, r2, #28
 80199a8:	d401      	bmi.n	80199ae <__ssvfiscanf_r+0x52>
 80199aa:	462a      	mov	r2, r5
 80199ac:	e7eb      	b.n	8019986 <__ssvfiscanf_r+0x2a>
 80199ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80199b0:	3201      	adds	r2, #1
 80199b2:	9245      	str	r2, [sp, #276]	; 0x114
 80199b4:	6862      	ldr	r2, [r4, #4]
 80199b6:	3301      	adds	r3, #1
 80199b8:	3a01      	subs	r2, #1
 80199ba:	6062      	str	r2, [r4, #4]
 80199bc:	6023      	str	r3, [r4, #0]
 80199be:	e7ec      	b.n	801999a <__ssvfiscanf_r+0x3e>
 80199c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80199c2:	4621      	mov	r1, r4
 80199c4:	4630      	mov	r0, r6
 80199c6:	4798      	blx	r3
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d0e9      	beq.n	80199a0 <__ssvfiscanf_r+0x44>
 80199cc:	e7ed      	b.n	80199aa <__ssvfiscanf_r+0x4e>
 80199ce:	2b25      	cmp	r3, #37	; 0x25
 80199d0:	d012      	beq.n	80199f8 <__ssvfiscanf_r+0x9c>
 80199d2:	469a      	mov	sl, r3
 80199d4:	6863      	ldr	r3, [r4, #4]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f340 8091 	ble.w	8019afe <__ssvfiscanf_r+0x1a2>
 80199dc:	6822      	ldr	r2, [r4, #0]
 80199de:	7813      	ldrb	r3, [r2, #0]
 80199e0:	4553      	cmp	r3, sl
 80199e2:	f040 812e 	bne.w	8019c42 <__ssvfiscanf_r+0x2e6>
 80199e6:	6863      	ldr	r3, [r4, #4]
 80199e8:	3b01      	subs	r3, #1
 80199ea:	6063      	str	r3, [r4, #4]
 80199ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80199ee:	3201      	adds	r2, #1
 80199f0:	3301      	adds	r3, #1
 80199f2:	6022      	str	r2, [r4, #0]
 80199f4:	9345      	str	r3, [sp, #276]	; 0x114
 80199f6:	e7d8      	b.n	80199aa <__ssvfiscanf_r+0x4e>
 80199f8:	9141      	str	r1, [sp, #260]	; 0x104
 80199fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80199fc:	7853      	ldrb	r3, [r2, #1]
 80199fe:	2b2a      	cmp	r3, #42	; 0x2a
 8019a00:	bf02      	ittt	eq
 8019a02:	2310      	moveq	r3, #16
 8019a04:	1c95      	addeq	r5, r2, #2
 8019a06:	9341      	streq	r3, [sp, #260]	; 0x104
 8019a08:	220a      	movs	r2, #10
 8019a0a:	46aa      	mov	sl, r5
 8019a0c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019a10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019a14:	2b09      	cmp	r3, #9
 8019a16:	d91d      	bls.n	8019a54 <__ssvfiscanf_r+0xf8>
 8019a18:	487e      	ldr	r0, [pc, #504]	; (8019c14 <__ssvfiscanf_r+0x2b8>)
 8019a1a:	2203      	movs	r2, #3
 8019a1c:	f7e6 fc00 	bl	8000220 <memchr>
 8019a20:	b140      	cbz	r0, 8019a34 <__ssvfiscanf_r+0xd8>
 8019a22:	2301      	movs	r3, #1
 8019a24:	eba0 0009 	sub.w	r0, r0, r9
 8019a28:	fa03 f000 	lsl.w	r0, r3, r0
 8019a2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019a2e:	4318      	orrs	r0, r3
 8019a30:	9041      	str	r0, [sp, #260]	; 0x104
 8019a32:	4655      	mov	r5, sl
 8019a34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019a38:	2b78      	cmp	r3, #120	; 0x78
 8019a3a:	d806      	bhi.n	8019a4a <__ssvfiscanf_r+0xee>
 8019a3c:	2b57      	cmp	r3, #87	; 0x57
 8019a3e:	d810      	bhi.n	8019a62 <__ssvfiscanf_r+0x106>
 8019a40:	2b25      	cmp	r3, #37	; 0x25
 8019a42:	d0c6      	beq.n	80199d2 <__ssvfiscanf_r+0x76>
 8019a44:	d856      	bhi.n	8019af4 <__ssvfiscanf_r+0x198>
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d064      	beq.n	8019b14 <__ssvfiscanf_r+0x1b8>
 8019a4a:	2303      	movs	r3, #3
 8019a4c:	9347      	str	r3, [sp, #284]	; 0x11c
 8019a4e:	230a      	movs	r3, #10
 8019a50:	9342      	str	r3, [sp, #264]	; 0x108
 8019a52:	e071      	b.n	8019b38 <__ssvfiscanf_r+0x1dc>
 8019a54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019a56:	fb02 1103 	mla	r1, r2, r3, r1
 8019a5a:	3930      	subs	r1, #48	; 0x30
 8019a5c:	9143      	str	r1, [sp, #268]	; 0x10c
 8019a5e:	4655      	mov	r5, sl
 8019a60:	e7d3      	b.n	8019a0a <__ssvfiscanf_r+0xae>
 8019a62:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019a66:	2a20      	cmp	r2, #32
 8019a68:	d8ef      	bhi.n	8019a4a <__ssvfiscanf_r+0xee>
 8019a6a:	a101      	add	r1, pc, #4	; (adr r1, 8019a70 <__ssvfiscanf_r+0x114>)
 8019a6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019a70:	08019b23 	.word	0x08019b23
 8019a74:	08019a4b 	.word	0x08019a4b
 8019a78:	08019a4b 	.word	0x08019a4b
 8019a7c:	08019b81 	.word	0x08019b81
 8019a80:	08019a4b 	.word	0x08019a4b
 8019a84:	08019a4b 	.word	0x08019a4b
 8019a88:	08019a4b 	.word	0x08019a4b
 8019a8c:	08019a4b 	.word	0x08019a4b
 8019a90:	08019a4b 	.word	0x08019a4b
 8019a94:	08019a4b 	.word	0x08019a4b
 8019a98:	08019a4b 	.word	0x08019a4b
 8019a9c:	08019b97 	.word	0x08019b97
 8019aa0:	08019b6d 	.word	0x08019b6d
 8019aa4:	08019afb 	.word	0x08019afb
 8019aa8:	08019afb 	.word	0x08019afb
 8019aac:	08019afb 	.word	0x08019afb
 8019ab0:	08019a4b 	.word	0x08019a4b
 8019ab4:	08019b71 	.word	0x08019b71
 8019ab8:	08019a4b 	.word	0x08019a4b
 8019abc:	08019a4b 	.word	0x08019a4b
 8019ac0:	08019a4b 	.word	0x08019a4b
 8019ac4:	08019a4b 	.word	0x08019a4b
 8019ac8:	08019ba7 	.word	0x08019ba7
 8019acc:	08019b79 	.word	0x08019b79
 8019ad0:	08019b1b 	.word	0x08019b1b
 8019ad4:	08019a4b 	.word	0x08019a4b
 8019ad8:	08019a4b 	.word	0x08019a4b
 8019adc:	08019ba3 	.word	0x08019ba3
 8019ae0:	08019a4b 	.word	0x08019a4b
 8019ae4:	08019b6d 	.word	0x08019b6d
 8019ae8:	08019a4b 	.word	0x08019a4b
 8019aec:	08019a4b 	.word	0x08019a4b
 8019af0:	08019b23 	.word	0x08019b23
 8019af4:	3b45      	subs	r3, #69	; 0x45
 8019af6:	2b02      	cmp	r3, #2
 8019af8:	d8a7      	bhi.n	8019a4a <__ssvfiscanf_r+0xee>
 8019afa:	2305      	movs	r3, #5
 8019afc:	e01b      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019afe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b00:	4621      	mov	r1, r4
 8019b02:	4630      	mov	r0, r6
 8019b04:	4798      	blx	r3
 8019b06:	2800      	cmp	r0, #0
 8019b08:	f43f af68 	beq.w	80199dc <__ssvfiscanf_r+0x80>
 8019b0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	f040 808d 	bne.w	8019c2e <__ssvfiscanf_r+0x2d2>
 8019b14:	f04f 30ff 	mov.w	r0, #4294967295
 8019b18:	e08f      	b.n	8019c3a <__ssvfiscanf_r+0x2de>
 8019b1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019b1c:	f042 0220 	orr.w	r2, r2, #32
 8019b20:	9241      	str	r2, [sp, #260]	; 0x104
 8019b22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b28:	9241      	str	r2, [sp, #260]	; 0x104
 8019b2a:	2210      	movs	r2, #16
 8019b2c:	2b6f      	cmp	r3, #111	; 0x6f
 8019b2e:	9242      	str	r2, [sp, #264]	; 0x108
 8019b30:	bf34      	ite	cc
 8019b32:	2303      	movcc	r3, #3
 8019b34:	2304      	movcs	r3, #4
 8019b36:	9347      	str	r3, [sp, #284]	; 0x11c
 8019b38:	6863      	ldr	r3, [r4, #4]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	dd42      	ble.n	8019bc4 <__ssvfiscanf_r+0x268>
 8019b3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019b40:	0659      	lsls	r1, r3, #25
 8019b42:	d404      	bmi.n	8019b4e <__ssvfiscanf_r+0x1f2>
 8019b44:	6823      	ldr	r3, [r4, #0]
 8019b46:	781a      	ldrb	r2, [r3, #0]
 8019b48:	5cba      	ldrb	r2, [r7, r2]
 8019b4a:	0712      	lsls	r2, r2, #28
 8019b4c:	d441      	bmi.n	8019bd2 <__ssvfiscanf_r+0x276>
 8019b4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019b50:	2b02      	cmp	r3, #2
 8019b52:	dc50      	bgt.n	8019bf6 <__ssvfiscanf_r+0x29a>
 8019b54:	466b      	mov	r3, sp
 8019b56:	4622      	mov	r2, r4
 8019b58:	a941      	add	r1, sp, #260	; 0x104
 8019b5a:	4630      	mov	r0, r6
 8019b5c:	f000 f876 	bl	8019c4c <_scanf_chars>
 8019b60:	2801      	cmp	r0, #1
 8019b62:	d06e      	beq.n	8019c42 <__ssvfiscanf_r+0x2e6>
 8019b64:	2802      	cmp	r0, #2
 8019b66:	f47f af20 	bne.w	80199aa <__ssvfiscanf_r+0x4e>
 8019b6a:	e7cf      	b.n	8019b0c <__ssvfiscanf_r+0x1b0>
 8019b6c:	220a      	movs	r2, #10
 8019b6e:	e7dd      	b.n	8019b2c <__ssvfiscanf_r+0x1d0>
 8019b70:	2300      	movs	r3, #0
 8019b72:	9342      	str	r3, [sp, #264]	; 0x108
 8019b74:	2303      	movs	r3, #3
 8019b76:	e7de      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019b78:	2308      	movs	r3, #8
 8019b7a:	9342      	str	r3, [sp, #264]	; 0x108
 8019b7c:	2304      	movs	r3, #4
 8019b7e:	e7da      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019b80:	4629      	mov	r1, r5
 8019b82:	4640      	mov	r0, r8
 8019b84:	f000 f9d0 	bl	8019f28 <__sccl>
 8019b88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b8e:	9341      	str	r3, [sp, #260]	; 0x104
 8019b90:	4605      	mov	r5, r0
 8019b92:	2301      	movs	r3, #1
 8019b94:	e7cf      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019b96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b9c:	9341      	str	r3, [sp, #260]	; 0x104
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	e7c9      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019ba2:	2302      	movs	r3, #2
 8019ba4:	e7c7      	b.n	8019b36 <__ssvfiscanf_r+0x1da>
 8019ba6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019ba8:	06c3      	lsls	r3, r0, #27
 8019baa:	f53f aefe 	bmi.w	80199aa <__ssvfiscanf_r+0x4e>
 8019bae:	9b00      	ldr	r3, [sp, #0]
 8019bb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019bb2:	1d19      	adds	r1, r3, #4
 8019bb4:	9100      	str	r1, [sp, #0]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	f010 0f01 	tst.w	r0, #1
 8019bbc:	bf14      	ite	ne
 8019bbe:	801a      	strhne	r2, [r3, #0]
 8019bc0:	601a      	streq	r2, [r3, #0]
 8019bc2:	e6f2      	b.n	80199aa <__ssvfiscanf_r+0x4e>
 8019bc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019bc6:	4621      	mov	r1, r4
 8019bc8:	4630      	mov	r0, r6
 8019bca:	4798      	blx	r3
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d0b6      	beq.n	8019b3e <__ssvfiscanf_r+0x1e2>
 8019bd0:	e79c      	b.n	8019b0c <__ssvfiscanf_r+0x1b0>
 8019bd2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019bd4:	3201      	adds	r2, #1
 8019bd6:	9245      	str	r2, [sp, #276]	; 0x114
 8019bd8:	6862      	ldr	r2, [r4, #4]
 8019bda:	3a01      	subs	r2, #1
 8019bdc:	2a00      	cmp	r2, #0
 8019bde:	6062      	str	r2, [r4, #4]
 8019be0:	dd02      	ble.n	8019be8 <__ssvfiscanf_r+0x28c>
 8019be2:	3301      	adds	r3, #1
 8019be4:	6023      	str	r3, [r4, #0]
 8019be6:	e7ad      	b.n	8019b44 <__ssvfiscanf_r+0x1e8>
 8019be8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019bea:	4621      	mov	r1, r4
 8019bec:	4630      	mov	r0, r6
 8019bee:	4798      	blx	r3
 8019bf0:	2800      	cmp	r0, #0
 8019bf2:	d0a7      	beq.n	8019b44 <__ssvfiscanf_r+0x1e8>
 8019bf4:	e78a      	b.n	8019b0c <__ssvfiscanf_r+0x1b0>
 8019bf6:	2b04      	cmp	r3, #4
 8019bf8:	dc0e      	bgt.n	8019c18 <__ssvfiscanf_r+0x2bc>
 8019bfa:	466b      	mov	r3, sp
 8019bfc:	4622      	mov	r2, r4
 8019bfe:	a941      	add	r1, sp, #260	; 0x104
 8019c00:	4630      	mov	r0, r6
 8019c02:	f000 f87d 	bl	8019d00 <_scanf_i>
 8019c06:	e7ab      	b.n	8019b60 <__ssvfiscanf_r+0x204>
 8019c08:	080198a9 	.word	0x080198a9
 8019c0c:	08019923 	.word	0x08019923
 8019c10:	0807374a 	.word	0x0807374a
 8019c14:	0807361e 	.word	0x0807361e
 8019c18:	4b0b      	ldr	r3, [pc, #44]	; (8019c48 <__ssvfiscanf_r+0x2ec>)
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	f43f aec5 	beq.w	80199aa <__ssvfiscanf_r+0x4e>
 8019c20:	466b      	mov	r3, sp
 8019c22:	4622      	mov	r2, r4
 8019c24:	a941      	add	r1, sp, #260	; 0x104
 8019c26:	4630      	mov	r0, r6
 8019c28:	f3af 8000 	nop.w
 8019c2c:	e798      	b.n	8019b60 <__ssvfiscanf_r+0x204>
 8019c2e:	89a3      	ldrh	r3, [r4, #12]
 8019c30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019c34:	bf18      	it	ne
 8019c36:	f04f 30ff 	movne.w	r0, #4294967295
 8019c3a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8019c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c42:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019c44:	e7f9      	b.n	8019c3a <__ssvfiscanf_r+0x2de>
 8019c46:	bf00      	nop
 8019c48:	00000000 	.word	0x00000000

08019c4c <_scanf_chars>:
 8019c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c50:	4615      	mov	r5, r2
 8019c52:	688a      	ldr	r2, [r1, #8]
 8019c54:	4680      	mov	r8, r0
 8019c56:	460c      	mov	r4, r1
 8019c58:	b932      	cbnz	r2, 8019c68 <_scanf_chars+0x1c>
 8019c5a:	698a      	ldr	r2, [r1, #24]
 8019c5c:	2a00      	cmp	r2, #0
 8019c5e:	bf0c      	ite	eq
 8019c60:	2201      	moveq	r2, #1
 8019c62:	f04f 32ff 	movne.w	r2, #4294967295
 8019c66:	608a      	str	r2, [r1, #8]
 8019c68:	6822      	ldr	r2, [r4, #0]
 8019c6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8019cfc <_scanf_chars+0xb0>
 8019c6e:	06d1      	lsls	r1, r2, #27
 8019c70:	bf5f      	itttt	pl
 8019c72:	681a      	ldrpl	r2, [r3, #0]
 8019c74:	1d11      	addpl	r1, r2, #4
 8019c76:	6019      	strpl	r1, [r3, #0]
 8019c78:	6816      	ldrpl	r6, [r2, #0]
 8019c7a:	2700      	movs	r7, #0
 8019c7c:	69a0      	ldr	r0, [r4, #24]
 8019c7e:	b188      	cbz	r0, 8019ca4 <_scanf_chars+0x58>
 8019c80:	2801      	cmp	r0, #1
 8019c82:	d107      	bne.n	8019c94 <_scanf_chars+0x48>
 8019c84:	682a      	ldr	r2, [r5, #0]
 8019c86:	7811      	ldrb	r1, [r2, #0]
 8019c88:	6962      	ldr	r2, [r4, #20]
 8019c8a:	5c52      	ldrb	r2, [r2, r1]
 8019c8c:	b952      	cbnz	r2, 8019ca4 <_scanf_chars+0x58>
 8019c8e:	2f00      	cmp	r7, #0
 8019c90:	d031      	beq.n	8019cf6 <_scanf_chars+0xaa>
 8019c92:	e022      	b.n	8019cda <_scanf_chars+0x8e>
 8019c94:	2802      	cmp	r0, #2
 8019c96:	d120      	bne.n	8019cda <_scanf_chars+0x8e>
 8019c98:	682b      	ldr	r3, [r5, #0]
 8019c9a:	781b      	ldrb	r3, [r3, #0]
 8019c9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019ca0:	071b      	lsls	r3, r3, #28
 8019ca2:	d41a      	bmi.n	8019cda <_scanf_chars+0x8e>
 8019ca4:	6823      	ldr	r3, [r4, #0]
 8019ca6:	06da      	lsls	r2, r3, #27
 8019ca8:	bf5e      	ittt	pl
 8019caa:	682b      	ldrpl	r3, [r5, #0]
 8019cac:	781b      	ldrbpl	r3, [r3, #0]
 8019cae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019cb2:	682a      	ldr	r2, [r5, #0]
 8019cb4:	686b      	ldr	r3, [r5, #4]
 8019cb6:	3201      	adds	r2, #1
 8019cb8:	602a      	str	r2, [r5, #0]
 8019cba:	68a2      	ldr	r2, [r4, #8]
 8019cbc:	3b01      	subs	r3, #1
 8019cbe:	3a01      	subs	r2, #1
 8019cc0:	606b      	str	r3, [r5, #4]
 8019cc2:	3701      	adds	r7, #1
 8019cc4:	60a2      	str	r2, [r4, #8]
 8019cc6:	b142      	cbz	r2, 8019cda <_scanf_chars+0x8e>
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	dcd7      	bgt.n	8019c7c <_scanf_chars+0x30>
 8019ccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019cd0:	4629      	mov	r1, r5
 8019cd2:	4640      	mov	r0, r8
 8019cd4:	4798      	blx	r3
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	d0d0      	beq.n	8019c7c <_scanf_chars+0x30>
 8019cda:	6823      	ldr	r3, [r4, #0]
 8019cdc:	f013 0310 	ands.w	r3, r3, #16
 8019ce0:	d105      	bne.n	8019cee <_scanf_chars+0xa2>
 8019ce2:	68e2      	ldr	r2, [r4, #12]
 8019ce4:	3201      	adds	r2, #1
 8019ce6:	60e2      	str	r2, [r4, #12]
 8019ce8:	69a2      	ldr	r2, [r4, #24]
 8019cea:	b102      	cbz	r2, 8019cee <_scanf_chars+0xa2>
 8019cec:	7033      	strb	r3, [r6, #0]
 8019cee:	6923      	ldr	r3, [r4, #16]
 8019cf0:	443b      	add	r3, r7
 8019cf2:	6123      	str	r3, [r4, #16]
 8019cf4:	2000      	movs	r0, #0
 8019cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cfa:	bf00      	nop
 8019cfc:	0807374a 	.word	0x0807374a

08019d00 <_scanf_i>:
 8019d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d04:	4698      	mov	r8, r3
 8019d06:	4b76      	ldr	r3, [pc, #472]	; (8019ee0 <_scanf_i+0x1e0>)
 8019d08:	460c      	mov	r4, r1
 8019d0a:	4682      	mov	sl, r0
 8019d0c:	4616      	mov	r6, r2
 8019d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d12:	b087      	sub	sp, #28
 8019d14:	ab03      	add	r3, sp, #12
 8019d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019d1a:	4b72      	ldr	r3, [pc, #456]	; (8019ee4 <_scanf_i+0x1e4>)
 8019d1c:	69a1      	ldr	r1, [r4, #24]
 8019d1e:	4a72      	ldr	r2, [pc, #456]	; (8019ee8 <_scanf_i+0x1e8>)
 8019d20:	2903      	cmp	r1, #3
 8019d22:	bf18      	it	ne
 8019d24:	461a      	movne	r2, r3
 8019d26:	68a3      	ldr	r3, [r4, #8]
 8019d28:	9201      	str	r2, [sp, #4]
 8019d2a:	1e5a      	subs	r2, r3, #1
 8019d2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019d30:	bf88      	it	hi
 8019d32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019d36:	4627      	mov	r7, r4
 8019d38:	bf82      	ittt	hi
 8019d3a:	eb03 0905 	addhi.w	r9, r3, r5
 8019d3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019d42:	60a3      	strhi	r3, [r4, #8]
 8019d44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019d48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019d4c:	bf98      	it	ls
 8019d4e:	f04f 0900 	movls.w	r9, #0
 8019d52:	6023      	str	r3, [r4, #0]
 8019d54:	463d      	mov	r5, r7
 8019d56:	f04f 0b00 	mov.w	fp, #0
 8019d5a:	6831      	ldr	r1, [r6, #0]
 8019d5c:	ab03      	add	r3, sp, #12
 8019d5e:	7809      	ldrb	r1, [r1, #0]
 8019d60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019d64:	2202      	movs	r2, #2
 8019d66:	f7e6 fa5b 	bl	8000220 <memchr>
 8019d6a:	b328      	cbz	r0, 8019db8 <_scanf_i+0xb8>
 8019d6c:	f1bb 0f01 	cmp.w	fp, #1
 8019d70:	d159      	bne.n	8019e26 <_scanf_i+0x126>
 8019d72:	6862      	ldr	r2, [r4, #4]
 8019d74:	b92a      	cbnz	r2, 8019d82 <_scanf_i+0x82>
 8019d76:	6822      	ldr	r2, [r4, #0]
 8019d78:	2308      	movs	r3, #8
 8019d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d7e:	6063      	str	r3, [r4, #4]
 8019d80:	6022      	str	r2, [r4, #0]
 8019d82:	6822      	ldr	r2, [r4, #0]
 8019d84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019d88:	6022      	str	r2, [r4, #0]
 8019d8a:	68a2      	ldr	r2, [r4, #8]
 8019d8c:	1e51      	subs	r1, r2, #1
 8019d8e:	60a1      	str	r1, [r4, #8]
 8019d90:	b192      	cbz	r2, 8019db8 <_scanf_i+0xb8>
 8019d92:	6832      	ldr	r2, [r6, #0]
 8019d94:	1c51      	adds	r1, r2, #1
 8019d96:	6031      	str	r1, [r6, #0]
 8019d98:	7812      	ldrb	r2, [r2, #0]
 8019d9a:	f805 2b01 	strb.w	r2, [r5], #1
 8019d9e:	6872      	ldr	r2, [r6, #4]
 8019da0:	3a01      	subs	r2, #1
 8019da2:	2a00      	cmp	r2, #0
 8019da4:	6072      	str	r2, [r6, #4]
 8019da6:	dc07      	bgt.n	8019db8 <_scanf_i+0xb8>
 8019da8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019dac:	4631      	mov	r1, r6
 8019dae:	4650      	mov	r0, sl
 8019db0:	4790      	blx	r2
 8019db2:	2800      	cmp	r0, #0
 8019db4:	f040 8085 	bne.w	8019ec2 <_scanf_i+0x1c2>
 8019db8:	f10b 0b01 	add.w	fp, fp, #1
 8019dbc:	f1bb 0f03 	cmp.w	fp, #3
 8019dc0:	d1cb      	bne.n	8019d5a <_scanf_i+0x5a>
 8019dc2:	6863      	ldr	r3, [r4, #4]
 8019dc4:	b90b      	cbnz	r3, 8019dca <_scanf_i+0xca>
 8019dc6:	230a      	movs	r3, #10
 8019dc8:	6063      	str	r3, [r4, #4]
 8019dca:	6863      	ldr	r3, [r4, #4]
 8019dcc:	4947      	ldr	r1, [pc, #284]	; (8019eec <_scanf_i+0x1ec>)
 8019dce:	6960      	ldr	r0, [r4, #20]
 8019dd0:	1ac9      	subs	r1, r1, r3
 8019dd2:	f000 f8a9 	bl	8019f28 <__sccl>
 8019dd6:	f04f 0b00 	mov.w	fp, #0
 8019dda:	68a3      	ldr	r3, [r4, #8]
 8019ddc:	6822      	ldr	r2, [r4, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d03d      	beq.n	8019e5e <_scanf_i+0x15e>
 8019de2:	6831      	ldr	r1, [r6, #0]
 8019de4:	6960      	ldr	r0, [r4, #20]
 8019de6:	f891 c000 	ldrb.w	ip, [r1]
 8019dea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019dee:	2800      	cmp	r0, #0
 8019df0:	d035      	beq.n	8019e5e <_scanf_i+0x15e>
 8019df2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019df6:	d124      	bne.n	8019e42 <_scanf_i+0x142>
 8019df8:	0510      	lsls	r0, r2, #20
 8019dfa:	d522      	bpl.n	8019e42 <_scanf_i+0x142>
 8019dfc:	f10b 0b01 	add.w	fp, fp, #1
 8019e00:	f1b9 0f00 	cmp.w	r9, #0
 8019e04:	d003      	beq.n	8019e0e <_scanf_i+0x10e>
 8019e06:	3301      	adds	r3, #1
 8019e08:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e0c:	60a3      	str	r3, [r4, #8]
 8019e0e:	6873      	ldr	r3, [r6, #4]
 8019e10:	3b01      	subs	r3, #1
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	6073      	str	r3, [r6, #4]
 8019e16:	dd1b      	ble.n	8019e50 <_scanf_i+0x150>
 8019e18:	6833      	ldr	r3, [r6, #0]
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	6033      	str	r3, [r6, #0]
 8019e1e:	68a3      	ldr	r3, [r4, #8]
 8019e20:	3b01      	subs	r3, #1
 8019e22:	60a3      	str	r3, [r4, #8]
 8019e24:	e7d9      	b.n	8019dda <_scanf_i+0xda>
 8019e26:	f1bb 0f02 	cmp.w	fp, #2
 8019e2a:	d1ae      	bne.n	8019d8a <_scanf_i+0x8a>
 8019e2c:	6822      	ldr	r2, [r4, #0]
 8019e2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019e32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019e36:	d1bf      	bne.n	8019db8 <_scanf_i+0xb8>
 8019e38:	2310      	movs	r3, #16
 8019e3a:	6063      	str	r3, [r4, #4]
 8019e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e40:	e7a2      	b.n	8019d88 <_scanf_i+0x88>
 8019e42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019e46:	6022      	str	r2, [r4, #0]
 8019e48:	780b      	ldrb	r3, [r1, #0]
 8019e4a:	f805 3b01 	strb.w	r3, [r5], #1
 8019e4e:	e7de      	b.n	8019e0e <_scanf_i+0x10e>
 8019e50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e54:	4631      	mov	r1, r6
 8019e56:	4650      	mov	r0, sl
 8019e58:	4798      	blx	r3
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	d0df      	beq.n	8019e1e <_scanf_i+0x11e>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	05db      	lsls	r3, r3, #23
 8019e62:	d50d      	bpl.n	8019e80 <_scanf_i+0x180>
 8019e64:	42bd      	cmp	r5, r7
 8019e66:	d909      	bls.n	8019e7c <_scanf_i+0x17c>
 8019e68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e70:	4632      	mov	r2, r6
 8019e72:	4650      	mov	r0, sl
 8019e74:	4798      	blx	r3
 8019e76:	f105 39ff 	add.w	r9, r5, #4294967295
 8019e7a:	464d      	mov	r5, r9
 8019e7c:	42bd      	cmp	r5, r7
 8019e7e:	d02d      	beq.n	8019edc <_scanf_i+0x1dc>
 8019e80:	6822      	ldr	r2, [r4, #0]
 8019e82:	f012 0210 	ands.w	r2, r2, #16
 8019e86:	d113      	bne.n	8019eb0 <_scanf_i+0x1b0>
 8019e88:	702a      	strb	r2, [r5, #0]
 8019e8a:	6863      	ldr	r3, [r4, #4]
 8019e8c:	9e01      	ldr	r6, [sp, #4]
 8019e8e:	4639      	mov	r1, r7
 8019e90:	4650      	mov	r0, sl
 8019e92:	47b0      	blx	r6
 8019e94:	6821      	ldr	r1, [r4, #0]
 8019e96:	f8d8 3000 	ldr.w	r3, [r8]
 8019e9a:	f011 0f20 	tst.w	r1, #32
 8019e9e:	d013      	beq.n	8019ec8 <_scanf_i+0x1c8>
 8019ea0:	1d1a      	adds	r2, r3, #4
 8019ea2:	f8c8 2000 	str.w	r2, [r8]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	6018      	str	r0, [r3, #0]
 8019eaa:	68e3      	ldr	r3, [r4, #12]
 8019eac:	3301      	adds	r3, #1
 8019eae:	60e3      	str	r3, [r4, #12]
 8019eb0:	1bed      	subs	r5, r5, r7
 8019eb2:	44ab      	add	fp, r5
 8019eb4:	6925      	ldr	r5, [r4, #16]
 8019eb6:	445d      	add	r5, fp
 8019eb8:	6125      	str	r5, [r4, #16]
 8019eba:	2000      	movs	r0, #0
 8019ebc:	b007      	add	sp, #28
 8019ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec2:	f04f 0b00 	mov.w	fp, #0
 8019ec6:	e7ca      	b.n	8019e5e <_scanf_i+0x15e>
 8019ec8:	1d1a      	adds	r2, r3, #4
 8019eca:	f8c8 2000 	str.w	r2, [r8]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	f011 0f01 	tst.w	r1, #1
 8019ed4:	bf14      	ite	ne
 8019ed6:	8018      	strhne	r0, [r3, #0]
 8019ed8:	6018      	streq	r0, [r3, #0]
 8019eda:	e7e6      	b.n	8019eaa <_scanf_i+0x1aa>
 8019edc:	2001      	movs	r0, #1
 8019ede:	e7ed      	b.n	8019ebc <_scanf_i+0x1bc>
 8019ee0:	0801e05c 	.word	0x0801e05c
 8019ee4:	0801a12d 	.word	0x0801a12d
 8019ee8:	08016c11 	.word	0x08016c11
 8019eec:	08073b75 	.word	0x08073b75

08019ef0 <_read_r>:
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	4d07      	ldr	r5, [pc, #28]	; (8019f10 <_read_r+0x20>)
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	4608      	mov	r0, r1
 8019ef8:	4611      	mov	r1, r2
 8019efa:	2200      	movs	r2, #0
 8019efc:	602a      	str	r2, [r5, #0]
 8019efe:	461a      	mov	r2, r3
 8019f00:	f7ea fe04 	bl	8004b0c <_read>
 8019f04:	1c43      	adds	r3, r0, #1
 8019f06:	d102      	bne.n	8019f0e <_read_r+0x1e>
 8019f08:	682b      	ldr	r3, [r5, #0]
 8019f0a:	b103      	cbz	r3, 8019f0e <_read_r+0x1e>
 8019f0c:	6023      	str	r3, [r4, #0]
 8019f0e:	bd38      	pop	{r3, r4, r5, pc}
 8019f10:	20005e78 	.word	0x20005e78
 8019f14:	00000000 	.word	0x00000000

08019f18 <nan>:
 8019f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019f20 <nan+0x8>
 8019f1c:	4770      	bx	lr
 8019f1e:	bf00      	nop
 8019f20:	00000000 	.word	0x00000000
 8019f24:	7ff80000 	.word	0x7ff80000

08019f28 <__sccl>:
 8019f28:	b570      	push	{r4, r5, r6, lr}
 8019f2a:	780b      	ldrb	r3, [r1, #0]
 8019f2c:	4604      	mov	r4, r0
 8019f2e:	2b5e      	cmp	r3, #94	; 0x5e
 8019f30:	bf0b      	itete	eq
 8019f32:	784b      	ldrbeq	r3, [r1, #1]
 8019f34:	1c48      	addne	r0, r1, #1
 8019f36:	1c88      	addeq	r0, r1, #2
 8019f38:	2200      	movne	r2, #0
 8019f3a:	bf08      	it	eq
 8019f3c:	2201      	moveq	r2, #1
 8019f3e:	1e61      	subs	r1, r4, #1
 8019f40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019f44:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019f48:	42a9      	cmp	r1, r5
 8019f4a:	d1fb      	bne.n	8019f44 <__sccl+0x1c>
 8019f4c:	b90b      	cbnz	r3, 8019f52 <__sccl+0x2a>
 8019f4e:	3801      	subs	r0, #1
 8019f50:	bd70      	pop	{r4, r5, r6, pc}
 8019f52:	f082 0201 	eor.w	r2, r2, #1
 8019f56:	54e2      	strb	r2, [r4, r3]
 8019f58:	4605      	mov	r5, r0
 8019f5a:	4628      	mov	r0, r5
 8019f5c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019f60:	292d      	cmp	r1, #45	; 0x2d
 8019f62:	d006      	beq.n	8019f72 <__sccl+0x4a>
 8019f64:	295d      	cmp	r1, #93	; 0x5d
 8019f66:	d0f3      	beq.n	8019f50 <__sccl+0x28>
 8019f68:	b909      	cbnz	r1, 8019f6e <__sccl+0x46>
 8019f6a:	4628      	mov	r0, r5
 8019f6c:	e7f0      	b.n	8019f50 <__sccl+0x28>
 8019f6e:	460b      	mov	r3, r1
 8019f70:	e7f1      	b.n	8019f56 <__sccl+0x2e>
 8019f72:	786e      	ldrb	r6, [r5, #1]
 8019f74:	2e5d      	cmp	r6, #93	; 0x5d
 8019f76:	d0fa      	beq.n	8019f6e <__sccl+0x46>
 8019f78:	42b3      	cmp	r3, r6
 8019f7a:	dcf8      	bgt.n	8019f6e <__sccl+0x46>
 8019f7c:	3502      	adds	r5, #2
 8019f7e:	4619      	mov	r1, r3
 8019f80:	3101      	adds	r1, #1
 8019f82:	428e      	cmp	r6, r1
 8019f84:	5462      	strb	r2, [r4, r1]
 8019f86:	dcfb      	bgt.n	8019f80 <__sccl+0x58>
 8019f88:	1af1      	subs	r1, r6, r3
 8019f8a:	3901      	subs	r1, #1
 8019f8c:	1c58      	adds	r0, r3, #1
 8019f8e:	42b3      	cmp	r3, r6
 8019f90:	bfa8      	it	ge
 8019f92:	2100      	movge	r1, #0
 8019f94:	1843      	adds	r3, r0, r1
 8019f96:	e7e0      	b.n	8019f5a <__sccl+0x32>

08019f98 <_raise_r>:
 8019f98:	291f      	cmp	r1, #31
 8019f9a:	b538      	push	{r3, r4, r5, lr}
 8019f9c:	4604      	mov	r4, r0
 8019f9e:	460d      	mov	r5, r1
 8019fa0:	d904      	bls.n	8019fac <_raise_r+0x14>
 8019fa2:	2316      	movs	r3, #22
 8019fa4:	6003      	str	r3, [r0, #0]
 8019fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8019faa:	bd38      	pop	{r3, r4, r5, pc}
 8019fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019fae:	b112      	cbz	r2, 8019fb6 <_raise_r+0x1e>
 8019fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019fb4:	b94b      	cbnz	r3, 8019fca <_raise_r+0x32>
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	f000 f830 	bl	801a01c <_getpid_r>
 8019fbc:	462a      	mov	r2, r5
 8019fbe:	4601      	mov	r1, r0
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019fc6:	f000 b817 	b.w	8019ff8 <_kill_r>
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d00a      	beq.n	8019fe4 <_raise_r+0x4c>
 8019fce:	1c59      	adds	r1, r3, #1
 8019fd0:	d103      	bne.n	8019fda <_raise_r+0x42>
 8019fd2:	2316      	movs	r3, #22
 8019fd4:	6003      	str	r3, [r0, #0]
 8019fd6:	2001      	movs	r0, #1
 8019fd8:	e7e7      	b.n	8019faa <_raise_r+0x12>
 8019fda:	2400      	movs	r4, #0
 8019fdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019fe0:	4628      	mov	r0, r5
 8019fe2:	4798      	blx	r3
 8019fe4:	2000      	movs	r0, #0
 8019fe6:	e7e0      	b.n	8019faa <_raise_r+0x12>

08019fe8 <raise>:
 8019fe8:	4b02      	ldr	r3, [pc, #8]	; (8019ff4 <raise+0xc>)
 8019fea:	4601      	mov	r1, r0
 8019fec:	6818      	ldr	r0, [r3, #0]
 8019fee:	f7ff bfd3 	b.w	8019f98 <_raise_r>
 8019ff2:	bf00      	nop
 8019ff4:	20000224 	.word	0x20000224

08019ff8 <_kill_r>:
 8019ff8:	b538      	push	{r3, r4, r5, lr}
 8019ffa:	4d07      	ldr	r5, [pc, #28]	; (801a018 <_kill_r+0x20>)
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	4604      	mov	r4, r0
 801a000:	4608      	mov	r0, r1
 801a002:	4611      	mov	r1, r2
 801a004:	602b      	str	r3, [r5, #0]
 801a006:	f7ea fd67 	bl	8004ad8 <_kill>
 801a00a:	1c43      	adds	r3, r0, #1
 801a00c:	d102      	bne.n	801a014 <_kill_r+0x1c>
 801a00e:	682b      	ldr	r3, [r5, #0]
 801a010:	b103      	cbz	r3, 801a014 <_kill_r+0x1c>
 801a012:	6023      	str	r3, [r4, #0]
 801a014:	bd38      	pop	{r3, r4, r5, pc}
 801a016:	bf00      	nop
 801a018:	20005e78 	.word	0x20005e78

0801a01c <_getpid_r>:
 801a01c:	f7ea bd54 	b.w	8004ac8 <_getpid>

0801a020 <strncmp>:
 801a020:	b510      	push	{r4, lr}
 801a022:	b17a      	cbz	r2, 801a044 <strncmp+0x24>
 801a024:	4603      	mov	r3, r0
 801a026:	3901      	subs	r1, #1
 801a028:	1884      	adds	r4, r0, r2
 801a02a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a02e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a032:	4290      	cmp	r0, r2
 801a034:	d101      	bne.n	801a03a <strncmp+0x1a>
 801a036:	42a3      	cmp	r3, r4
 801a038:	d101      	bne.n	801a03e <strncmp+0x1e>
 801a03a:	1a80      	subs	r0, r0, r2
 801a03c:	bd10      	pop	{r4, pc}
 801a03e:	2800      	cmp	r0, #0
 801a040:	d1f3      	bne.n	801a02a <strncmp+0xa>
 801a042:	e7fa      	b.n	801a03a <strncmp+0x1a>
 801a044:	4610      	mov	r0, r2
 801a046:	e7f9      	b.n	801a03c <strncmp+0x1c>

0801a048 <_strtoul_l.constprop.0>:
 801a048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a04c:	4f36      	ldr	r7, [pc, #216]	; (801a128 <_strtoul_l.constprop.0+0xe0>)
 801a04e:	4686      	mov	lr, r0
 801a050:	460d      	mov	r5, r1
 801a052:	4628      	mov	r0, r5
 801a054:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a058:	5de6      	ldrb	r6, [r4, r7]
 801a05a:	f016 0608 	ands.w	r6, r6, #8
 801a05e:	d1f8      	bne.n	801a052 <_strtoul_l.constprop.0+0xa>
 801a060:	2c2d      	cmp	r4, #45	; 0x2d
 801a062:	d12f      	bne.n	801a0c4 <_strtoul_l.constprop.0+0x7c>
 801a064:	782c      	ldrb	r4, [r5, #0]
 801a066:	2601      	movs	r6, #1
 801a068:	1c85      	adds	r5, r0, #2
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d057      	beq.n	801a11e <_strtoul_l.constprop.0+0xd6>
 801a06e:	2b10      	cmp	r3, #16
 801a070:	d109      	bne.n	801a086 <_strtoul_l.constprop.0+0x3e>
 801a072:	2c30      	cmp	r4, #48	; 0x30
 801a074:	d107      	bne.n	801a086 <_strtoul_l.constprop.0+0x3e>
 801a076:	7828      	ldrb	r0, [r5, #0]
 801a078:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a07c:	2858      	cmp	r0, #88	; 0x58
 801a07e:	d149      	bne.n	801a114 <_strtoul_l.constprop.0+0xcc>
 801a080:	786c      	ldrb	r4, [r5, #1]
 801a082:	2310      	movs	r3, #16
 801a084:	3502      	adds	r5, #2
 801a086:	f04f 38ff 	mov.w	r8, #4294967295
 801a08a:	2700      	movs	r7, #0
 801a08c:	fbb8 f8f3 	udiv	r8, r8, r3
 801a090:	fb03 f908 	mul.w	r9, r3, r8
 801a094:	ea6f 0909 	mvn.w	r9, r9
 801a098:	4638      	mov	r0, r7
 801a09a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a09e:	f1bc 0f09 	cmp.w	ip, #9
 801a0a2:	d814      	bhi.n	801a0ce <_strtoul_l.constprop.0+0x86>
 801a0a4:	4664      	mov	r4, ip
 801a0a6:	42a3      	cmp	r3, r4
 801a0a8:	dd22      	ble.n	801a0f0 <_strtoul_l.constprop.0+0xa8>
 801a0aa:	2f00      	cmp	r7, #0
 801a0ac:	db1d      	blt.n	801a0ea <_strtoul_l.constprop.0+0xa2>
 801a0ae:	4580      	cmp	r8, r0
 801a0b0:	d31b      	bcc.n	801a0ea <_strtoul_l.constprop.0+0xa2>
 801a0b2:	d101      	bne.n	801a0b8 <_strtoul_l.constprop.0+0x70>
 801a0b4:	45a1      	cmp	r9, r4
 801a0b6:	db18      	blt.n	801a0ea <_strtoul_l.constprop.0+0xa2>
 801a0b8:	fb00 4003 	mla	r0, r0, r3, r4
 801a0bc:	2701      	movs	r7, #1
 801a0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a0c2:	e7ea      	b.n	801a09a <_strtoul_l.constprop.0+0x52>
 801a0c4:	2c2b      	cmp	r4, #43	; 0x2b
 801a0c6:	bf04      	itt	eq
 801a0c8:	782c      	ldrbeq	r4, [r5, #0]
 801a0ca:	1c85      	addeq	r5, r0, #2
 801a0cc:	e7cd      	b.n	801a06a <_strtoul_l.constprop.0+0x22>
 801a0ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a0d2:	f1bc 0f19 	cmp.w	ip, #25
 801a0d6:	d801      	bhi.n	801a0dc <_strtoul_l.constprop.0+0x94>
 801a0d8:	3c37      	subs	r4, #55	; 0x37
 801a0da:	e7e4      	b.n	801a0a6 <_strtoul_l.constprop.0+0x5e>
 801a0dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a0e0:	f1bc 0f19 	cmp.w	ip, #25
 801a0e4:	d804      	bhi.n	801a0f0 <_strtoul_l.constprop.0+0xa8>
 801a0e6:	3c57      	subs	r4, #87	; 0x57
 801a0e8:	e7dd      	b.n	801a0a6 <_strtoul_l.constprop.0+0x5e>
 801a0ea:	f04f 37ff 	mov.w	r7, #4294967295
 801a0ee:	e7e6      	b.n	801a0be <_strtoul_l.constprop.0+0x76>
 801a0f0:	2f00      	cmp	r7, #0
 801a0f2:	da07      	bge.n	801a104 <_strtoul_l.constprop.0+0xbc>
 801a0f4:	2322      	movs	r3, #34	; 0x22
 801a0f6:	f8ce 3000 	str.w	r3, [lr]
 801a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a0fe:	b932      	cbnz	r2, 801a10e <_strtoul_l.constprop.0+0xc6>
 801a100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a104:	b106      	cbz	r6, 801a108 <_strtoul_l.constprop.0+0xc0>
 801a106:	4240      	negs	r0, r0
 801a108:	2a00      	cmp	r2, #0
 801a10a:	d0f9      	beq.n	801a100 <_strtoul_l.constprop.0+0xb8>
 801a10c:	b107      	cbz	r7, 801a110 <_strtoul_l.constprop.0+0xc8>
 801a10e:	1e69      	subs	r1, r5, #1
 801a110:	6011      	str	r1, [r2, #0]
 801a112:	e7f5      	b.n	801a100 <_strtoul_l.constprop.0+0xb8>
 801a114:	2430      	movs	r4, #48	; 0x30
 801a116:	2b00      	cmp	r3, #0
 801a118:	d1b5      	bne.n	801a086 <_strtoul_l.constprop.0+0x3e>
 801a11a:	2308      	movs	r3, #8
 801a11c:	e7b3      	b.n	801a086 <_strtoul_l.constprop.0+0x3e>
 801a11e:	2c30      	cmp	r4, #48	; 0x30
 801a120:	d0a9      	beq.n	801a076 <_strtoul_l.constprop.0+0x2e>
 801a122:	230a      	movs	r3, #10
 801a124:	e7af      	b.n	801a086 <_strtoul_l.constprop.0+0x3e>
 801a126:	bf00      	nop
 801a128:	0807374a 	.word	0x0807374a

0801a12c <_strtoul_r>:
 801a12c:	f7ff bf8c 	b.w	801a048 <_strtoul_l.constprop.0>

0801a130 <strtoul>:
 801a130:	4613      	mov	r3, r2
 801a132:	460a      	mov	r2, r1
 801a134:	4601      	mov	r1, r0
 801a136:	4802      	ldr	r0, [pc, #8]	; (801a140 <strtoul+0x10>)
 801a138:	6800      	ldr	r0, [r0, #0]
 801a13a:	f7ff bf85 	b.w	801a048 <_strtoul_l.constprop.0>
 801a13e:	bf00      	nop
 801a140:	20000224 	.word	0x20000224

0801a144 <__submore>:
 801a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a148:	460c      	mov	r4, r1
 801a14a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a150:	4299      	cmp	r1, r3
 801a152:	d11d      	bne.n	801a190 <__submore+0x4c>
 801a154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a158:	f7fa ff2a 	bl	8014fb0 <_malloc_r>
 801a15c:	b918      	cbnz	r0, 801a166 <__submore+0x22>
 801a15e:	f04f 30ff 	mov.w	r0, #4294967295
 801a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a16a:	63a3      	str	r3, [r4, #56]	; 0x38
 801a16c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a170:	6360      	str	r0, [r4, #52]	; 0x34
 801a172:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a176:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a17a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a17e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a182:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a186:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a18a:	6020      	str	r0, [r4, #0]
 801a18c:	2000      	movs	r0, #0
 801a18e:	e7e8      	b.n	801a162 <__submore+0x1e>
 801a190:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a192:	0077      	lsls	r7, r6, #1
 801a194:	463a      	mov	r2, r7
 801a196:	f7ff f9fc 	bl	8019592 <_realloc_r>
 801a19a:	4605      	mov	r5, r0
 801a19c:	2800      	cmp	r0, #0
 801a19e:	d0de      	beq.n	801a15e <__submore+0x1a>
 801a1a0:	eb00 0806 	add.w	r8, r0, r6
 801a1a4:	4601      	mov	r1, r0
 801a1a6:	4632      	mov	r2, r6
 801a1a8:	4640      	mov	r0, r8
 801a1aa:	f7fa fc0d 	bl	80149c8 <memcpy>
 801a1ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a1b2:	f8c4 8000 	str.w	r8, [r4]
 801a1b6:	e7e9      	b.n	801a18c <__submore+0x48>

0801a1b8 <__ascii_wctomb>:
 801a1b8:	b149      	cbz	r1, 801a1ce <__ascii_wctomb+0x16>
 801a1ba:	2aff      	cmp	r2, #255	; 0xff
 801a1bc:	bf85      	ittet	hi
 801a1be:	238a      	movhi	r3, #138	; 0x8a
 801a1c0:	6003      	strhi	r3, [r0, #0]
 801a1c2:	700a      	strbls	r2, [r1, #0]
 801a1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801a1c8:	bf98      	it	ls
 801a1ca:	2001      	movls	r0, #1
 801a1cc:	4770      	bx	lr
 801a1ce:	4608      	mov	r0, r1
 801a1d0:	4770      	bx	lr
	...

0801a1d4 <__env_lock>:
 801a1d4:	4801      	ldr	r0, [pc, #4]	; (801a1dc <__env_lock+0x8>)
 801a1d6:	f7fe bc51 	b.w	8018a7c <__retarget_lock_acquire_recursive>
 801a1da:	bf00      	nop
 801a1dc:	20005e70 	.word	0x20005e70

0801a1e0 <__env_unlock>:
 801a1e0:	4801      	ldr	r0, [pc, #4]	; (801a1e8 <__env_unlock+0x8>)
 801a1e2:	f7fe bc4d 	b.w	8018a80 <__retarget_lock_release_recursive>
 801a1e6:	bf00      	nop
 801a1e8:	20005e70 	.word	0x20005e70

0801a1ec <_fstat_r>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	4d07      	ldr	r5, [pc, #28]	; (801a20c <_fstat_r+0x20>)
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	4608      	mov	r0, r1
 801a1f6:	4611      	mov	r1, r2
 801a1f8:	602b      	str	r3, [r5, #0]
 801a1fa:	f7ea fccc 	bl	8004b96 <_fstat>
 801a1fe:	1c43      	adds	r3, r0, #1
 801a200:	d102      	bne.n	801a208 <_fstat_r+0x1c>
 801a202:	682b      	ldr	r3, [r5, #0]
 801a204:	b103      	cbz	r3, 801a208 <_fstat_r+0x1c>
 801a206:	6023      	str	r3, [r4, #0]
 801a208:	bd38      	pop	{r3, r4, r5, pc}
 801a20a:	bf00      	nop
 801a20c:	20005e78 	.word	0x20005e78

0801a210 <_isatty_r>:
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	4d06      	ldr	r5, [pc, #24]	; (801a22c <_isatty_r+0x1c>)
 801a214:	2300      	movs	r3, #0
 801a216:	4604      	mov	r4, r0
 801a218:	4608      	mov	r0, r1
 801a21a:	602b      	str	r3, [r5, #0]
 801a21c:	f7ea fccb 	bl	8004bb6 <_isatty>
 801a220:	1c43      	adds	r3, r0, #1
 801a222:	d102      	bne.n	801a22a <_isatty_r+0x1a>
 801a224:	682b      	ldr	r3, [r5, #0]
 801a226:	b103      	cbz	r3, 801a22a <_isatty_r+0x1a>
 801a228:	6023      	str	r3, [r4, #0]
 801a22a:	bd38      	pop	{r3, r4, r5, pc}
 801a22c:	20005e78 	.word	0x20005e78

0801a230 <_malloc_usable_size_r>:
 801a230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a234:	1f18      	subs	r0, r3, #4
 801a236:	2b00      	cmp	r3, #0
 801a238:	bfbc      	itt	lt
 801a23a:	580b      	ldrlt	r3, [r1, r0]
 801a23c:	18c0      	addlt	r0, r0, r3
 801a23e:	4770      	bx	lr

0801a240 <cos>:
 801a240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a242:	ec53 2b10 	vmov	r2, r3, d0
 801a246:	4826      	ldr	r0, [pc, #152]	; (801a2e0 <cos+0xa0>)
 801a248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a24c:	4281      	cmp	r1, r0
 801a24e:	dc06      	bgt.n	801a25e <cos+0x1e>
 801a250:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a2d8 <cos+0x98>
 801a254:	b005      	add	sp, #20
 801a256:	f85d eb04 	ldr.w	lr, [sp], #4
 801a25a:	f001 bbf1 	b.w	801ba40 <__kernel_cos>
 801a25e:	4821      	ldr	r0, [pc, #132]	; (801a2e4 <cos+0xa4>)
 801a260:	4281      	cmp	r1, r0
 801a262:	dd09      	ble.n	801a278 <cos+0x38>
 801a264:	ee10 0a10 	vmov	r0, s0
 801a268:	4619      	mov	r1, r3
 801a26a:	f7e6 f82d 	bl	80002c8 <__aeabi_dsub>
 801a26e:	ec41 0b10 	vmov	d0, r0, r1
 801a272:	b005      	add	sp, #20
 801a274:	f85d fb04 	ldr.w	pc, [sp], #4
 801a278:	4668      	mov	r0, sp
 801a27a:	f001 f921 	bl	801b4c0 <__ieee754_rem_pio2>
 801a27e:	f000 0003 	and.w	r0, r0, #3
 801a282:	2801      	cmp	r0, #1
 801a284:	d00b      	beq.n	801a29e <cos+0x5e>
 801a286:	2802      	cmp	r0, #2
 801a288:	d016      	beq.n	801a2b8 <cos+0x78>
 801a28a:	b9e0      	cbnz	r0, 801a2c6 <cos+0x86>
 801a28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a290:	ed9d 0b00 	vldr	d0, [sp]
 801a294:	f001 fbd4 	bl	801ba40 <__kernel_cos>
 801a298:	ec51 0b10 	vmov	r0, r1, d0
 801a29c:	e7e7      	b.n	801a26e <cos+0x2e>
 801a29e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2a2:	ed9d 0b00 	vldr	d0, [sp]
 801a2a6:	f001 ffe3 	bl	801c270 <__kernel_sin>
 801a2aa:	ec53 2b10 	vmov	r2, r3, d0
 801a2ae:	ee10 0a10 	vmov	r0, s0
 801a2b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a2b6:	e7da      	b.n	801a26e <cos+0x2e>
 801a2b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2bc:	ed9d 0b00 	vldr	d0, [sp]
 801a2c0:	f001 fbbe 	bl	801ba40 <__kernel_cos>
 801a2c4:	e7f1      	b.n	801a2aa <cos+0x6a>
 801a2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2ca:	ed9d 0b00 	vldr	d0, [sp]
 801a2ce:	2001      	movs	r0, #1
 801a2d0:	f001 ffce 	bl	801c270 <__kernel_sin>
 801a2d4:	e7e0      	b.n	801a298 <cos+0x58>
 801a2d6:	bf00      	nop
	...
 801a2e0:	3fe921fb 	.word	0x3fe921fb
 801a2e4:	7fefffff 	.word	0x7fefffff

0801a2e8 <sin>:
 801a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2ea:	ec53 2b10 	vmov	r2, r3, d0
 801a2ee:	4828      	ldr	r0, [pc, #160]	; (801a390 <sin+0xa8>)
 801a2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a2f4:	4281      	cmp	r1, r0
 801a2f6:	dc07      	bgt.n	801a308 <sin+0x20>
 801a2f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a388 <sin+0xa0>
 801a2fc:	2000      	movs	r0, #0
 801a2fe:	b005      	add	sp, #20
 801a300:	f85d eb04 	ldr.w	lr, [sp], #4
 801a304:	f001 bfb4 	b.w	801c270 <__kernel_sin>
 801a308:	4822      	ldr	r0, [pc, #136]	; (801a394 <sin+0xac>)
 801a30a:	4281      	cmp	r1, r0
 801a30c:	dd09      	ble.n	801a322 <sin+0x3a>
 801a30e:	ee10 0a10 	vmov	r0, s0
 801a312:	4619      	mov	r1, r3
 801a314:	f7e5 ffd8 	bl	80002c8 <__aeabi_dsub>
 801a318:	ec41 0b10 	vmov	d0, r0, r1
 801a31c:	b005      	add	sp, #20
 801a31e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a322:	4668      	mov	r0, sp
 801a324:	f001 f8cc 	bl	801b4c0 <__ieee754_rem_pio2>
 801a328:	f000 0003 	and.w	r0, r0, #3
 801a32c:	2801      	cmp	r0, #1
 801a32e:	d00c      	beq.n	801a34a <sin+0x62>
 801a330:	2802      	cmp	r0, #2
 801a332:	d011      	beq.n	801a358 <sin+0x70>
 801a334:	b9f0      	cbnz	r0, 801a374 <sin+0x8c>
 801a336:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a33a:	ed9d 0b00 	vldr	d0, [sp]
 801a33e:	2001      	movs	r0, #1
 801a340:	f001 ff96 	bl	801c270 <__kernel_sin>
 801a344:	ec51 0b10 	vmov	r0, r1, d0
 801a348:	e7e6      	b.n	801a318 <sin+0x30>
 801a34a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a34e:	ed9d 0b00 	vldr	d0, [sp]
 801a352:	f001 fb75 	bl	801ba40 <__kernel_cos>
 801a356:	e7f5      	b.n	801a344 <sin+0x5c>
 801a358:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a35c:	ed9d 0b00 	vldr	d0, [sp]
 801a360:	2001      	movs	r0, #1
 801a362:	f001 ff85 	bl	801c270 <__kernel_sin>
 801a366:	ec53 2b10 	vmov	r2, r3, d0
 801a36a:	ee10 0a10 	vmov	r0, s0
 801a36e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a372:	e7d1      	b.n	801a318 <sin+0x30>
 801a374:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a378:	ed9d 0b00 	vldr	d0, [sp]
 801a37c:	f001 fb60 	bl	801ba40 <__kernel_cos>
 801a380:	e7f1      	b.n	801a366 <sin+0x7e>
 801a382:	bf00      	nop
 801a384:	f3af 8000 	nop.w
	...
 801a390:	3fe921fb 	.word	0x3fe921fb
 801a394:	7fefffff 	.word	0x7fefffff

0801a398 <tan>:
 801a398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a39a:	ec53 2b10 	vmov	r2, r3, d0
 801a39e:	4816      	ldr	r0, [pc, #88]	; (801a3f8 <tan+0x60>)
 801a3a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a3a4:	4281      	cmp	r1, r0
 801a3a6:	dc07      	bgt.n	801a3b8 <tan+0x20>
 801a3a8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801a3f0 <tan+0x58>
 801a3ac:	2001      	movs	r0, #1
 801a3ae:	b005      	add	sp, #20
 801a3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3b4:	f002 b81c 	b.w	801c3f0 <__kernel_tan>
 801a3b8:	4810      	ldr	r0, [pc, #64]	; (801a3fc <tan+0x64>)
 801a3ba:	4281      	cmp	r1, r0
 801a3bc:	dd09      	ble.n	801a3d2 <tan+0x3a>
 801a3be:	ee10 0a10 	vmov	r0, s0
 801a3c2:	4619      	mov	r1, r3
 801a3c4:	f7e5 ff80 	bl	80002c8 <__aeabi_dsub>
 801a3c8:	ec41 0b10 	vmov	d0, r0, r1
 801a3cc:	b005      	add	sp, #20
 801a3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3d2:	4668      	mov	r0, sp
 801a3d4:	f001 f874 	bl	801b4c0 <__ieee754_rem_pio2>
 801a3d8:	0040      	lsls	r0, r0, #1
 801a3da:	f000 0002 	and.w	r0, r0, #2
 801a3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3e2:	ed9d 0b00 	vldr	d0, [sp]
 801a3e6:	f1c0 0001 	rsb	r0, r0, #1
 801a3ea:	f002 f801 	bl	801c3f0 <__kernel_tan>
 801a3ee:	e7ed      	b.n	801a3cc <tan+0x34>
	...
 801a3f8:	3fe921fb 	.word	0x3fe921fb
 801a3fc:	7fefffff 	.word	0x7fefffff

0801a400 <acos>:
 801a400:	b538      	push	{r3, r4, r5, lr}
 801a402:	ed2d 8b02 	vpush	{d8}
 801a406:	ec55 4b10 	vmov	r4, r5, d0
 801a40a:	f000 f8c9 	bl	801a5a0 <__ieee754_acos>
 801a40e:	4622      	mov	r2, r4
 801a410:	462b      	mov	r3, r5
 801a412:	4620      	mov	r0, r4
 801a414:	4629      	mov	r1, r5
 801a416:	eeb0 8a40 	vmov.f32	s16, s0
 801a41a:	eef0 8a60 	vmov.f32	s17, s1
 801a41e:	f7e6 fba5 	bl	8000b6c <__aeabi_dcmpun>
 801a422:	b9a8      	cbnz	r0, 801a450 <acos+0x50>
 801a424:	ec45 4b10 	vmov	d0, r4, r5
 801a428:	f002 fa1c 	bl	801c864 <fabs>
 801a42c:	4b0c      	ldr	r3, [pc, #48]	; (801a460 <acos+0x60>)
 801a42e:	ec51 0b10 	vmov	r0, r1, d0
 801a432:	2200      	movs	r2, #0
 801a434:	f7e6 fb90 	bl	8000b58 <__aeabi_dcmpgt>
 801a438:	b150      	cbz	r0, 801a450 <acos+0x50>
 801a43a:	f7fa fa79 	bl	8014930 <__errno>
 801a43e:	ecbd 8b02 	vpop	{d8}
 801a442:	2321      	movs	r3, #33	; 0x21
 801a444:	6003      	str	r3, [r0, #0]
 801a446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a44a:	4806      	ldr	r0, [pc, #24]	; (801a464 <acos+0x64>)
 801a44c:	f7ff bd64 	b.w	8019f18 <nan>
 801a450:	eeb0 0a48 	vmov.f32	s0, s16
 801a454:	eef0 0a68 	vmov.f32	s1, s17
 801a458:	ecbd 8b02 	vpop	{d8}
 801a45c:	bd38      	pop	{r3, r4, r5, pc}
 801a45e:	bf00      	nop
 801a460:	3ff00000 	.word	0x3ff00000
 801a464:	0807353e 	.word	0x0807353e

0801a468 <pow>:
 801a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a46a:	ed2d 8b02 	vpush	{d8}
 801a46e:	eeb0 8a40 	vmov.f32	s16, s0
 801a472:	eef0 8a60 	vmov.f32	s17, s1
 801a476:	ec55 4b11 	vmov	r4, r5, d1
 801a47a:	f000 faf1 	bl	801aa60 <__ieee754_pow>
 801a47e:	4622      	mov	r2, r4
 801a480:	462b      	mov	r3, r5
 801a482:	4620      	mov	r0, r4
 801a484:	4629      	mov	r1, r5
 801a486:	ec57 6b10 	vmov	r6, r7, d0
 801a48a:	f7e6 fb6f 	bl	8000b6c <__aeabi_dcmpun>
 801a48e:	2800      	cmp	r0, #0
 801a490:	d13b      	bne.n	801a50a <pow+0xa2>
 801a492:	ec51 0b18 	vmov	r0, r1, d8
 801a496:	2200      	movs	r2, #0
 801a498:	2300      	movs	r3, #0
 801a49a:	f7e6 fb35 	bl	8000b08 <__aeabi_dcmpeq>
 801a49e:	b1b8      	cbz	r0, 801a4d0 <pow+0x68>
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	4629      	mov	r1, r5
 801a4a8:	f7e6 fb2e 	bl	8000b08 <__aeabi_dcmpeq>
 801a4ac:	2800      	cmp	r0, #0
 801a4ae:	d146      	bne.n	801a53e <pow+0xd6>
 801a4b0:	ec45 4b10 	vmov	d0, r4, r5
 801a4b4:	f002 f9df 	bl	801c876 <finite>
 801a4b8:	b338      	cbz	r0, 801a50a <pow+0xa2>
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	2300      	movs	r3, #0
 801a4be:	4620      	mov	r0, r4
 801a4c0:	4629      	mov	r1, r5
 801a4c2:	f7e6 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 801a4c6:	b300      	cbz	r0, 801a50a <pow+0xa2>
 801a4c8:	f7fa fa32 	bl	8014930 <__errno>
 801a4cc:	2322      	movs	r3, #34	; 0x22
 801a4ce:	e01b      	b.n	801a508 <pow+0xa0>
 801a4d0:	ec47 6b10 	vmov	d0, r6, r7
 801a4d4:	f002 f9cf 	bl	801c876 <finite>
 801a4d8:	b9e0      	cbnz	r0, 801a514 <pow+0xac>
 801a4da:	eeb0 0a48 	vmov.f32	s0, s16
 801a4de:	eef0 0a68 	vmov.f32	s1, s17
 801a4e2:	f002 f9c8 	bl	801c876 <finite>
 801a4e6:	b1a8      	cbz	r0, 801a514 <pow+0xac>
 801a4e8:	ec45 4b10 	vmov	d0, r4, r5
 801a4ec:	f002 f9c3 	bl	801c876 <finite>
 801a4f0:	b180      	cbz	r0, 801a514 <pow+0xac>
 801a4f2:	4632      	mov	r2, r6
 801a4f4:	463b      	mov	r3, r7
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	4639      	mov	r1, r7
 801a4fa:	f7e6 fb37 	bl	8000b6c <__aeabi_dcmpun>
 801a4fe:	2800      	cmp	r0, #0
 801a500:	d0e2      	beq.n	801a4c8 <pow+0x60>
 801a502:	f7fa fa15 	bl	8014930 <__errno>
 801a506:	2321      	movs	r3, #33	; 0x21
 801a508:	6003      	str	r3, [r0, #0]
 801a50a:	ecbd 8b02 	vpop	{d8}
 801a50e:	ec47 6b10 	vmov	d0, r6, r7
 801a512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a514:	2200      	movs	r2, #0
 801a516:	2300      	movs	r3, #0
 801a518:	4630      	mov	r0, r6
 801a51a:	4639      	mov	r1, r7
 801a51c:	f7e6 faf4 	bl	8000b08 <__aeabi_dcmpeq>
 801a520:	2800      	cmp	r0, #0
 801a522:	d0f2      	beq.n	801a50a <pow+0xa2>
 801a524:	eeb0 0a48 	vmov.f32	s0, s16
 801a528:	eef0 0a68 	vmov.f32	s1, s17
 801a52c:	f002 f9a3 	bl	801c876 <finite>
 801a530:	2800      	cmp	r0, #0
 801a532:	d0ea      	beq.n	801a50a <pow+0xa2>
 801a534:	ec45 4b10 	vmov	d0, r4, r5
 801a538:	f002 f99d 	bl	801c876 <finite>
 801a53c:	e7c3      	b.n	801a4c6 <pow+0x5e>
 801a53e:	4f01      	ldr	r7, [pc, #4]	; (801a544 <pow+0xdc>)
 801a540:	2600      	movs	r6, #0
 801a542:	e7e2      	b.n	801a50a <pow+0xa2>
 801a544:	3ff00000 	.word	0x3ff00000

0801a548 <sqrt>:
 801a548:	b538      	push	{r3, r4, r5, lr}
 801a54a:	ed2d 8b02 	vpush	{d8}
 801a54e:	ec55 4b10 	vmov	r4, r5, d0
 801a552:	f001 f9c1 	bl	801b8d8 <__ieee754_sqrt>
 801a556:	4622      	mov	r2, r4
 801a558:	462b      	mov	r3, r5
 801a55a:	4620      	mov	r0, r4
 801a55c:	4629      	mov	r1, r5
 801a55e:	eeb0 8a40 	vmov.f32	s16, s0
 801a562:	eef0 8a60 	vmov.f32	s17, s1
 801a566:	f7e6 fb01 	bl	8000b6c <__aeabi_dcmpun>
 801a56a:	b990      	cbnz	r0, 801a592 <sqrt+0x4a>
 801a56c:	2200      	movs	r2, #0
 801a56e:	2300      	movs	r3, #0
 801a570:	4620      	mov	r0, r4
 801a572:	4629      	mov	r1, r5
 801a574:	f7e6 fad2 	bl	8000b1c <__aeabi_dcmplt>
 801a578:	b158      	cbz	r0, 801a592 <sqrt+0x4a>
 801a57a:	f7fa f9d9 	bl	8014930 <__errno>
 801a57e:	2321      	movs	r3, #33	; 0x21
 801a580:	6003      	str	r3, [r0, #0]
 801a582:	2200      	movs	r2, #0
 801a584:	2300      	movs	r3, #0
 801a586:	4610      	mov	r0, r2
 801a588:	4619      	mov	r1, r3
 801a58a:	f7e6 f97f 	bl	800088c <__aeabi_ddiv>
 801a58e:	ec41 0b18 	vmov	d8, r0, r1
 801a592:	eeb0 0a48 	vmov.f32	s0, s16
 801a596:	eef0 0a68 	vmov.f32	s1, s17
 801a59a:	ecbd 8b02 	vpop	{d8}
 801a59e:	bd38      	pop	{r3, r4, r5, pc}

0801a5a0 <__ieee754_acos>:
 801a5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a4:	ec55 4b10 	vmov	r4, r5, d0
 801a5a8:	49b7      	ldr	r1, [pc, #732]	; (801a888 <__ieee754_acos+0x2e8>)
 801a5aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a5ae:	428b      	cmp	r3, r1
 801a5b0:	dd1b      	ble.n	801a5ea <__ieee754_acos+0x4a>
 801a5b2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a5b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a5ba:	4323      	orrs	r3, r4
 801a5bc:	d106      	bne.n	801a5cc <__ieee754_acos+0x2c>
 801a5be:	2d00      	cmp	r5, #0
 801a5c0:	f300 8211 	bgt.w	801a9e6 <__ieee754_acos+0x446>
 801a5c4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801a820 <__ieee754_acos+0x280>
 801a5c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5cc:	ee10 2a10 	vmov	r2, s0
 801a5d0:	462b      	mov	r3, r5
 801a5d2:	ee10 0a10 	vmov	r0, s0
 801a5d6:	4629      	mov	r1, r5
 801a5d8:	f7e5 fe76 	bl	80002c8 <__aeabi_dsub>
 801a5dc:	4602      	mov	r2, r0
 801a5de:	460b      	mov	r3, r1
 801a5e0:	f7e6 f954 	bl	800088c <__aeabi_ddiv>
 801a5e4:	ec41 0b10 	vmov	d0, r0, r1
 801a5e8:	e7ee      	b.n	801a5c8 <__ieee754_acos+0x28>
 801a5ea:	49a8      	ldr	r1, [pc, #672]	; (801a88c <__ieee754_acos+0x2ec>)
 801a5ec:	428b      	cmp	r3, r1
 801a5ee:	f300 8087 	bgt.w	801a700 <__ieee754_acos+0x160>
 801a5f2:	4aa7      	ldr	r2, [pc, #668]	; (801a890 <__ieee754_acos+0x2f0>)
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	f340 81f9 	ble.w	801a9ec <__ieee754_acos+0x44c>
 801a5fa:	ee10 2a10 	vmov	r2, s0
 801a5fe:	ee10 0a10 	vmov	r0, s0
 801a602:	462b      	mov	r3, r5
 801a604:	4629      	mov	r1, r5
 801a606:	f7e6 f817 	bl	8000638 <__aeabi_dmul>
 801a60a:	a387      	add	r3, pc, #540	; (adr r3, 801a828 <__ieee754_acos+0x288>)
 801a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a610:	4606      	mov	r6, r0
 801a612:	460f      	mov	r7, r1
 801a614:	f7e6 f810 	bl	8000638 <__aeabi_dmul>
 801a618:	a385      	add	r3, pc, #532	; (adr r3, 801a830 <__ieee754_acos+0x290>)
 801a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61e:	f7e5 fe55 	bl	80002cc <__adddf3>
 801a622:	4632      	mov	r2, r6
 801a624:	463b      	mov	r3, r7
 801a626:	f7e6 f807 	bl	8000638 <__aeabi_dmul>
 801a62a:	a383      	add	r3, pc, #524	; (adr r3, 801a838 <__ieee754_acos+0x298>)
 801a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a630:	f7e5 fe4a 	bl	80002c8 <__aeabi_dsub>
 801a634:	4632      	mov	r2, r6
 801a636:	463b      	mov	r3, r7
 801a638:	f7e5 fffe 	bl	8000638 <__aeabi_dmul>
 801a63c:	a380      	add	r3, pc, #512	; (adr r3, 801a840 <__ieee754_acos+0x2a0>)
 801a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a642:	f7e5 fe43 	bl	80002cc <__adddf3>
 801a646:	4632      	mov	r2, r6
 801a648:	463b      	mov	r3, r7
 801a64a:	f7e5 fff5 	bl	8000638 <__aeabi_dmul>
 801a64e:	a37e      	add	r3, pc, #504	; (adr r3, 801a848 <__ieee754_acos+0x2a8>)
 801a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a654:	f7e5 fe38 	bl	80002c8 <__aeabi_dsub>
 801a658:	4632      	mov	r2, r6
 801a65a:	463b      	mov	r3, r7
 801a65c:	f7e5 ffec 	bl	8000638 <__aeabi_dmul>
 801a660:	a37b      	add	r3, pc, #492	; (adr r3, 801a850 <__ieee754_acos+0x2b0>)
 801a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a666:	f7e5 fe31 	bl	80002cc <__adddf3>
 801a66a:	4632      	mov	r2, r6
 801a66c:	463b      	mov	r3, r7
 801a66e:	f7e5 ffe3 	bl	8000638 <__aeabi_dmul>
 801a672:	a379      	add	r3, pc, #484	; (adr r3, 801a858 <__ieee754_acos+0x2b8>)
 801a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a678:	4680      	mov	r8, r0
 801a67a:	4689      	mov	r9, r1
 801a67c:	4630      	mov	r0, r6
 801a67e:	4639      	mov	r1, r7
 801a680:	f7e5 ffda 	bl	8000638 <__aeabi_dmul>
 801a684:	a376      	add	r3, pc, #472	; (adr r3, 801a860 <__ieee754_acos+0x2c0>)
 801a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a68a:	f7e5 fe1d 	bl	80002c8 <__aeabi_dsub>
 801a68e:	4632      	mov	r2, r6
 801a690:	463b      	mov	r3, r7
 801a692:	f7e5 ffd1 	bl	8000638 <__aeabi_dmul>
 801a696:	a374      	add	r3, pc, #464	; (adr r3, 801a868 <__ieee754_acos+0x2c8>)
 801a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69c:	f7e5 fe16 	bl	80002cc <__adddf3>
 801a6a0:	4632      	mov	r2, r6
 801a6a2:	463b      	mov	r3, r7
 801a6a4:	f7e5 ffc8 	bl	8000638 <__aeabi_dmul>
 801a6a8:	a371      	add	r3, pc, #452	; (adr r3, 801a870 <__ieee754_acos+0x2d0>)
 801a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ae:	f7e5 fe0b 	bl	80002c8 <__aeabi_dsub>
 801a6b2:	4632      	mov	r2, r6
 801a6b4:	463b      	mov	r3, r7
 801a6b6:	f7e5 ffbf 	bl	8000638 <__aeabi_dmul>
 801a6ba:	4b76      	ldr	r3, [pc, #472]	; (801a894 <__ieee754_acos+0x2f4>)
 801a6bc:	2200      	movs	r2, #0
 801a6be:	f7e5 fe05 	bl	80002cc <__adddf3>
 801a6c2:	4602      	mov	r2, r0
 801a6c4:	460b      	mov	r3, r1
 801a6c6:	4640      	mov	r0, r8
 801a6c8:	4649      	mov	r1, r9
 801a6ca:	f7e6 f8df 	bl	800088c <__aeabi_ddiv>
 801a6ce:	4622      	mov	r2, r4
 801a6d0:	462b      	mov	r3, r5
 801a6d2:	f7e5 ffb1 	bl	8000638 <__aeabi_dmul>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	460b      	mov	r3, r1
 801a6da:	a167      	add	r1, pc, #412	; (adr r1, 801a878 <__ieee754_acos+0x2d8>)
 801a6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6e0:	f7e5 fdf2 	bl	80002c8 <__aeabi_dsub>
 801a6e4:	4602      	mov	r2, r0
 801a6e6:	460b      	mov	r3, r1
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	4629      	mov	r1, r5
 801a6ec:	f7e5 fdec 	bl	80002c8 <__aeabi_dsub>
 801a6f0:	4602      	mov	r2, r0
 801a6f2:	460b      	mov	r3, r1
 801a6f4:	a162      	add	r1, pc, #392	; (adr r1, 801a880 <__ieee754_acos+0x2e0>)
 801a6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6fa:	f7e5 fde5 	bl	80002c8 <__aeabi_dsub>
 801a6fe:	e771      	b.n	801a5e4 <__ieee754_acos+0x44>
 801a700:	2d00      	cmp	r5, #0
 801a702:	f280 80cb 	bge.w	801a89c <__ieee754_acos+0x2fc>
 801a706:	ee10 0a10 	vmov	r0, s0
 801a70a:	4b62      	ldr	r3, [pc, #392]	; (801a894 <__ieee754_acos+0x2f4>)
 801a70c:	2200      	movs	r2, #0
 801a70e:	4629      	mov	r1, r5
 801a710:	f7e5 fddc 	bl	80002cc <__adddf3>
 801a714:	4b60      	ldr	r3, [pc, #384]	; (801a898 <__ieee754_acos+0x2f8>)
 801a716:	2200      	movs	r2, #0
 801a718:	f7e5 ff8e 	bl	8000638 <__aeabi_dmul>
 801a71c:	a342      	add	r3, pc, #264	; (adr r3, 801a828 <__ieee754_acos+0x288>)
 801a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a722:	4604      	mov	r4, r0
 801a724:	460d      	mov	r5, r1
 801a726:	f7e5 ff87 	bl	8000638 <__aeabi_dmul>
 801a72a:	a341      	add	r3, pc, #260	; (adr r3, 801a830 <__ieee754_acos+0x290>)
 801a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a730:	f7e5 fdcc 	bl	80002cc <__adddf3>
 801a734:	4622      	mov	r2, r4
 801a736:	462b      	mov	r3, r5
 801a738:	f7e5 ff7e 	bl	8000638 <__aeabi_dmul>
 801a73c:	a33e      	add	r3, pc, #248	; (adr r3, 801a838 <__ieee754_acos+0x298>)
 801a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a742:	f7e5 fdc1 	bl	80002c8 <__aeabi_dsub>
 801a746:	4622      	mov	r2, r4
 801a748:	462b      	mov	r3, r5
 801a74a:	f7e5 ff75 	bl	8000638 <__aeabi_dmul>
 801a74e:	a33c      	add	r3, pc, #240	; (adr r3, 801a840 <__ieee754_acos+0x2a0>)
 801a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a754:	f7e5 fdba 	bl	80002cc <__adddf3>
 801a758:	4622      	mov	r2, r4
 801a75a:	462b      	mov	r3, r5
 801a75c:	f7e5 ff6c 	bl	8000638 <__aeabi_dmul>
 801a760:	a339      	add	r3, pc, #228	; (adr r3, 801a848 <__ieee754_acos+0x2a8>)
 801a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a766:	f7e5 fdaf 	bl	80002c8 <__aeabi_dsub>
 801a76a:	4622      	mov	r2, r4
 801a76c:	462b      	mov	r3, r5
 801a76e:	f7e5 ff63 	bl	8000638 <__aeabi_dmul>
 801a772:	a337      	add	r3, pc, #220	; (adr r3, 801a850 <__ieee754_acos+0x2b0>)
 801a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a778:	f7e5 fda8 	bl	80002cc <__adddf3>
 801a77c:	4622      	mov	r2, r4
 801a77e:	462b      	mov	r3, r5
 801a780:	f7e5 ff5a 	bl	8000638 <__aeabi_dmul>
 801a784:	ec45 4b10 	vmov	d0, r4, r5
 801a788:	4680      	mov	r8, r0
 801a78a:	4689      	mov	r9, r1
 801a78c:	f001 f8a4 	bl	801b8d8 <__ieee754_sqrt>
 801a790:	a331      	add	r3, pc, #196	; (adr r3, 801a858 <__ieee754_acos+0x2b8>)
 801a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a796:	4620      	mov	r0, r4
 801a798:	4629      	mov	r1, r5
 801a79a:	ec57 6b10 	vmov	r6, r7, d0
 801a79e:	f7e5 ff4b 	bl	8000638 <__aeabi_dmul>
 801a7a2:	a32f      	add	r3, pc, #188	; (adr r3, 801a860 <__ieee754_acos+0x2c0>)
 801a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a8:	f7e5 fd8e 	bl	80002c8 <__aeabi_dsub>
 801a7ac:	4622      	mov	r2, r4
 801a7ae:	462b      	mov	r3, r5
 801a7b0:	f7e5 ff42 	bl	8000638 <__aeabi_dmul>
 801a7b4:	a32c      	add	r3, pc, #176	; (adr r3, 801a868 <__ieee754_acos+0x2c8>)
 801a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ba:	f7e5 fd87 	bl	80002cc <__adddf3>
 801a7be:	4622      	mov	r2, r4
 801a7c0:	462b      	mov	r3, r5
 801a7c2:	f7e5 ff39 	bl	8000638 <__aeabi_dmul>
 801a7c6:	a32a      	add	r3, pc, #168	; (adr r3, 801a870 <__ieee754_acos+0x2d0>)
 801a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7cc:	f7e5 fd7c 	bl	80002c8 <__aeabi_dsub>
 801a7d0:	4622      	mov	r2, r4
 801a7d2:	462b      	mov	r3, r5
 801a7d4:	f7e5 ff30 	bl	8000638 <__aeabi_dmul>
 801a7d8:	4b2e      	ldr	r3, [pc, #184]	; (801a894 <__ieee754_acos+0x2f4>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	f7e5 fd76 	bl	80002cc <__adddf3>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	4640      	mov	r0, r8
 801a7e6:	4649      	mov	r1, r9
 801a7e8:	f7e6 f850 	bl	800088c <__aeabi_ddiv>
 801a7ec:	4632      	mov	r2, r6
 801a7ee:	463b      	mov	r3, r7
 801a7f0:	f7e5 ff22 	bl	8000638 <__aeabi_dmul>
 801a7f4:	a320      	add	r3, pc, #128	; (adr r3, 801a878 <__ieee754_acos+0x2d8>)
 801a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fa:	f7e5 fd65 	bl	80002c8 <__aeabi_dsub>
 801a7fe:	4632      	mov	r2, r6
 801a800:	463b      	mov	r3, r7
 801a802:	f7e5 fd63 	bl	80002cc <__adddf3>
 801a806:	4602      	mov	r2, r0
 801a808:	460b      	mov	r3, r1
 801a80a:	f7e5 fd5f 	bl	80002cc <__adddf3>
 801a80e:	4602      	mov	r2, r0
 801a810:	460b      	mov	r3, r1
 801a812:	a103      	add	r1, pc, #12	; (adr r1, 801a820 <__ieee754_acos+0x280>)
 801a814:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a818:	e76f      	b.n	801a6fa <__ieee754_acos+0x15a>
 801a81a:	bf00      	nop
 801a81c:	f3af 8000 	nop.w
 801a820:	54442d18 	.word	0x54442d18
 801a824:	400921fb 	.word	0x400921fb
 801a828:	0dfdf709 	.word	0x0dfdf709
 801a82c:	3f023de1 	.word	0x3f023de1
 801a830:	7501b288 	.word	0x7501b288
 801a834:	3f49efe0 	.word	0x3f49efe0
 801a838:	b5688f3b 	.word	0xb5688f3b
 801a83c:	3fa48228 	.word	0x3fa48228
 801a840:	0e884455 	.word	0x0e884455
 801a844:	3fc9c155 	.word	0x3fc9c155
 801a848:	03eb6f7d 	.word	0x03eb6f7d
 801a84c:	3fd4d612 	.word	0x3fd4d612
 801a850:	55555555 	.word	0x55555555
 801a854:	3fc55555 	.word	0x3fc55555
 801a858:	b12e9282 	.word	0xb12e9282
 801a85c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a860:	1b8d0159 	.word	0x1b8d0159
 801a864:	3fe6066c 	.word	0x3fe6066c
 801a868:	9c598ac8 	.word	0x9c598ac8
 801a86c:	40002ae5 	.word	0x40002ae5
 801a870:	1c8a2d4b 	.word	0x1c8a2d4b
 801a874:	40033a27 	.word	0x40033a27
 801a878:	33145c07 	.word	0x33145c07
 801a87c:	3c91a626 	.word	0x3c91a626
 801a880:	54442d18 	.word	0x54442d18
 801a884:	3ff921fb 	.word	0x3ff921fb
 801a888:	3fefffff 	.word	0x3fefffff
 801a88c:	3fdfffff 	.word	0x3fdfffff
 801a890:	3c600000 	.word	0x3c600000
 801a894:	3ff00000 	.word	0x3ff00000
 801a898:	3fe00000 	.word	0x3fe00000
 801a89c:	ee10 2a10 	vmov	r2, s0
 801a8a0:	462b      	mov	r3, r5
 801a8a2:	496d      	ldr	r1, [pc, #436]	; (801aa58 <__ieee754_acos+0x4b8>)
 801a8a4:	2000      	movs	r0, #0
 801a8a6:	f7e5 fd0f 	bl	80002c8 <__aeabi_dsub>
 801a8aa:	4b6c      	ldr	r3, [pc, #432]	; (801aa5c <__ieee754_acos+0x4bc>)
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	f7e5 fec3 	bl	8000638 <__aeabi_dmul>
 801a8b2:	4604      	mov	r4, r0
 801a8b4:	460d      	mov	r5, r1
 801a8b6:	ec45 4b10 	vmov	d0, r4, r5
 801a8ba:	f001 f80d 	bl	801b8d8 <__ieee754_sqrt>
 801a8be:	a34e      	add	r3, pc, #312	; (adr r3, 801a9f8 <__ieee754_acos+0x458>)
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	4629      	mov	r1, r5
 801a8c8:	ec59 8b10 	vmov	r8, r9, d0
 801a8cc:	f7e5 feb4 	bl	8000638 <__aeabi_dmul>
 801a8d0:	a34b      	add	r3, pc, #300	; (adr r3, 801aa00 <__ieee754_acos+0x460>)
 801a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d6:	f7e5 fcf9 	bl	80002cc <__adddf3>
 801a8da:	4622      	mov	r2, r4
 801a8dc:	462b      	mov	r3, r5
 801a8de:	f7e5 feab 	bl	8000638 <__aeabi_dmul>
 801a8e2:	a349      	add	r3, pc, #292	; (adr r3, 801aa08 <__ieee754_acos+0x468>)
 801a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e8:	f7e5 fcee 	bl	80002c8 <__aeabi_dsub>
 801a8ec:	4622      	mov	r2, r4
 801a8ee:	462b      	mov	r3, r5
 801a8f0:	f7e5 fea2 	bl	8000638 <__aeabi_dmul>
 801a8f4:	a346      	add	r3, pc, #280	; (adr r3, 801aa10 <__ieee754_acos+0x470>)
 801a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fa:	f7e5 fce7 	bl	80002cc <__adddf3>
 801a8fe:	4622      	mov	r2, r4
 801a900:	462b      	mov	r3, r5
 801a902:	f7e5 fe99 	bl	8000638 <__aeabi_dmul>
 801a906:	a344      	add	r3, pc, #272	; (adr r3, 801aa18 <__ieee754_acos+0x478>)
 801a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90c:	f7e5 fcdc 	bl	80002c8 <__aeabi_dsub>
 801a910:	4622      	mov	r2, r4
 801a912:	462b      	mov	r3, r5
 801a914:	f7e5 fe90 	bl	8000638 <__aeabi_dmul>
 801a918:	a341      	add	r3, pc, #260	; (adr r3, 801aa20 <__ieee754_acos+0x480>)
 801a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a91e:	f7e5 fcd5 	bl	80002cc <__adddf3>
 801a922:	4622      	mov	r2, r4
 801a924:	462b      	mov	r3, r5
 801a926:	f7e5 fe87 	bl	8000638 <__aeabi_dmul>
 801a92a:	a33f      	add	r3, pc, #252	; (adr r3, 801aa28 <__ieee754_acos+0x488>)
 801a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a930:	4682      	mov	sl, r0
 801a932:	468b      	mov	fp, r1
 801a934:	4620      	mov	r0, r4
 801a936:	4629      	mov	r1, r5
 801a938:	f7e5 fe7e 	bl	8000638 <__aeabi_dmul>
 801a93c:	a33c      	add	r3, pc, #240	; (adr r3, 801aa30 <__ieee754_acos+0x490>)
 801a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a942:	f7e5 fcc1 	bl	80002c8 <__aeabi_dsub>
 801a946:	4622      	mov	r2, r4
 801a948:	462b      	mov	r3, r5
 801a94a:	f7e5 fe75 	bl	8000638 <__aeabi_dmul>
 801a94e:	a33a      	add	r3, pc, #232	; (adr r3, 801aa38 <__ieee754_acos+0x498>)
 801a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a954:	f7e5 fcba 	bl	80002cc <__adddf3>
 801a958:	4622      	mov	r2, r4
 801a95a:	462b      	mov	r3, r5
 801a95c:	f7e5 fe6c 	bl	8000638 <__aeabi_dmul>
 801a960:	a337      	add	r3, pc, #220	; (adr r3, 801aa40 <__ieee754_acos+0x4a0>)
 801a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a966:	f7e5 fcaf 	bl	80002c8 <__aeabi_dsub>
 801a96a:	4622      	mov	r2, r4
 801a96c:	462b      	mov	r3, r5
 801a96e:	f7e5 fe63 	bl	8000638 <__aeabi_dmul>
 801a972:	4b39      	ldr	r3, [pc, #228]	; (801aa58 <__ieee754_acos+0x4b8>)
 801a974:	2200      	movs	r2, #0
 801a976:	f7e5 fca9 	bl	80002cc <__adddf3>
 801a97a:	4602      	mov	r2, r0
 801a97c:	460b      	mov	r3, r1
 801a97e:	4650      	mov	r0, sl
 801a980:	4659      	mov	r1, fp
 801a982:	f7e5 ff83 	bl	800088c <__aeabi_ddiv>
 801a986:	4642      	mov	r2, r8
 801a988:	464b      	mov	r3, r9
 801a98a:	f7e5 fe55 	bl	8000638 <__aeabi_dmul>
 801a98e:	2600      	movs	r6, #0
 801a990:	4682      	mov	sl, r0
 801a992:	468b      	mov	fp, r1
 801a994:	4632      	mov	r2, r6
 801a996:	464b      	mov	r3, r9
 801a998:	4630      	mov	r0, r6
 801a99a:	4649      	mov	r1, r9
 801a99c:	f7e5 fe4c 	bl	8000638 <__aeabi_dmul>
 801a9a0:	4602      	mov	r2, r0
 801a9a2:	460b      	mov	r3, r1
 801a9a4:	4620      	mov	r0, r4
 801a9a6:	4629      	mov	r1, r5
 801a9a8:	f7e5 fc8e 	bl	80002c8 <__aeabi_dsub>
 801a9ac:	4632      	mov	r2, r6
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	460d      	mov	r5, r1
 801a9b2:	464b      	mov	r3, r9
 801a9b4:	4640      	mov	r0, r8
 801a9b6:	4649      	mov	r1, r9
 801a9b8:	f7e5 fc88 	bl	80002cc <__adddf3>
 801a9bc:	4602      	mov	r2, r0
 801a9be:	460b      	mov	r3, r1
 801a9c0:	4620      	mov	r0, r4
 801a9c2:	4629      	mov	r1, r5
 801a9c4:	f7e5 ff62 	bl	800088c <__aeabi_ddiv>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	4650      	mov	r0, sl
 801a9ce:	4659      	mov	r1, fp
 801a9d0:	f7e5 fc7c 	bl	80002cc <__adddf3>
 801a9d4:	4632      	mov	r2, r6
 801a9d6:	464b      	mov	r3, r9
 801a9d8:	f7e5 fc78 	bl	80002cc <__adddf3>
 801a9dc:	4602      	mov	r2, r0
 801a9de:	460b      	mov	r3, r1
 801a9e0:	f7e5 fc74 	bl	80002cc <__adddf3>
 801a9e4:	e5fe      	b.n	801a5e4 <__ieee754_acos+0x44>
 801a9e6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801aa48 <__ieee754_acos+0x4a8>
 801a9ea:	e5ed      	b.n	801a5c8 <__ieee754_acos+0x28>
 801a9ec:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801aa50 <__ieee754_acos+0x4b0>
 801a9f0:	e5ea      	b.n	801a5c8 <__ieee754_acos+0x28>
 801a9f2:	bf00      	nop
 801a9f4:	f3af 8000 	nop.w
 801a9f8:	0dfdf709 	.word	0x0dfdf709
 801a9fc:	3f023de1 	.word	0x3f023de1
 801aa00:	7501b288 	.word	0x7501b288
 801aa04:	3f49efe0 	.word	0x3f49efe0
 801aa08:	b5688f3b 	.word	0xb5688f3b
 801aa0c:	3fa48228 	.word	0x3fa48228
 801aa10:	0e884455 	.word	0x0e884455
 801aa14:	3fc9c155 	.word	0x3fc9c155
 801aa18:	03eb6f7d 	.word	0x03eb6f7d
 801aa1c:	3fd4d612 	.word	0x3fd4d612
 801aa20:	55555555 	.word	0x55555555
 801aa24:	3fc55555 	.word	0x3fc55555
 801aa28:	b12e9282 	.word	0xb12e9282
 801aa2c:	3fb3b8c5 	.word	0x3fb3b8c5
 801aa30:	1b8d0159 	.word	0x1b8d0159
 801aa34:	3fe6066c 	.word	0x3fe6066c
 801aa38:	9c598ac8 	.word	0x9c598ac8
 801aa3c:	40002ae5 	.word	0x40002ae5
 801aa40:	1c8a2d4b 	.word	0x1c8a2d4b
 801aa44:	40033a27 	.word	0x40033a27
	...
 801aa50:	54442d18 	.word	0x54442d18
 801aa54:	3ff921fb 	.word	0x3ff921fb
 801aa58:	3ff00000 	.word	0x3ff00000
 801aa5c:	3fe00000 	.word	0x3fe00000

0801aa60 <__ieee754_pow>:
 801aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa64:	ed2d 8b06 	vpush	{d8-d10}
 801aa68:	b089      	sub	sp, #36	; 0x24
 801aa6a:	ed8d 1b00 	vstr	d1, [sp]
 801aa6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801aa72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801aa76:	ea58 0102 	orrs.w	r1, r8, r2
 801aa7a:	ec57 6b10 	vmov	r6, r7, d0
 801aa7e:	d115      	bne.n	801aaac <__ieee754_pow+0x4c>
 801aa80:	19b3      	adds	r3, r6, r6
 801aa82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801aa86:	4152      	adcs	r2, r2
 801aa88:	4299      	cmp	r1, r3
 801aa8a:	4b89      	ldr	r3, [pc, #548]	; (801acb0 <__ieee754_pow+0x250>)
 801aa8c:	4193      	sbcs	r3, r2
 801aa8e:	f080 84d2 	bcs.w	801b436 <__ieee754_pow+0x9d6>
 801aa92:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa96:	4630      	mov	r0, r6
 801aa98:	4639      	mov	r1, r7
 801aa9a:	f7e5 fc17 	bl	80002cc <__adddf3>
 801aa9e:	ec41 0b10 	vmov	d0, r0, r1
 801aaa2:	b009      	add	sp, #36	; 0x24
 801aaa4:	ecbd 8b06 	vpop	{d8-d10}
 801aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaac:	4b81      	ldr	r3, [pc, #516]	; (801acb4 <__ieee754_pow+0x254>)
 801aaae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801aab2:	429c      	cmp	r4, r3
 801aab4:	ee10 aa10 	vmov	sl, s0
 801aab8:	463d      	mov	r5, r7
 801aaba:	dc06      	bgt.n	801aaca <__ieee754_pow+0x6a>
 801aabc:	d101      	bne.n	801aac2 <__ieee754_pow+0x62>
 801aabe:	2e00      	cmp	r6, #0
 801aac0:	d1e7      	bne.n	801aa92 <__ieee754_pow+0x32>
 801aac2:	4598      	cmp	r8, r3
 801aac4:	dc01      	bgt.n	801aaca <__ieee754_pow+0x6a>
 801aac6:	d10f      	bne.n	801aae8 <__ieee754_pow+0x88>
 801aac8:	b172      	cbz	r2, 801aae8 <__ieee754_pow+0x88>
 801aaca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801aace:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801aad2:	ea55 050a 	orrs.w	r5, r5, sl
 801aad6:	d1dc      	bne.n	801aa92 <__ieee754_pow+0x32>
 801aad8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801aadc:	18db      	adds	r3, r3, r3
 801aade:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801aae2:	4152      	adcs	r2, r2
 801aae4:	429d      	cmp	r5, r3
 801aae6:	e7d0      	b.n	801aa8a <__ieee754_pow+0x2a>
 801aae8:	2d00      	cmp	r5, #0
 801aaea:	da3b      	bge.n	801ab64 <__ieee754_pow+0x104>
 801aaec:	4b72      	ldr	r3, [pc, #456]	; (801acb8 <__ieee754_pow+0x258>)
 801aaee:	4598      	cmp	r8, r3
 801aaf0:	dc51      	bgt.n	801ab96 <__ieee754_pow+0x136>
 801aaf2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801aaf6:	4598      	cmp	r8, r3
 801aaf8:	f340 84ac 	ble.w	801b454 <__ieee754_pow+0x9f4>
 801aafc:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ab00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ab04:	2b14      	cmp	r3, #20
 801ab06:	dd0f      	ble.n	801ab28 <__ieee754_pow+0xc8>
 801ab08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ab0c:	fa22 f103 	lsr.w	r1, r2, r3
 801ab10:	fa01 f303 	lsl.w	r3, r1, r3
 801ab14:	4293      	cmp	r3, r2
 801ab16:	f040 849d 	bne.w	801b454 <__ieee754_pow+0x9f4>
 801ab1a:	f001 0101 	and.w	r1, r1, #1
 801ab1e:	f1c1 0302 	rsb	r3, r1, #2
 801ab22:	9304      	str	r3, [sp, #16]
 801ab24:	b182      	cbz	r2, 801ab48 <__ieee754_pow+0xe8>
 801ab26:	e05f      	b.n	801abe8 <__ieee754_pow+0x188>
 801ab28:	2a00      	cmp	r2, #0
 801ab2a:	d15b      	bne.n	801abe4 <__ieee754_pow+0x184>
 801ab2c:	f1c3 0314 	rsb	r3, r3, #20
 801ab30:	fa48 f103 	asr.w	r1, r8, r3
 801ab34:	fa01 f303 	lsl.w	r3, r1, r3
 801ab38:	4543      	cmp	r3, r8
 801ab3a:	f040 8488 	bne.w	801b44e <__ieee754_pow+0x9ee>
 801ab3e:	f001 0101 	and.w	r1, r1, #1
 801ab42:	f1c1 0302 	rsb	r3, r1, #2
 801ab46:	9304      	str	r3, [sp, #16]
 801ab48:	4b5c      	ldr	r3, [pc, #368]	; (801acbc <__ieee754_pow+0x25c>)
 801ab4a:	4598      	cmp	r8, r3
 801ab4c:	d132      	bne.n	801abb4 <__ieee754_pow+0x154>
 801ab4e:	f1b9 0f00 	cmp.w	r9, #0
 801ab52:	f280 8478 	bge.w	801b446 <__ieee754_pow+0x9e6>
 801ab56:	4959      	ldr	r1, [pc, #356]	; (801acbc <__ieee754_pow+0x25c>)
 801ab58:	4632      	mov	r2, r6
 801ab5a:	463b      	mov	r3, r7
 801ab5c:	2000      	movs	r0, #0
 801ab5e:	f7e5 fe95 	bl	800088c <__aeabi_ddiv>
 801ab62:	e79c      	b.n	801aa9e <__ieee754_pow+0x3e>
 801ab64:	2300      	movs	r3, #0
 801ab66:	9304      	str	r3, [sp, #16]
 801ab68:	2a00      	cmp	r2, #0
 801ab6a:	d13d      	bne.n	801abe8 <__ieee754_pow+0x188>
 801ab6c:	4b51      	ldr	r3, [pc, #324]	; (801acb4 <__ieee754_pow+0x254>)
 801ab6e:	4598      	cmp	r8, r3
 801ab70:	d1ea      	bne.n	801ab48 <__ieee754_pow+0xe8>
 801ab72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ab76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ab7a:	ea53 030a 	orrs.w	r3, r3, sl
 801ab7e:	f000 845a 	beq.w	801b436 <__ieee754_pow+0x9d6>
 801ab82:	4b4f      	ldr	r3, [pc, #316]	; (801acc0 <__ieee754_pow+0x260>)
 801ab84:	429c      	cmp	r4, r3
 801ab86:	dd08      	ble.n	801ab9a <__ieee754_pow+0x13a>
 801ab88:	f1b9 0f00 	cmp.w	r9, #0
 801ab8c:	f2c0 8457 	blt.w	801b43e <__ieee754_pow+0x9de>
 801ab90:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab94:	e783      	b.n	801aa9e <__ieee754_pow+0x3e>
 801ab96:	2302      	movs	r3, #2
 801ab98:	e7e5      	b.n	801ab66 <__ieee754_pow+0x106>
 801ab9a:	f1b9 0f00 	cmp.w	r9, #0
 801ab9e:	f04f 0000 	mov.w	r0, #0
 801aba2:	f04f 0100 	mov.w	r1, #0
 801aba6:	f6bf af7a 	bge.w	801aa9e <__ieee754_pow+0x3e>
 801abaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 801abae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801abb2:	e774      	b.n	801aa9e <__ieee754_pow+0x3e>
 801abb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801abb8:	d106      	bne.n	801abc8 <__ieee754_pow+0x168>
 801abba:	4632      	mov	r2, r6
 801abbc:	463b      	mov	r3, r7
 801abbe:	4630      	mov	r0, r6
 801abc0:	4639      	mov	r1, r7
 801abc2:	f7e5 fd39 	bl	8000638 <__aeabi_dmul>
 801abc6:	e76a      	b.n	801aa9e <__ieee754_pow+0x3e>
 801abc8:	4b3e      	ldr	r3, [pc, #248]	; (801acc4 <__ieee754_pow+0x264>)
 801abca:	4599      	cmp	r9, r3
 801abcc:	d10c      	bne.n	801abe8 <__ieee754_pow+0x188>
 801abce:	2d00      	cmp	r5, #0
 801abd0:	db0a      	blt.n	801abe8 <__ieee754_pow+0x188>
 801abd2:	ec47 6b10 	vmov	d0, r6, r7
 801abd6:	b009      	add	sp, #36	; 0x24
 801abd8:	ecbd 8b06 	vpop	{d8-d10}
 801abdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abe0:	f000 be7a 	b.w	801b8d8 <__ieee754_sqrt>
 801abe4:	2300      	movs	r3, #0
 801abe6:	9304      	str	r3, [sp, #16]
 801abe8:	ec47 6b10 	vmov	d0, r6, r7
 801abec:	f001 fe3a 	bl	801c864 <fabs>
 801abf0:	ec51 0b10 	vmov	r0, r1, d0
 801abf4:	f1ba 0f00 	cmp.w	sl, #0
 801abf8:	d129      	bne.n	801ac4e <__ieee754_pow+0x1ee>
 801abfa:	b124      	cbz	r4, 801ac06 <__ieee754_pow+0x1a6>
 801abfc:	4b2f      	ldr	r3, [pc, #188]	; (801acbc <__ieee754_pow+0x25c>)
 801abfe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ac02:	429a      	cmp	r2, r3
 801ac04:	d123      	bne.n	801ac4e <__ieee754_pow+0x1ee>
 801ac06:	f1b9 0f00 	cmp.w	r9, #0
 801ac0a:	da05      	bge.n	801ac18 <__ieee754_pow+0x1b8>
 801ac0c:	4602      	mov	r2, r0
 801ac0e:	460b      	mov	r3, r1
 801ac10:	2000      	movs	r0, #0
 801ac12:	492a      	ldr	r1, [pc, #168]	; (801acbc <__ieee754_pow+0x25c>)
 801ac14:	f7e5 fe3a 	bl	800088c <__aeabi_ddiv>
 801ac18:	2d00      	cmp	r5, #0
 801ac1a:	f6bf af40 	bge.w	801aa9e <__ieee754_pow+0x3e>
 801ac1e:	9b04      	ldr	r3, [sp, #16]
 801ac20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ac24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ac28:	4323      	orrs	r3, r4
 801ac2a:	d108      	bne.n	801ac3e <__ieee754_pow+0x1de>
 801ac2c:	4602      	mov	r2, r0
 801ac2e:	460b      	mov	r3, r1
 801ac30:	4610      	mov	r0, r2
 801ac32:	4619      	mov	r1, r3
 801ac34:	f7e5 fb48 	bl	80002c8 <__aeabi_dsub>
 801ac38:	4602      	mov	r2, r0
 801ac3a:	460b      	mov	r3, r1
 801ac3c:	e78f      	b.n	801ab5e <__ieee754_pow+0xfe>
 801ac3e:	9b04      	ldr	r3, [sp, #16]
 801ac40:	2b01      	cmp	r3, #1
 801ac42:	f47f af2c 	bne.w	801aa9e <__ieee754_pow+0x3e>
 801ac46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	e727      	b.n	801aa9e <__ieee754_pow+0x3e>
 801ac4e:	0feb      	lsrs	r3, r5, #31
 801ac50:	3b01      	subs	r3, #1
 801ac52:	9306      	str	r3, [sp, #24]
 801ac54:	9a06      	ldr	r2, [sp, #24]
 801ac56:	9b04      	ldr	r3, [sp, #16]
 801ac58:	4313      	orrs	r3, r2
 801ac5a:	d102      	bne.n	801ac62 <__ieee754_pow+0x202>
 801ac5c:	4632      	mov	r2, r6
 801ac5e:	463b      	mov	r3, r7
 801ac60:	e7e6      	b.n	801ac30 <__ieee754_pow+0x1d0>
 801ac62:	4b19      	ldr	r3, [pc, #100]	; (801acc8 <__ieee754_pow+0x268>)
 801ac64:	4598      	cmp	r8, r3
 801ac66:	f340 80fb 	ble.w	801ae60 <__ieee754_pow+0x400>
 801ac6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ac6e:	4598      	cmp	r8, r3
 801ac70:	4b13      	ldr	r3, [pc, #76]	; (801acc0 <__ieee754_pow+0x260>)
 801ac72:	dd0c      	ble.n	801ac8e <__ieee754_pow+0x22e>
 801ac74:	429c      	cmp	r4, r3
 801ac76:	dc0f      	bgt.n	801ac98 <__ieee754_pow+0x238>
 801ac78:	f1b9 0f00 	cmp.w	r9, #0
 801ac7c:	da0f      	bge.n	801ac9e <__ieee754_pow+0x23e>
 801ac7e:	2000      	movs	r0, #0
 801ac80:	b009      	add	sp, #36	; 0x24
 801ac82:	ecbd 8b06 	vpop	{d8-d10}
 801ac86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac8a:	f001 bde2 	b.w	801c852 <__math_oflow>
 801ac8e:	429c      	cmp	r4, r3
 801ac90:	dbf2      	blt.n	801ac78 <__ieee754_pow+0x218>
 801ac92:	4b0a      	ldr	r3, [pc, #40]	; (801acbc <__ieee754_pow+0x25c>)
 801ac94:	429c      	cmp	r4, r3
 801ac96:	dd19      	ble.n	801accc <__ieee754_pow+0x26c>
 801ac98:	f1b9 0f00 	cmp.w	r9, #0
 801ac9c:	dcef      	bgt.n	801ac7e <__ieee754_pow+0x21e>
 801ac9e:	2000      	movs	r0, #0
 801aca0:	b009      	add	sp, #36	; 0x24
 801aca2:	ecbd 8b06 	vpop	{d8-d10}
 801aca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acaa:	f001 bdc9 	b.w	801c840 <__math_uflow>
 801acae:	bf00      	nop
 801acb0:	fff00000 	.word	0xfff00000
 801acb4:	7ff00000 	.word	0x7ff00000
 801acb8:	433fffff 	.word	0x433fffff
 801acbc:	3ff00000 	.word	0x3ff00000
 801acc0:	3fefffff 	.word	0x3fefffff
 801acc4:	3fe00000 	.word	0x3fe00000
 801acc8:	41e00000 	.word	0x41e00000
 801accc:	4b60      	ldr	r3, [pc, #384]	; (801ae50 <__ieee754_pow+0x3f0>)
 801acce:	2200      	movs	r2, #0
 801acd0:	f7e5 fafa 	bl	80002c8 <__aeabi_dsub>
 801acd4:	a354      	add	r3, pc, #336	; (adr r3, 801ae28 <__ieee754_pow+0x3c8>)
 801acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acda:	4604      	mov	r4, r0
 801acdc:	460d      	mov	r5, r1
 801acde:	f7e5 fcab 	bl	8000638 <__aeabi_dmul>
 801ace2:	a353      	add	r3, pc, #332	; (adr r3, 801ae30 <__ieee754_pow+0x3d0>)
 801ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace8:	4606      	mov	r6, r0
 801acea:	460f      	mov	r7, r1
 801acec:	4620      	mov	r0, r4
 801acee:	4629      	mov	r1, r5
 801acf0:	f7e5 fca2 	bl	8000638 <__aeabi_dmul>
 801acf4:	4b57      	ldr	r3, [pc, #348]	; (801ae54 <__ieee754_pow+0x3f4>)
 801acf6:	4682      	mov	sl, r0
 801acf8:	468b      	mov	fp, r1
 801acfa:	2200      	movs	r2, #0
 801acfc:	4620      	mov	r0, r4
 801acfe:	4629      	mov	r1, r5
 801ad00:	f7e5 fc9a 	bl	8000638 <__aeabi_dmul>
 801ad04:	4602      	mov	r2, r0
 801ad06:	460b      	mov	r3, r1
 801ad08:	a14b      	add	r1, pc, #300	; (adr r1, 801ae38 <__ieee754_pow+0x3d8>)
 801ad0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad0e:	f7e5 fadb 	bl	80002c8 <__aeabi_dsub>
 801ad12:	4622      	mov	r2, r4
 801ad14:	462b      	mov	r3, r5
 801ad16:	f7e5 fc8f 	bl	8000638 <__aeabi_dmul>
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	2000      	movs	r0, #0
 801ad20:	494d      	ldr	r1, [pc, #308]	; (801ae58 <__ieee754_pow+0x3f8>)
 801ad22:	f7e5 fad1 	bl	80002c8 <__aeabi_dsub>
 801ad26:	4622      	mov	r2, r4
 801ad28:	4680      	mov	r8, r0
 801ad2a:	4689      	mov	r9, r1
 801ad2c:	462b      	mov	r3, r5
 801ad2e:	4620      	mov	r0, r4
 801ad30:	4629      	mov	r1, r5
 801ad32:	f7e5 fc81 	bl	8000638 <__aeabi_dmul>
 801ad36:	4602      	mov	r2, r0
 801ad38:	460b      	mov	r3, r1
 801ad3a:	4640      	mov	r0, r8
 801ad3c:	4649      	mov	r1, r9
 801ad3e:	f7e5 fc7b 	bl	8000638 <__aeabi_dmul>
 801ad42:	a33f      	add	r3, pc, #252	; (adr r3, 801ae40 <__ieee754_pow+0x3e0>)
 801ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad48:	f7e5 fc76 	bl	8000638 <__aeabi_dmul>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	4650      	mov	r0, sl
 801ad52:	4659      	mov	r1, fp
 801ad54:	f7e5 fab8 	bl	80002c8 <__aeabi_dsub>
 801ad58:	4602      	mov	r2, r0
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	4680      	mov	r8, r0
 801ad5e:	4689      	mov	r9, r1
 801ad60:	4630      	mov	r0, r6
 801ad62:	4639      	mov	r1, r7
 801ad64:	f7e5 fab2 	bl	80002cc <__adddf3>
 801ad68:	2000      	movs	r0, #0
 801ad6a:	4632      	mov	r2, r6
 801ad6c:	463b      	mov	r3, r7
 801ad6e:	4604      	mov	r4, r0
 801ad70:	460d      	mov	r5, r1
 801ad72:	f7e5 faa9 	bl	80002c8 <__aeabi_dsub>
 801ad76:	4602      	mov	r2, r0
 801ad78:	460b      	mov	r3, r1
 801ad7a:	4640      	mov	r0, r8
 801ad7c:	4649      	mov	r1, r9
 801ad7e:	f7e5 faa3 	bl	80002c8 <__aeabi_dsub>
 801ad82:	9b04      	ldr	r3, [sp, #16]
 801ad84:	9a06      	ldr	r2, [sp, #24]
 801ad86:	3b01      	subs	r3, #1
 801ad88:	4313      	orrs	r3, r2
 801ad8a:	4682      	mov	sl, r0
 801ad8c:	468b      	mov	fp, r1
 801ad8e:	f040 81e7 	bne.w	801b160 <__ieee754_pow+0x700>
 801ad92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801ae48 <__ieee754_pow+0x3e8>
 801ad96:	eeb0 8a47 	vmov.f32	s16, s14
 801ad9a:	eef0 8a67 	vmov.f32	s17, s15
 801ad9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ada2:	2600      	movs	r6, #0
 801ada4:	4632      	mov	r2, r6
 801ada6:	463b      	mov	r3, r7
 801ada8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801adac:	f7e5 fa8c 	bl	80002c8 <__aeabi_dsub>
 801adb0:	4622      	mov	r2, r4
 801adb2:	462b      	mov	r3, r5
 801adb4:	f7e5 fc40 	bl	8000638 <__aeabi_dmul>
 801adb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801adbc:	4680      	mov	r8, r0
 801adbe:	4689      	mov	r9, r1
 801adc0:	4650      	mov	r0, sl
 801adc2:	4659      	mov	r1, fp
 801adc4:	f7e5 fc38 	bl	8000638 <__aeabi_dmul>
 801adc8:	4602      	mov	r2, r0
 801adca:	460b      	mov	r3, r1
 801adcc:	4640      	mov	r0, r8
 801adce:	4649      	mov	r1, r9
 801add0:	f7e5 fa7c 	bl	80002cc <__adddf3>
 801add4:	4632      	mov	r2, r6
 801add6:	463b      	mov	r3, r7
 801add8:	4680      	mov	r8, r0
 801adda:	4689      	mov	r9, r1
 801addc:	4620      	mov	r0, r4
 801adde:	4629      	mov	r1, r5
 801ade0:	f7e5 fc2a 	bl	8000638 <__aeabi_dmul>
 801ade4:	460b      	mov	r3, r1
 801ade6:	4604      	mov	r4, r0
 801ade8:	460d      	mov	r5, r1
 801adea:	4602      	mov	r2, r0
 801adec:	4649      	mov	r1, r9
 801adee:	4640      	mov	r0, r8
 801adf0:	f7e5 fa6c 	bl	80002cc <__adddf3>
 801adf4:	4b19      	ldr	r3, [pc, #100]	; (801ae5c <__ieee754_pow+0x3fc>)
 801adf6:	4299      	cmp	r1, r3
 801adf8:	ec45 4b19 	vmov	d9, r4, r5
 801adfc:	4606      	mov	r6, r0
 801adfe:	460f      	mov	r7, r1
 801ae00:	468b      	mov	fp, r1
 801ae02:	f340 82f1 	ble.w	801b3e8 <__ieee754_pow+0x988>
 801ae06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ae0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ae0e:	4303      	orrs	r3, r0
 801ae10:	f000 81e4 	beq.w	801b1dc <__ieee754_pow+0x77c>
 801ae14:	ec51 0b18 	vmov	r0, r1, d8
 801ae18:	2200      	movs	r2, #0
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	f7e5 fe7e 	bl	8000b1c <__aeabi_dcmplt>
 801ae20:	3800      	subs	r0, #0
 801ae22:	bf18      	it	ne
 801ae24:	2001      	movne	r0, #1
 801ae26:	e72b      	b.n	801ac80 <__ieee754_pow+0x220>
 801ae28:	60000000 	.word	0x60000000
 801ae2c:	3ff71547 	.word	0x3ff71547
 801ae30:	f85ddf44 	.word	0xf85ddf44
 801ae34:	3e54ae0b 	.word	0x3e54ae0b
 801ae38:	55555555 	.word	0x55555555
 801ae3c:	3fd55555 	.word	0x3fd55555
 801ae40:	652b82fe 	.word	0x652b82fe
 801ae44:	3ff71547 	.word	0x3ff71547
 801ae48:	00000000 	.word	0x00000000
 801ae4c:	bff00000 	.word	0xbff00000
 801ae50:	3ff00000 	.word	0x3ff00000
 801ae54:	3fd00000 	.word	0x3fd00000
 801ae58:	3fe00000 	.word	0x3fe00000
 801ae5c:	408fffff 	.word	0x408fffff
 801ae60:	4bd5      	ldr	r3, [pc, #852]	; (801b1b8 <__ieee754_pow+0x758>)
 801ae62:	402b      	ands	r3, r5
 801ae64:	2200      	movs	r2, #0
 801ae66:	b92b      	cbnz	r3, 801ae74 <__ieee754_pow+0x414>
 801ae68:	4bd4      	ldr	r3, [pc, #848]	; (801b1bc <__ieee754_pow+0x75c>)
 801ae6a:	f7e5 fbe5 	bl	8000638 <__aeabi_dmul>
 801ae6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ae72:	460c      	mov	r4, r1
 801ae74:	1523      	asrs	r3, r4, #20
 801ae76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ae7a:	4413      	add	r3, r2
 801ae7c:	9305      	str	r3, [sp, #20]
 801ae7e:	4bd0      	ldr	r3, [pc, #832]	; (801b1c0 <__ieee754_pow+0x760>)
 801ae80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ae84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ae88:	429c      	cmp	r4, r3
 801ae8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ae8e:	dd08      	ble.n	801aea2 <__ieee754_pow+0x442>
 801ae90:	4bcc      	ldr	r3, [pc, #816]	; (801b1c4 <__ieee754_pow+0x764>)
 801ae92:	429c      	cmp	r4, r3
 801ae94:	f340 8162 	ble.w	801b15c <__ieee754_pow+0x6fc>
 801ae98:	9b05      	ldr	r3, [sp, #20]
 801ae9a:	3301      	adds	r3, #1
 801ae9c:	9305      	str	r3, [sp, #20]
 801ae9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801aea2:	2400      	movs	r4, #0
 801aea4:	00e3      	lsls	r3, r4, #3
 801aea6:	9307      	str	r3, [sp, #28]
 801aea8:	4bc7      	ldr	r3, [pc, #796]	; (801b1c8 <__ieee754_pow+0x768>)
 801aeaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aeae:	ed93 7b00 	vldr	d7, [r3]
 801aeb2:	4629      	mov	r1, r5
 801aeb4:	ec53 2b17 	vmov	r2, r3, d7
 801aeb8:	eeb0 9a47 	vmov.f32	s18, s14
 801aebc:	eef0 9a67 	vmov.f32	s19, s15
 801aec0:	4682      	mov	sl, r0
 801aec2:	f7e5 fa01 	bl	80002c8 <__aeabi_dsub>
 801aec6:	4652      	mov	r2, sl
 801aec8:	4606      	mov	r6, r0
 801aeca:	460f      	mov	r7, r1
 801aecc:	462b      	mov	r3, r5
 801aece:	ec51 0b19 	vmov	r0, r1, d9
 801aed2:	f7e5 f9fb 	bl	80002cc <__adddf3>
 801aed6:	4602      	mov	r2, r0
 801aed8:	460b      	mov	r3, r1
 801aeda:	2000      	movs	r0, #0
 801aedc:	49bb      	ldr	r1, [pc, #748]	; (801b1cc <__ieee754_pow+0x76c>)
 801aede:	f7e5 fcd5 	bl	800088c <__aeabi_ddiv>
 801aee2:	ec41 0b1a 	vmov	d10, r0, r1
 801aee6:	4602      	mov	r2, r0
 801aee8:	460b      	mov	r3, r1
 801aeea:	4630      	mov	r0, r6
 801aeec:	4639      	mov	r1, r7
 801aeee:	f7e5 fba3 	bl	8000638 <__aeabi_dmul>
 801aef2:	2300      	movs	r3, #0
 801aef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aef8:	9302      	str	r3, [sp, #8]
 801aefa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801aefe:	46ab      	mov	fp, r5
 801af00:	106d      	asrs	r5, r5, #1
 801af02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801af06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801af0a:	ec41 0b18 	vmov	d8, r0, r1
 801af0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801af12:	2200      	movs	r2, #0
 801af14:	4640      	mov	r0, r8
 801af16:	4649      	mov	r1, r9
 801af18:	4614      	mov	r4, r2
 801af1a:	461d      	mov	r5, r3
 801af1c:	f7e5 fb8c 	bl	8000638 <__aeabi_dmul>
 801af20:	4602      	mov	r2, r0
 801af22:	460b      	mov	r3, r1
 801af24:	4630      	mov	r0, r6
 801af26:	4639      	mov	r1, r7
 801af28:	f7e5 f9ce 	bl	80002c8 <__aeabi_dsub>
 801af2c:	ec53 2b19 	vmov	r2, r3, d9
 801af30:	4606      	mov	r6, r0
 801af32:	460f      	mov	r7, r1
 801af34:	4620      	mov	r0, r4
 801af36:	4629      	mov	r1, r5
 801af38:	f7e5 f9c6 	bl	80002c8 <__aeabi_dsub>
 801af3c:	4602      	mov	r2, r0
 801af3e:	460b      	mov	r3, r1
 801af40:	4650      	mov	r0, sl
 801af42:	4659      	mov	r1, fp
 801af44:	f7e5 f9c0 	bl	80002c8 <__aeabi_dsub>
 801af48:	4642      	mov	r2, r8
 801af4a:	464b      	mov	r3, r9
 801af4c:	f7e5 fb74 	bl	8000638 <__aeabi_dmul>
 801af50:	4602      	mov	r2, r0
 801af52:	460b      	mov	r3, r1
 801af54:	4630      	mov	r0, r6
 801af56:	4639      	mov	r1, r7
 801af58:	f7e5 f9b6 	bl	80002c8 <__aeabi_dsub>
 801af5c:	ec53 2b1a 	vmov	r2, r3, d10
 801af60:	f7e5 fb6a 	bl	8000638 <__aeabi_dmul>
 801af64:	ec53 2b18 	vmov	r2, r3, d8
 801af68:	ec41 0b19 	vmov	d9, r0, r1
 801af6c:	ec51 0b18 	vmov	r0, r1, d8
 801af70:	f7e5 fb62 	bl	8000638 <__aeabi_dmul>
 801af74:	a37c      	add	r3, pc, #496	; (adr r3, 801b168 <__ieee754_pow+0x708>)
 801af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af7a:	4604      	mov	r4, r0
 801af7c:	460d      	mov	r5, r1
 801af7e:	f7e5 fb5b 	bl	8000638 <__aeabi_dmul>
 801af82:	a37b      	add	r3, pc, #492	; (adr r3, 801b170 <__ieee754_pow+0x710>)
 801af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af88:	f7e5 f9a0 	bl	80002cc <__adddf3>
 801af8c:	4622      	mov	r2, r4
 801af8e:	462b      	mov	r3, r5
 801af90:	f7e5 fb52 	bl	8000638 <__aeabi_dmul>
 801af94:	a378      	add	r3, pc, #480	; (adr r3, 801b178 <__ieee754_pow+0x718>)
 801af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9a:	f7e5 f997 	bl	80002cc <__adddf3>
 801af9e:	4622      	mov	r2, r4
 801afa0:	462b      	mov	r3, r5
 801afa2:	f7e5 fb49 	bl	8000638 <__aeabi_dmul>
 801afa6:	a376      	add	r3, pc, #472	; (adr r3, 801b180 <__ieee754_pow+0x720>)
 801afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afac:	f7e5 f98e 	bl	80002cc <__adddf3>
 801afb0:	4622      	mov	r2, r4
 801afb2:	462b      	mov	r3, r5
 801afb4:	f7e5 fb40 	bl	8000638 <__aeabi_dmul>
 801afb8:	a373      	add	r3, pc, #460	; (adr r3, 801b188 <__ieee754_pow+0x728>)
 801afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afbe:	f7e5 f985 	bl	80002cc <__adddf3>
 801afc2:	4622      	mov	r2, r4
 801afc4:	462b      	mov	r3, r5
 801afc6:	f7e5 fb37 	bl	8000638 <__aeabi_dmul>
 801afca:	a371      	add	r3, pc, #452	; (adr r3, 801b190 <__ieee754_pow+0x730>)
 801afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd0:	f7e5 f97c 	bl	80002cc <__adddf3>
 801afd4:	4622      	mov	r2, r4
 801afd6:	4606      	mov	r6, r0
 801afd8:	460f      	mov	r7, r1
 801afda:	462b      	mov	r3, r5
 801afdc:	4620      	mov	r0, r4
 801afde:	4629      	mov	r1, r5
 801afe0:	f7e5 fb2a 	bl	8000638 <__aeabi_dmul>
 801afe4:	4602      	mov	r2, r0
 801afe6:	460b      	mov	r3, r1
 801afe8:	4630      	mov	r0, r6
 801afea:	4639      	mov	r1, r7
 801afec:	f7e5 fb24 	bl	8000638 <__aeabi_dmul>
 801aff0:	4642      	mov	r2, r8
 801aff2:	4604      	mov	r4, r0
 801aff4:	460d      	mov	r5, r1
 801aff6:	464b      	mov	r3, r9
 801aff8:	ec51 0b18 	vmov	r0, r1, d8
 801affc:	f7e5 f966 	bl	80002cc <__adddf3>
 801b000:	ec53 2b19 	vmov	r2, r3, d9
 801b004:	f7e5 fb18 	bl	8000638 <__aeabi_dmul>
 801b008:	4622      	mov	r2, r4
 801b00a:	462b      	mov	r3, r5
 801b00c:	f7e5 f95e 	bl	80002cc <__adddf3>
 801b010:	4642      	mov	r2, r8
 801b012:	4682      	mov	sl, r0
 801b014:	468b      	mov	fp, r1
 801b016:	464b      	mov	r3, r9
 801b018:	4640      	mov	r0, r8
 801b01a:	4649      	mov	r1, r9
 801b01c:	f7e5 fb0c 	bl	8000638 <__aeabi_dmul>
 801b020:	4b6b      	ldr	r3, [pc, #428]	; (801b1d0 <__ieee754_pow+0x770>)
 801b022:	2200      	movs	r2, #0
 801b024:	4606      	mov	r6, r0
 801b026:	460f      	mov	r7, r1
 801b028:	f7e5 f950 	bl	80002cc <__adddf3>
 801b02c:	4652      	mov	r2, sl
 801b02e:	465b      	mov	r3, fp
 801b030:	f7e5 f94c 	bl	80002cc <__adddf3>
 801b034:	2000      	movs	r0, #0
 801b036:	4604      	mov	r4, r0
 801b038:	460d      	mov	r5, r1
 801b03a:	4602      	mov	r2, r0
 801b03c:	460b      	mov	r3, r1
 801b03e:	4640      	mov	r0, r8
 801b040:	4649      	mov	r1, r9
 801b042:	f7e5 faf9 	bl	8000638 <__aeabi_dmul>
 801b046:	4b62      	ldr	r3, [pc, #392]	; (801b1d0 <__ieee754_pow+0x770>)
 801b048:	4680      	mov	r8, r0
 801b04a:	4689      	mov	r9, r1
 801b04c:	2200      	movs	r2, #0
 801b04e:	4620      	mov	r0, r4
 801b050:	4629      	mov	r1, r5
 801b052:	f7e5 f939 	bl	80002c8 <__aeabi_dsub>
 801b056:	4632      	mov	r2, r6
 801b058:	463b      	mov	r3, r7
 801b05a:	f7e5 f935 	bl	80002c8 <__aeabi_dsub>
 801b05e:	4602      	mov	r2, r0
 801b060:	460b      	mov	r3, r1
 801b062:	4650      	mov	r0, sl
 801b064:	4659      	mov	r1, fp
 801b066:	f7e5 f92f 	bl	80002c8 <__aeabi_dsub>
 801b06a:	ec53 2b18 	vmov	r2, r3, d8
 801b06e:	f7e5 fae3 	bl	8000638 <__aeabi_dmul>
 801b072:	4622      	mov	r2, r4
 801b074:	4606      	mov	r6, r0
 801b076:	460f      	mov	r7, r1
 801b078:	462b      	mov	r3, r5
 801b07a:	ec51 0b19 	vmov	r0, r1, d9
 801b07e:	f7e5 fadb 	bl	8000638 <__aeabi_dmul>
 801b082:	4602      	mov	r2, r0
 801b084:	460b      	mov	r3, r1
 801b086:	4630      	mov	r0, r6
 801b088:	4639      	mov	r1, r7
 801b08a:	f7e5 f91f 	bl	80002cc <__adddf3>
 801b08e:	4606      	mov	r6, r0
 801b090:	460f      	mov	r7, r1
 801b092:	4602      	mov	r2, r0
 801b094:	460b      	mov	r3, r1
 801b096:	4640      	mov	r0, r8
 801b098:	4649      	mov	r1, r9
 801b09a:	f7e5 f917 	bl	80002cc <__adddf3>
 801b09e:	a33e      	add	r3, pc, #248	; (adr r3, 801b198 <__ieee754_pow+0x738>)
 801b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a4:	2000      	movs	r0, #0
 801b0a6:	4604      	mov	r4, r0
 801b0a8:	460d      	mov	r5, r1
 801b0aa:	f7e5 fac5 	bl	8000638 <__aeabi_dmul>
 801b0ae:	4642      	mov	r2, r8
 801b0b0:	ec41 0b18 	vmov	d8, r0, r1
 801b0b4:	464b      	mov	r3, r9
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	4629      	mov	r1, r5
 801b0ba:	f7e5 f905 	bl	80002c8 <__aeabi_dsub>
 801b0be:	4602      	mov	r2, r0
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	4630      	mov	r0, r6
 801b0c4:	4639      	mov	r1, r7
 801b0c6:	f7e5 f8ff 	bl	80002c8 <__aeabi_dsub>
 801b0ca:	a335      	add	r3, pc, #212	; (adr r3, 801b1a0 <__ieee754_pow+0x740>)
 801b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d0:	f7e5 fab2 	bl	8000638 <__aeabi_dmul>
 801b0d4:	a334      	add	r3, pc, #208	; (adr r3, 801b1a8 <__ieee754_pow+0x748>)
 801b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0da:	4606      	mov	r6, r0
 801b0dc:	460f      	mov	r7, r1
 801b0de:	4620      	mov	r0, r4
 801b0e0:	4629      	mov	r1, r5
 801b0e2:	f7e5 faa9 	bl	8000638 <__aeabi_dmul>
 801b0e6:	4602      	mov	r2, r0
 801b0e8:	460b      	mov	r3, r1
 801b0ea:	4630      	mov	r0, r6
 801b0ec:	4639      	mov	r1, r7
 801b0ee:	f7e5 f8ed 	bl	80002cc <__adddf3>
 801b0f2:	9a07      	ldr	r2, [sp, #28]
 801b0f4:	4b37      	ldr	r3, [pc, #220]	; (801b1d4 <__ieee754_pow+0x774>)
 801b0f6:	4413      	add	r3, r2
 801b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fc:	f7e5 f8e6 	bl	80002cc <__adddf3>
 801b100:	4682      	mov	sl, r0
 801b102:	9805      	ldr	r0, [sp, #20]
 801b104:	468b      	mov	fp, r1
 801b106:	f7e5 fa2d 	bl	8000564 <__aeabi_i2d>
 801b10a:	9a07      	ldr	r2, [sp, #28]
 801b10c:	4b32      	ldr	r3, [pc, #200]	; (801b1d8 <__ieee754_pow+0x778>)
 801b10e:	4413      	add	r3, r2
 801b110:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b114:	4606      	mov	r6, r0
 801b116:	460f      	mov	r7, r1
 801b118:	4652      	mov	r2, sl
 801b11a:	465b      	mov	r3, fp
 801b11c:	ec51 0b18 	vmov	r0, r1, d8
 801b120:	f7e5 f8d4 	bl	80002cc <__adddf3>
 801b124:	4642      	mov	r2, r8
 801b126:	464b      	mov	r3, r9
 801b128:	f7e5 f8d0 	bl	80002cc <__adddf3>
 801b12c:	4632      	mov	r2, r6
 801b12e:	463b      	mov	r3, r7
 801b130:	f7e5 f8cc 	bl	80002cc <__adddf3>
 801b134:	2000      	movs	r0, #0
 801b136:	4632      	mov	r2, r6
 801b138:	463b      	mov	r3, r7
 801b13a:	4604      	mov	r4, r0
 801b13c:	460d      	mov	r5, r1
 801b13e:	f7e5 f8c3 	bl	80002c8 <__aeabi_dsub>
 801b142:	4642      	mov	r2, r8
 801b144:	464b      	mov	r3, r9
 801b146:	f7e5 f8bf 	bl	80002c8 <__aeabi_dsub>
 801b14a:	ec53 2b18 	vmov	r2, r3, d8
 801b14e:	f7e5 f8bb 	bl	80002c8 <__aeabi_dsub>
 801b152:	4602      	mov	r2, r0
 801b154:	460b      	mov	r3, r1
 801b156:	4650      	mov	r0, sl
 801b158:	4659      	mov	r1, fp
 801b15a:	e610      	b.n	801ad7e <__ieee754_pow+0x31e>
 801b15c:	2401      	movs	r4, #1
 801b15e:	e6a1      	b.n	801aea4 <__ieee754_pow+0x444>
 801b160:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801b1b0 <__ieee754_pow+0x750>
 801b164:	e617      	b.n	801ad96 <__ieee754_pow+0x336>
 801b166:	bf00      	nop
 801b168:	4a454eef 	.word	0x4a454eef
 801b16c:	3fca7e28 	.word	0x3fca7e28
 801b170:	93c9db65 	.word	0x93c9db65
 801b174:	3fcd864a 	.word	0x3fcd864a
 801b178:	a91d4101 	.word	0xa91d4101
 801b17c:	3fd17460 	.word	0x3fd17460
 801b180:	518f264d 	.word	0x518f264d
 801b184:	3fd55555 	.word	0x3fd55555
 801b188:	db6fabff 	.word	0xdb6fabff
 801b18c:	3fdb6db6 	.word	0x3fdb6db6
 801b190:	33333303 	.word	0x33333303
 801b194:	3fe33333 	.word	0x3fe33333
 801b198:	e0000000 	.word	0xe0000000
 801b19c:	3feec709 	.word	0x3feec709
 801b1a0:	dc3a03fd 	.word	0xdc3a03fd
 801b1a4:	3feec709 	.word	0x3feec709
 801b1a8:	145b01f5 	.word	0x145b01f5
 801b1ac:	be3e2fe0 	.word	0xbe3e2fe0
 801b1b0:	00000000 	.word	0x00000000
 801b1b4:	3ff00000 	.word	0x3ff00000
 801b1b8:	7ff00000 	.word	0x7ff00000
 801b1bc:	43400000 	.word	0x43400000
 801b1c0:	0003988e 	.word	0x0003988e
 801b1c4:	000bb679 	.word	0x000bb679
 801b1c8:	08073b78 	.word	0x08073b78
 801b1cc:	3ff00000 	.word	0x3ff00000
 801b1d0:	40080000 	.word	0x40080000
 801b1d4:	08073b98 	.word	0x08073b98
 801b1d8:	08073b88 	.word	0x08073b88
 801b1dc:	a3b5      	add	r3, pc, #724	; (adr r3, 801b4b4 <__ieee754_pow+0xa54>)
 801b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e2:	4640      	mov	r0, r8
 801b1e4:	4649      	mov	r1, r9
 801b1e6:	f7e5 f871 	bl	80002cc <__adddf3>
 801b1ea:	4622      	mov	r2, r4
 801b1ec:	ec41 0b1a 	vmov	d10, r0, r1
 801b1f0:	462b      	mov	r3, r5
 801b1f2:	4630      	mov	r0, r6
 801b1f4:	4639      	mov	r1, r7
 801b1f6:	f7e5 f867 	bl	80002c8 <__aeabi_dsub>
 801b1fa:	4602      	mov	r2, r0
 801b1fc:	460b      	mov	r3, r1
 801b1fe:	ec51 0b1a 	vmov	r0, r1, d10
 801b202:	f7e5 fca9 	bl	8000b58 <__aeabi_dcmpgt>
 801b206:	2800      	cmp	r0, #0
 801b208:	f47f ae04 	bne.w	801ae14 <__ieee754_pow+0x3b4>
 801b20c:	4aa4      	ldr	r2, [pc, #656]	; (801b4a0 <__ieee754_pow+0xa40>)
 801b20e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b212:	4293      	cmp	r3, r2
 801b214:	f340 8108 	ble.w	801b428 <__ieee754_pow+0x9c8>
 801b218:	151b      	asrs	r3, r3, #20
 801b21a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b21e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b222:	fa4a f303 	asr.w	r3, sl, r3
 801b226:	445b      	add	r3, fp
 801b228:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b22c:	4e9d      	ldr	r6, [pc, #628]	; (801b4a4 <__ieee754_pow+0xa44>)
 801b22e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b232:	4116      	asrs	r6, r2
 801b234:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b238:	2000      	movs	r0, #0
 801b23a:	ea23 0106 	bic.w	r1, r3, r6
 801b23e:	f1c2 0214 	rsb	r2, r2, #20
 801b242:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b246:	fa4a fa02 	asr.w	sl, sl, r2
 801b24a:	f1bb 0f00 	cmp.w	fp, #0
 801b24e:	4602      	mov	r2, r0
 801b250:	460b      	mov	r3, r1
 801b252:	4620      	mov	r0, r4
 801b254:	4629      	mov	r1, r5
 801b256:	bfb8      	it	lt
 801b258:	f1ca 0a00 	rsblt	sl, sl, #0
 801b25c:	f7e5 f834 	bl	80002c8 <__aeabi_dsub>
 801b260:	ec41 0b19 	vmov	d9, r0, r1
 801b264:	4642      	mov	r2, r8
 801b266:	464b      	mov	r3, r9
 801b268:	ec51 0b19 	vmov	r0, r1, d9
 801b26c:	f7e5 f82e 	bl	80002cc <__adddf3>
 801b270:	a37b      	add	r3, pc, #492	; (adr r3, 801b460 <__ieee754_pow+0xa00>)
 801b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b276:	2000      	movs	r0, #0
 801b278:	4604      	mov	r4, r0
 801b27a:	460d      	mov	r5, r1
 801b27c:	f7e5 f9dc 	bl	8000638 <__aeabi_dmul>
 801b280:	ec53 2b19 	vmov	r2, r3, d9
 801b284:	4606      	mov	r6, r0
 801b286:	460f      	mov	r7, r1
 801b288:	4620      	mov	r0, r4
 801b28a:	4629      	mov	r1, r5
 801b28c:	f7e5 f81c 	bl	80002c8 <__aeabi_dsub>
 801b290:	4602      	mov	r2, r0
 801b292:	460b      	mov	r3, r1
 801b294:	4640      	mov	r0, r8
 801b296:	4649      	mov	r1, r9
 801b298:	f7e5 f816 	bl	80002c8 <__aeabi_dsub>
 801b29c:	a372      	add	r3, pc, #456	; (adr r3, 801b468 <__ieee754_pow+0xa08>)
 801b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a2:	f7e5 f9c9 	bl	8000638 <__aeabi_dmul>
 801b2a6:	a372      	add	r3, pc, #456	; (adr r3, 801b470 <__ieee754_pow+0xa10>)
 801b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ac:	4680      	mov	r8, r0
 801b2ae:	4689      	mov	r9, r1
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	4629      	mov	r1, r5
 801b2b4:	f7e5 f9c0 	bl	8000638 <__aeabi_dmul>
 801b2b8:	4602      	mov	r2, r0
 801b2ba:	460b      	mov	r3, r1
 801b2bc:	4640      	mov	r0, r8
 801b2be:	4649      	mov	r1, r9
 801b2c0:	f7e5 f804 	bl	80002cc <__adddf3>
 801b2c4:	4604      	mov	r4, r0
 801b2c6:	460d      	mov	r5, r1
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	460b      	mov	r3, r1
 801b2cc:	4630      	mov	r0, r6
 801b2ce:	4639      	mov	r1, r7
 801b2d0:	f7e4 fffc 	bl	80002cc <__adddf3>
 801b2d4:	4632      	mov	r2, r6
 801b2d6:	463b      	mov	r3, r7
 801b2d8:	4680      	mov	r8, r0
 801b2da:	4689      	mov	r9, r1
 801b2dc:	f7e4 fff4 	bl	80002c8 <__aeabi_dsub>
 801b2e0:	4602      	mov	r2, r0
 801b2e2:	460b      	mov	r3, r1
 801b2e4:	4620      	mov	r0, r4
 801b2e6:	4629      	mov	r1, r5
 801b2e8:	f7e4 ffee 	bl	80002c8 <__aeabi_dsub>
 801b2ec:	4642      	mov	r2, r8
 801b2ee:	4606      	mov	r6, r0
 801b2f0:	460f      	mov	r7, r1
 801b2f2:	464b      	mov	r3, r9
 801b2f4:	4640      	mov	r0, r8
 801b2f6:	4649      	mov	r1, r9
 801b2f8:	f7e5 f99e 	bl	8000638 <__aeabi_dmul>
 801b2fc:	a35e      	add	r3, pc, #376	; (adr r3, 801b478 <__ieee754_pow+0xa18>)
 801b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b302:	4604      	mov	r4, r0
 801b304:	460d      	mov	r5, r1
 801b306:	f7e5 f997 	bl	8000638 <__aeabi_dmul>
 801b30a:	a35d      	add	r3, pc, #372	; (adr r3, 801b480 <__ieee754_pow+0xa20>)
 801b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b310:	f7e4 ffda 	bl	80002c8 <__aeabi_dsub>
 801b314:	4622      	mov	r2, r4
 801b316:	462b      	mov	r3, r5
 801b318:	f7e5 f98e 	bl	8000638 <__aeabi_dmul>
 801b31c:	a35a      	add	r3, pc, #360	; (adr r3, 801b488 <__ieee754_pow+0xa28>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	f7e4 ffd3 	bl	80002cc <__adddf3>
 801b326:	4622      	mov	r2, r4
 801b328:	462b      	mov	r3, r5
 801b32a:	f7e5 f985 	bl	8000638 <__aeabi_dmul>
 801b32e:	a358      	add	r3, pc, #352	; (adr r3, 801b490 <__ieee754_pow+0xa30>)
 801b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b334:	f7e4 ffc8 	bl	80002c8 <__aeabi_dsub>
 801b338:	4622      	mov	r2, r4
 801b33a:	462b      	mov	r3, r5
 801b33c:	f7e5 f97c 	bl	8000638 <__aeabi_dmul>
 801b340:	a355      	add	r3, pc, #340	; (adr r3, 801b498 <__ieee754_pow+0xa38>)
 801b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b346:	f7e4 ffc1 	bl	80002cc <__adddf3>
 801b34a:	4622      	mov	r2, r4
 801b34c:	462b      	mov	r3, r5
 801b34e:	f7e5 f973 	bl	8000638 <__aeabi_dmul>
 801b352:	4602      	mov	r2, r0
 801b354:	460b      	mov	r3, r1
 801b356:	4640      	mov	r0, r8
 801b358:	4649      	mov	r1, r9
 801b35a:	f7e4 ffb5 	bl	80002c8 <__aeabi_dsub>
 801b35e:	4604      	mov	r4, r0
 801b360:	460d      	mov	r5, r1
 801b362:	4602      	mov	r2, r0
 801b364:	460b      	mov	r3, r1
 801b366:	4640      	mov	r0, r8
 801b368:	4649      	mov	r1, r9
 801b36a:	f7e5 f965 	bl	8000638 <__aeabi_dmul>
 801b36e:	2200      	movs	r2, #0
 801b370:	ec41 0b19 	vmov	d9, r0, r1
 801b374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b378:	4620      	mov	r0, r4
 801b37a:	4629      	mov	r1, r5
 801b37c:	f7e4 ffa4 	bl	80002c8 <__aeabi_dsub>
 801b380:	4602      	mov	r2, r0
 801b382:	460b      	mov	r3, r1
 801b384:	ec51 0b19 	vmov	r0, r1, d9
 801b388:	f7e5 fa80 	bl	800088c <__aeabi_ddiv>
 801b38c:	4632      	mov	r2, r6
 801b38e:	4604      	mov	r4, r0
 801b390:	460d      	mov	r5, r1
 801b392:	463b      	mov	r3, r7
 801b394:	4640      	mov	r0, r8
 801b396:	4649      	mov	r1, r9
 801b398:	f7e5 f94e 	bl	8000638 <__aeabi_dmul>
 801b39c:	4632      	mov	r2, r6
 801b39e:	463b      	mov	r3, r7
 801b3a0:	f7e4 ff94 	bl	80002cc <__adddf3>
 801b3a4:	4602      	mov	r2, r0
 801b3a6:	460b      	mov	r3, r1
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	4629      	mov	r1, r5
 801b3ac:	f7e4 ff8c 	bl	80002c8 <__aeabi_dsub>
 801b3b0:	4642      	mov	r2, r8
 801b3b2:	464b      	mov	r3, r9
 801b3b4:	f7e4 ff88 	bl	80002c8 <__aeabi_dsub>
 801b3b8:	460b      	mov	r3, r1
 801b3ba:	4602      	mov	r2, r0
 801b3bc:	493a      	ldr	r1, [pc, #232]	; (801b4a8 <__ieee754_pow+0xa48>)
 801b3be:	2000      	movs	r0, #0
 801b3c0:	f7e4 ff82 	bl	80002c8 <__aeabi_dsub>
 801b3c4:	ec41 0b10 	vmov	d0, r0, r1
 801b3c8:	ee10 3a90 	vmov	r3, s1
 801b3cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b3d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b3d4:	da2b      	bge.n	801b42e <__ieee754_pow+0x9ce>
 801b3d6:	4650      	mov	r0, sl
 801b3d8:	f001 fada 	bl	801c990 <scalbn>
 801b3dc:	ec51 0b10 	vmov	r0, r1, d0
 801b3e0:	ec53 2b18 	vmov	r2, r3, d8
 801b3e4:	f7ff bbed 	b.w	801abc2 <__ieee754_pow+0x162>
 801b3e8:	4b30      	ldr	r3, [pc, #192]	; (801b4ac <__ieee754_pow+0xa4c>)
 801b3ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b3ee:	429e      	cmp	r6, r3
 801b3f0:	f77f af0c 	ble.w	801b20c <__ieee754_pow+0x7ac>
 801b3f4:	4b2e      	ldr	r3, [pc, #184]	; (801b4b0 <__ieee754_pow+0xa50>)
 801b3f6:	440b      	add	r3, r1
 801b3f8:	4303      	orrs	r3, r0
 801b3fa:	d009      	beq.n	801b410 <__ieee754_pow+0x9b0>
 801b3fc:	ec51 0b18 	vmov	r0, r1, d8
 801b400:	2200      	movs	r2, #0
 801b402:	2300      	movs	r3, #0
 801b404:	f7e5 fb8a 	bl	8000b1c <__aeabi_dcmplt>
 801b408:	3800      	subs	r0, #0
 801b40a:	bf18      	it	ne
 801b40c:	2001      	movne	r0, #1
 801b40e:	e447      	b.n	801aca0 <__ieee754_pow+0x240>
 801b410:	4622      	mov	r2, r4
 801b412:	462b      	mov	r3, r5
 801b414:	f7e4 ff58 	bl	80002c8 <__aeabi_dsub>
 801b418:	4642      	mov	r2, r8
 801b41a:	464b      	mov	r3, r9
 801b41c:	f7e5 fb92 	bl	8000b44 <__aeabi_dcmpge>
 801b420:	2800      	cmp	r0, #0
 801b422:	f43f aef3 	beq.w	801b20c <__ieee754_pow+0x7ac>
 801b426:	e7e9      	b.n	801b3fc <__ieee754_pow+0x99c>
 801b428:	f04f 0a00 	mov.w	sl, #0
 801b42c:	e71a      	b.n	801b264 <__ieee754_pow+0x804>
 801b42e:	ec51 0b10 	vmov	r0, r1, d0
 801b432:	4619      	mov	r1, r3
 801b434:	e7d4      	b.n	801b3e0 <__ieee754_pow+0x980>
 801b436:	491c      	ldr	r1, [pc, #112]	; (801b4a8 <__ieee754_pow+0xa48>)
 801b438:	2000      	movs	r0, #0
 801b43a:	f7ff bb30 	b.w	801aa9e <__ieee754_pow+0x3e>
 801b43e:	2000      	movs	r0, #0
 801b440:	2100      	movs	r1, #0
 801b442:	f7ff bb2c 	b.w	801aa9e <__ieee754_pow+0x3e>
 801b446:	4630      	mov	r0, r6
 801b448:	4639      	mov	r1, r7
 801b44a:	f7ff bb28 	b.w	801aa9e <__ieee754_pow+0x3e>
 801b44e:	9204      	str	r2, [sp, #16]
 801b450:	f7ff bb7a 	b.w	801ab48 <__ieee754_pow+0xe8>
 801b454:	2300      	movs	r3, #0
 801b456:	f7ff bb64 	b.w	801ab22 <__ieee754_pow+0xc2>
 801b45a:	bf00      	nop
 801b45c:	f3af 8000 	nop.w
 801b460:	00000000 	.word	0x00000000
 801b464:	3fe62e43 	.word	0x3fe62e43
 801b468:	fefa39ef 	.word	0xfefa39ef
 801b46c:	3fe62e42 	.word	0x3fe62e42
 801b470:	0ca86c39 	.word	0x0ca86c39
 801b474:	be205c61 	.word	0xbe205c61
 801b478:	72bea4d0 	.word	0x72bea4d0
 801b47c:	3e663769 	.word	0x3e663769
 801b480:	c5d26bf1 	.word	0xc5d26bf1
 801b484:	3ebbbd41 	.word	0x3ebbbd41
 801b488:	af25de2c 	.word	0xaf25de2c
 801b48c:	3f11566a 	.word	0x3f11566a
 801b490:	16bebd93 	.word	0x16bebd93
 801b494:	3f66c16c 	.word	0x3f66c16c
 801b498:	5555553e 	.word	0x5555553e
 801b49c:	3fc55555 	.word	0x3fc55555
 801b4a0:	3fe00000 	.word	0x3fe00000
 801b4a4:	000fffff 	.word	0x000fffff
 801b4a8:	3ff00000 	.word	0x3ff00000
 801b4ac:	4090cbff 	.word	0x4090cbff
 801b4b0:	3f6f3400 	.word	0x3f6f3400
 801b4b4:	652b82fe 	.word	0x652b82fe
 801b4b8:	3c971547 	.word	0x3c971547
 801b4bc:	00000000 	.word	0x00000000

0801b4c0 <__ieee754_rem_pio2>:
 801b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c4:	ed2d 8b02 	vpush	{d8}
 801b4c8:	ec55 4b10 	vmov	r4, r5, d0
 801b4cc:	4bca      	ldr	r3, [pc, #808]	; (801b7f8 <__ieee754_rem_pio2+0x338>)
 801b4ce:	b08b      	sub	sp, #44	; 0x2c
 801b4d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b4d4:	4598      	cmp	r8, r3
 801b4d6:	4682      	mov	sl, r0
 801b4d8:	9502      	str	r5, [sp, #8]
 801b4da:	dc08      	bgt.n	801b4ee <__ieee754_rem_pio2+0x2e>
 801b4dc:	2200      	movs	r2, #0
 801b4de:	2300      	movs	r3, #0
 801b4e0:	ed80 0b00 	vstr	d0, [r0]
 801b4e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b4e8:	f04f 0b00 	mov.w	fp, #0
 801b4ec:	e028      	b.n	801b540 <__ieee754_rem_pio2+0x80>
 801b4ee:	4bc3      	ldr	r3, [pc, #780]	; (801b7fc <__ieee754_rem_pio2+0x33c>)
 801b4f0:	4598      	cmp	r8, r3
 801b4f2:	dc78      	bgt.n	801b5e6 <__ieee754_rem_pio2+0x126>
 801b4f4:	9b02      	ldr	r3, [sp, #8]
 801b4f6:	4ec2      	ldr	r6, [pc, #776]	; (801b800 <__ieee754_rem_pio2+0x340>)
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	ee10 0a10 	vmov	r0, s0
 801b4fe:	a3b0      	add	r3, pc, #704	; (adr r3, 801b7c0 <__ieee754_rem_pio2+0x300>)
 801b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b504:	4629      	mov	r1, r5
 801b506:	dd39      	ble.n	801b57c <__ieee754_rem_pio2+0xbc>
 801b508:	f7e4 fede 	bl	80002c8 <__aeabi_dsub>
 801b50c:	45b0      	cmp	r8, r6
 801b50e:	4604      	mov	r4, r0
 801b510:	460d      	mov	r5, r1
 801b512:	d01b      	beq.n	801b54c <__ieee754_rem_pio2+0x8c>
 801b514:	a3ac      	add	r3, pc, #688	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x308>)
 801b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b51a:	f7e4 fed5 	bl	80002c8 <__aeabi_dsub>
 801b51e:	4602      	mov	r2, r0
 801b520:	460b      	mov	r3, r1
 801b522:	e9ca 2300 	strd	r2, r3, [sl]
 801b526:	4620      	mov	r0, r4
 801b528:	4629      	mov	r1, r5
 801b52a:	f7e4 fecd 	bl	80002c8 <__aeabi_dsub>
 801b52e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x308>)
 801b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b534:	f7e4 fec8 	bl	80002c8 <__aeabi_dsub>
 801b538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b53c:	f04f 0b01 	mov.w	fp, #1
 801b540:	4658      	mov	r0, fp
 801b542:	b00b      	add	sp, #44	; 0x2c
 801b544:	ecbd 8b02 	vpop	{d8}
 801b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b54c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x310>)
 801b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b552:	f7e4 feb9 	bl	80002c8 <__aeabi_dsub>
 801b556:	a3a0      	add	r3, pc, #640	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x318>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	4604      	mov	r4, r0
 801b55e:	460d      	mov	r5, r1
 801b560:	f7e4 feb2 	bl	80002c8 <__aeabi_dsub>
 801b564:	4602      	mov	r2, r0
 801b566:	460b      	mov	r3, r1
 801b568:	e9ca 2300 	strd	r2, r3, [sl]
 801b56c:	4620      	mov	r0, r4
 801b56e:	4629      	mov	r1, r5
 801b570:	f7e4 feaa 	bl	80002c8 <__aeabi_dsub>
 801b574:	a398      	add	r3, pc, #608	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x318>)
 801b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b57a:	e7db      	b.n	801b534 <__ieee754_rem_pio2+0x74>
 801b57c:	f7e4 fea6 	bl	80002cc <__adddf3>
 801b580:	45b0      	cmp	r8, r6
 801b582:	4604      	mov	r4, r0
 801b584:	460d      	mov	r5, r1
 801b586:	d016      	beq.n	801b5b6 <__ieee754_rem_pio2+0xf6>
 801b588:	a38f      	add	r3, pc, #572	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x308>)
 801b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b58e:	f7e4 fe9d 	bl	80002cc <__adddf3>
 801b592:	4602      	mov	r2, r0
 801b594:	460b      	mov	r3, r1
 801b596:	e9ca 2300 	strd	r2, r3, [sl]
 801b59a:	4620      	mov	r0, r4
 801b59c:	4629      	mov	r1, r5
 801b59e:	f7e4 fe93 	bl	80002c8 <__aeabi_dsub>
 801b5a2:	a389      	add	r3, pc, #548	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x308>)
 801b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a8:	f7e4 fe90 	bl	80002cc <__adddf3>
 801b5ac:	f04f 3bff 	mov.w	fp, #4294967295
 801b5b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5b4:	e7c4      	b.n	801b540 <__ieee754_rem_pio2+0x80>
 801b5b6:	a386      	add	r3, pc, #536	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x310>)
 801b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5bc:	f7e4 fe86 	bl	80002cc <__adddf3>
 801b5c0:	a385      	add	r3, pc, #532	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x318>)
 801b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	460d      	mov	r5, r1
 801b5ca:	f7e4 fe7f 	bl	80002cc <__adddf3>
 801b5ce:	4602      	mov	r2, r0
 801b5d0:	460b      	mov	r3, r1
 801b5d2:	e9ca 2300 	strd	r2, r3, [sl]
 801b5d6:	4620      	mov	r0, r4
 801b5d8:	4629      	mov	r1, r5
 801b5da:	f7e4 fe75 	bl	80002c8 <__aeabi_dsub>
 801b5de:	a37e      	add	r3, pc, #504	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x318>)
 801b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e4:	e7e0      	b.n	801b5a8 <__ieee754_rem_pio2+0xe8>
 801b5e6:	4b87      	ldr	r3, [pc, #540]	; (801b804 <__ieee754_rem_pio2+0x344>)
 801b5e8:	4598      	cmp	r8, r3
 801b5ea:	f300 80d9 	bgt.w	801b7a0 <__ieee754_rem_pio2+0x2e0>
 801b5ee:	f001 f939 	bl	801c864 <fabs>
 801b5f2:	ec55 4b10 	vmov	r4, r5, d0
 801b5f6:	ee10 0a10 	vmov	r0, s0
 801b5fa:	a379      	add	r3, pc, #484	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x320>)
 801b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b600:	4629      	mov	r1, r5
 801b602:	f7e5 f819 	bl	8000638 <__aeabi_dmul>
 801b606:	4b80      	ldr	r3, [pc, #512]	; (801b808 <__ieee754_rem_pio2+0x348>)
 801b608:	2200      	movs	r2, #0
 801b60a:	f7e4 fe5f 	bl	80002cc <__adddf3>
 801b60e:	f7e5 fac3 	bl	8000b98 <__aeabi_d2iz>
 801b612:	4683      	mov	fp, r0
 801b614:	f7e4 ffa6 	bl	8000564 <__aeabi_i2d>
 801b618:	4602      	mov	r2, r0
 801b61a:	460b      	mov	r3, r1
 801b61c:	ec43 2b18 	vmov	d8, r2, r3
 801b620:	a367      	add	r3, pc, #412	; (adr r3, 801b7c0 <__ieee754_rem_pio2+0x300>)
 801b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b626:	f7e5 f807 	bl	8000638 <__aeabi_dmul>
 801b62a:	4602      	mov	r2, r0
 801b62c:	460b      	mov	r3, r1
 801b62e:	4620      	mov	r0, r4
 801b630:	4629      	mov	r1, r5
 801b632:	f7e4 fe49 	bl	80002c8 <__aeabi_dsub>
 801b636:	a364      	add	r3, pc, #400	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x308>)
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	4606      	mov	r6, r0
 801b63e:	460f      	mov	r7, r1
 801b640:	ec51 0b18 	vmov	r0, r1, d8
 801b644:	f7e4 fff8 	bl	8000638 <__aeabi_dmul>
 801b648:	f1bb 0f1f 	cmp.w	fp, #31
 801b64c:	4604      	mov	r4, r0
 801b64e:	460d      	mov	r5, r1
 801b650:	dc0d      	bgt.n	801b66e <__ieee754_rem_pio2+0x1ae>
 801b652:	4b6e      	ldr	r3, [pc, #440]	; (801b80c <__ieee754_rem_pio2+0x34c>)
 801b654:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b65c:	4543      	cmp	r3, r8
 801b65e:	d006      	beq.n	801b66e <__ieee754_rem_pio2+0x1ae>
 801b660:	4622      	mov	r2, r4
 801b662:	462b      	mov	r3, r5
 801b664:	4630      	mov	r0, r6
 801b666:	4639      	mov	r1, r7
 801b668:	f7e4 fe2e 	bl	80002c8 <__aeabi_dsub>
 801b66c:	e00f      	b.n	801b68e <__ieee754_rem_pio2+0x1ce>
 801b66e:	462b      	mov	r3, r5
 801b670:	4622      	mov	r2, r4
 801b672:	4630      	mov	r0, r6
 801b674:	4639      	mov	r1, r7
 801b676:	f7e4 fe27 	bl	80002c8 <__aeabi_dsub>
 801b67a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b67e:	9303      	str	r3, [sp, #12]
 801b680:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b684:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b688:	f1b8 0f10 	cmp.w	r8, #16
 801b68c:	dc02      	bgt.n	801b694 <__ieee754_rem_pio2+0x1d4>
 801b68e:	e9ca 0100 	strd	r0, r1, [sl]
 801b692:	e039      	b.n	801b708 <__ieee754_rem_pio2+0x248>
 801b694:	a34e      	add	r3, pc, #312	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x310>)
 801b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b69a:	ec51 0b18 	vmov	r0, r1, d8
 801b69e:	f7e4 ffcb 	bl	8000638 <__aeabi_dmul>
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	460d      	mov	r5, r1
 801b6a6:	4602      	mov	r2, r0
 801b6a8:	460b      	mov	r3, r1
 801b6aa:	4630      	mov	r0, r6
 801b6ac:	4639      	mov	r1, r7
 801b6ae:	f7e4 fe0b 	bl	80002c8 <__aeabi_dsub>
 801b6b2:	4602      	mov	r2, r0
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	4680      	mov	r8, r0
 801b6b8:	4689      	mov	r9, r1
 801b6ba:	4630      	mov	r0, r6
 801b6bc:	4639      	mov	r1, r7
 801b6be:	f7e4 fe03 	bl	80002c8 <__aeabi_dsub>
 801b6c2:	4622      	mov	r2, r4
 801b6c4:	462b      	mov	r3, r5
 801b6c6:	f7e4 fdff 	bl	80002c8 <__aeabi_dsub>
 801b6ca:	a343      	add	r3, pc, #268	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x318>)
 801b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d0:	4604      	mov	r4, r0
 801b6d2:	460d      	mov	r5, r1
 801b6d4:	ec51 0b18 	vmov	r0, r1, d8
 801b6d8:	f7e4 ffae 	bl	8000638 <__aeabi_dmul>
 801b6dc:	4622      	mov	r2, r4
 801b6de:	462b      	mov	r3, r5
 801b6e0:	f7e4 fdf2 	bl	80002c8 <__aeabi_dsub>
 801b6e4:	4602      	mov	r2, r0
 801b6e6:	460b      	mov	r3, r1
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	460d      	mov	r5, r1
 801b6ec:	4640      	mov	r0, r8
 801b6ee:	4649      	mov	r1, r9
 801b6f0:	f7e4 fdea 	bl	80002c8 <__aeabi_dsub>
 801b6f4:	9a03      	ldr	r2, [sp, #12]
 801b6f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b6fa:	1ad3      	subs	r3, r2, r3
 801b6fc:	2b31      	cmp	r3, #49	; 0x31
 801b6fe:	dc24      	bgt.n	801b74a <__ieee754_rem_pio2+0x28a>
 801b700:	e9ca 0100 	strd	r0, r1, [sl]
 801b704:	4646      	mov	r6, r8
 801b706:	464f      	mov	r7, r9
 801b708:	e9da 8900 	ldrd	r8, r9, [sl]
 801b70c:	4630      	mov	r0, r6
 801b70e:	4642      	mov	r2, r8
 801b710:	464b      	mov	r3, r9
 801b712:	4639      	mov	r1, r7
 801b714:	f7e4 fdd8 	bl	80002c8 <__aeabi_dsub>
 801b718:	462b      	mov	r3, r5
 801b71a:	4622      	mov	r2, r4
 801b71c:	f7e4 fdd4 	bl	80002c8 <__aeabi_dsub>
 801b720:	9b02      	ldr	r3, [sp, #8]
 801b722:	2b00      	cmp	r3, #0
 801b724:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b728:	f6bf af0a 	bge.w	801b540 <__ieee754_rem_pio2+0x80>
 801b72c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b730:	f8ca 3004 	str.w	r3, [sl, #4]
 801b734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b738:	f8ca 8000 	str.w	r8, [sl]
 801b73c:	f8ca 0008 	str.w	r0, [sl, #8]
 801b740:	f8ca 300c 	str.w	r3, [sl, #12]
 801b744:	f1cb 0b00 	rsb	fp, fp, #0
 801b748:	e6fa      	b.n	801b540 <__ieee754_rem_pio2+0x80>
 801b74a:	a327      	add	r3, pc, #156	; (adr r3, 801b7e8 <__ieee754_rem_pio2+0x328>)
 801b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b750:	ec51 0b18 	vmov	r0, r1, d8
 801b754:	f7e4 ff70 	bl	8000638 <__aeabi_dmul>
 801b758:	4604      	mov	r4, r0
 801b75a:	460d      	mov	r5, r1
 801b75c:	4602      	mov	r2, r0
 801b75e:	460b      	mov	r3, r1
 801b760:	4640      	mov	r0, r8
 801b762:	4649      	mov	r1, r9
 801b764:	f7e4 fdb0 	bl	80002c8 <__aeabi_dsub>
 801b768:	4602      	mov	r2, r0
 801b76a:	460b      	mov	r3, r1
 801b76c:	4606      	mov	r6, r0
 801b76e:	460f      	mov	r7, r1
 801b770:	4640      	mov	r0, r8
 801b772:	4649      	mov	r1, r9
 801b774:	f7e4 fda8 	bl	80002c8 <__aeabi_dsub>
 801b778:	4622      	mov	r2, r4
 801b77a:	462b      	mov	r3, r5
 801b77c:	f7e4 fda4 	bl	80002c8 <__aeabi_dsub>
 801b780:	a31b      	add	r3, pc, #108	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x330>)
 801b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b786:	4604      	mov	r4, r0
 801b788:	460d      	mov	r5, r1
 801b78a:	ec51 0b18 	vmov	r0, r1, d8
 801b78e:	f7e4 ff53 	bl	8000638 <__aeabi_dmul>
 801b792:	4622      	mov	r2, r4
 801b794:	462b      	mov	r3, r5
 801b796:	f7e4 fd97 	bl	80002c8 <__aeabi_dsub>
 801b79a:	4604      	mov	r4, r0
 801b79c:	460d      	mov	r5, r1
 801b79e:	e75f      	b.n	801b660 <__ieee754_rem_pio2+0x1a0>
 801b7a0:	4b1b      	ldr	r3, [pc, #108]	; (801b810 <__ieee754_rem_pio2+0x350>)
 801b7a2:	4598      	cmp	r8, r3
 801b7a4:	dd36      	ble.n	801b814 <__ieee754_rem_pio2+0x354>
 801b7a6:	ee10 2a10 	vmov	r2, s0
 801b7aa:	462b      	mov	r3, r5
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	f7e4 fd8a 	bl	80002c8 <__aeabi_dsub>
 801b7b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b7b8:	e9ca 0100 	strd	r0, r1, [sl]
 801b7bc:	e694      	b.n	801b4e8 <__ieee754_rem_pio2+0x28>
 801b7be:	bf00      	nop
 801b7c0:	54400000 	.word	0x54400000
 801b7c4:	3ff921fb 	.word	0x3ff921fb
 801b7c8:	1a626331 	.word	0x1a626331
 801b7cc:	3dd0b461 	.word	0x3dd0b461
 801b7d0:	1a600000 	.word	0x1a600000
 801b7d4:	3dd0b461 	.word	0x3dd0b461
 801b7d8:	2e037073 	.word	0x2e037073
 801b7dc:	3ba3198a 	.word	0x3ba3198a
 801b7e0:	6dc9c883 	.word	0x6dc9c883
 801b7e4:	3fe45f30 	.word	0x3fe45f30
 801b7e8:	2e000000 	.word	0x2e000000
 801b7ec:	3ba3198a 	.word	0x3ba3198a
 801b7f0:	252049c1 	.word	0x252049c1
 801b7f4:	397b839a 	.word	0x397b839a
 801b7f8:	3fe921fb 	.word	0x3fe921fb
 801b7fc:	4002d97b 	.word	0x4002d97b
 801b800:	3ff921fb 	.word	0x3ff921fb
 801b804:	413921fb 	.word	0x413921fb
 801b808:	3fe00000 	.word	0x3fe00000
 801b80c:	08073ba8 	.word	0x08073ba8
 801b810:	7fefffff 	.word	0x7fefffff
 801b814:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b818:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b81c:	ee10 0a10 	vmov	r0, s0
 801b820:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b824:	ee10 6a10 	vmov	r6, s0
 801b828:	460f      	mov	r7, r1
 801b82a:	f7e5 f9b5 	bl	8000b98 <__aeabi_d2iz>
 801b82e:	f7e4 fe99 	bl	8000564 <__aeabi_i2d>
 801b832:	4602      	mov	r2, r0
 801b834:	460b      	mov	r3, r1
 801b836:	4630      	mov	r0, r6
 801b838:	4639      	mov	r1, r7
 801b83a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b83e:	f7e4 fd43 	bl	80002c8 <__aeabi_dsub>
 801b842:	4b23      	ldr	r3, [pc, #140]	; (801b8d0 <__ieee754_rem_pio2+0x410>)
 801b844:	2200      	movs	r2, #0
 801b846:	f7e4 fef7 	bl	8000638 <__aeabi_dmul>
 801b84a:	460f      	mov	r7, r1
 801b84c:	4606      	mov	r6, r0
 801b84e:	f7e5 f9a3 	bl	8000b98 <__aeabi_d2iz>
 801b852:	f7e4 fe87 	bl	8000564 <__aeabi_i2d>
 801b856:	4602      	mov	r2, r0
 801b858:	460b      	mov	r3, r1
 801b85a:	4630      	mov	r0, r6
 801b85c:	4639      	mov	r1, r7
 801b85e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b862:	f7e4 fd31 	bl	80002c8 <__aeabi_dsub>
 801b866:	4b1a      	ldr	r3, [pc, #104]	; (801b8d0 <__ieee754_rem_pio2+0x410>)
 801b868:	2200      	movs	r2, #0
 801b86a:	f7e4 fee5 	bl	8000638 <__aeabi_dmul>
 801b86e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b872:	ad04      	add	r5, sp, #16
 801b874:	f04f 0803 	mov.w	r8, #3
 801b878:	46a9      	mov	r9, r5
 801b87a:	2600      	movs	r6, #0
 801b87c:	2700      	movs	r7, #0
 801b87e:	4632      	mov	r2, r6
 801b880:	463b      	mov	r3, r7
 801b882:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b886:	46c3      	mov	fp, r8
 801b888:	3d08      	subs	r5, #8
 801b88a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b88e:	f7e5 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 801b892:	2800      	cmp	r0, #0
 801b894:	d1f3      	bne.n	801b87e <__ieee754_rem_pio2+0x3be>
 801b896:	4b0f      	ldr	r3, [pc, #60]	; (801b8d4 <__ieee754_rem_pio2+0x414>)
 801b898:	9301      	str	r3, [sp, #4]
 801b89a:	2302      	movs	r3, #2
 801b89c:	9300      	str	r3, [sp, #0]
 801b89e:	4622      	mov	r2, r4
 801b8a0:	465b      	mov	r3, fp
 801b8a2:	4651      	mov	r1, sl
 801b8a4:	4648      	mov	r0, r9
 801b8a6:	f000 f993 	bl	801bbd0 <__kernel_rem_pio2>
 801b8aa:	9b02      	ldr	r3, [sp, #8]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	4683      	mov	fp, r0
 801b8b0:	f6bf ae46 	bge.w	801b540 <__ieee754_rem_pio2+0x80>
 801b8b4:	e9da 2100 	ldrd	r2, r1, [sl]
 801b8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8bc:	e9ca 2300 	strd	r2, r3, [sl]
 801b8c0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b8c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8c8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b8cc:	e73a      	b.n	801b744 <__ieee754_rem_pio2+0x284>
 801b8ce:	bf00      	nop
 801b8d0:	41700000 	.word	0x41700000
 801b8d4:	08073c28 	.word	0x08073c28

0801b8d8 <__ieee754_sqrt>:
 801b8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8dc:	ec55 4b10 	vmov	r4, r5, d0
 801b8e0:	4e55      	ldr	r6, [pc, #340]	; (801ba38 <__ieee754_sqrt+0x160>)
 801b8e2:	43ae      	bics	r6, r5
 801b8e4:	ee10 0a10 	vmov	r0, s0
 801b8e8:	ee10 3a10 	vmov	r3, s0
 801b8ec:	462a      	mov	r2, r5
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	d110      	bne.n	801b914 <__ieee754_sqrt+0x3c>
 801b8f2:	ee10 2a10 	vmov	r2, s0
 801b8f6:	462b      	mov	r3, r5
 801b8f8:	f7e4 fe9e 	bl	8000638 <__aeabi_dmul>
 801b8fc:	4602      	mov	r2, r0
 801b8fe:	460b      	mov	r3, r1
 801b900:	4620      	mov	r0, r4
 801b902:	4629      	mov	r1, r5
 801b904:	f7e4 fce2 	bl	80002cc <__adddf3>
 801b908:	4604      	mov	r4, r0
 801b90a:	460d      	mov	r5, r1
 801b90c:	ec45 4b10 	vmov	d0, r4, r5
 801b910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b914:	2d00      	cmp	r5, #0
 801b916:	dc10      	bgt.n	801b93a <__ieee754_sqrt+0x62>
 801b918:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b91c:	4330      	orrs	r0, r6
 801b91e:	d0f5      	beq.n	801b90c <__ieee754_sqrt+0x34>
 801b920:	b15d      	cbz	r5, 801b93a <__ieee754_sqrt+0x62>
 801b922:	ee10 2a10 	vmov	r2, s0
 801b926:	462b      	mov	r3, r5
 801b928:	ee10 0a10 	vmov	r0, s0
 801b92c:	f7e4 fccc 	bl	80002c8 <__aeabi_dsub>
 801b930:	4602      	mov	r2, r0
 801b932:	460b      	mov	r3, r1
 801b934:	f7e4 ffaa 	bl	800088c <__aeabi_ddiv>
 801b938:	e7e6      	b.n	801b908 <__ieee754_sqrt+0x30>
 801b93a:	1512      	asrs	r2, r2, #20
 801b93c:	d074      	beq.n	801ba28 <__ieee754_sqrt+0x150>
 801b93e:	07d4      	lsls	r4, r2, #31
 801b940:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b944:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801b948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b94c:	bf5e      	ittt	pl
 801b94e:	0fda      	lsrpl	r2, r3, #31
 801b950:	005b      	lslpl	r3, r3, #1
 801b952:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801b956:	2400      	movs	r4, #0
 801b958:	0fda      	lsrs	r2, r3, #31
 801b95a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b95e:	107f      	asrs	r7, r7, #1
 801b960:	005b      	lsls	r3, r3, #1
 801b962:	2516      	movs	r5, #22
 801b964:	4620      	mov	r0, r4
 801b966:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801b96a:	1886      	adds	r6, r0, r2
 801b96c:	428e      	cmp	r6, r1
 801b96e:	bfde      	ittt	le
 801b970:	1b89      	suble	r1, r1, r6
 801b972:	18b0      	addle	r0, r6, r2
 801b974:	18a4      	addle	r4, r4, r2
 801b976:	0049      	lsls	r1, r1, #1
 801b978:	3d01      	subs	r5, #1
 801b97a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801b97e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801b982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b986:	d1f0      	bne.n	801b96a <__ieee754_sqrt+0x92>
 801b988:	462a      	mov	r2, r5
 801b98a:	f04f 0e20 	mov.w	lr, #32
 801b98e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b992:	4281      	cmp	r1, r0
 801b994:	eb06 0c05 	add.w	ip, r6, r5
 801b998:	dc02      	bgt.n	801b9a0 <__ieee754_sqrt+0xc8>
 801b99a:	d113      	bne.n	801b9c4 <__ieee754_sqrt+0xec>
 801b99c:	459c      	cmp	ip, r3
 801b99e:	d811      	bhi.n	801b9c4 <__ieee754_sqrt+0xec>
 801b9a0:	f1bc 0f00 	cmp.w	ip, #0
 801b9a4:	eb0c 0506 	add.w	r5, ip, r6
 801b9a8:	da43      	bge.n	801ba32 <__ieee754_sqrt+0x15a>
 801b9aa:	2d00      	cmp	r5, #0
 801b9ac:	db41      	blt.n	801ba32 <__ieee754_sqrt+0x15a>
 801b9ae:	f100 0801 	add.w	r8, r0, #1
 801b9b2:	1a09      	subs	r1, r1, r0
 801b9b4:	459c      	cmp	ip, r3
 801b9b6:	bf88      	it	hi
 801b9b8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801b9bc:	eba3 030c 	sub.w	r3, r3, ip
 801b9c0:	4432      	add	r2, r6
 801b9c2:	4640      	mov	r0, r8
 801b9c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801b9c8:	f1be 0e01 	subs.w	lr, lr, #1
 801b9cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801b9d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b9d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b9d8:	d1db      	bne.n	801b992 <__ieee754_sqrt+0xba>
 801b9da:	430b      	orrs	r3, r1
 801b9dc:	d006      	beq.n	801b9ec <__ieee754_sqrt+0x114>
 801b9de:	1c50      	adds	r0, r2, #1
 801b9e0:	bf13      	iteet	ne
 801b9e2:	3201      	addne	r2, #1
 801b9e4:	3401      	addeq	r4, #1
 801b9e6:	4672      	moveq	r2, lr
 801b9e8:	f022 0201 	bicne.w	r2, r2, #1
 801b9ec:	1063      	asrs	r3, r4, #1
 801b9ee:	0852      	lsrs	r2, r2, #1
 801b9f0:	07e1      	lsls	r1, r4, #31
 801b9f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b9f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b9fa:	bf48      	it	mi
 801b9fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ba00:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ba04:	4614      	mov	r4, r2
 801ba06:	e781      	b.n	801b90c <__ieee754_sqrt+0x34>
 801ba08:	0ad9      	lsrs	r1, r3, #11
 801ba0a:	3815      	subs	r0, #21
 801ba0c:	055b      	lsls	r3, r3, #21
 801ba0e:	2900      	cmp	r1, #0
 801ba10:	d0fa      	beq.n	801ba08 <__ieee754_sqrt+0x130>
 801ba12:	02cd      	lsls	r5, r1, #11
 801ba14:	d50a      	bpl.n	801ba2c <__ieee754_sqrt+0x154>
 801ba16:	f1c2 0420 	rsb	r4, r2, #32
 801ba1a:	fa23 f404 	lsr.w	r4, r3, r4
 801ba1e:	1e55      	subs	r5, r2, #1
 801ba20:	4093      	lsls	r3, r2
 801ba22:	4321      	orrs	r1, r4
 801ba24:	1b42      	subs	r2, r0, r5
 801ba26:	e78a      	b.n	801b93e <__ieee754_sqrt+0x66>
 801ba28:	4610      	mov	r0, r2
 801ba2a:	e7f0      	b.n	801ba0e <__ieee754_sqrt+0x136>
 801ba2c:	0049      	lsls	r1, r1, #1
 801ba2e:	3201      	adds	r2, #1
 801ba30:	e7ef      	b.n	801ba12 <__ieee754_sqrt+0x13a>
 801ba32:	4680      	mov	r8, r0
 801ba34:	e7bd      	b.n	801b9b2 <__ieee754_sqrt+0xda>
 801ba36:	bf00      	nop
 801ba38:	7ff00000 	.word	0x7ff00000
 801ba3c:	00000000 	.word	0x00000000

0801ba40 <__kernel_cos>:
 801ba40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba44:	ec57 6b10 	vmov	r6, r7, d0
 801ba48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801ba4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801ba50:	ed8d 1b00 	vstr	d1, [sp]
 801ba54:	da07      	bge.n	801ba66 <__kernel_cos+0x26>
 801ba56:	ee10 0a10 	vmov	r0, s0
 801ba5a:	4639      	mov	r1, r7
 801ba5c:	f7e5 f89c 	bl	8000b98 <__aeabi_d2iz>
 801ba60:	2800      	cmp	r0, #0
 801ba62:	f000 8088 	beq.w	801bb76 <__kernel_cos+0x136>
 801ba66:	4632      	mov	r2, r6
 801ba68:	463b      	mov	r3, r7
 801ba6a:	4630      	mov	r0, r6
 801ba6c:	4639      	mov	r1, r7
 801ba6e:	f7e4 fde3 	bl	8000638 <__aeabi_dmul>
 801ba72:	4b51      	ldr	r3, [pc, #324]	; (801bbb8 <__kernel_cos+0x178>)
 801ba74:	2200      	movs	r2, #0
 801ba76:	4604      	mov	r4, r0
 801ba78:	460d      	mov	r5, r1
 801ba7a:	f7e4 fddd 	bl	8000638 <__aeabi_dmul>
 801ba7e:	a340      	add	r3, pc, #256	; (adr r3, 801bb80 <__kernel_cos+0x140>)
 801ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba84:	4682      	mov	sl, r0
 801ba86:	468b      	mov	fp, r1
 801ba88:	4620      	mov	r0, r4
 801ba8a:	4629      	mov	r1, r5
 801ba8c:	f7e4 fdd4 	bl	8000638 <__aeabi_dmul>
 801ba90:	a33d      	add	r3, pc, #244	; (adr r3, 801bb88 <__kernel_cos+0x148>)
 801ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba96:	f7e4 fc19 	bl	80002cc <__adddf3>
 801ba9a:	4622      	mov	r2, r4
 801ba9c:	462b      	mov	r3, r5
 801ba9e:	f7e4 fdcb 	bl	8000638 <__aeabi_dmul>
 801baa2:	a33b      	add	r3, pc, #236	; (adr r3, 801bb90 <__kernel_cos+0x150>)
 801baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa8:	f7e4 fc0e 	bl	80002c8 <__aeabi_dsub>
 801baac:	4622      	mov	r2, r4
 801baae:	462b      	mov	r3, r5
 801bab0:	f7e4 fdc2 	bl	8000638 <__aeabi_dmul>
 801bab4:	a338      	add	r3, pc, #224	; (adr r3, 801bb98 <__kernel_cos+0x158>)
 801bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baba:	f7e4 fc07 	bl	80002cc <__adddf3>
 801babe:	4622      	mov	r2, r4
 801bac0:	462b      	mov	r3, r5
 801bac2:	f7e4 fdb9 	bl	8000638 <__aeabi_dmul>
 801bac6:	a336      	add	r3, pc, #216	; (adr r3, 801bba0 <__kernel_cos+0x160>)
 801bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bacc:	f7e4 fbfc 	bl	80002c8 <__aeabi_dsub>
 801bad0:	4622      	mov	r2, r4
 801bad2:	462b      	mov	r3, r5
 801bad4:	f7e4 fdb0 	bl	8000638 <__aeabi_dmul>
 801bad8:	a333      	add	r3, pc, #204	; (adr r3, 801bba8 <__kernel_cos+0x168>)
 801bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bade:	f7e4 fbf5 	bl	80002cc <__adddf3>
 801bae2:	4622      	mov	r2, r4
 801bae4:	462b      	mov	r3, r5
 801bae6:	f7e4 fda7 	bl	8000638 <__aeabi_dmul>
 801baea:	4622      	mov	r2, r4
 801baec:	462b      	mov	r3, r5
 801baee:	f7e4 fda3 	bl	8000638 <__aeabi_dmul>
 801baf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801baf6:	4604      	mov	r4, r0
 801baf8:	460d      	mov	r5, r1
 801bafa:	4630      	mov	r0, r6
 801bafc:	4639      	mov	r1, r7
 801bafe:	f7e4 fd9b 	bl	8000638 <__aeabi_dmul>
 801bb02:	460b      	mov	r3, r1
 801bb04:	4602      	mov	r2, r0
 801bb06:	4629      	mov	r1, r5
 801bb08:	4620      	mov	r0, r4
 801bb0a:	f7e4 fbdd 	bl	80002c8 <__aeabi_dsub>
 801bb0e:	4b2b      	ldr	r3, [pc, #172]	; (801bbbc <__kernel_cos+0x17c>)
 801bb10:	4598      	cmp	r8, r3
 801bb12:	4606      	mov	r6, r0
 801bb14:	460f      	mov	r7, r1
 801bb16:	dc10      	bgt.n	801bb3a <__kernel_cos+0xfa>
 801bb18:	4602      	mov	r2, r0
 801bb1a:	460b      	mov	r3, r1
 801bb1c:	4650      	mov	r0, sl
 801bb1e:	4659      	mov	r1, fp
 801bb20:	f7e4 fbd2 	bl	80002c8 <__aeabi_dsub>
 801bb24:	460b      	mov	r3, r1
 801bb26:	4926      	ldr	r1, [pc, #152]	; (801bbc0 <__kernel_cos+0x180>)
 801bb28:	4602      	mov	r2, r0
 801bb2a:	2000      	movs	r0, #0
 801bb2c:	f7e4 fbcc 	bl	80002c8 <__aeabi_dsub>
 801bb30:	ec41 0b10 	vmov	d0, r0, r1
 801bb34:	b003      	add	sp, #12
 801bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb3a:	4b22      	ldr	r3, [pc, #136]	; (801bbc4 <__kernel_cos+0x184>)
 801bb3c:	4920      	ldr	r1, [pc, #128]	; (801bbc0 <__kernel_cos+0x180>)
 801bb3e:	4598      	cmp	r8, r3
 801bb40:	bfcc      	ite	gt
 801bb42:	4d21      	ldrgt	r5, [pc, #132]	; (801bbc8 <__kernel_cos+0x188>)
 801bb44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801bb48:	2400      	movs	r4, #0
 801bb4a:	4622      	mov	r2, r4
 801bb4c:	462b      	mov	r3, r5
 801bb4e:	2000      	movs	r0, #0
 801bb50:	f7e4 fbba 	bl	80002c8 <__aeabi_dsub>
 801bb54:	4622      	mov	r2, r4
 801bb56:	4680      	mov	r8, r0
 801bb58:	4689      	mov	r9, r1
 801bb5a:	462b      	mov	r3, r5
 801bb5c:	4650      	mov	r0, sl
 801bb5e:	4659      	mov	r1, fp
 801bb60:	f7e4 fbb2 	bl	80002c8 <__aeabi_dsub>
 801bb64:	4632      	mov	r2, r6
 801bb66:	463b      	mov	r3, r7
 801bb68:	f7e4 fbae 	bl	80002c8 <__aeabi_dsub>
 801bb6c:	4602      	mov	r2, r0
 801bb6e:	460b      	mov	r3, r1
 801bb70:	4640      	mov	r0, r8
 801bb72:	4649      	mov	r1, r9
 801bb74:	e7da      	b.n	801bb2c <__kernel_cos+0xec>
 801bb76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801bbb0 <__kernel_cos+0x170>
 801bb7a:	e7db      	b.n	801bb34 <__kernel_cos+0xf4>
 801bb7c:	f3af 8000 	nop.w
 801bb80:	be8838d4 	.word	0xbe8838d4
 801bb84:	bda8fae9 	.word	0xbda8fae9
 801bb88:	bdb4b1c4 	.word	0xbdb4b1c4
 801bb8c:	3e21ee9e 	.word	0x3e21ee9e
 801bb90:	809c52ad 	.word	0x809c52ad
 801bb94:	3e927e4f 	.word	0x3e927e4f
 801bb98:	19cb1590 	.word	0x19cb1590
 801bb9c:	3efa01a0 	.word	0x3efa01a0
 801bba0:	16c15177 	.word	0x16c15177
 801bba4:	3f56c16c 	.word	0x3f56c16c
 801bba8:	5555554c 	.word	0x5555554c
 801bbac:	3fa55555 	.word	0x3fa55555
 801bbb0:	00000000 	.word	0x00000000
 801bbb4:	3ff00000 	.word	0x3ff00000
 801bbb8:	3fe00000 	.word	0x3fe00000
 801bbbc:	3fd33332 	.word	0x3fd33332
 801bbc0:	3ff00000 	.word	0x3ff00000
 801bbc4:	3fe90000 	.word	0x3fe90000
 801bbc8:	3fd20000 	.word	0x3fd20000
 801bbcc:	00000000 	.word	0x00000000

0801bbd0 <__kernel_rem_pio2>:
 801bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd4:	ed2d 8b02 	vpush	{d8}
 801bbd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801bbdc:	f112 0f14 	cmn.w	r2, #20
 801bbe0:	9308      	str	r3, [sp, #32]
 801bbe2:	9101      	str	r1, [sp, #4]
 801bbe4:	4bc4      	ldr	r3, [pc, #784]	; (801bef8 <__kernel_rem_pio2+0x328>)
 801bbe6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801bbe8:	900b      	str	r0, [sp, #44]	; 0x2c
 801bbea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bbee:	9302      	str	r3, [sp, #8]
 801bbf0:	9b08      	ldr	r3, [sp, #32]
 801bbf2:	f103 33ff 	add.w	r3, r3, #4294967295
 801bbf6:	bfa8      	it	ge
 801bbf8:	1ed4      	subge	r4, r2, #3
 801bbfa:	9306      	str	r3, [sp, #24]
 801bbfc:	bfb2      	itee	lt
 801bbfe:	2400      	movlt	r4, #0
 801bc00:	2318      	movge	r3, #24
 801bc02:	fb94 f4f3 	sdivge	r4, r4, r3
 801bc06:	f06f 0317 	mvn.w	r3, #23
 801bc0a:	fb04 3303 	mla	r3, r4, r3, r3
 801bc0e:	eb03 0a02 	add.w	sl, r3, r2
 801bc12:	9b02      	ldr	r3, [sp, #8]
 801bc14:	9a06      	ldr	r2, [sp, #24]
 801bc16:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801bee8 <__kernel_rem_pio2+0x318>
 801bc1a:	eb03 0802 	add.w	r8, r3, r2
 801bc1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801bc20:	1aa7      	subs	r7, r4, r2
 801bc22:	ae22      	add	r6, sp, #136	; 0x88
 801bc24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801bc28:	2500      	movs	r5, #0
 801bc2a:	4545      	cmp	r5, r8
 801bc2c:	dd13      	ble.n	801bc56 <__kernel_rem_pio2+0x86>
 801bc2e:	9b08      	ldr	r3, [sp, #32]
 801bc30:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801bee8 <__kernel_rem_pio2+0x318>
 801bc34:	aa22      	add	r2, sp, #136	; 0x88
 801bc36:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801bc3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801bc3e:	f04f 0800 	mov.w	r8, #0
 801bc42:	9b02      	ldr	r3, [sp, #8]
 801bc44:	4598      	cmp	r8, r3
 801bc46:	dc2f      	bgt.n	801bca8 <__kernel_rem_pio2+0xd8>
 801bc48:	ed8d 8b04 	vstr	d8, [sp, #16]
 801bc4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801bc50:	462f      	mov	r7, r5
 801bc52:	2600      	movs	r6, #0
 801bc54:	e01b      	b.n	801bc8e <__kernel_rem_pio2+0xbe>
 801bc56:	42ef      	cmn	r7, r5
 801bc58:	d407      	bmi.n	801bc6a <__kernel_rem_pio2+0x9a>
 801bc5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801bc5e:	f7e4 fc81 	bl	8000564 <__aeabi_i2d>
 801bc62:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bc66:	3501      	adds	r5, #1
 801bc68:	e7df      	b.n	801bc2a <__kernel_rem_pio2+0x5a>
 801bc6a:	ec51 0b18 	vmov	r0, r1, d8
 801bc6e:	e7f8      	b.n	801bc62 <__kernel_rem_pio2+0x92>
 801bc70:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bc74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801bc78:	f7e4 fcde 	bl	8000638 <__aeabi_dmul>
 801bc7c:	4602      	mov	r2, r0
 801bc7e:	460b      	mov	r3, r1
 801bc80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc84:	f7e4 fb22 	bl	80002cc <__adddf3>
 801bc88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc8c:	3601      	adds	r6, #1
 801bc8e:	9b06      	ldr	r3, [sp, #24]
 801bc90:	429e      	cmp	r6, r3
 801bc92:	f1a7 0708 	sub.w	r7, r7, #8
 801bc96:	ddeb      	ble.n	801bc70 <__kernel_rem_pio2+0xa0>
 801bc98:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bc9c:	f108 0801 	add.w	r8, r8, #1
 801bca0:	ecab 7b02 	vstmia	fp!, {d7}
 801bca4:	3508      	adds	r5, #8
 801bca6:	e7cc      	b.n	801bc42 <__kernel_rem_pio2+0x72>
 801bca8:	9b02      	ldr	r3, [sp, #8]
 801bcaa:	aa0e      	add	r2, sp, #56	; 0x38
 801bcac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bcb0:	930d      	str	r3, [sp, #52]	; 0x34
 801bcb2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801bcb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bcb8:	9c02      	ldr	r4, [sp, #8]
 801bcba:	930c      	str	r3, [sp, #48]	; 0x30
 801bcbc:	00e3      	lsls	r3, r4, #3
 801bcbe:	930a      	str	r3, [sp, #40]	; 0x28
 801bcc0:	ab9a      	add	r3, sp, #616	; 0x268
 801bcc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bcc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801bcca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801bcce:	ab72      	add	r3, sp, #456	; 0x1c8
 801bcd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801bcd4:	46c3      	mov	fp, r8
 801bcd6:	46a1      	mov	r9, r4
 801bcd8:	f1b9 0f00 	cmp.w	r9, #0
 801bcdc:	f1a5 0508 	sub.w	r5, r5, #8
 801bce0:	dc77      	bgt.n	801bdd2 <__kernel_rem_pio2+0x202>
 801bce2:	ec47 6b10 	vmov	d0, r6, r7
 801bce6:	4650      	mov	r0, sl
 801bce8:	f000 fe52 	bl	801c990 <scalbn>
 801bcec:	ec57 6b10 	vmov	r6, r7, d0
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bcf6:	ee10 0a10 	vmov	r0, s0
 801bcfa:	4639      	mov	r1, r7
 801bcfc:	f7e4 fc9c 	bl	8000638 <__aeabi_dmul>
 801bd00:	ec41 0b10 	vmov	d0, r0, r1
 801bd04:	f000 fdc4 	bl	801c890 <floor>
 801bd08:	4b7c      	ldr	r3, [pc, #496]	; (801befc <__kernel_rem_pio2+0x32c>)
 801bd0a:	ec51 0b10 	vmov	r0, r1, d0
 801bd0e:	2200      	movs	r2, #0
 801bd10:	f7e4 fc92 	bl	8000638 <__aeabi_dmul>
 801bd14:	4602      	mov	r2, r0
 801bd16:	460b      	mov	r3, r1
 801bd18:	4630      	mov	r0, r6
 801bd1a:	4639      	mov	r1, r7
 801bd1c:	f7e4 fad4 	bl	80002c8 <__aeabi_dsub>
 801bd20:	460f      	mov	r7, r1
 801bd22:	4606      	mov	r6, r0
 801bd24:	f7e4 ff38 	bl	8000b98 <__aeabi_d2iz>
 801bd28:	9004      	str	r0, [sp, #16]
 801bd2a:	f7e4 fc1b 	bl	8000564 <__aeabi_i2d>
 801bd2e:	4602      	mov	r2, r0
 801bd30:	460b      	mov	r3, r1
 801bd32:	4630      	mov	r0, r6
 801bd34:	4639      	mov	r1, r7
 801bd36:	f7e4 fac7 	bl	80002c8 <__aeabi_dsub>
 801bd3a:	f1ba 0f00 	cmp.w	sl, #0
 801bd3e:	4606      	mov	r6, r0
 801bd40:	460f      	mov	r7, r1
 801bd42:	dd6d      	ble.n	801be20 <__kernel_rem_pio2+0x250>
 801bd44:	1e62      	subs	r2, r4, #1
 801bd46:	ab0e      	add	r3, sp, #56	; 0x38
 801bd48:	9d04      	ldr	r5, [sp, #16]
 801bd4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bd4e:	f1ca 0118 	rsb	r1, sl, #24
 801bd52:	fa40 f301 	asr.w	r3, r0, r1
 801bd56:	441d      	add	r5, r3
 801bd58:	408b      	lsls	r3, r1
 801bd5a:	1ac0      	subs	r0, r0, r3
 801bd5c:	ab0e      	add	r3, sp, #56	; 0x38
 801bd5e:	9504      	str	r5, [sp, #16]
 801bd60:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801bd64:	f1ca 0317 	rsb	r3, sl, #23
 801bd68:	fa40 fb03 	asr.w	fp, r0, r3
 801bd6c:	f1bb 0f00 	cmp.w	fp, #0
 801bd70:	dd65      	ble.n	801be3e <__kernel_rem_pio2+0x26e>
 801bd72:	9b04      	ldr	r3, [sp, #16]
 801bd74:	2200      	movs	r2, #0
 801bd76:	3301      	adds	r3, #1
 801bd78:	9304      	str	r3, [sp, #16]
 801bd7a:	4615      	mov	r5, r2
 801bd7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bd80:	4294      	cmp	r4, r2
 801bd82:	f300 809c 	bgt.w	801bebe <__kernel_rem_pio2+0x2ee>
 801bd86:	f1ba 0f00 	cmp.w	sl, #0
 801bd8a:	dd07      	ble.n	801bd9c <__kernel_rem_pio2+0x1cc>
 801bd8c:	f1ba 0f01 	cmp.w	sl, #1
 801bd90:	f000 80c0 	beq.w	801bf14 <__kernel_rem_pio2+0x344>
 801bd94:	f1ba 0f02 	cmp.w	sl, #2
 801bd98:	f000 80c6 	beq.w	801bf28 <__kernel_rem_pio2+0x358>
 801bd9c:	f1bb 0f02 	cmp.w	fp, #2
 801bda0:	d14d      	bne.n	801be3e <__kernel_rem_pio2+0x26e>
 801bda2:	4632      	mov	r2, r6
 801bda4:	463b      	mov	r3, r7
 801bda6:	4956      	ldr	r1, [pc, #344]	; (801bf00 <__kernel_rem_pio2+0x330>)
 801bda8:	2000      	movs	r0, #0
 801bdaa:	f7e4 fa8d 	bl	80002c8 <__aeabi_dsub>
 801bdae:	4606      	mov	r6, r0
 801bdb0:	460f      	mov	r7, r1
 801bdb2:	2d00      	cmp	r5, #0
 801bdb4:	d043      	beq.n	801be3e <__kernel_rem_pio2+0x26e>
 801bdb6:	4650      	mov	r0, sl
 801bdb8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801bef0 <__kernel_rem_pio2+0x320>
 801bdbc:	f000 fde8 	bl	801c990 <scalbn>
 801bdc0:	4630      	mov	r0, r6
 801bdc2:	4639      	mov	r1, r7
 801bdc4:	ec53 2b10 	vmov	r2, r3, d0
 801bdc8:	f7e4 fa7e 	bl	80002c8 <__aeabi_dsub>
 801bdcc:	4606      	mov	r6, r0
 801bdce:	460f      	mov	r7, r1
 801bdd0:	e035      	b.n	801be3e <__kernel_rem_pio2+0x26e>
 801bdd2:	4b4c      	ldr	r3, [pc, #304]	; (801bf04 <__kernel_rem_pio2+0x334>)
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	4630      	mov	r0, r6
 801bdd8:	4639      	mov	r1, r7
 801bdda:	f7e4 fc2d 	bl	8000638 <__aeabi_dmul>
 801bdde:	f7e4 fedb 	bl	8000b98 <__aeabi_d2iz>
 801bde2:	f7e4 fbbf 	bl	8000564 <__aeabi_i2d>
 801bde6:	4602      	mov	r2, r0
 801bde8:	460b      	mov	r3, r1
 801bdea:	ec43 2b18 	vmov	d8, r2, r3
 801bdee:	4b46      	ldr	r3, [pc, #280]	; (801bf08 <__kernel_rem_pio2+0x338>)
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	f7e4 fc21 	bl	8000638 <__aeabi_dmul>
 801bdf6:	4602      	mov	r2, r0
 801bdf8:	460b      	mov	r3, r1
 801bdfa:	4630      	mov	r0, r6
 801bdfc:	4639      	mov	r1, r7
 801bdfe:	f7e4 fa63 	bl	80002c8 <__aeabi_dsub>
 801be02:	f7e4 fec9 	bl	8000b98 <__aeabi_d2iz>
 801be06:	e9d5 2300 	ldrd	r2, r3, [r5]
 801be0a:	f84b 0b04 	str.w	r0, [fp], #4
 801be0e:	ec51 0b18 	vmov	r0, r1, d8
 801be12:	f7e4 fa5b 	bl	80002cc <__adddf3>
 801be16:	f109 39ff 	add.w	r9, r9, #4294967295
 801be1a:	4606      	mov	r6, r0
 801be1c:	460f      	mov	r7, r1
 801be1e:	e75b      	b.n	801bcd8 <__kernel_rem_pio2+0x108>
 801be20:	d106      	bne.n	801be30 <__kernel_rem_pio2+0x260>
 801be22:	1e63      	subs	r3, r4, #1
 801be24:	aa0e      	add	r2, sp, #56	; 0x38
 801be26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801be2a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801be2e:	e79d      	b.n	801bd6c <__kernel_rem_pio2+0x19c>
 801be30:	4b36      	ldr	r3, [pc, #216]	; (801bf0c <__kernel_rem_pio2+0x33c>)
 801be32:	2200      	movs	r2, #0
 801be34:	f7e4 fe86 	bl	8000b44 <__aeabi_dcmpge>
 801be38:	2800      	cmp	r0, #0
 801be3a:	d13d      	bne.n	801beb8 <__kernel_rem_pio2+0x2e8>
 801be3c:	4683      	mov	fp, r0
 801be3e:	2200      	movs	r2, #0
 801be40:	2300      	movs	r3, #0
 801be42:	4630      	mov	r0, r6
 801be44:	4639      	mov	r1, r7
 801be46:	f7e4 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 801be4a:	2800      	cmp	r0, #0
 801be4c:	f000 80c0 	beq.w	801bfd0 <__kernel_rem_pio2+0x400>
 801be50:	1e65      	subs	r5, r4, #1
 801be52:	462b      	mov	r3, r5
 801be54:	2200      	movs	r2, #0
 801be56:	9902      	ldr	r1, [sp, #8]
 801be58:	428b      	cmp	r3, r1
 801be5a:	da6c      	bge.n	801bf36 <__kernel_rem_pio2+0x366>
 801be5c:	2a00      	cmp	r2, #0
 801be5e:	f000 8089 	beq.w	801bf74 <__kernel_rem_pio2+0x3a4>
 801be62:	ab0e      	add	r3, sp, #56	; 0x38
 801be64:	f1aa 0a18 	sub.w	sl, sl, #24
 801be68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	f000 80ad 	beq.w	801bfcc <__kernel_rem_pio2+0x3fc>
 801be72:	4650      	mov	r0, sl
 801be74:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801bef0 <__kernel_rem_pio2+0x320>
 801be78:	f000 fd8a 	bl	801c990 <scalbn>
 801be7c:	ab9a      	add	r3, sp, #616	; 0x268
 801be7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801be82:	ec57 6b10 	vmov	r6, r7, d0
 801be86:	00ec      	lsls	r4, r5, #3
 801be88:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801be8c:	46aa      	mov	sl, r5
 801be8e:	f1ba 0f00 	cmp.w	sl, #0
 801be92:	f280 80d6 	bge.w	801c042 <__kernel_rem_pio2+0x472>
 801be96:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801bee8 <__kernel_rem_pio2+0x318>
 801be9a:	462e      	mov	r6, r5
 801be9c:	2e00      	cmp	r6, #0
 801be9e:	f2c0 8104 	blt.w	801c0aa <__kernel_rem_pio2+0x4da>
 801bea2:	ab72      	add	r3, sp, #456	; 0x1c8
 801bea4:	ed8d 8b06 	vstr	d8, [sp, #24]
 801bea8:	f8df a064 	ldr.w	sl, [pc, #100]	; 801bf10 <__kernel_rem_pio2+0x340>
 801beac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801beb0:	f04f 0800 	mov.w	r8, #0
 801beb4:	1baf      	subs	r7, r5, r6
 801beb6:	e0ea      	b.n	801c08e <__kernel_rem_pio2+0x4be>
 801beb8:	f04f 0b02 	mov.w	fp, #2
 801bebc:	e759      	b.n	801bd72 <__kernel_rem_pio2+0x1a2>
 801bebe:	f8d8 3000 	ldr.w	r3, [r8]
 801bec2:	b955      	cbnz	r5, 801beda <__kernel_rem_pio2+0x30a>
 801bec4:	b123      	cbz	r3, 801bed0 <__kernel_rem_pio2+0x300>
 801bec6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801beca:	f8c8 3000 	str.w	r3, [r8]
 801bece:	2301      	movs	r3, #1
 801bed0:	3201      	adds	r2, #1
 801bed2:	f108 0804 	add.w	r8, r8, #4
 801bed6:	461d      	mov	r5, r3
 801bed8:	e752      	b.n	801bd80 <__kernel_rem_pio2+0x1b0>
 801beda:	1acb      	subs	r3, r1, r3
 801bedc:	f8c8 3000 	str.w	r3, [r8]
 801bee0:	462b      	mov	r3, r5
 801bee2:	e7f5      	b.n	801bed0 <__kernel_rem_pio2+0x300>
 801bee4:	f3af 8000 	nop.w
	...
 801bef4:	3ff00000 	.word	0x3ff00000
 801bef8:	08073d70 	.word	0x08073d70
 801befc:	40200000 	.word	0x40200000
 801bf00:	3ff00000 	.word	0x3ff00000
 801bf04:	3e700000 	.word	0x3e700000
 801bf08:	41700000 	.word	0x41700000
 801bf0c:	3fe00000 	.word	0x3fe00000
 801bf10:	08073d30 	.word	0x08073d30
 801bf14:	1e62      	subs	r2, r4, #1
 801bf16:	ab0e      	add	r3, sp, #56	; 0x38
 801bf18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bf20:	a90e      	add	r1, sp, #56	; 0x38
 801bf22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bf26:	e739      	b.n	801bd9c <__kernel_rem_pio2+0x1cc>
 801bf28:	1e62      	subs	r2, r4, #1
 801bf2a:	ab0e      	add	r3, sp, #56	; 0x38
 801bf2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bf34:	e7f4      	b.n	801bf20 <__kernel_rem_pio2+0x350>
 801bf36:	a90e      	add	r1, sp, #56	; 0x38
 801bf38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bf3c:	3b01      	subs	r3, #1
 801bf3e:	430a      	orrs	r2, r1
 801bf40:	e789      	b.n	801be56 <__kernel_rem_pio2+0x286>
 801bf42:	3301      	adds	r3, #1
 801bf44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bf48:	2900      	cmp	r1, #0
 801bf4a:	d0fa      	beq.n	801bf42 <__kernel_rem_pio2+0x372>
 801bf4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801bf52:	446a      	add	r2, sp
 801bf54:	3a98      	subs	r2, #152	; 0x98
 801bf56:	920a      	str	r2, [sp, #40]	; 0x28
 801bf58:	9a08      	ldr	r2, [sp, #32]
 801bf5a:	18e3      	adds	r3, r4, r3
 801bf5c:	18a5      	adds	r5, r4, r2
 801bf5e:	aa22      	add	r2, sp, #136	; 0x88
 801bf60:	f104 0801 	add.w	r8, r4, #1
 801bf64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801bf68:	9304      	str	r3, [sp, #16]
 801bf6a:	9b04      	ldr	r3, [sp, #16]
 801bf6c:	4543      	cmp	r3, r8
 801bf6e:	da04      	bge.n	801bf7a <__kernel_rem_pio2+0x3aa>
 801bf70:	461c      	mov	r4, r3
 801bf72:	e6a3      	b.n	801bcbc <__kernel_rem_pio2+0xec>
 801bf74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bf76:	2301      	movs	r3, #1
 801bf78:	e7e4      	b.n	801bf44 <__kernel_rem_pio2+0x374>
 801bf7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bf80:	f7e4 faf0 	bl	8000564 <__aeabi_i2d>
 801bf84:	e8e5 0102 	strd	r0, r1, [r5], #8
 801bf88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf8a:	46ab      	mov	fp, r5
 801bf8c:	461c      	mov	r4, r3
 801bf8e:	f04f 0900 	mov.w	r9, #0
 801bf92:	2600      	movs	r6, #0
 801bf94:	2700      	movs	r7, #0
 801bf96:	9b06      	ldr	r3, [sp, #24]
 801bf98:	4599      	cmp	r9, r3
 801bf9a:	dd06      	ble.n	801bfaa <__kernel_rem_pio2+0x3da>
 801bf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801bfa2:	f108 0801 	add.w	r8, r8, #1
 801bfa6:	930a      	str	r3, [sp, #40]	; 0x28
 801bfa8:	e7df      	b.n	801bf6a <__kernel_rem_pio2+0x39a>
 801bfaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bfae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bfb2:	f7e4 fb41 	bl	8000638 <__aeabi_dmul>
 801bfb6:	4602      	mov	r2, r0
 801bfb8:	460b      	mov	r3, r1
 801bfba:	4630      	mov	r0, r6
 801bfbc:	4639      	mov	r1, r7
 801bfbe:	f7e4 f985 	bl	80002cc <__adddf3>
 801bfc2:	f109 0901 	add.w	r9, r9, #1
 801bfc6:	4606      	mov	r6, r0
 801bfc8:	460f      	mov	r7, r1
 801bfca:	e7e4      	b.n	801bf96 <__kernel_rem_pio2+0x3c6>
 801bfcc:	3d01      	subs	r5, #1
 801bfce:	e748      	b.n	801be62 <__kernel_rem_pio2+0x292>
 801bfd0:	ec47 6b10 	vmov	d0, r6, r7
 801bfd4:	f1ca 0000 	rsb	r0, sl, #0
 801bfd8:	f000 fcda 	bl	801c990 <scalbn>
 801bfdc:	ec57 6b10 	vmov	r6, r7, d0
 801bfe0:	4ba0      	ldr	r3, [pc, #640]	; (801c264 <__kernel_rem_pio2+0x694>)
 801bfe2:	ee10 0a10 	vmov	r0, s0
 801bfe6:	2200      	movs	r2, #0
 801bfe8:	4639      	mov	r1, r7
 801bfea:	f7e4 fdab 	bl	8000b44 <__aeabi_dcmpge>
 801bfee:	b1f8      	cbz	r0, 801c030 <__kernel_rem_pio2+0x460>
 801bff0:	4b9d      	ldr	r3, [pc, #628]	; (801c268 <__kernel_rem_pio2+0x698>)
 801bff2:	2200      	movs	r2, #0
 801bff4:	4630      	mov	r0, r6
 801bff6:	4639      	mov	r1, r7
 801bff8:	f7e4 fb1e 	bl	8000638 <__aeabi_dmul>
 801bffc:	f7e4 fdcc 	bl	8000b98 <__aeabi_d2iz>
 801c000:	4680      	mov	r8, r0
 801c002:	f7e4 faaf 	bl	8000564 <__aeabi_i2d>
 801c006:	4b97      	ldr	r3, [pc, #604]	; (801c264 <__kernel_rem_pio2+0x694>)
 801c008:	2200      	movs	r2, #0
 801c00a:	f7e4 fb15 	bl	8000638 <__aeabi_dmul>
 801c00e:	460b      	mov	r3, r1
 801c010:	4602      	mov	r2, r0
 801c012:	4639      	mov	r1, r7
 801c014:	4630      	mov	r0, r6
 801c016:	f7e4 f957 	bl	80002c8 <__aeabi_dsub>
 801c01a:	f7e4 fdbd 	bl	8000b98 <__aeabi_d2iz>
 801c01e:	1c65      	adds	r5, r4, #1
 801c020:	ab0e      	add	r3, sp, #56	; 0x38
 801c022:	f10a 0a18 	add.w	sl, sl, #24
 801c026:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c02a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801c02e:	e720      	b.n	801be72 <__kernel_rem_pio2+0x2a2>
 801c030:	4630      	mov	r0, r6
 801c032:	4639      	mov	r1, r7
 801c034:	f7e4 fdb0 	bl	8000b98 <__aeabi_d2iz>
 801c038:	ab0e      	add	r3, sp, #56	; 0x38
 801c03a:	4625      	mov	r5, r4
 801c03c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c040:	e717      	b.n	801be72 <__kernel_rem_pio2+0x2a2>
 801c042:	ab0e      	add	r3, sp, #56	; 0x38
 801c044:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801c048:	f7e4 fa8c 	bl	8000564 <__aeabi_i2d>
 801c04c:	4632      	mov	r2, r6
 801c04e:	463b      	mov	r3, r7
 801c050:	f7e4 faf2 	bl	8000638 <__aeabi_dmul>
 801c054:	4b84      	ldr	r3, [pc, #528]	; (801c268 <__kernel_rem_pio2+0x698>)
 801c056:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801c05a:	2200      	movs	r2, #0
 801c05c:	4630      	mov	r0, r6
 801c05e:	4639      	mov	r1, r7
 801c060:	f7e4 faea 	bl	8000638 <__aeabi_dmul>
 801c064:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c068:	4606      	mov	r6, r0
 801c06a:	460f      	mov	r7, r1
 801c06c:	e70f      	b.n	801be8e <__kernel_rem_pio2+0x2be>
 801c06e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801c072:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801c076:	f7e4 fadf 	bl	8000638 <__aeabi_dmul>
 801c07a:	4602      	mov	r2, r0
 801c07c:	460b      	mov	r3, r1
 801c07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c082:	f7e4 f923 	bl	80002cc <__adddf3>
 801c086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c08a:	f108 0801 	add.w	r8, r8, #1
 801c08e:	9b02      	ldr	r3, [sp, #8]
 801c090:	4598      	cmp	r8, r3
 801c092:	dc01      	bgt.n	801c098 <__kernel_rem_pio2+0x4c8>
 801c094:	45b8      	cmp	r8, r7
 801c096:	ddea      	ble.n	801c06e <__kernel_rem_pio2+0x49e>
 801c098:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c09c:	ab4a      	add	r3, sp, #296	; 0x128
 801c09e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801c0a2:	ed87 7b00 	vstr	d7, [r7]
 801c0a6:	3e01      	subs	r6, #1
 801c0a8:	e6f8      	b.n	801be9c <__kernel_rem_pio2+0x2cc>
 801c0aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801c0ac:	2b02      	cmp	r3, #2
 801c0ae:	dc0b      	bgt.n	801c0c8 <__kernel_rem_pio2+0x4f8>
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	dc35      	bgt.n	801c120 <__kernel_rem_pio2+0x550>
 801c0b4:	d059      	beq.n	801c16a <__kernel_rem_pio2+0x59a>
 801c0b6:	9b04      	ldr	r3, [sp, #16]
 801c0b8:	f003 0007 	and.w	r0, r3, #7
 801c0bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801c0c0:	ecbd 8b02 	vpop	{d8}
 801c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801c0ca:	2b03      	cmp	r3, #3
 801c0cc:	d1f3      	bne.n	801c0b6 <__kernel_rem_pio2+0x4e6>
 801c0ce:	ab4a      	add	r3, sp, #296	; 0x128
 801c0d0:	4423      	add	r3, r4
 801c0d2:	9306      	str	r3, [sp, #24]
 801c0d4:	461c      	mov	r4, r3
 801c0d6:	469a      	mov	sl, r3
 801c0d8:	9502      	str	r5, [sp, #8]
 801c0da:	9b02      	ldr	r3, [sp, #8]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	f1aa 0a08 	sub.w	sl, sl, #8
 801c0e2:	dc6b      	bgt.n	801c1bc <__kernel_rem_pio2+0x5ec>
 801c0e4:	46aa      	mov	sl, r5
 801c0e6:	f1ba 0f01 	cmp.w	sl, #1
 801c0ea:	f1a4 0408 	sub.w	r4, r4, #8
 801c0ee:	f300 8085 	bgt.w	801c1fc <__kernel_rem_pio2+0x62c>
 801c0f2:	9c06      	ldr	r4, [sp, #24]
 801c0f4:	2000      	movs	r0, #0
 801c0f6:	3408      	adds	r4, #8
 801c0f8:	2100      	movs	r1, #0
 801c0fa:	2d01      	cmp	r5, #1
 801c0fc:	f300 809d 	bgt.w	801c23a <__kernel_rem_pio2+0x66a>
 801c100:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801c104:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801c108:	f1bb 0f00 	cmp.w	fp, #0
 801c10c:	f040 809b 	bne.w	801c246 <__kernel_rem_pio2+0x676>
 801c110:	9b01      	ldr	r3, [sp, #4]
 801c112:	e9c3 5600 	strd	r5, r6, [r3]
 801c116:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801c11a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c11e:	e7ca      	b.n	801c0b6 <__kernel_rem_pio2+0x4e6>
 801c120:	3408      	adds	r4, #8
 801c122:	ab4a      	add	r3, sp, #296	; 0x128
 801c124:	441c      	add	r4, r3
 801c126:	462e      	mov	r6, r5
 801c128:	2000      	movs	r0, #0
 801c12a:	2100      	movs	r1, #0
 801c12c:	2e00      	cmp	r6, #0
 801c12e:	da36      	bge.n	801c19e <__kernel_rem_pio2+0x5ce>
 801c130:	f1bb 0f00 	cmp.w	fp, #0
 801c134:	d039      	beq.n	801c1aa <__kernel_rem_pio2+0x5da>
 801c136:	4602      	mov	r2, r0
 801c138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c13c:	9c01      	ldr	r4, [sp, #4]
 801c13e:	e9c4 2300 	strd	r2, r3, [r4]
 801c142:	4602      	mov	r2, r0
 801c144:	460b      	mov	r3, r1
 801c146:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801c14a:	f7e4 f8bd 	bl	80002c8 <__aeabi_dsub>
 801c14e:	ae4c      	add	r6, sp, #304	; 0x130
 801c150:	2401      	movs	r4, #1
 801c152:	42a5      	cmp	r5, r4
 801c154:	da2c      	bge.n	801c1b0 <__kernel_rem_pio2+0x5e0>
 801c156:	f1bb 0f00 	cmp.w	fp, #0
 801c15a:	d002      	beq.n	801c162 <__kernel_rem_pio2+0x592>
 801c15c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c160:	4619      	mov	r1, r3
 801c162:	9b01      	ldr	r3, [sp, #4]
 801c164:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c168:	e7a5      	b.n	801c0b6 <__kernel_rem_pio2+0x4e6>
 801c16a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801c16e:	eb0d 0403 	add.w	r4, sp, r3
 801c172:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801c176:	2000      	movs	r0, #0
 801c178:	2100      	movs	r1, #0
 801c17a:	2d00      	cmp	r5, #0
 801c17c:	da09      	bge.n	801c192 <__kernel_rem_pio2+0x5c2>
 801c17e:	f1bb 0f00 	cmp.w	fp, #0
 801c182:	d002      	beq.n	801c18a <__kernel_rem_pio2+0x5ba>
 801c184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c188:	4619      	mov	r1, r3
 801c18a:	9b01      	ldr	r3, [sp, #4]
 801c18c:	e9c3 0100 	strd	r0, r1, [r3]
 801c190:	e791      	b.n	801c0b6 <__kernel_rem_pio2+0x4e6>
 801c192:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c196:	f7e4 f899 	bl	80002cc <__adddf3>
 801c19a:	3d01      	subs	r5, #1
 801c19c:	e7ed      	b.n	801c17a <__kernel_rem_pio2+0x5aa>
 801c19e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c1a2:	f7e4 f893 	bl	80002cc <__adddf3>
 801c1a6:	3e01      	subs	r6, #1
 801c1a8:	e7c0      	b.n	801c12c <__kernel_rem_pio2+0x55c>
 801c1aa:	4602      	mov	r2, r0
 801c1ac:	460b      	mov	r3, r1
 801c1ae:	e7c5      	b.n	801c13c <__kernel_rem_pio2+0x56c>
 801c1b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801c1b4:	f7e4 f88a 	bl	80002cc <__adddf3>
 801c1b8:	3401      	adds	r4, #1
 801c1ba:	e7ca      	b.n	801c152 <__kernel_rem_pio2+0x582>
 801c1bc:	e9da 8900 	ldrd	r8, r9, [sl]
 801c1c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c1c4:	9b02      	ldr	r3, [sp, #8]
 801c1c6:	3b01      	subs	r3, #1
 801c1c8:	9302      	str	r3, [sp, #8]
 801c1ca:	4632      	mov	r2, r6
 801c1cc:	463b      	mov	r3, r7
 801c1ce:	4640      	mov	r0, r8
 801c1d0:	4649      	mov	r1, r9
 801c1d2:	f7e4 f87b 	bl	80002cc <__adddf3>
 801c1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c1da:	4602      	mov	r2, r0
 801c1dc:	460b      	mov	r3, r1
 801c1de:	4640      	mov	r0, r8
 801c1e0:	4649      	mov	r1, r9
 801c1e2:	f7e4 f871 	bl	80002c8 <__aeabi_dsub>
 801c1e6:	4632      	mov	r2, r6
 801c1e8:	463b      	mov	r3, r7
 801c1ea:	f7e4 f86f 	bl	80002cc <__adddf3>
 801c1ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c1f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c1f6:	ed8a 7b00 	vstr	d7, [sl]
 801c1fa:	e76e      	b.n	801c0da <__kernel_rem_pio2+0x50a>
 801c1fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c200:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801c204:	4640      	mov	r0, r8
 801c206:	4632      	mov	r2, r6
 801c208:	463b      	mov	r3, r7
 801c20a:	4649      	mov	r1, r9
 801c20c:	f7e4 f85e 	bl	80002cc <__adddf3>
 801c210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c214:	4602      	mov	r2, r0
 801c216:	460b      	mov	r3, r1
 801c218:	4640      	mov	r0, r8
 801c21a:	4649      	mov	r1, r9
 801c21c:	f7e4 f854 	bl	80002c8 <__aeabi_dsub>
 801c220:	4632      	mov	r2, r6
 801c222:	463b      	mov	r3, r7
 801c224:	f7e4 f852 	bl	80002cc <__adddf3>
 801c228:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c22c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c230:	ed84 7b00 	vstr	d7, [r4]
 801c234:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c238:	e755      	b.n	801c0e6 <__kernel_rem_pio2+0x516>
 801c23a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c23e:	f7e4 f845 	bl	80002cc <__adddf3>
 801c242:	3d01      	subs	r5, #1
 801c244:	e759      	b.n	801c0fa <__kernel_rem_pio2+0x52a>
 801c246:	9b01      	ldr	r3, [sp, #4]
 801c248:	9a01      	ldr	r2, [sp, #4]
 801c24a:	601d      	str	r5, [r3, #0]
 801c24c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801c250:	605c      	str	r4, [r3, #4]
 801c252:	609f      	str	r7, [r3, #8]
 801c254:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801c258:	60d3      	str	r3, [r2, #12]
 801c25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c25e:	6110      	str	r0, [r2, #16]
 801c260:	6153      	str	r3, [r2, #20]
 801c262:	e728      	b.n	801c0b6 <__kernel_rem_pio2+0x4e6>
 801c264:	41700000 	.word	0x41700000
 801c268:	3e700000 	.word	0x3e700000
 801c26c:	00000000 	.word	0x00000000

0801c270 <__kernel_sin>:
 801c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c274:	ed2d 8b04 	vpush	{d8-d9}
 801c278:	eeb0 8a41 	vmov.f32	s16, s2
 801c27c:	eef0 8a61 	vmov.f32	s17, s3
 801c280:	ec55 4b10 	vmov	r4, r5, d0
 801c284:	b083      	sub	sp, #12
 801c286:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c28a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801c28e:	9001      	str	r0, [sp, #4]
 801c290:	da06      	bge.n	801c2a0 <__kernel_sin+0x30>
 801c292:	ee10 0a10 	vmov	r0, s0
 801c296:	4629      	mov	r1, r5
 801c298:	f7e4 fc7e 	bl	8000b98 <__aeabi_d2iz>
 801c29c:	2800      	cmp	r0, #0
 801c29e:	d051      	beq.n	801c344 <__kernel_sin+0xd4>
 801c2a0:	4622      	mov	r2, r4
 801c2a2:	462b      	mov	r3, r5
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	4629      	mov	r1, r5
 801c2a8:	f7e4 f9c6 	bl	8000638 <__aeabi_dmul>
 801c2ac:	4682      	mov	sl, r0
 801c2ae:	468b      	mov	fp, r1
 801c2b0:	4602      	mov	r2, r0
 801c2b2:	460b      	mov	r3, r1
 801c2b4:	4620      	mov	r0, r4
 801c2b6:	4629      	mov	r1, r5
 801c2b8:	f7e4 f9be 	bl	8000638 <__aeabi_dmul>
 801c2bc:	a341      	add	r3, pc, #260	; (adr r3, 801c3c4 <__kernel_sin+0x154>)
 801c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2c2:	4680      	mov	r8, r0
 801c2c4:	4689      	mov	r9, r1
 801c2c6:	4650      	mov	r0, sl
 801c2c8:	4659      	mov	r1, fp
 801c2ca:	f7e4 f9b5 	bl	8000638 <__aeabi_dmul>
 801c2ce:	a33f      	add	r3, pc, #252	; (adr r3, 801c3cc <__kernel_sin+0x15c>)
 801c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2d4:	f7e3 fff8 	bl	80002c8 <__aeabi_dsub>
 801c2d8:	4652      	mov	r2, sl
 801c2da:	465b      	mov	r3, fp
 801c2dc:	f7e4 f9ac 	bl	8000638 <__aeabi_dmul>
 801c2e0:	a33c      	add	r3, pc, #240	; (adr r3, 801c3d4 <__kernel_sin+0x164>)
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	f7e3 fff1 	bl	80002cc <__adddf3>
 801c2ea:	4652      	mov	r2, sl
 801c2ec:	465b      	mov	r3, fp
 801c2ee:	f7e4 f9a3 	bl	8000638 <__aeabi_dmul>
 801c2f2:	a33a      	add	r3, pc, #232	; (adr r3, 801c3dc <__kernel_sin+0x16c>)
 801c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f8:	f7e3 ffe6 	bl	80002c8 <__aeabi_dsub>
 801c2fc:	4652      	mov	r2, sl
 801c2fe:	465b      	mov	r3, fp
 801c300:	f7e4 f99a 	bl	8000638 <__aeabi_dmul>
 801c304:	a337      	add	r3, pc, #220	; (adr r3, 801c3e4 <__kernel_sin+0x174>)
 801c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30a:	f7e3 ffdf 	bl	80002cc <__adddf3>
 801c30e:	9b01      	ldr	r3, [sp, #4]
 801c310:	4606      	mov	r6, r0
 801c312:	460f      	mov	r7, r1
 801c314:	b9eb      	cbnz	r3, 801c352 <__kernel_sin+0xe2>
 801c316:	4602      	mov	r2, r0
 801c318:	460b      	mov	r3, r1
 801c31a:	4650      	mov	r0, sl
 801c31c:	4659      	mov	r1, fp
 801c31e:	f7e4 f98b 	bl	8000638 <__aeabi_dmul>
 801c322:	a325      	add	r3, pc, #148	; (adr r3, 801c3b8 <__kernel_sin+0x148>)
 801c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c328:	f7e3 ffce 	bl	80002c8 <__aeabi_dsub>
 801c32c:	4642      	mov	r2, r8
 801c32e:	464b      	mov	r3, r9
 801c330:	f7e4 f982 	bl	8000638 <__aeabi_dmul>
 801c334:	4602      	mov	r2, r0
 801c336:	460b      	mov	r3, r1
 801c338:	4620      	mov	r0, r4
 801c33a:	4629      	mov	r1, r5
 801c33c:	f7e3 ffc6 	bl	80002cc <__adddf3>
 801c340:	4604      	mov	r4, r0
 801c342:	460d      	mov	r5, r1
 801c344:	ec45 4b10 	vmov	d0, r4, r5
 801c348:	b003      	add	sp, #12
 801c34a:	ecbd 8b04 	vpop	{d8-d9}
 801c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c352:	4b1b      	ldr	r3, [pc, #108]	; (801c3c0 <__kernel_sin+0x150>)
 801c354:	ec51 0b18 	vmov	r0, r1, d8
 801c358:	2200      	movs	r2, #0
 801c35a:	f7e4 f96d 	bl	8000638 <__aeabi_dmul>
 801c35e:	4632      	mov	r2, r6
 801c360:	ec41 0b19 	vmov	d9, r0, r1
 801c364:	463b      	mov	r3, r7
 801c366:	4640      	mov	r0, r8
 801c368:	4649      	mov	r1, r9
 801c36a:	f7e4 f965 	bl	8000638 <__aeabi_dmul>
 801c36e:	4602      	mov	r2, r0
 801c370:	460b      	mov	r3, r1
 801c372:	ec51 0b19 	vmov	r0, r1, d9
 801c376:	f7e3 ffa7 	bl	80002c8 <__aeabi_dsub>
 801c37a:	4652      	mov	r2, sl
 801c37c:	465b      	mov	r3, fp
 801c37e:	f7e4 f95b 	bl	8000638 <__aeabi_dmul>
 801c382:	ec53 2b18 	vmov	r2, r3, d8
 801c386:	f7e3 ff9f 	bl	80002c8 <__aeabi_dsub>
 801c38a:	a30b      	add	r3, pc, #44	; (adr r3, 801c3b8 <__kernel_sin+0x148>)
 801c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c390:	4606      	mov	r6, r0
 801c392:	460f      	mov	r7, r1
 801c394:	4640      	mov	r0, r8
 801c396:	4649      	mov	r1, r9
 801c398:	f7e4 f94e 	bl	8000638 <__aeabi_dmul>
 801c39c:	4602      	mov	r2, r0
 801c39e:	460b      	mov	r3, r1
 801c3a0:	4630      	mov	r0, r6
 801c3a2:	4639      	mov	r1, r7
 801c3a4:	f7e3 ff92 	bl	80002cc <__adddf3>
 801c3a8:	4602      	mov	r2, r0
 801c3aa:	460b      	mov	r3, r1
 801c3ac:	4620      	mov	r0, r4
 801c3ae:	4629      	mov	r1, r5
 801c3b0:	f7e3 ff8a 	bl	80002c8 <__aeabi_dsub>
 801c3b4:	e7c4      	b.n	801c340 <__kernel_sin+0xd0>
 801c3b6:	bf00      	nop
 801c3b8:	55555549 	.word	0x55555549
 801c3bc:	3fc55555 	.word	0x3fc55555
 801c3c0:	3fe00000 	.word	0x3fe00000
 801c3c4:	5acfd57c 	.word	0x5acfd57c
 801c3c8:	3de5d93a 	.word	0x3de5d93a
 801c3cc:	8a2b9ceb 	.word	0x8a2b9ceb
 801c3d0:	3e5ae5e6 	.word	0x3e5ae5e6
 801c3d4:	57b1fe7d 	.word	0x57b1fe7d
 801c3d8:	3ec71de3 	.word	0x3ec71de3
 801c3dc:	19c161d5 	.word	0x19c161d5
 801c3e0:	3f2a01a0 	.word	0x3f2a01a0
 801c3e4:	1110f8a6 	.word	0x1110f8a6
 801c3e8:	3f811111 	.word	0x3f811111
 801c3ec:	00000000 	.word	0x00000000

0801c3f0 <__kernel_tan>:
 801c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f4:	ed2d 8b06 	vpush	{d8-d10}
 801c3f8:	ec5b ab10 	vmov	sl, fp, d0
 801c3fc:	4be0      	ldr	r3, [pc, #896]	; (801c780 <__kernel_tan+0x390>)
 801c3fe:	b083      	sub	sp, #12
 801c400:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801c404:	429f      	cmp	r7, r3
 801c406:	ec59 8b11 	vmov	r8, r9, d1
 801c40a:	4606      	mov	r6, r0
 801c40c:	f8cd b000 	str.w	fp, [sp]
 801c410:	dc61      	bgt.n	801c4d6 <__kernel_tan+0xe6>
 801c412:	ee10 0a10 	vmov	r0, s0
 801c416:	4659      	mov	r1, fp
 801c418:	f7e4 fbbe 	bl	8000b98 <__aeabi_d2iz>
 801c41c:	4605      	mov	r5, r0
 801c41e:	2800      	cmp	r0, #0
 801c420:	f040 8083 	bne.w	801c52a <__kernel_tan+0x13a>
 801c424:	1c73      	adds	r3, r6, #1
 801c426:	4652      	mov	r2, sl
 801c428:	4313      	orrs	r3, r2
 801c42a:	433b      	orrs	r3, r7
 801c42c:	d112      	bne.n	801c454 <__kernel_tan+0x64>
 801c42e:	ec4b ab10 	vmov	d0, sl, fp
 801c432:	f000 fa17 	bl	801c864 <fabs>
 801c436:	49d3      	ldr	r1, [pc, #844]	; (801c784 <__kernel_tan+0x394>)
 801c438:	ec53 2b10 	vmov	r2, r3, d0
 801c43c:	2000      	movs	r0, #0
 801c43e:	f7e4 fa25 	bl	800088c <__aeabi_ddiv>
 801c442:	4682      	mov	sl, r0
 801c444:	468b      	mov	fp, r1
 801c446:	ec4b ab10 	vmov	d0, sl, fp
 801c44a:	b003      	add	sp, #12
 801c44c:	ecbd 8b06 	vpop	{d8-d10}
 801c450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c454:	2e01      	cmp	r6, #1
 801c456:	d0f6      	beq.n	801c446 <__kernel_tan+0x56>
 801c458:	4642      	mov	r2, r8
 801c45a:	464b      	mov	r3, r9
 801c45c:	4650      	mov	r0, sl
 801c45e:	4659      	mov	r1, fp
 801c460:	f7e3 ff34 	bl	80002cc <__adddf3>
 801c464:	4602      	mov	r2, r0
 801c466:	460b      	mov	r3, r1
 801c468:	460f      	mov	r7, r1
 801c46a:	2000      	movs	r0, #0
 801c46c:	49c6      	ldr	r1, [pc, #792]	; (801c788 <__kernel_tan+0x398>)
 801c46e:	f7e4 fa0d 	bl	800088c <__aeabi_ddiv>
 801c472:	e9cd 0100 	strd	r0, r1, [sp]
 801c476:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c47a:	462e      	mov	r6, r5
 801c47c:	4652      	mov	r2, sl
 801c47e:	462c      	mov	r4, r5
 801c480:	4630      	mov	r0, r6
 801c482:	461d      	mov	r5, r3
 801c484:	4639      	mov	r1, r7
 801c486:	465b      	mov	r3, fp
 801c488:	f7e3 ff1e 	bl	80002c8 <__aeabi_dsub>
 801c48c:	4602      	mov	r2, r0
 801c48e:	460b      	mov	r3, r1
 801c490:	4640      	mov	r0, r8
 801c492:	4649      	mov	r1, r9
 801c494:	f7e3 ff18 	bl	80002c8 <__aeabi_dsub>
 801c498:	4632      	mov	r2, r6
 801c49a:	462b      	mov	r3, r5
 801c49c:	f7e4 f8cc 	bl	8000638 <__aeabi_dmul>
 801c4a0:	4632      	mov	r2, r6
 801c4a2:	4680      	mov	r8, r0
 801c4a4:	4689      	mov	r9, r1
 801c4a6:	462b      	mov	r3, r5
 801c4a8:	4630      	mov	r0, r6
 801c4aa:	4639      	mov	r1, r7
 801c4ac:	f7e4 f8c4 	bl	8000638 <__aeabi_dmul>
 801c4b0:	4bb4      	ldr	r3, [pc, #720]	; (801c784 <__kernel_tan+0x394>)
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	f7e3 ff0a 	bl	80002cc <__adddf3>
 801c4b8:	4602      	mov	r2, r0
 801c4ba:	460b      	mov	r3, r1
 801c4bc:	4640      	mov	r0, r8
 801c4be:	4649      	mov	r1, r9
 801c4c0:	f7e3 ff04 	bl	80002cc <__adddf3>
 801c4c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c4c8:	f7e4 f8b6 	bl	8000638 <__aeabi_dmul>
 801c4cc:	4622      	mov	r2, r4
 801c4ce:	462b      	mov	r3, r5
 801c4d0:	f7e3 fefc 	bl	80002cc <__adddf3>
 801c4d4:	e7b5      	b.n	801c442 <__kernel_tan+0x52>
 801c4d6:	4bad      	ldr	r3, [pc, #692]	; (801c78c <__kernel_tan+0x39c>)
 801c4d8:	429f      	cmp	r7, r3
 801c4da:	dd26      	ble.n	801c52a <__kernel_tan+0x13a>
 801c4dc:	9b00      	ldr	r3, [sp, #0]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	da09      	bge.n	801c4f6 <__kernel_tan+0x106>
 801c4e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c4e6:	469b      	mov	fp, r3
 801c4e8:	ee10 aa10 	vmov	sl, s0
 801c4ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c4f0:	ee11 8a10 	vmov	r8, s2
 801c4f4:	4699      	mov	r9, r3
 801c4f6:	4652      	mov	r2, sl
 801c4f8:	465b      	mov	r3, fp
 801c4fa:	a183      	add	r1, pc, #524	; (adr r1, 801c708 <__kernel_tan+0x318>)
 801c4fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c500:	f7e3 fee2 	bl	80002c8 <__aeabi_dsub>
 801c504:	4642      	mov	r2, r8
 801c506:	464b      	mov	r3, r9
 801c508:	4604      	mov	r4, r0
 801c50a:	460d      	mov	r5, r1
 801c50c:	a180      	add	r1, pc, #512	; (adr r1, 801c710 <__kernel_tan+0x320>)
 801c50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c512:	f7e3 fed9 	bl	80002c8 <__aeabi_dsub>
 801c516:	4622      	mov	r2, r4
 801c518:	462b      	mov	r3, r5
 801c51a:	f7e3 fed7 	bl	80002cc <__adddf3>
 801c51e:	f04f 0800 	mov.w	r8, #0
 801c522:	4682      	mov	sl, r0
 801c524:	468b      	mov	fp, r1
 801c526:	f04f 0900 	mov.w	r9, #0
 801c52a:	4652      	mov	r2, sl
 801c52c:	465b      	mov	r3, fp
 801c52e:	4650      	mov	r0, sl
 801c530:	4659      	mov	r1, fp
 801c532:	f7e4 f881 	bl	8000638 <__aeabi_dmul>
 801c536:	4602      	mov	r2, r0
 801c538:	460b      	mov	r3, r1
 801c53a:	ec43 2b18 	vmov	d8, r2, r3
 801c53e:	f7e4 f87b 	bl	8000638 <__aeabi_dmul>
 801c542:	ec53 2b18 	vmov	r2, r3, d8
 801c546:	4604      	mov	r4, r0
 801c548:	460d      	mov	r5, r1
 801c54a:	4650      	mov	r0, sl
 801c54c:	4659      	mov	r1, fp
 801c54e:	f7e4 f873 	bl	8000638 <__aeabi_dmul>
 801c552:	a371      	add	r3, pc, #452	; (adr r3, 801c718 <__kernel_tan+0x328>)
 801c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c558:	ec41 0b19 	vmov	d9, r0, r1
 801c55c:	4620      	mov	r0, r4
 801c55e:	4629      	mov	r1, r5
 801c560:	f7e4 f86a 	bl	8000638 <__aeabi_dmul>
 801c564:	a36e      	add	r3, pc, #440	; (adr r3, 801c720 <__kernel_tan+0x330>)
 801c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c56a:	f7e3 feaf 	bl	80002cc <__adddf3>
 801c56e:	4622      	mov	r2, r4
 801c570:	462b      	mov	r3, r5
 801c572:	f7e4 f861 	bl	8000638 <__aeabi_dmul>
 801c576:	a36c      	add	r3, pc, #432	; (adr r3, 801c728 <__kernel_tan+0x338>)
 801c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57c:	f7e3 fea6 	bl	80002cc <__adddf3>
 801c580:	4622      	mov	r2, r4
 801c582:	462b      	mov	r3, r5
 801c584:	f7e4 f858 	bl	8000638 <__aeabi_dmul>
 801c588:	a369      	add	r3, pc, #420	; (adr r3, 801c730 <__kernel_tan+0x340>)
 801c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c58e:	f7e3 fe9d 	bl	80002cc <__adddf3>
 801c592:	4622      	mov	r2, r4
 801c594:	462b      	mov	r3, r5
 801c596:	f7e4 f84f 	bl	8000638 <__aeabi_dmul>
 801c59a:	a367      	add	r3, pc, #412	; (adr r3, 801c738 <__kernel_tan+0x348>)
 801c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a0:	f7e3 fe94 	bl	80002cc <__adddf3>
 801c5a4:	4622      	mov	r2, r4
 801c5a6:	462b      	mov	r3, r5
 801c5a8:	f7e4 f846 	bl	8000638 <__aeabi_dmul>
 801c5ac:	a364      	add	r3, pc, #400	; (adr r3, 801c740 <__kernel_tan+0x350>)
 801c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5b2:	f7e3 fe8b 	bl	80002cc <__adddf3>
 801c5b6:	ec53 2b18 	vmov	r2, r3, d8
 801c5ba:	f7e4 f83d 	bl	8000638 <__aeabi_dmul>
 801c5be:	a362      	add	r3, pc, #392	; (adr r3, 801c748 <__kernel_tan+0x358>)
 801c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c4:	ec41 0b1a 	vmov	d10, r0, r1
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	4629      	mov	r1, r5
 801c5cc:	f7e4 f834 	bl	8000638 <__aeabi_dmul>
 801c5d0:	a35f      	add	r3, pc, #380	; (adr r3, 801c750 <__kernel_tan+0x360>)
 801c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d6:	f7e3 fe79 	bl	80002cc <__adddf3>
 801c5da:	4622      	mov	r2, r4
 801c5dc:	462b      	mov	r3, r5
 801c5de:	f7e4 f82b 	bl	8000638 <__aeabi_dmul>
 801c5e2:	a35d      	add	r3, pc, #372	; (adr r3, 801c758 <__kernel_tan+0x368>)
 801c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e8:	f7e3 fe70 	bl	80002cc <__adddf3>
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	462b      	mov	r3, r5
 801c5f0:	f7e4 f822 	bl	8000638 <__aeabi_dmul>
 801c5f4:	a35a      	add	r3, pc, #360	; (adr r3, 801c760 <__kernel_tan+0x370>)
 801c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5fa:	f7e3 fe67 	bl	80002cc <__adddf3>
 801c5fe:	4622      	mov	r2, r4
 801c600:	462b      	mov	r3, r5
 801c602:	f7e4 f819 	bl	8000638 <__aeabi_dmul>
 801c606:	a358      	add	r3, pc, #352	; (adr r3, 801c768 <__kernel_tan+0x378>)
 801c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c60c:	f7e3 fe5e 	bl	80002cc <__adddf3>
 801c610:	4622      	mov	r2, r4
 801c612:	462b      	mov	r3, r5
 801c614:	f7e4 f810 	bl	8000638 <__aeabi_dmul>
 801c618:	a355      	add	r3, pc, #340	; (adr r3, 801c770 <__kernel_tan+0x380>)
 801c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c61e:	f7e3 fe55 	bl	80002cc <__adddf3>
 801c622:	4602      	mov	r2, r0
 801c624:	460b      	mov	r3, r1
 801c626:	ec51 0b1a 	vmov	r0, r1, d10
 801c62a:	f7e3 fe4f 	bl	80002cc <__adddf3>
 801c62e:	ec53 2b19 	vmov	r2, r3, d9
 801c632:	f7e4 f801 	bl	8000638 <__aeabi_dmul>
 801c636:	4642      	mov	r2, r8
 801c638:	464b      	mov	r3, r9
 801c63a:	f7e3 fe47 	bl	80002cc <__adddf3>
 801c63e:	ec53 2b18 	vmov	r2, r3, d8
 801c642:	f7e3 fff9 	bl	8000638 <__aeabi_dmul>
 801c646:	4642      	mov	r2, r8
 801c648:	464b      	mov	r3, r9
 801c64a:	f7e3 fe3f 	bl	80002cc <__adddf3>
 801c64e:	a34a      	add	r3, pc, #296	; (adr r3, 801c778 <__kernel_tan+0x388>)
 801c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c654:	4604      	mov	r4, r0
 801c656:	460d      	mov	r5, r1
 801c658:	ec51 0b19 	vmov	r0, r1, d9
 801c65c:	f7e3 ffec 	bl	8000638 <__aeabi_dmul>
 801c660:	4622      	mov	r2, r4
 801c662:	462b      	mov	r3, r5
 801c664:	f7e3 fe32 	bl	80002cc <__adddf3>
 801c668:	460b      	mov	r3, r1
 801c66a:	ec41 0b18 	vmov	d8, r0, r1
 801c66e:	4602      	mov	r2, r0
 801c670:	4659      	mov	r1, fp
 801c672:	4650      	mov	r0, sl
 801c674:	f7e3 fe2a 	bl	80002cc <__adddf3>
 801c678:	4b44      	ldr	r3, [pc, #272]	; (801c78c <__kernel_tan+0x39c>)
 801c67a:	429f      	cmp	r7, r3
 801c67c:	4604      	mov	r4, r0
 801c67e:	460d      	mov	r5, r1
 801c680:	f340 8086 	ble.w	801c790 <__kernel_tan+0x3a0>
 801c684:	4630      	mov	r0, r6
 801c686:	f7e3 ff6d 	bl	8000564 <__aeabi_i2d>
 801c68a:	4622      	mov	r2, r4
 801c68c:	4680      	mov	r8, r0
 801c68e:	4689      	mov	r9, r1
 801c690:	462b      	mov	r3, r5
 801c692:	4620      	mov	r0, r4
 801c694:	4629      	mov	r1, r5
 801c696:	f7e3 ffcf 	bl	8000638 <__aeabi_dmul>
 801c69a:	4642      	mov	r2, r8
 801c69c:	4606      	mov	r6, r0
 801c69e:	460f      	mov	r7, r1
 801c6a0:	464b      	mov	r3, r9
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	4629      	mov	r1, r5
 801c6a6:	f7e3 fe11 	bl	80002cc <__adddf3>
 801c6aa:	4602      	mov	r2, r0
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	4630      	mov	r0, r6
 801c6b0:	4639      	mov	r1, r7
 801c6b2:	f7e4 f8eb 	bl	800088c <__aeabi_ddiv>
 801c6b6:	ec53 2b18 	vmov	r2, r3, d8
 801c6ba:	f7e3 fe05 	bl	80002c8 <__aeabi_dsub>
 801c6be:	4602      	mov	r2, r0
 801c6c0:	460b      	mov	r3, r1
 801c6c2:	4650      	mov	r0, sl
 801c6c4:	4659      	mov	r1, fp
 801c6c6:	f7e3 fdff 	bl	80002c8 <__aeabi_dsub>
 801c6ca:	4602      	mov	r2, r0
 801c6cc:	460b      	mov	r3, r1
 801c6ce:	f7e3 fdfd 	bl	80002cc <__adddf3>
 801c6d2:	4602      	mov	r2, r0
 801c6d4:	460b      	mov	r3, r1
 801c6d6:	4640      	mov	r0, r8
 801c6d8:	4649      	mov	r1, r9
 801c6da:	f7e3 fdf5 	bl	80002c8 <__aeabi_dsub>
 801c6de:	9b00      	ldr	r3, [sp, #0]
 801c6e0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801c6e4:	f00a 0a02 	and.w	sl, sl, #2
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	f1ca 0001 	rsb	r0, sl, #1
 801c6ee:	460d      	mov	r5, r1
 801c6f0:	f7e3 ff38 	bl	8000564 <__aeabi_i2d>
 801c6f4:	4602      	mov	r2, r0
 801c6f6:	460b      	mov	r3, r1
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	4629      	mov	r1, r5
 801c6fc:	f7e3 ff9c 	bl	8000638 <__aeabi_dmul>
 801c700:	e69f      	b.n	801c442 <__kernel_tan+0x52>
 801c702:	bf00      	nop
 801c704:	f3af 8000 	nop.w
 801c708:	54442d18 	.word	0x54442d18
 801c70c:	3fe921fb 	.word	0x3fe921fb
 801c710:	33145c07 	.word	0x33145c07
 801c714:	3c81a626 	.word	0x3c81a626
 801c718:	74bf7ad4 	.word	0x74bf7ad4
 801c71c:	3efb2a70 	.word	0x3efb2a70
 801c720:	32f0a7e9 	.word	0x32f0a7e9
 801c724:	3f12b80f 	.word	0x3f12b80f
 801c728:	1a8d1068 	.word	0x1a8d1068
 801c72c:	3f3026f7 	.word	0x3f3026f7
 801c730:	fee08315 	.word	0xfee08315
 801c734:	3f57dbc8 	.word	0x3f57dbc8
 801c738:	e96e8493 	.word	0xe96e8493
 801c73c:	3f8226e3 	.word	0x3f8226e3
 801c740:	1bb341fe 	.word	0x1bb341fe
 801c744:	3faba1ba 	.word	0x3faba1ba
 801c748:	db605373 	.word	0xdb605373
 801c74c:	bef375cb 	.word	0xbef375cb
 801c750:	a03792a6 	.word	0xa03792a6
 801c754:	3f147e88 	.word	0x3f147e88
 801c758:	f2f26501 	.word	0xf2f26501
 801c75c:	3f4344d8 	.word	0x3f4344d8
 801c760:	c9560328 	.word	0xc9560328
 801c764:	3f6d6d22 	.word	0x3f6d6d22
 801c768:	8406d637 	.word	0x8406d637
 801c76c:	3f9664f4 	.word	0x3f9664f4
 801c770:	1110fe7a 	.word	0x1110fe7a
 801c774:	3fc11111 	.word	0x3fc11111
 801c778:	55555563 	.word	0x55555563
 801c77c:	3fd55555 	.word	0x3fd55555
 801c780:	3e2fffff 	.word	0x3e2fffff
 801c784:	3ff00000 	.word	0x3ff00000
 801c788:	bff00000 	.word	0xbff00000
 801c78c:	3fe59427 	.word	0x3fe59427
 801c790:	2e01      	cmp	r6, #1
 801c792:	d02f      	beq.n	801c7f4 <__kernel_tan+0x404>
 801c794:	460f      	mov	r7, r1
 801c796:	4602      	mov	r2, r0
 801c798:	460b      	mov	r3, r1
 801c79a:	4689      	mov	r9, r1
 801c79c:	2000      	movs	r0, #0
 801c79e:	4917      	ldr	r1, [pc, #92]	; (801c7fc <__kernel_tan+0x40c>)
 801c7a0:	f7e4 f874 	bl	800088c <__aeabi_ddiv>
 801c7a4:	2600      	movs	r6, #0
 801c7a6:	e9cd 0100 	strd	r0, r1, [sp]
 801c7aa:	4652      	mov	r2, sl
 801c7ac:	465b      	mov	r3, fp
 801c7ae:	4630      	mov	r0, r6
 801c7b0:	4639      	mov	r1, r7
 801c7b2:	f7e3 fd89 	bl	80002c8 <__aeabi_dsub>
 801c7b6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	460b      	mov	r3, r1
 801c7be:	ec51 0b18 	vmov	r0, r1, d8
 801c7c2:	f7e3 fd81 	bl	80002c8 <__aeabi_dsub>
 801c7c6:	4632      	mov	r2, r6
 801c7c8:	462b      	mov	r3, r5
 801c7ca:	f7e3 ff35 	bl	8000638 <__aeabi_dmul>
 801c7ce:	46b0      	mov	r8, r6
 801c7d0:	460f      	mov	r7, r1
 801c7d2:	4642      	mov	r2, r8
 801c7d4:	462b      	mov	r3, r5
 801c7d6:	4634      	mov	r4, r6
 801c7d8:	4649      	mov	r1, r9
 801c7da:	4606      	mov	r6, r0
 801c7dc:	4640      	mov	r0, r8
 801c7de:	f7e3 ff2b 	bl	8000638 <__aeabi_dmul>
 801c7e2:	4b07      	ldr	r3, [pc, #28]	; (801c800 <__kernel_tan+0x410>)
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	f7e3 fd71 	bl	80002cc <__adddf3>
 801c7ea:	4602      	mov	r2, r0
 801c7ec:	460b      	mov	r3, r1
 801c7ee:	4630      	mov	r0, r6
 801c7f0:	4639      	mov	r1, r7
 801c7f2:	e665      	b.n	801c4c0 <__kernel_tan+0xd0>
 801c7f4:	4682      	mov	sl, r0
 801c7f6:	468b      	mov	fp, r1
 801c7f8:	e625      	b.n	801c446 <__kernel_tan+0x56>
 801c7fa:	bf00      	nop
 801c7fc:	bff00000 	.word	0xbff00000
 801c800:	3ff00000 	.word	0x3ff00000

0801c804 <with_errno>:
 801c804:	b570      	push	{r4, r5, r6, lr}
 801c806:	4604      	mov	r4, r0
 801c808:	460d      	mov	r5, r1
 801c80a:	4616      	mov	r6, r2
 801c80c:	f7f8 f890 	bl	8014930 <__errno>
 801c810:	4629      	mov	r1, r5
 801c812:	6006      	str	r6, [r0, #0]
 801c814:	4620      	mov	r0, r4
 801c816:	bd70      	pop	{r4, r5, r6, pc}

0801c818 <xflow>:
 801c818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c81a:	4614      	mov	r4, r2
 801c81c:	461d      	mov	r5, r3
 801c81e:	b108      	cbz	r0, 801c824 <xflow+0xc>
 801c820:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c824:	e9cd 2300 	strd	r2, r3, [sp]
 801c828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c82c:	4620      	mov	r0, r4
 801c82e:	4629      	mov	r1, r5
 801c830:	f7e3 ff02 	bl	8000638 <__aeabi_dmul>
 801c834:	2222      	movs	r2, #34	; 0x22
 801c836:	b003      	add	sp, #12
 801c838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c83c:	f7ff bfe2 	b.w	801c804 <with_errno>

0801c840 <__math_uflow>:
 801c840:	b508      	push	{r3, lr}
 801c842:	2200      	movs	r2, #0
 801c844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c848:	f7ff ffe6 	bl	801c818 <xflow>
 801c84c:	ec41 0b10 	vmov	d0, r0, r1
 801c850:	bd08      	pop	{r3, pc}

0801c852 <__math_oflow>:
 801c852:	b508      	push	{r3, lr}
 801c854:	2200      	movs	r2, #0
 801c856:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c85a:	f7ff ffdd 	bl	801c818 <xflow>
 801c85e:	ec41 0b10 	vmov	d0, r0, r1
 801c862:	bd08      	pop	{r3, pc}

0801c864 <fabs>:
 801c864:	ec51 0b10 	vmov	r0, r1, d0
 801c868:	ee10 2a10 	vmov	r2, s0
 801c86c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c870:	ec43 2b10 	vmov	d0, r2, r3
 801c874:	4770      	bx	lr

0801c876 <finite>:
 801c876:	b082      	sub	sp, #8
 801c878:	ed8d 0b00 	vstr	d0, [sp]
 801c87c:	9801      	ldr	r0, [sp, #4]
 801c87e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c882:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c886:	0fc0      	lsrs	r0, r0, #31
 801c888:	b002      	add	sp, #8
 801c88a:	4770      	bx	lr
 801c88c:	0000      	movs	r0, r0
	...

0801c890 <floor>:
 801c890:	ec51 0b10 	vmov	r0, r1, d0
 801c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c898:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c89c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c8a0:	2e13      	cmp	r6, #19
 801c8a2:	ee10 5a10 	vmov	r5, s0
 801c8a6:	ee10 8a10 	vmov	r8, s0
 801c8aa:	460c      	mov	r4, r1
 801c8ac:	dc32      	bgt.n	801c914 <floor+0x84>
 801c8ae:	2e00      	cmp	r6, #0
 801c8b0:	da14      	bge.n	801c8dc <floor+0x4c>
 801c8b2:	a333      	add	r3, pc, #204	; (adr r3, 801c980 <floor+0xf0>)
 801c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b8:	f7e3 fd08 	bl	80002cc <__adddf3>
 801c8bc:	2200      	movs	r2, #0
 801c8be:	2300      	movs	r3, #0
 801c8c0:	f7e4 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 801c8c4:	b138      	cbz	r0, 801c8d6 <floor+0x46>
 801c8c6:	2c00      	cmp	r4, #0
 801c8c8:	da57      	bge.n	801c97a <floor+0xea>
 801c8ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c8ce:	431d      	orrs	r5, r3
 801c8d0:	d001      	beq.n	801c8d6 <floor+0x46>
 801c8d2:	4c2d      	ldr	r4, [pc, #180]	; (801c988 <floor+0xf8>)
 801c8d4:	2500      	movs	r5, #0
 801c8d6:	4621      	mov	r1, r4
 801c8d8:	4628      	mov	r0, r5
 801c8da:	e025      	b.n	801c928 <floor+0x98>
 801c8dc:	4f2b      	ldr	r7, [pc, #172]	; (801c98c <floor+0xfc>)
 801c8de:	4137      	asrs	r7, r6
 801c8e0:	ea01 0307 	and.w	r3, r1, r7
 801c8e4:	4303      	orrs	r3, r0
 801c8e6:	d01f      	beq.n	801c928 <floor+0x98>
 801c8e8:	a325      	add	r3, pc, #148	; (adr r3, 801c980 <floor+0xf0>)
 801c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ee:	f7e3 fced 	bl	80002cc <__adddf3>
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	f7e4 f92f 	bl	8000b58 <__aeabi_dcmpgt>
 801c8fa:	2800      	cmp	r0, #0
 801c8fc:	d0eb      	beq.n	801c8d6 <floor+0x46>
 801c8fe:	2c00      	cmp	r4, #0
 801c900:	bfbe      	ittt	lt
 801c902:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c906:	fa43 f606 	asrlt.w	r6, r3, r6
 801c90a:	19a4      	addlt	r4, r4, r6
 801c90c:	ea24 0407 	bic.w	r4, r4, r7
 801c910:	2500      	movs	r5, #0
 801c912:	e7e0      	b.n	801c8d6 <floor+0x46>
 801c914:	2e33      	cmp	r6, #51	; 0x33
 801c916:	dd0b      	ble.n	801c930 <floor+0xa0>
 801c918:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c91c:	d104      	bne.n	801c928 <floor+0x98>
 801c91e:	ee10 2a10 	vmov	r2, s0
 801c922:	460b      	mov	r3, r1
 801c924:	f7e3 fcd2 	bl	80002cc <__adddf3>
 801c928:	ec41 0b10 	vmov	d0, r0, r1
 801c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c930:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c934:	f04f 33ff 	mov.w	r3, #4294967295
 801c938:	fa23 f707 	lsr.w	r7, r3, r7
 801c93c:	4207      	tst	r7, r0
 801c93e:	d0f3      	beq.n	801c928 <floor+0x98>
 801c940:	a30f      	add	r3, pc, #60	; (adr r3, 801c980 <floor+0xf0>)
 801c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c946:	f7e3 fcc1 	bl	80002cc <__adddf3>
 801c94a:	2200      	movs	r2, #0
 801c94c:	2300      	movs	r3, #0
 801c94e:	f7e4 f903 	bl	8000b58 <__aeabi_dcmpgt>
 801c952:	2800      	cmp	r0, #0
 801c954:	d0bf      	beq.n	801c8d6 <floor+0x46>
 801c956:	2c00      	cmp	r4, #0
 801c958:	da02      	bge.n	801c960 <floor+0xd0>
 801c95a:	2e14      	cmp	r6, #20
 801c95c:	d103      	bne.n	801c966 <floor+0xd6>
 801c95e:	3401      	adds	r4, #1
 801c960:	ea25 0507 	bic.w	r5, r5, r7
 801c964:	e7b7      	b.n	801c8d6 <floor+0x46>
 801c966:	2301      	movs	r3, #1
 801c968:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c96c:	fa03 f606 	lsl.w	r6, r3, r6
 801c970:	4435      	add	r5, r6
 801c972:	4545      	cmp	r5, r8
 801c974:	bf38      	it	cc
 801c976:	18e4      	addcc	r4, r4, r3
 801c978:	e7f2      	b.n	801c960 <floor+0xd0>
 801c97a:	2500      	movs	r5, #0
 801c97c:	462c      	mov	r4, r5
 801c97e:	e7aa      	b.n	801c8d6 <floor+0x46>
 801c980:	8800759c 	.word	0x8800759c
 801c984:	7e37e43c 	.word	0x7e37e43c
 801c988:	bff00000 	.word	0xbff00000
 801c98c:	000fffff 	.word	0x000fffff

0801c990 <scalbn>:
 801c990:	b570      	push	{r4, r5, r6, lr}
 801c992:	ec55 4b10 	vmov	r4, r5, d0
 801c996:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c99a:	4606      	mov	r6, r0
 801c99c:	462b      	mov	r3, r5
 801c99e:	b99a      	cbnz	r2, 801c9c8 <scalbn+0x38>
 801c9a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c9a4:	4323      	orrs	r3, r4
 801c9a6:	d036      	beq.n	801ca16 <scalbn+0x86>
 801c9a8:	4b39      	ldr	r3, [pc, #228]	; (801ca90 <scalbn+0x100>)
 801c9aa:	4629      	mov	r1, r5
 801c9ac:	ee10 0a10 	vmov	r0, s0
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	f7e3 fe41 	bl	8000638 <__aeabi_dmul>
 801c9b6:	4b37      	ldr	r3, [pc, #220]	; (801ca94 <scalbn+0x104>)
 801c9b8:	429e      	cmp	r6, r3
 801c9ba:	4604      	mov	r4, r0
 801c9bc:	460d      	mov	r5, r1
 801c9be:	da10      	bge.n	801c9e2 <scalbn+0x52>
 801c9c0:	a32b      	add	r3, pc, #172	; (adr r3, 801ca70 <scalbn+0xe0>)
 801c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c6:	e03a      	b.n	801ca3e <scalbn+0xae>
 801c9c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c9cc:	428a      	cmp	r2, r1
 801c9ce:	d10c      	bne.n	801c9ea <scalbn+0x5a>
 801c9d0:	ee10 2a10 	vmov	r2, s0
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	4629      	mov	r1, r5
 801c9d8:	f7e3 fc78 	bl	80002cc <__adddf3>
 801c9dc:	4604      	mov	r4, r0
 801c9de:	460d      	mov	r5, r1
 801c9e0:	e019      	b.n	801ca16 <scalbn+0x86>
 801c9e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	3a36      	subs	r2, #54	; 0x36
 801c9ea:	4432      	add	r2, r6
 801c9ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c9f0:	428a      	cmp	r2, r1
 801c9f2:	dd08      	ble.n	801ca06 <scalbn+0x76>
 801c9f4:	2d00      	cmp	r5, #0
 801c9f6:	a120      	add	r1, pc, #128	; (adr r1, 801ca78 <scalbn+0xe8>)
 801c9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9fc:	da1c      	bge.n	801ca38 <scalbn+0xa8>
 801c9fe:	a120      	add	r1, pc, #128	; (adr r1, 801ca80 <scalbn+0xf0>)
 801ca00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca04:	e018      	b.n	801ca38 <scalbn+0xa8>
 801ca06:	2a00      	cmp	r2, #0
 801ca08:	dd08      	ble.n	801ca1c <scalbn+0x8c>
 801ca0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ca0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ca12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ca16:	ec45 4b10 	vmov	d0, r4, r5
 801ca1a:	bd70      	pop	{r4, r5, r6, pc}
 801ca1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ca20:	da19      	bge.n	801ca56 <scalbn+0xc6>
 801ca22:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ca26:	429e      	cmp	r6, r3
 801ca28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ca2c:	dd0a      	ble.n	801ca44 <scalbn+0xb4>
 801ca2e:	a112      	add	r1, pc, #72	; (adr r1, 801ca78 <scalbn+0xe8>)
 801ca30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d1e2      	bne.n	801c9fe <scalbn+0x6e>
 801ca38:	a30f      	add	r3, pc, #60	; (adr r3, 801ca78 <scalbn+0xe8>)
 801ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca3e:	f7e3 fdfb 	bl	8000638 <__aeabi_dmul>
 801ca42:	e7cb      	b.n	801c9dc <scalbn+0x4c>
 801ca44:	a10a      	add	r1, pc, #40	; (adr r1, 801ca70 <scalbn+0xe0>)
 801ca46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d0b8      	beq.n	801c9c0 <scalbn+0x30>
 801ca4e:	a10e      	add	r1, pc, #56	; (adr r1, 801ca88 <scalbn+0xf8>)
 801ca50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca54:	e7b4      	b.n	801c9c0 <scalbn+0x30>
 801ca56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ca5a:	3236      	adds	r2, #54	; 0x36
 801ca5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ca60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ca64:	4620      	mov	r0, r4
 801ca66:	4b0c      	ldr	r3, [pc, #48]	; (801ca98 <scalbn+0x108>)
 801ca68:	2200      	movs	r2, #0
 801ca6a:	e7e8      	b.n	801ca3e <scalbn+0xae>
 801ca6c:	f3af 8000 	nop.w
 801ca70:	c2f8f359 	.word	0xc2f8f359
 801ca74:	01a56e1f 	.word	0x01a56e1f
 801ca78:	8800759c 	.word	0x8800759c
 801ca7c:	7e37e43c 	.word	0x7e37e43c
 801ca80:	8800759c 	.word	0x8800759c
 801ca84:	fe37e43c 	.word	0xfe37e43c
 801ca88:	c2f8f359 	.word	0xc2f8f359
 801ca8c:	81a56e1f 	.word	0x81a56e1f
 801ca90:	43500000 	.word	0x43500000
 801ca94:	ffff3cb0 	.word	0xffff3cb0
 801ca98:	3c900000 	.word	0x3c900000

0801ca9c <_init>:
 801ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca9e:	bf00      	nop
 801caa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801caa2:	bc08      	pop	{r3}
 801caa4:	469e      	mov	lr, r3
 801caa6:	4770      	bx	lr

0801caa8 <_fini>:
 801caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caaa:	bf00      	nop
 801caac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801caae:	bc08      	pop	{r3}
 801cab0:	469e      	mov	lr, r3
 801cab2:	4770      	bx	lr
