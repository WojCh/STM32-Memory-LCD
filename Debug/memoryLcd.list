
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026bd0  08014458  08014458  00024458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803b028  0803b028  000504f8  2**0
                  CONTENTS
  4 .ARM          00000008  0803b028  0803b028  0004b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803b030  0803b030  000504f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803b030  0803b030  0004b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803b034  0803b034  0004b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  0803b038  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f8  2**0
                  CONTENTS
 10 .bss          00003554  200004f8  200004f8  000504f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003a4c  20003a4c  000504f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212a8  00000000  00000000  00050528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b09  00000000  00000000  000717d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  000772e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  00078c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad2a  00000000  00000000  0007a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002700e  00000000  00000000  000a50b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6e42  00000000  00000000  000cc0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2f02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085ec  00000000  00000000  001b2f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001bb540  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001bb60c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801443c 	.word	0x0801443c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004fc 	.word	0x200004fc
 80001ec:	0801443c 	.word	0x0801443c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f007 faff 	bl	80085a4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000698 	.word	0x20000698

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f007 f9b9 	bl	80083b0 <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000698 	.word	0x20000698

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f007 fa88 	bl	80085a4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000698 	.word	0x20000698

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b fe5c 	bl	800cdfc <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f007 f90d 	bl	80083b0 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f006 f872 	bl	8007280 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f007 f9f8 	bl	80085a4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000698 	.word	0x20000698

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f007 f878 	bl	80083b0 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 ffdc 	bl	8007280 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f007 f961 	bl	80085a4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08014458 	.word	0x08014458
 800130c:	20000698 	.word	0x20000698

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f010 fc36 	bl	8011d58 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f010 fbcb 	bl	8011d58 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f006 fbf2 	bl	8008048 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_DMA_Init+0x3c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2039      	movs	r0, #57	; 0x39
 8001a34:	f005 fd23 	bl	800747e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a38:	2039      	movs	r0, #57	; 0x39
 8001a3a:	f005 fd3c 	bl	80074b6 <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <MX_GPIO_Init+0x19c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2140      	movs	r1, #64	; 0x40
 8001b2a:	4830      	ldr	r0, [pc, #192]	; (8001bec <MX_GPIO_Init+0x1a0>)
 8001b2c:	f006 faa4 	bl	8008078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b36:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <MX_GPIO_Init+0x1a4>)
 8001b38:	f006 fa9e 	bl	8008078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001b42:	f006 fa99 	bl	8008078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4823      	ldr	r0, [pc, #140]	; (8001bec <MX_GPIO_Init+0x1a0>)
 8001b5e:	f006 f8c7 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b62:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481d      	ldr	r0, [pc, #116]	; (8001bf0 <MX_GPIO_Init+0x1a4>)
 8001b7c:	f006 f8b8 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b80:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b84:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b86:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <MX_GPIO_Init+0x1ac>)
 8001b98:	f006 f8aa 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001bb4:	f006 f89c 	bl	8007cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480a      	ldr	r0, [pc, #40]	; (8001bf4 <MX_GPIO_Init+0x1a8>)
 8001bcc:	f006 f890 	bl	8007cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f005 fc52 	bl	800747e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bda:	2028      	movs	r0, #40	; 0x28
 8001bdc:	f005 fc6b 	bl	80074b6 <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021000 	.word	0x40021000

08001bfc <getDataFromUart>:
//};

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <getDataFromUart+0x20>)
 8001c10:	f009 ff85 	bl	800bb1e <HAL_UART_Receive_DMA>

}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20003924 	.word	0x20003924

08001c20 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0d0      	sub	sp, #320	; 0x140
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c2a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c2e:	6018      	str	r0, [r3, #0]
 8001c30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c38:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001c3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001c46:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	3304      	adds	r3, #4
 8001c54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00c ffdc 	bl	800ec18 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c64:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <initGps+0x90>)
 8001c6a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	gpsModule.isReady = 1;
 8001c6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	return(gpsModule);
 8001c7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001c96:	461a      	mov	r2, r3
 8001c98:	f00b f8a2 	bl	800cde0 <memcpy>
}
 8001c9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ca0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08001bfd 	.word	0x08001bfd

08001cb4 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8001cc6:	bf8c      	ite	hi
 8001cc8:	2301      	movhi	r3, #1
 8001cca:	2300      	movls	r3, #0
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b39      	cmp	r3, #57	; 0x39
 8001cd4:	bf94      	ite	ls
 8001cd6:	2301      	movls	r3, #1
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <hexCharToInt+0x3a>
		msb = *value - 48;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3b30      	subs	r3, #48	; 0x30
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e003      	b.n	8001cf6 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3b37      	subs	r3, #55	; 0x37
 8001cf4:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2f      	cmp	r3, #47	; 0x2f
 8001d02:	bf8c      	ite	hi
 8001d04:	2301      	movhi	r3, #1
 8001d06:	2300      	movls	r3, #0
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b39      	cmp	r3, #57	; 0x39
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3b30      	subs	r3, #48	; 0x30
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e004      	b.n	8001d38 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b37      	subs	r3, #55	; 0x37
 8001d36:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
	return(result)
 8001d42:	68fb      	ldr	r3, [r7, #12]
;}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <getLocation>:
void getAllMessages(char* buffer){

}
void getMessage(void);

location_t getLocation(struct gpsDevice* dev){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ec      	sub	sp, #432	; 0x1b0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d5e:	6018      	str	r0, [r3, #0]
 8001d60:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d68:	6019      	str	r1, [r3, #0]
	char tmpBuf[300];
	strncpy(&tmpBuf, dev->buffer, 300);
 8001d6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1d19      	adds	r1, r3, #4
 8001d76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00c ff4a 	bl	800ec18 <strncpy>
// convert buffer to sentences
// find msg start - 1 character after $
	char* start = strchr(tmpBuf, '$')+1;
 8001d84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d88:	2124      	movs	r1, #36	; 0x24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00c f9f5 	bl	800e17a <strchr>
 8001d90:	4603      	mov	r3, r0
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
// tokenize on CLCR
	char* sentence = strtok(start, "\r");
 8001d98:	4939      	ldr	r1, [pc, #228]	; (8001e80 <getLocation+0x130>)
 8001d9a:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8001d9e:	f00c ff4f 	bl	800ec40 <strtok>
 8001da2:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
// calculate checksum
	uint8_t chksum = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	uint8_t i = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
	while(sentence[i] != '*' & sentence[i]!=NULL){
 8001db2:	e00f      	b.n	8001dd4 <getLocation+0x84>
		chksum ^= sentence[i];
 8001db4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001db8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001dc4:	4053      	eors	r3, r2
 8001dc6:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		i++;
 8001dca:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
	while(sentence[i] != '*' & sentence[i]!=NULL){
 8001dd4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001dd8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b2a      	cmp	r3, #42	; 0x2a
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001dee:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8001df2:	440b      	add	r3, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1d5      	bne.n	8001db4 <getLocation+0x64>
	}
// validate chksum
	if(hexCharToInt(&sentence[i+1])==chksum){
 8001e08:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001e12:	4413      	add	r3, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff4d 	bl	8001cb4 <hexCharToInt>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d104      	bne.n	8001e2e <getLocation+0xde>
// save sentence
// identify sentence type
		strcpy(NmeaInfo.GNGGA, sentence);
 8001e24:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <getLocation+0x134>)
 8001e2a:	f00c f9b3 	bl	800e194 <strcpy>

//convert to format

//write to struct
	location_t currPosition;
	strcpy(&currPosition.debug, sentence);
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	3318      	adds	r3, #24
 8001e34:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00c f9ab 	bl	800e194 <strcpy>
	currPosition.chk = chksum;
 8001e3e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e46:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8001e4a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	return currPosition;
 8001e4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	2370      	movs	r3, #112	; 0x70
 8001e66:	461a      	mov	r2, r3
 8001e68:	f00a ffba 	bl	800cde0 <memcpy>
}
 8001e6c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	0801445c 	.word	0x0801445c
 8001e84:	20000640 	.word	0x20000640

08001e88 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	if(position>0){
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <prevPos+0x2c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <prevPos+0x1a>
		position--;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <prevPos+0x2c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <prevPos+0x2c>)
 8001e9e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001ea0:	e002      	b.n	8001ea8 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <prevPos+0x2c>)
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	701a      	strb	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000695 	.word	0x20000695

08001eb8 <nextPos>:

void nextPos(void){
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <nextPos+0x2c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d806      	bhi.n	8001ed2 <nextPos+0x1a>
		position++;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <nextPos+0x2c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <nextPos+0x2c>)
 8001ece:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001ed0:	e002      	b.n	8001ed8 <nextPos+0x20>
		position=0;
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <nextPos+0x2c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000695 	.word	0x20000695

08001ee8 <nextScreen>:

void nextScreen(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	nextPos();
 8001eec:	f7ff ffe4 	bl	8001eb8 <nextPos>
	applySelectedScreen();
 8001ef0:	f000 f82c 	bl	8001f4c <applySelectedScreen>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <prevScreen>:
void prevScreen(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	prevPos();
 8001efc:	f7ff ffc4 	bl	8001e88 <prevPos>
	applySelectedScreen();
 8001f00:	f000 f824 	bl	8001f4c <applySelectedScreen>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <resetPos>:
void resetPos(void){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	position=0;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <resetPos+0x14>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001f12:	f000 f81b 	bl	8001f4c <applySelectedScreen>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000695 	.word	0x20000695

08001f20 <guiApplyView>:

void guiApplyView(struct Module *module){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <guiApplyView+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <guiApplyView+0x28>)
 8001f36:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001f38:	f000 f830 	bl	8001f9c <selectScreen>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2000013c 	.word	0x2000013c
 8001f48:	20000138 	.word	0x20000138

08001f4c <applySelectedScreen>:

void applySelectedScreen(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <applySelectedScreen+0x40>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <applySelectedScreen+0x44>)
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3320      	adds	r3, #32
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <applySelectedScreen+0x48>)
 8001f68:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <applySelectedScreen+0x40>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <applySelectedScreen+0x44>)
 8001f72:	460b      	mov	r3, r1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3324      	adds	r3, #36	; 0x24
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <applySelectedScreen+0x4c>)
 8001f82:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001f84:	f000 f80a 	bl	8001f9c <selectScreen>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000695 	.word	0x20000695
 8001f90:	20000048 	.word	0x20000048
 8001f94:	2000013c 	.word	0x2000013c
 8001f98:	20000138 	.word	0x20000138

08001f9c <selectScreen>:

void selectScreen(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8001fa0:	f7ff fc20 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <selectScreen+0x1c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <selectScreen+0x20>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <selectScreen+0x24>)
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000696 	.word	0x20000696
 8001fbc:	20000138 	.word	0x20000138
 8001fc0:	20000140 	.word	0x20000140

08001fc4 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <showGui+0x30>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <showGui+0x18>
		moduleSetupPtr();
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <showGui+0x34>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4798      	blx	r3
		isModuleSet = 1;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <showGui+0x30>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <showGui+0x38>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <showGui+0x26>
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <showGui+0x38>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4798      	blx	r3
	lcdRefresh();
 8001fea:	f000 ff41 	bl	8002e70 <lcdRefresh>
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000696 	.word	0x20000696
 8001ff8:	2000013c 	.word	0x2000013c
 8001ffc:	20000140 	.word	0x20000140

08002000 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_I2C1_Init+0x74>)
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <MX_I2C1_Init+0x78>)
 8002008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_I2C1_Init+0x74>)
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <MX_I2C1_Init+0x7c>)
 800200e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_I2C1_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <MX_I2C1_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_I2C1_Init+0x74>)
 800201e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002022:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_I2C1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_I2C1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_I2C1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <MX_I2C1_Init+0x74>)
 800203e:	f006 f873 	bl	8008128 <HAL_I2C_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002048:	f001 f95e 	bl	8003308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800204c:	2100      	movs	r1, #0
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <MX_I2C1_Init+0x74>)
 8002050:	f007 f829 	bl	80090a6 <HAL_I2CEx_ConfigAnalogFilter>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800205a:	f001 f955 	bl	8003308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_I2C1_Init+0x74>)
 8002062:	f007 f85c 	bl	800911e <HAL_I2CEx_ConfigDigitalFilter>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800206c:	f001 f94c 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000698 	.word	0x20000698
 8002078:	40005400 	.word	0x40005400
 800207c:	000186a0 	.word	0x000186a0

08002080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_I2C_MspInit+0x84>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d0:	2304      	movs	r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <HAL_I2C_MspInit+0x8c>)
 80020dc:	f005 fe08 	bl	8007cf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_I2C_MspInit+0x88>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005400 	.word	0x40005400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020400 	.word	0x40020400

08002110 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 800211a:	2307      	movs	r3, #7
 800211c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 800212a:	e010      	b.n	800214e <reverse_uint8+0x3e>
		result = result << 1;
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002140:	7bba      	ldrb	r2, [r7, #14]
 8002142:	7b7b      	ldrb	r3, [r7, #13]
 8002144:	4313      	orrs	r3, r2
 8002146:	73bb      	strb	r3, [r7, #14]
		times--;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3b01      	subs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1eb      	bne.n	800212c <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	updateSetting(0);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f824 	bl	80021b8 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002170:	2300      	movs	r3, #0
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	e014      	b.n	80021a0 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002176:	2300      	movs	r3, #0
 8002178:	80bb      	strh	r3, [r7, #4]
 800217a:	e00b      	b.n	8002194 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2232      	movs	r2, #50	; 0x32
 8002180:	fb03 f202 	mul.w	r2, r3, r2
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <lcdClearBuffer+0x50>)
 800218a:	21ff      	movs	r1, #255	; 0xff
 800218c:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	80bb      	strh	r3, [r7, #4]
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	2b31      	cmp	r3, #49	; 0x31
 8002198:	d9f0      	bls.n	800217c <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	3301      	adds	r3, #1
 800219e:	71fb      	strb	r3, [r7, #7]
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2bef      	cmp	r3, #239	; 0xef
 80021a4:	d9e7      	bls.n	8002176 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 f806 	bl	80021b8 <updateSetting>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200006f0 	.word	0x200006f0

080021b8 <updateSetting>:

void updateSetting(uint8_t state){
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <updateSetting+0x1c>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	7013      	strb	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	20000144 	.word	0x20000144

080021d8 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4603      	mov	r3, r0
 80021e2:	80fb      	strh	r3, [r7, #6]
 80021e4:	460b      	mov	r3, r1
 80021e6:	717b      	strb	r3, [r7, #5]
 80021e8:	4613      	mov	r3, r2
 80021ea:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	795b      	ldrb	r3, [r3, #5]
 80021f0:	793a      	ldrb	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d304      	bcc.n	8002200 <lcdPutChar+0x28>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	799b      	ldrb	r3, [r3, #6]
 80021fa:	793a      	ldrb	r2, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d902      	bls.n	8002206 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	79db      	ldrb	r3, [r3, #7]
 8002204:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	b29b      	uxth	r3, r3
 8002216:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	885b      	ldrh	r3, [r3, #2]
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	fb92 f3f3 	sdiv	r3, r2, r3
 8002226:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002228:	2300      	movs	r3, #0
 800222a:	75fb      	strb	r3, [r7, #23]
 800222c:	e09b      	b.n	8002366 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800222e:	797a      	ldrb	r2, [r7, #5]
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	0091      	lsls	r1, r2, #2
 8002240:	461a      	mov	r2, r3
 8002242:	460b      	mov	r3, r1
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002252:	793b      	ldrb	r3, [r7, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	7952      	ldrb	r2, [r2, #5]
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	8852      	ldrh	r2, [r2, #2]
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	7cb9      	ldrb	r1, [r7, #18]
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	3308      	adds	r3, #8
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	7d3b      	ldrb	r3, [r7, #20]
 800227c:	fa42 f303 	asr.w	r3, r2, r3
 8002280:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002282:	8a3b      	ldrh	r3, [r7, #16]
 8002284:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <lcdPutChar+0x1a8>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	b25a      	sxtb	r2, r3
 800228a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800228e:	43db      	mvns	r3, r3
 8002290:	b25b      	sxtb	r3, r3
 8002292:	4013      	ands	r3, r2
 8002294:	b25a      	sxtb	r2, r3
 8002296:	8a3b      	ldrh	r3, [r7, #16]
 8002298:	b2d1      	uxtb	r1, r2
 800229a:	4a39      	ldr	r2, [pc, #228]	; (8002380 <lcdPutChar+0x1a8>)
 800229c:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	3308      	adds	r3, #8
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b25a      	sxtb	r2, r3
 80022aa:	7d3b      	ldrb	r3, [r7, #20]
 80022ac:	f1c3 0308 	rsb	r3, r3, #8
 80022b0:	21ff      	movs	r1, #255	; 0xff
 80022b2:	fa41 f303 	asr.w	r3, r1, r3
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80022be:	2301      	movs	r3, #1
 80022c0:	757b      	strb	r3, [r7, #21]
 80022c2:	e029      	b.n	8002318 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80022c4:	7d7a      	ldrb	r2, [r7, #21]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	7a1b      	ldrb	r3, [r3, #8]
 80022d0:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80022d2:	8a3a      	ldrh	r2, [r7, #16]
 80022d4:	7d7b      	ldrb	r3, [r7, #21]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <lcdPutChar+0x1a8>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	b25a      	sxtb	r2, r3
 80022de:	7db9      	ldrb	r1, [r7, #22]
 80022e0:	7d3b      	ldrb	r3, [r7, #20]
 80022e2:	f1c3 0308 	rsb	r3, r3, #8
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	b259      	sxtb	r1, r3
 80022ec:	7af8      	ldrb	r0, [r7, #11]
 80022ee:	7d3b      	ldrb	r3, [r7, #20]
 80022f0:	fa40 f303 	asr.w	r3, r0, r3
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	430b      	orrs	r3, r1
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	4013      	ands	r3, r2
 8002300:	b259      	sxtb	r1, r3
 8002302:	8a3a      	ldrh	r2, [r7, #16]
 8002304:	7d7b      	ldrb	r3, [r7, #21]
 8002306:	4413      	add	r3, r2
 8002308:	b2c9      	uxtb	r1, r1
 800230a:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <lcdPutChar+0x1a8>)
 800230c:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002312:	7d7b      	ldrb	r3, [r7, #21]
 8002314:	3301      	adds	r3, #1
 8002316:	757b      	strb	r3, [r7, #21]
 8002318:	7d7a      	ldrb	r2, [r7, #21]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3307      	adds	r3, #7
 8002320:	10db      	asrs	r3, r3, #3
 8002322:	429a      	cmp	r2, r3
 8002324:	dbce      	blt.n	80022c4 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002326:	8a3a      	ldrh	r2, [r7, #16]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3307      	adds	r3, #7
 800232e:	10db      	asrs	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <lcdPutChar+0x1a8>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	b25a      	sxtb	r2, r3
 8002338:	7db9      	ldrb	r1, [r7, #22]
 800233a:	7d3b      	ldrb	r3, [r7, #20]
 800233c:	f1c3 0308 	rsb	r3, r3, #8
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	b25b      	sxtb	r3, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	b25b      	sxtb	r3, r3
 800234a:	4013      	ands	r3, r2
 800234c:	b259      	sxtb	r1, r3
 800234e:	8a3a      	ldrh	r2, [r7, #16]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3307      	adds	r3, #7
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	b2c9      	uxtb	r1, r1
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <lcdPutChar+0x1a8>)
 800235e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	3301      	adds	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	7dfa      	ldrb	r2, [r7, #23]
 800236c:	429a      	cmp	r2, r3
 800236e:	f4ff af5e 	bcc.w	800222e <lcdPutChar+0x56>
	}
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	200006f0 	.word	0x200006f0

08002384 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60ba      	str	r2, [r7, #8]
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4603      	mov	r3, r0
 8002390:	81fb      	strh	r3, [r7, #14]
 8002392:	460b      	mov	r3, r1
 8002394:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
 800239a:	e015      	b.n	80023c8 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	fb12 f303 	smulbb	r3, r2, r3
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	4413      	add	r3, r2
 80023b0:	b298      	uxth	r0, r3
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	7b79      	ldrb	r1, [r7, #13]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f7ff ff0b 	bl	80021d8 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	3301      	adds	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
 80023c8:	7dfc      	ldrb	r4, [r7, #23]
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f7fd ff10 	bl	80001f0 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	429c      	cmp	r4, r3
 80023d4:	d3e2      	bcc.n	800239c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80023e0:	b490      	push	{r4, r7}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	80fb      	strh	r3, [r7, #6]
 80023f2:	4603      	mov	r3, r0
 80023f4:	80bb      	strh	r3, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	4613      	mov	r3, r2
 80023fc:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	b29b      	uxth	r3, r3
 8002404:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e04e      	b.n	80024b4 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2232      	movs	r2, #50	; 0x32
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	4413      	add	r3, r2
 8002422:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <lcdVLine+0xe8>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d01e      	beq.n	800246c <lcdVLine+0x8c>
 800242e:	2b02      	cmp	r3, #2
 8002430:	dc27      	bgt.n	8002482 <lcdVLine+0xa2>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <lcdVLine+0x5c>
 8002436:	2b01      	cmp	r3, #1
 8002438:	d00b      	beq.n	8002452 <lcdVLine+0x72>
 800243a:	e022      	b.n	8002482 <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 800243c:	7b3b      	ldrb	r3, [r7, #12]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	fa42 f303 	asr.w	r3, r2, r3
 8002444:	b25a      	sxtb	r2, r3
 8002446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800244a:	4313      	orrs	r3, r2
 800244c:	b25b      	sxtb	r3, r3
 800244e:	73bb      	strb	r3, [r7, #14]
				break;
 8002450:	e024      	b.n	800249c <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002452:	7b3b      	ldrb	r3, [r7, #12]
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	fa42 f303 	asr.w	r3, r2, r3
 800245a:	b25b      	sxtb	r3, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	b25a      	sxtb	r2, r3
 8002460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002464:	4013      	ands	r3, r2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	73bb      	strb	r3, [r7, #14]
				break;
 800246a:	e017      	b.n	800249c <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 800246c:	7b3b      	ldrb	r3, [r7, #12]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	fa42 f303 	asr.w	r3, r2, r3
 8002474:	b25a      	sxtb	r2, r3
 8002476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800247a:	4053      	eors	r3, r2
 800247c:	b25b      	sxtb	r3, r3
 800247e:	73bb      	strb	r3, [r7, #14]
				break;
 8002480:	e00c      	b.n	800249c <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 8002482:	7b3b      	ldrb	r3, [r7, #12]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	fa42 f303 	asr.w	r3, r2, r3
 800248a:	b25b      	sxtb	r3, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	b25a      	sxtb	r2, r3
 8002490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002494:	4013      	ands	r3, r2
 8002496:	b25b      	sxtb	r3, r3
 8002498:	73bb      	strb	r3, [r7, #14]
				break;
 800249a:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2232      	movs	r2, #50	; 0x32
 80024a0:	fb03 f202 	mul.w	r2, r3, r2
 80024a4:	7b7b      	ldrb	r3, [r7, #13]
 80024a6:	4413      	add	r3, r2
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <lcdVLine+0xe8>)
 80024aa:	7bba      	ldrb	r2, [r7, #14]
 80024ac:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	3301      	adds	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d9ac      	bls.n	8002416 <lcdVLine+0x36>
	}
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc90      	pop	{r4, r7}
 80024c6:	4770      	bx	lr
 80024c8:	200006f0 	.word	0x200006f0

080024cc <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80024cc:	b490      	push	{r4, r7}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4604      	mov	r4, r0
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	4603      	mov	r3, r0
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
 80024e6:	4613      	mov	r3, r2
 80024e8:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80024ea:	23ff      	movs	r3, #255	; 0xff
 80024ec:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80024ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024f2:	2b14      	cmp	r3, #20
 80024f4:	f200 8208 	bhi.w	8002908 <lcdHLine2+0x43c>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <lcdHLine2+0x34>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002555 	.word	0x08002555
 8002504:	0800255b 	.word	0x0800255b
 8002508:	08002561 	.word	0x08002561
 800250c:	08002567 	.word	0x08002567
 8002510:	0800257f 	.word	0x0800257f
 8002514:	08002597 	.word	0x08002597
 8002518:	080025af 	.word	0x080025af
 800251c:	080025f9 	.word	0x080025f9
 8002520:	0800263d 	.word	0x0800263d
 8002524:	08002681 	.word	0x08002681
 8002528:	080026bf 	.word	0x080026bf
 800252c:	080026e5 	.word	0x080026e5
 8002530:	0800270f 	.word	0x0800270f
 8002534:	08002745 	.word	0x08002745
 8002538:	0800275d 	.word	0x0800275d
 800253c:	08002783 	.word	0x08002783
 8002540:	080027b9 	.word	0x080027b9
 8002544:	080027ef 	.word	0x080027ef
 8002548:	08002831 	.word	0x08002831
 800254c:	0800288b 	.word	0x0800288b
 8002550:	080028c7 	.word	0x080028c7
		case 0:	// clear
			pattern = 0x00;
 8002554:	2300      	movs	r3, #0
 8002556:	75fb      	strb	r3, [r7, #23]
			break;
 8002558:	e1ea      	b.n	8002930 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800255a:	23ff      	movs	r3, #255	; 0xff
 800255c:	75fb      	strb	r3, [r7, #23]
			break;
 800255e:	e1e7      	b.n	8002930 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002560:	2355      	movs	r3, #85	; 0x55
 8002562:	75fb      	strb	r3, [r7, #23]
			break;
 8002564:	e1e4      	b.n	8002930 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <lcdHLine2+0xac>
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002576:	e1db      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002578:	23ff      	movs	r3, #255	; 0xff
 800257a:	75fb      	strb	r3, [r7, #23]
			break;
 800257c:	e1d8      	b.n	8002930 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <lcdHLine2+0xc4>
 800258a:	23aa      	movs	r3, #170	; 0xaa
 800258c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 800258e:	e1cf      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002590:	2355      	movs	r3, #85	; 0x55
 8002592:	75fb      	strb	r3, [r7, #23]
			break;
 8002594:	e1cc      	b.n	8002930 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <lcdHLine2+0xdc>
 80025a2:	2388      	movs	r3, #136	; 0x88
 80025a4:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80025a6:	e1c3      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80025a8:	2322      	movs	r3, #34	; 0x22
 80025aa:	75fb      	strb	r3, [r7, #23]
			break;
 80025ac:	e1c0      	b.n	8002930 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <lcdHLine2+0xf4>
 80025ba:	2388      	movs	r3, #136	; 0x88
 80025bc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80025be:	e1a6      	b.n	800290e <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <lcdHLine2+0x106>
 80025cc:	2344      	movs	r3, #68	; 0x44
 80025ce:	75fb      	strb	r3, [r7, #23]
			break;
 80025d0:	e19d      	b.n	800290e <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d102      	bne.n	80025e4 <lcdHLine2+0x118>
 80025de:	2322      	movs	r3, #34	; 0x22
 80025e0:	75fb      	strb	r3, [r7, #23]
			break;
 80025e2:	e194      	b.n	800290e <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	f040 818e 	bne.w	800290e <lcdHLine2+0x442>
 80025f2:	2311      	movs	r3, #17
 80025f4:	75fb      	strb	r3, [r7, #23]
			break;
 80025f6:	e18a      	b.n	800290e <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <lcdHLine2+0x144>
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d102      	bne.n	8002616 <lcdHLine2+0x14a>
 8002610:	23aa      	movs	r3, #170	; 0xaa
 8002612:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002614:	e17d      	b.n	8002912 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <lcdHLine2+0x15c>
 8002622:	2322      	movs	r3, #34	; 0x22
 8002624:	75fb      	strb	r3, [r7, #23]
			break;
 8002626:	e174      	b.n	8002912 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b03      	cmp	r3, #3
 8002632:	f040 816e 	bne.w	8002912 <lcdHLine2+0x446>
 8002636:	2388      	movs	r3, #136	; 0x88
 8002638:	75fb      	strb	r3, [r7, #23]
			break;
 800263a:	e16a      	b.n	8002912 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d005      	beq.n	8002654 <lcdHLine2+0x188>
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b03      	cmp	r3, #3
 8002652:	d102      	bne.n	800265a <lcdHLine2+0x18e>
 8002654:	2355      	movs	r3, #85	; 0x55
 8002656:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002658:	e15d      	b.n	8002916 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <lcdHLine2+0x1a0>
 8002666:	2388      	movs	r3, #136	; 0x88
 8002668:	75fb      	strb	r3, [r7, #23]
			break;
 800266a:	e154      	b.n	8002916 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 814e 	bne.w	8002916 <lcdHLine2+0x44a>
 800267a:	2322      	movs	r3, #34	; 0x22
 800267c:	75fb      	strb	r3, [r7, #23]
			break;
 800267e:	e14a      	b.n	8002916 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <lcdHLine2+0x1cc>
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <lcdHLine2+0x1d2>
 8002698:	23cc      	movs	r3, #204	; 0xcc
 800269a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 800269c:	e13d      	b.n	800291a <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d006      	beq.n	80026b8 <lcdHLine2+0x1ec>
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f040 8131 	bne.w	800291a <lcdHLine2+0x44e>
 80026b8:	2333      	movs	r3, #51	; 0x33
 80026ba:	75fb      	strb	r3, [r7, #23]
			break;
 80026bc:	e12d      	b.n	800291a <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <lcdHLine2+0x204>
 80026ca:	2355      	movs	r3, #85	; 0x55
 80026cc:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80026ce:	e126      	b.n	800291e <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8120 	beq.w	800291e <lcdHLine2+0x452>
 80026de:	23ff      	movs	r3, #255	; 0xff
 80026e0:	75fb      	strb	r3, [r7, #23]
			break;
 80026e2:	e11c      	b.n	800291e <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <lcdHLine2+0x22a>
 80026f0:	23cc      	movs	r3, #204	; 0xcc
 80026f2:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80026f4:	e11c      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d102      	bne.n	8002708 <lcdHLine2+0x23c>
 8002702:	2344      	movs	r3, #68	; 0x44
 8002704:	75fb      	strb	r3, [r7, #23]
			break;
 8002706:	e113      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
			break;
 800270c:	e110      	b.n	8002930 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <lcdHLine2+0x254>
 800271a:	23ee      	movs	r3, #238	; 0xee
 800271c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800271e:	e107      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <lcdHLine2+0x26c>
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d102      	bne.n	800273e <lcdHLine2+0x272>
 8002738:	2322      	movs	r3, #34	; 0x22
 800273a:	75fb      	strb	r3, [r7, #23]
			break;
 800273c:	e0f8      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
			break;
 8002742:	e0f5      	b.n	8002930 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <lcdHLine2+0x28a>
 8002750:	23ff      	movs	r3, #255	; 0xff
 8002752:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002754:	e0ec      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002756:	2388      	movs	r3, #136	; 0x88
 8002758:	75fb      	strb	r3, [r7, #23]
			break;
 800275a:	e0e9      	b.n	8002930 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <lcdHLine2+0x2a2>
 8002768:	23aa      	movs	r3, #170	; 0xaa
 800276a:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 800276c:	e0d9      	b.n	8002922 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80d3 	beq.w	8002922 <lcdHLine2+0x456>
 800277c:	2300      	movs	r3, #0
 800277e:	75fb      	strb	r3, [r7, #23]
			break;
 8002780:	e0cf      	b.n	8002922 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <lcdHLine2+0x2ce>
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d102      	bne.n	80027a0 <lcdHLine2+0x2d4>
 800279a:	23aa      	movs	r3, #170	; 0xaa
 800279c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 800279e:	e0c7      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <lcdHLine2+0x2e6>
 80027ac:	2344      	movs	r3, #68	; 0x44
 80027ae:	75fb      	strb	r3, [r7, #23]
			break;
 80027b0:	e0be      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
			break;
 80027b6:	e0bb      	b.n	8002930 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <lcdHLine2+0x304>
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d102      	bne.n	80027d6 <lcdHLine2+0x30a>
 80027d0:	23ee      	movs	r3, #238	; 0xee
 80027d2:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80027d4:	e0ac      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <lcdHLine2+0x31c>
 80027e2:	23aa      	movs	r3, #170	; 0xaa
 80027e4:	75fb      	strb	r3, [r7, #23]
			break;
 80027e6:	e0a3      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x00;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
			break;
 80027ec:	e0a0      	b.n	8002930 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <lcdHLine2+0x33a>
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d102      	bne.n	800280c <lcdHLine2+0x340>
 8002806:	2344      	movs	r3, #68	; 0x44
 8002808:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800280a:	e08c      	b.n	8002926 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <lcdHLine2+0x352>
 8002818:	23aa      	movs	r3, #170	; 0xaa
 800281a:	75fb      	strb	r3, [r7, #23]
			break;
 800281c:	e083      	b.n	8002926 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b03      	cmp	r3, #3
 8002828:	d17d      	bne.n	8002926 <lcdHLine2+0x45a>
 800282a:	2311      	movs	r3, #17
 800282c:	75fb      	strb	r3, [r7, #23]
			break;
 800282e:	e07a      	b.n	8002926 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4baf      	ldr	r3, [pc, #700]	; (8002af0 <lcdHLine2+0x624>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	0859      	lsrs	r1, r3, #1
 800283a:	460b      	mov	r3, r1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	440b      	add	r3, r1
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <lcdHLine2+0x382>
 8002848:	2355      	movs	r3, #85	; 0x55
 800284a:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 800284c:	e06d      	b.n	800292a <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4ba7      	ldr	r3, [pc, #668]	; (8002af0 <lcdHLine2+0x624>)
 8002852:	fba3 1302 	umull	r1, r3, r3, r2
 8002856:	0859      	lsrs	r1, r3, #1
 8002858:	460b      	mov	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <lcdHLine2+0x3a0>
 8002866:	23aa      	movs	r3, #170	; 0xaa
 8002868:	75fb      	strb	r3, [r7, #23]
			break;
 800286a:	e05e      	b.n	800292a <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <lcdHLine2+0x624>)
 8002870:	fba3 1302 	umull	r1, r3, r3, r2
 8002874:	0859      	lsrs	r1, r3, #1
 8002876:	460b      	mov	r3, r1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	440b      	add	r3, r1
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d152      	bne.n	800292a <lcdHLine2+0x45e>
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
			break;
 8002888:	e04f      	b.n	800292a <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <lcdHLine2+0x3d0>
 8002896:	2322      	movs	r3, #34	; 0x22
 8002898:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 800289a:	e049      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d102      	bne.n	80028ae <lcdHLine2+0x3e2>
 80028a8:	2355      	movs	r3, #85	; 0x55
 80028aa:	75fb      	strb	r3, [r7, #23]
			break;
 80028ac:	e040      	b.n	8002930 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d102      	bne.n	80028c0 <lcdHLine2+0x3f4>
 80028ba:	2388      	movs	r3, #136	; 0x88
 80028bc:	75fb      	strb	r3, [r7, #23]
			break;
 80028be:	e037      	b.n	8002930 <lcdHLine2+0x464>
			else pattern = 0x00;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]
			break;
 80028c4:	e034      	b.n	8002930 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <lcdHLine2+0x412>
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d102      	bne.n	80028e4 <lcdHLine2+0x418>
 80028de:	2388      	movs	r3, #136	; 0x88
 80028e0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 80028e2:	e024      	b.n	800292e <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <lcdHLine2+0x42a>
 80028f0:	2377      	movs	r3, #119	; 0x77
 80028f2:	75fb      	strb	r3, [r7, #23]
			break;
 80028f4:	e01b      	b.n	800292e <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d115      	bne.n	800292e <lcdHLine2+0x462>
 8002902:	23aa      	movs	r3, #170	; 0xaa
 8002904:	75fb      	strb	r3, [r7, #23]
			break;
 8002906:	e012      	b.n	800292e <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
			break;
 800290c:	e010      	b.n	8002930 <lcdHLine2+0x464>
			break;
 800290e:	bf00      	nop
 8002910:	e00e      	b.n	8002930 <lcdHLine2+0x464>
			break;
 8002912:	bf00      	nop
 8002914:	e00c      	b.n	8002930 <lcdHLine2+0x464>
			break;
 8002916:	bf00      	nop
 8002918:	e00a      	b.n	8002930 <lcdHLine2+0x464>
			break;
 800291a:	bf00      	nop
 800291c:	e008      	b.n	8002930 <lcdHLine2+0x464>
			break;
 800291e:	bf00      	nop
 8002920:	e006      	b.n	8002930 <lcdHLine2+0x464>
			break;
 8002922:	bf00      	nop
 8002924:	e004      	b.n	8002930 <lcdHLine2+0x464>
			break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <lcdHLine2+0x464>
			break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <lcdHLine2+0x464>
			break;
 800292e:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	b29b      	uxth	r3, r3
 8002936:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8002942:	88bb      	ldrh	r3, [r7, #4]
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	b29b      	uxth	r3, r3
 8002948:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2232      	movs	r2, #50	; 0x32
 8002958:	fb03 f202 	mul.w	r2, r3, r2
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	4413      	add	r3, r2
 8002960:	4a64      	ldr	r2, [pc, #400]	; (8002af4 <lcdHLine2+0x628>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	2232      	movs	r2, #50	; 0x32
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	4413      	add	r3, r2
 8002972:	4a60      	ldr	r2, [pc, #384]	; (8002af4 <lcdHLine2+0x628>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8002978:	23ff      	movs	r3, #255	; 0xff
 800297a:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 800297c:	7bbb      	ldrb	r3, [r7, #14]
 800297e:	f1c3 0208 	rsb	r2, r3, #8
 8002982:	88b9      	ldrh	r1, [r7, #4]
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	1acb      	subs	r3, r1, r3
 8002988:	3301      	adds	r3, #1
 800298a:	429a      	cmp	r2, r3
 800298c:	dd11      	ble.n	80029b2 <lcdHLine2+0x4e6>
 800298e:	88ba      	ldrh	r2, [r7, #4]
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	3301      	adds	r3, #1
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	fa42 f303 	asr.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	7bbb      	ldrb	r3, [r7, #14]
 80029a0:	fa42 f303 	asr.w	r3, r2, r3
 80029a4:	b25a      	sxtb	r2, r3
 80029a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	753b      	strb	r3, [r7, #20]
 80029b0:	e001      	b.n	80029b6 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80029b6:	78bb      	ldrb	r3, [r7, #2]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	f200 8130 	bhi.w	8002c1e <lcdHLine2+0x752>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <lcdHLine2+0x4f8>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	08002a59 	.word	0x08002a59
 80029cc:	08002af9 	.word	0x08002af9
 80029d0:	08002b7d 	.word	0x08002b7d
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	fa42 f303 	asr.w	r3, r2, r3
 80029dc:	b25a      	sxtb	r2, r3
 80029de:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80029e2:	4013      	ands	r3, r2
 80029e4:	b25a      	sxtb	r2, r3
 80029e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80029f0:	7b3b      	ldrb	r3, [r7, #12]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	b25a      	sxtb	r2, r3
 80029fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a02:	4013      	ands	r3, r2
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002a10:	2301      	movs	r3, #1
 8002a12:	74fb      	strb	r3, [r7, #19]
 8002a14:	e019      	b.n	8002a4a <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	2232      	movs	r2, #50	; 0x32
 8002a1a:	fb03 f202 	mul.w	r2, r3, r2
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	441a      	add	r2, r3
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <lcdHLine2+0x628>)
 8002a28:	5cd1      	ldrb	r1, [r2, r3]
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	2232      	movs	r2, #50	; 0x32
 8002a2e:	fb03 f202 	mul.w	r2, r3, r2
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	441a      	add	r2, r3
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	4413      	add	r3, r2
 8002a3a:	7dfa      	ldrb	r2, [r7, #23]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	b2d1      	uxtb	r1, r2
 8002a40:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <lcdHLine2+0x628>)
 8002a42:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	3301      	adds	r3, #1
 8002a48:	74fb      	strb	r3, [r7, #19]
 8002a4a:	7cfa      	ldrb	r2, [r7, #19]
 8002a4c:	7b79      	ldrb	r1, [r7, #13]
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	1acb      	subs	r3, r1, r3
 8002a52:	429a      	cmp	r2, r3
 8002a54:	dbdf      	blt.n	8002a16 <lcdHLine2+0x54a>
			}
			break;
 8002a56:	e0e2      	b.n	8002c1e <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	fa42 f303 	asr.w	r3, r2, r3
 8002a60:	b25a      	sxtb	r2, r3
 8002a62:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	b25a      	sxtb	r2, r3
 8002a6e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8002a78:	7b3b      	ldrb	r3, [r7, #12]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	b25a      	sxtb	r2, r3
 8002a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	b25a      	sxtb	r2, r3
 8002a92:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002a96:	4013      	ands	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	74bb      	strb	r3, [r7, #18]
 8002aa0:	e01e      	b.n	8002ae0 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	2232      	movs	r2, #50	; 0x32
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	441a      	add	r2, r3
 8002aae:	7cbb      	ldrb	r3, [r7, #18]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <lcdHLine2+0x628>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	b25a      	sxtb	r2, r3
 8002ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	b259      	sxtb	r1, r3
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	2232      	movs	r2, #50	; 0x32
 8002ac8:	fb03 f202 	mul.w	r2, r3, r2
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	441a      	add	r2, r3
 8002ad0:	7cbb      	ldrb	r3, [r7, #18]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b2c9      	uxtb	r1, r1
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <lcdHLine2+0x628>)
 8002ad8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ada:	7cbb      	ldrb	r3, [r7, #18]
 8002adc:	3301      	adds	r3, #1
 8002ade:	74bb      	strb	r3, [r7, #18]
 8002ae0:	7cba      	ldrb	r2, [r7, #18]
 8002ae2:	7b79      	ldrb	r1, [r7, #13]
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbda      	blt.n	8002aa2 <lcdHLine2+0x5d6>
			}
			break;
 8002aec:	e097      	b.n	8002c1e <lcdHLine2+0x752>
 8002aee:	bf00      	nop
 8002af0:	aaaaaaab 	.word	0xaaaaaaab
 8002af4:	200006f0 	.word	0x200006f0
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	22ff      	movs	r2, #255	; 0xff
 8002afc:	fa42 f303 	asr.w	r3, r2, r3
 8002b00:	b25a      	sxtb	r2, r3
 8002b02:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002b06:	4013      	ands	r3, r2
 8002b08:	b25a      	sxtb	r2, r3
 8002b0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b0e:	4053      	eors	r3, r2
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	22ff      	movs	r2, #255	; 0xff
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	b25a      	sxtb	r2, r3
 8002b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b25a      	sxtb	r2, r3
 8002b2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b2e:	4053      	eors	r3, r2
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b34:	2301      	movs	r3, #1
 8002b36:	747b      	strb	r3, [r7, #17]
 8002b38:	e019      	b.n	8002b6e <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	2232      	movs	r2, #50	; 0x32
 8002b3e:	fb03 f202 	mul.w	r2, r3, r2
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	441a      	add	r2, r3
 8002b46:	7c7b      	ldrb	r3, [r7, #17]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <lcdHLine2+0x788>)
 8002b4c:	5cd1      	ldrb	r1, [r2, r3]
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	2232      	movs	r2, #50	; 0x32
 8002b52:	fb03 f202 	mul.w	r2, r3, r2
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	441a      	add	r2, r3
 8002b5a:	7c7b      	ldrb	r3, [r7, #17]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	7dfa      	ldrb	r2, [r7, #23]
 8002b60:	404a      	eors	r2, r1
 8002b62:	b2d1      	uxtb	r1, r2
 8002b64:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <lcdHLine2+0x788>)
 8002b66:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b68:	7c7b      	ldrb	r3, [r7, #17]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	747b      	strb	r3, [r7, #17]
 8002b6e:	7c7a      	ldrb	r2, [r7, #17]
 8002b70:	7b79      	ldrb	r1, [r7, #13]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	1acb      	subs	r3, r1, r3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	dbdf      	blt.n	8002b3a <lcdHLine2+0x66e>
			}
			break;
 8002b7a:	e050      	b.n	8002c1e <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	22ff      	movs	r2, #255	; 0xff
 8002b80:	fa42 f303 	asr.w	r3, r2, r3
 8002b84:	b25a      	sxtb	r2, r3
 8002b86:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	b259      	sxtb	r1, r3
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	f1c3 0308 	rsb	r3, r3, #8
 8002b9c:	20ff      	movs	r0, #255	; 0xff
 8002b9e:	fa00 f303 	lsl.w	r3, r0, r3
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8002bb2:	7b3b      	ldrb	r3, [r7, #12]
 8002bb4:	f1c3 0307 	rsb	r3, r3, #7
 8002bb8:	22ff      	movs	r2, #255	; 0xff
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	b25a      	sxtb	r2, r3
 8002bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	b259      	sxtb	r1, r3
 8002bd0:	7b3b      	ldrb	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	20ff      	movs	r0, #255	; 0xff
 8002bd6:	fa40 f303 	asr.w	r3, r0, r3
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	400b      	ands	r3, r1
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002bea:	2301      	movs	r3, #1
 8002bec:	743b      	strb	r3, [r7, #16]
 8002bee:	e00f      	b.n	8002c10 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2232      	movs	r2, #50	; 0x32
 8002bf4:	fb03 f202 	mul.w	r2, r3, r2
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	7c3b      	ldrb	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	7dfa      	ldrb	r2, [r7, #23]
 8002c02:	43d2      	mvns	r2, r2
 8002c04:	b2d1      	uxtb	r1, r2
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <lcdHLine2+0x788>)
 8002c08:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c0a:	7c3b      	ldrb	r3, [r7, #16]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	743b      	strb	r3, [r7, #16]
 8002c10:	7c3a      	ldrb	r2, [r7, #16]
 8002c12:	7b79      	ldrb	r1, [r7, #13]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	1acb      	subs	r3, r1, r3
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dbe9      	blt.n	8002bf0 <lcdHLine2+0x724>
			}
			break;
 8002c1c:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	2232      	movs	r2, #50	; 0x32
 8002c22:	fb03 f202 	mul.w	r2, r3, r2
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	4413      	add	r3, r2
 8002c2a:	490a      	ldr	r1, [pc, #40]	; (8002c54 <lcdHLine2+0x788>)
 8002c2c:	7dba      	ldrb	r2, [r7, #22]
 8002c2e:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002c30:	7b7a      	ldrb	r2, [r7, #13]
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d908      	bls.n	8002c4a <lcdHLine2+0x77e>
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2232      	movs	r2, #50	; 0x32
 8002c3c:	fb03 f202 	mul.w	r2, r3, r2
 8002c40:	7b7b      	ldrb	r3, [r7, #13]
 8002c42:	4413      	add	r3, r2
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <lcdHLine2+0x788>)
 8002c46:	7d7a      	ldrb	r2, [r7, #21]
 8002c48:	54ca      	strb	r2, [r1, r3]
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc90      	pop	{r4, r7}
 8002c52:	4770      	bx	lr
 8002c54:	200006f0 	.word	0x200006f0

08002c58 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002c58:	b490      	push	{r4, r7}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4604      	mov	r4, r0
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	80fb      	strh	r3, [r7, #6]
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80bb      	strh	r3, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70fb      	strb	r3, [r7, #3]
 8002c72:	4613      	mov	r3, r2
 8002c74:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	2232      	movs	r2, #50	; 0x32
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	7c7b      	ldrb	r3, [r7, #17]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <lcdHLine+0x214>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	2232      	movs	r2, #50	; 0x32
 8002cb0:	fb03 f202 	mul.w	r2, r3, r2
 8002cb4:	7c7b      	ldrb	r3, [r7, #17]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a6b      	ldr	r2, [pc, #428]	; (8002e6c <lcdHLine+0x214>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8002cc2:	23ff      	movs	r3, #255	; 0xff
 8002cc4:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002cc6:	7c3b      	ldrb	r3, [r7, #16]
 8002cc8:	f1c3 0208 	rsb	r2, r3, #8
 8002ccc:	88b9      	ldrh	r1, [r7, #4]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	1acb      	subs	r3, r1, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dd09      	ble.n	8002cec <lcdHLine+0x94>
 8002cd8:	88ba      	ldrh	r2, [r7, #4]
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	fa42 f303 	asr.w	r3, r2, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d067      	beq.n	8002dc2 <lcdHLine+0x16a>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	f300 809e 	bgt.w	8002e34 <lcdHLine+0x1dc>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <lcdHLine+0xaa>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d02e      	beq.n	8002d5e <lcdHLine+0x106>
 8002d00:	e098      	b.n	8002e34 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8002d02:	7d7a      	ldrb	r2, [r7, #21]
 8002d04:	7c3b      	ldrb	r3, [r7, #16]
 8002d06:	fa42 f303 	asr.w	r3, r2, r3
 8002d0a:	b25a      	sxtb	r2, r3
 8002d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002d16:	7bbb      	ldrb	r3, [r7, #14]
 8002d18:	f1c3 0307 	rsb	r3, r3, #7
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002d2e:	2301      	movs	r3, #1
 8002d30:	753b      	strb	r3, [r7, #20]
 8002d32:	e00d      	b.n	8002d50 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2232      	movs	r2, #50	; 0x32
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	441a      	add	r2, r3
 8002d40:	7d3b      	ldrb	r3, [r7, #20]
 8002d42:	4413      	add	r3, r2
 8002d44:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <lcdHLine+0x214>)
 8002d46:	21ff      	movs	r1, #255	; 0xff
 8002d48:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002d4a:	7d3b      	ldrb	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	753b      	strb	r3, [r7, #20]
 8002d50:	7d3a      	ldrb	r2, [r7, #20]
 8002d52:	7bf9      	ldrb	r1, [r7, #15]
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	1acb      	subs	r3, r1, r3
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbeb      	blt.n	8002d34 <lcdHLine+0xdc>
		}
		break;
 8002d5c:	e06a      	b.n	8002e34 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8002d5e:	7d7a      	ldrb	r2, [r7, #21]
 8002d60:	7c3b      	ldrb	r3, [r7, #16]
 8002d62:	fa42 f303 	asr.w	r3, r2, r3
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	b25a      	sxtb	r2, r3
 8002d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d70:	4013      	ands	r3, r2
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8002d76:	7bbb      	ldrb	r3, [r7, #14]
 8002d78:	f1c3 0307 	rsb	r3, r3, #7
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	b25a      	sxtb	r2, r3
 8002d88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002d92:	2301      	movs	r3, #1
 8002d94:	74fb      	strb	r3, [r7, #19]
 8002d96:	e00d      	b.n	8002db4 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2232      	movs	r2, #50	; 0x32
 8002d9c:	fb03 f202 	mul.w	r2, r3, r2
 8002da0:	7c7b      	ldrb	r3, [r7, #17]
 8002da2:	441a      	add	r2, r3
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <lcdHLine+0x214>)
 8002daa:	2100      	movs	r1, #0
 8002dac:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	3301      	adds	r3, #1
 8002db2:	74fb      	strb	r3, [r7, #19]
 8002db4:	7cfa      	ldrb	r2, [r7, #19]
 8002db6:	7bf9      	ldrb	r1, [r7, #15]
 8002db8:	7c7b      	ldrb	r3, [r7, #17]
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbeb      	blt.n	8002d98 <lcdHLine+0x140>
		}
		break;
 8002dc0:	e038      	b.n	8002e34 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8002dc2:	7d7a      	ldrb	r2, [r7, #21]
 8002dc4:	7c3b      	ldrb	r3, [r7, #16]
 8002dc6:	fa42 f303 	asr.w	r3, r2, r3
 8002dca:	b25a      	sxtb	r2, r3
 8002dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dd0:	4053      	eors	r3, r2
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002dd6:	7bbb      	ldrb	r3, [r7, #14]
 8002dd8:	f1c3 0307 	rsb	r3, r3, #7
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	b25a      	sxtb	r2, r3
 8002de4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002de8:	4053      	eors	r3, r2
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002dee:	2301      	movs	r3, #1
 8002df0:	74bb      	strb	r3, [r7, #18]
 8002df2:	e018      	b.n	8002e26 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	2232      	movs	r2, #50	; 0x32
 8002df8:	fb03 f202 	mul.w	r2, r3, r2
 8002dfc:	7c7b      	ldrb	r3, [r7, #17]
 8002dfe:	441a      	add	r2, r3
 8002e00:	7cbb      	ldrb	r3, [r7, #18]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <lcdHLine+0x214>)
 8002e06:	5cd2      	ldrb	r2, [r2, r3]
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	2132      	movs	r1, #50	; 0x32
 8002e0c:	fb03 f101 	mul.w	r1, r3, r1
 8002e10:	7c7b      	ldrb	r3, [r7, #17]
 8002e12:	4419      	add	r1, r3
 8002e14:	7cbb      	ldrb	r3, [r7, #18]
 8002e16:	440b      	add	r3, r1
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	b2d1      	uxtb	r1, r2
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <lcdHLine+0x214>)
 8002e1e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e20:	7cbb      	ldrb	r3, [r7, #18]
 8002e22:	3301      	adds	r3, #1
 8002e24:	74bb      	strb	r3, [r7, #18]
 8002e26:	7cba      	ldrb	r2, [r7, #18]
 8002e28:	7bf9      	ldrb	r1, [r7, #15]
 8002e2a:	7c7b      	ldrb	r3, [r7, #17]
 8002e2c:	1acb      	subs	r3, r1, r3
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbe0      	blt.n	8002df4 <lcdHLine+0x19c>
		}
		break;
 8002e32:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2232      	movs	r2, #50	; 0x32
 8002e38:	fb03 f202 	mul.w	r2, r3, r2
 8002e3c:	7c7b      	ldrb	r3, [r7, #17]
 8002e3e:	4413      	add	r3, r2
 8002e40:	490a      	ldr	r1, [pc, #40]	; (8002e6c <lcdHLine+0x214>)
 8002e42:	7dfa      	ldrb	r2, [r7, #23]
 8002e44:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	7c7b      	ldrb	r3, [r7, #17]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d908      	bls.n	8002e60 <lcdHLine+0x208>
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	2232      	movs	r2, #50	; 0x32
 8002e52:	fb03 f202 	mul.w	r2, r3, r2
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4904      	ldr	r1, [pc, #16]	; (8002e6c <lcdHLine+0x214>)
 8002e5c:	7dba      	ldrb	r2, [r7, #22]
 8002e5e:	54ca      	strb	r2, [r1, r3]
}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc90      	pop	{r4, r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	200006f0 	.word	0x200006f0

08002e70 <lcdRefresh>:

void lcdRefresh(void){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <lcdRefresh+0x7c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d032      	beq.n	8002ee4 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	481b      	ldr	r0, [pc, #108]	; (8002ef0 <lcdRefresh+0x80>)
 8002e84:	f005 f8f8 	bl	8008078 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002e88:	2301      	movs	r3, #1
 8002e8a:	71fb      	strb	r3, [r7, #7]
 8002e8c:	e01c      	b.n	8002ec8 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f93d 	bl	8002110 <reverse_uint8>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <lcdRefresh+0x84>)
 8002e9c:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8002e9e:	2396      	movs	r3, #150	; 0x96
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4914      	ldr	r1, [pc, #80]	; (8002ef4 <lcdRefresh+0x84>)
 8002ea4:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <lcdRefresh+0x88>)
 8002ea6:	f007 fb58 	bl	800a55a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	2232      	movs	r2, #50	; 0x32
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <lcdRefresh+0x8c>)
 8002eb6:	1899      	adds	r1, r3, r2
 8002eb8:	2396      	movs	r3, #150	; 0x96
 8002eba:	2232      	movs	r2, #50	; 0x32
 8002ebc:	480e      	ldr	r0, [pc, #56]	; (8002ef8 <lcdRefresh+0x88>)
 8002ebe:	f007 fb4c 	bl	800a55a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2bf1      	cmp	r3, #241	; 0xf1
 8002ecc:	d9df      	bls.n	8002e8e <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8002ece:	2396      	movs	r3, #150	; 0x96
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	490b      	ldr	r1, [pc, #44]	; (8002f00 <lcdRefresh+0x90>)
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <lcdRefresh+0x88>)
 8002ed6:	f007 fb40 	bl	800a55a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002eda:	2200      	movs	r2, #0
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <lcdRefresh+0x80>)
 8002ee0:	f005 f8ca 	bl	8008078 <HAL_GPIO_WritePin>
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000144 	.word	0x20000144
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	20000148 	.word	0x20000148
 8002ef8:	20003764 	.word	0x20003764
 8002efc:	200006f0 	.word	0x200006f0
 8002f00:	200006ec 	.word	0x200006ec

08002f04 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	80fb      	strh	r3, [r7, #6]
 8002f16:	4603      	mov	r3, r0
 8002f18:	80bb      	strh	r3, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e009      	b.n	8002f3c <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002f28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	88b9      	ldrh	r1, [r7, #4]
 8002f30:	88f8      	ldrh	r0, [r7, #6]
 8002f32:	f7ff fe91 	bl	8002c58 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	78bb      	ldrb	r3, [r7, #2]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d9f1      	bls.n	8002f28 <lcdRect+0x24>
	}
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8002f4e:	b590      	push	{r4, r7, lr}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af02      	add	r7, sp, #8
 8002f54:	4604      	mov	r4, r0
 8002f56:	4608      	mov	r0, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	80fb      	strh	r3, [r7, #6]
 8002f60:	4603      	mov	r3, r0
 8002f62:	80bb      	strh	r3, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	88bb      	ldrh	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d046      	beq.n	8003002 <lcdRect2+0xb4>
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	78bb      	ldrb	r3, [r7, #2]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d042      	beq.n	8003002 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e00d      	b.n	8002f9e <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8002f82:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	88b9      	ldrh	r1, [r7, #4]
 8002f8a:	88f8      	ldrh	r0, [r7, #6]
 8002f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	4623      	mov	r3, r4
 8002f94:	f7ff fa9a 	bl	80024cc <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	78bb      	ldrb	r3, [r7, #2]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d9ed      	bls.n	8002f82 <lcdRect2+0x34>
		}
		if(outline){
 8002fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d029      	beq.n	8003002 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8002fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	88b9      	ldrh	r1, [r7, #4]
 8002fb6:	88f8      	ldrh	r0, [r7, #6]
 8002fb8:	2401      	movs	r4, #1
 8002fba:	9400      	str	r4, [sp, #0]
 8002fbc:	f7ff fa86 	bl	80024cc <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8002fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fc4:	78ba      	ldrb	r2, [r7, #2]
 8002fc6:	88b9      	ldrh	r1, [r7, #4]
 8002fc8:	88f8      	ldrh	r0, [r7, #6]
 8002fca:	2401      	movs	r4, #1
 8002fcc:	9400      	str	r4, [sp, #0]
 8002fce:	f7ff fa7d 	bl	80024cc <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b299      	uxth	r1, r3
 8002fda:	78bb      	ldrb	r3, [r7, #2]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fe4:	88f8      	ldrh	r0, [r7, #6]
 8002fe6:	f7ff f9fb 	bl	80023e0 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b299      	uxth	r1, r3
 8002ff2:	78bb      	ldrb	r3, [r7, #2]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ffc:	88b8      	ldrh	r0, [r7, #4]
 8002ffe:	f7ff f9ef 	bl	80023e0 <lcdVLine>
		}
	}
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
	...

0800300c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b0cf      	sub	sp, #316	; 0x13c
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003012:	f004 f8c3 	bl	800719c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003016:	f000 f889 	bl	800312c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800301a:	f7fe fd17 	bl	8001a4c <MX_GPIO_Init>
  MX_DMA_Init();
 800301e:	f7fe fcf5 	bl	8001a0c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003022:	f000 fd63 	bl	8003aec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003026:	f000 f9d7 	bl	80033d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800302a:	f000 fb8d 	bl	8003748 <MX_TIM1_Init>
  MX_TIM10_Init();
 800302e:	f000 fc2d 	bl	800388c <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8003032:	f000 fd85 	bl	8003b40 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8003036:	f7fe ffe3 	bl	8002000 <MX_I2C1_Init>
  MX_TIM11_Init();
 800303a:	f000 fc4b 	bl	80038d4 <MX_TIM11_Init>
  MX_RTC_Init();
 800303e:	f000 f971 	bl	8003324 <MX_RTC_Init>
  MX_TIM13_Init();
 8003042:	f000 fc6b 	bl	800391c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003046:	482b      	ldr	r0, [pc, #172]	; (80030f4 <main+0xe8>)
 8003048:	f007 fc8e 	bl	800a968 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800304c:	4829      	ldr	r0, [pc, #164]	; (80030f4 <main+0xe8>)
 800304e:	f007 fcdb 	bl	800aa08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003052:	2100      	movs	r1, #0
 8003054:	4827      	ldr	r0, [pc, #156]	; (80030f4 <main+0xe8>)
 8003056:	f007 fda1 	bl	800ab9c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 800305a:	4827      	ldr	r0, [pc, #156]	; (80030f8 <main+0xec>)
 800305c:	f007 fcd4 	bl	800aa08 <HAL_TIM_Base_Start_IT>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003060:	4826      	ldr	r0, [pc, #152]	; (80030fc <main+0xf0>)
 8003062:	f007 fcd1 	bl	800aa08 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003066:	4826      	ldr	r0, [pc, #152]	; (8003100 <main+0xf4>)
 8003068:	f7fe fb22 	bl	80016b0 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 800306c:	4825      	ldr	r0, [pc, #148]	; (8003104 <main+0xf8>)
 800306e:	f007 fccb 	bl	800aa08 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003072:	4c25      	ldr	r4, [pc, #148]	; (8003108 <main+0xfc>)
 8003074:	463b      	mov	r3, r7
 8003076:	4925      	ldr	r1, [pc, #148]	; (800310c <main+0x100>)
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fdd1 	bl	8001c20 <initGps>
 800307e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003082:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003086:	4620      	mov	r0, r4
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800308e:	461a      	mov	r2, r3
 8003090:	f009 fea6 	bl	800cde0 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003094:	481e      	ldr	r0, [pc, #120]	; (8003110 <main+0x104>)
 8003096:	f7fe f84b 	bl	8001130 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 800309a:	f240 118f 	movw	r1, #399	; 0x18f
 800309e:	481d      	ldr	r0, [pc, #116]	; (8003114 <main+0x108>)
 80030a0:	f003 ff35 	bl	8006f0e <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 80030a4:	f240 128f 	movw	r2, #399	; 0x18f
 80030a8:	2102      	movs	r1, #2
 80030aa:	481b      	ldr	r0, [pc, #108]	; (8003118 <main+0x10c>)
 80030ac:	f003 fe72 	bl	8006d94 <cbuf_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80030b0:	f7ff f858 	bl	8002164 <lcdClearBuffer>
  lcdRefresh();
 80030b4:	f7ff fedc 	bl	8002e70 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 80030b8:	4c18      	ldr	r4, [pc, #96]	; (800311c <main+0x110>)
 80030ba:	463b      	mov	r3, r7
 80030bc:	4914      	ldr	r1, [pc, #80]	; (8003110 <main+0x104>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fa9e 	bl	8001600 <getBmpData>
 80030c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80030c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80030d2:	2200      	movs	r2, #0
 80030d4:	4912      	ldr	r1, [pc, #72]	; (8003120 <main+0x114>)
 80030d6:	4813      	ldr	r0, [pc, #76]	; (8003124 <main+0x118>)
 80030d8:	f006 ffc8 	bl	800a06c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80030dc:	2200      	movs	r2, #0
 80030de:	4912      	ldr	r1, [pc, #72]	; (8003128 <main+0x11c>)
 80030e0:	4810      	ldr	r0, [pc, #64]	; (8003124 <main+0x118>)
 80030e2:	f007 f8a5 	bl	800a230 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 80030e6:	f7ff f83d 	bl	8002164 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 80030ea:	f7fe ff6b 	bl	8001fc4 <showGui>

	  lcdRefresh();
 80030ee:	f7ff febf 	bl	8002e70 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 80030f2:	e7e1      	b.n	80030b8 <main+0xac>
 80030f4:	200037c0 	.word	0x200037c0
 80030f8:	20003808 	.word	0x20003808
 80030fc:	20003850 	.word	0x20003850
 8003100:	2000002c 	.word	0x2000002c
 8003104:	20003898 	.word	0x20003898
 8003108:	2000360c 	.word	0x2000360c
 800310c:	20003924 	.word	0x20003924
 8003110:	20000514 	.word	0x20000514
 8003114:	200035fc 	.word	0x200035fc
 8003118:	200035e8 	.word	0x200035e8
 800311c:	20000558 	.word	0x20000558
 8003120:	200035d0 	.word	0x200035d0
 8003124:	20003744 	.word	0x20003744
 8003128:	200035e4 	.word	0x200035e4

0800312c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b094      	sub	sp, #80	; 0x50
 8003130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003132:	f107 0320 	add.w	r3, r7, #32
 8003136:	2230      	movs	r2, #48	; 0x30
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f009 fe5e 	bl	800cdfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	4b29      	ldr	r3, [pc, #164]	; (80031fc <SystemClock_Config+0xd0>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a28      	ldr	r2, [pc, #160]	; (80031fc <SystemClock_Config+0xd0>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
 8003160:	4b26      	ldr	r3, [pc, #152]	; (80031fc <SystemClock_Config+0xd0>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <SystemClock_Config+0xd4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <SystemClock_Config+0xd4>)
 8003176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <SystemClock_Config+0xd4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003188:	2305      	movs	r3, #5
 800318a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800318c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003192:	2301      	movs	r3, #1
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003196:	2302      	movs	r3, #2
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800319a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031a0:	2304      	movs	r3, #4
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031a4:	23a8      	movs	r3, #168	; 0xa8
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031a8:	2302      	movs	r3, #2
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80031ac:	2307      	movs	r3, #7
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b0:	f107 0320 	add.w	r3, r7, #32
 80031b4:	4618      	mov	r0, r3
 80031b6:	f005 fff1 	bl	800919c <HAL_RCC_OscConfig>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80031c0:	f000 f8a2 	bl	8003308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c4:	230f      	movs	r3, #15
 80031c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2105      	movs	r1, #5
 80031e2:	4618      	mov	r0, r3
 80031e4:	f006 fa52 	bl	800968c <HAL_RCC_ClockConfig>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80031ee:	f000 f88b 	bl	8003308 <Error_Handler>
  }
}
 80031f2:	bf00      	nop
 80031f4:	3750      	adds	r7, #80	; 0x50
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000

08003204 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8003216:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003224:	f000 fa3c 	bl	80036a0 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 20Hz
	if(htim->Instance == TIM11){
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d102      	bne.n	8003238 <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003232:	4822      	ldr	r0, [pc, #136]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003234:	f7fe fbd0 	bl	80019d8 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d131      	bne.n	80032a6 <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003244:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PeriodElapsedCallback+0x52>
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800324e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003252:	481c      	ldr	r0, [pc, #112]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003254:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003256:	2101      	movs	r1, #1
 8003258:	481b      	ldr	r0, [pc, #108]	; (80032c8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800325a:	f004 ff26 	bl	80080aa <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003260:	7b1b      	ldrb	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00d      	beq.n	8003282 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003278:	ee17 1a90 	vmov	r1, s15
 800327c:	4813      	ldr	r0, [pc, #76]	; (80032cc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800327e:	f003 fe7c 	bl	8006f7a <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	b29b      	uxth	r3, r3
 8003290:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003294:	7c1b      	ldrb	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800329a:	f107 030e 	add.w	r3, r7, #14
 800329e:	4619      	mov	r1, r3
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80032a2:	f003 fdb4 	bl	8006e0e <cbuf_ovw>

	}
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40014400 	.word	0x40014400
 80032b4:	200037bc 	.word	0x200037bc
 80032b8:	40014800 	.word	0x40014800
 80032bc:	2000002c 	.word	0x2000002c
 80032c0:	40001c00 	.word	0x40001c00
 80032c4:	2000360c 	.word	0x2000360c
 80032c8:	40020400 	.word	0x40020400
 80032cc:	200035fc 	.word	0x200035fc
 80032d0:	20000558 	.word	0x20000558
 80032d4:	cccccccd 	.word	0xcccccccd
 80032d8:	200035e8 	.word	0x200035e8

080032dc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <HAL_UART_RxCpltCallback+0x24>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d103      	bne.n	80032f6 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <HAL_UART_RxCpltCallback+0x28>)
 80032f2:	f004 feda 	bl	80080aa <HAL_GPIO_TogglePin>

	}
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40011400 	.word	0x40011400
 8003304:	40020400 	.word	0x40020400

08003308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800330c:	b672      	cpsid	i
}
 800330e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003310:	2201      	movs	r2, #1
 8003312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003316:	4802      	ldr	r0, [pc, #8]	; (8003320 <Error_Handler+0x18>)
 8003318:	f004 feae 	bl	8008078 <HAL_GPIO_WritePin>
  while (1)
 800331c:	e7fe      	b.n	800331c <Error_Handler+0x14>
 800331e:	bf00      	nop
 8003320:	40020400 	.word	0x40020400

08003324 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <MX_RTC_Init+0x58>)
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <MX_RTC_Init+0x5c>)
 8003340:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MX_RTC_Init+0x58>)
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <MX_RTC_Init+0x58>)
 800334a:	227f      	movs	r2, #127	; 0x7f
 800334c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <MX_RTC_Init+0x58>)
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <MX_RTC_Init+0x58>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <MX_RTC_Init+0x58>)
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <MX_RTC_Init+0x58>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_RTC_Init+0x58>)
 8003368:	f006 fd70 	bl	8009e4c <HAL_RTC_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003372:	f7ff ffc9 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20003744 	.word	0x20003744
 8003380:	40002800 	.word	0x40002800

08003384 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	; 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	2230      	movs	r2, #48	; 0x30
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f009 fd31 	bl	800cdfc <memset>
  if(rtcHandle->Instance==RTC)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <HAL_RTC_MspInit+0x4c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033a4:	2320      	movs	r3, #32
 80033a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 fb8a 	bl	8009acc <HAL_RCCEx_PeriphCLKConfig>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80033be:	f7ff ffa3 	bl	8003308 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_RTC_MspInit+0x50>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80033c8:	bf00      	nop
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40002800 	.word	0x40002800
 80033d4:	42470e3c 	.word	0x42470e3c

080033d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_SPI1_Init+0x64>)
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <MX_SPI1_Init+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <MX_SPI1_Init+0x64>)
 80033e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_SPI1_Init+0x64>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_SPI1_Init+0x64>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_SPI1_Init+0x64>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_SPI1_Init+0x64>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_SPI1_Init+0x64>)
 8003404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <MX_SPI1_Init+0x64>)
 800340c:	2220      	movs	r2, #32
 800340e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <MX_SPI1_Init+0x64>)
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <MX_SPI1_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <MX_SPI1_Init+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <MX_SPI1_Init+0x64>)
 8003424:	220a      	movs	r2, #10
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003428:	4804      	ldr	r0, [pc, #16]	; (800343c <MX_SPI1_Init+0x64>)
 800342a:	f007 f80d 	bl	800a448 <HAL_SPI_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003434:	f7ff ff68 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20003764 	.word	0x20003764
 8003440:	40013000 	.word	0x40013000

08003444 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <HAL_SPI_MspInit+0x84>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12b      	bne.n	80034be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_SPI_MspInit+0x88>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_SPI_MspInit+0x88>)
 8003470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_SPI_MspInit+0x88>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HAL_SPI_MspInit+0x88>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <HAL_SPI_MspInit+0x88>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_SPI_MspInit+0x88>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800349e:	23a0      	movs	r3, #160	; 0xa0
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ae:	2305      	movs	r3, #5
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_SPI_MspInit+0x8c>)
 80034ba:	f004 fc19 	bl	8007cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	; 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40013000 	.word	0x40013000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020000 	.word	0x40020000

080034d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_MspInit+0x4c>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_MspInit+0x4c>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_MspInit+0x4c>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_MspInit+0x4c>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_MspInit+0x4c>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_MspInit+0x4c>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800

08003524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <NMI_Handler+0x4>

0800352a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 800352e:	f7ff feeb 	bl	8003308 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <HardFault_Handler+0x8>

08003534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <MemManage_Handler+0x4>

0800353a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <BusFault_Handler+0x4>

08003540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <UsageFault_Handler+0x4>

08003546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003574:	f003 fe64 	bl	8007240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003580:	4803      	ldr	r0, [pc, #12]	; (8003590 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003582:	f007 fbd3 	bl	800ad2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003586:	4803      	ldr	r0, [pc, #12]	; (8003594 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003588:	f007 fbd0 	bl	800ad2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200037c0 	.word	0x200037c0
 8003594:	20003808 	.word	0x20003808

08003598 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800359e:	f007 fbc5 	bl	800ad2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80035a2:	4803      	ldr	r0, [pc, #12]	; (80035b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80035a4:	f007 fbc2 	bl	800ad2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200037c0 	.word	0x200037c0
 80035b0:	20003850 	.word	0x20003850

080035b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80035b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035bc:	f004 fd90 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80035c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035c4:	f004 fd8c 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80035cc:	f004 fd88 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80035d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035d4:	f004 fd84 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80035d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035dc:	f004 fd80 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80035e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80035e4:	f004 fd7c 	bl	80080e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}

080035ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80035f2:	f007 fb9b 	bl	800ad2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20003898 	.word	0x20003898

08003600 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <DMA2_Stream1_IRQHandler+0x10>)
 8003606:	f004 f909 	bl	800781c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20003968 	.word	0x20003968

08003614 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <USART6_IRQHandler+0x10>)
 800361a:	f008 fab1 	bl	800bb80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20003924 	.word	0x20003924

08003628 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4804      	ldr	r0, [pc, #16]	; (8003644 <clearTable+0x1c>)
 8003632:	f009 fbe3 	bl	800cdfc <memset>
	stwT.position = 0;
 8003636:	4b03      	ldr	r3, [pc, #12]	; (8003644 <clearTable+0x1c>)
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000014c 	.word	0x2000014c

08003648 <addItem>:
void addItem(stw_struct stwS){
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <addItem+0x38>)
 8003658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365c:	461a      	mov	r2, r3
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <addItem+0x38>)
 8003660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <addItem+0x38>)
 8003666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <addItem+0x38>)
 8003670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	2000014c 	.word	0x2000014c

08003684 <stwStart>:

void stwStart(void){
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <stwStart+0x18>)
 800368a:	78d3      	ldrb	r3, [r2, #3]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	70d3      	strb	r3, [r2, #3]
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	200037bc 	.word	0x200037bc

080036a0 <stwTick>:
void stwTick(void){
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <stwTick+0x28>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80036b2:	4905      	ldr	r1, [pc, #20]	; (80036c8 <stwTick+0x28>)
 80036b4:	680b      	ldr	r3, [r1, #0]
 80036b6:	f362 0317 	bfi	r3, r2, #0, #24
 80036ba:	600b      	str	r3, [r1, #0]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	200037bc 	.word	0x200037bc

080036cc <stwStop>:
void stwStop(void){
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <stwStop+0x18>)
 80036d2:	78d3      	ldrb	r3, [r2, #3]
 80036d4:	f36f 0300 	bfc	r3, #0, #1
 80036d8:	70d3      	strb	r3, [r2, #3]
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	200037bc 	.word	0x200037bc

080036e8 <stwClear>:
void stwClear(void){
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <stwClear+0x18>)
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	f36f 0317 	bfc	r3, #0, #24
 80036f4:	6013      	str	r3, [r2, #0]
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	200037bc 	.word	0x200037bc

08003704 <stwSave>:
void stwSave(void){
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <stwSave+0x18>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <stwSave+0x1c>)
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000014c 	.word	0x2000014c
 8003720:	200037bc 	.word	0x200037bc

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <SystemInit+0x20>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <SystemInit+0x20>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b096      	sub	sp, #88	; 0x58
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	615a      	str	r2, [r3, #20]
 8003778:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	2220      	movs	r2, #32
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f009 fb3b 	bl	800cdfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003786:	4b3f      	ldr	r3, [pc, #252]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003788:	4a3f      	ldr	r2, [pc, #252]	; (8003888 <MX_TIM1_Init+0x140>)
 800378a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 800378c:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <MX_TIM1_Init+0x13c>)
 800378e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003792:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <MX_TIM1_Init+0x13c>)
 800379c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037b4:	4833      	ldr	r0, [pc, #204]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037b6:	f007 f8d7 	bl	800a968 <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80037c0:	f7ff fda2 	bl	8003308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037ce:	4619      	mov	r1, r3
 80037d0:	482c      	ldr	r0, [pc, #176]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037d2:	f007 fc75 	bl	800b0c0 <HAL_TIM_ConfigClockSource>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80037dc:	f7ff fd94 	bl	8003308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037e0:	4828      	ldr	r0, [pc, #160]	; (8003884 <MX_TIM1_Init+0x13c>)
 80037e2:	f007 f981 	bl	800aae8 <HAL_TIM_PWM_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80037ec:	f7ff fd8c 	bl	8003308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037fc:	4619      	mov	r1, r3
 80037fe:	4821      	ldr	r0, [pc, #132]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003800:	f008 f85e 	bl	800b8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800380a:	f7ff fd7d 	bl	8003308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800380e:	2360      	movs	r3, #96	; 0x60
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8003812:	2302      	movs	r3, #2
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003816:	2300      	movs	r3, #0
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800381a:	2300      	movs	r3, #0
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800382a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382e:	2200      	movs	r2, #0
 8003830:	4619      	mov	r1, r3
 8003832:	4814      	ldr	r0, [pc, #80]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003834:	f007 fb82 	bl	800af3c <HAL_TIM_PWM_ConfigChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800383e:	f7ff fd63 	bl	8003308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800385a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4807      	ldr	r0, [pc, #28]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003866:	f008 f8a7 	bl	800b9b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003870:	f7ff fd4a 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003874:	4803      	ldr	r0, [pc, #12]	; (8003884 <MX_TIM1_Init+0x13c>)
 8003876:	f000 f8ff 	bl	8003a78 <HAL_TIM_MspPostInit>

}
 800387a:	bf00      	nop
 800387c:	3758      	adds	r7, #88	; 0x58
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200037c0 	.word	0x200037c0
 8003888:	40010000 	.word	0x40010000

0800388c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_TIM10_Init+0x40>)
 8003892:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <MX_TIM10_Init+0x44>)
 8003894:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <MX_TIM10_Init+0x40>)
 8003898:	f244 129f 	movw	r2, #16799	; 0x419f
 800389c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <MX_TIM10_Init+0x40>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_TIM10_Init+0x40>)
 80038a6:	2263      	movs	r2, #99	; 0x63
 80038a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <MX_TIM10_Init+0x40>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_TIM10_Init+0x40>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_TIM10_Init+0x40>)
 80038b8:	f007 f856 	bl	800a968 <HAL_TIM_Base_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80038c2:	f7ff fd21 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20003808 	.word	0x20003808
 80038d0:	40014400 	.word	0x40014400

080038d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <MX_TIM11_Init+0x40>)
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <MX_TIM11_Init+0x44>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <MX_TIM11_Init+0x40>)
 80038e0:	f244 129f 	movw	r2, #16799	; 0x419f
 80038e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <MX_TIM11_Init+0x40>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <MX_TIM11_Init+0x40>)
 80038ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80038f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <MX_TIM11_Init+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <MX_TIM11_Init+0x40>)
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003900:	4804      	ldr	r0, [pc, #16]	; (8003914 <MX_TIM11_Init+0x40>)
 8003902:	f007 f831 	bl	800a968 <HAL_TIM_Base_Init>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800390c:	f7ff fcfc 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20003850 	.word	0x20003850
 8003918:	40014800 	.word	0x40014800

0800391c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <MX_TIM13_Init+0x40>)
 8003922:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <MX_TIM13_Init+0x44>)
 8003924:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <MX_TIM13_Init+0x40>)
 8003928:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800392c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <MX_TIM13_Init+0x40>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <MX_TIM13_Init+0x40>)
 8003936:	f242 720f 	movw	r2, #9999	; 0x270f
 800393a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <MX_TIM13_Init+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_TIM13_Init+0x40>)
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <MX_TIM13_Init+0x40>)
 800394a:	f007 f80d 	bl	800a968 <HAL_TIM_Base_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003954:	f7ff fcd8 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20003898 	.word	0x20003898
 8003960:	40001c00 	.word	0x40001c00

08003964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a3c      	ldr	r2, [pc, #240]	; (8003a64 <HAL_TIM_Base_MspInit+0x100>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d11e      	bne.n	80039b4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	2019      	movs	r0, #25
 8003998:	f003 fd71 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800399c:	2019      	movs	r0, #25
 800399e:	f003 fd8a 	bl	80074b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	201a      	movs	r0, #26
 80039a8:	f003 fd69 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80039ac:	201a      	movs	r0, #26
 80039ae:	f003 fd82 	bl	80074b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80039b2:	e052      	b.n	8003a5a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <HAL_TIM_Base_MspInit+0x108>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d116      	bne.n	80039ec <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	2019      	movs	r0, #25
 80039e0:	f003 fd4d 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039e4:	2019      	movs	r0, #25
 80039e6:	f003 fd66 	bl	80074b6 <HAL_NVIC_EnableIRQ>
}
 80039ea:	e036      	b.n	8003a5a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_TIM_Base_MspInit+0x10c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d116      	bne.n	8003a24 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6453      	str	r3, [r2, #68]	; 0x44
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2100      	movs	r1, #0
 8003a16:	201a      	movs	r0, #26
 8003a18:	f003 fd31 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a1c:	201a      	movs	r0, #26
 8003a1e:	f003 fd4a 	bl	80074b6 <HAL_NVIC_EnableIRQ>
}
 8003a22:	e01a      	b.n	8003a5a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_TIM_Base_MspInit+0x110>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d115      	bne.n	8003a5a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_TIM_Base_MspInit+0x104>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	202c      	movs	r0, #44	; 0x2c
 8003a50:	f003 fd15 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	f003 fd2e 	bl	80074b6 <HAL_NVIC_EnableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40001c00 	.word	0x40001c00

08003a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <HAL_TIM_MspPostInit+0x68>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d11e      	bne.n	8003ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_TIM_MspPostInit+0x6c>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <HAL_TIM_MspPostInit+0x6c>)
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_TIM_MspPostInit+0x6c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <HAL_TIM_MspPostInit+0x70>)
 8003ad4:	f004 f90c 	bl	8007cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ad8:	bf00      	nop
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40021000 	.word	0x40021000

08003aec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <MX_USART3_UART_Init+0x50>)
 8003af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b12:	220c      	movs	r2, #12
 8003b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <MX_USART3_UART_Init+0x4c>)
 8003b24:	f007 ffae 	bl	800ba84 <HAL_UART_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b2e:	f7ff fbeb 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200038e0 	.word	0x200038e0
 8003b3c:	40004800 	.word	0x40004800

08003b40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <MX_USART6_UART_Init+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b66:	2204      	movs	r2, #4
 8003b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_USART6_UART_Init+0x4c>)
 8003b78:	f007 ff84 	bl	800ba84 <HAL_UART_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b82:	f7ff fbc1 	bl	8003308 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20003924 	.word	0x20003924
 8003b90:	40011400 	.word	0x40011400

08003b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <HAL_UART_MspInit+0x154>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d12d      	bne.n	8003c12 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a44      	ldr	r2, [pc, #272]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c00:	2307      	movs	r3, #7
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4839      	ldr	r0, [pc, #228]	; (8003cf0 <HAL_UART_MspInit+0x15c>)
 8003c0c:	f004 f870 	bl	8007cf0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003c10:	e066      	b.n	8003ce0 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <HAL_UART_MspInit+0x160>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d161      	bne.n	8003ce0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	4a31      	ldr	r2, [pc, #196]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c26:	f043 0320 	orr.w	r3, r3, #32
 8003c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6313      	str	r3, [r2, #48]	; 0x30
 8003c48:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_UART_MspInit+0x158>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c54:	23c0      	movs	r3, #192	; 0xc0
 8003c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c64:	2308      	movs	r3, #8
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4822      	ldr	r0, [pc, #136]	; (8003cf8 <HAL_UART_MspInit+0x164>)
 8003c70:	f004 f83e 	bl	8007cf0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c76:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_UART_MspInit+0x16c>)
 8003c78:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c7c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003c80:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c94:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003cb4:	4811      	ldr	r0, [pc, #68]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003cb6:	f003 fc19 	bl	80074ec <HAL_DMA_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003cc0:	f7ff fb22 	bl	8003308 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <HAL_UART_MspInit+0x168>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2047      	movs	r0, #71	; 0x47
 8003cd6:	f003 fbd2 	bl	800747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003cda:	2047      	movs	r0, #71	; 0x47
 8003cdc:	f003 fbeb 	bl	80074b6 <HAL_NVIC_EnableIRQ>
}
 8003ce0:	bf00      	nop
 8003ce2:	3730      	adds	r7, #48	; 0x30
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40004800 	.word	0x40004800
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020c00 	.word	0x40020c00
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	40020800 	.word	0x40020800
 8003cfc:	20003968 	.word	0x20003968
 8003d00:	40026428 	.word	0x40026428

08003d04 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <setDefaultClbcks+0x34>)
 8003d0a:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <setDefaultClbcks+0x38>)
 8003d0c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <setDefaultClbcks+0x3c>)
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <setDefaultClbcks+0x40>)
 8003d12:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <setDefaultClbcks+0x44>)
 8003d16:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <setDefaultClbcks+0x48>)
 8003d18:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <setDefaultClbcks+0x4c>)
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <setDefaultClbcks+0x50>)
 8003d1e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <setDefaultClbcks+0x54>)
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <setDefaultClbcks+0x58>)
 8003d24:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <setDefaultClbcks+0x5c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000568 	.word	0x20000568
 8003d3c:	08001ee9 	.word	0x08001ee9
 8003d40:	200005b0 	.word	0x200005b0
 8003d44:	08001ef9 	.word	0x08001ef9
 8003d48:	2000058c 	.word	0x2000058c
 8003d4c:	08004245 	.word	0x08004245
 8003d50:	2000061c 	.word	0x2000061c
 8003d54:	08004289 	.word	0x08004289
 8003d58:	200005d4 	.word	0x200005d4
 8003d5c:	080042d5 	.word	0x080042d5
 8003d60:	200005f8 	.word	0x200005f8

08003d64 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003d68:	f7ff ffcc 	bl	8003d04 <setDefaultClbcks>
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8003d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d74:	b0b2      	sub	sp, #200	; 0xc8
 8003d76:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8003d78:	2100      	movs	r1, #0
 8003d7a:	488b      	ldr	r0, [pc, #556]	; (8003fa8 <baroMain+0x238>)
 8003d7c:	f003 f8a5 	bl	8006eca <cbuf_readn>
 8003d80:	4603      	mov	r3, r0
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4887      	ldr	r0, [pc, #540]	; (8003fa8 <baroMain+0x238>)
 8003d8c:	f003 f89d 	bl	8006eca <cbuf_readn>
 8003d90:	4603      	mov	r3, r0
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4884      	ldr	r0, [pc, #528]	; (8003fac <baroMain+0x23c>)
 8003d9c:	f003 f93b 	bl	8007016 <read_nth_ring_buffer>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8003da6:	2100      	movs	r1, #0
 8003da8:	4880      	ldr	r0, [pc, #512]	; (8003fac <baroMain+0x23c>)
 8003daa:	f003 f934 	bl	8007016 <read_nth_ring_buffer>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 8003db4:	2300      	movs	r3, #0
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dbc:	222e      	movs	r2, #46	; 0x2e
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f009 f81b 	bl	800cdfc <memset>
	char str3[50] = {0};
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dce:	222e      	movs	r2, #46	; 0x2e
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f009 f812 	bl	800cdfc <memset>
	char str4[50] = {0};
 8003dd8:	2300      	movs	r3, #0
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	f107 0308 	add.w	r3, r7, #8
 8003de0:	222e      	movs	r2, #46	; 0x2e
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f009 f809 	bl	800cdfc <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8003dea:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <baroMain+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc fbc4 	bl	800057c <__aeabi_f2d>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003dfc:	496d      	ldr	r1, [pc, #436]	; (8003fb4 <baroMain+0x244>)
 8003dfe:	f00a f92b 	bl	800e058 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8003e02:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <baroMain+0x248>)
 8003e08:	210e      	movs	r1, #14
 8003e0a:	200a      	movs	r0, #10
 8003e0c:	f7fe faba 	bl	8002384 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8003e10:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <baroMain+0x240>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003fbc <baroMain+0x24c>
 8003e20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e24:	ee16 0a90 	vmov	r0, s13
 8003e28:	f7fc fba8 	bl	800057c <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003e34:	4962      	ldr	r1, [pc, #392]	; (8003fc0 <baroMain+0x250>)
 8003e36:	f00a f90f 	bl	800e058 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8003e3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003e3e:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <baroMain+0x248>)
 8003e40:	211e      	movs	r1, #30
 8003e42:	200a      	movs	r0, #10
 8003e44:	f7fe fa9e 	bl	8002384 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003e48:	4b5e      	ldr	r3, [pc, #376]	; (8003fc4 <baroMain+0x254>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d123      	bne.n	8003e98 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8003e50:	1d3b      	adds	r3, r7, #4
 8003e52:	495d      	ldr	r1, [pc, #372]	; (8003fc8 <baroMain+0x258>)
 8003e54:	4618      	mov	r0, r3
 8003e56:	f00a f8ff 	bl	800e058 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8003e5a:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <baroMain+0x240>)
 8003e5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e60:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003fbc <baroMain+0x24c>
 8003e64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e68:	ee16 0a90 	vmov	r0, s13
 8003e6c:	f7fc fb86 	bl	800057c <__aeabi_f2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003e78:	4954      	ldr	r1, [pc, #336]	; (8003fcc <baroMain+0x25c>)
 8003e7a:	f00a f8ed 	bl	800e058 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8003e7e:	4b54      	ldr	r3, [pc, #336]	; (8003fd0 <baroMain+0x260>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb7a 	bl	800057c <__aeabi_f2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003e90:	4950      	ldr	r1, [pc, #320]	; (8003fd4 <baroMain+0x264>)
 8003e92:	f00a f8e1 	bl	800e058 <siprintf>
 8003e96:	e022      	b.n	8003ede <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	494f      	ldr	r1, [pc, #316]	; (8003fd8 <baroMain+0x268>)
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f00a f8db 	bl	800e058 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <baroMain+0x240>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb68 	bl	800057c <__aeabi_f2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003eb4:	4949      	ldr	r1, [pc, #292]	; (8003fdc <baroMain+0x26c>)
 8003eb6:	f00a f8cf 	bl	800e058 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8003eba:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <baroMain+0x270>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003fbc <baroMain+0x24c>
 8003ec4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ec8:	ee16 0a90 	vmov	r0, s13
 8003ecc:	f7fc fb56 	bl	800057c <__aeabi_f2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003ed8:	4942      	ldr	r1, [pc, #264]	; (8003fe4 <baroMain+0x274>)
 8003eda:	f00a f8bd 	bl	800e058 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8003ede:	1d3a      	adds	r2, r7, #4
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <baroMain+0x248>)
 8003ee2:	2132      	movs	r1, #50	; 0x32
 8003ee4:	200a      	movs	r0, #10
 8003ee6:	f7fe fa4d 	bl	8002384 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8003eea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <baroMain+0x248>)
 8003ef0:	2142      	movs	r1, #66	; 0x42
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	f7fe fa46 	bl	8002384 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8003ef8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <baroMain+0x248>)
 8003efe:	2152      	movs	r1, #82	; 0x52
 8003f00:	200a      	movs	r0, #10
 8003f02:	f7fe fa3f 	bl	8002384 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003f0c:	e041      	b.n	8003f92 <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8003f0e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003f12:	4619      	mov	r1, r3
 8003f14:	4824      	ldr	r0, [pc, #144]	; (8003fa8 <baroMain+0x238>)
 8003f16:	f002 ffd8 	bl	8006eca <cbuf_readn>
 8003f1a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8003f1e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003f22:	4619      	mov	r1, r3
 8003f24:	4821      	ldr	r0, [pc, #132]	; (8003fac <baroMain+0x23c>)
 8003f26:	f003 f876 	bl	8007016 <read_nth_ring_buffer>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8003f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d804      	bhi.n	8003f48 <baroMain+0x1d8>
 8003f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 8003f48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d304      	bcc.n	8003f60 <baroMain+0x1f0>
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8003f60:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003f64:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d303      	bcc.n	8003f74 <baroMain+0x204>
 8003f6c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003f70:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8003f74:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003f78:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d803      	bhi.n	8003f88 <baroMain+0x218>
 8003f80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003f84:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8003f88:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <baroMain+0x23c>)
 8003f94:	891b      	ldrh	r3, [r3, #8]
 8003f96:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3b7      	bcc.n	8003f0e <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <baroMain+0x278>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8003fa6:	e0ba      	b.n	800411e <baroMain+0x3ae>
 8003fa8:	200035e8 	.word	0x200035e8
 8003fac:	200035fc 	.word	0x200035fc
 8003fb0:	20000558 	.word	0x20000558
 8003fb4:	08014518 	.word	0x08014518
 8003fb8:	080151a0 	.word	0x080151a0
 8003fbc:	42c80000 	.word	0x42c80000
 8003fc0:	08014530 	.word	0x08014530
 8003fc4:	200039c8 	.word	0x200039c8
 8003fc8:	0801454c 	.word	0x0801454c
 8003fcc:	08014560 	.word	0x08014560
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	08014584 	.word	0x08014584
 8003fd8:	080145a4 	.word	0x080145a4
 8003fdc:	080145b8 	.word	0x080145b8
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	080145d8 	.word	0x080145d8
 8003fe8:	20000184 	.word	0x20000184
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8003fec:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003ff0:	4a8c      	ldr	r2, [pc, #560]	; (8004224 <baroMain+0x4b4>)
 8003ff2:	8812      	ldrh	r2, [r2, #0]
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	4a8c      	ldr	r2, [pc, #560]	; (8004228 <baroMain+0x4b8>)
 8003ff8:	8912      	ldrh	r2, [r2, #8]
 8003ffa:	fb03 f202 	mul.w	r2, r3, r2
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	; (800422c <baroMain+0x4bc>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4b87      	ldr	r3, [pc, #540]	; (8004224 <baroMain+0x4b4>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	1acb      	subs	r3, r1, r3
 800400a:	fb92 f3f3 	sdiv	r3, r2, r3
 800400e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004012:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004016:	4619      	mov	r1, r3
 8004018:	4883      	ldr	r0, [pc, #524]	; (8004228 <baroMain+0x4b8>)
 800401a:	f002 ff56 	bl	8006eca <cbuf_readn>
 800401e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8004022:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8004026:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800402a:	1c5c      	adds	r4, r3, #1
 800402c:	4b80      	ldr	r3, [pc, #512]	; (8004230 <baroMain+0x4c0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461d      	mov	r5, r3
 8004032:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <baroMain+0x4c0>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b7e      	ldr	r3, [pc, #504]	; (8004234 <baroMain+0x4c4>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004042:	8812      	ldrh	r2, [r2, #0]
 8004044:	4611      	mov	r1, r2
 8004046:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800404a:	1a8a      	subs	r2, r1, r2
 800404c:	fb03 f202 	mul.w	r2, r3, r2
 8004050:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8004054:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004058:	1acb      	subs	r3, r1, r3
 800405a:	fb92 f3f3 	sdiv	r3, r2, r3
 800405e:	1aea      	subs	r2, r5, r3
 8004060:	4b73      	ldr	r3, [pc, #460]	; (8004230 <baroMain+0x4c0>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	2300      	movs	r3, #0
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	2302      	movs	r3, #2
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	2301      	movs	r3, #1
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	460b      	mov	r3, r1
 8004074:	4621      	mov	r1, r4
 8004076:	f7fe ff6a 	bl	8002f4e <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 800407a:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 800407e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004082:	1c5e      	adds	r6, r3, #1
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <baroMain+0x4c0>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4698      	mov	r8, r3
 800408a:	4b69      	ldr	r3, [pc, #420]	; (8004230 <baroMain+0x4c0>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <baroMain+0x4c4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	1ad4      	subs	r4, r2, r3
 8004096:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800409a:	4619      	mov	r1, r3
 800409c:	4866      	ldr	r0, [pc, #408]	; (8004238 <baroMain+0x4c8>)
 800409e:	f002 ffba 	bl	8007016 <read_nth_ring_buffer>
 80040a2:	4602      	mov	r2, r0
 80040a4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	fb03 f204 	mul.w	r2, r3, r4
 80040ae:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80040b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80040b6:	1acb      	subs	r3, r1, r3
 80040b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80040bc:	eba8 0203 	sub.w	r2, r8, r3
 80040c0:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <baroMain+0x4c0>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	4619      	mov	r1, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	230e      	movs	r3, #14
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2301      	movs	r3, #1
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	460b      	mov	r3, r1
 80040d4:	4631      	mov	r1, r6
 80040d6:	4628      	mov	r0, r5
 80040d8:	f7fe ff39 	bl	8002f4e <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80040dc:	4b51      	ldr	r3, [pc, #324]	; (8004224 <baroMain+0x4b4>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	4b52      	ldr	r3, [pc, #328]	; (800422c <baroMain+0x4bc>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	4b52      	ldr	r3, [pc, #328]	; (8004234 <baroMain+0x4c4>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	2302      	movs	r3, #2
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2301      	movs	r3, #1
 80040f4:	f7fe f9ea 	bl	80024cc <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 80040f8:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <baroMain+0x4b4>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <baroMain+0x4bc>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <baroMain+0x4c0>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	2302      	movs	r3, #2
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2301      	movs	r3, #1
 8004110:	f7fe f9dc 	bl	80024cc <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8004114:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004118:	3301      	adds	r3, #1
 800411a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <baroMain+0x4bc>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8004126:	429a      	cmp	r2, r3
 8004128:	f4ff af60 	bcc.w	8003fec <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 800412c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800413c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004140:	ee16 0a90 	vmov	r0, s13
 8004144:	f7fc fa1a 	bl	800057c <__aeabi_f2d>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	1d38      	adds	r0, r7, #4
 800414e:	493b      	ldr	r1, [pc, #236]	; (800423c <baroMain+0x4cc>)
 8004150:	f009 ff82 	bl	800e058 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8004154:	4b37      	ldr	r3, [pc, #220]	; (8004234 <baroMain+0x4c4>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	3b06      	subs	r3, #6
 800415a:	b2d9      	uxtb	r1, r3
 800415c:	1d3a      	adds	r2, r7, #4
 800415e:	4b38      	ldr	r3, [pc, #224]	; (8004240 <baroMain+0x4d0>)
 8004160:	2000      	movs	r0, #0
 8004162:	f7fe f90f 	bl	8002384 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8004166:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004176:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800417a:	ee16 0a90 	vmov	r0, s13
 800417e:	f7fc f9fd 	bl	800057c <__aeabi_f2d>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	1d38      	adds	r0, r7, #4
 8004188:	492c      	ldr	r1, [pc, #176]	; (800423c <baroMain+0x4cc>)
 800418a:	f009 ff65 	bl	800e058 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 800418e:	4b28      	ldr	r3, [pc, #160]	; (8004230 <baroMain+0x4c0>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	3b06      	subs	r3, #6
 8004194:	b2d9      	uxtb	r1, r3
 8004196:	1d3a      	adds	r2, r7, #4
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <baroMain+0x4d0>)
 800419a:	2000      	movs	r0, #0
 800419c:	f7fe f8f2 	bl	8002384 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 80041a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041b4:	ee16 0a90 	vmov	r0, s13
 80041b8:	f7fc f9e0 	bl	800057c <__aeabi_f2d>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	1d38      	adds	r0, r7, #4
 80041c2:	491e      	ldr	r1, [pc, #120]	; (800423c <baroMain+0x4cc>)
 80041c4:	f009 ff48 	bl	800e058 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <baroMain+0x4c4>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	3b06      	subs	r3, #6
 80041ce:	b2d9      	uxtb	r1, r3
 80041d0:	1d3a      	adds	r2, r7, #4
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <baroMain+0x4d0>)
 80041d4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80041d8:	f7fe f8d4 	bl	8002384 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 80041dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041f0:	ee16 0a90 	vmov	r0, s13
 80041f4:	f7fc f9c2 	bl	800057c <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	1d38      	adds	r0, r7, #4
 80041fe:	490f      	ldr	r1, [pc, #60]	; (800423c <baroMain+0x4cc>)
 8004200:	f009 ff2a 	bl	800e058 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <baroMain+0x4c0>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3b06      	subs	r3, #6
 800420a:	b2d9      	uxtb	r1, r3
 800420c:	1d3a      	adds	r2, r7, #4
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <baroMain+0x4d0>)
 8004210:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004214:	f7fe f8b6 	bl	8002384 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8004218:	bf00      	nop
 800421a:	37b8      	adds	r7, #184	; 0xb8
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004222:	bf00      	nop
 8004224:	20000184 	.word	0x20000184
 8004228:	200035e8 	.word	0x200035e8
 800422c:	20000186 	.word	0x20000186
 8004230:	20000188 	.word	0x20000188
 8004234:	20000189 	.word	0x20000189
 8004238:	200035fc 	.word	0x200035fc
 800423c:	080145f8 	.word	0x080145f8
 8004240:	08014d24 	.word	0x08014d24

08004244 <changeBaroMode>:

void changeBaroMode(void){
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <changeBaroMode+0x34>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <changeBaroMode+0x38>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <changeBaroMode+0x3c>)
 8004256:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <changeBaroMode+0x34>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 800425e:	e006      	b.n	800426e <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <changeBaroMode+0x38>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a07      	ldr	r2, [pc, #28]	; (8004284 <changeBaroMode+0x40>)
 8004266:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <changeBaroMode+0x34>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	200039c8 	.word	0x200039c8
 800427c:	20000558 	.word	0x20000558
 8004280:	20000000 	.word	0x20000000
 8004284:	20000004 	.word	0x20000004

08004288 <addBaro>:
void addBaro(void){
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <addBaro+0x40>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <addBaro+0x22>
			fixedAltitude += 1;
 8004294:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <addBaro+0x44>)
 8004296:	edd3 7a00 	vldr	s15, [r3]
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800429e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <addBaro+0x44>)
 80042a4:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 80042a8:	e009      	b.n	80042be <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <addBaro+0x48>)
 80042ac:	edd3 7a00 	vldr	s15, [r3]
 80042b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <addBaro+0x48>)
 80042ba:	edc3 7a00 	vstr	s15, [r3]
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	200039c8 	.word	0x200039c8
 80042cc:	20000004 	.word	0x20000004
 80042d0:	20000000 	.word	0x20000000

080042d4 <remBaro>:
void remBaro(void){
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <remBaro+0x40>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <remBaro+0x22>
			fixedAltitude -= 1;
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <remBaro+0x44>)
 80042e2:	edd3 7a00 	vldr	s15, [r3]
 80042e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <remBaro+0x44>)
 80042f0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 80042f4:	e009      	b.n	800430a <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <remBaro+0x48>)
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <remBaro+0x48>)
 8004306:	edc3 7a00 	vstr	s15, [r3]
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	200039c8 	.word	0x200039c8
 8004318:	20000004 	.word	0x20000004
 800431c:	20000000 	.word	0x20000000

08004320 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <setupCntxMenu+0x1c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200039cc 	.word	0x200039cc

08004340 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8004344:	f000 f87e 	bl	8004444 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <cntxSelect+0x1c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <cntxSelect+0x20>)
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4798      	blx	r3
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200039ca 	.word	0x200039ca
 8004360:	200001e0 	.word	0x200001e0

08004364 <nextItem>:

void nextItem(void){
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <nextItem+0x34>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <nextItem+0x38>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	429a      	cmp	r2, r3
 8004376:	da06      	bge.n	8004386 <nextItem+0x22>
		cntxPosition++;
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <nextItem+0x34>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <nextItem+0x34>)
 8004382:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8004384:	e002      	b.n	800438c <nextItem+0x28>
		cntxPosition = 0;
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <nextItem+0x34>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	200039ca 	.word	0x200039ca
 800439c:	2000018a 	.word	0x2000018a

080043a0 <prevItem>:
void prevItem(void){
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prevItem+0x30>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <prevItem+0x1a>
		cntxPosition--;
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <prevItem+0x30>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <prevItem+0x30>)
 80043b6:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80043b8:	e005      	b.n	80043c6 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <prevItem+0x34>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <prevItem+0x30>)
 80043c4:	701a      	strb	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	200039ca 	.word	0x200039ca
 80043d4:	2000018a 	.word	0x2000018a

080043d8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <setDefaultClbcks+0x34>)
 80043de:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <setDefaultClbcks+0x38>)
 80043e0:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <setDefaultClbcks+0x3c>)
 80043e4:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <setDefaultClbcks+0x40>)
 80043e6:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <setDefaultClbcks+0x3c>)
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <setDefaultClbcks+0x40>)
 80043ec:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <setDefaultClbcks+0x44>)
 80043f0:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <setDefaultClbcks+0x48>)
 80043f2:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <setDefaultClbcks+0x4c>)
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <setDefaultClbcks+0x50>)
 80043f8:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <setDefaultClbcks+0x4c>)
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <setDefaultClbcks+0x50>)
 80043fe:	61da      	str	r2, [r3, #28]
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000061c 	.word	0x2000061c
 8004410:	08004445 	.word	0x08004445
 8004414:	200005b0 	.word	0x200005b0
 8004418:	080043a1 	.word	0x080043a1
 800441c:	2000058c 	.word	0x2000058c
 8004420:	08004341 	.word	0x08004341
 8004424:	20000568 	.word	0x20000568
 8004428:	08004365 	.word	0x08004365

0800442c <showCntxMenu>:

void showCntxMenu(void){
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8004430:	f7ff ffd2 	bl	80043d8 <setDefaultClbcks>
	isCntxOpen = 1;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <showCntxMenu+0x14>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200039c9 	.word	0x200039c9

08004444 <hideCntxMenu>:
void hideCntxMenu(void){
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8004448:	f7fd f9cc 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <hideCntxMenu+0x18>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4798      	blx	r3
	isCntxOpen = 0;
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <hideCntxMenu+0x1c>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}
 800445c:	200039cc 	.word	0x200039cc
 8004460:	200039c9 	.word	0x200039c9

08004464 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 800446a:	4b35      	ldr	r3, [pc, #212]	; (8004540 <enableCntxMenu+0xdc>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d062      	beq.n	8004538 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8004472:	230e      	movs	r3, #14
 8004474:	461a      	mov	r2, r3
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <enableCntxMenu+0xe0>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	330a      	adds	r3, #10
 8004480:	2200      	movs	r2, #0
 8004482:	9200      	str	r2, [sp, #0]
 8004484:	2205      	movs	r2, #5
 8004486:	21c8      	movs	r1, #200	; 0xc8
 8004488:	2000      	movs	r0, #0
 800448a:	f7fe fd3b 	bl	8002f04 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 800448e:	2301      	movs	r3, #1
 8004490:	2206      	movs	r2, #6
 8004492:	21c8      	movs	r1, #200	; 0xc8
 8004494:	2000      	movs	r0, #0
 8004496:	f7fe fbdf 	bl	8002c58 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 800449a:	230e      	movs	r3, #14
 800449c:	461a      	mov	r2, r3
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <enableCntxMenu+0xe0>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	f103 020a 	add.w	r2, r3, #10
 80044aa:	2301      	movs	r3, #1
 80044ac:	21c8      	movs	r1, #200	; 0xc8
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fe fbd2 	bl	8002c58 <lcdHLine>
//		create list
		char item[30] = {0};
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	615a      	str	r2, [r3, #20]
 80044c8:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80044ca:	2300      	movs	r3, #0
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e018      	b.n	8004502 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <enableCntxMenu+0xe4>)
 80044d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d8:	461a      	mov	r2, r3
 80044da:	463b      	mov	r3, r7
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f009 fdba 	bl	800e058 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 80044e4:	220e      	movs	r2, #14
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	fb13 f302 	smulbb	r3, r3, r2
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	330a      	adds	r3, #10
 80044f0:	b2d9      	uxtb	r1, r3
 80044f2:	463a      	mov	r2, r7
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <enableCntxMenu+0xe8>)
 80044f6:	2005      	movs	r0, #5
 80044f8:	f7fd ff44 	bl	8002384 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 80044fc:	7ffb      	ldrb	r3, [r7, #31]
 80044fe:	3301      	adds	r3, #1
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <enableCntxMenu+0xe0>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	7ffa      	ldrb	r2, [r7, #31]
 8004508:	429a      	cmp	r2, r3
 800450a:	d3e1      	bcc.n	80044d0 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 800450c:	230e      	movs	r3, #14
 800450e:	461a      	mov	r2, r3
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <enableCntxMenu+0xec>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	f103 0208 	add.w	r2, r3, #8
 800451c:	230e      	movs	r3, #14
 800451e:	4619      	mov	r1, r3
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <enableCntxMenu+0xec>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	3308      	adds	r3, #8
 800452c:	2102      	movs	r1, #2
 800452e:	9100      	str	r1, [sp, #0]
 8004530:	21c8      	movs	r1, #200	; 0xc8
 8004532:	2000      	movs	r0, #0
 8004534:	f7fe fce6 	bl	8002f04 <lcdRect>

	}
}
 8004538:	bf00      	nop
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200039c9 	.word	0x200039c9
 8004544:	2000018a 	.word	0x2000018a
 8004548:	200001e0 	.word	0x200001e0
 800454c:	08015c28 	.word	0x08015c28
 8004550:	200039ca 	.word	0x200039ca

08004554 <readGps>:
#include "gps2.h"
//#include <fonts/font_calibri13.h>

extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
void readGps(void){
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
//	gpsDev.getData(&gpsDev);

}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <setDefaultClbcks+0x20>)
 800456a:	4a07      	ldr	r2, [pc, #28]	; (8004588 <setDefaultClbcks+0x24>)
 800456c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <setDefaultClbcks+0x28>)
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <setDefaultClbcks+0x2c>)
 8004572:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &readGps;
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <setDefaultClbcks+0x30>)
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <setDefaultClbcks+0x34>)
 8004578:	611a      	str	r2, [r3, #16]
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000568 	.word	0x20000568
 8004588:	08001ee9 	.word	0x08001ee9
 800458c:	200005b0 	.word	0x200005b0
 8004590:	08001ef9 	.word	0x08001ef9
 8004594:	2000058c 	.word	0x2000058c
 8004598:	08004555 	.word	0x08004555

0800459c <gpsSetup>:

void gpsSetup(void){
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80045a0:	f7ff ffe0 	bl	8004564 <setDefaultClbcks>

}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <gpsMain>:

void gpsMain(void){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b0c8      	sub	sp, #288	; 0x120
 80045ac:	af00      	add	r7, sp, #0
	char tempStr[51] = {0};
 80045ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80045b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	3304      	adds	r3, #4
 80045bc:	222f      	movs	r2, #47	; 0x2f
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f008 fc1b 	bl	800cdfc <memset>
	sprintf(&tempStr, "GPS will be shown");
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	492d      	ldr	r1, [pc, #180]	; (8004680 <gpsMain+0xd8>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f009 fd44 	bl	800e058 <siprintf>

	lcdPutStr(0, 0, tempStr, font_13_calibri);
 80045d0:	1d3a      	adds	r2, r7, #4
 80045d2:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <gpsMain+0xdc>)
 80045d4:	2100      	movs	r1, #0
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fd fed4 	bl	8002384 <lcdPutStr>
//	location_t loc = getLocation(&gpsDev);
//	double lat = 17.8;
//	sprintf(&tempStr, "lat: %f", getLocation(&gpsDev).latitude);
//	sprintf(&tempStr, "lat: %f", lat);
//	lcdPutStr(0, 220, tempStr, font_13_calibri);
	lcdPutStr(0, 25, getLocation(&gpsDev).debug, smallestFont);
 80045dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045e0:	4929      	ldr	r1, [pc, #164]	; (8004688 <gpsMain+0xe0>)
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fbb4 	bl	8001d50 <getLocation>
 80045e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045ec:	f103 0218 	add.w	r2, r3, #24
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <gpsMain+0xe4>)
 80045f2:	2119      	movs	r1, #25
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fd fec5 	bl	8002384 <lcdPutStr>

	sprintf(&tempStr, "%x", getLocation(&gpsDev).chk);
 80045fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80045fe:	4922      	ldr	r1, [pc, #136]	; (8004688 <gpsMain+0xe0>)
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd fba5 	bl	8001d50 <getLocation>
 8004606:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800460a:	461a      	mov	r2, r3
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	4920      	ldr	r1, [pc, #128]	; (8004690 <gpsMain+0xe8>)
 8004610:	4618      	mov	r0, r3
 8004612:	f009 fd21 	bl	800e058 <siprintf>
	lcdPutStr(0, 50, tempStr, smallestFont);
 8004616:	1d3a      	adds	r2, r7, #4
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <gpsMain+0xe4>)
 800461a:	2132      	movs	r1, #50	; 0x32
 800461c:	2000      	movs	r0, #0
 800461e:	f7fd feb1 	bl	8002384 <lcdPutStr>
//	for(uint8_t i=0; i<6; i++){
//		strncpy(&tempStr, &dmaBuffer[50*i], 50);
////		strncpy(&tempStr, &(gpsDev.buffer[50*i]), 50);
//		lcdPutStr(0,25+14*i, tempStr, smallestFont);
//	}
	for(uint8_t i=0; i<6; i++){
 8004622:	2300      	movs	r3, #0
 8004624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8004628:	e01f      	b.n	800466a <gpsMain+0xc2>
//		strncpy(&tempStr, &dmaBuffer[50*i], 50);
		strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
 800462a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800462e:	2232      	movs	r2, #50	; 0x32
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	4a14      	ldr	r2, [pc, #80]	; (8004688 <gpsMain+0xe0>)
 8004636:	4413      	add	r3, r2
 8004638:	1d19      	adds	r1, r3, #4
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	2232      	movs	r2, #50	; 0x32
 800463e:	4618      	mov	r0, r3
 8004640:	f00a faea 	bl	800ec18 <strncpy>
		lcdPutStr(0,120+14*i, tempStr, smallestFont);
 8004644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004648:	461a      	mov	r2, r3
 800464a:	00d2      	lsls	r2, r2, #3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	3378      	adds	r3, #120	; 0x78
 8004654:	b2d9      	uxtb	r1, r3
 8004656:	1d3a      	adds	r2, r7, #4
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <gpsMain+0xe4>)
 800465a:	2000      	movs	r0, #0
 800465c:	f7fd fe92 	bl	8002384 <lcdPutStr>
	for(uint8_t i=0; i<6; i++){
 8004660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004664:	3301      	adds	r3, #1
 8004666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800466a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466e:	2b05      	cmp	r3, #5
 8004670:	d9db      	bls.n	800462a <gpsMain+0x82>
//	lcdPutStr(0,210, tempStr, font_13_calibri);
//	sprintf(&tempStr, "%s", gpsDev.buffer);



}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	080146b8 	.word	0x080146b8
 8004684:	08016b2c 	.word	0x08016b2c
 8004688:	2000360c 	.word	0x2000360c
 800468c:	080166b0 	.word	0x080166b0
 8004690:	080146cc 	.word	0x080146cc

08004694 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <setDefaultClbcks+0x1c>)
 800469a:	4a06      	ldr	r2, [pc, #24]	; (80046b4 <setDefaultClbcks+0x20>)
 800469c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <setDefaultClbcks+0x24>)
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <setDefaultClbcks+0x28>)
 80046a2:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000568 	.word	0x20000568
 80046b4:	08001ee9 	.word	0x08001ee9
 80046b8:	200005b0 	.word	0x200005b0
 80046bc:	08001ef9 	.word	0x08001ef9

080046c0 <localSetup>:
void localSetup(void){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80046c4:	f7ff ffe6 	bl	8004694 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <localSetup+0x50>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <localSetup+0x54>)
 80046d0:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <localSetup+0x50>)
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <localSetup+0x54>)
 80046da:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <localSetup+0x50>)
 80046de:	789b      	ldrb	r3, [r3, #2]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <localSetup+0x54>)
 80046e4:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <localSetup+0x58>)
 80046e8:	789b      	ldrb	r3, [r3, #2]
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <localSetup+0x54>)
 80046ee:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <localSetup+0x58>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <localSetup+0x54>)
 80046f8:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <localSetup+0x58>)
 80046fc:	78db      	ldrb	r3, [r3, #3]
 80046fe:	3364      	adds	r3, #100	; 0x64
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <localSetup+0x54>)
 8004702:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004704:	4803      	ldr	r0, [pc, #12]	; (8004714 <localSetup+0x54>)
 8004706:	f008 fc59 	bl	800cfbc <mktime>
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200035d0 	.word	0x200035d0
 8004714:	200039d0 	.word	0x200039d0
 8004718:	200035e4 	.word	0x200035e4
 800471c:	00000000 	.word	0x00000000

08004720 <localMain>:


void localMain(void){
 8004720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004724:	b0c2      	sub	sp, #264	; 0x108
 8004726:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 8004728:	4bdd      	ldr	r3, [pc, #884]	; (8004aa0 <localMain+0x380>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	4bdd      	ldr	r3, [pc, #884]	; (8004aa4 <localMain+0x384>)
 8004730:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004732:	4bdb      	ldr	r3, [pc, #876]	; (8004aa0 <localMain+0x380>)
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	461a      	mov	r2, r3
 8004738:	4bda      	ldr	r3, [pc, #872]	; (8004aa4 <localMain+0x384>)
 800473a:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 800473c:	4bd8      	ldr	r3, [pc, #864]	; (8004aa0 <localMain+0x380>)
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	461a      	mov	r2, r3
 8004742:	4bd8      	ldr	r3, [pc, #864]	; (8004aa4 <localMain+0x384>)
 8004744:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8004746:	4bd8      	ldr	r3, [pc, #864]	; (8004aa8 <localMain+0x388>)
 8004748:	789b      	ldrb	r3, [r3, #2]
 800474a:	461a      	mov	r2, r3
 800474c:	4bd5      	ldr	r3, [pc, #852]	; (8004aa4 <localMain+0x384>)
 800474e:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004750:	4bd5      	ldr	r3, [pc, #852]	; (8004aa8 <localMain+0x388>)
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	3b01      	subs	r3, #1
 8004756:	4ad3      	ldr	r2, [pc, #844]	; (8004aa4 <localMain+0x384>)
 8004758:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 800475a:	4bd3      	ldr	r3, [pc, #844]	; (8004aa8 <localMain+0x388>)
 800475c:	78db      	ldrb	r3, [r3, #3]
 800475e:	3364      	adds	r3, #100	; 0x64
 8004760:	4ad0      	ldr	r2, [pc, #832]	; (8004aa4 <localMain+0x384>)
 8004762:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004764:	48cf      	ldr	r0, [pc, #828]	; (8004aa4 <localMain+0x384>)
 8004766:	f008 fc29 	bl	800cfbc <mktime>

	char textBuffer[50] = {0};
 800476a:	2300      	movs	r3, #0
 800476c:	657b      	str	r3, [r7, #84]	; 0x54
 800476e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004772:	222e      	movs	r2, #46	; 0x2e
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f008 fb40 	bl	800cdfc <memset>
	char textBuffer2[50] = {0};
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	222e      	movs	r2, #46	; 0x2e
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f008 fb37 	bl	800cdfc <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 800478e:	4bc5      	ldr	r3, [pc, #788]	; (8004aa4 <localMain+0x384>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	1d9a      	adds	r2, r3, #6
 8004794:	4bc5      	ldr	r3, [pc, #788]	; (8004aac <localMain+0x38c>)
 8004796:	fb83 1302 	smull	r1, r3, r3, r2
 800479a:	4413      	add	r3, r2
 800479c:	1099      	asrs	r1, r3, #2
 800479e:	17d3      	asrs	r3, r2, #31
 80047a0:	1ac9      	subs	r1, r1, r3
 80047a2:	460b      	mov	r3, r1
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	1ad1      	subs	r1, r2, r3
 80047aa:	b2cb      	uxtb	r3, r1
 80047ac:	3301      	adds	r3, #1
 80047ae:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 80047b2:	4bbc      	ldr	r3, [pc, #752]	; (8004aa4 <localMain+0x384>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f103 0208 	add.w	r2, r3, #8
 80047ba:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	4aba      	ldr	r2, [pc, #744]	; (8004aac <localMain+0x38c>)
 80047c2:	fb82 1203 	smull	r1, r2, r2, r3
 80047c6:	441a      	add	r2, r3
 80047c8:	1092      	asrs	r2, r2, #2
 80047ca:	17db      	asrs	r3, r3, #31
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 80047d2:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 80047d6:	4bb3      	ldr	r3, [pc, #716]	; (8004aa4 <localMain+0x384>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80047e0:	49b3      	ldr	r1, [pc, #716]	; (8004ab0 <localMain+0x390>)
 80047e2:	f009 fc39 	bl	800e058 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 80047e6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80047ea:	4bb2      	ldr	r3, [pc, #712]	; (8004ab4 <localMain+0x394>)
 80047ec:	210a      	movs	r1, #10
 80047ee:	200a      	movs	r0, #10
 80047f0:	f7fd fdc8 	bl	8002384 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 80047f4:	48ab      	ldr	r0, [pc, #684]	; (8004aa4 <localMain+0x384>)
 80047f6:	f008 fa47 	bl	800cc88 <asctime>
 80047fa:	4602      	mov	r2, r0
 80047fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f009 fc28 	bl	800e058 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8004808:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800480c:	4baa      	ldr	r3, [pc, #680]	; (8004ab8 <localMain+0x398>)
 800480e:	210a      	movs	r1, #10
 8004810:	20aa      	movs	r0, #170	; 0xaa
 8004812:	f7fd fdb7 	bl	8002384 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 8004816:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800481a:	4ba2      	ldr	r3, [pc, #648]	; (8004aa4 <localMain+0x384>)
 800481c:	4aa7      	ldr	r2, [pc, #668]	; (8004abc <localMain+0x39c>)
 800481e:	2128      	movs	r1, #40	; 0x28
 8004820:	f00a f9f8 	bl	800ec14 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 8004824:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004828:	4ba3      	ldr	r3, [pc, #652]	; (8004ab8 <localMain+0x398>)
 800482a:	2116      	movs	r1, #22
 800482c:	20aa      	movs	r0, #170	; 0xaa
 800482e:	f7fd fda9 	bl	8002384 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 8004832:	4b9c      	ldr	r3, [pc, #624]	; (8004aa4 <localMain+0x384>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 800483a:	4b9a      	ldr	r3, [pc, #616]	; (8004aa4 <localMain+0x384>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 8004842:	4b98      	ldr	r3, [pc, #608]	; (8004aa4 <localMain+0x384>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 800484a:	2302      	movs	r3, #2
 800484c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 8004850:	4b94      	ldr	r3, [pc, #592]	; (8004aa4 <localMain+0x384>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 800485a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	1acb      	subs	r3, r1, r3
 800486a:	3b0c      	subs	r3, #12
 800486c:	4994      	ldr	r1, [pc, #592]	; (8004ac0 <localMain+0x3a0>)
 800486e:	fb81 0103 	smull	r0, r1, r1, r3
 8004872:	1089      	asrs	r1, r1, #2
 8004874:	17db      	asrs	r3, r3, #31
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fe6c 	bl	8000558 <__aeabi_i2d>
 8004880:	a371      	add	r3, pc, #452	; (adr r3, 8004a48 <localMain+0x328>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb fed1 	bl	800062c <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	f7fc f9a3 	bl	8000bdc <__aeabi_d2f>
 8004896:	4603      	mov	r3, r0
 8004898:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 800489c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80048a0:	f7fb fe6c 	bl	800057c <__aeabi_f2d>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	ec43 2b10 	vmov	d0, r2, r3
 80048ac:	f00d f940 	bl	8011b30 <cos>
 80048b0:	ec51 0b10 	vmov	r0, r1, d0
 80048b4:	a366      	add	r3, pc, #408	; (adr r3, 8004a50 <localMain+0x330>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb feb7 	bl	800062c <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	a364      	add	r3, pc, #400	; (adr r3, 8004a58 <localMain+0x338>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fcf8 	bl	80002c0 <__adddf3>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4690      	mov	r8, r2
 80048d6:	4699      	mov	r9, r3
 80048d8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80048dc:	f7fb fe4e 	bl	800057c <__aeabi_f2d>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	ec43 2b10 	vmov	d0, r2, r3
 80048e8:	f00d f976 	bl	8011bd8 <sin>
 80048ec:	ec51 0b10 	vmov	r0, r1, d0
 80048f0:	a35b      	add	r3, pc, #364	; (adr r3, 8004a60 <localMain+0x340>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe99 	bl	800062c <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4640      	mov	r0, r8
 8004900:	4649      	mov	r1, r9
 8004902:	f7fb fcdb 	bl	80002bc <__aeabi_dsub>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4690      	mov	r8, r2
 800490c:	4699      	mov	r9, r3
 800490e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004912:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004916:	ee17 0a90 	vmov	r0, s15
 800491a:	f7fb fe2f 	bl	800057c <__aeabi_f2d>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	ec43 2b10 	vmov	d0, r2, r3
 8004926:	f00d f903 	bl	8011b30 <cos>
 800492a:	ec51 0b10 	vmov	r0, r1, d0
 800492e:	a34e      	add	r3, pc, #312	; (adr r3, 8004a68 <localMain+0x348>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb fe7a 	bl	800062c <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4640      	mov	r0, r8
 800493e:	4649      	mov	r1, r9
 8004940:	f7fb fcbc 	bl	80002bc <__aeabi_dsub>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4690      	mov	r8, r2
 800494a:	4699      	mov	r9, r3
 800494c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004950:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004954:	ee17 0a90 	vmov	r0, s15
 8004958:	f7fb fe10 	bl	800057c <__aeabi_f2d>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	ec43 2b10 	vmov	d0, r2, r3
 8004964:	f00d f938 	bl	8011bd8 <sin>
 8004968:	ec51 0b10 	vmov	r0, r1, d0
 800496c:	a340      	add	r3, pc, #256	; (adr r3, 8004a70 <localMain+0x350>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fe5b 	bl	800062c <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4640      	mov	r0, r8
 800497c:	4649      	mov	r1, r9
 800497e:	f7fb fc9d 	bl	80002bc <__aeabi_dsub>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	a33b      	add	r3, pc, #236	; (adr r3, 8004a78 <localMain+0x358>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fb fe4c 	bl	800062c <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	f7fc f91e 	bl	8000bdc <__aeabi_d2f>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 80049a6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80049aa:	f7fb fde7 	bl	800057c <__aeabi_f2d>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	ec43 2b10 	vmov	d0, r2, r3
 80049b6:	f00d f8bb 	bl	8011b30 <cos>
 80049ba:	ec51 0b10 	vmov	r0, r1, d0
 80049be:	a330      	add	r3, pc, #192	; (adr r3, 8004a80 <localMain+0x360>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fe32 	bl	800062c <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	a12e      	add	r1, pc, #184	; (adr r1, 8004a88 <localMain+0x368>)
 80049ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d2:	f7fb fc73 	bl	80002bc <__aeabi_dsub>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80049e2:	f7fb fdcb 	bl	800057c <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	ec43 2b10 	vmov	d0, r2, r3
 80049ee:	f00d f8f3 	bl	8011bd8 <sin>
 80049f2:	ec51 0b10 	vmov	r0, r1, d0
 80049f6:	a326      	add	r3, pc, #152	; (adr r3, 8004a90 <localMain+0x370>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fe16 	bl	800062c <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4640      	mov	r0, r8
 8004a06:	4649      	mov	r1, r9
 8004a08:	f7fb fc5a 	bl	80002c0 <__adddf3>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4690      	mov	r8, r2
 8004a12:	4699      	mov	r9, r3
 8004a14:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004a18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a1c:	ee17 0a90 	vmov	r0, s15
 8004a20:	f7fb fdac 	bl	800057c <__aeabi_f2d>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	ec43 2b10 	vmov	d0, r2, r3
 8004a2c:	f00d f880 	bl	8011b30 <cos>
 8004a30:	ec51 0b10 	vmov	r0, r1, d0
 8004a34:	a318      	add	r3, pc, #96	; (adr r3, 8004a98 <localMain+0x378>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f7fb fdf7 	bl	800062c <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	e03f      	b.n	8004ac4 <localMain+0x3a4>
 8004a44:	f3af 8000 	nop.w
 8004a48:	d4b3ac9a 	.word	0xd4b3ac9a
 8004a4c:	3f91a099 	.word	0x3f91a099
 8004a50:	ba2be059 	.word	0xba2be059
 8004a54:	3f5e9af5 	.word	0x3f5e9af5
 8004a58:	30553261 	.word	0x30553261
 8004a5c:	3f13a92a 	.word	0x3f13a92a
 8004a60:	83e8576d 	.word	0x83e8576d
 8004a64:	3fa06c65 	.word	0x3fa06c65
 8004a68:	183f91e6 	.word	0x183f91e6
 8004a6c:	3f8dee78 	.word	0x3f8dee78
 8004a70:	fe260b2d 	.word	0xfe260b2d
 8004a74:	3fa4ea28 	.word	0x3fa4ea28
 8004a78:	8f5c28f6 	.word	0x8f5c28f6
 8004a7c:	406ca5c2 	.word	0x406ca5c2
 8004a80:	8051c9f7 	.word	0x8051c9f7
 8004a84:	3fd99828 	.word	0x3fd99828
 8004a88:	7c0f4517 	.word	0x7c0f4517
 8004a8c:	3f7c560c 	.word	0x3f7c560c
 8004a90:	dd50a88f 	.word	0xdd50a88f
 8004a94:	3fb1fc5c 	.word	0x3fb1fc5c
 8004a98:	cfc829d0 	.word	0xcfc829d0
 8004a9c:	3f7bae46 	.word	0x3f7bae46
 8004aa0:	200035d0 	.word	0x200035d0
 8004aa4:	200039d0 	.word	0x200039d0
 8004aa8:	200035e4 	.word	0x200035e4
 8004aac:	92492493 	.word	0x92492493
 8004ab0:	08014788 	.word	0x08014788
 8004ab4:	08018004 	.word	0x08018004
 8004ab8:	08017b88 	.word	0x08017b88
 8004abc:	08014798 	.word	0x08014798
 8004ac0:	2aaaaaab 	.word	0x2aaaaaab
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	f7fb fbf8 	bl	80002bc <__aeabi_dsub>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4690      	mov	r8, r2
 8004ad2:	4699      	mov	r9, r3
 8004ad4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004ad8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004adc:	ee17 0a90 	vmov	r0, s15
 8004ae0:	f7fb fd4c 	bl	800057c <__aeabi_f2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	ec43 2b10 	vmov	d0, r2, r3
 8004aec:	f00d f874 	bl	8011bd8 <sin>
 8004af0:	ec51 0b10 	vmov	r0, r1, d0
 8004af4:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fd96 	bl	800062c <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fb fbda 	bl	80002c0 <__adddf3>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4690      	mov	r8, r2
 8004b12:	4699      	mov	r9, r3
 8004b14:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004b18:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b20:	ee17 0a90 	vmov	r0, s15
 8004b24:	f7fb fd2a 	bl	800057c <__aeabi_f2d>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	ec43 2b10 	vmov	d0, r2, r3
 8004b30:	f00c fffe 	bl	8011b30 <cos>
 8004b34:	ec51 0b10 	vmov	r0, r1, d0
 8004b38:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fd74 	bl	800062c <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4640      	mov	r0, r8
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	f7fb fbb6 	bl	80002bc <__aeabi_dsub>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4690      	mov	r8, r2
 8004b56:	4699      	mov	r9, r3
 8004b58:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004b5c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b64:	ee17 0a90 	vmov	r0, s15
 8004b68:	f7fb fd08 	bl	800057c <__aeabi_f2d>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	ec43 2b10 	vmov	d0, r2, r3
 8004b74:	f00d f830 	bl	8011bd8 <sin>
 8004b78:	ec51 0b10 	vmov	r0, r1, d0
 8004b7c:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fd52 	bl	800062c <__aeabi_dmul>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb fb96 	bl	80002c0 <__adddf3>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7fc f81e 	bl	8000bdc <__aeabi_d2f>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	4be9      	ldr	r3, [pc, #932]	; (8004f50 <localMain+0x830>)
 8004bac:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4be7      	ldr	r3, [pc, #924]	; (8004f54 <localMain+0x834>)
 8004bb6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8004bba:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004bbe:	f7fb fcdd 	bl	800057c <__aeabi_f2d>
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	4689      	mov	r9, r1
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	4be3      	ldr	r3, [pc, #908]	; (8004f58 <localMain+0x838>)
 8004bcc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004bd0:	f7fb fd2c 	bl	800062c <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4640      	mov	r0, r8
 8004bda:	4649      	mov	r1, r9
 8004bdc:	f7fb fb70 	bl	80002c0 <__adddf3>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4690      	mov	r8, r2
 8004be6:	4699      	mov	r9, r3
 8004be8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb fcaf 	bl	8000558 <__aeabi_i2d>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f7fb fb5b 	bl	80002bc <__aeabi_dsub>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fb ffe5 	bl	8000bdc <__aeabi_d2f>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 8004c18:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	461a      	mov	r2, r3
 8004c26:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004c2a:	4413      	add	r3, r2
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c34:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c40:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8004f5c <localMain+0x83c>
 8004c44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4c:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8004c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c54:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8004c58:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8004c5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c64:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004f60 <localMain+0x840>
 8004c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c6c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8004c70:	a3b5      	add	r3, pc, #724	; (adr r3, 8004f48 <localMain+0x828>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004c7a:	f7fb fcd7 	bl	800062c <__aeabi_dmul>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	4bb6      	ldr	r3, [pc, #728]	; (8004f64 <localMain+0x844>)
 8004c8c:	f7fb fdf8 	bl	8000880 <__aeabi_ddiv>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	ec43 2b17 	vmov	d7, r2, r3
 8004c98:	eeb0 0a47 	vmov.f32	s0, s14
 8004c9c:	eef0 0a67 	vmov.f32	s1, s15
 8004ca0:	f00c ff9a 	bl	8011bd8 <sin>
 8004ca4:	ec59 8b10 	vmov	r8, r9, d0
 8004ca8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004cac:	f7fb fc66 	bl	800057c <__aeabi_f2d>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	ec43 2b10 	vmov	d0, r2, r3
 8004cb8:	f00c ff8e 	bl	8011bd8 <sin>
 8004cbc:	ec53 2b10 	vmov	r2, r3, d0
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb fcb2 	bl	800062c <__aeabi_dmul>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4690      	mov	r8, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	a39d      	add	r3, pc, #628	; (adr r3, 8004f48 <localMain+0x828>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004cda:	f7fb fca7 	bl	800062c <__aeabi_dmul>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	4b9e      	ldr	r3, [pc, #632]	; (8004f64 <localMain+0x844>)
 8004cec:	f7fb fdc8 	bl	8000880 <__aeabi_ddiv>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	ec43 2b17 	vmov	d7, r2, r3
 8004cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8004cfc:	eef0 0a67 	vmov.f32	s1, s15
 8004d00:	f00c ff16 	bl	8011b30 <cos>
 8004d04:	ec5b ab10 	vmov	sl, fp, d0
 8004d08:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004d0c:	f7fb fc36 	bl	800057c <__aeabi_f2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	ec43 2b10 	vmov	d0, r2, r3
 8004d18:	f00c ff0a 	bl	8011b30 <cos>
 8004d1c:	ec53 2b10 	vmov	r2, r3, d0
 8004d20:	4650      	mov	r0, sl
 8004d22:	4659      	mov	r1, fp
 8004d24:	f7fb fc82 	bl	800062c <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4692      	mov	sl, r2
 8004d2e:	469b      	mov	fp, r3
 8004d30:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004d34:	f7fb fc22 	bl	800057c <__aeabi_f2d>
 8004d38:	a383      	add	r3, pc, #524	; (adr r3, 8004f48 <localMain+0x828>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc75 	bl	800062c <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	4b85      	ldr	r3, [pc, #532]	; (8004f64 <localMain+0x844>)
 8004d50:	f7fb fd96 	bl	8000880 <__aeabi_ddiv>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	ec43 2b17 	vmov	d7, r2, r3
 8004d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d60:	eef0 0a67 	vmov.f32	s1, s15
 8004d64:	f00c fee4 	bl	8011b30 <cos>
 8004d68:	ec53 2b10 	vmov	r2, r3, d0
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	4659      	mov	r1, fp
 8004d70:	f7fb fc5c 	bl	800062c <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4640      	mov	r0, r8
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	f7fb faa0 	bl	80002c0 <__adddf3>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fb ff28 	bl	8000bdc <__aeabi_d2f>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 8004d92:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004d96:	f7fb fbf1 	bl	800057c <__aeabi_f2d>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	ec43 2b10 	vmov	d0, r2, r3
 8004da2:	f00c ffa5 	bl	8011cf0 <acos>
 8004da6:	ec53 2b10 	vmov	r2, r3, d0
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	f7fb ff15 	bl	8000bdc <__aeabi_d2f>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8004db8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004dbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc8:	ee17 0a90 	vmov	r0, s15
 8004dcc:	f7fb fbd6 	bl	800057c <__aeabi_f2d>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	ec43 2b10 	vmov	d0, r2, r3
 8004dd8:	f00d f82e 	bl	8011e38 <sqrt>
 8004ddc:	ec53 2b10 	vmov	r2, r3, d0
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	f7fb fefa 	bl	8000bdc <__aeabi_d2f>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8004dee:	a356      	add	r3, pc, #344	; (adr r3, 8004f48 <localMain+0x828>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004df8:	f7fb fc18 	bl	800062c <__aeabi_dmul>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <localMain+0x844>)
 8004e0a:	f7fb fd39 	bl	8000880 <__aeabi_ddiv>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	ec43 2b17 	vmov	d7, r2, r3
 8004e16:	eeb0 0a47 	vmov.f32	s0, s14
 8004e1a:	eef0 0a67 	vmov.f32	s1, s15
 8004e1e:	f00c fedb 	bl	8011bd8 <sin>
 8004e22:	ec59 8b10 	vmov	r8, r9, d0
 8004e26:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004e2a:	f7fb fba7 	bl	800057c <__aeabi_f2d>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4640      	mov	r0, r8
 8004e34:	4649      	mov	r1, r9
 8004e36:	f7fb fbf9 	bl	800062c <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004e46:	f7fb fb99 	bl	800057c <__aeabi_f2d>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	ec43 2b10 	vmov	d0, r2, r3
 8004e52:	f00c fec1 	bl	8011bd8 <sin>
 8004e56:	ec53 2b10 	vmov	r2, r3, d0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fa2d 	bl	80002bc <__aeabi_dsub>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4614      	mov	r4, r2
 8004e68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004e6c:	a336      	add	r3, pc, #216	; (adr r3, 8004f48 <localMain+0x828>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e76:	f7fb fbd9 	bl	800062c <__aeabi_dmul>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b37      	ldr	r3, [pc, #220]	; (8004f64 <localMain+0x844>)
 8004e88:	f7fb fcfa 	bl	8000880 <__aeabi_ddiv>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	ec43 2b17 	vmov	d7, r2, r3
 8004e94:	eeb0 0a47 	vmov.f32	s0, s14
 8004e98:	eef0 0a67 	vmov.f32	s1, s15
 8004e9c:	f00c fe48 	bl	8011b30 <cos>
 8004ea0:	ec59 8b10 	vmov	r8, r9, d0
 8004ea4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004ea8:	f7fb fb68 	bl	800057c <__aeabi_f2d>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	f7fb fbba 	bl	800062c <__aeabi_dmul>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	f7fb fcde 	bl	8000880 <__aeabi_ddiv>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	ec43 2b17 	vmov	d7, r2, r3
 8004ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed0:	eef0 0a67 	vmov.f32	s1, s15
 8004ed4:	f00c ff0c 	bl	8011cf0 <acos>
 8004ed8:	ec53 2b10 	vmov	r2, r3, d0
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f7fb fe7c 	bl	8000bdc <__aeabi_d2f>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef1 7a67 	vneg.f32	s15, s15
 8004eee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8004ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efa:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <localMain+0x848>)
 8004efc:	461c      	mov	r4, r3
 8004efe:	4615      	mov	r5, r2
 8004f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8004f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <localMain+0x84c>)
 8004f1e:	f7fb f9cf 	bl	80002c0 <__adddf3>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	a307      	add	r3, pc, #28	; (adr r3, 8004f48 <localMain+0x828>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f7fb fb7c 	bl	800062c <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <localMain+0x844>)
 8004f42:	f7fb fc9d 	bl	8000880 <__aeabi_ddiv>
 8004f46:	e01f      	b.n	8004f88 <localMain+0x868>
 8004f48:	54442d18 	.word	0x54442d18
 8004f4c:	400921fb 	.word	0x400921fb
 8004f50:	40310000 	.word	0x40310000
 8004f54:	40498000 	.word	0x40498000
 8004f58:	40100000 	.word	0x40100000
 8004f5c:	42700000 	.word	0x42700000
 8004f60:	43340000 	.word	0x43340000
 8004f64:	40668000 	.word	0x40668000
 8004f68:	08014870 	.word	0x08014870
 8004f6c:	40568000 	.word	0x40568000
 8004f70:	ab324852 	.word	0xab324852
 8004f74:	3f4db877 	.word	0x3f4db877
 8004f78:	d9839475 	.word	0xd9839475
 8004f7c:	3f661804 	.word	0x3f661804
 8004f80:	e646f156 	.word	0xe646f156
 8004f84:	3f583f91 	.word	0x3f583f91
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8004f90:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8004f94:	f00c fdcc 	bl	8011b30 <cos>
 8004f98:	ec55 4b10 	vmov	r4, r5, d0
 8004f9c:	a3f0      	add	r3, pc, #960	; (adr r3, 8005360 <localMain+0xc40>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004fa6:	f7fb fb41 	bl	800062c <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	4bec      	ldr	r3, [pc, #944]	; (8005368 <localMain+0xc48>)
 8004fb8:	f7fb fc62 	bl	8000880 <__aeabi_ddiv>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	ec43 2b17 	vmov	d7, r2, r3
 8004fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc8:	eef0 0a67 	vmov.f32	s1, s15
 8004fcc:	f00c fdb0 	bl	8011b30 <cos>
 8004fd0:	ec59 8b10 	vmov	r8, r9, d0
 8004fd4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004fd8:	f7fb fad0 	bl	800057c <__aeabi_f2d>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	ec43 2b10 	vmov	d0, r2, r3
 8004fe4:	f00c fda4 	bl	8011b30 <cos>
 8004fe8:	ec53 2b10 	vmov	r2, r3, d0
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb fb1c 	bl	800062c <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f7fb fc40 	bl	8000880 <__aeabi_ddiv>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4614      	mov	r4, r2
 8005006:	461d      	mov	r5, r3
 8005008:	a3d5      	add	r3, pc, #852	; (adr r3, 8005360 <localMain+0xc40>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005012:	f7fb fb0b 	bl	800062c <__aeabi_dmul>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	4bd1      	ldr	r3, [pc, #836]	; (8005368 <localMain+0xc48>)
 8005024:	f7fb fc2c 	bl	8000880 <__aeabi_ddiv>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	ec43 2b17 	vmov	d7, r2, r3
 8005030:	eeb0 0a47 	vmov.f32	s0, s14
 8005034:	eef0 0a67 	vmov.f32	s1, s15
 8005038:	f00c fe26 	bl	8011c88 <tan>
 800503c:	ec59 8b10 	vmov	r8, r9, d0
 8005040:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005044:	f7fb fa9a 	bl	800057c <__aeabi_f2d>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	ec43 2b10 	vmov	d0, r2, r3
 8005050:	f00c fe1a 	bl	8011c88 <tan>
 8005054:	ec53 2b10 	vmov	r2, r3, d0
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f7fb fae6 	bl	800062c <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb f928 	bl	80002bc <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	ec43 2b17 	vmov	d7, r2, r3
 8005074:	eeb0 0a47 	vmov.f32	s0, s14
 8005078:	eef0 0a67 	vmov.f32	s1, s15
 800507c:	f00c fe38 	bl	8011cf0 <acos>
 8005080:	ec53 2b10 	vmov	r2, r3, d0
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	f7fb fda8 	bl	8000bdc <__aeabi_d2f>
 800508c:	4603      	mov	r3, r0
 800508e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 8005092:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005096:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800536c <localMain+0xc4c>
 800509a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800509e:	ee17 0a90 	vmov	r0, s15
 80050a2:	f7fb fa6b 	bl	800057c <__aeabi_f2d>
 80050a6:	a3ae      	add	r3, pc, #696	; (adr r3, 8005360 <localMain+0xc40>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f7fb fbe8 	bl	8000880 <__aeabi_ddiv>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80050bc:	f7fb f900 	bl	80002c0 <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	4ba8      	ldr	r3, [pc, #672]	; (8005370 <localMain+0xc50>)
 80050ce:	f7fb faad 	bl	800062c <__aeabi_dmul>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	f04f 0000 	mov.w	r0, #0
 80050da:	49a6      	ldr	r1, [pc, #664]	; (8005374 <localMain+0xc54>)
 80050dc:	f7fb f8ee 	bl	80002bc <__aeabi_dsub>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80050ec:	f7fb fa46 	bl	800057c <__aeabi_f2d>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb f8e0 	bl	80002bc <__aeabi_dsub>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4614      	mov	r4, r2
 8005102:	461d      	mov	r5, r3
 8005104:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb fa21 	bl	8000558 <__aeabi_i2d>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb f8cf 	bl	80002c0 <__adddf3>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	f7fb fd2f 	bl	8000b8c <__aeabi_d2iz>
 800512e:	4603      	mov	r3, r0
 8005130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 8005134:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005138:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800536c <localMain+0xc4c>
 800513c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005140:	ee17 0a90 	vmov	r0, s15
 8005144:	f7fb fa1a 	bl	800057c <__aeabi_f2d>
 8005148:	a385      	add	r3, pc, #532	; (adr r3, 8005360 <localMain+0xc40>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb fb97 	bl	8000880 <__aeabi_ddiv>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800515a:	f7fb f8af 	bl	80002bc <__aeabi_dsub>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4610      	mov	r0, r2
 8005164:	4619      	mov	r1, r3
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <localMain+0xc50>)
 800516c:	f7fb fa5e 	bl	800062c <__aeabi_dmul>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	497e      	ldr	r1, [pc, #504]	; (8005374 <localMain+0xc54>)
 800517a:	f7fb f89f 	bl	80002bc <__aeabi_dsub>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4614      	mov	r4, r2
 8005184:	461d      	mov	r5, r3
 8005186:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800518a:	f7fb f9f7 	bl	800057c <__aeabi_f2d>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f7fb f891 	bl	80002bc <__aeabi_dsub>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	461d      	mov	r5, r3
 80051a2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb f9d2 	bl	8000558 <__aeabi_i2d>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f880 	bl	80002c0 <__adddf3>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fb fce0 	bl	8000b8c <__aeabi_d2iz>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	4b66      	ldr	r3, [pc, #408]	; (8005370 <localMain+0xc50>)
 80051d8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80051dc:	f7fb fa26 	bl	800062c <__aeabi_dmul>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	4962      	ldr	r1, [pc, #392]	; (8005374 <localMain+0xc54>)
 80051ea:	f7fb f867 	bl	80002bc <__aeabi_dsub>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4614      	mov	r4, r2
 80051f4:	461d      	mov	r5, r3
 80051f6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80051fa:	f7fb f9bf 	bl	800057c <__aeabi_f2d>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fb f859 	bl	80002bc <__aeabi_dsub>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4614      	mov	r4, r2
 8005210:	461d      	mov	r5, r3
 8005212:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb f99a 	bl	8000558 <__aeabi_i2d>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4620      	mov	r0, r4
 800522a:	4629      	mov	r1, r5
 800522c:	f7fb f848 	bl	80002c0 <__adddf3>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	f7fb fca8 	bl	8000b8c <__aeabi_d2iz>
 800523c:	4603      	mov	r3, r0
 800523e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8005242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005246:	4a4c      	ldr	r2, [pc, #304]	; (8005378 <localMain+0xc58>)
 8005248:	fb82 1203 	smull	r1, r2, r2, r3
 800524c:	441a      	add	r2, r3
 800524e:	1152      	asrs	r2, r2, #5
 8005250:	17db      	asrs	r3, r3, #31
 8005252:	1ad4      	subs	r4, r2, r3
 8005254:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005258:	4b47      	ldr	r3, [pc, #284]	; (8005378 <localMain+0xc58>)
 800525a:	fb83 1302 	smull	r1, r3, r3, r2
 800525e:	4413      	add	r3, r2
 8005260:	1159      	asrs	r1, r3, #5
 8005262:	17d3      	asrs	r3, r2, #31
 8005264:	1ac9      	subs	r1, r1, r3
 8005266:	460b      	mov	r3, r1
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a5b      	subs	r3, r3, r1
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	1ad1      	subs	r1, r2, r3
 8005270:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005274:	460b      	mov	r3, r1
 8005276:	4622      	mov	r2, r4
 8005278:	4940      	ldr	r1, [pc, #256]	; (800537c <localMain+0xc5c>)
 800527a:	f008 feed 	bl	800e058 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 800527e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005282:	4b3f      	ldr	r3, [pc, #252]	; (8005380 <localMain+0xc60>)
 8005284:	211c      	movs	r1, #28
 8005286:	200a      	movs	r0, #10
 8005288:	f7fd f87c 	bl	8002384 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 800528c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005290:	4a39      	ldr	r2, [pc, #228]	; (8005378 <localMain+0xc58>)
 8005292:	fb82 1203 	smull	r1, r2, r2, r3
 8005296:	441a      	add	r2, r3
 8005298:	1152      	asrs	r2, r2, #5
 800529a:	17db      	asrs	r3, r3, #31
 800529c:	1ad4      	subs	r4, r2, r3
 800529e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <localMain+0xc58>)
 80052a4:	fb83 1302 	smull	r1, r3, r3, r2
 80052a8:	4413      	add	r3, r2
 80052aa:	1159      	asrs	r1, r3, #5
 80052ac:	17d3      	asrs	r3, r2, #31
 80052ae:	1ac9      	subs	r1, r1, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	1a5b      	subs	r3, r3, r1
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	1ad1      	subs	r1, r2, r3
 80052ba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80052be:	460b      	mov	r3, r1
 80052c0:	4622      	mov	r2, r4
 80052c2:	4930      	ldr	r1, [pc, #192]	; (8005384 <localMain+0xc64>)
 80052c4:	f008 fec8 	bl	800e058 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 80052c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052cc:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <localMain+0xc60>)
 80052ce:	212c      	movs	r1, #44	; 0x2c
 80052d0:	200a      	movs	r0, #10
 80052d2:	f7fd f857 	bl	8002384 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 80052d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052da:	4a27      	ldr	r2, [pc, #156]	; (8005378 <localMain+0xc58>)
 80052dc:	fb82 1203 	smull	r1, r2, r2, r3
 80052e0:	441a      	add	r2, r3
 80052e2:	1152      	asrs	r2, r2, #5
 80052e4:	17db      	asrs	r3, r3, #31
 80052e6:	1ad4      	subs	r4, r2, r3
 80052e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <localMain+0xc58>)
 80052ee:	fb83 1302 	smull	r1, r3, r3, r2
 80052f2:	4413      	add	r3, r2
 80052f4:	1159      	asrs	r1, r3, #5
 80052f6:	17d3      	asrs	r3, r2, #31
 80052f8:	1ac9      	subs	r1, r1, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a5b      	subs	r3, r3, r1
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	1ad1      	subs	r1, r2, r3
 8005304:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005308:	460b      	mov	r3, r1
 800530a:	4622      	mov	r2, r4
 800530c:	491e      	ldr	r1, [pc, #120]	; (8005388 <localMain+0xc68>)
 800530e:	f008 fea3 	bl	800e058 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8005312:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <localMain+0xc60>)
 8005318:	213c      	movs	r1, #60	; 0x3c
 800531a:	200a      	movs	r0, #10
 800531c:	f7fd f832 	bl	8002384 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8005320:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005324:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800536c <localMain+0xc4c>
 8005328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800532c:	ee17 0a90 	vmov	r0, s15
 8005330:	f7fb f924 	bl	800057c <__aeabi_f2d>
 8005334:	a30a      	add	r3, pc, #40	; (adr r3, 8005360 <localMain+0xc40>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb faa1 	bl	8000880 <__aeabi_ddiv>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	4911      	ldr	r1, [pc, #68]	; (800538c <localMain+0xc6c>)
 8005348:	f7fa ffb8 	bl	80002bc <__aeabi_dsub>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005354:	490e      	ldr	r1, [pc, #56]	; (8005390 <localMain+0xc70>)
 8005356:	f008 fe7f 	bl	800e058 <siprintf>
 800535a:	e01b      	b.n	8005394 <localMain+0xc74>
 800535c:	f3af 8000 	nop.w
 8005360:	54442d18 	.word	0x54442d18
 8005364:	400921fb 	.word	0x400921fb
 8005368:	40668000 	.word	0x40668000
 800536c:	43340000 	.word	0x43340000
 8005370:	40100000 	.word	0x40100000
 8005374:	40868000 	.word	0x40868000
 8005378:	88888889 	.word	0x88888889
 800537c:	080147ac 	.word	0x080147ac
 8005380:	08018a8c 	.word	0x08018a8c
 8005384:	080147c0 	.word	0x080147c0
 8005388:	080147d0 	.word	0x080147d0
 800538c:	40568000 	.word	0x40568000
 8005390:	080147e4 	.word	0x080147e4
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 8005394:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <localMain+0xcc8>)
 800539a:	2150      	movs	r1, #80	; 0x50
 800539c:	200a      	movs	r0, #10
 800539e:	f7fc fff1 	bl	8002384 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 80053a2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80053a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	d51f      	bpl.n	80053f0 <localMain+0xcd0>
 80053b0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80053b4:	eef1 7a67 	vneg.f32	s15, s15
 80053b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80053ec <localMain+0xccc>
 80053bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053c0:	ee17 0a90 	vmov	r0, s15
 80053c4:	f7fb f8da 	bl	800057c <__aeabi_f2d>
 80053c8:	a305      	add	r3, pc, #20	; (adr r3, 80053e0 <localMain+0xcc0>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fb fa57 	bl	8000880 <__aeabi_ddiv>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 80053da:	e025      	b.n	8005428 <localMain+0xd08>
 80053dc:	f3af 8000 	nop.w
 80053e0:	54442d18 	.word	0x54442d18
 80053e4:	400921fb 	.word	0x400921fb
 80053e8:	08018a8c 	.word	0x08018a8c
 80053ec:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 80053f0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80053f4:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80053ec <localMain+0xccc>
 80053f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fc:	ee17 0a90 	vmov	r0, s15
 8005400:	f7fb f8bc 	bl	800057c <__aeabi_f2d>
 8005404:	a3db      	add	r3, pc, #876	; (adr r3, 8005774 <localMain+0x1054>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f7fb fa39 	bl	8000880 <__aeabi_ddiv>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	4bcb      	ldr	r3, [pc, #812]	; (8005748 <localMain+0x1028>)
 800541c:	f7fa ff50 	bl	80002c0 <__adddf3>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8005428:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800542c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005430:	49c6      	ldr	r1, [pc, #792]	; (800574c <localMain+0x102c>)
 8005432:	f008 fe11 	bl	800e058 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 8005436:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800543a:	4bc5      	ldr	r3, [pc, #788]	; (8005750 <localMain+0x1030>)
 800543c:	2160      	movs	r1, #96	; 0x60
 800543e:	200a      	movs	r0, #10
 8005440:	f7fc ffa0 	bl	8002384 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8005444:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005456:	4413      	add	r3, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb f87d 	bl	8000558 <__aeabi_i2d>
 800545e:	4604      	mov	r4, r0
 8005460:	460d      	mov	r5, r1
 8005462:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005466:	4618      	mov	r0, r3
 8005468:	f7fb f866 	bl	8000538 <__aeabi_ui2d>
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	4bb8      	ldr	r3, [pc, #736]	; (8005754 <localMain+0x1034>)
 8005472:	f7fb fa05 	bl	8000880 <__aeabi_ddiv>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4620      	mov	r0, r4
 800547c:	4629      	mov	r1, r5
 800547e:	f7fa ff1f 	bl	80002c0 <__adddf3>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4614      	mov	r4, r2
 8005488:	461d      	mov	r5, r3
 800548a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800548e:	f7fb f863 	bl	8000558 <__aeabi_i2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fa ff0f 	bl	80002bc <__aeabi_dsub>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	4bab      	ldr	r3, [pc, #684]	; (8005758 <localMain+0x1038>)
 80054ac:	f7fb f8be 	bl	800062c <__aeabi_dmul>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80054bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fb f848 	bl	8000558 <__aeabi_i2d>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fb f9d6 	bl	8000880 <__aeabi_ddiv>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 80054dc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80054e0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80054e4:	499d      	ldr	r1, [pc, #628]	; (800575c <localMain+0x103c>)
 80054e6:	f008 fdb7 	bl	800e058 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 80054ea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80054ee:	4b98      	ldr	r3, [pc, #608]	; (8005750 <localMain+0x1030>)
 80054f0:	2174      	movs	r1, #116	; 0x74
 80054f2:	200a      	movs	r0, #10
 80054f4:	f7fc ff46 	bl	8002384 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 80054f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80054fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a97      	ldr	r2, [pc, #604]	; (8005760 <localMain+0x1040>)
 8005504:	fb82 1203 	smull	r1, r2, r2, r3
 8005508:	441a      	add	r2, r3
 800550a:	1152      	asrs	r2, r2, #5
 800550c:	17db      	asrs	r3, r3, #31
 800550e:	1ad4      	subs	r4, r2, r3
 8005510:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005518:	1ad2      	subs	r2, r2, r3
 800551a:	4b91      	ldr	r3, [pc, #580]	; (8005760 <localMain+0x1040>)
 800551c:	fb83 1302 	smull	r1, r3, r3, r2
 8005520:	4413      	add	r3, r2
 8005522:	1159      	asrs	r1, r3, #5
 8005524:	17d3      	asrs	r3, r2, #31
 8005526:	1ac9      	subs	r1, r1, r3
 8005528:	460b      	mov	r3, r1
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a5b      	subs	r3, r3, r1
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	1ad1      	subs	r1, r2, r3
 8005532:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005536:	460b      	mov	r3, r1
 8005538:	4622      	mov	r2, r4
 800553a:	498a      	ldr	r1, [pc, #552]	; (8005764 <localMain+0x1044>)
 800553c:	f008 fd8c 	bl	800e058 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8005540:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005544:	4b82      	ldr	r3, [pc, #520]	; (8005750 <localMain+0x1030>)
 8005546:	2184      	movs	r1, #132	; 0x84
 8005548:	200a      	movs	r0, #10
 800554a:	f7fc ff1b 	bl	8002384 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005552:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	4a83      	ldr	r2, [pc, #524]	; (8005768 <localMain+0x1048>)
 800555c:	fb82 1203 	smull	r1, r2, r2, r3
 8005560:	441a      	add	r2, r3
 8005562:	1292      	asrs	r2, r2, #10
 8005564:	17db      	asrs	r3, r3, #31
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	330a      	adds	r3, #10
 800556c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005574:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	4a7a      	ldr	r2, [pc, #488]	; (8005768 <localMain+0x1048>)
 800557e:	fb82 1203 	smull	r1, r2, r2, r3
 8005582:	441a      	add	r2, r3
 8005584:	1292      	asrs	r2, r2, #10
 8005586:	17db      	asrs	r3, r3, #31
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	b29b      	uxth	r3, r3
 800558c:	330a      	adds	r3, #10
 800558e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 8005592:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005596:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	4a72      	ldr	r2, [pc, #456]	; (8005768 <localMain+0x1048>)
 80055a0:	fb82 1203 	smull	r1, r2, r2, r3
 80055a4:	441a      	add	r2, r3
 80055a6:	1292      	asrs	r2, r2, #10
 80055a8:	17db      	asrs	r3, r3, #31
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	330a      	adds	r3, #10
 80055b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 80055b4:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	461a      	mov	r2, r3
 80055c2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80055c6:	4413      	add	r3, r2
 80055c8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	4a65      	ldr	r2, [pc, #404]	; (8005768 <localMain+0x1048>)
 80055d2:	fb82 1203 	smull	r1, r2, r2, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	1292      	asrs	r2, r2, #10
 80055da:	17db      	asrs	r3, r3, #31
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	330a      	adds	r3, #10
 80055e2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 80055e6:	2301      	movs	r3, #1
 80055e8:	22a5      	movs	r2, #165	; 0xa5
 80055ea:	f240 1185 	movw	r1, #389	; 0x185
 80055ee:	200a      	movs	r0, #10
 80055f0:	f7fd fb32 	bl	8002c58 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 80055f4:	2301      	movs	r3, #1
 80055f6:	22a7      	movs	r2, #167	; 0xa7
 80055f8:	21a3      	movs	r1, #163	; 0xa3
 80055fa:	200a      	movs	r0, #10
 80055fc:	f7fc fef0 	bl	80023e0 <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8005600:	2301      	movs	r3, #1
 8005602:	22a7      	movs	r2, #167	; 0xa7
 8005604:	21a3      	movs	r1, #163	; 0xa3
 8005606:	f240 1085 	movw	r0, #389	; 0x185
 800560a:	f7fc fee9 	bl	80023e0 <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 800560e:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 8005612:	2302      	movs	r3, #2
 8005614:	22aa      	movs	r2, #170	; 0xaa
 8005616:	21a0      	movs	r1, #160	; 0xa0
 8005618:	f7fc fee2 	bl	80023e0 <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 800561c:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8005620:	2302      	movs	r3, #2
 8005622:	22aa      	movs	r2, #170	; 0xaa
 8005624:	21a0      	movs	r1, #160	; 0xa0
 8005626:	f7fc fedb 	bl	80023e0 <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 800562a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800562e:	2302      	movs	r3, #2
 8005630:	22aa      	movs	r2, #170	; 0xaa
 8005632:	21a0      	movs	r1, #160	; 0xa0
 8005634:	f7fc fed4 	bl	80023e0 <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8005638:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 800563c:	2302      	movs	r3, #2
 800563e:	22af      	movs	r2, #175	; 0xaf
 8005640:	219b      	movs	r1, #155	; 0x9b
 8005642:	f7fc fecd 	bl	80023e0 <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8005646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800564a:	4a45      	ldr	r2, [pc, #276]	; (8005760 <localMain+0x1040>)
 800564c:	fb82 1203 	smull	r1, r2, r2, r3
 8005650:	441a      	add	r2, r3
 8005652:	1152      	asrs	r2, r2, #5
 8005654:	17db      	asrs	r3, r3, #31
 8005656:	1ad4      	subs	r4, r2, r3
 8005658:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800565c:	4b40      	ldr	r3, [pc, #256]	; (8005760 <localMain+0x1040>)
 800565e:	fb83 1302 	smull	r1, r3, r3, r2
 8005662:	4413      	add	r3, r2
 8005664:	1159      	asrs	r1, r3, #5
 8005666:	17d3      	asrs	r3, r2, #31
 8005668:	1ac9      	subs	r1, r1, r3
 800566a:	460b      	mov	r3, r1
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	1ad1      	subs	r1, r2, r3
 8005674:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005678:	460b      	mov	r3, r1
 800567a:	4622      	mov	r2, r4
 800567c:	493b      	ldr	r1, [pc, #236]	; (800576c <localMain+0x104c>)
 800567e:	f008 fceb 	bl	800e058 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 8005682:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005686:	3b13      	subs	r3, #19
 8005688:	b298      	uxth	r0, r3
 800568a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800568e:	4b38      	ldr	r3, [pc, #224]	; (8005770 <localMain+0x1050>)
 8005690:	21aa      	movs	r1, #170	; 0xaa
 8005692:	f7fc fe77 	bl	8002384 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8005696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800569a:	4a31      	ldr	r2, [pc, #196]	; (8005760 <localMain+0x1040>)
 800569c:	fb82 1203 	smull	r1, r2, r2, r3
 80056a0:	441a      	add	r2, r3
 80056a2:	1152      	asrs	r2, r2, #5
 80056a4:	17db      	asrs	r3, r3, #31
 80056a6:	1ad4      	subs	r4, r2, r3
 80056a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <localMain+0x1040>)
 80056ae:	fb83 1302 	smull	r1, r3, r3, r2
 80056b2:	4413      	add	r3, r2
 80056b4:	1159      	asrs	r1, r3, #5
 80056b6:	17d3      	asrs	r3, r2, #31
 80056b8:	1ac9      	subs	r1, r1, r3
 80056ba:	460b      	mov	r3, r1
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	1ad1      	subs	r1, r2, r3
 80056c4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80056c8:	460b      	mov	r3, r1
 80056ca:	4622      	mov	r2, r4
 80056cc:	4927      	ldr	r1, [pc, #156]	; (800576c <localMain+0x104c>)
 80056ce:	f008 fcc3 	bl	800e058 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 80056d2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80056d6:	3b13      	subs	r3, #19
 80056d8:	b298      	uxth	r0, r3
 80056da:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <localMain+0x1050>)
 80056e0:	21aa      	movs	r1, #170	; 0xaa
 80056e2:	f7fc fe4f 	bl	8002384 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 80056e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056ea:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <localMain+0x1040>)
 80056ec:	fb82 1203 	smull	r1, r2, r2, r3
 80056f0:	441a      	add	r2, r3
 80056f2:	1152      	asrs	r2, r2, #5
 80056f4:	17db      	asrs	r3, r3, #31
 80056f6:	1ad4      	subs	r4, r2, r3
 80056f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80056fc:	4b18      	ldr	r3, [pc, #96]	; (8005760 <localMain+0x1040>)
 80056fe:	fb83 1302 	smull	r1, r3, r3, r2
 8005702:	4413      	add	r3, r2
 8005704:	1159      	asrs	r1, r3, #5
 8005706:	17d3      	asrs	r3, r2, #31
 8005708:	1ac9      	subs	r1, r1, r3
 800570a:	460b      	mov	r3, r1
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	1ad1      	subs	r1, r2, r3
 8005714:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005718:	460b      	mov	r3, r1
 800571a:	4622      	mov	r2, r4
 800571c:	4913      	ldr	r1, [pc, #76]	; (800576c <localMain+0x104c>)
 800571e:	f008 fc9b 	bl	800e058 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8005722:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005726:	3b13      	subs	r3, #19
 8005728:	b298      	uxth	r0, r3
 800572a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <localMain+0x1050>)
 8005730:	21aa      	movs	r1, #170	; 0xaa
 8005732:	f7fc fe27 	bl	8002384 <lcdPutStr>
}
 8005736:	bf00      	nop
 8005738:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	f3af 8000 	nop.w
 8005748:	40768000 	.word	0x40768000
 800574c:	08014808 	.word	0x08014808
 8005750:	08018a8c 	.word	0x08018a8c
 8005754:	404e0000 	.word	0x404e0000
 8005758:	40590000 	.word	0x40590000
 800575c:	08014828 	.word	0x08014828
 8005760:	88888889 	.word	0x88888889
 8005764:	08014848 	.word	0x08014848
 8005768:	b60b60b7 	.word	0xb60b60b7
 800576c:	08014864 	.word	0x08014864
 8005770:	08017b88 	.word	0x08017b88
 8005774:	54442d18 	.word	0x54442d18
 8005778:	400921fb 	.word	0x400921fb

0800577c <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prevPage+0x30>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <prevPage+0x1a>
		currentPage--;
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <prevPage+0x30>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <prevPage+0x30>)
 8005792:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8005794:	e005      	b.n	80057a2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <prevPage+0x34>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	b2da      	uxtb	r2, r3
 800579e:	4b03      	ldr	r3, [pc, #12]	; (80057ac <prevPage+0x30>)
 80057a0:	701a      	strb	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	200039f4 	.word	0x200039f4
 80057b0:	2000018b 	.word	0x2000018b

080057b4 <nextPage>:
void nextPage(void){
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <nextPage+0x34>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <nextPage+0x38>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	429a      	cmp	r2, r3
 80057c6:	da06      	bge.n	80057d6 <nextPage+0x22>
		currentPage++;
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <nextPage+0x34>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <nextPage+0x34>)
 80057d2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 80057d4:	e002      	b.n	80057dc <nextPage+0x28>
		currentPage=0;
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <nextPage+0x34>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	200039f4 	.word	0x200039f4
 80057ec:	2000018b 	.word	0x2000018b

080057f0 <showPage1>:

void showPage1(void){
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b092      	sub	sp, #72	; 0x48
 80057f4:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 80057f6:	2300      	movs	r3, #0
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	611a      	str	r2, [r3, #16]
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 800580e:	2300      	movs	r3, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	605a      	str	r2, [r3, #4]
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	615a      	str	r2, [r3, #20]
 8005822:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <showPage1+0x94>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	4b16      	ldr	r3, [pc, #88]	; (8005884 <showPage1+0x94>)
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	4619      	mov	r1, r3
 8005830:	4b14      	ldr	r3, [pc, #80]	; (8005884 <showPage1+0x94>)
 8005832:	789b      	ldrb	r3, [r3, #2]
 8005834:	4638      	mov	r0, r7
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	460b      	mov	r3, r1
 800583a:	4913      	ldr	r1, [pc, #76]	; (8005888 <showPage1+0x98>)
 800583c:	f008 fc0c 	bl	800e058 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8005840:	463a      	mov	r2, r7
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <showPage1+0x9c>)
 8005844:	210b      	movs	r1, #11
 8005846:	200e      	movs	r0, #14
 8005848:	f7fc fd9c 	bl	8002384 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 800584c:	2301      	movs	r3, #1
 800584e:	2227      	movs	r2, #39	; 0x27
 8005850:	2106      	movs	r1, #6
 8005852:	2001      	movs	r0, #1
 8005854:	f7fc fdc4 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8005858:	2301      	movs	r3, #1
 800585a:	2228      	movs	r2, #40	; 0x28
 800585c:	2105      	movs	r1, #5
 800585e:	2002      	movs	r0, #2
 8005860:	f7fc fdbe 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8005864:	2301      	movs	r3, #1
 8005866:	2228      	movs	r2, #40	; 0x28
 8005868:	2105      	movs	r1, #5
 800586a:	2003      	movs	r0, #3
 800586c:	f7fc fdb8 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8005870:	2301      	movs	r3, #1
 8005872:	2227      	movs	r2, #39	; 0x27
 8005874:	2106      	movs	r1, #6
 8005876:	2004      	movs	r0, #4
 8005878:	f7fc fdb2 	bl	80023e0 <lcdVLine>
}
 800587c:	bf00      	nop
 800587e:	3740      	adds	r7, #64	; 0x40
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200035d0 	.word	0x200035d0
 8005888:	08014948 	.word	0x08014948
 800588c:	0801e00c 	.word	0x0801e00c

08005890 <showPage2>:
void showPage2(void){
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005896:	2300      	movs	r3, #0
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	609a      	str	r2, [r3, #8]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	611a      	str	r2, [r3, #16]
 80058a8:	615a      	str	r2, [r3, #20]
 80058aa:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 80058ac:	463b      	mov	r3, r7
 80058ae:	4913      	ldr	r1, [pc, #76]	; (80058fc <showPage2+0x6c>)
 80058b0:	4618      	mov	r0, r3
 80058b2:	f008 fbd1 	bl	800e058 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 80058b6:	463a      	mov	r2, r7
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <showPage2+0x70>)
 80058ba:	2132      	movs	r1, #50	; 0x32
 80058bc:	200e      	movs	r0, #14
 80058be:	f7fc fd61 	bl	8002384 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80058c2:	2301      	movs	r3, #1
 80058c4:	224e      	movs	r2, #78	; 0x4e
 80058c6:	212d      	movs	r1, #45	; 0x2d
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fc fd89 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80058ce:	2301      	movs	r3, #1
 80058d0:	224f      	movs	r2, #79	; 0x4f
 80058d2:	212c      	movs	r1, #44	; 0x2c
 80058d4:	2002      	movs	r0, #2
 80058d6:	f7fc fd83 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80058da:	2301      	movs	r3, #1
 80058dc:	224f      	movs	r2, #79	; 0x4f
 80058de:	212c      	movs	r1, #44	; 0x2c
 80058e0:	2003      	movs	r0, #3
 80058e2:	f7fc fd7d 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80058e6:	2301      	movs	r3, #1
 80058e8:	224e      	movs	r2, #78	; 0x4e
 80058ea:	212d      	movs	r1, #45	; 0x2d
 80058ec:	2004      	movs	r0, #4
 80058ee:	f7fc fd77 	bl	80023e0 <lcdVLine>
}
 80058f2:	bf00      	nop
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08014958 	.word	0x08014958
 8005900:	0801e00c 	.word	0x0801e00c

08005904 <showPage3>:
void showPage3(void){
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800590a:	2300      	movs	r3, #0
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	615a      	str	r2, [r3, #20]
 800591e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8005920:	463b      	mov	r3, r7
 8005922:	4913      	ldr	r1, [pc, #76]	; (8005970 <showPage3+0x6c>)
 8005924:	4618      	mov	r0, r3
 8005926:	f008 fb97 	bl	800e058 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800592a:	463a      	mov	r2, r7
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <showPage3+0x70>)
 800592e:	2100      	movs	r1, #0
 8005930:	2000      	movs	r0, #0
 8005932:	f7fc fd27 	bl	8002384 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8005936:	2301      	movs	r3, #1
 8005938:	2275      	movs	r2, #117	; 0x75
 800593a:	2154      	movs	r1, #84	; 0x54
 800593c:	2001      	movs	r0, #1
 800593e:	f7fc fd4f 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8005942:	2301      	movs	r3, #1
 8005944:	2276      	movs	r2, #118	; 0x76
 8005946:	2153      	movs	r1, #83	; 0x53
 8005948:	2002      	movs	r0, #2
 800594a:	f7fc fd49 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 800594e:	2301      	movs	r3, #1
 8005950:	2276      	movs	r2, #118	; 0x76
 8005952:	2153      	movs	r1, #83	; 0x53
 8005954:	2003      	movs	r0, #3
 8005956:	f7fc fd43 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 800595a:	2301      	movs	r3, #1
 800595c:	2275      	movs	r2, #117	; 0x75
 800595e:	2154      	movs	r1, #84	; 0x54
 8005960:	2004      	movs	r0, #4
 8005962:	f7fc fd3d 	bl	80023e0 <lcdVLine>
}
 8005966:	bf00      	nop
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	0801495c 	.word	0x0801495c
 8005974:	0801e00c 	.word	0x0801e00c

08005978 <showPage4>:
void showPage4(void){
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800597e:	2300      	movs	r3, #0
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
 8005990:	615a      	str	r2, [r3, #20]
 8005992:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8005994:	463b      	mov	r3, r7
 8005996:	4913      	ldr	r1, [pc, #76]	; (80059e4 <showPage4+0x6c>)
 8005998:	4618      	mov	r0, r3
 800599a:	f008 fb5d 	bl	800e058 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800599e:	463a      	mov	r2, r7
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <showPage4+0x70>)
 80059a2:	2100      	movs	r1, #0
 80059a4:	2000      	movs	r0, #0
 80059a6:	f7fc fced 	bl	8002384 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80059aa:	2301      	movs	r3, #1
 80059ac:	229c      	movs	r2, #156	; 0x9c
 80059ae:	217b      	movs	r1, #123	; 0x7b
 80059b0:	2001      	movs	r0, #1
 80059b2:	f7fc fd15 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80059b6:	2301      	movs	r3, #1
 80059b8:	229d      	movs	r2, #157	; 0x9d
 80059ba:	217a      	movs	r1, #122	; 0x7a
 80059bc:	2002      	movs	r0, #2
 80059be:	f7fc fd0f 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80059c2:	2301      	movs	r3, #1
 80059c4:	229d      	movs	r2, #157	; 0x9d
 80059c6:	217a      	movs	r1, #122	; 0x7a
 80059c8:	2003      	movs	r0, #3
 80059ca:	f7fc fd09 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80059ce:	2301      	movs	r3, #1
 80059d0:	229c      	movs	r2, #156	; 0x9c
 80059d2:	217b      	movs	r1, #123	; 0x7b
 80059d4:	2004      	movs	r0, #4
 80059d6:	f7fc fd03 	bl	80023e0 <lcdVLine>
}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	08014968 	.word	0x08014968
 80059e8:	0801e00c 	.word	0x0801e00c

080059ec <showPage5>:
void showPage5(void){
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80059f2:	2300      	movs	r3, #0
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]
 8005a04:	615a      	str	r2, [r3, #20]
 8005a06:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8005a08:	463b      	mov	r3, r7
 8005a0a:	4925      	ldr	r1, [pc, #148]	; (8005aa0 <showPage5+0xb4>)
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f008 fb23 	bl	800e058 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8005a12:	463a      	mov	r2, r7
 8005a14:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <showPage5+0xb8>)
 8005a16:	2100      	movs	r1, #0
 8005a18:	200a      	movs	r0, #10
 8005a1a:	f7fc fcb3 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8005a1e:	463a      	mov	r2, r7
 8005a20:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <showPage5+0xbc>)
 8005a22:	210f      	movs	r1, #15
 8005a24:	200a      	movs	r0, #10
 8005a26:	f7fc fcad 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <showPage5+0xc0>)
 8005a2e:	2132      	movs	r1, #50	; 0x32
 8005a30:	200a      	movs	r0, #10
 8005a32:	f7fc fca7 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8005a36:	463a      	mov	r2, r7
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <showPage5+0xc4>)
 8005a3a:	213c      	movs	r1, #60	; 0x3c
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f7fc fca1 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 8005a42:	463a      	mov	r2, r7
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <showPage5+0xc8>)
 8005a46:	215a      	movs	r1, #90	; 0x5a
 8005a48:	200a      	movs	r0, #10
 8005a4a:	f7fc fc9b 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8005a4e:	463a      	mov	r2, r7
 8005a50:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <showPage5+0xcc>)
 8005a52:	2178      	movs	r1, #120	; 0x78
 8005a54:	200a      	movs	r0, #10
 8005a56:	f7fc fc95 	bl	8002384 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8005a5a:	463a      	mov	r2, r7
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <showPage5+0xd0>)
 8005a5e:	2196      	movs	r1, #150	; 0x96
 8005a60:	200a      	movs	r0, #10
 8005a62:	f7fc fc8f 	bl	8002384 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8005a66:	2301      	movs	r3, #1
 8005a68:	22c3      	movs	r2, #195	; 0xc3
 8005a6a:	21a2      	movs	r1, #162	; 0xa2
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	f7fc fcb7 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005a72:	2301      	movs	r3, #1
 8005a74:	22c4      	movs	r2, #196	; 0xc4
 8005a76:	21a1      	movs	r1, #161	; 0xa1
 8005a78:	2002      	movs	r0, #2
 8005a7a:	f7fc fcb1 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005a7e:	2301      	movs	r3, #1
 8005a80:	22c4      	movs	r2, #196	; 0xc4
 8005a82:	21a1      	movs	r1, #161	; 0xa1
 8005a84:	2003      	movs	r0, #3
 8005a86:	f7fc fcab 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	22c3      	movs	r2, #195	; 0xc3
 8005a8e:	21a2      	movs	r1, #162	; 0xa2
 8005a90:	2004      	movs	r0, #4
 8005a92:	f7fc fca5 	bl	80023e0 <lcdVLine>
}
 8005a96:	bf00      	nop
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08014974 	.word	0x08014974
 8005aa4:	0801befc 	.word	0x0801befc
 8005aa8:	0801ca44 	.word	0x0801ca44
 8005aac:	08019514 	.word	0x08019514
 8005ab0:	08019990 	.word	0x08019990
 8005ab4:	0801a9ec 	.word	0x0801a9ec
 8005ab8:	0801b474 	.word	0x0801b474
 8005abc:	0801e00c 	.word	0x0801e00c

08005ac0 <showPage6>:
void showPage6(void){
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	22ea      	movs	r2, #234	; 0xea
 8005aca:	21c9      	movs	r1, #201	; 0xc9
 8005acc:	2001      	movs	r0, #1
 8005ace:	f7fc fc87 	bl	80023e0 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	22eb      	movs	r2, #235	; 0xeb
 8005ad6:	21c8      	movs	r1, #200	; 0xc8
 8005ad8:	2002      	movs	r0, #2
 8005ada:	f7fc fc81 	bl	80023e0 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005ade:	2301      	movs	r3, #1
 8005ae0:	22eb      	movs	r2, #235	; 0xeb
 8005ae2:	21c8      	movs	r1, #200	; 0xc8
 8005ae4:	2003      	movs	r0, #3
 8005ae6:	f7fc fc7b 	bl	80023e0 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8005aea:	2301      	movs	r3, #1
 8005aec:	22ea      	movs	r2, #234	; 0xea
 8005aee:	21c9      	movs	r1, #201	; 0xc9
 8005af0:	2004      	movs	r0, #4
 8005af2:	f7fc fc75 	bl	80023e0 <lcdVLine>
		lcdRect(0,399,25,80,1);
 8005af6:	2301      	movs	r3, #1
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2350      	movs	r3, #80	; 0x50
 8005afc:	2219      	movs	r2, #25
 8005afe:	f240 118f 	movw	r1, #399	; 0x18f
 8005b02:	2000      	movs	r0, #0
 8005b04:	f7fd f9fe 	bl	8002f04 <lcdRect>
		lcdRect(0,399,120,180,1);
 8005b08:	2301      	movs	r3, #1
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	23b4      	movs	r3, #180	; 0xb4
 8005b0e:	2278      	movs	r2, #120	; 0x78
 8005b10:	f240 118f 	movw	r1, #399	; 0x18f
 8005b14:	2000      	movs	r0, #0
 8005b16:	f7fd f9f5 	bl	8002f04 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	2303      	movs	r3, #3
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2332      	movs	r3, #50	; 0x32
 8005b28:	220a      	movs	r2, #10
 8005b2a:	2132      	movs	r1, #50	; 0x32
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f7fd fa0e 	bl	8002f4e <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8005b32:	2301      	movs	r3, #1
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	2301      	movs	r3, #1
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2332      	movs	r3, #50	; 0x32
 8005b40:	220a      	movs	r2, #10
 8005b42:	2164      	movs	r1, #100	; 0x64
 8005b44:	203c      	movs	r0, #60	; 0x3c
 8005b46:	f7fd fa02 	bl	8002f4e <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	9302      	str	r3, [sp, #8]
 8005b4e:	2302      	movs	r3, #2
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2303      	movs	r3, #3
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2332      	movs	r3, #50	; 0x32
 8005b58:	220a      	movs	r2, #10
 8005b5a:	2196      	movs	r1, #150	; 0x96
 8005b5c:	206e      	movs	r0, #110	; 0x6e
 8005b5e:	f7fd f9f6 	bl	8002f4e <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8005b62:	2301      	movs	r3, #1
 8005b64:	9302      	str	r3, [sp, #8]
 8005b66:	2303      	movs	r3, #3
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	2332      	movs	r3, #50	; 0x32
 8005b70:	220a      	movs	r2, #10
 8005b72:	21c8      	movs	r1, #200	; 0xc8
 8005b74:	20a0      	movs	r0, #160	; 0xa0
 8005b76:	f7fd f9ea 	bl	8002f4e <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9302      	str	r3, [sp, #8]
 8005b7e:	2304      	movs	r3, #4
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	2303      	movs	r3, #3
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2332      	movs	r3, #50	; 0x32
 8005b88:	220a      	movs	r2, #10
 8005b8a:	21fa      	movs	r1, #250	; 0xfa
 8005b8c:	20d2      	movs	r0, #210	; 0xd2
 8005b8e:	f7fd f9de 	bl	8002f4e <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8005b92:	2301      	movs	r3, #1
 8005b94:	9302      	str	r3, [sp, #8]
 8005b96:	2305      	movs	r3, #5
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2332      	movs	r3, #50	; 0x32
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005ba6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005baa:	f7fd f9d0 	bl	8002f4e <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005bae:	2301      	movs	r3, #1
 8005bb0:	9302      	str	r3, [sp, #8]
 8005bb2:	2306      	movs	r3, #6
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2332      	movs	r3, #50	; 0x32
 8005bbc:	220a      	movs	r2, #10
 8005bbe:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005bc2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005bc6:	f7fd f9c2 	bl	8002f4e <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8005bca:	2301      	movs	r3, #1
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	2307      	movs	r3, #7
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2364      	movs	r3, #100	; 0x64
 8005bd8:	223c      	movs	r2, #60	; 0x3c
 8005bda:	2132      	movs	r1, #50	; 0x32
 8005bdc:	200a      	movs	r0, #10
 8005bde:	f7fd f9b6 	bl	8002f4e <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8005be2:	2301      	movs	r3, #1
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	2308      	movs	r3, #8
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	2303      	movs	r3, #3
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2364      	movs	r3, #100	; 0x64
 8005bf0:	223c      	movs	r2, #60	; 0x3c
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	203c      	movs	r0, #60	; 0x3c
 8005bf6:	f7fd f9aa 	bl	8002f4e <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	9302      	str	r3, [sp, #8]
 8005bfe:	2309      	movs	r3, #9
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	2303      	movs	r3, #3
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	2364      	movs	r3, #100	; 0x64
 8005c08:	223c      	movs	r2, #60	; 0x3c
 8005c0a:	2196      	movs	r1, #150	; 0x96
 8005c0c:	206e      	movs	r0, #110	; 0x6e
 8005c0e:	f7fd f99e 	bl	8002f4e <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8005c12:	2301      	movs	r3, #1
 8005c14:	9302      	str	r3, [sp, #8]
 8005c16:	230a      	movs	r3, #10
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	2364      	movs	r3, #100	; 0x64
 8005c20:	223c      	movs	r2, #60	; 0x3c
 8005c22:	21c8      	movs	r1, #200	; 0xc8
 8005c24:	20a0      	movs	r0, #160	; 0xa0
 8005c26:	f7fd f992 	bl	8002f4e <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	9302      	str	r3, [sp, #8]
 8005c2e:	230b      	movs	r3, #11
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	2303      	movs	r3, #3
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2364      	movs	r3, #100	; 0x64
 8005c38:	223c      	movs	r2, #60	; 0x3c
 8005c3a:	21fa      	movs	r1, #250	; 0xfa
 8005c3c:	20d2      	movs	r0, #210	; 0xd2
 8005c3e:	f7fd f986 	bl	8002f4e <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8005c42:	2301      	movs	r3, #1
 8005c44:	9302      	str	r3, [sp, #8]
 8005c46:	230c      	movs	r3, #12
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2364      	movs	r3, #100	; 0x64
 8005c50:	223c      	movs	r2, #60	; 0x3c
 8005c52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005c56:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005c5a:	f7fd f978 	bl	8002f4e <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8005c5e:	2301      	movs	r3, #1
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	230d      	movs	r3, #13
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	2303      	movs	r3, #3
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2364      	movs	r3, #100	; 0x64
 8005c6c:	223c      	movs	r2, #60	; 0x3c
 8005c6e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005c72:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005c76:	f7fd f96a 	bl	8002f4e <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	9302      	str	r3, [sp, #8]
 8005c7e:	230e      	movs	r3, #14
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	2303      	movs	r3, #3
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2396      	movs	r3, #150	; 0x96
 8005c88:	226e      	movs	r2, #110	; 0x6e
 8005c8a:	2132      	movs	r1, #50	; 0x32
 8005c8c:	200a      	movs	r0, #10
 8005c8e:	f7fd f95e 	bl	8002f4e <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8005c92:	2301      	movs	r3, #1
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	230f      	movs	r3, #15
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2396      	movs	r3, #150	; 0x96
 8005ca0:	226e      	movs	r2, #110	; 0x6e
 8005ca2:	2164      	movs	r1, #100	; 0x64
 8005ca4:	203c      	movs	r0, #60	; 0x3c
 8005ca6:	f7fd f952 	bl	8002f4e <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8005caa:	2301      	movs	r3, #1
 8005cac:	9302      	str	r3, [sp, #8]
 8005cae:	2310      	movs	r3, #16
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	2396      	movs	r3, #150	; 0x96
 8005cb8:	226e      	movs	r2, #110	; 0x6e
 8005cba:	2196      	movs	r1, #150	; 0x96
 8005cbc:	206e      	movs	r0, #110	; 0x6e
 8005cbe:	f7fd f946 	bl	8002f4e <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	9302      	str	r3, [sp, #8]
 8005cc6:	2311      	movs	r3, #17
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2303      	movs	r3, #3
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2396      	movs	r3, #150	; 0x96
 8005cd0:	226e      	movs	r2, #110	; 0x6e
 8005cd2:	21c8      	movs	r1, #200	; 0xc8
 8005cd4:	20a0      	movs	r0, #160	; 0xa0
 8005cd6:	f7fd f93a 	bl	8002f4e <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005cda:	2301      	movs	r3, #1
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	2312      	movs	r3, #18
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2396      	movs	r3, #150	; 0x96
 8005ce8:	226e      	movs	r2, #110	; 0x6e
 8005cea:	21fa      	movs	r1, #250	; 0xfa
 8005cec:	20d2      	movs	r0, #210	; 0xd2
 8005cee:	f7fd f92e 	bl	8002f4e <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	2313      	movs	r3, #19
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	2396      	movs	r3, #150	; 0x96
 8005d00:	226e      	movs	r2, #110	; 0x6e
 8005d02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005d06:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005d0a:	f7fd f920 	bl	8002f4e <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8005d0e:	2301      	movs	r3, #1
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	2314      	movs	r3, #20
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	2303      	movs	r3, #3
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2396      	movs	r3, #150	; 0x96
 8005d1c:	226e      	movs	r2, #110	; 0x6e
 8005d1e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005d22:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005d26:	f7fd f912 	bl	8002f4e <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	2301      	movs	r3, #1
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	23c8      	movs	r3, #200	; 0xc8
 8005d34:	22a0      	movs	r2, #160	; 0xa0
 8005d36:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005d3a:	200a      	movs	r0, #10
 8005d3c:	f7fd f907 	bl	8002f4e <lcdRect2>
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <showPage>:

void showPage(uint8_t pageNum){
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d821      	bhi.n	8005d9c <showPage+0x54>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <showPage+0x18>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d7f 	.word	0x08005d7f
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d8b 	.word	0x08005d8b
 8005d70:	08005d91 	.word	0x08005d91
 8005d74:	08005d97 	.word	0x08005d97
	case 0:
		showPage1();
 8005d78:	f7ff fd3a 	bl	80057f0 <showPage1>
		break;
 8005d7c:	e00e      	b.n	8005d9c <showPage+0x54>
	case 1:
		showPage2();
 8005d7e:	f7ff fd87 	bl	8005890 <showPage2>
		break;
 8005d82:	e00b      	b.n	8005d9c <showPage+0x54>
	case 2:
		showPage3();
 8005d84:	f7ff fdbe 	bl	8005904 <showPage3>
		break;
 8005d88:	e008      	b.n	8005d9c <showPage+0x54>
	case 3:
		showPage4();
 8005d8a:	f7ff fdf5 	bl	8005978 <showPage4>
		break;
 8005d8e:	e005      	b.n	8005d9c <showPage+0x54>
	case 4:
		showPage5();
 8005d90:	f7ff fe2c 	bl	80059ec <showPage5>
		break;
 8005d94:	e002      	b.n	8005d9c <showPage+0x54>
	case 5:
		showPage6();
 8005d96:	f7ff fe93 	bl	8005ac0 <showPage6>
		break;
 8005d9a:	bf00      	nop
	}
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <setDefaultClbcks+0x28>)
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <setDefaultClbcks+0x2c>)
 8005dac:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <setDefaultClbcks+0x30>)
 8005db0:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <setDefaultClbcks+0x34>)
 8005db2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <setDefaultClbcks+0x38>)
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <setDefaultClbcks+0x3c>)
 8005db8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <setDefaultClbcks+0x40>)
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <setDefaultClbcks+0x44>)
 8005dbe:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000568 	.word	0x20000568
 8005dd0:	08001ee9 	.word	0x08001ee9
 8005dd4:	200005b0 	.word	0x200005b0
 8005dd8:	08001ef9 	.word	0x08001ef9
 8005ddc:	2000061c 	.word	0x2000061c
 8005de0:	0800577d 	.word	0x0800577d
 8005de4:	200005d4 	.word	0x200005d4
 8005de8:	080057b5 	.word	0x080057b5

08005dec <settingsSetup>:


void settingsSetup(void){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005df0:	f7ff ffd8 	bl	8005da4 <setDefaultClbcks>
}
 8005df4:	bf00      	nop
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <settingsMain>:

void settingsMain(void){
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005dfe:	2300      	movs	r3, #0
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	615a      	str	r2, [r3, #20]
 8005e12:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <settingsMain+0x30>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff95 	bl	8005d48 <showPage>

}
 8005e1e:	bf00      	nop
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200039f4 	.word	0x200039f4

08005e2c <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
	stwStart();
 8005e30:	f7fd fc28 	bl	8003684 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <startStopwatch+0x18>)
 8005e36:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <startStopwatch+0x1c>)
 8005e38:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <startStopwatch+0x20>)
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <startStopwatch+0x24>)
 8005e3e:	611a      	str	r2, [r3, #16]
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000058c 	.word	0x2000058c
 8005e48:	08005e55 	.word	0x08005e55
 8005e4c:	200005f8 	.word	0x200005f8
 8005e50:	08005e95 	.word	0x08005e95

08005e54 <stopStopwatch>:
void stopStopwatch(){
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
	stwStop();
 8005e58:	f7fd fc38 	bl	80036cc <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <stopStopwatch+0x18>)
 8005e5e:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <stopStopwatch+0x1c>)
 8005e60:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <stopStopwatch+0x20>)
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <stopStopwatch+0x24>)
 8005e66:	611a      	str	r2, [r3, #16]
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000058c 	.word	0x2000058c
 8005e70:	08005e2d 	.word	0x08005e2d
 8005e74:	200005f8 	.word	0x200005f8
 8005e78:	08005e7d 	.word	0x08005e7d

08005e7c <resetStopwatch>:
void resetStopwatch(){
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
	stwClear();
 8005e80:	f7fd fc32 	bl	80036e8 <stwClear>
	stwT.clear();
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <resetStopwatch+0x14>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4798      	blx	r3
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000014c 	.word	0x2000014c

08005e94 <saveStopwatch>:
void saveStopwatch(){
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
	stwSave();
 8005e98:	f7fd fc34 	bl	8003704 <stwSave>
}
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <setDefaultClbcks+0x48>)
 8005ea6:	4a11      	ldr	r2, [pc, #68]	; (8005eec <setDefaultClbcks+0x4c>)
 8005ea8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <setDefaultClbcks+0x50>)
 8005eac:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <setDefaultClbcks+0x54>)
 8005eae:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <setDefaultClbcks+0x58>)
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <setDefaultClbcks+0x5c>)
 8005eb4:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <setDefaultClbcks+0x60>)
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <setDefaultClbcks+0x64>)
 8005ec6:	4a10      	ldr	r2, [pc, #64]	; (8005f08 <setDefaultClbcks+0x68>)
 8005ec8:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <setDefaultClbcks+0x6c>)
 8005ecc:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <setDefaultClbcks+0x70>)
 8005ece:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005ed0:	e005      	b.n	8005ede <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <setDefaultClbcks+0x64>)
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <setDefaultClbcks+0x74>)
 8005ed6:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <setDefaultClbcks+0x6c>)
 8005eda:	4a0f      	ldr	r2, [pc, #60]	; (8005f18 <setDefaultClbcks+0x78>)
 8005edc:	611a      	str	r2, [r3, #16]
}
 8005ede:	bf00      	nop
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	2000061c 	.word	0x2000061c
 8005eec:	08001f09 	.word	0x08001f09
 8005ef0:	20000568 	.word	0x20000568
 8005ef4:	08001ee9 	.word	0x08001ee9
 8005ef8:	200005b0 	.word	0x200005b0
 8005efc:	08001ef9 	.word	0x08001ef9
 8005f00:	200037bc 	.word	0x200037bc
 8005f04:	2000058c 	.word	0x2000058c
 8005f08:	08005e55 	.word	0x08005e55
 8005f0c:	200005f8 	.word	0x200005f8
 8005f10:	08005e95 	.word	0x08005e95
 8005f14:	08005e2d 	.word	0x08005e2d
 8005f18:	08005e7d 	.word	0x08005e7d

08005f1c <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <convertTicks+0x98>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	0993      	lsrs	r3, r2, #6
 8005f38:	491e      	ldr	r1, [pc, #120]	; (8005fb4 <convertTicks+0x98>)
 8005f3a:	fba1 1303 	umull	r1, r3, r1, r3
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	491d      	ldr	r1, [pc, #116]	; (8005fb8 <convertTicks+0x9c>)
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <convertTicks+0xa0>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <convertTicks+0xa0>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	09db      	lsrs	r3, r3, #7
 8005f5e:	f241 7170 	movw	r1, #6000	; 0x1770
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <convertTicks+0xa4>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <convertTicks+0xa4>)
 8005f78:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	2164      	movs	r1, #100	; 0x64
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	7b3a      	ldrb	r2, [r7, #12]
 8005f92:	f362 0307 	bfi	r3, r2, #0, #8
 8005f96:	7b7a      	ldrb	r2, [r7, #13]
 8005f98:	f362 230f 	bfi	r3, r2, #8, #8
 8005f9c:	7bba      	ldrb	r2, [r7, #14]
 8005f9e:	f362 4317 	bfi	r3, r2, #16, #8
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	002e9a77 	.word	0x002e9a77
 8005fb8:	00057e40 	.word	0x00057e40
 8005fbc:	057619f1 	.word	0x057619f1
 8005fc0:	51eb851f 	.word	0x51eb851f

08005fc4 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8005fce:	793b      	ldrb	r3, [r7, #4]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	797b      	ldrb	r3, [r7, #5]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	79bb      	ldrb	r3, [r7, #6]
 8005fd8:	79fa      	ldrb	r2, [r7, #7]
 8005fda:	9201      	str	r2, [sp, #4]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <stwString+0x30>)
 8005fe4:	6838      	ldr	r0, [r7, #0]
 8005fe6:	f008 f837 	bl	800e058 <siprintf>
	return str;
 8005fea:	683b      	ldr	r3, [r7, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08014a3c 	.word	0x08014a3c

08005ff8 <updateStopwatch>:
void updateStopwatch(void){
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	; (80060a8 <updateStopwatch+0xb0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006004:	4a29      	ldr	r2, [pc, #164]	; (80060ac <updateStopwatch+0xb4>)
 8006006:	fb82 1203 	smull	r1, r2, r2, r3
 800600a:	1452      	asrs	r2, r2, #17
 800600c:	17db      	asrs	r3, r3, #31
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <updateStopwatch+0xb8>)
 8006014:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <updateStopwatch+0xb0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800601e:	461a      	mov	r2, r3
 8006020:	4b22      	ldr	r3, [pc, #136]	; (80060ac <updateStopwatch+0xb4>)
 8006022:	fb83 1302 	smull	r1, r3, r3, r2
 8006026:	1459      	asrs	r1, r3, #17
 8006028:	17d3      	asrs	r3, r2, #31
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	4921      	ldr	r1, [pc, #132]	; (80060b4 <updateStopwatch+0xbc>)
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	4a20      	ldr	r2, [pc, #128]	; (80060b8 <updateStopwatch+0xc0>)
 8006036:	fb82 1203 	smull	r1, r2, r2, r3
 800603a:	11d2      	asrs	r2, r2, #7
 800603c:	17db      	asrs	r3, r3, #31
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <updateStopwatch+0xb8>)
 8006044:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <updateStopwatch+0xb0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800604e:	461a      	mov	r2, r3
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <updateStopwatch+0xc0>)
 8006052:	fb83 1302 	smull	r1, r3, r3, r2
 8006056:	11d9      	asrs	r1, r3, #7
 8006058:	17d3      	asrs	r3, r2, #31
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	f241 7170 	movw	r1, #6000	; 0x1770
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <updateStopwatch+0xc4>)
 8006068:	fb82 1203 	smull	r1, r2, r2, r3
 800606c:	1152      	asrs	r2, r2, #5
 800606e:	17db      	asrs	r3, r3, #31
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	b2da      	uxtb	r2, r3
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <updateStopwatch+0xb8>)
 8006076:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <updateStopwatch+0xb0>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006080:	461a      	mov	r2, r3
 8006082:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <updateStopwatch+0xc4>)
 8006084:	fb83 1302 	smull	r1, r3, r3, r2
 8006088:	1159      	asrs	r1, r3, #5
 800608a:	17d3      	asrs	r3, r2, #31
 800608c:	1acb      	subs	r3, r1, r3
 800608e:	2164      	movs	r1, #100	; 0x64
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	b2da      	uxtb	r2, r3
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <updateStopwatch+0xb8>)
 800609a:	70da      	strb	r2, [r3, #3]
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	200037bc 	.word	0x200037bc
 80060ac:	5d34edef 	.word	0x5d34edef
 80060b0:	200039f8 	.word	0x200039f8
 80060b4:	00057e40 	.word	0x00057e40
 80060b8:	057619f1 	.word	0x057619f1
 80060bc:	51eb851f 	.word	0x51eb851f

080060c0 <stwSetup>:

void stwSetup(void){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80060c4:	f7ff feec 	bl	8005ea0 <setDefaultClbcks>
}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}

080060cc <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b091      	sub	sp, #68	; 0x44
 80060d0:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80060d2:	2300      	movs	r3, #0
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	2300      	movs	r3, #0
 80060d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 80060da:	4b7c      	ldr	r3, [pc, #496]	; (80062cc <stwMain+0x200>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	4b7a      	ldr	r3, [pc, #488]	; (80062cc <stwMain+0x200>)
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	f107 0020 	add.w	r0, r7, #32
 80060e8:	4979      	ldr	r1, [pc, #484]	; (80062d0 <stwMain+0x204>)
 80060ea:	f007 ffb5 	bl	800e058 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80060ee:	2314      	movs	r3, #20
 80060f0:	b29c      	uxth	r4, r3
 80060f2:	f107 0320 	add.w	r3, r7, #32
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa f87a 	bl	80001f0 <strlen>
 80060fc:	4603      	mov	r3, r0
 80060fe:	b29b      	uxth	r3, r3
 8006100:	fb14 f303 	smulbb	r3, r4, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800610a:	b298      	uxth	r0, r3
 800610c:	f107 0220 	add.w	r2, r7, #32
 8006110:	4b70      	ldr	r3, [pc, #448]	; (80062d4 <stwMain+0x208>)
 8006112:	210a      	movs	r1, #10
 8006114:	f7fc f936 	bl	8002384 <lcdPutStr>

	updateStopwatch();
 8006118:	f7ff ff6e 	bl	8005ff8 <updateStopwatch>
	char tempStr2[30] = {0};
 800611c:	2300      	movs	r3, #0
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	605a      	str	r2, [r3, #4]
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	60da      	str	r2, [r3, #12]
 800612c:	611a      	str	r2, [r3, #16]
 800612e:	615a      	str	r2, [r3, #20]
 8006130:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8006132:	4b69      	ldr	r3, [pc, #420]	; (80062d8 <stwMain+0x20c>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 800613a:	4b67      	ldr	r3, [pc, #412]	; (80062d8 <stwMain+0x20c>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	463b      	mov	r3, r7
 8006142:	4966      	ldr	r1, [pc, #408]	; (80062dc <stwMain+0x210>)
 8006144:	4618      	mov	r0, r3
 8006146:	f007 ff87 	bl	800e058 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 800614a:	463a      	mov	r2, r7
 800614c:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <stwMain+0x208>)
 800614e:	215f      	movs	r1, #95	; 0x5f
 8006150:	2014      	movs	r0, #20
 8006152:	f7fc f917 	bl	8002384 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8006156:	4b60      	ldr	r3, [pc, #384]	; (80062d8 <stwMain+0x20c>)
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	461a      	mov	r2, r3
 800615c:	4b5e      	ldr	r3, [pc, #376]	; (80062d8 <stwMain+0x20c>)
 800615e:	789b      	ldrb	r3, [r3, #2]
 8006160:	4619      	mov	r1, r3
 8006162:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <stwMain+0x20c>)
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	4638      	mov	r0, r7
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	460b      	mov	r3, r1
 800616c:	495c      	ldr	r1, [pc, #368]	; (80062e0 <stwMain+0x214>)
 800616e:	f007 ff73 	bl	800e058 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8006172:	2322      	movs	r3, #34	; 0x22
 8006174:	b29c      	uxth	r4, r3
 8006176:	463b      	mov	r3, r7
 8006178:	4618      	mov	r0, r3
 800617a:	f7fa f839 	bl	80001f0 <strlen>
 800617e:	4603      	mov	r3, r0
 8006180:	b29b      	uxth	r3, r3
 8006182:	fb14 f303 	smulbb	r3, r4, r3
 8006186:	b29b      	uxth	r3, r3
 8006188:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 800618c:	b298      	uxth	r0, r3
 800618e:	463a      	mov	r2, r7
 8006190:	4b54      	ldr	r3, [pc, #336]	; (80062e4 <stwMain+0x218>)
 8006192:	214c      	movs	r1, #76	; 0x4c
 8006194:	f7fc f8f6 	bl	8002384 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800619e:	e08b      	b.n	80062b8 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 80061a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061a4:	4a50      	ldr	r2, [pc, #320]	; (80062e8 <stwMain+0x21c>)
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d07f      	beq.n	80062ae <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 80061ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	463b      	mov	r3, r7
 80061b6:	494d      	ldr	r1, [pc, #308]	; (80062ec <stwMain+0x220>)
 80061b8:	4618      	mov	r0, r3
 80061ba:	f007 ff4d 	bl	800e058 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 80061be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	3b7e      	subs	r3, #126	; 0x7e
 80061c8:	b2d9      	uxtb	r1, r3
 80061ca:	463a      	mov	r2, r7
 80061cc:	4b48      	ldr	r3, [pc, #288]	; (80062f0 <stwMain+0x224>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7fc f8d8 	bl	8002384 <lcdPutStr>
			if(i>0){
 80061d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d022      	beq.n	8006222 <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 80061dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	3b7e      	subs	r3, #126	; 0x7e
 80061e6:	b2dc      	uxtb	r4, r3
 80061e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061ec:	4a3e      	ldr	r2, [pc, #248]	; (80062e8 <stwMain+0x21c>)
 80061ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061f6:	3b01      	subs	r3, #1
 80061f8:	493b      	ldr	r1, [pc, #236]	; (80062e8 <stwMain+0x21c>)
 80061fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fe8b 	bl	8005f1c <convertTicks>
 8006206:	4603      	mov	r3, r0
 8006208:	62bb      	str	r3, [r7, #40]	; 0x28
 800620a:	463b      	mov	r3, r7
 800620c:	4619      	mov	r1, r3
 800620e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006210:	f7ff fed8 	bl	8005fc4 <stwString>
 8006214:	4602      	mov	r2, r0
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <stwMain+0x224>)
 8006218:	4621      	mov	r1, r4
 800621a:	2037      	movs	r0, #55	; 0x37
 800621c:	f7fc f8b2 	bl	8002384 <lcdPutStr>
 8006220:	e01a      	b.n	8006258 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	b2db      	uxtb	r3, r3
 800622a:	3b7e      	subs	r3, #126	; 0x7e
 800622c:	b2dc      	uxtb	r4, r3
 800622e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006232:	4a2d      	ldr	r2, [pc, #180]	; (80062e8 <stwMain+0x21c>)
 8006234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fe6f 	bl	8005f1c <convertTicks>
 800623e:	4603      	mov	r3, r0
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	463b      	mov	r3, r7
 8006244:	4619      	mov	r1, r3
 8006246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006248:	f7ff febc 	bl	8005fc4 <stwString>
 800624c:	4602      	mov	r2, r0
 800624e:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <stwMain+0x224>)
 8006250:	4621      	mov	r1, r4
 8006252:	2037      	movs	r0, #55	; 0x37
 8006254:	f7fc f896 	bl	8002384 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8006258:	463b      	mov	r3, r7
 800625a:	4926      	ldr	r1, [pc, #152]	; (80062f4 <stwMain+0x228>)
 800625c:	4618      	mov	r0, r3
 800625e:	f007 fefb 	bl	800e058 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8006262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3b7e      	subs	r3, #126	; 0x7e
 800626c:	b2d9      	uxtb	r1, r3
 800626e:	463a      	mov	r2, r7
 8006270:	4b1f      	ldr	r3, [pc, #124]	; (80062f0 <stwMain+0x224>)
 8006272:	20a5      	movs	r0, #165	; 0xa5
 8006274:	f7fc f886 	bl	8002384 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	b2db      	uxtb	r3, r3
 8006280:	3b7e      	subs	r3, #126	; 0x7e
 8006282:	b2dc      	uxtb	r4, r3
 8006284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006288:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <stwMain+0x21c>)
 800628a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fe44 	bl	8005f1c <convertTicks>
 8006294:	4603      	mov	r3, r0
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
 8006298:	463b      	mov	r3, r7
 800629a:	4619      	mov	r1, r3
 800629c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629e:	f7ff fe91 	bl	8005fc4 <stwString>
 80062a2:	4602      	mov	r2, r0
 80062a4:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <stwMain+0x224>)
 80062a6:	4621      	mov	r1, r4
 80062a8:	20e1      	movs	r0, #225	; 0xe1
 80062aa:	f7fc f86b 	bl	8002384 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80062ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b2:	3301      	adds	r3, #1
 80062b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062bc:	2b06      	cmp	r3, #6
 80062be:	f67f af6f 	bls.w	80061a0 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	373c      	adds	r7, #60	; 0x3c
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd90      	pop	{r4, r7, pc}
 80062cc:	200035d0 	.word	0x200035d0
 80062d0:	08014a50 	.word	0x08014a50
 80062d4:	080208fc 	.word	0x080208fc
 80062d8:	200039f8 	.word	0x200039f8
 80062dc:	08014a5c 	.word	0x08014a5c
 80062e0:	08014a64 	.word	0x08014a64
 80062e4:	08022764 	.word	0x08022764
 80062e8:	2000014c 	.word	0x2000014c
 80062ec:	08014a74 	.word	0x08014a74
 80062f0:	0801fe74 	.word	0x0801fe74
 80062f4:	08014a7c 	.word	0x08014a7c

080062f8 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <setDefaultClbcks+0x20>)
 80062fe:	4a07      	ldr	r2, [pc, #28]	; (800631c <setDefaultClbcks+0x24>)
 8006300:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <setDefaultClbcks+0x28>)
 8006304:	4a07      	ldr	r2, [pc, #28]	; (8006324 <setDefaultClbcks+0x2c>)
 8006306:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <setDefaultClbcks+0x30>)
 800630a:	4a08      	ldr	r2, [pc, #32]	; (800632c <setDefaultClbcks+0x34>)
 800630c:	611a      	str	r2, [r3, #16]
}
 800630e:	bf00      	nop
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	200005f8 	.word	0x200005f8
 800631c:	0800442d 	.word	0x0800442d
 8006320:	20000568 	.word	0x20000568
 8006324:	08001ee9 	.word	0x08001ee9
 8006328:	200005b0 	.word	0x200005b0
 800632c:	08001ef9 	.word	0x08001ef9

08006330 <setTimeAction>:

static void setTimeAction(void){
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8006334:	4802      	ldr	r0, [pc, #8]	; (8006340 <setTimeAction+0x10>)
 8006336:	f7fb fdf3 	bl	8001f20 <guiApplyView>
}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000290 	.word	0x20000290

08006344 <setDateAction>:
static void setDateAction(void){
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8006348:	4802      	ldr	r0, [pc, #8]	; (8006354 <setDateAction+0x10>)
 800634a:	f7fb fde9 	bl	8001f20 <guiApplyView>
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000025c 	.word	0x2000025c

08006358 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800635c:	f7ff ffcc 	bl	80062f8 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8006360:	4802      	ldr	r0, [pc, #8]	; (800636c <faceSetup+0x14>)
 8006362:	f7fd ffdd 	bl	8004320 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8006366:	bf00      	nop
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	080062f9 	.word	0x080062f9

08006370 <faceMain>:

void faceMain(void){
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b0b1      	sub	sp, #196	; 0xc4
 8006374:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800637c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	611a      	str	r2, [r3, #16]
 800638c:	615a      	str	r2, [r3, #20]
 800638e:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8006390:	4b83      	ldr	r3, [pc, #524]	; (80065a0 <faceMain+0x230>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa f8f1 	bl	800057c <__aeabi_f2d>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80063a2:	4980      	ldr	r1, [pc, #512]	; (80065a4 <faceMain+0x234>)
 80063a4:	f007 fe58 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 80063a8:	2314      	movs	r3, #20
 80063aa:	b29c      	uxth	r4, r3
 80063ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7f9 ff1d 	bl	80001f0 <strlen>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f1c3 030d 	rsb	r3, r3, #13
 80063bc:	b29b      	uxth	r3, r3
 80063be:	fb14 f303 	smulbb	r3, r4, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3323      	adds	r3, #35	; 0x23
 80063c6:	b298      	uxth	r0, r3
 80063c8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80063cc:	4b76      	ldr	r3, [pc, #472]	; (80065a8 <faceMain+0x238>)
 80063ce:	210e      	movs	r1, #14
 80063d0:	f7fb ffd8 	bl	8002384 <lcdPutStr>
	char baroStr[30] = {0};
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	609a      	str	r2, [r3, #8]
 80063e6:	60da      	str	r2, [r3, #12]
 80063e8:	611a      	str	r2, [r3, #16]
 80063ea:	615a      	str	r2, [r3, #20]
 80063ec:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <faceMain+0x230>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80065ac <faceMain+0x23c>
 80063fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006402:	ee16 0a90 	vmov	r0, s13
 8006406:	f7fa f8b9 	bl	800057c <__aeabi_f2d>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006412:	4967      	ldr	r1, [pc, #412]	; (80065b0 <faceMain+0x240>)
 8006414:	f007 fe20 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8006418:	2314      	movs	r3, #20
 800641a:	b29c      	uxth	r4, r3
 800641c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006420:	4618      	mov	r0, r3
 8006422:	f7f9 fee5 	bl	80001f0 <strlen>
 8006426:	4603      	mov	r3, r0
 8006428:	f1c3 030d 	rsb	r3, r3, #13
 800642c:	b29b      	uxth	r3, r3
 800642e:	fb14 f303 	smulbb	r3, r4, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	3323      	adds	r3, #35	; 0x23
 8006436:	b298      	uxth	r0, r3
 8006438:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800643c:	4b5a      	ldr	r3, [pc, #360]	; (80065a8 <faceMain+0x238>)
 800643e:	212a      	movs	r1, #42	; 0x2a
 8006440:	f7fb ffa0 	bl	8002384 <lcdPutStr>

	char fracStr[30] = {0};
 8006444:	2300      	movs	r3, #0
 8006446:	663b      	str	r3, [r7, #96]	; 0x60
 8006448:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	611a      	str	r2, [r3, #16]
 8006458:	615a      	str	r2, [r3, #20]
 800645a:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 800645c:	2300      	movs	r3, #0
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
 8006460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	611a      	str	r2, [r3, #16]
 8006470:	615a      	str	r2, [r3, #20]
 8006472:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8006474:	2300      	movs	r3, #0
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	609a      	str	r2, [r3, #8]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	611a      	str	r2, [r3, #16]
 8006488:	615a      	str	r2, [r3, #20]
 800648a:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 800648c:	4b49      	ldr	r3, [pc, #292]	; (80065b4 <faceMain+0x244>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006496:	4948      	ldr	r1, [pc, #288]	; (80065b8 <faceMain+0x248>)
 8006498:	4618      	mov	r0, r3
 800649a:	f007 fddd 	bl	800e058 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800649e:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <faceMain+0x244>)
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f107 0320 	add.w	r3, r7, #32
 80064a8:	4943      	ldr	r1, [pc, #268]	; (80065b8 <faceMain+0x248>)
 80064aa:	4618      	mov	r0, r3
 80064ac:	f007 fdd4 	bl	800e058 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80064b0:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <faceMain+0x244>)
 80064b2:	789b      	ldrb	r3, [r3, #2]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80064ba:	493f      	ldr	r1, [pc, #252]	; (80065b8 <faceMain+0x248>)
 80064bc:	4618      	mov	r0, r3
 80064be:	f007 fdcb 	bl	800e058 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 80064c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <faceMain+0x24c>)
 80064c8:	214c      	movs	r1, #76	; 0x4c
 80064ca:	2014      	movs	r0, #20
 80064cc:	f7fb ff5a 	bl	8002384 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 80064d0:	f107 0220 	add.w	r2, r7, #32
 80064d4:	4b39      	ldr	r3, [pc, #228]	; (80065bc <faceMain+0x24c>)
 80064d6:	214c      	movs	r1, #76	; 0x4c
 80064d8:	20aa      	movs	r0, #170	; 0xaa
 80064da:	f7fb ff53 	bl	8002384 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 80064de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <faceMain+0x250>)
 80064e4:	214c      	movs	r1, #76	; 0x4c
 80064e6:	f240 103b 	movw	r0, #315	; 0x13b
 80064ea:	f7fb ff4b 	bl	8002384 <lcdPutStr>

	char buffString[30] = {0};
 80064ee:	2300      	movs	r3, #0
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	615a      	str	r2, [r3, #20]
 8006502:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006504:	463b      	mov	r3, r7
 8006506:	492f      	ldr	r1, [pc, #188]	; (80065c4 <faceMain+0x254>)
 8006508:	4618      	mov	r0, r3
 800650a:	f007 fda5 	bl	800e058 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <faceMain+0x258>)
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	461a      	mov	r2, r3
 8006514:	4b2d      	ldr	r3, [pc, #180]	; (80065cc <faceMain+0x25c>)
 8006516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <faceMain+0x258>)
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006522:	4638      	mov	r0, r7
 8006524:	492a      	ldr	r1, [pc, #168]	; (80065d0 <faceMain+0x260>)
 8006526:	f007 fd97 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800652a:	2314      	movs	r3, #20
 800652c:	b29c      	uxth	r4, r3
 800652e:	463b      	mov	r3, r7
 8006530:	4618      	mov	r0, r3
 8006532:	f7f9 fe5d 	bl	80001f0 <strlen>
 8006536:	4603      	mov	r3, r0
 8006538:	f1c3 030d 	rsb	r3, r3, #13
 800653c:	b29b      	uxth	r3, r3
 800653e:	fb14 f303 	smulbb	r3, r4, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	3323      	adds	r3, #35	; 0x23
 8006546:	b298      	uxth	r0, r3
 8006548:	463a      	mov	r2, r7
 800654a:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <faceMain+0x238>)
 800654c:	21ae      	movs	r1, #174	; 0xae
 800654e:	f7fb ff19 	bl	8002384 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <faceMain+0x258>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <faceMain+0x264>)
 800655a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <faceMain+0x258>)
 8006560:	789b      	ldrb	r3, [r3, #2]
 8006562:	4638      	mov	r0, r7
 8006564:	491a      	ldr	r1, [pc, #104]	; (80065d0 <faceMain+0x260>)
 8006566:	f007 fd77 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800656a:	2314      	movs	r3, #20
 800656c:	b29c      	uxth	r4, r3
 800656e:	463b      	mov	r3, r7
 8006570:	4618      	mov	r0, r3
 8006572:	f7f9 fe3d 	bl	80001f0 <strlen>
 8006576:	4603      	mov	r3, r0
 8006578:	f1c3 030d 	rsb	r3, r3, #13
 800657c:	b29b      	uxth	r3, r3
 800657e:	fb14 f303 	smulbb	r3, r4, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	3323      	adds	r3, #35	; 0x23
 8006586:	b298      	uxth	r0, r3
 8006588:	463a      	mov	r2, r7
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <faceMain+0x238>)
 800658c:	21ca      	movs	r1, #202	; 0xca
 800658e:	f7fb fef9 	bl	8002384 <lcdPutStr>

	enableCntxMenu();
 8006592:	f7fd ff67 	bl	8004464 <enableCntxMenu>
}
 8006596:	bf00      	nop
 8006598:	37c4      	adds	r7, #196	; 0xc4
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000558 	.word	0x20000558
 80065a4:	08014b3c 	.word	0x08014b3c
 80065a8:	08027dac 	.word	0x08027dac
 80065ac:	42c80000 	.word	0x42c80000
 80065b0:	08014b44 	.word	0x08014b44
 80065b4:	200035d0 	.word	0x200035d0
 80065b8:	08014b50 	.word	0x08014b50
 80065bc:	0802f25c 	.word	0x0802f25c
 80065c0:	08029c14 	.word	0x08029c14
 80065c4:	08014b58 	.word	0x08014b58
 80065c8:	200035e4 	.word	0x200035e4
 80065cc:	200001ac 	.word	0x200001ac
 80065d0:	08014b68 	.word	0x08014b68
 80065d4:	2000018c 	.word	0x2000018c

080065d8 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <setDefaultClbcks+0x34>)
 80065de:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <setDefaultClbcks+0x38>)
 80065e0:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <setDefaultClbcks+0x3c>)
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <setDefaultClbcks+0x40>)
 80065e6:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <setDefaultClbcks+0x44>)
 80065ea:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <setDefaultClbcks+0x48>)
 80065ec:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <setDefaultClbcks+0x4c>)
 80065f0:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <setDefaultClbcks+0x50>)
 80065f2:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <setDefaultClbcks+0x54>)
 80065f6:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <setDefaultClbcks+0x58>)
 80065f8:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 80065fa:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <setDefaultClbcks+0x5c>)
 80065fc:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <setDefaultClbcks+0x60>)
 80065fe:	611a      	str	r2, [r3, #16]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	2000061c 	.word	0x2000061c
 8006610:	08006949 	.word	0x08006949
 8006614:	200005f8 	.word	0x200005f8
 8006618:	08006809 	.word	0x08006809
 800661c:	200005d4 	.word	0x200005d4
 8006620:	08006955 	.word	0x08006955
 8006624:	20000568 	.word	0x20000568
 8006628:	080068c1 	.word	0x080068c1
 800662c:	2000058c 	.word	0x2000058c
 8006630:	080067d9 	.word	0x080067d9
 8006634:	200005b0 	.word	0x200005b0
 8006638:	08006839 	.word	0x08006839

0800663c <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006640:	f7ff ffca 	bl	80065d8 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <dateInputSetup+0x24>)
 8006646:	789a      	ldrb	r2, [r3, #2]
 8006648:	4b06      	ldr	r3, [pc, #24]	; (8006664 <dateInputSetup+0x28>)
 800664a:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <dateInputSetup+0x24>)
 800664e:	785a      	ldrb	r2, [r3, #1]
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <dateInputSetup+0x28>)
 8006652:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8006654:	4b02      	ldr	r3, [pc, #8]	; (8006660 <dateInputSetup+0x24>)
 8006656:	78da      	ldrb	r2, [r3, #3]
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <dateInputSetup+0x28>)
 800665a:	709a      	strb	r2, [r3, #2]
}
 800665c:	bf00      	nop
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200035e4 	.word	0x200035e4
 8006664:	20003a00 	.word	0x20003a00

08006668 <dateInputMain>:

void dateInputMain(void){
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 800666e:	2300      	movs	r3, #0
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	611a      	str	r2, [r3, #16]
 8006680:	615a      	str	r2, [r3, #20]
 8006682:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006684:	463b      	mov	r3, r7
 8006686:	494a      	ldr	r1, [pc, #296]	; (80067b0 <dateInputMain+0x148>)
 8006688:	4618      	mov	r0, r3
 800668a:	f007 fce5 	bl	800e058 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 800668e:	4b49      	ldr	r3, [pc, #292]	; (80067b4 <dateInputMain+0x14c>)
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	461a      	mov	r2, r3
 8006694:	4b48      	ldr	r3, [pc, #288]	; (80067b8 <dateInputMain+0x150>)
 8006696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800669a:	4b46      	ldr	r3, [pc, #280]	; (80067b4 <dateInputMain+0x14c>)
 800669c:	789b      	ldrb	r3, [r3, #2]
 800669e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80066a2:	4638      	mov	r0, r7
 80066a4:	4945      	ldr	r1, [pc, #276]	; (80067bc <dateInputMain+0x154>)
 80066a6:	f007 fcd7 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80066aa:	2314      	movs	r3, #20
 80066ac:	b29c      	uxth	r4, r3
 80066ae:	463b      	mov	r3, r7
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7f9 fd9d 	bl	80001f0 <strlen>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f1c3 030d 	rsb	r3, r3, #13
 80066bc:	b29b      	uxth	r3, r3
 80066be:	fb14 f303 	smulbb	r3, r4, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3323      	adds	r3, #35	; 0x23
 80066c6:	b298      	uxth	r0, r3
 80066c8:	463a      	mov	r2, r7
 80066ca:	4b3d      	ldr	r3, [pc, #244]	; (80067c0 <dateInputMain+0x158>)
 80066cc:	21ae      	movs	r1, #174	; 0xae
 80066ce:	f7fb fe59 	bl	8002384 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 80066d2:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <dateInputMain+0x14c>)
 80066d4:	7818      	ldrb	r0, [r3, #0]
 80066d6:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <dateInputMain+0x14c>)
 80066d8:	7859      	ldrb	r1, [r3, #1]
 80066da:	4b36      	ldr	r3, [pc, #216]	; (80067b4 <dateInputMain+0x14c>)
 80066dc:	789b      	ldrb	r3, [r3, #2]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	f000 fcb6 	bl	8007058 <zellerCongruence>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	4b34      	ldr	r3, [pc, #208]	; (80067c4 <dateInputMain+0x15c>)
 80066f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <dateInputMain+0x14c>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4638      	mov	r0, r7
 80066fc:	492f      	ldr	r1, [pc, #188]	; (80067bc <dateInputMain+0x154>)
 80066fe:	f007 fcab 	bl	800e058 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006702:	2314      	movs	r3, #20
 8006704:	b29c      	uxth	r4, r3
 8006706:	463b      	mov	r3, r7
 8006708:	4618      	mov	r0, r3
 800670a:	f7f9 fd71 	bl	80001f0 <strlen>
 800670e:	4603      	mov	r3, r0
 8006710:	f1c3 030d 	rsb	r3, r3, #13
 8006714:	b29b      	uxth	r3, r3
 8006716:	fb14 f303 	smulbb	r3, r4, r3
 800671a:	b29b      	uxth	r3, r3
 800671c:	3323      	adds	r3, #35	; 0x23
 800671e:	b298      	uxth	r0, r3
 8006720:	463a      	mov	r2, r7
 8006722:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <dateInputMain+0x158>)
 8006724:	21ca      	movs	r1, #202	; 0xca
 8006726:	f7fb fe2d 	bl	8002384 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <dateInputMain+0x160>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	4b26      	ldr	r3, [pc, #152]	; (80067cc <dateInputMain+0x164>)
 8006732:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006736:	4618      	mov	r0, r3
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <dateInputMain+0x160>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	4b23      	ldr	r3, [pc, #140]	; (80067cc <dateInputMain+0x164>)
 8006740:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006744:	461a      	mov	r2, r3
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <dateInputMain+0x160>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	4619      	mov	r1, r3
 800674c:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <dateInputMain+0x168>)
 800674e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006752:	18d1      	adds	r1, r2, r3
 8006754:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <dateInputMain+0x160>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <dateInputMain+0x16c>)
 800675c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006760:	461a      	mov	r2, r3
 8006762:	2301      	movs	r3, #1
 8006764:	f7fc fa78 	bl	8002c58 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <dateInputMain+0x160>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <dateInputMain+0x164>)
 8006770:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006774:	4618      	mov	r0, r3
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <dateInputMain+0x160>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <dateInputMain+0x164>)
 800677e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006782:	461a      	mov	r2, r3
 8006784:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <dateInputMain+0x160>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <dateInputMain+0x168>)
 800678c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006790:	18d1      	adds	r1, r2, r3
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <dateInputMain+0x160>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <dateInputMain+0x16c>)
 800679a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2301      	movs	r3, #1
 80067a2:	f7fc fa59 	bl	8002c58 <lcdHLine>
}
 80067a6:	bf00      	nop
 80067a8:	3724      	adds	r7, #36	; 0x24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd90      	pop	{r4, r7, pc}
 80067ae:	bf00      	nop
 80067b0:	08014c28 	.word	0x08014c28
 80067b4:	20003a00 	.word	0x20003a00
 80067b8:	20000210 	.word	0x20000210
 80067bc:	08014c38 	.word	0x08014c38
 80067c0:	080311e4 	.word	0x080311e4
 80067c4:	200001f0 	.word	0x200001f0
 80067c8:	200039fc 	.word	0x200039fc
 80067cc:	20000244 	.word	0x20000244
 80067d0:	20000254 	.word	0x20000254
 80067d4:	2000024c 	.word	0x2000024c

080067d8 <cursorNext>:

static void cursorNext(void){
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <cursorNext+0x2c>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d806      	bhi.n	80067f2 <cursorNext+0x1a>
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <cursorNext+0x2c>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <cursorNext+0x2c>)
 80067ee:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80067f0:	e002      	b.n	80067f8 <cursorNext+0x20>
	else curPosition = 0;
 80067f2:	4b04      	ldr	r3, [pc, #16]	; (8006804 <cursorNext+0x2c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200039fc 	.word	0x200039fc

08006808 <cursorPrev>:
static void cursorPrev(void){
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <cursorPrev+0x2c>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <cursorPrev+0x1a>
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <cursorPrev+0x2c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <cursorPrev+0x2c>)
 800681e:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8006820:	e002      	b.n	8006828 <cursorPrev+0x20>
	else curPosition = 2;
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <cursorPrev+0x2c>)
 8006824:	2202      	movs	r2, #2
 8006826:	701a      	strb	r2, [r3, #0]
}
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	200039fc 	.word	0x200039fc

08006838 <increment>:
static void increment(void){
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800683c:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <increment+0x80>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d024      	beq.n	800688e <increment+0x56>
 8006844:	2b02      	cmp	r3, #2
 8006846:	dc31      	bgt.n	80068ac <increment+0x74>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <increment+0x1a>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d00f      	beq.n	8006870 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8006850:	e02c      	b.n	80068ac <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <increment+0x84>)
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d806      	bhi.n	8006868 <increment+0x30>
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <increment+0x84>)
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <increment+0x84>)
 8006864:	705a      	strb	r2, [r3, #1]
			break;
 8006866:	e021      	b.n	80068ac <increment+0x74>
			else valDatePos[1] = 1;
 8006868:	4b14      	ldr	r3, [pc, #80]	; (80068bc <increment+0x84>)
 800686a:	2201      	movs	r2, #1
 800686c:	705a      	strb	r2, [r3, #1]
			break;
 800686e:	e01d      	b.n	80068ac <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <increment+0x84>)
 8006872:	789b      	ldrb	r3, [r3, #2]
 8006874:	2b63      	cmp	r3, #99	; 0x63
 8006876:	d806      	bhi.n	8006886 <increment+0x4e>
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <increment+0x84>)
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	3301      	adds	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <increment+0x84>)
 8006882:	709a      	strb	r2, [r3, #2]
			break;
 8006884:	e012      	b.n	80068ac <increment+0x74>
			else valDatePos[2] = 0;
 8006886:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <increment+0x84>)
 8006888:	2200      	movs	r2, #0
 800688a:	709a      	strb	r2, [r3, #2]
			break;
 800688c:	e00e      	b.n	80068ac <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <increment+0x84>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b1e      	cmp	r3, #30
 8006894:	d806      	bhi.n	80068a4 <increment+0x6c>
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <increment+0x84>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <increment+0x84>)
 80068a0:	701a      	strb	r2, [r3, #0]
			break;
 80068a2:	e002      	b.n	80068aa <increment+0x72>
			else valDatePos[0] = 1;
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <increment+0x84>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
			break;
 80068aa:	bf00      	nop
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	200039fc 	.word	0x200039fc
 80068bc:	20003a00 	.word	0x20003a00

080068c0 <decrement>:
static void decrement(void){
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
	switch(curPosition){
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <decrement+0x80>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d024      	beq.n	8006916 <decrement+0x56>
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	dc31      	bgt.n	8006934 <decrement+0x74>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <decrement+0x1a>
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d00f      	beq.n	80068f8 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 80068d8:	e02c      	b.n	8006934 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 80068da:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <decrement+0x84>)
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d006      	beq.n	80068f0 <decrement+0x30>
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <decrement+0x84>)
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <decrement+0x84>)
 80068ec:	705a      	strb	r2, [r3, #1]
				break;
 80068ee:	e021      	b.n	8006934 <decrement+0x74>
				else valDatePos[1] = 12;
 80068f0:	4b14      	ldr	r3, [pc, #80]	; (8006944 <decrement+0x84>)
 80068f2:	220c      	movs	r2, #12
 80068f4:	705a      	strb	r2, [r3, #1]
				break;
 80068f6:	e01d      	b.n	8006934 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 80068f8:	4b12      	ldr	r3, [pc, #72]	; (8006944 <decrement+0x84>)
 80068fa:	789b      	ldrb	r3, [r3, #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d006      	beq.n	800690e <decrement+0x4e>
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <decrement+0x84>)
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	3b01      	subs	r3, #1
 8006906:	b2da      	uxtb	r2, r3
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <decrement+0x84>)
 800690a:	709a      	strb	r2, [r3, #2]
				break;
 800690c:	e012      	b.n	8006934 <decrement+0x74>
				else valDatePos[2] = 100;
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <decrement+0x84>)
 8006910:	2264      	movs	r2, #100	; 0x64
 8006912:	709a      	strb	r2, [r3, #2]
				break;
 8006914:	e00e      	b.n	8006934 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <decrement+0x84>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d906      	bls.n	800692c <decrement+0x6c>
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <decrement+0x84>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	3b01      	subs	r3, #1
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <decrement+0x84>)
 8006928:	701a      	strb	r2, [r3, #0]
				break;
 800692a:	e002      	b.n	8006932 <decrement+0x72>
				else valDatePos[0] = 31;
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <decrement+0x84>)
 800692e:	221f      	movs	r2, #31
 8006930:	701a      	strb	r2, [r3, #0]
				break;
 8006932:	bf00      	nop
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	200039fc 	.word	0x200039fc
 8006944:	20003a00 	.word	0x20003a00

08006948 <exit>:
static void exit(void){
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
	applySelectedScreen();
 800694c:	f7fb fafe 	bl	8001f4c <applySelectedScreen>
}
 8006950:	bf00      	nop
 8006952:	bd80      	pop	{r7, pc}

08006954 <accept>:
static void accept(void){
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 8006958:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <accept+0x5c>)
 800695a:	785a      	ldrb	r2, [r3, #1]
 800695c:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <accept+0x60>)
 800695e:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8006960:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <accept+0x5c>)
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <accept+0x60>)
 8006966:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <accept+0x5c>)
 800696a:	789a      	ldrb	r2, [r3, #2]
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <accept+0x60>)
 800696e:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <accept+0x5c>)
 8006972:	7818      	ldrb	r0, [r3, #0]
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <accept+0x5c>)
 8006976:	7859      	ldrb	r1, [r3, #1]
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <accept+0x5c>)
 800697a:	789b      	ldrb	r3, [r3, #2]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006982:	b29b      	uxth	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	f000 fb67 	bl	8007058 <zellerCongruence>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <accept+0x60>)
 8006990:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8006992:	2200      	movs	r2, #0
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <accept+0x60>)
 8006996:	4808      	ldr	r0, [pc, #32]	; (80069b8 <accept+0x64>)
 8006998:	f003 fbc6 	bl	800a128 <HAL_RTC_SetDate>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <accept+0x52>
	{
	Error_Handler();
 80069a2:	f7fc fcb1 	bl	8003308 <Error_Handler>
	}
	exit();
 80069a6:	f7ff ffcf 	bl	8006948 <exit>
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20003a00 	.word	0x20003a00
 80069b4:	200035e4 	.word	0x200035e4
 80069b8:	20003744 	.word	0x20003744

080069bc <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <setDefaultClbcks+0x34>)
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <setDefaultClbcks+0x38>)
 80069c4:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 80069c6:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <setDefaultClbcks+0x3c>)
 80069c8:	4a0c      	ldr	r2, [pc, #48]	; (80069fc <setDefaultClbcks+0x40>)
 80069ca:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <setDefaultClbcks+0x44>)
 80069ce:	4a0d      	ldr	r2, [pc, #52]	; (8006a04 <setDefaultClbcks+0x48>)
 80069d0:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 80069d2:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <setDefaultClbcks+0x4c>)
 80069d4:	4a0d      	ldr	r2, [pc, #52]	; (8006a0c <setDefaultClbcks+0x50>)
 80069d6:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <setDefaultClbcks+0x54>)
 80069da:	4a0e      	ldr	r2, [pc, #56]	; (8006a14 <setDefaultClbcks+0x58>)
 80069dc:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 80069de:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <setDefaultClbcks+0x5c>)
 80069e0:	4a0e      	ldr	r2, [pc, #56]	; (8006a1c <setDefaultClbcks+0x60>)
 80069e2:	611a      	str	r2, [r3, #16]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000061c 	.word	0x2000061c
 80069f4:	08006d41 	.word	0x08006d41
 80069f8:	200005f8 	.word	0x200005f8
 80069fc:	08006b85 	.word	0x08006b85
 8006a00:	200005d4 	.word	0x200005d4
 8006a04:	08006d4d 	.word	0x08006d4d
 8006a08:	20000568 	.word	0x20000568
 8006a0c:	08006c71 	.word	0x08006c71
 8006a10:	2000058c 	.word	0x2000058c
 8006a14:	08006b55 	.word	0x08006b55
 8006a18:	200005b0 	.word	0x200005b0
 8006a1c:	08006bb5 	.word	0x08006bb5

08006a20 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006a24:	f7ff ffca 	bl	80069bc <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <timeInputSetup+0x24>)
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <timeInputSetup+0x28>)
 8006a2e:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <timeInputSetup+0x24>)
 8006a32:	785a      	ldrb	r2, [r3, #1]
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <timeInputSetup+0x28>)
 8006a36:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 8006a38:	4b02      	ldr	r3, [pc, #8]	; (8006a44 <timeInputSetup+0x24>)
 8006a3a:	789a      	ldrb	r2, [r3, #2]
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <timeInputSetup+0x28>)
 8006a3e:	709a      	strb	r2, [r3, #2]
}
 8006a40:	bf00      	nop
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	200035d0 	.word	0x200035d0
 8006a48:	20003a04 	.word	0x20003a04

08006a4c <timeInputMain>:

void timeInputMain(void){
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 8006a52:	2300      	movs	r3, #0
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	611a      	str	r2, [r3, #16]
 8006a64:	615a      	str	r2, [r3, #20]
 8006a66:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 8006a68:	4b33      	ldr	r3, [pc, #204]	; (8006b38 <timeInputMain+0xec>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	463b      	mov	r3, r7
 8006a70:	4932      	ldr	r1, [pc, #200]	; (8006b3c <timeInputMain+0xf0>)
 8006a72:	4618      	mov	r0, r3
 8006a74:	f007 faf0 	bl	800e058 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8006a78:	463a      	mov	r2, r7
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <timeInputMain+0xf4>)
 8006a7c:	214c      	movs	r1, #76	; 0x4c
 8006a7e:	2014      	movs	r0, #20
 8006a80:	f7fb fc80 	bl	8002384 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8006a84:	4b2c      	ldr	r3, [pc, #176]	; (8006b38 <timeInputMain+0xec>)
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	492b      	ldr	r1, [pc, #172]	; (8006b3c <timeInputMain+0xf0>)
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f007 fae2 	bl	800e058 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8006a94:	463a      	mov	r2, r7
 8006a96:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <timeInputMain+0xf4>)
 8006a98:	214c      	movs	r1, #76	; 0x4c
 8006a9a:	20aa      	movs	r0, #170	; 0xaa
 8006a9c:	f7fb fc72 	bl	8002384 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8006aa0:	4b28      	ldr	r3, [pc, #160]	; (8006b44 <timeInputMain+0xf8>)
 8006aa2:	789b      	ldrb	r3, [r3, #2]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4924      	ldr	r1, [pc, #144]	; (8006b3c <timeInputMain+0xf0>)
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f007 fad4 	bl	800e058 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8006ab0:	463a      	mov	r2, r7
 8006ab2:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <timeInputMain+0xfc>)
 8006ab4:	214c      	movs	r1, #76	; 0x4c
 8006ab6:	f240 103b 	movw	r0, #315	; 0x13b
 8006aba:	f7fb fc63 	bl	8002384 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8006abe:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <timeInputMain+0x100>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <timeInputMain+0x104>)
 8006ac6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006aca:	4618      	mov	r0, r3
 8006acc:	4b1f      	ldr	r3, [pc, #124]	; (8006b4c <timeInputMain+0x100>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <timeInputMain+0x104>)
 8006ad4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ad8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006adc:	2301      	movs	r3, #1
 8006ade:	22af      	movs	r2, #175	; 0xaf
 8006ae0:	f7fc f8ba 	bl	8002c58 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8006ae4:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <timeInputMain+0x100>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b19      	ldr	r3, [pc, #100]	; (8006b50 <timeInputMain+0x104>)
 8006aec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006af0:	4618      	mov	r0, r3
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <timeInputMain+0x100>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <timeInputMain+0x104>)
 8006afa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006afe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006b02:	2301      	movs	r3, #1
 8006b04:	22b0      	movs	r2, #176	; 0xb0
 8006b06:	f7fc f8a7 	bl	8002c58 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8006b0a:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <timeInputMain+0x100>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <timeInputMain+0x104>)
 8006b12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b16:	4618      	mov	r0, r3
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <timeInputMain+0x100>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <timeInputMain+0x104>)
 8006b20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006b28:	2301      	movs	r3, #1
 8006b2a:	22b1      	movs	r2, #177	; 0xb1
 8006b2c:	f7fc f894 	bl	8002c58 <lcdHLine>
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20003a04 	.word	0x20003a04
 8006b3c:	08014cf8 	.word	0x08014cf8
 8006b40:	08038694 	.word	0x08038694
 8006b44:	200035d0 	.word	0x200035d0
 8006b48:	0803304c 	.word	0x0803304c
 8006b4c:	20003a03 	.word	0x20003a03
 8006b50:	20000284 	.word	0x20000284

08006b54 <cursorNext>:

static void cursorNext(void){
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <cursorNext+0x2c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d806      	bhi.n	8006b6e <cursorNext+0x1a>
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <cursorNext+0x2c>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <cursorNext+0x2c>)
 8006b6a:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8006b6c:	e002      	b.n	8006b74 <cursorNext+0x20>
	else curPosition = 0;
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <cursorNext+0x2c>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20003a03 	.word	0x20003a03

08006b84 <cursorPrev>:
static void cursorPrev(void){
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8006b88:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <cursorPrev+0x2c>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d006      	beq.n	8006b9e <cursorPrev+0x1a>
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <cursorPrev+0x2c>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <cursorPrev+0x2c>)
 8006b9a:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8006b9c:	e002      	b.n	8006ba4 <cursorPrev+0x20>
	else curPosition = 4;
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <cursorPrev+0x2c>)
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	701a      	strb	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20003a03 	.word	0x20003a03

08006bb4 <increment>:
static void increment(void){
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <increment+0xb4>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d84d      	bhi.n	8006c5c <increment+0xa8>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <increment+0x14>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bdd 	.word	0x08006bdd
 8006bcc:	08006bfb 	.word	0x08006bfb
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c37 	.word	0x08006c37
 8006bd8:	08006c55 	.word	0x08006c55
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8006bdc:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <increment+0xb8>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b0c      	cmp	r3, #12
 8006be2:	d806      	bhi.n	8006bf2 <increment+0x3e>
 8006be4:	4b21      	ldr	r3, [pc, #132]	; (8006c6c <increment+0xb8>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	330a      	adds	r3, #10
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <increment+0xb8>)
 8006bee:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8006bf0:	e034      	b.n	8006c5c <increment+0xa8>
			else valTimePos[0] = 20;
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <increment+0xb8>)
 8006bf4:	2214      	movs	r2, #20
 8006bf6:	701a      	strb	r2, [r3, #0]
			break;
 8006bf8:	e030      	b.n	8006c5c <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8006bfa:	4b1c      	ldr	r3, [pc, #112]	; (8006c6c <increment+0xb8>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b17      	cmp	r3, #23
 8006c00:	d806      	bhi.n	8006c10 <increment+0x5c>
 8006c02:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <increment+0xb8>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <increment+0xb8>)
 8006c0c:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8006c0e:	e025      	b.n	8006c5c <increment+0xa8>
			else valTimePos[0] = 0;
 8006c10:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <increment+0xb8>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
			break;
 8006c16:	e021      	b.n	8006c5c <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8006c18:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <increment+0xb8>)
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d806      	bhi.n	8006c2e <increment+0x7a>
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <increment+0xb8>)
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	330a      	adds	r3, #10
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <increment+0xb8>)
 8006c2a:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8006c2c:	e016      	b.n	8006c5c <increment+0xa8>
			else valTimePos[1] = 0;
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <increment+0xb8>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	705a      	strb	r2, [r3, #1]
			break;
 8006c34:	e012      	b.n	8006c5c <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <increment+0xb8>)
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c3c:	d806      	bhi.n	8006c4c <increment+0x98>
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <increment+0xb8>)
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	3301      	adds	r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <increment+0xb8>)
 8006c48:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8006c4a:	e007      	b.n	8006c5c <increment+0xa8>
			else valTimePos[1] = 0;
 8006c4c:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <increment+0xb8>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	705a      	strb	r2, [r3, #1]
			break;
 8006c52:	e003      	b.n	8006c5c <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <increment+0xb8>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	709a      	strb	r2, [r3, #2]
			break;
 8006c5a:	bf00      	nop
	}
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20003a03 	.word	0x20003a03
 8006c6c:	20003a04 	.word	0x20003a04

08006c70 <decrement>:
static void decrement(void){
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006c74:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <decrement+0xc0>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d857      	bhi.n	8006d2c <decrement+0xbc>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <decrement+0x14>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006c99 	.word	0x08006c99
 8006c88:	08006cb7 	.word	0x08006cb7
 8006c8c:	08006cd5 	.word	0x08006cd5
 8006c90:	08006cf3 	.word	0x08006cf3
 8006c94:	08006d11 	.word	0x08006d11
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8006c98:	4b26      	ldr	r3, [pc, #152]	; (8006d34 <decrement+0xc4>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d906      	bls.n	8006cae <decrement+0x3e>
 8006ca0:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <decrement+0xc4>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	3b0a      	subs	r3, #10
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <decrement+0xc4>)
 8006caa:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8006cac:	e03e      	b.n	8006d2c <decrement+0xbc>
				else valTimePos[0] = 0;
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <decrement+0xc4>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
				break;
 8006cb4:	e03a      	b.n	8006d2c <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8006cb6:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <decrement+0xc4>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <decrement+0x5c>
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <decrement+0xc4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <decrement+0xc4>)
 8006cc8:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8006cca:	e02f      	b.n	8006d2c <decrement+0xbc>
				else valTimePos[0] = 23;
 8006ccc:	4b19      	ldr	r3, [pc, #100]	; (8006d34 <decrement+0xc4>)
 8006cce:	2217      	movs	r2, #23
 8006cd0:	701a      	strb	r2, [r3, #0]
				break;
 8006cd2:	e02b      	b.n	8006d2c <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <decrement+0xc4>)
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	d906      	bls.n	8006cea <decrement+0x7a>
 8006cdc:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <decrement+0xc4>)
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	3b0a      	subs	r3, #10
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <decrement+0xc4>)
 8006ce6:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8006ce8:	e020      	b.n	8006d2c <decrement+0xbc>
				else valTimePos[1] = 0;
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <decrement+0xc4>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	705a      	strb	r2, [r3, #1]
				break;
 8006cf0:	e01c      	b.n	8006d2c <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <decrement+0xc4>)
 8006cf4:	785b      	ldrb	r3, [r3, #1]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <decrement+0x98>
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <decrement+0xc4>)
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <decrement+0xc4>)
 8006d04:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8006d06:	e011      	b.n	8006d2c <decrement+0xbc>
				else valTimePos[1] = 59;
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <decrement+0xc4>)
 8006d0a:	223b      	movs	r2, #59	; 0x3b
 8006d0c:	705a      	strb	r2, [r3, #1]
				break;
 8006d0e:	e00d      	b.n	8006d2c <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8006d10:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <decrement+0xc8>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006d16:	2200      	movs	r2, #0
 8006d18:	4907      	ldr	r1, [pc, #28]	; (8006d38 <decrement+0xc8>)
 8006d1a:	4808      	ldr	r0, [pc, #32]	; (8006d3c <decrement+0xcc>)
 8006d1c:	f003 f90c 	bl	8009f38 <HAL_RTC_SetTime>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <decrement+0xba>
					{
						Error_Handler();
 8006d26:	f7fc faef 	bl	8003308 <Error_Handler>
					}
				break;
 8006d2a:	bf00      	nop
		}
}
 8006d2c:	bf00      	nop
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20003a03 	.word	0x20003a03
 8006d34:	20003a04 	.word	0x20003a04
 8006d38:	200035d0 	.word	0x200035d0
 8006d3c:	20003744 	.word	0x20003744

08006d40 <exit>:
static void exit(void){
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8006d44:	f7fb f902 	bl	8001f4c <applySelectedScreen>
}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <accept>:
static void accept(void){
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <accept+0x3c>)
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <accept+0x40>)
 8006d56:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <accept+0x3c>)
 8006d5a:	785a      	ldrb	r2, [r3, #1]
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <accept+0x40>)
 8006d5e:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <accept+0x40>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <accept+0x40>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4907      	ldr	r1, [pc, #28]	; (8006d8c <accept+0x40>)
 8006d70:	4807      	ldr	r0, [pc, #28]	; (8006d90 <accept+0x44>)
 8006d72:	f003 f8e1 	bl	8009f38 <HAL_RTC_SetTime>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <accept+0x34>
	{
	Error_Handler();
 8006d7c:	f7fc fac4 	bl	8003308 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8006d80:	f7ff ffde 	bl	8006d40 <exit>
}
 8006d84:	bf00      	nop
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20003a04 	.word	0x20003a04
 8006d8c:	200035d0 	.word	0x200035d0
 8006d90:	20003744 	.word	0x20003744

08006d94 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	895b      	ldrh	r3, [r3, #10]
 8006db2:	461a      	mov	r2, r3
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 f800 	bl	800cdc0 <malloc>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	741a      	strb	r2, [r3, #16]
}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	891a      	ldrh	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	895b      	ldrh	r3, [r3, #10]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2301      	moveq	r3, #1
 8006dfe:	2300      	movne	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ffe5 	bl	8006de8 <cbuf_isFull>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02a      	beq.n	8006e7a <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	18d0      	adds	r0, r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	f005 ffce 	bl	800cde0 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	88db      	ldrh	r3, [r3, #6]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	8952      	ldrh	r2, [r2, #10]
 8006e4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8006e52:	fb01 f202 	mul.w	r2, r1, r2
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	889b      	ldrh	r3, [r3, #4]
 8006e62:	3301      	adds	r3, #1
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	8952      	ldrh	r2, [r2, #10]
 8006e68:	fb93 f1f2 	sdiv	r1, r3, r2
 8006e6c:	fb01 f202 	mul.w	r2, r1, r2
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8006e78:	e023      	b.n	8006ec2 <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	4619      	mov	r1, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	18d0      	adds	r0, r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	f005 ffa3 	bl	800cde0 <memcpy>
		b->elemNum++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	891b      	ldrh	r3, [r3, #8]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	8952      	ldrh	r2, [r2, #10]
 8006eb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8006eb4:	fb01 f202 	mul.w	r2, r1, r2
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	80da      	strh	r2, [r3, #6]
		return 1;
 8006ec0:	2301      	movs	r3, #1
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	889a      	ldrh	r2, [r3, #4]
 8006eda:	887b      	ldrh	r3, [r7, #2]
 8006edc:	4413      	add	r3, r2
 8006ede:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	895a      	ldrh	r2, [r3, #10]
 8006ee4:	887b      	ldrh	r3, [r7, #2]
 8006ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eea:	fb01 f202 	mul.w	r2, r1, r2
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68c9      	ldr	r1, [r1, #12]
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	4413      	add	r3, r2
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	895b      	ldrh	r3, [r3, #10]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f005 ff4a 	bl	800cdc0 <malloc>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	731a      	strb	r2, [r3, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	891a      	ldrh	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	895b      	ldrh	r3, [r3, #10]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	bf0c      	ite	eq
 8006f68:	2301      	moveq	r3, #1
 8006f6a:	2300      	movne	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ffe5 	bl	8006f54 <ring_buffer_full>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d022      	beq.n	8006fd6 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	88db      	ldrh	r3, [r3, #6]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	88db      	ldrh	r3, [r3, #6]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	8952      	ldrh	r2, [r2, #10]
 8006faa:	fb93 f1f2 	sdiv	r1, r3, r2
 8006fae:	fb01 f202 	mul.w	r2, r1, r2
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	8952      	ldrh	r2, [r2, #10]
 8006fc4:	fb93 f1f2 	sdiv	r1, r3, r2
 8006fc8:	fb01 f202 	mul.w	r2, r1, r2
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8006fd4:	e01b      	b.n	800700e <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	88db      	ldrh	r3, [r3, #6]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	891b      	ldrh	r3, [r3, #8]
 8006fea:	3301      	adds	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	8952      	ldrh	r2, [r2, #10]
 8006ffc:	fb93 f1f2 	sdiv	r1, r3, r2
 8007000:	fb01 f202 	mul.w	r2, r1, r2
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	80da      	strh	r2, [r3, #6]
		return 1;
 800700c:	2301      	movs	r3, #1
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	889a      	ldrh	r2, [r3, #4]
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	4413      	add	r3, r2
 800702a:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	895a      	ldrh	r2, [r3, #10]
 8007030:	887b      	ldrh	r3, [r7, #2]
 8007032:	fbb3 f1f2 	udiv	r1, r3, r2
 8007036:	fb01 f202 	mul.w	r2, r1, r2
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	681b      	ldr	r3, [r3, #0]
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
 8007062:	460b      	mov	r3, r1
 8007064:	71bb      	strb	r3, [r7, #6]
 8007066:	4613      	mov	r3, r2
 8007068:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 800706a:	79bb      	ldrb	r3, [r7, #6]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d104      	bne.n	800707a <zellerCongruence+0x22>
	        month = 13;
 8007070:	230d      	movs	r3, #13
 8007072:	71bb      	strb	r3, [r7, #6]
	        year--;
 8007074:	88bb      	ldrh	r3, [r7, #4]
 8007076:	3b01      	subs	r3, #1
 8007078:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 800707a:	79bb      	ldrb	r3, [r7, #6]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d104      	bne.n	800708a <zellerCongruence+0x32>
	        month = 14;
 8007080:	230e      	movs	r3, #14
 8007082:	71bb      	strb	r3, [r7, #6]
	        year--;
 8007084:	88bb      	ldrh	r3, [r7, #4]
 8007086:	3b01      	subs	r3, #1
 8007088:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800708e:	79bb      	ldrb	r3, [r7, #6]
 8007090:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8007092:	88bb      	ldrh	r3, [r7, #4]
 8007094:	4a29      	ldr	r2, [pc, #164]	; (800713c <zellerCongruence+0xe4>)
 8007096:	fba2 1203 	umull	r1, r2, r2, r3
 800709a:	0952      	lsrs	r2, r2, #5
 800709c:	2164      	movs	r1, #100	; 0x64
 800709e:	fb01 f202 	mul.w	r2, r1, r2
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 80070a8:	88bb      	ldrh	r3, [r7, #4]
 80070aa:	4a24      	ldr	r2, [pc, #144]	; (800713c <zellerCongruence+0xe4>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80070b6:	7bf9      	ldrb	r1, [r7, #15]
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <zellerCongruence+0xe8>)
 80070c8:	fb82 0203 	smull	r0, r2, r2, r3
 80070cc:	1052      	asrs	r2, r2, #1
 80070ce:	17db      	asrs	r3, r3, #31
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	18ca      	adds	r2, r1, r3
 80070d4:	7b7b      	ldrb	r3, [r7, #13]
 80070d6:	4413      	add	r3, r2
 80070d8:	7b7a      	ldrb	r2, [r7, #13]
 80070da:	0892      	lsrs	r2, r2, #2
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 80070e0:	7b3a      	ldrb	r2, [r7, #12]
 80070e2:	0892      	lsrs	r2, r2, #2
 80070e4:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80070e6:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 80070e8:	7b3a      	ldrb	r2, [r7, #12]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80070f0:	440b      	add	r3, r1
 80070f2:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <zellerCongruence+0xec>)
 80070f8:	fb83 1302 	smull	r1, r3, r3, r2
 80070fc:	4413      	add	r3, r2
 80070fe:	1099      	asrs	r1, r3, #2
 8007100:	17d3      	asrs	r3, r2, #31
 8007102:	1ac9      	subs	r1, r1, r3
 8007104:	460b      	mov	r3, r1
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	1a5b      	subs	r3, r3, r1
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	1d5a      	adds	r2, r3, #5
 8007112:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <zellerCongruence+0xec>)
 8007114:	fb83 1302 	smull	r1, r3, r3, r2
 8007118:	4413      	add	r3, r2
 800711a:	1099      	asrs	r1, r3, #2
 800711c:	17d3      	asrs	r3, r2, #31
 800711e:	1ac9      	subs	r1, r1, r3
 8007120:	460b      	mov	r3, r1
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	1a5b      	subs	r3, r3, r1
 8007126:	1ad1      	subs	r1, r2, r3
 8007128:	b2cb      	uxtb	r3, r1
 800712a:	3301      	adds	r3, #1
 800712c:	b2db      	uxtb	r3, r3
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	51eb851f 	.word	0x51eb851f
 8007140:	66666667 	.word	0x66666667
 8007144:	92492493 	.word	0x92492493

08007148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007180 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800714c:	480d      	ldr	r0, [pc, #52]	; (8007184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800714e:	490e      	ldr	r1, [pc, #56]	; (8007188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007154:	e002      	b.n	800715c <LoopCopyDataInit>

08007156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800715a:	3304      	adds	r3, #4

0800715c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800715c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800715e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007160:	d3f9      	bcc.n	8007156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007162:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007164:	4c0b      	ldr	r4, [pc, #44]	; (8007194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007168:	e001      	b.n	800716e <LoopFillZerobss>

0800716a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800716a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800716c:	3204      	adds	r2, #4

0800716e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800716e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007170:	d3fb      	bcc.n	800716a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007172:	f7fc fad7 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007176:	f005 fdff 	bl	800cd78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800717a:	f7fb ff47 	bl	800300c <main>
  bx  lr    
 800717e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007180:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007188:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 800718c:	0803b038 	.word	0x0803b038
  ldr r2, =_sbss
 8007190:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8007194:	20003a4c 	.word	0x20003a4c

08007198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007198:	e7fe      	b.n	8007198 <ADC_IRQHandler>
	...

0800719c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <HAL_Init+0x40>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <HAL_Init+0x40>)
 80071a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <HAL_Init+0x40>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <HAL_Init+0x40>)
 80071b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <HAL_Init+0x40>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a07      	ldr	r2, [pc, #28]	; (80071dc <HAL_Init+0x40>)
 80071be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071c4:	2003      	movs	r0, #3
 80071c6:	f000 f94f 	bl	8007468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071ca:	2000      	movs	r0, #0
 80071cc:	f000 f808 	bl	80071e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071d0:	f7fc f980 	bl	80034d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40023c00 	.word	0x40023c00

080071e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <HAL_InitTick+0x54>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b12      	ldr	r3, [pc, #72]	; (8007238 <HAL_InitTick+0x58>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f967 	bl	80074d2 <HAL_SYSTICK_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e00e      	b.n	800722c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b0f      	cmp	r3, #15
 8007212:	d80a      	bhi.n	800722a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007214:	2200      	movs	r2, #0
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	f000 f92f 	bl	800747e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007220:	4a06      	ldr	r2, [pc, #24]	; (800723c <HAL_InitTick+0x5c>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000180 	.word	0x20000180
 8007238:	200002bc 	.word	0x200002bc
 800723c:	200002b8 	.word	0x200002b8

08007240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_IncTick+0x20>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_IncTick+0x24>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4413      	add	r3, r2
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <HAL_IncTick+0x24>)
 8007252:	6013      	str	r3, [r2, #0]
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	200002bc 	.word	0x200002bc
 8007264:	20003a08 	.word	0x20003a08

08007268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return uwTick;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_GetTick+0x14>)
 800726e:	681b      	ldr	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	20003a08 	.word	0x20003a08

08007280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007288:	f7ff ffee 	bl	8007268 <HAL_GetTick>
 800728c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d005      	beq.n	80072a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <HAL_Delay+0x44>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072a6:	bf00      	nop
 80072a8:	f7ff ffde 	bl	8007268 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d8f7      	bhi.n	80072a8 <HAL_Delay+0x28>
  {
  }
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200002bc 	.word	0x200002bc

080072c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <__NVIC_SetPriorityGrouping+0x44>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072e4:	4013      	ands	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <__NVIC_SetPriorityGrouping+0x44>)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	60d3      	str	r3, [r2, #12]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <__NVIC_GetPriorityGrouping+0x18>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	f003 0307 	and.w	r3, r3, #7
}
 800731e:	4618      	mov	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	e000ed00 	.word	0xe000ed00

0800732c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733a:	2b00      	cmp	r3, #0
 800733c:	db0b      	blt.n	8007356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	f003 021f 	and.w	r2, r3, #31
 8007344:	4907      	ldr	r1, [pc, #28]	; (8007364 <__NVIC_EnableIRQ+0x38>)
 8007346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2001      	movs	r0, #1
 800734e:	fa00 f202 	lsl.w	r2, r0, r2
 8007352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	e000e100 	.word	0xe000e100

08007368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db0a      	blt.n	8007392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	490c      	ldr	r1, [pc, #48]	; (80073b4 <__NVIC_SetPriority+0x4c>)
 8007382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007386:	0112      	lsls	r2, r2, #4
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	440b      	add	r3, r1
 800738c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007390:	e00a      	b.n	80073a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <__NVIC_SetPriority+0x50>)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	3b04      	subs	r3, #4
 80073a0:	0112      	lsls	r2, r2, #4
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	440b      	add	r3, r1
 80073a6:	761a      	strb	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000e100 	.word	0xe000e100
 80073b8:	e000ed00 	.word	0xe000ed00

080073bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f1c3 0307 	rsb	r3, r3, #7
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	bf28      	it	cs
 80073da:	2304      	movcs	r3, #4
 80073dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	d902      	bls.n	80073ec <NVIC_EncodePriority+0x30>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3b03      	subs	r3, #3
 80073ea:	e000      	b.n	80073ee <NVIC_EncodePriority+0x32>
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43da      	mvns	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	401a      	ands	r2, r3
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007404:	f04f 31ff 	mov.w	r1, #4294967295
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	43d9      	mvns	r1, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007414:	4313      	orrs	r3, r2
         );
}
 8007416:	4618      	mov	r0, r3
 8007418:	3724      	adds	r7, #36	; 0x24
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3b01      	subs	r3, #1
 8007430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007434:	d301      	bcc.n	800743a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007436:	2301      	movs	r3, #1
 8007438:	e00f      	b.n	800745a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800743a:	4a0a      	ldr	r2, [pc, #40]	; (8007464 <SysTick_Config+0x40>)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007442:	210f      	movs	r1, #15
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	f7ff ff8e 	bl	8007368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <SysTick_Config+0x40>)
 800744e:	2200      	movs	r2, #0
 8007450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007452:	4b04      	ldr	r3, [pc, #16]	; (8007464 <SysTick_Config+0x40>)
 8007454:	2207      	movs	r2, #7
 8007456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	e000e010 	.word	0xe000e010

08007468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff29 	bl	80072c8 <__NVIC_SetPriorityGrouping>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	4603      	mov	r3, r0
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007490:	f7ff ff3e 	bl	8007310 <__NVIC_GetPriorityGrouping>
 8007494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff8e 	bl	80073bc <NVIC_EncodePriority>
 80074a0:	4602      	mov	r2, r0
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff ff5d 	bl	8007368 <__NVIC_SetPriority>
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	4603      	mov	r3, r0
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ff31 	bl	800732c <__NVIC_EnableIRQ>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ffa2 	bl	8007424 <SysTick_Config>
 80074e0:	4603      	mov	r3, r0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80074f8:	f7ff feb6 	bl	8007268 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e099      	b.n	800763c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007528:	e00f      	b.n	800754a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800752a:	f7ff fe9d 	bl	8007268 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b05      	cmp	r3, #5
 8007536:	d908      	bls.n	800754a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e078      	b.n	800763c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e8      	bne.n	800752a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4b38      	ldr	r3, [pc, #224]	; (8007644 <HAL_DMA_Init+0x158>)
 8007564:	4013      	ands	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800758e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d107      	bne.n	80075b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	4313      	orrs	r3, r2
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d117      	bne.n	800760e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb01 	bl	8007bf8 <DMA_CheckFifoParam>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2240      	movs	r2, #64	; 0x40
 8007600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800760a:	2301      	movs	r3, #1
 800760c:	e016      	b.n	800763c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fab8 	bl	8007b8c <DMA_CalcBaseAndBitshift>
 800761c:	4603      	mov	r3, r0
 800761e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007624:	223f      	movs	r2, #63	; 0x3f
 8007626:	409a      	lsls	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	f010803f 	.word	0xf010803f

08007648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_DMA_Start_IT+0x26>
 800766a:	2302      	movs	r3, #2
 800766c:	e040      	b.n	80076f0 <HAL_DMA_Start_IT+0xa8>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d12f      	bne.n	80076e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fa4a 	bl	8007b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	223f      	movs	r2, #63	; 0x3f
 80076a2:	409a      	lsls	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0216 	orr.w	r2, r2, #22
 80076b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e005      	b.n	80076ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076ea:	2302      	movs	r3, #2
 80076ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007706:	f7ff fdaf 	bl	8007268 <HAL_GetTick>
 800770a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d008      	beq.n	800772a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2280      	movs	r2, #128	; 0x80
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e052      	b.n	80077d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0216 	bic.w	r2, r2, #22
 8007738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <HAL_DMA_Abort+0x62>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0208 	bic.w	r2, r2, #8
 8007768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0201 	bic.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800777a:	e013      	b.n	80077a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800777c:	f7ff fd74 	bl	8007268 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b05      	cmp	r3, #5
 8007788:	d90c      	bls.n	80077a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2203      	movs	r2, #3
 8007794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e015      	b.n	80077d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e4      	bne.n	800777c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	223f      	movs	r2, #63	; 0x3f
 80077b8:	409a      	lsls	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d004      	beq.n	80077f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2280      	movs	r2, #128	; 0x80
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e00c      	b.n	8007810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2205      	movs	r2, #5
 80077fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007828:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <HAL_DMA_IRQHandler+0x248>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a8e      	ldr	r2, [pc, #568]	; (8007a68 <HAL_DMA_IRQHandler+0x24c>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	0a9b      	lsrs	r3, r3, #10
 8007834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007846:	2208      	movs	r2, #8
 8007848:	409a      	lsls	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01a      	beq.n	8007888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d013      	beq.n	8007888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0204 	bic.w	r2, r2, #4
 800786e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	2208      	movs	r2, #8
 8007876:	409a      	lsls	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f043 0201 	orr.w	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	2201      	movs	r2, #1
 800788e:	409a      	lsls	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078aa:	2201      	movs	r2, #1
 80078ac:	409a      	lsls	r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f043 0202 	orr.w	r2, r3, #2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c2:	2204      	movs	r2, #4
 80078c4:	409a      	lsls	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d012      	beq.n	80078f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e0:	2204      	movs	r2, #4
 80078e2:	409a      	lsls	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f043 0204 	orr.w	r2, r3, #4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f8:	2210      	movs	r2, #16
 80078fa:	409a      	lsls	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d043      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03c      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007916:	2210      	movs	r2, #16
 8007918:	409a      	lsls	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d018      	beq.n	800795e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d108      	bne.n	800794c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d024      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
 800794a:	e01f      	b.n	800798c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
 800795c:	e016      	b.n	800798c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d107      	bne.n	800797c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0208 	bic.w	r2, r2, #8
 800797a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	2220      	movs	r2, #32
 8007992:	409a      	lsls	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4013      	ands	r3, r2
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 808f 	beq.w	8007abc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8087 	beq.w	8007abc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	2220      	movs	r2, #32
 80079b4:	409a      	lsls	r2, r3
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d136      	bne.n	8007a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0216 	bic.w	r2, r2, #22
 80079d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d103      	bne.n	80079f6 <HAL_DMA_IRQHandler+0x1da>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0208 	bic.w	r2, r2, #8
 8007a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	223f      	movs	r2, #63	; 0x3f
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d07e      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
        }
        return;
 8007a32:	e079      	b.n	8007b28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10d      	bne.n	8007a6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d031      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e02c      	b.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
 8007a62:	bf00      	nop
 8007a64:	20000180 	.word	0x20000180
 8007a68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d023      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
 8007a7c:	e01e      	b.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0210 	bic.w	r2, r2, #16
 8007a9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d032      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d022      	beq.n	8007b16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d307      	bcc.n	8007b04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f2      	bne.n	8007ae8 <HAL_DMA_IRQHandler+0x2cc>
 8007b02:	e000      	b.n	8007b06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	e000      	b.n	8007b2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b28:	bf00      	nop
    }
  }
}
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d108      	bne.n	8007b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007b6e:	e007      	b.n	8007b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	3b10      	subs	r3, #16
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007ba6:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d909      	bls.n	8007bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	659a      	str	r2, [r3, #88]	; 0x58
 8007bcc:	e007      	b.n	8007bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	aaaaaaab 	.word	0xaaaaaaab
 8007bf4:	0803a58c 	.word	0x0803a58c

08007bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11f      	bne.n	8007c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d856      	bhi.n	8007cc6 <DMA_CheckFifoParam+0xce>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <DMA_CheckFifoParam+0x28>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c43 	.word	0x08007c43
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007cc7 	.word	0x08007cc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d046      	beq.n	8007cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c40:	e043      	b.n	8007cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c4a:	d140      	bne.n	8007cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c50:	e03d      	b.n	8007cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5a:	d121      	bne.n	8007ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d837      	bhi.n	8007cd2 <DMA_CheckFifoParam+0xda>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <DMA_CheckFifoParam+0x70>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c7f 	.word	0x08007c7f
 8007c70:	08007c79 	.word	0x08007c79
 8007c74:	08007c91 	.word	0x08007c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e030      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d025      	beq.n	8007cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c8e:	e022      	b.n	8007cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c98:	d11f      	bne.n	8007cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c9e:	e01c      	b.n	8007cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d903      	bls.n	8007cae <DMA_CheckFifoParam+0xb6>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d003      	beq.n	8007cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007cac:	e018      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb2:	e015      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00e      	beq.n	8007cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e00b      	b.n	8007cde <DMA_CheckFifoParam+0xe6>
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e00a      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e008      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e006      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e004      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e002      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007cda:	bf00      	nop
 8007cdc:	e000      	b.n	8007ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8007cde:	bf00      	nop
    }
  } 
  
  return status; 
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b089      	sub	sp, #36	; 0x24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	e177      	b.n	8007ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	f040 8166 	bne.w	8007ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d005      	beq.n	8007d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d130      	bne.n	8007da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43db      	mvns	r3, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4013      	ands	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d78:	2201      	movs	r2, #1
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	43db      	mvns	r3, r3
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	4013      	ands	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 0201 	and.w	r2, r3, #1
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d017      	beq.n	8007de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	2203      	movs	r2, #3
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d123      	bne.n	8007e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	08da      	lsrs	r2, r3, #3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3208      	adds	r2, #8
 8007df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	220f      	movs	r2, #15
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	08da      	lsrs	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3208      	adds	r2, #8
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	2203      	movs	r2, #3
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 0203 	and.w	r2, r3, #3
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80c0 	beq.w	8007ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	4b66      	ldr	r3, [pc, #408]	; (8008014 <HAL_GPIO_Init+0x324>)
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	4a65      	ldr	r2, [pc, #404]	; (8008014 <HAL_GPIO_Init+0x324>)
 8007e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e84:	6453      	str	r3, [r2, #68]	; 0x44
 8007e86:	4b63      	ldr	r3, [pc, #396]	; (8008014 <HAL_GPIO_Init+0x324>)
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e92:	4a61      	ldr	r2, [pc, #388]	; (8008018 <HAL_GPIO_Init+0x328>)
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	3302      	adds	r3, #2
 8007e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	220f      	movs	r2, #15
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a58      	ldr	r2, [pc, #352]	; (800801c <HAL_GPIO_Init+0x32c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d037      	beq.n	8007f2e <HAL_GPIO_Init+0x23e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a57      	ldr	r2, [pc, #348]	; (8008020 <HAL_GPIO_Init+0x330>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d031      	beq.n	8007f2a <HAL_GPIO_Init+0x23a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a56      	ldr	r2, [pc, #344]	; (8008024 <HAL_GPIO_Init+0x334>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d02b      	beq.n	8007f26 <HAL_GPIO_Init+0x236>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a55      	ldr	r2, [pc, #340]	; (8008028 <HAL_GPIO_Init+0x338>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d025      	beq.n	8007f22 <HAL_GPIO_Init+0x232>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a54      	ldr	r2, [pc, #336]	; (800802c <HAL_GPIO_Init+0x33c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01f      	beq.n	8007f1e <HAL_GPIO_Init+0x22e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a53      	ldr	r2, [pc, #332]	; (8008030 <HAL_GPIO_Init+0x340>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d019      	beq.n	8007f1a <HAL_GPIO_Init+0x22a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a52      	ldr	r2, [pc, #328]	; (8008034 <HAL_GPIO_Init+0x344>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <HAL_GPIO_Init+0x226>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a51      	ldr	r2, [pc, #324]	; (8008038 <HAL_GPIO_Init+0x348>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00d      	beq.n	8007f12 <HAL_GPIO_Init+0x222>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a50      	ldr	r2, [pc, #320]	; (800803c <HAL_GPIO_Init+0x34c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d007      	beq.n	8007f0e <HAL_GPIO_Init+0x21e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a4f      	ldr	r2, [pc, #316]	; (8008040 <HAL_GPIO_Init+0x350>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d101      	bne.n	8007f0a <HAL_GPIO_Init+0x21a>
 8007f06:	2309      	movs	r3, #9
 8007f08:	e012      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	e010      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	e00e      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f12:	2307      	movs	r3, #7
 8007f14:	e00c      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f16:	2306      	movs	r3, #6
 8007f18:	e00a      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f1a:	2305      	movs	r3, #5
 8007f1c:	e008      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f1e:	2304      	movs	r3, #4
 8007f20:	e006      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f22:	2303      	movs	r3, #3
 8007f24:	e004      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e002      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <HAL_GPIO_Init+0x240>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	f002 0203 	and.w	r2, r2, #3
 8007f36:	0092      	lsls	r2, r2, #2
 8007f38:	4093      	lsls	r3, r2
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f40:	4935      	ldr	r1, [pc, #212]	; (8008018 <HAL_GPIO_Init+0x328>)
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	089b      	lsrs	r3, r3, #2
 8007f46:	3302      	adds	r3, #2
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f72:	4a34      	ldr	r2, [pc, #208]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f78:	4b32      	ldr	r3, [pc, #200]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f9c:	4a29      	ldr	r2, [pc, #164]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007fa2:	4b28      	ldr	r3, [pc, #160]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	43db      	mvns	r3, r3
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fc6:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ff0:	4a14      	ldr	r2, [pc, #80]	; (8008044 <HAL_GPIO_Init+0x354>)
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2b0f      	cmp	r3, #15
 8008000:	f67f ae84 	bls.w	8007d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	3724      	adds	r7, #36	; 0x24
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40023800 	.word	0x40023800
 8008018:	40013800 	.word	0x40013800
 800801c:	40020000 	.word	0x40020000
 8008020:	40020400 	.word	0x40020400
 8008024:	40020800 	.word	0x40020800
 8008028:	40020c00 	.word	0x40020c00
 800802c:	40021000 	.word	0x40021000
 8008030:	40021400 	.word	0x40021400
 8008034:	40021800 	.word	0x40021800
 8008038:	40021c00 	.word	0x40021c00
 800803c:	40022000 	.word	0x40022000
 8008040:	40022400 	.word	0x40022400
 8008044:	40013c00 	.word	0x40013c00

08008048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	887b      	ldrh	r3, [r7, #2]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008060:	2301      	movs	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	e001      	b.n	800806a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
 8008084:	4613      	mov	r3, r2
 8008086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008088:	787b      	ldrb	r3, [r7, #1]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800808e:	887a      	ldrh	r2, [r7, #2]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008094:	e003      	b.n	800809e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008096:	887b      	ldrh	r3, [r7, #2]
 8008098:	041a      	lsls	r2, r3, #16
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080bc:	887a      	ldrh	r2, [r7, #2]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4013      	ands	r3, r2
 80080c2:	041a      	lsls	r2, r3, #16
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	43d9      	mvns	r1, r3
 80080c8:	887b      	ldrh	r3, [r7, #2]
 80080ca:	400b      	ands	r3, r1
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	619a      	str	r2, [r3, #24]
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080ea:	4b08      	ldr	r3, [pc, #32]	; (800810c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	4013      	ands	r3, r2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d006      	beq.n	8008104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080f6:	4a05      	ldr	r2, [pc, #20]	; (800810c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f806 	bl	8008110 <HAL_GPIO_EXTI_Callback>
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	40013c00 	.word	0x40013c00

08008110 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e12b      	b.n	8008392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7f9 ff96 	bl	8002080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2224      	movs	r2, #36	; 0x24
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800817a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800818a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800818c:	f001 fc76 	bl	8009a7c <HAL_RCC_GetPCLK1Freq>
 8008190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	4a81      	ldr	r2, [pc, #516]	; (800839c <HAL_I2C_Init+0x274>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d807      	bhi.n	80081ac <HAL_I2C_Init+0x84>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a80      	ldr	r2, [pc, #512]	; (80083a0 <HAL_I2C_Init+0x278>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	bf94      	ite	ls
 80081a4:	2301      	movls	r3, #1
 80081a6:	2300      	movhi	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	e006      	b.n	80081ba <HAL_I2C_Init+0x92>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a7d      	ldr	r2, [pc, #500]	; (80083a4 <HAL_I2C_Init+0x27c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	bf94      	ite	ls
 80081b4:	2301      	movls	r3, #1
 80081b6:	2300      	movhi	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e0e7      	b.n	8008392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	4a78      	ldr	r2, [pc, #480]	; (80083a8 <HAL_I2C_Init+0x280>)
 80081c6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ca:	0c9b      	lsrs	r3, r3, #18
 80081cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a6a      	ldr	r2, [pc, #424]	; (800839c <HAL_I2C_Init+0x274>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d802      	bhi.n	80081fc <HAL_I2C_Init+0xd4>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	3301      	adds	r3, #1
 80081fa:	e009      	b.n	8008210 <HAL_I2C_Init+0xe8>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008202:	fb02 f303 	mul.w	r3, r2, r3
 8008206:	4a69      	ldr	r2, [pc, #420]	; (80083ac <HAL_I2C_Init+0x284>)
 8008208:	fba2 2303 	umull	r2, r3, r2, r3
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	3301      	adds	r3, #1
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6812      	ldr	r2, [r2, #0]
 8008214:	430b      	orrs	r3, r1
 8008216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	495c      	ldr	r1, [pc, #368]	; (800839c <HAL_I2C_Init+0x274>)
 800822c:	428b      	cmp	r3, r1
 800822e:	d819      	bhi.n	8008264 <HAL_I2C_Init+0x13c>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	1e59      	subs	r1, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	fbb1 f3f3 	udiv	r3, r1, r3
 800823e:	1c59      	adds	r1, r3, #1
 8008240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008244:	400b      	ands	r3, r1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <HAL_I2C_Init+0x138>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1e59      	subs	r1, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	fbb1 f3f3 	udiv	r3, r1, r3
 8008258:	3301      	adds	r3, #1
 800825a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800825e:	e051      	b.n	8008304 <HAL_I2C_Init+0x1dc>
 8008260:	2304      	movs	r3, #4
 8008262:	e04f      	b.n	8008304 <HAL_I2C_Init+0x1dc>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d111      	bne.n	8008290 <HAL_I2C_Init+0x168>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1e58      	subs	r0, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6859      	ldr	r1, [r3, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	440b      	add	r3, r1
 800827a:	fbb0 f3f3 	udiv	r3, r0, r3
 800827e:	3301      	adds	r3, #1
 8008280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	e012      	b.n	80082b6 <HAL_I2C_Init+0x18e>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	1e58      	subs	r0, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6859      	ldr	r1, [r3, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	0099      	lsls	r1, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082a6:	3301      	adds	r3, #1
 80082a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf0c      	ite	eq
 80082b0:	2301      	moveq	r3, #1
 80082b2:	2300      	movne	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <HAL_I2C_Init+0x196>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e022      	b.n	8008304 <HAL_I2C_Init+0x1dc>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10e      	bne.n	80082e4 <HAL_I2C_Init+0x1bc>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1e58      	subs	r0, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6859      	ldr	r1, [r3, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	440b      	add	r3, r1
 80082d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80082d8:	3301      	adds	r3, #1
 80082da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	e00f      	b.n	8008304 <HAL_I2C_Init+0x1dc>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1e58      	subs	r0, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6859      	ldr	r1, [r3, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	0099      	lsls	r1, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80082fa:	3301      	adds	r3, #1
 80082fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	6809      	ldr	r1, [r1, #0]
 8008308:	4313      	orrs	r3, r2
 800830a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6911      	ldr	r1, [r2, #16]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68d2      	ldr	r2, [r2, #12]
 800833e:	4311      	orrs	r1, r2
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	430b      	orrs	r3, r1
 8008346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695a      	ldr	r2, [r3, #20]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0201 	orr.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	000186a0 	.word	0x000186a0
 80083a0:	001e847f 	.word	0x001e847f
 80083a4:	003d08ff 	.word	0x003d08ff
 80083a8:	431bde83 	.word	0x431bde83
 80083ac:	10624dd3 	.word	0x10624dd3

080083b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	461a      	mov	r2, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	817b      	strh	r3, [r7, #10]
 80083c2:	460b      	mov	r3, r1
 80083c4:	813b      	strh	r3, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083ca:	f7fe ff4d 	bl	8007268 <HAL_GetTick>
 80083ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b20      	cmp	r3, #32
 80083da:	f040 80d9 	bne.w	8008590 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2319      	movs	r3, #25
 80083e4:	2201      	movs	r2, #1
 80083e6:	496d      	ldr	r1, [pc, #436]	; (800859c <HAL_I2C_Mem_Write+0x1ec>)
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fc7f 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
 80083f6:	e0cc      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_I2C_Mem_Write+0x56>
 8008402:	2302      	movs	r3, #2
 8008404:	e0c5      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d007      	beq.n	800842c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800843a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2221      	movs	r2, #33	; 0x21
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2240      	movs	r2, #64	; 0x40
 8008448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a3a      	ldr	r2, [r7, #32]
 8008456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800845c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4a4d      	ldr	r2, [pc, #308]	; (80085a0 <HAL_I2C_Mem_Write+0x1f0>)
 800846c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800846e:	88f8      	ldrh	r0, [r7, #6]
 8008470:	893a      	ldrh	r2, [r7, #8]
 8008472:	8979      	ldrh	r1, [r7, #10]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4603      	mov	r3, r0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fab6 	bl	80089f0 <I2C_RequestMemoryWrite>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d052      	beq.n	8008530 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e081      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fd00 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d107      	bne.n	80084b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e06b      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d11b      	bne.n	8008530 <HAL_I2C_Mem_Write+0x180>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d017      	beq.n	8008530 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	781a      	ldrb	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1aa      	bne.n	800848e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fcec 	bl	8008f1a <I2C_WaitOnBTFFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00d      	beq.n	8008564 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	2b04      	cmp	r3, #4
 800854e:	d107      	bne.n	8008560 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800855e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e016      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	e000      	b.n	8008592 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	00100002 	.word	0x00100002
 80085a0:	ffff0000 	.word	0xffff0000

080085a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	; 0x30
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	461a      	mov	r2, r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	817b      	strh	r3, [r7, #10]
 80085b6:	460b      	mov	r3, r1
 80085b8:	813b      	strh	r3, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085be:	f7fe fe53 	bl	8007268 <HAL_GetTick>
 80085c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	f040 8208 	bne.w	80089e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	2319      	movs	r3, #25
 80085d8:	2201      	movs	r2, #1
 80085da:	497b      	ldr	r1, [pc, #492]	; (80087c8 <HAL_I2C_Mem_Read+0x224>)
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb85 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
 80085ea:	e1fb      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_I2C_Mem_Read+0x56>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e1f4      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b01      	cmp	r3, #1
 800860e:	d007      	beq.n	8008620 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800862e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2222      	movs	r2, #34	; 0x22
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2240      	movs	r2, #64	; 0x40
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008656:	b29a      	uxth	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a5b      	ldr	r2, [pc, #364]	; (80087cc <HAL_I2C_Mem_Read+0x228>)
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008662:	88f8      	ldrh	r0, [r7, #6]
 8008664:	893a      	ldrh	r2, [r7, #8]
 8008666:	8979      	ldrh	r1, [r7, #10]
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4603      	mov	r3, r0
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fa52 	bl	8008b1c <I2C_RequestMemoryRead>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e1b0      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d113      	bne.n	80086b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800868a:	2300      	movs	r3, #0
 800868c:	623b      	str	r3, [r7, #32]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	623b      	str	r3, [r7, #32]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	623b      	str	r3, [r7, #32]
 800869e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e184      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d11b      	bne.n	80086f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e164      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d11b      	bne.n	8008732 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800871a:	2300      	movs	r3, #0
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	61bb      	str	r3, [r7, #24]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	e144      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008748:	e138      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874e:	2b03      	cmp	r3, #3
 8008750:	f200 80f1 	bhi.w	8008936 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	2b01      	cmp	r3, #1
 800875a:	d123      	bne.n	80087a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fc1b 	bl	8008f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e139      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878c:	3b01      	subs	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087a2:	e10b      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d14e      	bne.n	800884a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	2200      	movs	r2, #0
 80087b4:	4906      	ldr	r1, [pc, #24]	; (80087d0 <HAL_I2C_Mem_Read+0x22c>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fa98 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d008      	beq.n	80087d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e10e      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
 80087c6:	bf00      	nop
 80087c8:	00100002 	.word	0x00100002
 80087cc:	ffff0000 	.word	0xffff0000
 80087d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008832:	3b01      	subs	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008848:	e0b8      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2200      	movs	r2, #0
 8008852:	4966      	ldr	r1, [pc, #408]	; (80089ec <HAL_I2C_Mem_Read+0x448>)
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fa49 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0bf      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691a      	ldr	r2, [r3, #16]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	2200      	movs	r2, #0
 80088ae:	494f      	ldr	r1, [pc, #316]	; (80089ec <HAL_I2C_Mem_Read+0x448>)
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fa1b 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e091      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691a      	ldr	r2, [r3, #16]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008934:	e042      	b.n	80089bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fb2e 	bl	8008f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e04c      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b04      	cmp	r3, #4
 8008988:	d118      	bne.n	80089bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f47f aec2 	bne.w	800874a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	e000      	b.n	80089e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80089e2:	2302      	movs	r3, #2
  }
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3728      	adds	r7, #40	; 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	00010004 	.word	0x00010004

080089f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	817b      	strh	r3, [r7, #10]
 8008a02:	460b      	mov	r3, r1
 8008a04:	813b      	strh	r3, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f960 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00d      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a40:	d103      	bne.n	8008a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e05f      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a4e:	897b      	ldrh	r3, [r7, #10]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	492d      	ldr	r1, [pc, #180]	; (8008b18 <I2C_RequestMemoryWrite+0x128>)
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f998 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e04c      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	6a39      	ldr	r1, [r7, #32]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fa02 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00d      	beq.n	8008ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d107      	bne.n	8008ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e02b      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d105      	bne.n	8008ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008abc:	893b      	ldrh	r3, [r7, #8]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	611a      	str	r2, [r3, #16]
 8008ac6:	e021      	b.n	8008b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f9dc 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d107      	bne.n	8008afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e005      	b.n	8008b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	00010002 	.word	0x00010002

08008b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	817b      	strh	r3, [r7, #10]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	813b      	strh	r3, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f8c2 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00d      	beq.n	8008b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b7c:	d103      	bne.n	8008b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e0aa      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b8a:	897b      	ldrh	r3, [r7, #10]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	4952      	ldr	r1, [pc, #328]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f8fa 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e097      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc8:	6a39      	ldr	r1, [r7, #32]
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f964 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d107      	bne.n	8008bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e076      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf8:	893b      	ldrh	r3, [r7, #8]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	611a      	str	r2, [r3, #16]
 8008c02:	e021      	b.n	8008c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c04:	893b      	ldrh	r3, [r7, #8]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	6a39      	ldr	r1, [r7, #32]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f93e 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d107      	bne.n	8008c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e050      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	6a39      	ldr	r1, [r7, #32]
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f923 	bl	8008e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00d      	beq.n	8008c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d107      	bne.n	8008c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e035      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f82b 	bl	8008cec <I2C_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00d      	beq.n	8008cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008caa:	d103      	bne.n	8008cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e013      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008cb8:	897b      	ldrh	r3, [r7, #10]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	4906      	ldr	r1, [pc, #24]	; (8008ce8 <I2C_RequestMemoryRead+0x1cc>)
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f863 	bl	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	00010002 	.word	0x00010002

08008cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfc:	e025      	b.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d04:	d021      	beq.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d06:	f7fe faaf 	bl	8007268 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d302      	bcc.n	8008d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d116      	bne.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f043 0220 	orr.w	r2, r3, #32
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e023      	b.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10d      	bne.n	8008d70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	43da      	mvns	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	e00c      	b.n	8008d8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d0b6      	beq.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008da8:	e051      	b.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db8:	d123      	bne.n	8008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	f043 0204 	orr.w	r2, r3, #4
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e046      	b.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e08:	d021      	beq.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0a:	f7fe fa2d 	bl	8007268 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d302      	bcc.n	8008e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d116      	bne.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	f043 0220 	orr.w	r2, r3, #32
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e020      	b.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d10c      	bne.n	8008e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	43da      	mvns	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4013      	ands	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2301      	movne	r3, #1
 8008e6c:	2300      	moveq	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	e00b      	b.n	8008e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	43da      	mvns	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bf14      	ite	ne
 8008e84:	2301      	movne	r3, #1
 8008e86:	2300      	moveq	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d18d      	bne.n	8008daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ea4:	e02d      	b.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f8ce 	bl	8009048 <I2C_IsAcknowledgeFailed>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e02d      	b.n	8008f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d021      	beq.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ebe:	f7fe f9d3 	bl	8007268 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d302      	bcc.n	8008ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d116      	bne.n	8008f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	f043 0220 	orr.w	r2, r3, #32
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e007      	b.n	8008f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d1ca      	bne.n	8008ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f26:	e02d      	b.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 f88d 	bl	8009048 <I2C_IsAcknowledgeFailed>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e02d      	b.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d021      	beq.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f40:	f7fe f992 	bl	8007268 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d302      	bcc.n	8008f56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d116      	bne.n	8008f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	f043 0220 	orr.w	r2, r3, #32
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e007      	b.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d1ca      	bne.n	8008f28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fa8:	e042      	b.n	8009030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d119      	bne.n	8008fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0210 	mvn.w	r2, #16
 8008fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e029      	b.n	8009040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fec:	f7fe f93c 	bl	8007268 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d116      	bne.n	8009030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	f043 0220 	orr.w	r2, r3, #32
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e007      	b.n	8009040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903a:	2b40      	cmp	r3, #64	; 0x40
 800903c:	d1b5      	bne.n	8008faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800905a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905e:	d11b      	bne.n	8009098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	f043 0204 	orr.w	r2, r3, #4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d129      	bne.n	8009110 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2224      	movs	r2, #36	; 0x24
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0201 	bic.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0210 	bic.w	r2, r2, #16
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009110:	2302      	movs	r3, #2
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b20      	cmp	r3, #32
 8009136:	d12a      	bne.n	800918e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2224      	movs	r2, #36	; 0x24
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0201 	bic.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009158:	89fb      	ldrh	r3, [r7, #14]
 800915a:	f023 030f 	bic.w	r3, r3, #15
 800915e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	b29a      	uxth	r2, r3
 8009164:	89fb      	ldrh	r3, [r7, #14]
 8009166:	4313      	orrs	r3, r2
 8009168:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	89fa      	ldrh	r2, [r7, #14]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 0201 	orr.w	r2, r2, #1
 8009180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	e000      	b.n	8009190 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800918e:	2302      	movs	r3, #2
  }
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e267      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d075      	beq.n	80092a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ba:	4b88      	ldr	r3, [pc, #544]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 030c 	and.w	r3, r3, #12
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d00c      	beq.n	80091e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c6:	4b85      	ldr	r3, [pc, #532]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d112      	bne.n	80091f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091d2:	4b82      	ldr	r3, [pc, #520]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091de:	d10b      	bne.n	80091f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e0:	4b7e      	ldr	r3, [pc, #504]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d05b      	beq.n	80092a4 <HAL_RCC_OscConfig+0x108>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d157      	bne.n	80092a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e242      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009200:	d106      	bne.n	8009210 <HAL_RCC_OscConfig+0x74>
 8009202:	4b76      	ldr	r3, [pc, #472]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a75      	ldr	r2, [pc, #468]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	e01d      	b.n	800924c <HAL_RCC_OscConfig+0xb0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009218:	d10c      	bne.n	8009234 <HAL_RCC_OscConfig+0x98>
 800921a:	4b70      	ldr	r3, [pc, #448]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a6f      	ldr	r2, [pc, #444]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4b6d      	ldr	r3, [pc, #436]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a6c      	ldr	r2, [pc, #432]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 800922c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e00b      	b.n	800924c <HAL_RCC_OscConfig+0xb0>
 8009234:	4b69      	ldr	r3, [pc, #420]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a68      	ldr	r2, [pc, #416]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 800923a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4b66      	ldr	r3, [pc, #408]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a65      	ldr	r2, [pc, #404]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800924a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d013      	beq.n	800927c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009254:	f7fe f808 	bl	8007268 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925c:	f7fe f804 	bl	8007268 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	; 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e207      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800926e:	4b5b      	ldr	r3, [pc, #364]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0xc0>
 800927a:	e014      	b.n	80092a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800927c:	f7fd fff4 	bl	8007268 <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009284:	f7fd fff0 	bl	8007268 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b64      	cmp	r3, #100	; 0x64
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e1f3      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009296:	4b51      	ldr	r3, [pc, #324]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0xe8>
 80092a2:	e000      	b.n	80092a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d063      	beq.n	800937a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092b2:	4b4a      	ldr	r3, [pc, #296]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092be:	4b47      	ldr	r3, [pc, #284]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d11c      	bne.n	8009304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ca:	4b44      	ldr	r3, [pc, #272]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d116      	bne.n	8009304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092d6:	4b41      	ldr	r3, [pc, #260]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <HAL_RCC_OscConfig+0x152>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d001      	beq.n	80092ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e1c7      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ee:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4937      	ldr	r1, [pc, #220]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009302:	e03a      	b.n	800937a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d020      	beq.n	800934e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800930c:	4b34      	ldr	r3, [pc, #208]	; (80093e0 <HAL_RCC_OscConfig+0x244>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009312:	f7fd ffa9 	bl	8007268 <HAL_GetTick>
 8009316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009318:	e008      	b.n	800932c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800931a:	f7fd ffa5 	bl	8007268 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e1a8      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800932c:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	4925      	ldr	r1, [pc, #148]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009348:	4313      	orrs	r3, r2
 800934a:	600b      	str	r3, [r1, #0]
 800934c:	e015      	b.n	800937a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800934e:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCC_OscConfig+0x244>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009354:	f7fd ff88 	bl	8007268 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800935c:	f7fd ff84 	bl	8007268 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e187      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800936e:	4b1b      	ldr	r3, [pc, #108]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f0      	bne.n	800935c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d036      	beq.n	80093f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d016      	beq.n	80093bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <HAL_RCC_OscConfig+0x248>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009394:	f7fd ff68 	bl	8007268 <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800939a:	e008      	b.n	80093ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800939c:	f7fd ff64 	bl	8007268 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e167      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <HAL_RCC_OscConfig+0x240>)
 80093b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f0      	beq.n	800939c <HAL_RCC_OscConfig+0x200>
 80093ba:	e01b      	b.n	80093f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <HAL_RCC_OscConfig+0x248>)
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093c2:	f7fd ff51 	bl	8007268 <HAL_GetTick>
 80093c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093c8:	e00e      	b.n	80093e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093ca:	f7fd ff4d 	bl	8007268 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d907      	bls.n	80093e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e150      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
 80093dc:	40023800 	.word	0x40023800
 80093e0:	42470000 	.word	0x42470000
 80093e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093e8:	4b88      	ldr	r3, [pc, #544]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80093ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1ea      	bne.n	80093ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8097 	beq.w	8009530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009402:	2300      	movs	r3, #0
 8009404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009406:	4b81      	ldr	r3, [pc, #516]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10f      	bne.n	8009432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009412:	2300      	movs	r3, #0
 8009414:	60bb      	str	r3, [r7, #8]
 8009416:	4b7d      	ldr	r3, [pc, #500]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	4a7c      	ldr	r2, [pc, #496]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800941c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009420:	6413      	str	r3, [r2, #64]	; 0x40
 8009422:	4b7a      	ldr	r3, [pc, #488]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009432:	4b77      	ldr	r3, [pc, #476]	; (8009610 <HAL_RCC_OscConfig+0x474>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943a:	2b00      	cmp	r3, #0
 800943c:	d118      	bne.n	8009470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800943e:	4b74      	ldr	r3, [pc, #464]	; (8009610 <HAL_RCC_OscConfig+0x474>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a73      	ldr	r2, [pc, #460]	; (8009610 <HAL_RCC_OscConfig+0x474>)
 8009444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800944a:	f7fd ff0d 	bl	8007268 <HAL_GetTick>
 800944e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009452:	f7fd ff09 	bl	8007268 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e10c      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009464:	4b6a      	ldr	r3, [pc, #424]	; (8009610 <HAL_RCC_OscConfig+0x474>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d106      	bne.n	8009486 <HAL_RCC_OscConfig+0x2ea>
 8009478:	4b64      	ldr	r3, [pc, #400]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	4a63      	ldr	r2, [pc, #396]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	6713      	str	r3, [r2, #112]	; 0x70
 8009484:	e01c      	b.n	80094c0 <HAL_RCC_OscConfig+0x324>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b05      	cmp	r3, #5
 800948c:	d10c      	bne.n	80094a8 <HAL_RCC_OscConfig+0x30c>
 800948e:	4b5f      	ldr	r3, [pc, #380]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009492:	4a5e      	ldr	r2, [pc, #376]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009494:	f043 0304 	orr.w	r3, r3, #4
 8009498:	6713      	str	r3, [r2, #112]	; 0x70
 800949a:	4b5c      	ldr	r3, [pc, #368]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	4a5b      	ldr	r2, [pc, #364]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094a0:	f043 0301 	orr.w	r3, r3, #1
 80094a4:	6713      	str	r3, [r2, #112]	; 0x70
 80094a6:	e00b      	b.n	80094c0 <HAL_RCC_OscConfig+0x324>
 80094a8:	4b58      	ldr	r3, [pc, #352]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ac:	4a57      	ldr	r2, [pc, #348]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	6713      	str	r3, [r2, #112]	; 0x70
 80094b4:	4b55      	ldr	r3, [pc, #340]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b8:	4a54      	ldr	r2, [pc, #336]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094ba:	f023 0304 	bic.w	r3, r3, #4
 80094be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d015      	beq.n	80094f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c8:	f7fd fece 	bl	8007268 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ce:	e00a      	b.n	80094e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094d0:	f7fd feca 	bl	8007268 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	f241 3288 	movw	r2, #5000	; 0x1388
 80094de:	4293      	cmp	r3, r2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e0cb      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094e6:	4b49      	ldr	r3, [pc, #292]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80094e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0ee      	beq.n	80094d0 <HAL_RCC_OscConfig+0x334>
 80094f2:	e014      	b.n	800951e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094f4:	f7fd feb8 	bl	8007268 <HAL_GetTick>
 80094f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094fa:	e00a      	b.n	8009512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094fc:	f7fd feb4 	bl	8007268 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	f241 3288 	movw	r2, #5000	; 0x1388
 800950a:	4293      	cmp	r3, r2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e0b5      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009512:	4b3e      	ldr	r3, [pc, #248]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ee      	bne.n	80094fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d105      	bne.n	8009530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009524:	4b39      	ldr	r3, [pc, #228]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	4a38      	ldr	r2, [pc, #224]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800952a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800952e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 80a1 	beq.w	800967c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800953a:	4b34      	ldr	r3, [pc, #208]	; (800960c <HAL_RCC_OscConfig+0x470>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f003 030c 	and.w	r3, r3, #12
 8009542:	2b08      	cmp	r3, #8
 8009544:	d05c      	beq.n	8009600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d141      	bne.n	80095d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800954e:	4b31      	ldr	r3, [pc, #196]	; (8009614 <HAL_RCC_OscConfig+0x478>)
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009554:	f7fd fe88 	bl	8007268 <HAL_GetTick>
 8009558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800955a:	e008      	b.n	800956e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800955c:	f7fd fe84 	bl	8007268 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e087      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800956e:	4b27      	ldr	r3, [pc, #156]	; (800960c <HAL_RCC_OscConfig+0x470>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f0      	bne.n	800955c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	69da      	ldr	r2, [r3, #28]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	019b      	lsls	r3, r3, #6
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	3b01      	subs	r3, #1
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	061b      	lsls	r3, r3, #24
 800959e:	491b      	ldr	r1, [pc, #108]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095a4:	4b1b      	ldr	r3, [pc, #108]	; (8009614 <HAL_RCC_OscConfig+0x478>)
 80095a6:	2201      	movs	r2, #1
 80095a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095aa:	f7fd fe5d 	bl	8007268 <HAL_GetTick>
 80095ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095b0:	e008      	b.n	80095c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095b2:	f7fd fe59 	bl	8007268 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d901      	bls.n	80095c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e05c      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095c4:	4b11      	ldr	r3, [pc, #68]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0f0      	beq.n	80095b2 <HAL_RCC_OscConfig+0x416>
 80095d0:	e054      	b.n	800967c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d2:	4b10      	ldr	r3, [pc, #64]	; (8009614 <HAL_RCC_OscConfig+0x478>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d8:	f7fd fe46 	bl	8007268 <HAL_GetTick>
 80095dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095de:	e008      	b.n	80095f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095e0:	f7fd fe42 	bl	8007268 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d901      	bls.n	80095f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e045      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <HAL_RCC_OscConfig+0x470>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f0      	bne.n	80095e0 <HAL_RCC_OscConfig+0x444>
 80095fe:	e03d      	b.n	800967c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d107      	bne.n	8009618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e038      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
 800960c:	40023800 	.word	0x40023800
 8009610:	40007000 	.word	0x40007000
 8009614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009618:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <HAL_RCC_OscConfig+0x4ec>)
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d028      	beq.n	8009678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009630:	429a      	cmp	r2, r3
 8009632:	d121      	bne.n	8009678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963e:	429a      	cmp	r2, r3
 8009640:	d11a      	bne.n	8009678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009648:	4013      	ands	r3, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800964e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009650:	4293      	cmp	r3, r2
 8009652:	d111      	bne.n	8009678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	3b01      	subs	r3, #1
 8009662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009664:	429a      	cmp	r2, r3
 8009666:	d107      	bne.n	8009678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009674:	429a      	cmp	r2, r3
 8009676:	d001      	beq.n	800967c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40023800 	.word	0x40023800

0800968c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0cc      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096a0:	4b68      	ldr	r3, [pc, #416]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d90c      	bls.n	80096c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ae:	4b65      	ldr	r3, [pc, #404]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096b6:	4b63      	ldr	r3, [pc, #396]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d001      	beq.n	80096c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0b8      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d020      	beq.n	8009716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096e0:	4b59      	ldr	r3, [pc, #356]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4a58      	ldr	r2, [pc, #352]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096f8:	4b53      	ldr	r3, [pc, #332]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	4a52      	ldr	r2, [pc, #328]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80096fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009704:	4b50      	ldr	r3, [pc, #320]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	494d      	ldr	r1, [pc, #308]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009712:	4313      	orrs	r3, r2
 8009714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d044      	beq.n	80097ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d107      	bne.n	800973a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800972a:	4b47      	ldr	r3, [pc, #284]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d119      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e07f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d003      	beq.n	800974a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009746:	2b03      	cmp	r3, #3
 8009748:	d107      	bne.n	800975a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800974a:	4b3f      	ldr	r3, [pc, #252]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e06f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800975a:	4b3b      	ldr	r3, [pc, #236]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e067      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800976a:	4b37      	ldr	r3, [pc, #220]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f023 0203 	bic.w	r2, r3, #3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4934      	ldr	r1, [pc, #208]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009778:	4313      	orrs	r3, r2
 800977a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800977c:	f7fd fd74 	bl	8007268 <HAL_GetTick>
 8009780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009782:	e00a      	b.n	800979a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009784:	f7fd fd70 	bl	8007268 <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009792:	4293      	cmp	r3, r2
 8009794:	d901      	bls.n	800979a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e04f      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800979a:	4b2b      	ldr	r3, [pc, #172]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 020c 	and.w	r2, r3, #12
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d1eb      	bne.n	8009784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097ac:	4b25      	ldr	r3, [pc, #148]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d20c      	bcs.n	80097d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ba:	4b22      	ldr	r3, [pc, #136]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c2:	4b20      	ldr	r3, [pc, #128]	; (8009844 <HAL_RCC_ClockConfig+0x1b8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d001      	beq.n	80097d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e032      	b.n	800983a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097e0:	4b19      	ldr	r3, [pc, #100]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	4916      	ldr	r1, [pc, #88]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097fe:	4b12      	ldr	r3, [pc, #72]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	490e      	ldr	r1, [pc, #56]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800980e:	4313      	orrs	r3, r2
 8009810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009812:	f000 f821 	bl	8009858 <HAL_RCC_GetSysClockFreq>
 8009816:	4602      	mov	r2, r0
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <HAL_RCC_ClockConfig+0x1bc>)
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	091b      	lsrs	r3, r3, #4
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	490a      	ldr	r1, [pc, #40]	; (800984c <HAL_RCC_ClockConfig+0x1c0>)
 8009824:	5ccb      	ldrb	r3, [r1, r3]
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <HAL_RCC_ClockConfig+0x1c4>)
 800982c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <HAL_RCC_ClockConfig+0x1c8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd fcd4 	bl	80071e0 <HAL_InitTick>

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	40023c00 	.word	0x40023c00
 8009848:	40023800 	.word	0x40023800
 800984c:	08014d0c 	.word	0x08014d0c
 8009850:	20000180 	.word	0x20000180
 8009854:	200002b8 	.word	0x200002b8

08009858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800985c:	b094      	sub	sp, #80	; 0x50
 800985e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	647b      	str	r3, [r7, #68]	; 0x44
 8009864:	2300      	movs	r3, #0
 8009866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009868:	2300      	movs	r3, #0
 800986a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009870:	4b79      	ldr	r3, [pc, #484]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f003 030c 	and.w	r3, r3, #12
 8009878:	2b08      	cmp	r3, #8
 800987a:	d00d      	beq.n	8009898 <HAL_RCC_GetSysClockFreq+0x40>
 800987c:	2b08      	cmp	r3, #8
 800987e:	f200 80e1 	bhi.w	8009a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_RCC_GetSysClockFreq+0x34>
 8009886:	2b04      	cmp	r3, #4
 8009888:	d003      	beq.n	8009892 <HAL_RCC_GetSysClockFreq+0x3a>
 800988a:	e0db      	b.n	8009a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800988c:	4b73      	ldr	r3, [pc, #460]	; (8009a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800988e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009890:	e0db      	b.n	8009a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009892:	4b73      	ldr	r3, [pc, #460]	; (8009a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8009894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009896:	e0d8      	b.n	8009a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009898:	4b6f      	ldr	r3, [pc, #444]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098a2:	4b6d      	ldr	r3, [pc, #436]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d063      	beq.n	8009976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098ae:	4b6a      	ldr	r3, [pc, #424]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	099b      	lsrs	r3, r3, #6
 80098b4:	2200      	movs	r2, #0
 80098b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80098b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
 80098c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80098ca:	4622      	mov	r2, r4
 80098cc:	462b      	mov	r3, r5
 80098ce:	f04f 0000 	mov.w	r0, #0
 80098d2:	f04f 0100 	mov.w	r1, #0
 80098d6:	0159      	lsls	r1, r3, #5
 80098d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098dc:	0150      	lsls	r0, r2, #5
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4621      	mov	r1, r4
 80098e4:	1a51      	subs	r1, r2, r1
 80098e6:	6139      	str	r1, [r7, #16]
 80098e8:	4629      	mov	r1, r5
 80098ea:	eb63 0301 	sbc.w	r3, r3, r1
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098fc:	4659      	mov	r1, fp
 80098fe:	018b      	lsls	r3, r1, #6
 8009900:	4651      	mov	r1, sl
 8009902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009906:	4651      	mov	r1, sl
 8009908:	018a      	lsls	r2, r1, #6
 800990a:	4651      	mov	r1, sl
 800990c:	ebb2 0801 	subs.w	r8, r2, r1
 8009910:	4659      	mov	r1, fp
 8009912:	eb63 0901 	sbc.w	r9, r3, r1
 8009916:	f04f 0200 	mov.w	r2, #0
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800992a:	4690      	mov	r8, r2
 800992c:	4699      	mov	r9, r3
 800992e:	4623      	mov	r3, r4
 8009930:	eb18 0303 	adds.w	r3, r8, r3
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	462b      	mov	r3, r5
 8009938:	eb49 0303 	adc.w	r3, r9, r3
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800994a:	4629      	mov	r1, r5
 800994c:	024b      	lsls	r3, r1, #9
 800994e:	4621      	mov	r1, r4
 8009950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009954:	4621      	mov	r1, r4
 8009956:	024a      	lsls	r2, r1, #9
 8009958:	4610      	mov	r0, r2
 800995a:	4619      	mov	r1, r3
 800995c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800995e:	2200      	movs	r2, #0
 8009960:	62bb      	str	r3, [r7, #40]	; 0x28
 8009962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009968:	f7f7 f988 	bl	8000c7c <__aeabi_uldivmod>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4613      	mov	r3, r2
 8009972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009974:	e058      	b.n	8009a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009976:	4b38      	ldr	r3, [pc, #224]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	099b      	lsrs	r3, r3, #6
 800997c:	2200      	movs	r2, #0
 800997e:	4618      	mov	r0, r3
 8009980:	4611      	mov	r1, r2
 8009982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009986:	623b      	str	r3, [r7, #32]
 8009988:	2300      	movs	r3, #0
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
 800998c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009990:	4642      	mov	r2, r8
 8009992:	464b      	mov	r3, r9
 8009994:	f04f 0000 	mov.w	r0, #0
 8009998:	f04f 0100 	mov.w	r1, #0
 800999c:	0159      	lsls	r1, r3, #5
 800999e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099a2:	0150      	lsls	r0, r2, #5
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4641      	mov	r1, r8
 80099aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80099ae:	4649      	mov	r1, r9
 80099b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	f04f 0300 	mov.w	r3, #0
 80099bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80099c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80099c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80099c8:	ebb2 040a 	subs.w	r4, r2, sl
 80099cc:	eb63 050b 	sbc.w	r5, r3, fp
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	f04f 0300 	mov.w	r3, #0
 80099d8:	00eb      	lsls	r3, r5, #3
 80099da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099de:	00e2      	lsls	r2, r4, #3
 80099e0:	4614      	mov	r4, r2
 80099e2:	461d      	mov	r5, r3
 80099e4:	4643      	mov	r3, r8
 80099e6:	18e3      	adds	r3, r4, r3
 80099e8:	603b      	str	r3, [r7, #0]
 80099ea:	464b      	mov	r3, r9
 80099ec:	eb45 0303 	adc.w	r3, r5, r3
 80099f0:	607b      	str	r3, [r7, #4]
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099fe:	4629      	mov	r1, r5
 8009a00:	028b      	lsls	r3, r1, #10
 8009a02:	4621      	mov	r1, r4
 8009a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a08:	4621      	mov	r1, r4
 8009a0a:	028a      	lsls	r2, r1, #10
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a12:	2200      	movs	r2, #0
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	61fa      	str	r2, [r7, #28]
 8009a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a1c:	f7f7 f92e 	bl	8000c7c <__aeabi_uldivmod>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4613      	mov	r3, r2
 8009a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a28:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	0c1b      	lsrs	r3, r3, #16
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	3301      	adds	r3, #1
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a42:	e002      	b.n	8009a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8009a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3750      	adds	r7, #80	; 0x50
 8009a50:	46bd      	mov	sp, r7
 8009a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a56:	bf00      	nop
 8009a58:	40023800 	.word	0x40023800
 8009a5c:	00f42400 	.word	0x00f42400
 8009a60:	007a1200 	.word	0x007a1200

08009a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a68:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000180 	.word	0x20000180

08009a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a80:	f7ff fff0 	bl	8009a64 <HAL_RCC_GetHCLKFreq>
 8009a84:	4602      	mov	r2, r0
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	0a9b      	lsrs	r3, r3, #10
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	4903      	ldr	r1, [pc, #12]	; (8009aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a92:	5ccb      	ldrb	r3, [r1, r3]
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	40023800 	.word	0x40023800
 8009aa0:	08014d1c 	.word	0x08014d1c

08009aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009aa8:	f7ff ffdc 	bl	8009a64 <HAL_RCC_GetHCLKFreq>
 8009aac:	4602      	mov	r2, r0
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	0b5b      	lsrs	r3, r3, #13
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	4903      	ldr	r1, [pc, #12]	; (8009ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009aba:	5ccb      	ldrb	r3, [r1, r3]
 8009abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	08014d1c 	.word	0x08014d1c

08009acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d075      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b00:	4b91      	ldr	r3, [pc, #580]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b06:	f7fd fbaf 	bl	8007268 <HAL_GetTick>
 8009b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b0c:	e008      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b0e:	f7fd fbab 	bl	8007268 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e189      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b20:	4b8a      	ldr	r3, [pc, #552]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f0      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d009      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	019a      	lsls	r2, r3, #6
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	071b      	lsls	r3, r3, #28
 8009b44:	4981      	ldr	r1, [pc, #516]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01f      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009b58:	4b7c      	ldr	r3, [pc, #496]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b5e:	0f1b      	lsrs	r3, r3, #28
 8009b60:	f003 0307 	and.w	r3, r3, #7
 8009b64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	019a      	lsls	r2, r3, #6
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	061b      	lsls	r3, r3, #24
 8009b72:	431a      	orrs	r2, r3
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	071b      	lsls	r3, r3, #28
 8009b78:	4974      	ldr	r1, [pc, #464]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009b80:	4b72      	ldr	r3, [pc, #456]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b86:	f023 021f 	bic.w	r2, r3, #31
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	496e      	ldr	r1, [pc, #440]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00d      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	019a      	lsls	r2, r3, #6
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	061b      	lsls	r3, r3, #24
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	071b      	lsls	r3, r3, #28
 8009bb8:	4964      	ldr	r1, [pc, #400]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009bc0:	4b61      	ldr	r3, [pc, #388]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009bc6:	f7fd fb4f 	bl	8007268 <HAL_GetTick>
 8009bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009bcc:	e008      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009bce:	f7fd fb4b 	bl	8007268 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d901      	bls.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e129      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009be0:	4b5a      	ldr	r3, [pc, #360]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0f0      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d079      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009c04:	4b52      	ldr	r3, [pc, #328]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c0a:	f7fd fb2d 	bl	8007268 <HAL_GetTick>
 8009c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c10:	e008      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009c12:	f7fd fb29 	bl	8007268 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e107      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c24:	4b49      	ldr	r3, [pc, #292]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c30:	d0ef      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d020      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c3e:	4b43      	ldr	r3, [pc, #268]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c44:	0f1b      	lsrs	r3, r3, #28
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	019a      	lsls	r2, r3, #6
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	061b      	lsls	r3, r3, #24
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	071b      	lsls	r3, r3, #28
 8009c5e:	493b      	ldr	r1, [pc, #236]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c66:	4b39      	ldr	r3, [pc, #228]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	4934      	ldr	r1, [pc, #208]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01e      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c8c:	4b2f      	ldr	r3, [pc, #188]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c92:	0e1b      	lsrs	r3, r3, #24
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	019a      	lsls	r2, r3, #6
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	061b      	lsls	r3, r3, #24
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	071b      	lsls	r3, r3, #28
 8009cac:	4927      	ldr	r1, [pc, #156]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	4922      	ldr	r1, [pc, #136]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009cca:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009cd0:	f7fd faca 	bl	8007268 <HAL_GetTick>
 8009cd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cd6:	e008      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009cd8:	f7fd fac6 	bl	8007268 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e0a4      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cea:	4b18      	ldr	r3, [pc, #96]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf6:	d1ef      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 808b 	beq.w	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	4b10      	ldr	r3, [pc, #64]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	4a0f      	ldr	r2, [pc, #60]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d14:	6413      	str	r3, [r2, #64]	; 0x40
 8009d16:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009d22:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a0b      	ldr	r2, [pc, #44]	; (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d2e:	f7fd fa9b 	bl	8007268 <HAL_GetTick>
 8009d32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d34:	e010      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d36:	f7fd fa97 	bl	8007268 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d909      	bls.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e075      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009d48:	42470068 	.word	0x42470068
 8009d4c:	40023800 	.word	0x40023800
 8009d50:	42470070 	.word	0x42470070
 8009d54:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009d58:	4b38      	ldr	r3, [pc, #224]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0e8      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009d64:	4b36      	ldr	r3, [pc, #216]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02f      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d028      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d82:	4b2f      	ldr	r3, [pc, #188]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d8c:	4b2d      	ldr	r3, [pc, #180]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d92:	4b2c      	ldr	r3, [pc, #176]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009d98:	4a29      	ldr	r2, [pc, #164]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d9e:	4b28      	ldr	r3, [pc, #160]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d114      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009daa:	f7fd fa5d 	bl	8007268 <HAL_GetTick>
 8009dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009db0:	e00a      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009db2:	f7fd fa59 	bl	8007268 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d901      	bls.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e035      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc8:	4b1d      	ldr	r3, [pc, #116]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ee      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009de0:	d10d      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009de2:	4b17      	ldr	r3, [pc, #92]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df6:	4912      	ldr	r1, [pc, #72]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	608b      	str	r3, [r1, #8]
 8009dfc:	e005      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	4a0f      	ldr	r2, [pc, #60]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e08:	6093      	str	r3, [r2, #8]
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e16:	490a      	ldr	r1, [pc, #40]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009e30:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40007000 	.word	0x40007000
 8009e40:	40023800 	.word	0x40023800
 8009e44:	42470e40 	.word	0x42470e40
 8009e48:	424711e0 	.word	0x424711e0

08009e4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e066      	b.n	8009f30 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7f5b      	ldrb	r3, [r3, #29]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d105      	bne.n	8009e78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7f9 fa86 	bl	8003384 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	22ca      	movs	r2, #202	; 0xca
 8009e84:	625a      	str	r2, [r3, #36]	; 0x24
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2253      	movs	r2, #83	; 0x53
 8009e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa45 	bl	800a31e <RTC_EnterInitMode>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d12c      	bne.n	8009ef8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6899      	ldr	r1, [r3, #8]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	68d2      	ldr	r2, [r2, #12]
 8009ed8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6919      	ldr	r1, [r3, #16]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	041a      	lsls	r2, r3, #16
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa4c 	bl	800a38c <RTC_ExitInitMode>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d113      	bne.n	8009f26 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	22ff      	movs	r2, #255	; 0xff
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f38:	b590      	push	{r4, r7, lr}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	7f1b      	ldrb	r3, [r3, #28]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_RTC_SetTime+0x1c>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e087      	b.n	800a064 <HAL_RTC_SetTime+0x12c>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d126      	bne.n	8009fb4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fa29 	bl	800a3d6 <RTC_ByteToBcd2>
 8009f84:	4603      	mov	r3, r0
 8009f86:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fa22 	bl	800a3d6 <RTC_ByteToBcd2>
 8009f92:	4603      	mov	r3, r0
 8009f94:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f96:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	789b      	ldrb	r3, [r3, #2]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fa1a 	bl	800a3d6 <RTC_ByteToBcd2>
 8009fa2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009fa4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	78db      	ldrb	r3, [r3, #3]
 8009fac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	e018      	b.n	8009fe6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009fd4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009fda:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	78db      	ldrb	r3, [r3, #3]
 8009fe0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	22ca      	movs	r2, #202	; 0xca
 8009fec:	625a      	str	r2, [r3, #36]	; 0x24
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2253      	movs	r2, #83	; 0x53
 8009ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f991 	bl	800a31e <RTC_EnterInitMode>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a000:	7cfb      	ldrb	r3, [r7, #19]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d120      	bne.n	800a048 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a010:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a014:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a024:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6899      	ldr	r1, [r3, #8]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	431a      	orrs	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f9a4 	bl	800a38c <RTC_ExitInitMode>
 800a044:	4603      	mov	r3, r0
 800a046:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a048:	7cfb      	ldrb	r3, [r7, #19]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d102      	bne.n	800a054 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	22ff      	movs	r2, #255	; 0xff
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	771a      	strb	r2, [r3, #28]

  return status;
 800a062:	7cfb      	ldrb	r3, [r7, #19]
}
 800a064:	4618      	mov	r0, r3
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}

0800a06c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a09e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a0a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	0d9b      	lsrs	r3, r3, #22
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11a      	bne.n	800a11e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 f98f 	bl	800a410 <RTC_Bcd2ToByte>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 f986 	bl	800a410 <RTC_Bcd2ToByte>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	789b      	ldrb	r3, [r3, #2]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f97d 	bl	800a410 <RTC_Bcd2ToByte>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a128:	b590      	push	{r4, r7, lr}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	7f1b      	ldrb	r3, [r3, #28]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_RTC_SetDate+0x1c>
 800a140:	2302      	movs	r3, #2
 800a142:	e071      	b.n	800a228 <HAL_RTC_SetDate+0x100>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2201      	movs	r2, #1
 800a148:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2202      	movs	r2, #2
 800a14e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10e      	bne.n	800a174 <HAL_RTC_SetDate+0x4c>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d008      	beq.n	800a174 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	f023 0310 	bic.w	r3, r3, #16
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	330a      	adds	r3, #10
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d11c      	bne.n	800a1b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	78db      	ldrb	r3, [r3, #3]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f929 	bl	800a3d6 <RTC_ByteToBcd2>
 800a184:	4603      	mov	r3, r0
 800a186:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f922 	bl	800a3d6 <RTC_ByteToBcd2>
 800a192:	4603      	mov	r3, r0
 800a194:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a196:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	789b      	ldrb	r3, [r3, #2]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f91a 	bl	800a3d6 <RTC_ByteToBcd2>
 800a1a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a1a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e00e      	b.n	800a1d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	78db      	ldrb	r3, [r3, #3]
 800a1b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a1c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a1c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	22ca      	movs	r2, #202	; 0xca
 800a1d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2253      	movs	r2, #83	; 0x53
 800a1e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f89b 	bl	800a31e <RTC_EnterInitMode>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10c      	bne.n	800a20c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f8c2 	bl	800a38c <RTC_ExitInitMode>
 800a208:	4603      	mov	r3, r0
 800a20a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a20c:	7cfb      	ldrb	r3, [r7, #19]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	22ff      	movs	r2, #255	; 0xff
 800a21e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	771a      	strb	r2, [r3, #28]

  return status;
 800a226:	7cfb      	ldrb	r3, [r7, #19]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd90      	pop	{r4, r7, pc}

0800a230 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a24a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a24e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2da      	uxtb	r2, r3
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a272:	b2da      	uxtb	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	0b5b      	lsrs	r3, r3, #13
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	b2da      	uxtb	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d11a      	bne.n	800a2c4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	78db      	ldrb	r3, [r3, #3]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f8bc 	bl	800a410 <RTC_Bcd2ToByte>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f8b3 	bl	800a410 <RTC_Bcd2ToByte>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	789b      	ldrb	r3, [r3, #2]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f8aa 	bl	800a410 <RTC_Bcd2ToByte>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a2e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2ea:	f7fc ffbd 	bl	8007268 <HAL_GetTick>
 800a2ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a2f0:	e009      	b.n	800a306 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2f2:	f7fc ffb9 	bl	8007268 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a300:	d901      	bls.n	800a306 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e007      	b.n	800a316 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0ee      	beq.n	800a2f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d122      	bne.n	800a382 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a34a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a34c:	f7fc ff8c 	bl	8007268 <HAL_GetTick>
 800a350:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a352:	e00c      	b.n	800a36e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a354:	f7fc ff88 	bl	8007268 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a362:	d904      	bls.n	800a36e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2204      	movs	r2, #4
 800a368:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d102      	bne.n	800a382 <RTC_EnterInitMode+0x64>
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d1e8      	bne.n	800a354 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3a6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff ff89 	bl	800a2ce <HAL_RTC_WaitForSynchro>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d004      	beq.n	800a3cc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	4603      	mov	r3, r0
 800a3de:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a3e4:	e005      	b.n	800a3f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a3ec:	79fb      	ldrb	r3, [r7, #7]
 800a3ee:	3b0a      	subs	r3, #10
 800a3f0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d8f6      	bhi.n	800a3e6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	4313      	orrs	r3, r2
 800a402:	b2db      	uxtb	r3, r3
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	091b      	lsrs	r3, r3, #4
 800a422:	b2db      	uxtb	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	0092      	lsls	r2, r2, #2
 800a428:	4413      	add	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	f003 030f 	and.w	r3, r3, #15
 800a434:	b2da      	uxtb	r2, r3
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	4413      	add	r3, r2
 800a43a:	b2db      	uxtb	r3, r3
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e07b      	b.n	800a552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d108      	bne.n	800a474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a46a:	d009      	beq.n	800a480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	61da      	str	r2, [r3, #28]
 800a472:	e005      	b.n	800a480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7f8 ffd2 	bl	8003444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a504:	ea42 0103 	orr.w	r1, r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	f003 0104 	and.w	r1, r3, #4
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	f003 0210 	and.w	r2, r3, #16
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69da      	ldr	r2, [r3, #28]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b088      	sub	sp, #32
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	603b      	str	r3, [r7, #0]
 800a566:	4613      	mov	r3, r2
 800a568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_SPI_Transmit+0x22>
 800a578:	2302      	movs	r3, #2
 800a57a:	e126      	b.n	800a7ca <HAL_SPI_Transmit+0x270>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a584:	f7fc fe70 	bl	8007268 <HAL_GetTick>
 800a588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b01      	cmp	r3, #1
 800a598:	d002      	beq.n	800a5a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
 800a59c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a59e:	e10b      	b.n	800a7b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <HAL_SPI_Transmit+0x52>
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5b0:	e102      	b.n	800a7b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2203      	movs	r2, #3
 800a5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	88fa      	ldrh	r2, [r7, #6]
 800a5d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f8:	d10f      	bne.n	800a61a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d007      	beq.n	800a638 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a640:	d14b      	bne.n	800a6da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <HAL_SPI_Transmit+0xf6>
 800a64a:	8afb      	ldrh	r3, [r7, #22]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d13e      	bne.n	800a6ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a654:	881a      	ldrh	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a660:	1c9a      	adds	r2, r3, #2
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	3b01      	subs	r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a674:	e02b      	b.n	800a6ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b02      	cmp	r3, #2
 800a682:	d112      	bne.n	800a6aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a688:	881a      	ldrh	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a694:	1c9a      	adds	r2, r3, #2
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800a6a8:	e011      	b.n	800a6ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6aa:	f7fc fddd 	bl	8007268 <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d803      	bhi.n	800a6c2 <HAL_SPI_Transmit+0x168>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c0:	d102      	bne.n	800a6c8 <HAL_SPI_Transmit+0x16e>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d102      	bne.n	800a6ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a6cc:	e074      	b.n	800a7b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1ce      	bne.n	800a676 <HAL_SPI_Transmit+0x11c>
 800a6d8:	e04c      	b.n	800a774 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <HAL_SPI_Transmit+0x18e>
 800a6e2:	8afb      	ldrh	r3, [r7, #22]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d140      	bne.n	800a76a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	7812      	ldrb	r2, [r2, #0]
 800a6f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a704:	b29b      	uxth	r3, r3
 800a706:	3b01      	subs	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a70e:	e02c      	b.n	800a76a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d113      	bne.n	800a746 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	330c      	adds	r3, #12
 800a728:	7812      	ldrb	r2, [r2, #0]
 800a72a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	86da      	strh	r2, [r3, #54]	; 0x36
 800a744:	e011      	b.n	800a76a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a746:	f7fc fd8f 	bl	8007268 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d803      	bhi.n	800a75e <HAL_SPI_Transmit+0x204>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d102      	bne.n	800a764 <HAL_SPI_Transmit+0x20a>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a768:	e026      	b.n	800a7b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a76e:	b29b      	uxth	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1cd      	bne.n	800a710 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 f8b3 	bl	800a8e4 <SPI_EndRxTxTransaction>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2220      	movs	r2, #32
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a792:	2300      	movs	r3, #0
 800a794:	613b      	str	r3, [r7, #16]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	613b      	str	r3, [r7, #16]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	77fb      	strb	r3, [r7, #31]
 800a7b4:	e000      	b.n	800a7b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a7b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	603b      	str	r3, [r7, #0]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a7e4:	f7fc fd40 	bl	8007268 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	1a9b      	subs	r3, r3, r2
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a7f4:	f7fc fd38 	bl	8007268 <HAL_GetTick>
 800a7f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a7fa:	4b39      	ldr	r3, [pc, #228]	; (800a8e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	015b      	lsls	r3, r3, #5
 800a800:	0d1b      	lsrs	r3, r3, #20
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	fb02 f303 	mul.w	r3, r2, r3
 800a808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a80a:	e054      	b.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d050      	beq.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a814:	f7fc fd28 	bl	8007268 <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	429a      	cmp	r2, r3
 800a822:	d902      	bls.n	800a82a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d13d      	bne.n	800a8a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a842:	d111      	bne.n	800a868 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84c:	d004      	beq.n	800a858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a856:	d107      	bne.n	800a868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a870:	d10f      	bne.n	800a892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e017      	b.n	800a8d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689a      	ldr	r2, [r3, #8]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	bf0c      	ite	eq
 800a8c6:	2301      	moveq	r3, #1
 800a8c8:	2300      	movne	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d19b      	bne.n	800a80c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3720      	adds	r7, #32
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000180 	.word	0x20000180

0800a8e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a8f0:	4b1b      	ldr	r3, [pc, #108]	; (800a960 <SPI_EndRxTxTransaction+0x7c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a1b      	ldr	r2, [pc, #108]	; (800a964 <SPI_EndRxTxTransaction+0x80>)
 800a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fa:	0d5b      	lsrs	r3, r3, #21
 800a8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a900:	fb02 f303 	mul.w	r3, r2, r3
 800a904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a90e:	d112      	bne.n	800a936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2200      	movs	r2, #0
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7ff ff5a 	bl	800a7d4 <SPI_WaitFlagStateUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d016      	beq.n	800a954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92a:	f043 0220 	orr.w	r2, r3, #32
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e00f      	b.n	800a956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00a      	beq.n	800a952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	3b01      	subs	r3, #1
 800a940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94c:	2b80      	cmp	r3, #128	; 0x80
 800a94e:	d0f2      	beq.n	800a936 <SPI_EndRxTxTransaction+0x52>
 800a950:	e000      	b.n	800a954 <SPI_EndRxTxTransaction+0x70>
        break;
 800a952:	bf00      	nop
  }

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000180 	.word	0x20000180
 800a964:	165e9f81 	.word	0x165e9f81

0800a968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e041      	b.n	800a9fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7f8 ffe8 	bl	8003964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f000 fc7a 	bl	800b2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d001      	beq.n	800aa20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e04e      	b.n	800aabe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a23      	ldr	r2, [pc, #140]	; (800aacc <HAL_TIM_Base_Start_IT+0xc4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d022      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4a:	d01d      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1f      	ldr	r2, [pc, #124]	; (800aad0 <HAL_TIM_Base_Start_IT+0xc8>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d018      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <HAL_TIM_Base_Start_IT+0xcc>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d013      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1c      	ldr	r2, [pc, #112]	; (800aad8 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00e      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <HAL_TIM_Base_Start_IT+0xd4>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d009      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a19      	ldr	r2, [pc, #100]	; (800aae0 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <HAL_TIM_Base_Start_IT+0x80>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d111      	bne.n	800aaac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b06      	cmp	r3, #6
 800aa98:	d010      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaaa:	e007      	b.n	800aabc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40001800 	.word	0x40001800

0800aae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e041      	b.n	800ab7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f839 	bl	800ab86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f000 fbba 	bl	800b2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
	...

0800ab9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d109      	bne.n	800abc0 <HAL_TIM_PWM_Start+0x24>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	bf14      	ite	ne
 800abb8:	2301      	movne	r3, #1
 800abba:	2300      	moveq	r3, #0
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	e022      	b.n	800ac06 <HAL_TIM_PWM_Start+0x6a>
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d109      	bne.n	800abda <HAL_TIM_PWM_Start+0x3e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b01      	cmp	r3, #1
 800abd0:	bf14      	ite	ne
 800abd2:	2301      	movne	r3, #1
 800abd4:	2300      	moveq	r3, #0
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	e015      	b.n	800ac06 <HAL_TIM_PWM_Start+0x6a>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b08      	cmp	r3, #8
 800abde:	d109      	bne.n	800abf4 <HAL_TIM_PWM_Start+0x58>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b01      	cmp	r3, #1
 800abea:	bf14      	ite	ne
 800abec:	2301      	movne	r3, #1
 800abee:	2300      	moveq	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	e008      	b.n	800ac06 <HAL_TIM_PWM_Start+0x6a>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	bf14      	ite	ne
 800ac00:	2301      	movne	r3, #1
 800ac02:	2300      	moveq	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e07c      	b.n	800ad08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <HAL_TIM_PWM_Start+0x82>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac1c:	e013      	b.n	800ac46 <HAL_TIM_PWM_Start+0xaa>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d104      	bne.n	800ac2e <HAL_TIM_PWM_Start+0x92>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac2c:	e00b      	b.n	800ac46 <HAL_TIM_PWM_Start+0xaa>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d104      	bne.n	800ac3e <HAL_TIM_PWM_Start+0xa2>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac3c:	e003      	b.n	800ac46 <HAL_TIM_PWM_Start+0xaa>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fe10 	bl	800b874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a2d      	ldr	r2, [pc, #180]	; (800ad10 <HAL_TIM_PWM_Start+0x174>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d004      	beq.n	800ac68 <HAL_TIM_PWM_Start+0xcc>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a2c      	ldr	r2, [pc, #176]	; (800ad14 <HAL_TIM_PWM_Start+0x178>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d101      	bne.n	800ac6c <HAL_TIM_PWM_Start+0xd0>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e000      	b.n	800ac6e <HAL_TIM_PWM_Start+0xd2>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a22      	ldr	r2, [pc, #136]	; (800ad10 <HAL_TIM_PWM_Start+0x174>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d022      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac94:	d01d      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <HAL_TIM_PWM_Start+0x17c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d018      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1d      	ldr	r2, [pc, #116]	; (800ad1c <HAL_TIM_PWM_Start+0x180>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d013      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1c      	ldr	r2, [pc, #112]	; (800ad20 <HAL_TIM_PWM_Start+0x184>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00e      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <HAL_TIM_PWM_Start+0x178>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d009      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a18      	ldr	r2, [pc, #96]	; (800ad24 <HAL_TIM_PWM_Start+0x188>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d004      	beq.n	800acd2 <HAL_TIM_PWM_Start+0x136>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a16      	ldr	r2, [pc, #88]	; (800ad28 <HAL_TIM_PWM_Start+0x18c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d111      	bne.n	800acf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b06      	cmp	r3, #6
 800ace2:	d010      	beq.n	800ad06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf4:	e007      	b.n	800ad06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0201 	orr.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	40010000 	.word	0x40010000
 800ad14:	40010400 	.word	0x40010400
 800ad18:	40000400 	.word	0x40000400
 800ad1c:	40000800 	.word	0x40000800
 800ad20:	40000c00 	.word	0x40000c00
 800ad24:	40014000 	.word	0x40014000
 800ad28:	40001800 	.word	0x40001800

0800ad2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d122      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d11b      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f06f 0202 	mvn.w	r2, #2
 800ad58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa77 	bl	800b262 <HAL_TIM_IC_CaptureCallback>
 800ad74:	e005      	b.n	800ad82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa69 	bl	800b24e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fa7a 	bl	800b276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f003 0304 	and.w	r3, r3, #4
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d122      	bne.n	800addc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f003 0304 	and.w	r3, r3, #4
 800ada0:	2b04      	cmp	r3, #4
 800ada2:	d11b      	bne.n	800addc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f06f 0204 	mvn.w	r2, #4
 800adac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2202      	movs	r2, #2
 800adb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa4d 	bl	800b262 <HAL_TIM_IC_CaptureCallback>
 800adc8:	e005      	b.n	800add6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa3f 	bl	800b24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fa50 	bl	800b276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d122      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d11b      	bne.n	800ae30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f06f 0208 	mvn.w	r2, #8
 800ae00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2204      	movs	r2, #4
 800ae06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa23 	bl	800b262 <HAL_TIM_IC_CaptureCallback>
 800ae1c:	e005      	b.n	800ae2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fa15 	bl	800b24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fa26 	bl	800b276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b10      	cmp	r3, #16
 800ae3c:	d122      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d11b      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f06f 0210 	mvn.w	r2, #16
 800ae54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2208      	movs	r2, #8
 800ae5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f9f9 	bl	800b262 <HAL_TIM_IC_CaptureCallback>
 800ae70:	e005      	b.n	800ae7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f9eb 	bl	800b24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f9fc 	bl	800b276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d10e      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d107      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f06f 0201 	mvn.w	r2, #1
 800aea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7f8 f9aa 	bl	8003204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeba:	2b80      	cmp	r3, #128	; 0x80
 800aebc:	d10e      	bne.n	800aedc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec8:	2b80      	cmp	r3, #128	; 0x80
 800aeca:	d107      	bne.n	800aedc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fdca 	bl	800ba70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d10e      	bne.n	800af08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef4:	2b40      	cmp	r3, #64	; 0x40
 800aef6:	d107      	bne.n	800af08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f9c1 	bl	800b28a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b20      	cmp	r3, #32
 800af14:	d10e      	bne.n	800af34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b20      	cmp	r3, #32
 800af22:	d107      	bne.n	800af34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f06f 0220 	mvn.w	r2, #32
 800af2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fd94 	bl	800ba5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af56:	2302      	movs	r3, #2
 800af58:	e0ae      	b.n	800b0b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b0c      	cmp	r3, #12
 800af66:	f200 809f 	bhi.w	800b0a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800b0a9 	.word	0x0800b0a9
 800af78:	0800b0a9 	.word	0x0800b0a9
 800af7c:	0800b0a9 	.word	0x0800b0a9
 800af80:	0800afe5 	.word	0x0800afe5
 800af84:	0800b0a9 	.word	0x0800b0a9
 800af88:	0800b0a9 	.word	0x0800b0a9
 800af8c:	0800b0a9 	.word	0x0800b0a9
 800af90:	0800b027 	.word	0x0800b027
 800af94:	0800b0a9 	.word	0x0800b0a9
 800af98:	0800b0a9 	.word	0x0800b0a9
 800af9c:	0800b0a9 	.word	0x0800b0a9
 800afa0:	0800b067 	.word	0x0800b067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fa18 	bl	800b3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0208 	orr.w	r2, r2, #8
 800afbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	699a      	ldr	r2, [r3, #24]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0204 	bic.w	r2, r2, #4
 800afce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6999      	ldr	r1, [r3, #24]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	619a      	str	r2, [r3, #24]
      break;
 800afe2:	e064      	b.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fa68 	bl	800b4c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699a      	ldr	r2, [r3, #24]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800affe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	699a      	ldr	r2, [r3, #24]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6999      	ldr	r1, [r3, #24]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	021a      	lsls	r2, r3, #8
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	619a      	str	r2, [r3, #24]
      break;
 800b024:	e043      	b.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fabd 	bl	800b5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	69da      	ldr	r2, [r3, #28]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0208 	orr.w	r2, r2, #8
 800b040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69da      	ldr	r2, [r3, #28]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0204 	bic.w	r2, r2, #4
 800b050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69d9      	ldr	r1, [r3, #28]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	61da      	str	r2, [r3, #28]
      break;
 800b064:	e023      	b.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 fb11 	bl	800b694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69d9      	ldr	r1, [r3, #28]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	021a      	lsls	r2, r3, #8
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	61da      	str	r2, [r3, #28]
      break;
 800b0a6:	e002      	b.n	800b0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d101      	bne.n	800b0dc <HAL_TIM_ConfigClockSource+0x1c>
 800b0d8:	2302      	movs	r3, #2
 800b0da:	e0b4      	b.n	800b246 <HAL_TIM_ConfigClockSource+0x186>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b114:	d03e      	beq.n	800b194 <HAL_TIM_ConfigClockSource+0xd4>
 800b116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b11a:	f200 8087 	bhi.w	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b122:	f000 8086 	beq.w	800b232 <HAL_TIM_ConfigClockSource+0x172>
 800b126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12a:	d87f      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b12c:	2b70      	cmp	r3, #112	; 0x70
 800b12e:	d01a      	beq.n	800b166 <HAL_TIM_ConfigClockSource+0xa6>
 800b130:	2b70      	cmp	r3, #112	; 0x70
 800b132:	d87b      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b134:	2b60      	cmp	r3, #96	; 0x60
 800b136:	d050      	beq.n	800b1da <HAL_TIM_ConfigClockSource+0x11a>
 800b138:	2b60      	cmp	r3, #96	; 0x60
 800b13a:	d877      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b13c:	2b50      	cmp	r3, #80	; 0x50
 800b13e:	d03c      	beq.n	800b1ba <HAL_TIM_ConfigClockSource+0xfa>
 800b140:	2b50      	cmp	r3, #80	; 0x50
 800b142:	d873      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b144:	2b40      	cmp	r3, #64	; 0x40
 800b146:	d058      	beq.n	800b1fa <HAL_TIM_ConfigClockSource+0x13a>
 800b148:	2b40      	cmp	r3, #64	; 0x40
 800b14a:	d86f      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b14c:	2b30      	cmp	r3, #48	; 0x30
 800b14e:	d064      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0x15a>
 800b150:	2b30      	cmp	r3, #48	; 0x30
 800b152:	d86b      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b154:	2b20      	cmp	r3, #32
 800b156:	d060      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0x15a>
 800b158:	2b20      	cmp	r3, #32
 800b15a:	d867      	bhi.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d05c      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0x15a>
 800b160:	2b10      	cmp	r3, #16
 800b162:	d05a      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0x15a>
 800b164:	e062      	b.n	800b22c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6899      	ldr	r1, [r3, #8]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f000 fb5d 	bl	800b834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	609a      	str	r2, [r3, #8]
      break;
 800b192:	e04f      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	6899      	ldr	r1, [r3, #8]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f000 fb46 	bl	800b834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1b6:	609a      	str	r2, [r3, #8]
      break;
 800b1b8:	e03c      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	6859      	ldr	r1, [r3, #4]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f000 faba 	bl	800b740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2150      	movs	r1, #80	; 0x50
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 fb13 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b1d8:	e02c      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	6859      	ldr	r1, [r3, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f000 fad9 	bl	800b79e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2160      	movs	r1, #96	; 0x60
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fb03 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b1f8:	e01c      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6859      	ldr	r1, [r3, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	461a      	mov	r2, r3
 800b208:	f000 fa9a 	bl	800b740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2140      	movs	r1, #64	; 0x40
 800b212:	4618      	mov	r0, r3
 800b214:	f000 faf3 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b218:	e00c      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f000 faea 	bl	800b7fe <TIM_ITRx_SetConfig>
      break;
 800b22a:	e003      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	73fb      	strb	r3, [r7, #15]
      break;
 800b230:	e000      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a40      	ldr	r2, [pc, #256]	; (800b3b4 <TIM_Base_SetConfig+0x114>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d013      	beq.n	800b2e0 <TIM_Base_SetConfig+0x40>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2be:	d00f      	beq.n	800b2e0 <TIM_Base_SetConfig+0x40>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a3d      	ldr	r2, [pc, #244]	; (800b3b8 <TIM_Base_SetConfig+0x118>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d00b      	beq.n	800b2e0 <TIM_Base_SetConfig+0x40>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a3c      	ldr	r2, [pc, #240]	; (800b3bc <TIM_Base_SetConfig+0x11c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d007      	beq.n	800b2e0 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a3b      	ldr	r2, [pc, #236]	; (800b3c0 <TIM_Base_SetConfig+0x120>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d003      	beq.n	800b2e0 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a3a      	ldr	r2, [pc, #232]	; (800b3c4 <TIM_Base_SetConfig+0x124>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d108      	bne.n	800b2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a2f      	ldr	r2, [pc, #188]	; (800b3b4 <TIM_Base_SetConfig+0x114>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d02b      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b300:	d027      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a2c      	ldr	r2, [pc, #176]	; (800b3b8 <TIM_Base_SetConfig+0x118>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d023      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a2b      	ldr	r2, [pc, #172]	; (800b3bc <TIM_Base_SetConfig+0x11c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d01f      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a2a      	ldr	r2, [pc, #168]	; (800b3c0 <TIM_Base_SetConfig+0x120>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d01b      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a29      	ldr	r2, [pc, #164]	; (800b3c4 <TIM_Base_SetConfig+0x124>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d017      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a28      	ldr	r2, [pc, #160]	; (800b3c8 <TIM_Base_SetConfig+0x128>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d013      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a27      	ldr	r2, [pc, #156]	; (800b3cc <TIM_Base_SetConfig+0x12c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00f      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a26      	ldr	r2, [pc, #152]	; (800b3d0 <TIM_Base_SetConfig+0x130>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00b      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a25      	ldr	r2, [pc, #148]	; (800b3d4 <TIM_Base_SetConfig+0x134>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d007      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a24      	ldr	r2, [pc, #144]	; (800b3d8 <TIM_Base_SetConfig+0x138>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d003      	beq.n	800b352 <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a23      	ldr	r2, [pc, #140]	; (800b3dc <TIM_Base_SetConfig+0x13c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d108      	bne.n	800b364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	4313      	orrs	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a0a      	ldr	r2, [pc, #40]	; (800b3b4 <TIM_Base_SetConfig+0x114>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d003      	beq.n	800b398 <TIM_Base_SetConfig+0xf8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <TIM_Base_SetConfig+0x124>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d103      	bne.n	800b3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	615a      	str	r2, [r3, #20]
}
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	40010000 	.word	0x40010000
 800b3b8:	40000400 	.word	0x40000400
 800b3bc:	40000800 	.word	0x40000800
 800b3c0:	40000c00 	.word	0x40000c00
 800b3c4:	40010400 	.word	0x40010400
 800b3c8:	40014000 	.word	0x40014000
 800b3cc:	40014400 	.word	0x40014400
 800b3d0:	40014800 	.word	0x40014800
 800b3d4:	40001800 	.word	0x40001800
 800b3d8:	40001c00 	.word	0x40001c00
 800b3dc:	40002000 	.word	0x40002000

0800b3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	f023 0201 	bic.w	r2, r3, #1
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0303 	bic.w	r3, r3, #3
 800b416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f023 0302 	bic.w	r3, r3, #2
 800b428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	4313      	orrs	r3, r2
 800b432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a20      	ldr	r2, [pc, #128]	; (800b4b8 <TIM_OC1_SetConfig+0xd8>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d003      	beq.n	800b444 <TIM_OC1_SetConfig+0x64>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a1f      	ldr	r2, [pc, #124]	; (800b4bc <TIM_OC1_SetConfig+0xdc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d10c      	bne.n	800b45e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f023 0308 	bic.w	r3, r3, #8
 800b44a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f023 0304 	bic.w	r3, r3, #4
 800b45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a15      	ldr	r2, [pc, #84]	; (800b4b8 <TIM_OC1_SetConfig+0xd8>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d003      	beq.n	800b46e <TIM_OC1_SetConfig+0x8e>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a14      	ldr	r2, [pc, #80]	; (800b4bc <TIM_OC1_SetConfig+0xdc>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d111      	bne.n	800b492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4313      	orrs	r3, r2
 800b486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	4313      	orrs	r3, r2
 800b490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	621a      	str	r2, [r3, #32]
}
 800b4ac:	bf00      	nop
 800b4ae:	371c      	adds	r7, #28
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	40010000 	.word	0x40010000
 800b4bc:	40010400 	.word	0x40010400

0800b4c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b087      	sub	sp, #28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f023 0210 	bic.w	r2, r3, #16
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	021b      	lsls	r3, r3, #8
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f023 0320 	bic.w	r3, r3, #32
 800b50a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a22      	ldr	r2, [pc, #136]	; (800b5a4 <TIM_OC2_SetConfig+0xe4>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d003      	beq.n	800b528 <TIM_OC2_SetConfig+0x68>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a21      	ldr	r2, [pc, #132]	; (800b5a8 <TIM_OC2_SetConfig+0xe8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d10d      	bne.n	800b544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a17      	ldr	r2, [pc, #92]	; (800b5a4 <TIM_OC2_SetConfig+0xe4>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_OC2_SetConfig+0x94>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a16      	ldr	r2, [pc, #88]	; (800b5a8 <TIM_OC2_SetConfig+0xe8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d113      	bne.n	800b57c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	4313      	orrs	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	621a      	str	r2, [r3, #32]
}
 800b596:	bf00      	nop
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	40010000 	.word	0x40010000
 800b5a8:	40010400 	.word	0x40010400

0800b5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	021b      	lsls	r3, r3, #8
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a21      	ldr	r2, [pc, #132]	; (800b68c <TIM_OC3_SetConfig+0xe0>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d003      	beq.n	800b612 <TIM_OC3_SetConfig+0x66>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a20      	ldr	r2, [pc, #128]	; (800b690 <TIM_OC3_SetConfig+0xe4>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d10d      	bne.n	800b62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	021b      	lsls	r3, r3, #8
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	4313      	orrs	r3, r2
 800b624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a16      	ldr	r2, [pc, #88]	; (800b68c <TIM_OC3_SetConfig+0xe0>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d003      	beq.n	800b63e <TIM_OC3_SetConfig+0x92>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a15      	ldr	r2, [pc, #84]	; (800b690 <TIM_OC3_SetConfig+0xe4>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d113      	bne.n	800b666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	621a      	str	r2, [r3, #32]
}
 800b680:	bf00      	nop
 800b682:	371c      	adds	r7, #28
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	40010000 	.word	0x40010000
 800b690:	40010400 	.word	0x40010400

0800b694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	021b      	lsls	r3, r3, #8
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	031b      	lsls	r3, r3, #12
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a12      	ldr	r2, [pc, #72]	; (800b738 <TIM_OC4_SetConfig+0xa4>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d003      	beq.n	800b6fc <TIM_OC4_SetConfig+0x68>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a11      	ldr	r2, [pc, #68]	; (800b73c <TIM_OC4_SetConfig+0xa8>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d109      	bne.n	800b710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	019b      	lsls	r3, r3, #6
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	40010000 	.word	0x40010000
 800b73c:	40010400 	.word	0x40010400

0800b740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	f023 0201 	bic.w	r2, r3, #1
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	4313      	orrs	r3, r2
 800b774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f023 030a 	bic.w	r3, r3, #10
 800b77c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4313      	orrs	r3, r2
 800b784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	621a      	str	r2, [r3, #32]
}
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f023 0210 	bic.w	r2, r3, #16
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	031b      	lsls	r3, r3, #12
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	f043 0307 	orr.w	r3, r3, #7
 800b820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	609a      	str	r2, [r3, #8]
}
 800b828:	bf00      	nop
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b84e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	021a      	lsls	r2, r3, #8
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	431a      	orrs	r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	4313      	orrs	r3, r2
 800b860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	609a      	str	r2, [r3, #8]
}
 800b868:	bf00      	nop
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f003 031f 	and.w	r3, r3, #31
 800b886:	2201      	movs	r2, #1
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a1a      	ldr	r2, [r3, #32]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	43db      	mvns	r3, r3
 800b896:	401a      	ands	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1a      	ldr	r2, [r3, #32]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f003 031f 	and.w	r3, r3, #31
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	621a      	str	r2, [r3, #32]
}
 800b8b2:	bf00      	nop
 800b8b4:	371c      	adds	r7, #28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d101      	bne.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e05a      	b.n	800b98e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4313      	orrs	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a21      	ldr	r2, [pc, #132]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d022      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b924:	d01d      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d018      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d013      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d00e      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a18      	ldr	r2, [pc, #96]	; (800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d009      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a17      	ldr	r2, [pc, #92]	; (800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d004      	beq.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a15      	ldr	r2, [pc, #84]	; (800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d10c      	bne.n	800b97c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	4313      	orrs	r3, r2
 800b972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40000400 	.word	0x40000400
 800b9a4:	40000800 	.word	0x40000800
 800b9a8:	40000c00 	.word	0x40000c00
 800b9ac:	40010400 	.word	0x40010400
 800b9b0:	40014000 	.word	0x40014000
 800b9b4:	40001800 	.word	0x40001800

0800b9b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	e03d      	b.n	800ba50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e03f      	b.n	800bb16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7f8 f872 	bl	8003b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2224      	movs	r2, #36	; 0x24
 800bab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fe69 	bl	800c7a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800badc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	695a      	ldr	r2, [r3, #20]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68da      	ldr	r2, [r3, #12]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bafc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	60f8      	str	r0, [r7, #12]
 800bb26:	60b9      	str	r1, [r7, #8]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d11d      	bne.n	800bb74 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <HAL_UART_Receive_DMA+0x26>
 800bb3e:	88fb      	ldrh	r3, [r7, #6]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e016      	b.n	800bb76 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d101      	bne.n	800bb56 <HAL_UART_Receive_DMA+0x38>
 800bb52:	2302      	movs	r3, #2
 800bb54:	e00f      	b.n	800bb76 <HAL_UART_Receive_DMA+0x58>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb64:	88fb      	ldrh	r3, [r7, #6]
 800bb66:	461a      	mov	r2, r3
 800bb68:	68b9      	ldr	r1, [r7, #8]
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f000 fbb8 	bl	800c2e0 <UART_Start_Receive_DMA>
 800bb70:	4603      	mov	r3, r0
 800bb72:	e000      	b.n	800bb76 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb74:	2302      	movs	r3, #2
  }
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b0ba      	sub	sp, #232	; 0xe8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bbb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb6:	f003 030f 	and.w	r3, r3, #15
 800bbba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bbbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10f      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <HAL_UART_IRQHandler+0x66>
 800bbd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fd23 	bl	800c62a <UART_Receive_IT>
      return;
 800bbe4:	e256      	b.n	800c094 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bbe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80de 	beq.w	800bdac <HAL_UART_IRQHandler+0x22c>
 800bbf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80d1 	beq.w	800bdac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00b      	beq.n	800bc2e <HAL_UART_IRQHandler+0xae>
 800bc16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d005      	beq.n	800bc2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc26:	f043 0201 	orr.w	r2, r3, #1
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <HAL_UART_IRQHandler+0xd2>
 800bc3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d005      	beq.n	800bc52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	f043 0202 	orr.w	r2, r3, #2
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00b      	beq.n	800bc76 <HAL_UART_IRQHandler+0xf6>
 800bc5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6e:	f043 0204 	orr.w	r2, r3, #4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7a:	f003 0308 	and.w	r3, r3, #8
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d011      	beq.n	800bca6 <HAL_UART_IRQHandler+0x126>
 800bc82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc86:	f003 0320 	and.w	r3, r3, #32
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d105      	bne.n	800bc9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f043 0208 	orr.w	r2, r3, #8
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 81ed 	beq.w	800c08a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d008      	beq.n	800bcce <HAL_UART_IRQHandler+0x14e>
 800bcbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc0:	f003 0320 	and.w	r3, r3, #32
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fcae 	bl	800c62a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd8:	2b40      	cmp	r3, #64	; 0x40
 800bcda:	bf0c      	ite	eq
 800bcdc:	2301      	moveq	r3, #1
 800bcde:	2300      	movne	r3, #0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	f003 0308 	and.w	r3, r3, #8
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <HAL_UART_IRQHandler+0x17a>
 800bcf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d04f      	beq.n	800bd9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fbb6 	bl	800c46c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d141      	bne.n	800bd92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3314      	adds	r3, #20
 800bd14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3314      	adds	r3, #20
 800bd36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1d9      	bne.n	800bd0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d013      	beq.n	800bd8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd66:	4a7d      	ldr	r2, [pc, #500]	; (800bf5c <HAL_UART_IRQHandler+0x3dc>)
 800bd68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fb fd32 	bl	80077d8 <HAL_DMA_Abort_IT>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d016      	beq.n	800bda8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd84:	4610      	mov	r0, r2
 800bd86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd88:	e00e      	b.n	800bda8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f99a 	bl	800c0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd90:	e00a      	b.n	800bda8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f996 	bl	800c0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd98:	e006      	b.n	800bda8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f992 	bl	800c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bda6:	e170      	b.n	800c08a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda8:	bf00      	nop
    return;
 800bdaa:	e16e      	b.n	800c08a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	f040 814a 	bne.w	800c04a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bdb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdba:	f003 0310 	and.w	r3, r3, #16
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 8143 	beq.w	800c04a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bdc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdc8:	f003 0310 	and.w	r3, r3, #16
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 813c 	beq.w	800c04a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60bb      	str	r3, [r7, #8]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60bb      	str	r3, [r7, #8]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf2:	2b40      	cmp	r3, #64	; 0x40
 800bdf4:	f040 80b4 	bne.w	800bf60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 8140 	beq.w	800c08e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be16:	429a      	cmp	r2, r3
 800be18:	f080 8139 	bcs.w	800c08e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2e:	f000 8088 	beq.w	800bf42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330c      	adds	r3, #12
 800be38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be40:	e853 3f00 	ldrex	r3, [r3]
 800be44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	330c      	adds	r3, #12
 800be5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800be5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1d9      	bne.n	800be32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3314      	adds	r3, #20
 800be84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be90:	f023 0301 	bic.w	r3, r3, #1
 800be94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3314      	adds	r3, #20
 800be9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bea2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bea6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800beaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800beb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e1      	bne.n	800be7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3314      	adds	r3, #20
 800bec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800beca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800becc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3314      	adds	r3, #20
 800beda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bede:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800beec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e3      	bne.n	800beba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0a:	e853 3f00 	ldrex	r3, [r3]
 800bf0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf12:	f023 0310 	bic.w	r3, r3, #16
 800bf16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	330c      	adds	r3, #12
 800bf20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf24:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e3      	bne.n	800bf00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fb fbdb 	bl	80076f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f8c0 	bl	800c0d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf58:	e099      	b.n	800c08e <HAL_UART_IRQHandler+0x50e>
 800bf5a:	bf00      	nop
 800bf5c:	0800c533 	.word	0x0800c533
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 808b 	beq.w	800c092 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bf7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 8086 	beq.w	800c092 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	330c      	adds	r3, #12
 800bf8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	e853 3f00 	ldrex	r3, [r3]
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bfaa:	647a      	str	r2, [r7, #68]	; 0x44
 800bfac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1e3      	bne.n	800bf86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3314      	adds	r3, #20
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	623b      	str	r3, [r7, #32]
   return(result);
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	f023 0301 	bic.w	r3, r3, #1
 800bfd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3314      	adds	r3, #20
 800bfde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfe2:	633a      	str	r2, [r7, #48]	; 0x30
 800bfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfea:	e841 2300 	strex	r3, r2, [r1]
 800bfee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1e3      	bne.n	800bfbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2220      	movs	r2, #32
 800bffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330c      	adds	r3, #12
 800c00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	e853 3f00 	ldrex	r3, [r3]
 800c012:	60fb      	str	r3, [r7, #12]
   return(result);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0310 	bic.w	r3, r3, #16
 800c01a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	330c      	adds	r3, #12
 800c024:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c028:	61fa      	str	r2, [r7, #28]
 800c02a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02c:	69b9      	ldr	r1, [r7, #24]
 800c02e:	69fa      	ldr	r2, [r7, #28]
 800c030:	e841 2300 	strex	r3, r2, [r1]
 800c034:	617b      	str	r3, [r7, #20]
   return(result);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e3      	bne.n	800c004 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c03c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f848 	bl	800c0d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c048:	e023      	b.n	800c092 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <HAL_UART_IRQHandler+0x4ea>
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa79 	bl	800c55a <UART_Transmit_IT>
    return;
 800c068:	e014      	b.n	800c094 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <HAL_UART_IRQHandler+0x514>
 800c076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d008      	beq.n	800c094 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fab9 	bl	800c5fa <UART_EndTransmit_IT>
    return;
 800c088:	e004      	b.n	800c094 <HAL_UART_IRQHandler+0x514>
    return;
 800c08a:	bf00      	nop
 800c08c:	e002      	b.n	800c094 <HAL_UART_IRQHandler+0x514>
      return;
 800c08e:	bf00      	nop
 800c090:	e000      	b.n	800c094 <HAL_UART_IRQHandler+0x514>
      return;
 800c092:	bf00      	nop
  }
}
 800c094:	37e8      	adds	r7, #232	; 0xe8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop

0800c09c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b09c      	sub	sp, #112	; 0x70
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d172      	bne.n	800c1f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c10e:	2200      	movs	r2, #0
 800c110:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	330c      	adds	r3, #12
 800c118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c128:	66bb      	str	r3, [r7, #104]	; 0x68
 800c12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	330c      	adds	r3, #12
 800c130:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c132:	65ba      	str	r2, [r7, #88]	; 0x58
 800c134:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e5      	bne.n	800c112 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3314      	adds	r3, #20
 800c14c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	e853 3f00 	ldrex	r3, [r3]
 800c154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c158:	f023 0301 	bic.w	r3, r3, #1
 800c15c:	667b      	str	r3, [r7, #100]	; 0x64
 800c15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3314      	adds	r3, #20
 800c164:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c166:	647a      	str	r2, [r7, #68]	; 0x44
 800c168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c16c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c16e:	e841 2300 	strex	r3, r2, [r1]
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1e5      	bne.n	800c146 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3314      	adds	r3, #20
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	623b      	str	r3, [r7, #32]
   return(result);
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c190:	663b      	str	r3, [r7, #96]	; 0x60
 800c192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3314      	adds	r3, #20
 800c198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c19a:	633a      	str	r2, [r7, #48]	; 0x30
 800c19c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	e841 2300 	strex	r3, r2, [r1]
 800c1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e5      	bne.n	800c17a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d119      	bne.n	800c1f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	330c      	adds	r3, #12
 800c1c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f023 0310 	bic.w	r3, r3, #16
 800c1d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	330c      	adds	r3, #12
 800c1dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1de:	61fa      	str	r2, [r7, #28]
 800c1e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e2:	69b9      	ldr	r1, [r7, #24]
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	e841 2300 	strex	r3, r2, [r1]
 800c1ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1e5      	bne.n	800c1be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d106      	bne.n	800c208 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1fe:	4619      	mov	r1, r3
 800c200:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c202:	f7ff ff69 	bl	800c0d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c206:	e002      	b.n	800c20e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c208:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c20a:	f7f7 f867 	bl	80032dc <HAL_UART_RxCpltCallback>
}
 800c20e:	bf00      	nop
 800c210:	3770      	adds	r7, #112	; 0x70
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c222:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d108      	bne.n	800c23e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c230:	085b      	lsrs	r3, r3, #1
 800c232:	b29b      	uxth	r3, r3
 800c234:	4619      	mov	r1, r3
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7ff ff4e 	bl	800c0d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c23c:	e002      	b.n	800c244 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7ff ff36 	bl	800c0b0 <HAL_UART_RxHalfCpltCallback>
}
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c268:	2b80      	cmp	r3, #128	; 0x80
 800c26a:	bf0c      	ite	eq
 800c26c:	2301      	moveq	r3, #1
 800c26e:	2300      	movne	r3, #0
 800c270:	b2db      	uxtb	r3, r3
 800c272:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b21      	cmp	r3, #33	; 0x21
 800c27e:	d108      	bne.n	800c292 <UART_DMAError+0x46>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2200      	movs	r2, #0
 800c28a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c28c:	68b8      	ldr	r0, [r7, #8]
 800c28e:	f000 f8c5 	bl	800c41c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29c:	2b40      	cmp	r3, #64	; 0x40
 800c29e:	bf0c      	ite	eq
 800c2a0:	2301      	moveq	r3, #1
 800c2a2:	2300      	movne	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b22      	cmp	r3, #34	; 0x22
 800c2b2:	d108      	bne.n	800c2c6 <UART_DMAError+0x7a>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c2c0:	68b8      	ldr	r0, [r7, #8]
 800c2c2:	f000 f8d3 	bl	800c46c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ca:	f043 0210 	orr.w	r2, r3, #16
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2d2:	68b8      	ldr	r0, [r7, #8]
 800c2d4:	f7ff fef6 	bl	800c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2d8:	bf00      	nop
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b098      	sub	sp, #96	; 0x60
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	88fa      	ldrh	r2, [r7, #6]
 800c2f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2222      	movs	r2, #34	; 0x22
 800c304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30c:	4a40      	ldr	r2, [pc, #256]	; (800c410 <UART_Start_Receive_DMA+0x130>)
 800c30e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c314:	4a3f      	ldr	r2, [pc, #252]	; (800c414 <UART_Start_Receive_DMA+0x134>)
 800c316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31c:	4a3e      	ldr	r2, [pc, #248]	; (800c418 <UART_Start_Receive_DMA+0x138>)
 800c31e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c324:	2200      	movs	r2, #0
 800c326:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c328:	f107 0308 	add.w	r3, r7, #8
 800c32c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	f7fb f982 	bl	8007648 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c344:	2300      	movs	r3, #0
 800c346:	613b      	str	r3, [r7, #16]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	613b      	str	r3, [r7, #16]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d019      	beq.n	800c39e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	330c      	adds	r3, #12
 800c370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c374:	e853 3f00 	ldrex	r3, [r3]
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c380:	65bb      	str	r3, [r7, #88]	; 0x58
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	330c      	adds	r3, #12
 800c388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c38a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c38c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e5      	bne.n	800c36a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3314      	adds	r3, #20
 800c3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	f043 0301 	orr.w	r3, r3, #1
 800c3b4:	657b      	str	r3, [r7, #84]	; 0x54
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3be:	63ba      	str	r2, [r7, #56]	; 0x38
 800c3c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e5      	bne.n	800c39e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3314      	adds	r3, #20
 800c3d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e8:	653b      	str	r3, [r7, #80]	; 0x50
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	3314      	adds	r3, #20
 800c3f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3f2:	627a      	str	r2, [r7, #36]	; 0x24
 800c3f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6a39      	ldr	r1, [r7, #32]
 800c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e5      	bne.n	800c3d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3760      	adds	r7, #96	; 0x60
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	0800c0f1 	.word	0x0800c0f1
 800c414:	0800c217 	.word	0x0800c217
 800c418:	0800c24d 	.word	0x0800c24d

0800c41c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b089      	sub	sp, #36	; 0x24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	330c      	adds	r3, #12
 800c42a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	60bb      	str	r3, [r7, #8]
   return(result);
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	330c      	adds	r3, #12
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	61ba      	str	r2, [r7, #24]
 800c446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6979      	ldr	r1, [r7, #20]
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	613b      	str	r3, [r7, #16]
   return(result);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e5      	bne.n	800c424 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2220      	movs	r2, #32
 800c45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c460:	bf00      	nop
 800c462:	3724      	adds	r7, #36	; 0x24
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b095      	sub	sp, #84	; 0x54
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	330c      	adds	r3, #12
 800c47a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c48a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	330c      	adds	r3, #12
 800c492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c494:	643a      	str	r2, [r7, #64]	; 0x40
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c49a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e5      	bne.n	800c474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3314      	adds	r3, #20
 800c4ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f023 0301 	bic.w	r3, r3, #1
 800c4be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3314      	adds	r3, #20
 800c4c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4d0:	e841 2300 	strex	r3, r2, [r1]
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e5      	bne.n	800c4a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d119      	bne.n	800c518 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f023 0310 	bic.w	r3, r3, #16
 800c4fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	330c      	adds	r3, #12
 800c502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c504:	61ba      	str	r2, [r7, #24]
 800c506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c508:	6979      	ldr	r1, [r7, #20]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	e841 2300 	strex	r3, r2, [r1]
 800c510:	613b      	str	r3, [r7, #16]
   return(result);
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e5      	bne.n	800c4e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c526:	bf00      	nop
 800c528:	3754      	adds	r7, #84	; 0x54
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f7ff fdb9 	bl	800c0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b21      	cmp	r3, #33	; 0x21
 800c56c:	d13e      	bne.n	800c5ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c576:	d114      	bne.n	800c5a2 <UART_Transmit_IT+0x48>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d110      	bne.n	800c5a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a1b      	ldr	r3, [r3, #32]
 800c584:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c594:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	1c9a      	adds	r2, r3, #2
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	621a      	str	r2, [r3, #32]
 800c5a0:	e008      	b.n	800c5b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	1c59      	adds	r1, r3, #1
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	6211      	str	r1, [r2, #32]
 800c5ac:	781a      	ldrb	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10f      	bne.n	800c5e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68da      	ldr	r2, [r3, #12]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e000      	b.n	800c5ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c5ec:	2302      	movs	r3, #2
  }
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68da      	ldr	r2, [r3, #12]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fd3e 	bl	800c09c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b08c      	sub	sp, #48	; 0x30
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b22      	cmp	r3, #34	; 0x22
 800c63c:	f040 80ab 	bne.w	800c796 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c648:	d117      	bne.n	800c67a <UART_Receive_IT+0x50>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d113      	bne.n	800c67a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c652:	2300      	movs	r3, #0
 800c654:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	b29b      	uxth	r3, r3
 800c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c668:	b29a      	uxth	r2, r3
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c672:	1c9a      	adds	r2, r3, #2
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	629a      	str	r2, [r3, #40]	; 0x28
 800c678:	e026      	b.n	800c6c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c680:	2300      	movs	r3, #0
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c68c:	d007      	beq.n	800c69e <UART_Receive_IT+0x74>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <UART_Receive_IT+0x82>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	e008      	b.n	800c6be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d15a      	bne.n	800c792 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68da      	ldr	r2, [r3, #12]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f022 0220 	bic.w	r2, r2, #32
 800c6ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	695a      	ldr	r2, [r3, #20]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f022 0201 	bic.w	r2, r2, #1
 800c70a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2220      	movs	r2, #32
 800c710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d135      	bne.n	800c788 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	330c      	adds	r3, #12
 800c728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	e853 3f00 	ldrex	r3, [r3]
 800c730:	613b      	str	r3, [r7, #16]
   return(result);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	f023 0310 	bic.w	r3, r3, #16
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	330c      	adds	r3, #12
 800c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c742:	623a      	str	r2, [r7, #32]
 800c744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	6a3a      	ldr	r2, [r7, #32]
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e5      	bne.n	800c722 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0310 	and.w	r3, r3, #16
 800c760:	2b10      	cmp	r3, #16
 800c762:	d10a      	bne.n	800c77a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fca9 	bl	800c0d8 <HAL_UARTEx_RxEventCallback>
 800c786:	e002      	b.n	800c78e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7f6 fda7 	bl	80032dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	e002      	b.n	800c798 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	e000      	b.n	800c798 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c796:	2302      	movs	r3, #2
  }
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3730      	adds	r7, #48	; 0x30
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7a4:	b0c0      	sub	sp, #256	; 0x100
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7bc:	68d9      	ldr	r1, [r3, #12]
 800c7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	ea40 0301 	orr.w	r3, r0, r1
 800c7c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7f8:	f021 010c 	bic.w	r1, r1, #12
 800c7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c806:	430b      	orrs	r3, r1
 800c808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c81a:	6999      	ldr	r1, [r3, #24]
 800c81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	ea40 0301 	orr.w	r3, r0, r1
 800c826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	4b8f      	ldr	r3, [pc, #572]	; (800ca6c <UART_SetConfig+0x2cc>)
 800c830:	429a      	cmp	r2, r3
 800c832:	d005      	beq.n	800c840 <UART_SetConfig+0xa0>
 800c834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	4b8d      	ldr	r3, [pc, #564]	; (800ca70 <UART_SetConfig+0x2d0>)
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d104      	bne.n	800c84a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c840:	f7fd f930 	bl	8009aa4 <HAL_RCC_GetPCLK2Freq>
 800c844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c848:	e003      	b.n	800c852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c84a:	f7fd f917 	bl	8009a7c <HAL_RCC_GetPCLK1Freq>
 800c84e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c85c:	f040 810c 	bne.w	800ca78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c864:	2200      	movs	r2, #0
 800c866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c86a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c86e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c872:	4622      	mov	r2, r4
 800c874:	462b      	mov	r3, r5
 800c876:	1891      	adds	r1, r2, r2
 800c878:	65b9      	str	r1, [r7, #88]	; 0x58
 800c87a:	415b      	adcs	r3, r3
 800c87c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c87e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c882:	4621      	mov	r1, r4
 800c884:	eb12 0801 	adds.w	r8, r2, r1
 800c888:	4629      	mov	r1, r5
 800c88a:	eb43 0901 	adc.w	r9, r3, r1
 800c88e:	f04f 0200 	mov.w	r2, #0
 800c892:	f04f 0300 	mov.w	r3, #0
 800c896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c89a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c89e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8a2:	4690      	mov	r8, r2
 800c8a4:	4699      	mov	r9, r3
 800c8a6:	4623      	mov	r3, r4
 800c8a8:	eb18 0303 	adds.w	r3, r8, r3
 800c8ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c8b0:	462b      	mov	r3, r5
 800c8b2:	eb49 0303 	adc.w	r3, r9, r3
 800c8b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	18db      	adds	r3, r3, r3
 800c8d2:	653b      	str	r3, [r7, #80]	; 0x50
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	eb42 0303 	adc.w	r3, r2, r3
 800c8da:	657b      	str	r3, [r7, #84]	; 0x54
 800c8dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c8e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c8e4:	f7f4 f9ca 	bl	8000c7c <__aeabi_uldivmod>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4b61      	ldr	r3, [pc, #388]	; (800ca74 <UART_SetConfig+0x2d4>)
 800c8ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c8f2:	095b      	lsrs	r3, r3, #5
 800c8f4:	011c      	lsls	r4, r3, #4
 800c8f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c908:	4642      	mov	r2, r8
 800c90a:	464b      	mov	r3, r9
 800c90c:	1891      	adds	r1, r2, r2
 800c90e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c910:	415b      	adcs	r3, r3
 800c912:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c918:	4641      	mov	r1, r8
 800c91a:	eb12 0a01 	adds.w	sl, r2, r1
 800c91e:	4649      	mov	r1, r9
 800c920:	eb43 0b01 	adc.w	fp, r3, r1
 800c924:	f04f 0200 	mov.w	r2, #0
 800c928:	f04f 0300 	mov.w	r3, #0
 800c92c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c938:	4692      	mov	sl, r2
 800c93a:	469b      	mov	fp, r3
 800c93c:	4643      	mov	r3, r8
 800c93e:	eb1a 0303 	adds.w	r3, sl, r3
 800c942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c946:	464b      	mov	r3, r9
 800c948:	eb4b 0303 	adc.w	r3, fp, r3
 800c94c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c95c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c964:	460b      	mov	r3, r1
 800c966:	18db      	adds	r3, r3, r3
 800c968:	643b      	str	r3, [r7, #64]	; 0x40
 800c96a:	4613      	mov	r3, r2
 800c96c:	eb42 0303 	adc.w	r3, r2, r3
 800c970:	647b      	str	r3, [r7, #68]	; 0x44
 800c972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c97a:	f7f4 f97f 	bl	8000c7c <__aeabi_uldivmod>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	4611      	mov	r1, r2
 800c984:	4b3b      	ldr	r3, [pc, #236]	; (800ca74 <UART_SetConfig+0x2d4>)
 800c986:	fba3 2301 	umull	r2, r3, r3, r1
 800c98a:	095b      	lsrs	r3, r3, #5
 800c98c:	2264      	movs	r2, #100	; 0x64
 800c98e:	fb02 f303 	mul.w	r3, r2, r3
 800c992:	1acb      	subs	r3, r1, r3
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c99a:	4b36      	ldr	r3, [pc, #216]	; (800ca74 <UART_SetConfig+0x2d4>)
 800c99c:	fba3 2302 	umull	r2, r3, r3, r2
 800c9a0:	095b      	lsrs	r3, r3, #5
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9a8:	441c      	add	r4, r3
 800c9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9bc:	4642      	mov	r2, r8
 800c9be:	464b      	mov	r3, r9
 800c9c0:	1891      	adds	r1, r2, r2
 800c9c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9c4:	415b      	adcs	r3, r3
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9cc:	4641      	mov	r1, r8
 800c9ce:	1851      	adds	r1, r2, r1
 800c9d0:	6339      	str	r1, [r7, #48]	; 0x30
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	414b      	adcs	r3, r1
 800c9d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9d8:	f04f 0200 	mov.w	r2, #0
 800c9dc:	f04f 0300 	mov.w	r3, #0
 800c9e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c9e4:	4659      	mov	r1, fp
 800c9e6:	00cb      	lsls	r3, r1, #3
 800c9e8:	4651      	mov	r1, sl
 800c9ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9ee:	4651      	mov	r1, sl
 800c9f0:	00ca      	lsls	r2, r1, #3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4642      	mov	r2, r8
 800c9fa:	189b      	adds	r3, r3, r2
 800c9fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca00:	464b      	mov	r3, r9
 800ca02:	460a      	mov	r2, r1
 800ca04:	eb42 0303 	adc.w	r3, r2, r3
 800ca08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca20:	460b      	mov	r3, r1
 800ca22:	18db      	adds	r3, r3, r3
 800ca24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca26:	4613      	mov	r3, r2
 800ca28:	eb42 0303 	adc.w	r3, r2, r3
 800ca2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca36:	f7f4 f921 	bl	8000c7c <__aeabi_uldivmod>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4b0d      	ldr	r3, [pc, #52]	; (800ca74 <UART_SetConfig+0x2d4>)
 800ca40:	fba3 1302 	umull	r1, r3, r3, r2
 800ca44:	095b      	lsrs	r3, r3, #5
 800ca46:	2164      	movs	r1, #100	; 0x64
 800ca48:	fb01 f303 	mul.w	r3, r1, r3
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	3332      	adds	r3, #50	; 0x32
 800ca52:	4a08      	ldr	r2, [pc, #32]	; (800ca74 <UART_SetConfig+0x2d4>)
 800ca54:	fba2 2303 	umull	r2, r3, r2, r3
 800ca58:	095b      	lsrs	r3, r3, #5
 800ca5a:	f003 0207 	and.w	r2, r3, #7
 800ca5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4422      	add	r2, r4
 800ca66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca68:	e105      	b.n	800cc76 <UART_SetConfig+0x4d6>
 800ca6a:	bf00      	nop
 800ca6c:	40011000 	.word	0x40011000
 800ca70:	40011400 	.word	0x40011400
 800ca74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca8a:	4642      	mov	r2, r8
 800ca8c:	464b      	mov	r3, r9
 800ca8e:	1891      	adds	r1, r2, r2
 800ca90:	6239      	str	r1, [r7, #32]
 800ca92:	415b      	adcs	r3, r3
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
 800ca96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	1854      	adds	r4, r2, r1
 800ca9e:	4649      	mov	r1, r9
 800caa0:	eb43 0501 	adc.w	r5, r3, r1
 800caa4:	f04f 0200 	mov.w	r2, #0
 800caa8:	f04f 0300 	mov.w	r3, #0
 800caac:	00eb      	lsls	r3, r5, #3
 800caae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cab2:	00e2      	lsls	r2, r4, #3
 800cab4:	4614      	mov	r4, r2
 800cab6:	461d      	mov	r5, r3
 800cab8:	4643      	mov	r3, r8
 800caba:	18e3      	adds	r3, r4, r3
 800cabc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cac0:	464b      	mov	r3, r9
 800cac2:	eb45 0303 	adc.w	r3, r5, r3
 800cac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800caca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cada:	f04f 0200 	mov.w	r2, #0
 800cade:	f04f 0300 	mov.w	r3, #0
 800cae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cae6:	4629      	mov	r1, r5
 800cae8:	008b      	lsls	r3, r1, #2
 800caea:	4621      	mov	r1, r4
 800caec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800caf0:	4621      	mov	r1, r4
 800caf2:	008a      	lsls	r2, r1, #2
 800caf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800caf8:	f7f4 f8c0 	bl	8000c7c <__aeabi_uldivmod>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4b60      	ldr	r3, [pc, #384]	; (800cc84 <UART_SetConfig+0x4e4>)
 800cb02:	fba3 2302 	umull	r2, r3, r3, r2
 800cb06:	095b      	lsrs	r3, r3, #5
 800cb08:	011c      	lsls	r4, r3, #4
 800cb0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb1c:	4642      	mov	r2, r8
 800cb1e:	464b      	mov	r3, r9
 800cb20:	1891      	adds	r1, r2, r2
 800cb22:	61b9      	str	r1, [r7, #24]
 800cb24:	415b      	adcs	r3, r3
 800cb26:	61fb      	str	r3, [r7, #28]
 800cb28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	1851      	adds	r1, r2, r1
 800cb30:	6139      	str	r1, [r7, #16]
 800cb32:	4649      	mov	r1, r9
 800cb34:	414b      	adcs	r3, r1
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	f04f 0200 	mov.w	r2, #0
 800cb3c:	f04f 0300 	mov.w	r3, #0
 800cb40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb44:	4659      	mov	r1, fp
 800cb46:	00cb      	lsls	r3, r1, #3
 800cb48:	4651      	mov	r1, sl
 800cb4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb4e:	4651      	mov	r1, sl
 800cb50:	00ca      	lsls	r2, r1, #3
 800cb52:	4610      	mov	r0, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	4603      	mov	r3, r0
 800cb58:	4642      	mov	r2, r8
 800cb5a:	189b      	adds	r3, r3, r2
 800cb5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb60:	464b      	mov	r3, r9
 800cb62:	460a      	mov	r2, r1
 800cb64:	eb42 0303 	adc.w	r3, r2, r3
 800cb68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb76:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	f04f 0300 	mov.w	r3, #0
 800cb80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb84:	4649      	mov	r1, r9
 800cb86:	008b      	lsls	r3, r1, #2
 800cb88:	4641      	mov	r1, r8
 800cb8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb8e:	4641      	mov	r1, r8
 800cb90:	008a      	lsls	r2, r1, #2
 800cb92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb96:	f7f4 f871 	bl	8000c7c <__aeabi_uldivmod>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4b39      	ldr	r3, [pc, #228]	; (800cc84 <UART_SetConfig+0x4e4>)
 800cba0:	fba3 1302 	umull	r1, r3, r3, r2
 800cba4:	095b      	lsrs	r3, r3, #5
 800cba6:	2164      	movs	r1, #100	; 0x64
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	011b      	lsls	r3, r3, #4
 800cbb0:	3332      	adds	r3, #50	; 0x32
 800cbb2:	4a34      	ldr	r2, [pc, #208]	; (800cc84 <UART_SetConfig+0x4e4>)
 800cbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb8:	095b      	lsrs	r3, r3, #5
 800cbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbbe:	441c      	add	r4, r3
 800cbc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	673b      	str	r3, [r7, #112]	; 0x70
 800cbc8:	677a      	str	r2, [r7, #116]	; 0x74
 800cbca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbce:	4642      	mov	r2, r8
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	1891      	adds	r1, r2, r2
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	415b      	adcs	r3, r3
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbde:	4641      	mov	r1, r8
 800cbe0:	1851      	adds	r1, r2, r1
 800cbe2:	6039      	str	r1, [r7, #0]
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	414b      	adcs	r3, r1
 800cbe8:	607b      	str	r3, [r7, #4]
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	f04f 0300 	mov.w	r3, #0
 800cbf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cbf6:	4659      	mov	r1, fp
 800cbf8:	00cb      	lsls	r3, r1, #3
 800cbfa:	4651      	mov	r1, sl
 800cbfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc00:	4651      	mov	r1, sl
 800cc02:	00ca      	lsls	r2, r1, #3
 800cc04:	4610      	mov	r0, r2
 800cc06:	4619      	mov	r1, r3
 800cc08:	4603      	mov	r3, r0
 800cc0a:	4642      	mov	r2, r8
 800cc0c:	189b      	adds	r3, r3, r2
 800cc0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc10:	464b      	mov	r3, r9
 800cc12:	460a      	mov	r2, r1
 800cc14:	eb42 0303 	adc.w	r3, r2, r3
 800cc18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	663b      	str	r3, [r7, #96]	; 0x60
 800cc24:	667a      	str	r2, [r7, #100]	; 0x64
 800cc26:	f04f 0200 	mov.w	r2, #0
 800cc2a:	f04f 0300 	mov.w	r3, #0
 800cc2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc32:	4649      	mov	r1, r9
 800cc34:	008b      	lsls	r3, r1, #2
 800cc36:	4641      	mov	r1, r8
 800cc38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc3c:	4641      	mov	r1, r8
 800cc3e:	008a      	lsls	r2, r1, #2
 800cc40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc44:	f7f4 f81a 	bl	8000c7c <__aeabi_uldivmod>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <UART_SetConfig+0x4e4>)
 800cc4e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc52:	095b      	lsrs	r3, r3, #5
 800cc54:	2164      	movs	r1, #100	; 0x64
 800cc56:	fb01 f303 	mul.w	r3, r1, r3
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	3332      	adds	r3, #50	; 0x32
 800cc60:	4a08      	ldr	r2, [pc, #32]	; (800cc84 <UART_SetConfig+0x4e4>)
 800cc62:	fba2 2303 	umull	r2, r3, r2, r3
 800cc66:	095b      	lsrs	r3, r3, #5
 800cc68:	f003 020f 	and.w	r2, r3, #15
 800cc6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4422      	add	r2, r4
 800cc74:	609a      	str	r2, [r3, #8]
}
 800cc76:	bf00      	nop
 800cc78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc82:	bf00      	nop
 800cc84:	51eb851f 	.word	0x51eb851f

0800cc88 <asctime>:
 800cc88:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <asctime+0x38>)
 800cc8a:	b570      	push	{r4, r5, r6, lr}
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800cc90:	4604      	mov	r4, r0
 800cc92:	b976      	cbnz	r6, 800ccb2 <asctime+0x2a>
 800cc94:	201a      	movs	r0, #26
 800cc96:	f000 f893 	bl	800cdc0 <malloc>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	6428      	str	r0, [r5, #64]	; 0x40
 800cc9e:	b920      	cbnz	r0, 800ccaa <asctime+0x22>
 800cca0:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <asctime+0x3c>)
 800cca2:	4809      	ldr	r0, [pc, #36]	; (800ccc8 <asctime+0x40>)
 800cca4:	2137      	movs	r1, #55	; 0x37
 800cca6:	f000 f837 	bl	800cd18 <__assert_func>
 800ccaa:	221a      	movs	r2, #26
 800ccac:	4631      	mov	r1, r6
 800ccae:	f000 f8a5 	bl	800cdfc <memset>
 800ccb2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccba:	f000 b807 	b.w	800cccc <asctime_r>
 800ccbe:	bf00      	nop
 800ccc0:	200002c0 	.word	0x200002c0
 800ccc4:	0803a594 	.word	0x0803a594
 800ccc8:	0803a5ab 	.word	0x0803a5ab

0800cccc <asctime_r>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	460c      	mov	r4, r1
 800ccd0:	6941      	ldr	r1, [r0, #20]
 800ccd2:	6903      	ldr	r3, [r0, #16]
 800ccd4:	6982      	ldr	r2, [r0, #24]
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800ccdc:	9104      	str	r1, [sp, #16]
 800ccde:	6801      	ldr	r1, [r0, #0]
 800cce0:	9103      	str	r1, [sp, #12]
 800cce2:	6841      	ldr	r1, [r0, #4]
 800cce4:	9102      	str	r1, [sp, #8]
 800cce6:	6881      	ldr	r1, [r0, #8]
 800cce8:	9101      	str	r1, [sp, #4]
 800ccea:	68c1      	ldr	r1, [r0, #12]
 800ccec:	9100      	str	r1, [sp, #0]
 800ccee:	4907      	ldr	r1, [pc, #28]	; (800cd0c <asctime_r+0x40>)
 800ccf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ccf4:	440b      	add	r3, r1
 800ccf6:	4906      	ldr	r1, [pc, #24]	; (800cd10 <asctime_r+0x44>)
 800ccf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ccfc:	440a      	add	r2, r1
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4904      	ldr	r1, [pc, #16]	; (800cd14 <asctime_r+0x48>)
 800cd02:	f001 f9a9 	bl	800e058 <siprintf>
 800cd06:	4620      	mov	r0, r4
 800cd08:	b006      	add	sp, #24
 800cd0a:	bd10      	pop	{r4, pc}
 800cd0c:	0803a63c 	.word	0x0803a63c
 800cd10:	0803a627 	.word	0x0803a627
 800cd14:	0803a607 	.word	0x0803a607

0800cd18 <__assert_func>:
 800cd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd1a:	4614      	mov	r4, r2
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <__assert_func+0x2c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4605      	mov	r5, r0
 800cd24:	68d8      	ldr	r0, [r3, #12]
 800cd26:	b14c      	cbz	r4, 800cd3c <__assert_func+0x24>
 800cd28:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <__assert_func+0x30>)
 800cd2a:	9100      	str	r1, [sp, #0]
 800cd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd30:	4906      	ldr	r1, [pc, #24]	; (800cd4c <__assert_func+0x34>)
 800cd32:	462b      	mov	r3, r5
 800cd34:	f000 f80e 	bl	800cd54 <fiprintf>
 800cd38:	f002 fb6a 	bl	800f410 <abort>
 800cd3c:	4b04      	ldr	r3, [pc, #16]	; (800cd50 <__assert_func+0x38>)
 800cd3e:	461c      	mov	r4, r3
 800cd40:	e7f3      	b.n	800cd2a <__assert_func+0x12>
 800cd42:	bf00      	nop
 800cd44:	200002c0 	.word	0x200002c0
 800cd48:	0803a660 	.word	0x0803a660
 800cd4c:	0803a66d 	.word	0x0803a66d
 800cd50:	0803a626 	.word	0x0803a626

0800cd54 <fiprintf>:
 800cd54:	b40e      	push	{r1, r2, r3}
 800cd56:	b503      	push	{r0, r1, lr}
 800cd58:	4601      	mov	r1, r0
 800cd5a:	ab03      	add	r3, sp, #12
 800cd5c:	4805      	ldr	r0, [pc, #20]	; (800cd74 <fiprintf+0x20>)
 800cd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd62:	6800      	ldr	r0, [r0, #0]
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	f000 fbcd 	bl	800d504 <_vfiprintf_r>
 800cd6a:	b002      	add	sp, #8
 800cd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd70:	b003      	add	sp, #12
 800cd72:	4770      	bx	lr
 800cd74:	200002c0 	.word	0x200002c0

0800cd78 <__libc_init_array>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	4d0d      	ldr	r5, [pc, #52]	; (800cdb0 <__libc_init_array+0x38>)
 800cd7c:	4c0d      	ldr	r4, [pc, #52]	; (800cdb4 <__libc_init_array+0x3c>)
 800cd7e:	1b64      	subs	r4, r4, r5
 800cd80:	10a4      	asrs	r4, r4, #2
 800cd82:	2600      	movs	r6, #0
 800cd84:	42a6      	cmp	r6, r4
 800cd86:	d109      	bne.n	800cd9c <__libc_init_array+0x24>
 800cd88:	4d0b      	ldr	r5, [pc, #44]	; (800cdb8 <__libc_init_array+0x40>)
 800cd8a:	4c0c      	ldr	r4, [pc, #48]	; (800cdbc <__libc_init_array+0x44>)
 800cd8c:	f007 fb56 	bl	801443c <_init>
 800cd90:	1b64      	subs	r4, r4, r5
 800cd92:	10a4      	asrs	r4, r4, #2
 800cd94:	2600      	movs	r6, #0
 800cd96:	42a6      	cmp	r6, r4
 800cd98:	d105      	bne.n	800cda6 <__libc_init_array+0x2e>
 800cd9a:	bd70      	pop	{r4, r5, r6, pc}
 800cd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda0:	4798      	blx	r3
 800cda2:	3601      	adds	r6, #1
 800cda4:	e7ee      	b.n	800cd84 <__libc_init_array+0xc>
 800cda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdaa:	4798      	blx	r3
 800cdac:	3601      	adds	r6, #1
 800cdae:	e7f2      	b.n	800cd96 <__libc_init_array+0x1e>
 800cdb0:	0803b030 	.word	0x0803b030
 800cdb4:	0803b030 	.word	0x0803b030
 800cdb8:	0803b030 	.word	0x0803b030
 800cdbc:	0803b034 	.word	0x0803b034

0800cdc0 <malloc>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	; (800cdcc <malloc+0xc>)
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f000 baff 	b.w	800d3c8 <_malloc_r>
 800cdca:	bf00      	nop
 800cdcc:	200002c0 	.word	0x200002c0

0800cdd0 <free>:
 800cdd0:	4b02      	ldr	r3, [pc, #8]	; (800cddc <free+0xc>)
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	f000 ba8b 	b.w	800d2f0 <_free_r>
 800cdda:	bf00      	nop
 800cddc:	200002c0 	.word	0x200002c0

0800cde0 <memcpy>:
 800cde0:	440a      	add	r2, r1
 800cde2:	4291      	cmp	r1, r2
 800cde4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde8:	d100      	bne.n	800cdec <memcpy+0xc>
 800cdea:	4770      	bx	lr
 800cdec:	b510      	push	{r4, lr}
 800cdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdf6:	4291      	cmp	r1, r2
 800cdf8:	d1f9      	bne.n	800cdee <memcpy+0xe>
 800cdfa:	bd10      	pop	{r4, pc}

0800cdfc <memset>:
 800cdfc:	4402      	add	r2, r0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d100      	bne.n	800ce06 <memset+0xa>
 800ce04:	4770      	bx	lr
 800ce06:	f803 1b01 	strb.w	r1, [r3], #1
 800ce0a:	e7f9      	b.n	800ce00 <memset+0x4>

0800ce0c <validate_structure>:
 800ce0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce0e:	6801      	ldr	r1, [r0, #0]
 800ce10:	293b      	cmp	r1, #59	; 0x3b
 800ce12:	4604      	mov	r4, r0
 800ce14:	d911      	bls.n	800ce3a <validate_structure+0x2e>
 800ce16:	223c      	movs	r2, #60	; 0x3c
 800ce18:	4668      	mov	r0, sp
 800ce1a:	f002 fb15 	bl	800f448 <div>
 800ce1e:	9a01      	ldr	r2, [sp, #4]
 800ce20:	6863      	ldr	r3, [r4, #4]
 800ce22:	9900      	ldr	r1, [sp, #0]
 800ce24:	2a00      	cmp	r2, #0
 800ce26:	440b      	add	r3, r1
 800ce28:	6063      	str	r3, [r4, #4]
 800ce2a:	bfbb      	ittet	lt
 800ce2c:	323c      	addlt	r2, #60	; 0x3c
 800ce2e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ce32:	6022      	strge	r2, [r4, #0]
 800ce34:	6022      	strlt	r2, [r4, #0]
 800ce36:	bfb8      	it	lt
 800ce38:	6063      	strlt	r3, [r4, #4]
 800ce3a:	6861      	ldr	r1, [r4, #4]
 800ce3c:	293b      	cmp	r1, #59	; 0x3b
 800ce3e:	d911      	bls.n	800ce64 <validate_structure+0x58>
 800ce40:	223c      	movs	r2, #60	; 0x3c
 800ce42:	4668      	mov	r0, sp
 800ce44:	f002 fb00 	bl	800f448 <div>
 800ce48:	9a01      	ldr	r2, [sp, #4]
 800ce4a:	68a3      	ldr	r3, [r4, #8]
 800ce4c:	9900      	ldr	r1, [sp, #0]
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	440b      	add	r3, r1
 800ce52:	60a3      	str	r3, [r4, #8]
 800ce54:	bfbb      	ittet	lt
 800ce56:	323c      	addlt	r2, #60	; 0x3c
 800ce58:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ce5c:	6062      	strge	r2, [r4, #4]
 800ce5e:	6062      	strlt	r2, [r4, #4]
 800ce60:	bfb8      	it	lt
 800ce62:	60a3      	strlt	r3, [r4, #8]
 800ce64:	68a1      	ldr	r1, [r4, #8]
 800ce66:	2917      	cmp	r1, #23
 800ce68:	d911      	bls.n	800ce8e <validate_structure+0x82>
 800ce6a:	2218      	movs	r2, #24
 800ce6c:	4668      	mov	r0, sp
 800ce6e:	f002 faeb 	bl	800f448 <div>
 800ce72:	9a01      	ldr	r2, [sp, #4]
 800ce74:	68e3      	ldr	r3, [r4, #12]
 800ce76:	9900      	ldr	r1, [sp, #0]
 800ce78:	2a00      	cmp	r2, #0
 800ce7a:	440b      	add	r3, r1
 800ce7c:	60e3      	str	r3, [r4, #12]
 800ce7e:	bfbb      	ittet	lt
 800ce80:	3218      	addlt	r2, #24
 800ce82:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ce86:	60a2      	strge	r2, [r4, #8]
 800ce88:	60a2      	strlt	r2, [r4, #8]
 800ce8a:	bfb8      	it	lt
 800ce8c:	60e3      	strlt	r3, [r4, #12]
 800ce8e:	6921      	ldr	r1, [r4, #16]
 800ce90:	290b      	cmp	r1, #11
 800ce92:	d911      	bls.n	800ceb8 <validate_structure+0xac>
 800ce94:	220c      	movs	r2, #12
 800ce96:	4668      	mov	r0, sp
 800ce98:	f002 fad6 	bl	800f448 <div>
 800ce9c:	9a01      	ldr	r2, [sp, #4]
 800ce9e:	6963      	ldr	r3, [r4, #20]
 800cea0:	9900      	ldr	r1, [sp, #0]
 800cea2:	2a00      	cmp	r2, #0
 800cea4:	440b      	add	r3, r1
 800cea6:	6163      	str	r3, [r4, #20]
 800cea8:	bfbb      	ittet	lt
 800ceaa:	320c      	addlt	r2, #12
 800ceac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ceb0:	6122      	strge	r2, [r4, #16]
 800ceb2:	6122      	strlt	r2, [r4, #16]
 800ceb4:	bfb8      	it	lt
 800ceb6:	6163      	strlt	r3, [r4, #20]
 800ceb8:	6963      	ldr	r3, [r4, #20]
 800ceba:	0798      	lsls	r0, r3, #30
 800cebc:	d120      	bne.n	800cf00 <validate_structure+0xf4>
 800cebe:	2164      	movs	r1, #100	; 0x64
 800cec0:	fb93 f2f1 	sdiv	r2, r3, r1
 800cec4:	fb01 3212 	mls	r2, r1, r2, r3
 800cec8:	b9e2      	cbnz	r2, 800cf04 <validate_structure+0xf8>
 800ceca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800cece:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ced2:	fb93 f1f2 	sdiv	r1, r3, r2
 800ced6:	fb02 3311 	mls	r3, r2, r1, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	231c      	movne	r3, #28
 800cee0:	231d      	moveq	r3, #29
 800cee2:	68e2      	ldr	r2, [r4, #12]
 800cee4:	2a00      	cmp	r2, #0
 800cee6:	dc0f      	bgt.n	800cf08 <validate_structure+0xfc>
 800cee8:	4f33      	ldr	r7, [pc, #204]	; (800cfb8 <validate_structure+0x1ac>)
 800ceea:	260b      	movs	r6, #11
 800ceec:	2064      	movs	r0, #100	; 0x64
 800ceee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800cef2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800cef6:	f1bc 0f00 	cmp.w	ip, #0
 800cefa:	dd31      	ble.n	800cf60 <validate_structure+0x154>
 800cefc:	b003      	add	sp, #12
 800cefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf00:	231c      	movs	r3, #28
 800cf02:	e7ee      	b.n	800cee2 <validate_structure+0xd6>
 800cf04:	231d      	movs	r3, #29
 800cf06:	e7ec      	b.n	800cee2 <validate_structure+0xd6>
 800cf08:	4e2b      	ldr	r6, [pc, #172]	; (800cfb8 <validate_structure+0x1ac>)
 800cf0a:	2700      	movs	r7, #0
 800cf0c:	2064      	movs	r0, #100	; 0x64
 800cf0e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800cf12:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800cf16:	2a01      	cmp	r2, #1
 800cf18:	bf14      	ite	ne
 800cf1a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800cf1e:	469c      	moveq	ip, r3
 800cf20:	4561      	cmp	r1, ip
 800cf22:	ddeb      	ble.n	800cefc <validate_structure+0xf0>
 800cf24:	3201      	adds	r2, #1
 800cf26:	eba1 010c 	sub.w	r1, r1, ip
 800cf2a:	2a0c      	cmp	r2, #12
 800cf2c:	60e1      	str	r1, [r4, #12]
 800cf2e:	6122      	str	r2, [r4, #16]
 800cf30:	d1ef      	bne.n	800cf12 <validate_structure+0x106>
 800cf32:	6963      	ldr	r3, [r4, #20]
 800cf34:	1c5a      	adds	r2, r3, #1
 800cf36:	0791      	lsls	r1, r2, #30
 800cf38:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800cf3c:	d137      	bne.n	800cfae <validate_structure+0x1a2>
 800cf3e:	fb92 f1f0 	sdiv	r1, r2, r0
 800cf42:	fb00 2211 	mls	r2, r0, r1, r2
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	d133      	bne.n	800cfb2 <validate_structure+0x1a6>
 800cf4a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800cf4e:	fb93 f2f5 	sdiv	r2, r3, r5
 800cf52:	fb05 3312 	mls	r3, r5, r2, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bf14      	ite	ne
 800cf5a:	231c      	movne	r3, #28
 800cf5c:	231d      	moveq	r3, #29
 800cf5e:	e7d8      	b.n	800cf12 <validate_structure+0x106>
 800cf60:	6921      	ldr	r1, [r4, #16]
 800cf62:	3901      	subs	r1, #1
 800cf64:	6121      	str	r1, [r4, #16]
 800cf66:	3101      	adds	r1, #1
 800cf68:	d114      	bne.n	800cf94 <validate_structure+0x188>
 800cf6a:	6963      	ldr	r3, [r4, #20]
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	0791      	lsls	r1, r2, #30
 800cf70:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800cf74:	d117      	bne.n	800cfa6 <validate_structure+0x19a>
 800cf76:	fb92 f1f0 	sdiv	r1, r2, r0
 800cf7a:	fb00 2211 	mls	r2, r0, r1, r2
 800cf7e:	b9a2      	cbnz	r2, 800cfaa <validate_structure+0x19e>
 800cf80:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800cf84:	fb93 f2f5 	sdiv	r2, r3, r5
 800cf88:	fb05 3312 	mls	r3, r5, r2, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bf14      	ite	ne
 800cf90:	231c      	movne	r3, #28
 800cf92:	231d      	moveq	r3, #29
 800cf94:	6922      	ldr	r2, [r4, #16]
 800cf96:	2a01      	cmp	r2, #1
 800cf98:	bf14      	ite	ne
 800cf9a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800cf9e:	461a      	moveq	r2, r3
 800cfa0:	4462      	add	r2, ip
 800cfa2:	60e2      	str	r2, [r4, #12]
 800cfa4:	e7a5      	b.n	800cef2 <validate_structure+0xe6>
 800cfa6:	231c      	movs	r3, #28
 800cfa8:	e7f4      	b.n	800cf94 <validate_structure+0x188>
 800cfaa:	231d      	movs	r3, #29
 800cfac:	e7f2      	b.n	800cf94 <validate_structure+0x188>
 800cfae:	231c      	movs	r3, #28
 800cfb0:	e7af      	b.n	800cf12 <validate_structure+0x106>
 800cfb2:	231d      	movs	r3, #29
 800cfb4:	e7ad      	b.n	800cf12 <validate_structure+0x106>
 800cfb6:	bf00      	nop
 800cfb8:	0803a6a0 	.word	0x0803a6a0

0800cfbc <mktime>:
 800cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	f003 faca 	bl	801055c <__gettzinfo>
 800cfc8:	4681      	mov	r9, r0
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f7ff ff1e 	bl	800ce0c <validate_structure>
 800cfd0:	e9d7 4000 	ldrd	r4, r0, [r7]
 800cfd4:	233c      	movs	r3, #60	; 0x3c
 800cfd6:	fb03 4400 	mla	r4, r3, r0, r4
 800cfda:	68b8      	ldr	r0, [r7, #8]
 800cfdc:	4abc      	ldr	r2, [pc, #752]	; (800d2d0 <mktime+0x314>)
 800cfde:	697e      	ldr	r6, [r7, #20]
 800cfe0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cfe4:	fb03 4400 	mla	r4, r3, r0, r4
 800cfe8:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800cfec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cff0:	3d01      	subs	r5, #1
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	4415      	add	r5, r2
 800cff6:	dd11      	ble.n	800d01c <mktime+0x60>
 800cff8:	07b1      	lsls	r1, r6, #30
 800cffa:	d10f      	bne.n	800d01c <mktime+0x60>
 800cffc:	2264      	movs	r2, #100	; 0x64
 800cffe:	fb96 f3f2 	sdiv	r3, r6, r2
 800d002:	fb02 6313 	mls	r3, r2, r3, r6
 800d006:	b943      	cbnz	r3, 800d01a <mktime+0x5e>
 800d008:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800d00c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d010:	fb93 f1f2 	sdiv	r1, r3, r2
 800d014:	fb02 3311 	mls	r3, r2, r1, r3
 800d018:	b903      	cbnz	r3, 800d01c <mktime+0x60>
 800d01a:	3501      	adds	r5, #1
 800d01c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800d020:	3310      	adds	r3, #16
 800d022:	f644 6220 	movw	r2, #20000	; 0x4e20
 800d026:	4293      	cmp	r3, r2
 800d028:	61fd      	str	r5, [r7, #28]
 800d02a:	f200 815d 	bhi.w	800d2e8 <mktime+0x32c>
 800d02e:	2e46      	cmp	r6, #70	; 0x46
 800d030:	dd71      	ble.n	800d116 <mktime+0x15a>
 800d032:	2346      	movs	r3, #70	; 0x46
 800d034:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d038:	2164      	movs	r1, #100	; 0x64
 800d03a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d03e:	079a      	lsls	r2, r3, #30
 800d040:	d163      	bne.n	800d10a <mktime+0x14e>
 800d042:	fb93 f2f1 	sdiv	r2, r3, r1
 800d046:	fb01 3212 	mls	r2, r1, r2, r3
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d160      	bne.n	800d110 <mktime+0x154>
 800d04e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d052:	fb92 fef0 	sdiv	lr, r2, r0
 800d056:	fb00 221e 	mls	r2, r0, lr, r2
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	bf14      	ite	ne
 800d05e:	4662      	movne	r2, ip
 800d060:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d064:	3301      	adds	r3, #1
 800d066:	429e      	cmp	r6, r3
 800d068:	4415      	add	r5, r2
 800d06a:	d1e8      	bne.n	800d03e <mktime+0x82>
 800d06c:	4b99      	ldr	r3, [pc, #612]	; (800d2d4 <mktime+0x318>)
 800d06e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800d072:	fbc5 4803 	smlal	r4, r8, r5, r3
 800d076:	f001 ff67 	bl	800ef48 <__tz_lock>
 800d07a:	f001 ff71 	bl	800ef60 <_tzset_unlocked>
 800d07e:	4b96      	ldr	r3, [pc, #600]	; (800d2d8 <mktime+0x31c>)
 800d080:	f8d3 b000 	ldr.w	fp, [r3]
 800d084:	f1bb 0f00 	cmp.w	fp, #0
 800d088:	d039      	beq.n	800d0fe <mktime+0x142>
 800d08a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800d08e:	6978      	ldr	r0, [r7, #20]
 800d090:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d094:	f1bb 0f01 	cmp.w	fp, #1
 800d098:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d09c:	46da      	mov	sl, fp
 800d09e:	bfa8      	it	ge
 800d0a0:	f04f 0a01 	movge.w	sl, #1
 800d0a4:	4283      	cmp	r3, r0
 800d0a6:	d178      	bne.n	800d19a <mktime+0x1de>
 800d0a8:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800d0ac:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800d0b0:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800d0b4:	1a5b      	subs	r3, r3, r1
 800d0b6:	9302      	str	r3, [sp, #8]
 800d0b8:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800d0bc:	9303      	str	r3, [sp, #12]
 800d0be:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800d0c2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	ebb3 0c02 	subs.w	ip, r3, r2
 800d0cc:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800d0d0:	4564      	cmp	r4, ip
 800d0d2:	eb78 0300 	sbcs.w	r3, r8, r0
 800d0d6:	da66      	bge.n	800d1a6 <mktime+0x1ea>
 800d0d8:	f8d9 3000 	ldr.w	r3, [r9]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d06f      	beq.n	800d1c0 <mktime+0x204>
 800d0e0:	9b02      	ldr	r3, [sp, #8]
 800d0e2:	429c      	cmp	r4, r3
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	eb78 0303 	sbcs.w	r3, r8, r3
 800d0ea:	db03      	blt.n	800d0f4 <mktime+0x138>
 800d0ec:	4564      	cmp	r4, ip
 800d0ee:	eb78 0300 	sbcs.w	r3, r8, r0
 800d0f2:	db6b      	blt.n	800d1cc <mktime+0x210>
 800d0f4:	f1bb 0f00 	cmp.w	fp, #0
 800d0f8:	f04f 0b00 	mov.w	fp, #0
 800d0fc:	da6b      	bge.n	800d1d6 <mktime+0x21a>
 800d0fe:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800d102:	190c      	adds	r4, r1, r4
 800d104:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800d108:	e0a9      	b.n	800d25e <mktime+0x2a2>
 800d10a:	f240 126d 	movw	r2, #365	; 0x16d
 800d10e:	e7a9      	b.n	800d064 <mktime+0xa8>
 800d110:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d114:	e7a6      	b.n	800d064 <mktime+0xa8>
 800d116:	d0a9      	beq.n	800d06c <mktime+0xb0>
 800d118:	2345      	movs	r3, #69	; 0x45
 800d11a:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d11e:	2164      	movs	r1, #100	; 0x64
 800d120:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d124:	e012      	b.n	800d14c <mktime+0x190>
 800d126:	bb62      	cbnz	r2, 800d182 <mktime+0x1c6>
 800d128:	fb93 f2f1 	sdiv	r2, r3, r1
 800d12c:	fb01 3212 	mls	r2, r1, r2, r3
 800d130:	bb52      	cbnz	r2, 800d188 <mktime+0x1cc>
 800d132:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800d136:	fb92 fef0 	sdiv	lr, r2, r0
 800d13a:	fb00 221e 	mls	r2, r0, lr, r2
 800d13e:	2a00      	cmp	r2, #0
 800d140:	bf14      	ite	ne
 800d142:	4662      	movne	r2, ip
 800d144:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d148:	1aad      	subs	r5, r5, r2
 800d14a:	3b01      	subs	r3, #1
 800d14c:	429e      	cmp	r6, r3
 800d14e:	f003 0203 	and.w	r2, r3, #3
 800d152:	dbe8      	blt.n	800d126 <mktime+0x16a>
 800d154:	b9da      	cbnz	r2, 800d18e <mktime+0x1d2>
 800d156:	2264      	movs	r2, #100	; 0x64
 800d158:	fb96 f3f2 	sdiv	r3, r6, r2
 800d15c:	fb02 6313 	mls	r3, r2, r3, r6
 800d160:	b9c3      	cbnz	r3, 800d194 <mktime+0x1d8>
 800d162:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800d166:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d16a:	fb93 f1f2 	sdiv	r1, r3, r2
 800d16e:	fb02 3311 	mls	r3, r2, r1, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	f240 136d 	movw	r3, #365	; 0x16d
 800d178:	bf08      	it	eq
 800d17a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800d17e:	1aed      	subs	r5, r5, r3
 800d180:	e774      	b.n	800d06c <mktime+0xb0>
 800d182:	f240 126d 	movw	r2, #365	; 0x16d
 800d186:	e7df      	b.n	800d148 <mktime+0x18c>
 800d188:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d18c:	e7dc      	b.n	800d148 <mktime+0x18c>
 800d18e:	f240 136d 	movw	r3, #365	; 0x16d
 800d192:	e7f4      	b.n	800d17e <mktime+0x1c2>
 800d194:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800d198:	e7f1      	b.n	800d17e <mktime+0x1c2>
 800d19a:	f001 fe2b 	bl	800edf4 <__tzcalc_limits>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d182      	bne.n	800d0a8 <mktime+0xec>
 800d1a2:	46d3      	mov	fp, sl
 800d1a4:	e050      	b.n	800d248 <mktime+0x28c>
 800d1a6:	9b01      	ldr	r3, [sp, #4]
 800d1a8:	1a5b      	subs	r3, r3, r1
 800d1aa:	9301      	str	r3, [sp, #4]
 800d1ac:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800d1b0:	eb6e 0e03 	sbc.w	lr, lr, r3
 800d1b4:	9b01      	ldr	r3, [sp, #4]
 800d1b6:	429c      	cmp	r4, r3
 800d1b8:	eb78 030e 	sbcs.w	r3, r8, lr
 800d1bc:	dbf1      	blt.n	800d1a2 <mktime+0x1e6>
 800d1be:	e78b      	b.n	800d0d8 <mktime+0x11c>
 800d1c0:	9b02      	ldr	r3, [sp, #8]
 800d1c2:	429c      	cmp	r4, r3
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	eb78 0303 	sbcs.w	r3, r8, r3
 800d1ca:	db8f      	blt.n	800d0ec <mktime+0x130>
 800d1cc:	f1bb 0f00 	cmp.w	fp, #0
 800d1d0:	db3e      	blt.n	800d250 <mktime+0x294>
 800d1d2:	f04f 0b01 	mov.w	fp, #1
 800d1d6:	ea8a 0a0b 	eor.w	sl, sl, fp
 800d1da:	f1ba 0f01 	cmp.w	sl, #1
 800d1de:	d133      	bne.n	800d248 <mktime+0x28c>
 800d1e0:	f1bb 0f00 	cmp.w	fp, #0
 800d1e4:	d04e      	beq.n	800d284 <mktime+0x2c8>
 800d1e6:	1a52      	subs	r2, r2, r1
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	1914      	adds	r4, r2, r4
 800d1f2:	603b      	str	r3, [r7, #0]
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800d1fa:	f7ff fe07 	bl	800ce0c <validate_structure>
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	ebb2 020a 	subs.w	r2, r2, sl
 800d204:	d020      	beq.n	800d248 <mktime+0x28c>
 800d206:	2a01      	cmp	r2, #1
 800d208:	dc3e      	bgt.n	800d288 <mktime+0x2cc>
 800d20a:	1c90      	adds	r0, r2, #2
 800d20c:	bfd8      	it	le
 800d20e:	2201      	movle	r2, #1
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	18d3      	adds	r3, r2, r3
 800d214:	4415      	add	r5, r2
 800d216:	d540      	bpl.n	800d29a <mktime+0x2de>
 800d218:	1e73      	subs	r3, r6, #1
 800d21a:	0799      	lsls	r1, r3, #30
 800d21c:	d137      	bne.n	800d28e <mktime+0x2d2>
 800d21e:	2264      	movs	r2, #100	; 0x64
 800d220:	fb93 f1f2 	sdiv	r1, r3, r2
 800d224:	fb02 3311 	mls	r3, r2, r1, r3
 800d228:	bba3      	cbnz	r3, 800d294 <mktime+0x2d8>
 800d22a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d22e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800d232:	fb96 f2f3 	sdiv	r2, r6, r3
 800d236:	fb03 6612 	mls	r6, r3, r2, r6
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	f240 136d 	movw	r3, #365	; 0x16d
 800d240:	bf18      	it	ne
 800d242:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800d246:	61fb      	str	r3, [r7, #28]
 800d248:	f1bb 0f01 	cmp.w	fp, #1
 800d24c:	f47f af57 	bne.w	800d0fe <mktime+0x142>
 800d250:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800d254:	190c      	adds	r4, r1, r4
 800d256:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800d25a:	f04f 0b01 	mov.w	fp, #1
 800d25e:	f001 fe79 	bl	800ef54 <__tz_unlock>
 800d262:	3504      	adds	r5, #4
 800d264:	2307      	movs	r3, #7
 800d266:	fb95 f3f3 	sdiv	r3, r5, r3
 800d26a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d26e:	1aed      	subs	r5, r5, r3
 800d270:	bf48      	it	mi
 800d272:	3507      	addmi	r5, #7
 800d274:	f8c7 b020 	str.w	fp, [r7, #32]
 800d278:	61bd      	str	r5, [r7, #24]
 800d27a:	4620      	mov	r0, r4
 800d27c:	4641      	mov	r1, r8
 800d27e:	b005      	add	sp, #20
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	1a8a      	subs	r2, r1, r2
 800d286:	e7af      	b.n	800d1e8 <mktime+0x22c>
 800d288:	f04f 32ff 	mov.w	r2, #4294967295
 800d28c:	e7c0      	b.n	800d210 <mktime+0x254>
 800d28e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800d292:	e7d8      	b.n	800d246 <mktime+0x28a>
 800d294:	f240 136d 	movw	r3, #365	; 0x16d
 800d298:	e7d5      	b.n	800d246 <mktime+0x28a>
 800d29a:	07b2      	lsls	r2, r6, #30
 800d29c:	d11e      	bne.n	800d2dc <mktime+0x320>
 800d29e:	2164      	movs	r1, #100	; 0x64
 800d2a0:	fb96 f2f1 	sdiv	r2, r6, r1
 800d2a4:	fb01 6212 	mls	r2, r1, r2, r6
 800d2a8:	b9da      	cbnz	r2, 800d2e2 <mktime+0x326>
 800d2aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d2ae:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800d2b2:	fb96 f1f2 	sdiv	r1, r6, r2
 800d2b6:	fb02 6611 	mls	r6, r2, r1, r6
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	f240 126d 	movw	r2, #365	; 0x16d
 800d2c0:	bf08      	it	eq
 800d2c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	bfa8      	it	ge
 800d2ca:	1a9b      	subge	r3, r3, r2
 800d2cc:	e7bb      	b.n	800d246 <mktime+0x28a>
 800d2ce:	bf00      	nop
 800d2d0:	0803a6d0 	.word	0x0803a6d0
 800d2d4:	00015180 	.word	0x00015180
 800d2d8:	20003a30 	.word	0x20003a30
 800d2dc:	f240 126d 	movw	r2, #365	; 0x16d
 800d2e0:	e7f1      	b.n	800d2c6 <mktime+0x30a>
 800d2e2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800d2e6:	e7ee      	b.n	800d2c6 <mktime+0x30a>
 800d2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800d2ec:	46a0      	mov	r8, r4
 800d2ee:	e7c4      	b.n	800d27a <mktime+0x2be>

0800d2f0 <_free_r>:
 800d2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2f2:	2900      	cmp	r1, #0
 800d2f4:	d044      	beq.n	800d380 <_free_r+0x90>
 800d2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2fa:	9001      	str	r0, [sp, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f1a1 0404 	sub.w	r4, r1, #4
 800d302:	bfb8      	it	lt
 800d304:	18e4      	addlt	r4, r4, r3
 800d306:	f003 f9cd 	bl	80106a4 <__malloc_lock>
 800d30a:	4a1e      	ldr	r2, [pc, #120]	; (800d384 <_free_r+0x94>)
 800d30c:	9801      	ldr	r0, [sp, #4]
 800d30e:	6813      	ldr	r3, [r2, #0]
 800d310:	b933      	cbnz	r3, 800d320 <_free_r+0x30>
 800d312:	6063      	str	r3, [r4, #4]
 800d314:	6014      	str	r4, [r2, #0]
 800d316:	b003      	add	sp, #12
 800d318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d31c:	f003 b9c8 	b.w	80106b0 <__malloc_unlock>
 800d320:	42a3      	cmp	r3, r4
 800d322:	d908      	bls.n	800d336 <_free_r+0x46>
 800d324:	6825      	ldr	r5, [r4, #0]
 800d326:	1961      	adds	r1, r4, r5
 800d328:	428b      	cmp	r3, r1
 800d32a:	bf01      	itttt	eq
 800d32c:	6819      	ldreq	r1, [r3, #0]
 800d32e:	685b      	ldreq	r3, [r3, #4]
 800d330:	1949      	addeq	r1, r1, r5
 800d332:	6021      	streq	r1, [r4, #0]
 800d334:	e7ed      	b.n	800d312 <_free_r+0x22>
 800d336:	461a      	mov	r2, r3
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	b10b      	cbz	r3, 800d340 <_free_r+0x50>
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	d9fa      	bls.n	800d336 <_free_r+0x46>
 800d340:	6811      	ldr	r1, [r2, #0]
 800d342:	1855      	adds	r5, r2, r1
 800d344:	42a5      	cmp	r5, r4
 800d346:	d10b      	bne.n	800d360 <_free_r+0x70>
 800d348:	6824      	ldr	r4, [r4, #0]
 800d34a:	4421      	add	r1, r4
 800d34c:	1854      	adds	r4, r2, r1
 800d34e:	42a3      	cmp	r3, r4
 800d350:	6011      	str	r1, [r2, #0]
 800d352:	d1e0      	bne.n	800d316 <_free_r+0x26>
 800d354:	681c      	ldr	r4, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	6053      	str	r3, [r2, #4]
 800d35a:	4421      	add	r1, r4
 800d35c:	6011      	str	r1, [r2, #0]
 800d35e:	e7da      	b.n	800d316 <_free_r+0x26>
 800d360:	d902      	bls.n	800d368 <_free_r+0x78>
 800d362:	230c      	movs	r3, #12
 800d364:	6003      	str	r3, [r0, #0]
 800d366:	e7d6      	b.n	800d316 <_free_r+0x26>
 800d368:	6825      	ldr	r5, [r4, #0]
 800d36a:	1961      	adds	r1, r4, r5
 800d36c:	428b      	cmp	r3, r1
 800d36e:	bf04      	itt	eq
 800d370:	6819      	ldreq	r1, [r3, #0]
 800d372:	685b      	ldreq	r3, [r3, #4]
 800d374:	6063      	str	r3, [r4, #4]
 800d376:	bf04      	itt	eq
 800d378:	1949      	addeq	r1, r1, r5
 800d37a:	6021      	streq	r1, [r4, #0]
 800d37c:	6054      	str	r4, [r2, #4]
 800d37e:	e7ca      	b.n	800d316 <_free_r+0x26>
 800d380:	b003      	add	sp, #12
 800d382:	bd30      	pop	{r4, r5, pc}
 800d384:	20003a0c 	.word	0x20003a0c

0800d388 <sbrk_aligned>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	4e0e      	ldr	r6, [pc, #56]	; (800d3c4 <sbrk_aligned+0x3c>)
 800d38c:	460c      	mov	r4, r1
 800d38e:	6831      	ldr	r1, [r6, #0]
 800d390:	4605      	mov	r5, r0
 800d392:	b911      	cbnz	r1, 800d39a <sbrk_aligned+0x12>
 800d394:	f000 fe50 	bl	800e038 <_sbrk_r>
 800d398:	6030      	str	r0, [r6, #0]
 800d39a:	4621      	mov	r1, r4
 800d39c:	4628      	mov	r0, r5
 800d39e:	f000 fe4b 	bl	800e038 <_sbrk_r>
 800d3a2:	1c43      	adds	r3, r0, #1
 800d3a4:	d00a      	beq.n	800d3bc <sbrk_aligned+0x34>
 800d3a6:	1cc4      	adds	r4, r0, #3
 800d3a8:	f024 0403 	bic.w	r4, r4, #3
 800d3ac:	42a0      	cmp	r0, r4
 800d3ae:	d007      	beq.n	800d3c0 <sbrk_aligned+0x38>
 800d3b0:	1a21      	subs	r1, r4, r0
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	f000 fe40 	bl	800e038 <_sbrk_r>
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d101      	bne.n	800d3c0 <sbrk_aligned+0x38>
 800d3bc:	f04f 34ff 	mov.w	r4, #4294967295
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	20003a10 	.word	0x20003a10

0800d3c8 <_malloc_r>:
 800d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3cc:	1ccd      	adds	r5, r1, #3
 800d3ce:	f025 0503 	bic.w	r5, r5, #3
 800d3d2:	3508      	adds	r5, #8
 800d3d4:	2d0c      	cmp	r5, #12
 800d3d6:	bf38      	it	cc
 800d3d8:	250c      	movcc	r5, #12
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	4607      	mov	r7, r0
 800d3de:	db01      	blt.n	800d3e4 <_malloc_r+0x1c>
 800d3e0:	42a9      	cmp	r1, r5
 800d3e2:	d905      	bls.n	800d3f0 <_malloc_r+0x28>
 800d3e4:	230c      	movs	r3, #12
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	2600      	movs	r6, #0
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	4e2e      	ldr	r6, [pc, #184]	; (800d4ac <_malloc_r+0xe4>)
 800d3f2:	f003 f957 	bl	80106a4 <__malloc_lock>
 800d3f6:	6833      	ldr	r3, [r6, #0]
 800d3f8:	461c      	mov	r4, r3
 800d3fa:	bb34      	cbnz	r4, 800d44a <_malloc_r+0x82>
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	4638      	mov	r0, r7
 800d400:	f7ff ffc2 	bl	800d388 <sbrk_aligned>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	4604      	mov	r4, r0
 800d408:	d14d      	bne.n	800d4a6 <_malloc_r+0xde>
 800d40a:	6834      	ldr	r4, [r6, #0]
 800d40c:	4626      	mov	r6, r4
 800d40e:	2e00      	cmp	r6, #0
 800d410:	d140      	bne.n	800d494 <_malloc_r+0xcc>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	4631      	mov	r1, r6
 800d416:	4638      	mov	r0, r7
 800d418:	eb04 0803 	add.w	r8, r4, r3
 800d41c:	f000 fe0c 	bl	800e038 <_sbrk_r>
 800d420:	4580      	cmp	r8, r0
 800d422:	d13a      	bne.n	800d49a <_malloc_r+0xd2>
 800d424:	6821      	ldr	r1, [r4, #0]
 800d426:	3503      	adds	r5, #3
 800d428:	1a6d      	subs	r5, r5, r1
 800d42a:	f025 0503 	bic.w	r5, r5, #3
 800d42e:	3508      	adds	r5, #8
 800d430:	2d0c      	cmp	r5, #12
 800d432:	bf38      	it	cc
 800d434:	250c      	movcc	r5, #12
 800d436:	4629      	mov	r1, r5
 800d438:	4638      	mov	r0, r7
 800d43a:	f7ff ffa5 	bl	800d388 <sbrk_aligned>
 800d43e:	3001      	adds	r0, #1
 800d440:	d02b      	beq.n	800d49a <_malloc_r+0xd2>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	442b      	add	r3, r5
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	e00e      	b.n	800d468 <_malloc_r+0xa0>
 800d44a:	6822      	ldr	r2, [r4, #0]
 800d44c:	1b52      	subs	r2, r2, r5
 800d44e:	d41e      	bmi.n	800d48e <_malloc_r+0xc6>
 800d450:	2a0b      	cmp	r2, #11
 800d452:	d916      	bls.n	800d482 <_malloc_r+0xba>
 800d454:	1961      	adds	r1, r4, r5
 800d456:	42a3      	cmp	r3, r4
 800d458:	6025      	str	r5, [r4, #0]
 800d45a:	bf18      	it	ne
 800d45c:	6059      	strne	r1, [r3, #4]
 800d45e:	6863      	ldr	r3, [r4, #4]
 800d460:	bf08      	it	eq
 800d462:	6031      	streq	r1, [r6, #0]
 800d464:	5162      	str	r2, [r4, r5]
 800d466:	604b      	str	r3, [r1, #4]
 800d468:	4638      	mov	r0, r7
 800d46a:	f104 060b 	add.w	r6, r4, #11
 800d46e:	f003 f91f 	bl	80106b0 <__malloc_unlock>
 800d472:	f026 0607 	bic.w	r6, r6, #7
 800d476:	1d23      	adds	r3, r4, #4
 800d478:	1af2      	subs	r2, r6, r3
 800d47a:	d0b6      	beq.n	800d3ea <_malloc_r+0x22>
 800d47c:	1b9b      	subs	r3, r3, r6
 800d47e:	50a3      	str	r3, [r4, r2]
 800d480:	e7b3      	b.n	800d3ea <_malloc_r+0x22>
 800d482:	6862      	ldr	r2, [r4, #4]
 800d484:	42a3      	cmp	r3, r4
 800d486:	bf0c      	ite	eq
 800d488:	6032      	streq	r2, [r6, #0]
 800d48a:	605a      	strne	r2, [r3, #4]
 800d48c:	e7ec      	b.n	800d468 <_malloc_r+0xa0>
 800d48e:	4623      	mov	r3, r4
 800d490:	6864      	ldr	r4, [r4, #4]
 800d492:	e7b2      	b.n	800d3fa <_malloc_r+0x32>
 800d494:	4634      	mov	r4, r6
 800d496:	6876      	ldr	r6, [r6, #4]
 800d498:	e7b9      	b.n	800d40e <_malloc_r+0x46>
 800d49a:	230c      	movs	r3, #12
 800d49c:	603b      	str	r3, [r7, #0]
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f003 f906 	bl	80106b0 <__malloc_unlock>
 800d4a4:	e7a1      	b.n	800d3ea <_malloc_r+0x22>
 800d4a6:	6025      	str	r5, [r4, #0]
 800d4a8:	e7de      	b.n	800d468 <_malloc_r+0xa0>
 800d4aa:	bf00      	nop
 800d4ac:	20003a0c 	.word	0x20003a0c

0800d4b0 <__sfputc_r>:
 800d4b0:	6893      	ldr	r3, [r2, #8]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	b410      	push	{r4}
 800d4b8:	6093      	str	r3, [r2, #8]
 800d4ba:	da08      	bge.n	800d4ce <__sfputc_r+0x1e>
 800d4bc:	6994      	ldr	r4, [r2, #24]
 800d4be:	42a3      	cmp	r3, r4
 800d4c0:	db01      	blt.n	800d4c6 <__sfputc_r+0x16>
 800d4c2:	290a      	cmp	r1, #10
 800d4c4:	d103      	bne.n	800d4ce <__sfputc_r+0x1e>
 800d4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ca:	f001 becf 	b.w	800f26c <__swbuf_r>
 800d4ce:	6813      	ldr	r3, [r2, #0]
 800d4d0:	1c58      	adds	r0, r3, #1
 800d4d2:	6010      	str	r0, [r2, #0]
 800d4d4:	7019      	strb	r1, [r3, #0]
 800d4d6:	4608      	mov	r0, r1
 800d4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <__sfputs_r>:
 800d4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e0:	4606      	mov	r6, r0
 800d4e2:	460f      	mov	r7, r1
 800d4e4:	4614      	mov	r4, r2
 800d4e6:	18d5      	adds	r5, r2, r3
 800d4e8:	42ac      	cmp	r4, r5
 800d4ea:	d101      	bne.n	800d4f0 <__sfputs_r+0x12>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e007      	b.n	800d500 <__sfputs_r+0x22>
 800d4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f4:	463a      	mov	r2, r7
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f7ff ffda 	bl	800d4b0 <__sfputc_r>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d1f3      	bne.n	800d4e8 <__sfputs_r+0xa>
 800d500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d504 <_vfiprintf_r>:
 800d504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d508:	460d      	mov	r5, r1
 800d50a:	b09d      	sub	sp, #116	; 0x74
 800d50c:	4614      	mov	r4, r2
 800d50e:	4698      	mov	r8, r3
 800d510:	4606      	mov	r6, r0
 800d512:	b118      	cbz	r0, 800d51c <_vfiprintf_r+0x18>
 800d514:	6983      	ldr	r3, [r0, #24]
 800d516:	b90b      	cbnz	r3, 800d51c <_vfiprintf_r+0x18>
 800d518:	f002 ff3e 	bl	8010398 <__sinit>
 800d51c:	4b89      	ldr	r3, [pc, #548]	; (800d744 <_vfiprintf_r+0x240>)
 800d51e:	429d      	cmp	r5, r3
 800d520:	d11b      	bne.n	800d55a <_vfiprintf_r+0x56>
 800d522:	6875      	ldr	r5, [r6, #4]
 800d524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d526:	07d9      	lsls	r1, r3, #31
 800d528:	d405      	bmi.n	800d536 <_vfiprintf_r+0x32>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	059a      	lsls	r2, r3, #22
 800d52e:	d402      	bmi.n	800d536 <_vfiprintf_r+0x32>
 800d530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d532:	f003 f821 	bl	8010578 <__retarget_lock_acquire_recursive>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	071b      	lsls	r3, r3, #28
 800d53a:	d501      	bpl.n	800d540 <_vfiprintf_r+0x3c>
 800d53c:	692b      	ldr	r3, [r5, #16]
 800d53e:	b9eb      	cbnz	r3, 800d57c <_vfiprintf_r+0x78>
 800d540:	4629      	mov	r1, r5
 800d542:	4630      	mov	r0, r6
 800d544:	f001 fef6 	bl	800f334 <__swsetup_r>
 800d548:	b1c0      	cbz	r0, 800d57c <_vfiprintf_r+0x78>
 800d54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d54c:	07dc      	lsls	r4, r3, #31
 800d54e:	d50e      	bpl.n	800d56e <_vfiprintf_r+0x6a>
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	b01d      	add	sp, #116	; 0x74
 800d556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55a:	4b7b      	ldr	r3, [pc, #492]	; (800d748 <_vfiprintf_r+0x244>)
 800d55c:	429d      	cmp	r5, r3
 800d55e:	d101      	bne.n	800d564 <_vfiprintf_r+0x60>
 800d560:	68b5      	ldr	r5, [r6, #8]
 800d562:	e7df      	b.n	800d524 <_vfiprintf_r+0x20>
 800d564:	4b79      	ldr	r3, [pc, #484]	; (800d74c <_vfiprintf_r+0x248>)
 800d566:	429d      	cmp	r5, r3
 800d568:	bf08      	it	eq
 800d56a:	68f5      	ldreq	r5, [r6, #12]
 800d56c:	e7da      	b.n	800d524 <_vfiprintf_r+0x20>
 800d56e:	89ab      	ldrh	r3, [r5, #12]
 800d570:	0598      	lsls	r0, r3, #22
 800d572:	d4ed      	bmi.n	800d550 <_vfiprintf_r+0x4c>
 800d574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d576:	f003 f801 	bl	801057c <__retarget_lock_release_recursive>
 800d57a:	e7e9      	b.n	800d550 <_vfiprintf_r+0x4c>
 800d57c:	2300      	movs	r3, #0
 800d57e:	9309      	str	r3, [sp, #36]	; 0x24
 800d580:	2320      	movs	r3, #32
 800d582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d586:	f8cd 800c 	str.w	r8, [sp, #12]
 800d58a:	2330      	movs	r3, #48	; 0x30
 800d58c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d750 <_vfiprintf_r+0x24c>
 800d590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d594:	f04f 0901 	mov.w	r9, #1
 800d598:	4623      	mov	r3, r4
 800d59a:	469a      	mov	sl, r3
 800d59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5a0:	b10a      	cbz	r2, 800d5a6 <_vfiprintf_r+0xa2>
 800d5a2:	2a25      	cmp	r2, #37	; 0x25
 800d5a4:	d1f9      	bne.n	800d59a <_vfiprintf_r+0x96>
 800d5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d5aa:	d00b      	beq.n	800d5c4 <_vfiprintf_r+0xc0>
 800d5ac:	465b      	mov	r3, fp
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f7ff ff93 	bl	800d4de <__sfputs_r>
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	f000 80aa 	beq.w	800d712 <_vfiprintf_r+0x20e>
 800d5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5c0:	445a      	add	r2, fp
 800d5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f000 80a2 	beq.w	800d712 <_vfiprintf_r+0x20e>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d8:	f10a 0a01 	add.w	sl, sl, #1
 800d5dc:	9304      	str	r3, [sp, #16]
 800d5de:	9307      	str	r3, [sp, #28]
 800d5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d5e6:	4654      	mov	r4, sl
 800d5e8:	2205      	movs	r2, #5
 800d5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ee:	4858      	ldr	r0, [pc, #352]	; (800d750 <_vfiprintf_r+0x24c>)
 800d5f0:	f7f2 fe06 	bl	8000200 <memchr>
 800d5f4:	9a04      	ldr	r2, [sp, #16]
 800d5f6:	b9d8      	cbnz	r0, 800d630 <_vfiprintf_r+0x12c>
 800d5f8:	06d1      	lsls	r1, r2, #27
 800d5fa:	bf44      	itt	mi
 800d5fc:	2320      	movmi	r3, #32
 800d5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d602:	0713      	lsls	r3, r2, #28
 800d604:	bf44      	itt	mi
 800d606:	232b      	movmi	r3, #43	; 0x2b
 800d608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d60c:	f89a 3000 	ldrb.w	r3, [sl]
 800d610:	2b2a      	cmp	r3, #42	; 0x2a
 800d612:	d015      	beq.n	800d640 <_vfiprintf_r+0x13c>
 800d614:	9a07      	ldr	r2, [sp, #28]
 800d616:	4654      	mov	r4, sl
 800d618:	2000      	movs	r0, #0
 800d61a:	f04f 0c0a 	mov.w	ip, #10
 800d61e:	4621      	mov	r1, r4
 800d620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d624:	3b30      	subs	r3, #48	; 0x30
 800d626:	2b09      	cmp	r3, #9
 800d628:	d94e      	bls.n	800d6c8 <_vfiprintf_r+0x1c4>
 800d62a:	b1b0      	cbz	r0, 800d65a <_vfiprintf_r+0x156>
 800d62c:	9207      	str	r2, [sp, #28]
 800d62e:	e014      	b.n	800d65a <_vfiprintf_r+0x156>
 800d630:	eba0 0308 	sub.w	r3, r0, r8
 800d634:	fa09 f303 	lsl.w	r3, r9, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	9304      	str	r3, [sp, #16]
 800d63c:	46a2      	mov	sl, r4
 800d63e:	e7d2      	b.n	800d5e6 <_vfiprintf_r+0xe2>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	1d19      	adds	r1, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	9103      	str	r1, [sp, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bfbb      	ittet	lt
 800d64c:	425b      	neglt	r3, r3
 800d64e:	f042 0202 	orrlt.w	r2, r2, #2
 800d652:	9307      	strge	r3, [sp, #28]
 800d654:	9307      	strlt	r3, [sp, #28]
 800d656:	bfb8      	it	lt
 800d658:	9204      	strlt	r2, [sp, #16]
 800d65a:	7823      	ldrb	r3, [r4, #0]
 800d65c:	2b2e      	cmp	r3, #46	; 0x2e
 800d65e:	d10c      	bne.n	800d67a <_vfiprintf_r+0x176>
 800d660:	7863      	ldrb	r3, [r4, #1]
 800d662:	2b2a      	cmp	r3, #42	; 0x2a
 800d664:	d135      	bne.n	800d6d2 <_vfiprintf_r+0x1ce>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1d1a      	adds	r2, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9203      	str	r2, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	bfb8      	it	lt
 800d672:	f04f 33ff 	movlt.w	r3, #4294967295
 800d676:	3402      	adds	r4, #2
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d760 <_vfiprintf_r+0x25c>
 800d67e:	7821      	ldrb	r1, [r4, #0]
 800d680:	2203      	movs	r2, #3
 800d682:	4650      	mov	r0, sl
 800d684:	f7f2 fdbc 	bl	8000200 <memchr>
 800d688:	b140      	cbz	r0, 800d69c <_vfiprintf_r+0x198>
 800d68a:	2340      	movs	r3, #64	; 0x40
 800d68c:	eba0 000a 	sub.w	r0, r0, sl
 800d690:	fa03 f000 	lsl.w	r0, r3, r0
 800d694:	9b04      	ldr	r3, [sp, #16]
 800d696:	4303      	orrs	r3, r0
 800d698:	3401      	adds	r4, #1
 800d69a:	9304      	str	r3, [sp, #16]
 800d69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a0:	482c      	ldr	r0, [pc, #176]	; (800d754 <_vfiprintf_r+0x250>)
 800d6a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6a6:	2206      	movs	r2, #6
 800d6a8:	f7f2 fdaa 	bl	8000200 <memchr>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d03f      	beq.n	800d730 <_vfiprintf_r+0x22c>
 800d6b0:	4b29      	ldr	r3, [pc, #164]	; (800d758 <_vfiprintf_r+0x254>)
 800d6b2:	bb1b      	cbnz	r3, 800d6fc <_vfiprintf_r+0x1f8>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	3307      	adds	r3, #7
 800d6b8:	f023 0307 	bic.w	r3, r3, #7
 800d6bc:	3308      	adds	r3, #8
 800d6be:	9303      	str	r3, [sp, #12]
 800d6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c2:	443b      	add	r3, r7
 800d6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c6:	e767      	b.n	800d598 <_vfiprintf_r+0x94>
 800d6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e7a5      	b.n	800d61e <_vfiprintf_r+0x11a>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	3401      	adds	r4, #1
 800d6d6:	9305      	str	r3, [sp, #20]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	f04f 0c0a 	mov.w	ip, #10
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e4:	3a30      	subs	r2, #48	; 0x30
 800d6e6:	2a09      	cmp	r2, #9
 800d6e8:	d903      	bls.n	800d6f2 <_vfiprintf_r+0x1ee>
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0c5      	beq.n	800d67a <_vfiprintf_r+0x176>
 800d6ee:	9105      	str	r1, [sp, #20]
 800d6f0:	e7c3      	b.n	800d67a <_vfiprintf_r+0x176>
 800d6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e7f0      	b.n	800d6de <_vfiprintf_r+0x1da>
 800d6fc:	ab03      	add	r3, sp, #12
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	462a      	mov	r2, r5
 800d702:	4b16      	ldr	r3, [pc, #88]	; (800d75c <_vfiprintf_r+0x258>)
 800d704:	a904      	add	r1, sp, #16
 800d706:	4630      	mov	r0, r6
 800d708:	f000 f8cc 	bl	800d8a4 <_printf_float>
 800d70c:	4607      	mov	r7, r0
 800d70e:	1c78      	adds	r0, r7, #1
 800d710:	d1d6      	bne.n	800d6c0 <_vfiprintf_r+0x1bc>
 800d712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d714:	07d9      	lsls	r1, r3, #31
 800d716:	d405      	bmi.n	800d724 <_vfiprintf_r+0x220>
 800d718:	89ab      	ldrh	r3, [r5, #12]
 800d71a:	059a      	lsls	r2, r3, #22
 800d71c:	d402      	bmi.n	800d724 <_vfiprintf_r+0x220>
 800d71e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d720:	f002 ff2c 	bl	801057c <__retarget_lock_release_recursive>
 800d724:	89ab      	ldrh	r3, [r5, #12]
 800d726:	065b      	lsls	r3, r3, #25
 800d728:	f53f af12 	bmi.w	800d550 <_vfiprintf_r+0x4c>
 800d72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d72e:	e711      	b.n	800d554 <_vfiprintf_r+0x50>
 800d730:	ab03      	add	r3, sp, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	462a      	mov	r2, r5
 800d736:	4b09      	ldr	r3, [pc, #36]	; (800d75c <_vfiprintf_r+0x258>)
 800d738:	a904      	add	r1, sp, #16
 800d73a:	4630      	mov	r0, r6
 800d73c:	f000 fb56 	bl	800ddec <_printf_i>
 800d740:	e7e4      	b.n	800d70c <_vfiprintf_r+0x208>
 800d742:	bf00      	nop
 800d744:	0803abf8 	.word	0x0803abf8
 800d748:	0803ac18 	.word	0x0803ac18
 800d74c:	0803abd8 	.word	0x0803abd8
 800d750:	0803a700 	.word	0x0803a700
 800d754:	0803a70a 	.word	0x0803a70a
 800d758:	0800d8a5 	.word	0x0800d8a5
 800d75c:	0800d4df 	.word	0x0800d4df
 800d760:	0803a706 	.word	0x0803a706

0800d764 <__cvt>:
 800d764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d768:	ec55 4b10 	vmov	r4, r5, d0
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	460e      	mov	r6, r1
 800d770:	4619      	mov	r1, r3
 800d772:	462b      	mov	r3, r5
 800d774:	bfbb      	ittet	lt
 800d776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d77a:	461d      	movlt	r5, r3
 800d77c:	2300      	movge	r3, #0
 800d77e:	232d      	movlt	r3, #45	; 0x2d
 800d780:	700b      	strb	r3, [r1, #0]
 800d782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d784:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d788:	4691      	mov	r9, r2
 800d78a:	f023 0820 	bic.w	r8, r3, #32
 800d78e:	bfbc      	itt	lt
 800d790:	4622      	movlt	r2, r4
 800d792:	4614      	movlt	r4, r2
 800d794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d798:	d005      	beq.n	800d7a6 <__cvt+0x42>
 800d79a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d79e:	d100      	bne.n	800d7a2 <__cvt+0x3e>
 800d7a0:	3601      	adds	r6, #1
 800d7a2:	2102      	movs	r1, #2
 800d7a4:	e000      	b.n	800d7a8 <__cvt+0x44>
 800d7a6:	2103      	movs	r1, #3
 800d7a8:	ab03      	add	r3, sp, #12
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	ab02      	add	r3, sp, #8
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	ec45 4b10 	vmov	d0, r4, r5
 800d7b4:	4653      	mov	r3, sl
 800d7b6:	4632      	mov	r2, r6
 800d7b8:	f001 fee6 	bl	800f588 <_dtoa_r>
 800d7bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	d102      	bne.n	800d7ca <__cvt+0x66>
 800d7c4:	f019 0f01 	tst.w	r9, #1
 800d7c8:	d022      	beq.n	800d810 <__cvt+0xac>
 800d7ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7ce:	eb07 0906 	add.w	r9, r7, r6
 800d7d2:	d110      	bne.n	800d7f6 <__cvt+0x92>
 800d7d4:	783b      	ldrb	r3, [r7, #0]
 800d7d6:	2b30      	cmp	r3, #48	; 0x30
 800d7d8:	d10a      	bne.n	800d7f0 <__cvt+0x8c>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f3 f98b 	bl	8000afc <__aeabi_dcmpeq>
 800d7e6:	b918      	cbnz	r0, 800d7f0 <__cvt+0x8c>
 800d7e8:	f1c6 0601 	rsb	r6, r6, #1
 800d7ec:	f8ca 6000 	str.w	r6, [sl]
 800d7f0:	f8da 3000 	ldr.w	r3, [sl]
 800d7f4:	4499      	add	r9, r3
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f7f3 f97d 	bl	8000afc <__aeabi_dcmpeq>
 800d802:	b108      	cbz	r0, 800d808 <__cvt+0xa4>
 800d804:	f8cd 900c 	str.w	r9, [sp, #12]
 800d808:	2230      	movs	r2, #48	; 0x30
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	454b      	cmp	r3, r9
 800d80e:	d307      	bcc.n	800d820 <__cvt+0xbc>
 800d810:	9b03      	ldr	r3, [sp, #12]
 800d812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d814:	1bdb      	subs	r3, r3, r7
 800d816:	4638      	mov	r0, r7
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	b004      	add	sp, #16
 800d81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d820:	1c59      	adds	r1, r3, #1
 800d822:	9103      	str	r1, [sp, #12]
 800d824:	701a      	strb	r2, [r3, #0]
 800d826:	e7f0      	b.n	800d80a <__cvt+0xa6>

0800d828 <__exponent>:
 800d828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d82a:	4603      	mov	r3, r0
 800d82c:	2900      	cmp	r1, #0
 800d82e:	bfb8      	it	lt
 800d830:	4249      	neglt	r1, r1
 800d832:	f803 2b02 	strb.w	r2, [r3], #2
 800d836:	bfb4      	ite	lt
 800d838:	222d      	movlt	r2, #45	; 0x2d
 800d83a:	222b      	movge	r2, #43	; 0x2b
 800d83c:	2909      	cmp	r1, #9
 800d83e:	7042      	strb	r2, [r0, #1]
 800d840:	dd2a      	ble.n	800d898 <__exponent+0x70>
 800d842:	f10d 0407 	add.w	r4, sp, #7
 800d846:	46a4      	mov	ip, r4
 800d848:	270a      	movs	r7, #10
 800d84a:	46a6      	mov	lr, r4
 800d84c:	460a      	mov	r2, r1
 800d84e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d852:	fb07 1516 	mls	r5, r7, r6, r1
 800d856:	3530      	adds	r5, #48	; 0x30
 800d858:	2a63      	cmp	r2, #99	; 0x63
 800d85a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d85e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d862:	4631      	mov	r1, r6
 800d864:	dcf1      	bgt.n	800d84a <__exponent+0x22>
 800d866:	3130      	adds	r1, #48	; 0x30
 800d868:	f1ae 0502 	sub.w	r5, lr, #2
 800d86c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d870:	1c44      	adds	r4, r0, #1
 800d872:	4629      	mov	r1, r5
 800d874:	4561      	cmp	r1, ip
 800d876:	d30a      	bcc.n	800d88e <__exponent+0x66>
 800d878:	f10d 0209 	add.w	r2, sp, #9
 800d87c:	eba2 020e 	sub.w	r2, r2, lr
 800d880:	4565      	cmp	r5, ip
 800d882:	bf88      	it	hi
 800d884:	2200      	movhi	r2, #0
 800d886:	4413      	add	r3, r2
 800d888:	1a18      	subs	r0, r3, r0
 800d88a:	b003      	add	sp, #12
 800d88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d892:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d896:	e7ed      	b.n	800d874 <__exponent+0x4c>
 800d898:	2330      	movs	r3, #48	; 0x30
 800d89a:	3130      	adds	r1, #48	; 0x30
 800d89c:	7083      	strb	r3, [r0, #2]
 800d89e:	70c1      	strb	r1, [r0, #3]
 800d8a0:	1d03      	adds	r3, r0, #4
 800d8a2:	e7f1      	b.n	800d888 <__exponent+0x60>

0800d8a4 <_printf_float>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	ed2d 8b02 	vpush	{d8}
 800d8ac:	b08d      	sub	sp, #52	; 0x34
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d8b4:	4616      	mov	r6, r2
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	f002 fe57 	bl	801056c <_localeconv_r>
 800d8be:	f8d0 a000 	ldr.w	sl, [r0]
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	f7f2 fc94 	bl	80001f0 <strlen>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	9305      	str	r3, [sp, #20]
 800d8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8d8:	3307      	adds	r3, #7
 800d8da:	f023 0307 	bic.w	r3, r3, #7
 800d8de:	f103 0208 	add.w	r2, r3, #8
 800d8e2:	f8c8 2000 	str.w	r2, [r8]
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8f6:	9307      	str	r3, [sp, #28]
 800d8f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8fc:	ee08 0a10 	vmov	s16, r0
 800d900:	4b9f      	ldr	r3, [pc, #636]	; (800db80 <_printf_float+0x2dc>)
 800d902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d906:	f04f 32ff 	mov.w	r2, #4294967295
 800d90a:	f7f3 f929 	bl	8000b60 <__aeabi_dcmpun>
 800d90e:	bb88      	cbnz	r0, 800d974 <_printf_float+0xd0>
 800d910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d914:	4b9a      	ldr	r3, [pc, #616]	; (800db80 <_printf_float+0x2dc>)
 800d916:	f04f 32ff 	mov.w	r2, #4294967295
 800d91a:	f7f3 f903 	bl	8000b24 <__aeabi_dcmple>
 800d91e:	bb48      	cbnz	r0, 800d974 <_printf_float+0xd0>
 800d920:	2200      	movs	r2, #0
 800d922:	2300      	movs	r3, #0
 800d924:	4640      	mov	r0, r8
 800d926:	4649      	mov	r1, r9
 800d928:	f7f3 f8f2 	bl	8000b10 <__aeabi_dcmplt>
 800d92c:	b110      	cbz	r0, 800d934 <_printf_float+0x90>
 800d92e:	232d      	movs	r3, #45	; 0x2d
 800d930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d934:	4b93      	ldr	r3, [pc, #588]	; (800db84 <_printf_float+0x2e0>)
 800d936:	4894      	ldr	r0, [pc, #592]	; (800db88 <_printf_float+0x2e4>)
 800d938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d93c:	bf94      	ite	ls
 800d93e:	4698      	movls	r8, r3
 800d940:	4680      	movhi	r8, r0
 800d942:	2303      	movs	r3, #3
 800d944:	6123      	str	r3, [r4, #16]
 800d946:	9b05      	ldr	r3, [sp, #20]
 800d948:	f023 0204 	bic.w	r2, r3, #4
 800d94c:	6022      	str	r2, [r4, #0]
 800d94e:	f04f 0900 	mov.w	r9, #0
 800d952:	9700      	str	r7, [sp, #0]
 800d954:	4633      	mov	r3, r6
 800d956:	aa0b      	add	r2, sp, #44	; 0x2c
 800d958:	4621      	mov	r1, r4
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 f9d8 	bl	800dd10 <_printf_common>
 800d960:	3001      	adds	r0, #1
 800d962:	f040 8090 	bne.w	800da86 <_printf_float+0x1e2>
 800d966:	f04f 30ff 	mov.w	r0, #4294967295
 800d96a:	b00d      	add	sp, #52	; 0x34
 800d96c:	ecbd 8b02 	vpop	{d8}
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	4642      	mov	r2, r8
 800d976:	464b      	mov	r3, r9
 800d978:	4640      	mov	r0, r8
 800d97a:	4649      	mov	r1, r9
 800d97c:	f7f3 f8f0 	bl	8000b60 <__aeabi_dcmpun>
 800d980:	b140      	cbz	r0, 800d994 <_printf_float+0xf0>
 800d982:	464b      	mov	r3, r9
 800d984:	2b00      	cmp	r3, #0
 800d986:	bfbc      	itt	lt
 800d988:	232d      	movlt	r3, #45	; 0x2d
 800d98a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d98e:	487f      	ldr	r0, [pc, #508]	; (800db8c <_printf_float+0x2e8>)
 800d990:	4b7f      	ldr	r3, [pc, #508]	; (800db90 <_printf_float+0x2ec>)
 800d992:	e7d1      	b.n	800d938 <_printf_float+0x94>
 800d994:	6863      	ldr	r3, [r4, #4]
 800d996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d99a:	9206      	str	r2, [sp, #24]
 800d99c:	1c5a      	adds	r2, r3, #1
 800d99e:	d13f      	bne.n	800da20 <_printf_float+0x17c>
 800d9a0:	2306      	movs	r3, #6
 800d9a2:	6063      	str	r3, [r4, #4]
 800d9a4:	9b05      	ldr	r3, [sp, #20]
 800d9a6:	6861      	ldr	r1, [r4, #4]
 800d9a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	ab0a      	add	r3, sp, #40	; 0x28
 800d9b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d9b6:	ab09      	add	r3, sp, #36	; 0x24
 800d9b8:	ec49 8b10 	vmov	d0, r8, r9
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	6022      	str	r2, [r4, #0]
 800d9c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f7ff fecd 	bl	800d764 <__cvt>
 800d9ca:	9b06      	ldr	r3, [sp, #24]
 800d9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ce:	2b47      	cmp	r3, #71	; 0x47
 800d9d0:	4680      	mov	r8, r0
 800d9d2:	d108      	bne.n	800d9e6 <_printf_float+0x142>
 800d9d4:	1cc8      	adds	r0, r1, #3
 800d9d6:	db02      	blt.n	800d9de <_printf_float+0x13a>
 800d9d8:	6863      	ldr	r3, [r4, #4]
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	dd41      	ble.n	800da62 <_printf_float+0x1be>
 800d9de:	f1ab 0b02 	sub.w	fp, fp, #2
 800d9e2:	fa5f fb8b 	uxtb.w	fp, fp
 800d9e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9ea:	d820      	bhi.n	800da2e <_printf_float+0x18a>
 800d9ec:	3901      	subs	r1, #1
 800d9ee:	465a      	mov	r2, fp
 800d9f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d9f4:	9109      	str	r1, [sp, #36]	; 0x24
 800d9f6:	f7ff ff17 	bl	800d828 <__exponent>
 800d9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9fc:	1813      	adds	r3, r2, r0
 800d9fe:	2a01      	cmp	r2, #1
 800da00:	4681      	mov	r9, r0
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	dc02      	bgt.n	800da0c <_printf_float+0x168>
 800da06:	6822      	ldr	r2, [r4, #0]
 800da08:	07d2      	lsls	r2, r2, #31
 800da0a:	d501      	bpl.n	800da10 <_printf_float+0x16c>
 800da0c:	3301      	adds	r3, #1
 800da0e:	6123      	str	r3, [r4, #16]
 800da10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da14:	2b00      	cmp	r3, #0
 800da16:	d09c      	beq.n	800d952 <_printf_float+0xae>
 800da18:	232d      	movs	r3, #45	; 0x2d
 800da1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da1e:	e798      	b.n	800d952 <_printf_float+0xae>
 800da20:	9a06      	ldr	r2, [sp, #24]
 800da22:	2a47      	cmp	r2, #71	; 0x47
 800da24:	d1be      	bne.n	800d9a4 <_printf_float+0x100>
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1bc      	bne.n	800d9a4 <_printf_float+0x100>
 800da2a:	2301      	movs	r3, #1
 800da2c:	e7b9      	b.n	800d9a2 <_printf_float+0xfe>
 800da2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da32:	d118      	bne.n	800da66 <_printf_float+0x1c2>
 800da34:	2900      	cmp	r1, #0
 800da36:	6863      	ldr	r3, [r4, #4]
 800da38:	dd0b      	ble.n	800da52 <_printf_float+0x1ae>
 800da3a:	6121      	str	r1, [r4, #16]
 800da3c:	b913      	cbnz	r3, 800da44 <_printf_float+0x1a0>
 800da3e:	6822      	ldr	r2, [r4, #0]
 800da40:	07d0      	lsls	r0, r2, #31
 800da42:	d502      	bpl.n	800da4a <_printf_float+0x1a6>
 800da44:	3301      	adds	r3, #1
 800da46:	440b      	add	r3, r1
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800da4c:	f04f 0900 	mov.w	r9, #0
 800da50:	e7de      	b.n	800da10 <_printf_float+0x16c>
 800da52:	b913      	cbnz	r3, 800da5a <_printf_float+0x1b6>
 800da54:	6822      	ldr	r2, [r4, #0]
 800da56:	07d2      	lsls	r2, r2, #31
 800da58:	d501      	bpl.n	800da5e <_printf_float+0x1ba>
 800da5a:	3302      	adds	r3, #2
 800da5c:	e7f4      	b.n	800da48 <_printf_float+0x1a4>
 800da5e:	2301      	movs	r3, #1
 800da60:	e7f2      	b.n	800da48 <_printf_float+0x1a4>
 800da62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da68:	4299      	cmp	r1, r3
 800da6a:	db05      	blt.n	800da78 <_printf_float+0x1d4>
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	6121      	str	r1, [r4, #16]
 800da70:	07d8      	lsls	r0, r3, #31
 800da72:	d5ea      	bpl.n	800da4a <_printf_float+0x1a6>
 800da74:	1c4b      	adds	r3, r1, #1
 800da76:	e7e7      	b.n	800da48 <_printf_float+0x1a4>
 800da78:	2900      	cmp	r1, #0
 800da7a:	bfd4      	ite	le
 800da7c:	f1c1 0202 	rsble	r2, r1, #2
 800da80:	2201      	movgt	r2, #1
 800da82:	4413      	add	r3, r2
 800da84:	e7e0      	b.n	800da48 <_printf_float+0x1a4>
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	055a      	lsls	r2, r3, #21
 800da8a:	d407      	bmi.n	800da9c <_printf_float+0x1f8>
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	4642      	mov	r2, r8
 800da90:	4631      	mov	r1, r6
 800da92:	4628      	mov	r0, r5
 800da94:	47b8      	blx	r7
 800da96:	3001      	adds	r0, #1
 800da98:	d12c      	bne.n	800daf4 <_printf_float+0x250>
 800da9a:	e764      	b.n	800d966 <_printf_float+0xc2>
 800da9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800daa0:	f240 80e0 	bls.w	800dc64 <_printf_float+0x3c0>
 800daa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800daa8:	2200      	movs	r2, #0
 800daaa:	2300      	movs	r3, #0
 800daac:	f7f3 f826 	bl	8000afc <__aeabi_dcmpeq>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d034      	beq.n	800db1e <_printf_float+0x27a>
 800dab4:	4a37      	ldr	r2, [pc, #220]	; (800db94 <_printf_float+0x2f0>)
 800dab6:	2301      	movs	r3, #1
 800dab8:	4631      	mov	r1, r6
 800daba:	4628      	mov	r0, r5
 800dabc:	47b8      	blx	r7
 800dabe:	3001      	adds	r0, #1
 800dac0:	f43f af51 	beq.w	800d966 <_printf_float+0xc2>
 800dac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dac8:	429a      	cmp	r2, r3
 800daca:	db02      	blt.n	800dad2 <_printf_float+0x22e>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	07d8      	lsls	r0, r3, #31
 800dad0:	d510      	bpl.n	800daf4 <_printf_float+0x250>
 800dad2:	ee18 3a10 	vmov	r3, s16
 800dad6:	4652      	mov	r2, sl
 800dad8:	4631      	mov	r1, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	f43f af41 	beq.w	800d966 <_printf_float+0xc2>
 800dae4:	f04f 0800 	mov.w	r8, #0
 800dae8:	f104 091a 	add.w	r9, r4, #26
 800daec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daee:	3b01      	subs	r3, #1
 800daf0:	4543      	cmp	r3, r8
 800daf2:	dc09      	bgt.n	800db08 <_printf_float+0x264>
 800daf4:	6823      	ldr	r3, [r4, #0]
 800daf6:	079b      	lsls	r3, r3, #30
 800daf8:	f100 8105 	bmi.w	800dd06 <_printf_float+0x462>
 800dafc:	68e0      	ldr	r0, [r4, #12]
 800dafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db00:	4298      	cmp	r0, r3
 800db02:	bfb8      	it	lt
 800db04:	4618      	movlt	r0, r3
 800db06:	e730      	b.n	800d96a <_printf_float+0xc6>
 800db08:	2301      	movs	r3, #1
 800db0a:	464a      	mov	r2, r9
 800db0c:	4631      	mov	r1, r6
 800db0e:	4628      	mov	r0, r5
 800db10:	47b8      	blx	r7
 800db12:	3001      	adds	r0, #1
 800db14:	f43f af27 	beq.w	800d966 <_printf_float+0xc2>
 800db18:	f108 0801 	add.w	r8, r8, #1
 800db1c:	e7e6      	b.n	800daec <_printf_float+0x248>
 800db1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc39      	bgt.n	800db98 <_printf_float+0x2f4>
 800db24:	4a1b      	ldr	r2, [pc, #108]	; (800db94 <_printf_float+0x2f0>)
 800db26:	2301      	movs	r3, #1
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	47b8      	blx	r7
 800db2e:	3001      	adds	r0, #1
 800db30:	f43f af19 	beq.w	800d966 <_printf_float+0xc2>
 800db34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db38:	4313      	orrs	r3, r2
 800db3a:	d102      	bne.n	800db42 <_printf_float+0x29e>
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	07d9      	lsls	r1, r3, #31
 800db40:	d5d8      	bpl.n	800daf4 <_printf_float+0x250>
 800db42:	ee18 3a10 	vmov	r3, s16
 800db46:	4652      	mov	r2, sl
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	f43f af09 	beq.w	800d966 <_printf_float+0xc2>
 800db54:	f04f 0900 	mov.w	r9, #0
 800db58:	f104 0a1a 	add.w	sl, r4, #26
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5e:	425b      	negs	r3, r3
 800db60:	454b      	cmp	r3, r9
 800db62:	dc01      	bgt.n	800db68 <_printf_float+0x2c4>
 800db64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db66:	e792      	b.n	800da8e <_printf_float+0x1ea>
 800db68:	2301      	movs	r3, #1
 800db6a:	4652      	mov	r2, sl
 800db6c:	4631      	mov	r1, r6
 800db6e:	4628      	mov	r0, r5
 800db70:	47b8      	blx	r7
 800db72:	3001      	adds	r0, #1
 800db74:	f43f aef7 	beq.w	800d966 <_printf_float+0xc2>
 800db78:	f109 0901 	add.w	r9, r9, #1
 800db7c:	e7ee      	b.n	800db5c <_printf_float+0x2b8>
 800db7e:	bf00      	nop
 800db80:	7fefffff 	.word	0x7fefffff
 800db84:	0803a711 	.word	0x0803a711
 800db88:	0803a715 	.word	0x0803a715
 800db8c:	0803a71d 	.word	0x0803a71d
 800db90:	0803a719 	.word	0x0803a719
 800db94:	0803adf8 	.word	0x0803adf8
 800db98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db9c:	429a      	cmp	r2, r3
 800db9e:	bfa8      	it	ge
 800dba0:	461a      	movge	r2, r3
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	4691      	mov	r9, r2
 800dba6:	dc37      	bgt.n	800dc18 <_printf_float+0x374>
 800dba8:	f04f 0b00 	mov.w	fp, #0
 800dbac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbb0:	f104 021a 	add.w	r2, r4, #26
 800dbb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbb6:	9305      	str	r3, [sp, #20]
 800dbb8:	eba3 0309 	sub.w	r3, r3, r9
 800dbbc:	455b      	cmp	r3, fp
 800dbbe:	dc33      	bgt.n	800dc28 <_printf_float+0x384>
 800dbc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	db3b      	blt.n	800dc40 <_printf_float+0x39c>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	07da      	lsls	r2, r3, #31
 800dbcc:	d438      	bmi.n	800dc40 <_printf_float+0x39c>
 800dbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd0:	9a05      	ldr	r2, [sp, #20]
 800dbd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbd4:	1a9a      	subs	r2, r3, r2
 800dbd6:	eba3 0901 	sub.w	r9, r3, r1
 800dbda:	4591      	cmp	r9, r2
 800dbdc:	bfa8      	it	ge
 800dbde:	4691      	movge	r9, r2
 800dbe0:	f1b9 0f00 	cmp.w	r9, #0
 800dbe4:	dc35      	bgt.n	800dc52 <_printf_float+0x3ae>
 800dbe6:	f04f 0800 	mov.w	r8, #0
 800dbea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbee:	f104 0a1a 	add.w	sl, r4, #26
 800dbf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	eba3 0309 	sub.w	r3, r3, r9
 800dbfc:	4543      	cmp	r3, r8
 800dbfe:	f77f af79 	ble.w	800daf4 <_printf_float+0x250>
 800dc02:	2301      	movs	r3, #1
 800dc04:	4652      	mov	r2, sl
 800dc06:	4631      	mov	r1, r6
 800dc08:	4628      	mov	r0, r5
 800dc0a:	47b8      	blx	r7
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	f43f aeaa 	beq.w	800d966 <_printf_float+0xc2>
 800dc12:	f108 0801 	add.w	r8, r8, #1
 800dc16:	e7ec      	b.n	800dbf2 <_printf_float+0x34e>
 800dc18:	4613      	mov	r3, r2
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b8      	blx	r7
 800dc22:	3001      	adds	r0, #1
 800dc24:	d1c0      	bne.n	800dba8 <_printf_float+0x304>
 800dc26:	e69e      	b.n	800d966 <_printf_float+0xc2>
 800dc28:	2301      	movs	r3, #1
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	9205      	str	r2, [sp, #20]
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f43f ae97 	beq.w	800d966 <_printf_float+0xc2>
 800dc38:	9a05      	ldr	r2, [sp, #20]
 800dc3a:	f10b 0b01 	add.w	fp, fp, #1
 800dc3e:	e7b9      	b.n	800dbb4 <_printf_float+0x310>
 800dc40:	ee18 3a10 	vmov	r3, s16
 800dc44:	4652      	mov	r2, sl
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b8      	blx	r7
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d1be      	bne.n	800dbce <_printf_float+0x32a>
 800dc50:	e689      	b.n	800d966 <_printf_float+0xc2>
 800dc52:	9a05      	ldr	r2, [sp, #20]
 800dc54:	464b      	mov	r3, r9
 800dc56:	4442      	add	r2, r8
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d1c1      	bne.n	800dbe6 <_printf_float+0x342>
 800dc62:	e680      	b.n	800d966 <_printf_float+0xc2>
 800dc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc66:	2a01      	cmp	r2, #1
 800dc68:	dc01      	bgt.n	800dc6e <_printf_float+0x3ca>
 800dc6a:	07db      	lsls	r3, r3, #31
 800dc6c:	d538      	bpl.n	800dce0 <_printf_float+0x43c>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4642      	mov	r2, r8
 800dc72:	4631      	mov	r1, r6
 800dc74:	4628      	mov	r0, r5
 800dc76:	47b8      	blx	r7
 800dc78:	3001      	adds	r0, #1
 800dc7a:	f43f ae74 	beq.w	800d966 <_printf_float+0xc2>
 800dc7e:	ee18 3a10 	vmov	r3, s16
 800dc82:	4652      	mov	r2, sl
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f ae6b 	beq.w	800d966 <_printf_float+0xc2>
 800dc90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc94:	2200      	movs	r2, #0
 800dc96:	2300      	movs	r3, #0
 800dc98:	f7f2 ff30 	bl	8000afc <__aeabi_dcmpeq>
 800dc9c:	b9d8      	cbnz	r0, 800dcd6 <_printf_float+0x432>
 800dc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca0:	f108 0201 	add.w	r2, r8, #1
 800dca4:	3b01      	subs	r3, #1
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	d10e      	bne.n	800dcce <_printf_float+0x42a>
 800dcb0:	e659      	b.n	800d966 <_printf_float+0xc2>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	4652      	mov	r2, sl
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	47b8      	blx	r7
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	f43f ae52 	beq.w	800d966 <_printf_float+0xc2>
 800dcc2:	f108 0801 	add.w	r8, r8, #1
 800dcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	4543      	cmp	r3, r8
 800dccc:	dcf1      	bgt.n	800dcb2 <_printf_float+0x40e>
 800dcce:	464b      	mov	r3, r9
 800dcd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcd4:	e6dc      	b.n	800da90 <_printf_float+0x1ec>
 800dcd6:	f04f 0800 	mov.w	r8, #0
 800dcda:	f104 0a1a 	add.w	sl, r4, #26
 800dcde:	e7f2      	b.n	800dcc6 <_printf_float+0x422>
 800dce0:	2301      	movs	r3, #1
 800dce2:	4642      	mov	r2, r8
 800dce4:	e7df      	b.n	800dca6 <_printf_float+0x402>
 800dce6:	2301      	movs	r3, #1
 800dce8:	464a      	mov	r2, r9
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f43f ae38 	beq.w	800d966 <_printf_float+0xc2>
 800dcf6:	f108 0801 	add.w	r8, r8, #1
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcfe:	1a5b      	subs	r3, r3, r1
 800dd00:	4543      	cmp	r3, r8
 800dd02:	dcf0      	bgt.n	800dce6 <_printf_float+0x442>
 800dd04:	e6fa      	b.n	800dafc <_printf_float+0x258>
 800dd06:	f04f 0800 	mov.w	r8, #0
 800dd0a:	f104 0919 	add.w	r9, r4, #25
 800dd0e:	e7f4      	b.n	800dcfa <_printf_float+0x456>

0800dd10 <_printf_common>:
 800dd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd14:	4616      	mov	r6, r2
 800dd16:	4699      	mov	r9, r3
 800dd18:	688a      	ldr	r2, [r1, #8]
 800dd1a:	690b      	ldr	r3, [r1, #16]
 800dd1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	bfb8      	it	lt
 800dd24:	4613      	movlt	r3, r2
 800dd26:	6033      	str	r3, [r6, #0]
 800dd28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	460c      	mov	r4, r1
 800dd30:	b10a      	cbz	r2, 800dd36 <_printf_common+0x26>
 800dd32:	3301      	adds	r3, #1
 800dd34:	6033      	str	r3, [r6, #0]
 800dd36:	6823      	ldr	r3, [r4, #0]
 800dd38:	0699      	lsls	r1, r3, #26
 800dd3a:	bf42      	ittt	mi
 800dd3c:	6833      	ldrmi	r3, [r6, #0]
 800dd3e:	3302      	addmi	r3, #2
 800dd40:	6033      	strmi	r3, [r6, #0]
 800dd42:	6825      	ldr	r5, [r4, #0]
 800dd44:	f015 0506 	ands.w	r5, r5, #6
 800dd48:	d106      	bne.n	800dd58 <_printf_common+0x48>
 800dd4a:	f104 0a19 	add.w	sl, r4, #25
 800dd4e:	68e3      	ldr	r3, [r4, #12]
 800dd50:	6832      	ldr	r2, [r6, #0]
 800dd52:	1a9b      	subs	r3, r3, r2
 800dd54:	42ab      	cmp	r3, r5
 800dd56:	dc26      	bgt.n	800dda6 <_printf_common+0x96>
 800dd58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd5c:	1e13      	subs	r3, r2, #0
 800dd5e:	6822      	ldr	r2, [r4, #0]
 800dd60:	bf18      	it	ne
 800dd62:	2301      	movne	r3, #1
 800dd64:	0692      	lsls	r2, r2, #26
 800dd66:	d42b      	bmi.n	800ddc0 <_printf_common+0xb0>
 800dd68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	4638      	mov	r0, r7
 800dd70:	47c0      	blx	r8
 800dd72:	3001      	adds	r0, #1
 800dd74:	d01e      	beq.n	800ddb4 <_printf_common+0xa4>
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	68e5      	ldr	r5, [r4, #12]
 800dd7a:	6832      	ldr	r2, [r6, #0]
 800dd7c:	f003 0306 	and.w	r3, r3, #6
 800dd80:	2b04      	cmp	r3, #4
 800dd82:	bf08      	it	eq
 800dd84:	1aad      	subeq	r5, r5, r2
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	6922      	ldr	r2, [r4, #16]
 800dd8a:	bf0c      	ite	eq
 800dd8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd90:	2500      	movne	r5, #0
 800dd92:	4293      	cmp	r3, r2
 800dd94:	bfc4      	itt	gt
 800dd96:	1a9b      	subgt	r3, r3, r2
 800dd98:	18ed      	addgt	r5, r5, r3
 800dd9a:	2600      	movs	r6, #0
 800dd9c:	341a      	adds	r4, #26
 800dd9e:	42b5      	cmp	r5, r6
 800dda0:	d11a      	bne.n	800ddd8 <_printf_common+0xc8>
 800dda2:	2000      	movs	r0, #0
 800dda4:	e008      	b.n	800ddb8 <_printf_common+0xa8>
 800dda6:	2301      	movs	r3, #1
 800dda8:	4652      	mov	r2, sl
 800ddaa:	4649      	mov	r1, r9
 800ddac:	4638      	mov	r0, r7
 800ddae:	47c0      	blx	r8
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	d103      	bne.n	800ddbc <_printf_common+0xac>
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddbc:	3501      	adds	r5, #1
 800ddbe:	e7c6      	b.n	800dd4e <_printf_common+0x3e>
 800ddc0:	18e1      	adds	r1, r4, r3
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	2030      	movs	r0, #48	; 0x30
 800ddc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddca:	4422      	add	r2, r4
 800ddcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddd4:	3302      	adds	r3, #2
 800ddd6:	e7c7      	b.n	800dd68 <_printf_common+0x58>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	4622      	mov	r2, r4
 800dddc:	4649      	mov	r1, r9
 800ddde:	4638      	mov	r0, r7
 800dde0:	47c0      	blx	r8
 800dde2:	3001      	adds	r0, #1
 800dde4:	d0e6      	beq.n	800ddb4 <_printf_common+0xa4>
 800dde6:	3601      	adds	r6, #1
 800dde8:	e7d9      	b.n	800dd9e <_printf_common+0x8e>
	...

0800ddec <_printf_i>:
 800ddec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf0:	7e0f      	ldrb	r7, [r1, #24]
 800ddf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddf4:	2f78      	cmp	r7, #120	; 0x78
 800ddf6:	4691      	mov	r9, r2
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	469a      	mov	sl, r3
 800ddfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de02:	d807      	bhi.n	800de14 <_printf_i+0x28>
 800de04:	2f62      	cmp	r7, #98	; 0x62
 800de06:	d80a      	bhi.n	800de1e <_printf_i+0x32>
 800de08:	2f00      	cmp	r7, #0
 800de0a:	f000 80d8 	beq.w	800dfbe <_printf_i+0x1d2>
 800de0e:	2f58      	cmp	r7, #88	; 0x58
 800de10:	f000 80a3 	beq.w	800df5a <_printf_i+0x16e>
 800de14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de1c:	e03a      	b.n	800de94 <_printf_i+0xa8>
 800de1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de22:	2b15      	cmp	r3, #21
 800de24:	d8f6      	bhi.n	800de14 <_printf_i+0x28>
 800de26:	a101      	add	r1, pc, #4	; (adr r1, 800de2c <_printf_i+0x40>)
 800de28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de2c:	0800de85 	.word	0x0800de85
 800de30:	0800de99 	.word	0x0800de99
 800de34:	0800de15 	.word	0x0800de15
 800de38:	0800de15 	.word	0x0800de15
 800de3c:	0800de15 	.word	0x0800de15
 800de40:	0800de15 	.word	0x0800de15
 800de44:	0800de99 	.word	0x0800de99
 800de48:	0800de15 	.word	0x0800de15
 800de4c:	0800de15 	.word	0x0800de15
 800de50:	0800de15 	.word	0x0800de15
 800de54:	0800de15 	.word	0x0800de15
 800de58:	0800dfa5 	.word	0x0800dfa5
 800de5c:	0800dec9 	.word	0x0800dec9
 800de60:	0800df87 	.word	0x0800df87
 800de64:	0800de15 	.word	0x0800de15
 800de68:	0800de15 	.word	0x0800de15
 800de6c:	0800dfc7 	.word	0x0800dfc7
 800de70:	0800de15 	.word	0x0800de15
 800de74:	0800dec9 	.word	0x0800dec9
 800de78:	0800de15 	.word	0x0800de15
 800de7c:	0800de15 	.word	0x0800de15
 800de80:	0800df8f 	.word	0x0800df8f
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	1d1a      	adds	r2, r3, #4
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	602a      	str	r2, [r5, #0]
 800de8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de94:	2301      	movs	r3, #1
 800de96:	e0a3      	b.n	800dfe0 <_printf_i+0x1f4>
 800de98:	6820      	ldr	r0, [r4, #0]
 800de9a:	6829      	ldr	r1, [r5, #0]
 800de9c:	0606      	lsls	r6, r0, #24
 800de9e:	f101 0304 	add.w	r3, r1, #4
 800dea2:	d50a      	bpl.n	800deba <_printf_i+0xce>
 800dea4:	680e      	ldr	r6, [r1, #0]
 800dea6:	602b      	str	r3, [r5, #0]
 800dea8:	2e00      	cmp	r6, #0
 800deaa:	da03      	bge.n	800deb4 <_printf_i+0xc8>
 800deac:	232d      	movs	r3, #45	; 0x2d
 800deae:	4276      	negs	r6, r6
 800deb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deb4:	485e      	ldr	r0, [pc, #376]	; (800e030 <_printf_i+0x244>)
 800deb6:	230a      	movs	r3, #10
 800deb8:	e019      	b.n	800deee <_printf_i+0x102>
 800deba:	680e      	ldr	r6, [r1, #0]
 800debc:	602b      	str	r3, [r5, #0]
 800debe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dec2:	bf18      	it	ne
 800dec4:	b236      	sxthne	r6, r6
 800dec6:	e7ef      	b.n	800dea8 <_printf_i+0xbc>
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	6820      	ldr	r0, [r4, #0]
 800decc:	1d19      	adds	r1, r3, #4
 800dece:	6029      	str	r1, [r5, #0]
 800ded0:	0601      	lsls	r1, r0, #24
 800ded2:	d501      	bpl.n	800ded8 <_printf_i+0xec>
 800ded4:	681e      	ldr	r6, [r3, #0]
 800ded6:	e002      	b.n	800dede <_printf_i+0xf2>
 800ded8:	0646      	lsls	r6, r0, #25
 800deda:	d5fb      	bpl.n	800ded4 <_printf_i+0xe8>
 800dedc:	881e      	ldrh	r6, [r3, #0]
 800dede:	4854      	ldr	r0, [pc, #336]	; (800e030 <_printf_i+0x244>)
 800dee0:	2f6f      	cmp	r7, #111	; 0x6f
 800dee2:	bf0c      	ite	eq
 800dee4:	2308      	moveq	r3, #8
 800dee6:	230a      	movne	r3, #10
 800dee8:	2100      	movs	r1, #0
 800deea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deee:	6865      	ldr	r5, [r4, #4]
 800def0:	60a5      	str	r5, [r4, #8]
 800def2:	2d00      	cmp	r5, #0
 800def4:	bfa2      	ittt	ge
 800def6:	6821      	ldrge	r1, [r4, #0]
 800def8:	f021 0104 	bicge.w	r1, r1, #4
 800defc:	6021      	strge	r1, [r4, #0]
 800defe:	b90e      	cbnz	r6, 800df04 <_printf_i+0x118>
 800df00:	2d00      	cmp	r5, #0
 800df02:	d04d      	beq.n	800dfa0 <_printf_i+0x1b4>
 800df04:	4615      	mov	r5, r2
 800df06:	fbb6 f1f3 	udiv	r1, r6, r3
 800df0a:	fb03 6711 	mls	r7, r3, r1, r6
 800df0e:	5dc7      	ldrb	r7, [r0, r7]
 800df10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df14:	4637      	mov	r7, r6
 800df16:	42bb      	cmp	r3, r7
 800df18:	460e      	mov	r6, r1
 800df1a:	d9f4      	bls.n	800df06 <_printf_i+0x11a>
 800df1c:	2b08      	cmp	r3, #8
 800df1e:	d10b      	bne.n	800df38 <_printf_i+0x14c>
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	07de      	lsls	r6, r3, #31
 800df24:	d508      	bpl.n	800df38 <_printf_i+0x14c>
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	6861      	ldr	r1, [r4, #4]
 800df2a:	4299      	cmp	r1, r3
 800df2c:	bfde      	ittt	le
 800df2e:	2330      	movle	r3, #48	; 0x30
 800df30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df38:	1b52      	subs	r2, r2, r5
 800df3a:	6122      	str	r2, [r4, #16]
 800df3c:	f8cd a000 	str.w	sl, [sp]
 800df40:	464b      	mov	r3, r9
 800df42:	aa03      	add	r2, sp, #12
 800df44:	4621      	mov	r1, r4
 800df46:	4640      	mov	r0, r8
 800df48:	f7ff fee2 	bl	800dd10 <_printf_common>
 800df4c:	3001      	adds	r0, #1
 800df4e:	d14c      	bne.n	800dfea <_printf_i+0x1fe>
 800df50:	f04f 30ff 	mov.w	r0, #4294967295
 800df54:	b004      	add	sp, #16
 800df56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5a:	4835      	ldr	r0, [pc, #212]	; (800e030 <_printf_i+0x244>)
 800df5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df60:	6829      	ldr	r1, [r5, #0]
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	f851 6b04 	ldr.w	r6, [r1], #4
 800df68:	6029      	str	r1, [r5, #0]
 800df6a:	061d      	lsls	r5, r3, #24
 800df6c:	d514      	bpl.n	800df98 <_printf_i+0x1ac>
 800df6e:	07df      	lsls	r7, r3, #31
 800df70:	bf44      	itt	mi
 800df72:	f043 0320 	orrmi.w	r3, r3, #32
 800df76:	6023      	strmi	r3, [r4, #0]
 800df78:	b91e      	cbnz	r6, 800df82 <_printf_i+0x196>
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	f023 0320 	bic.w	r3, r3, #32
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	2310      	movs	r3, #16
 800df84:	e7b0      	b.n	800dee8 <_printf_i+0xfc>
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	f043 0320 	orr.w	r3, r3, #32
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	2378      	movs	r3, #120	; 0x78
 800df90:	4828      	ldr	r0, [pc, #160]	; (800e034 <_printf_i+0x248>)
 800df92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df96:	e7e3      	b.n	800df60 <_printf_i+0x174>
 800df98:	0659      	lsls	r1, r3, #25
 800df9a:	bf48      	it	mi
 800df9c:	b2b6      	uxthmi	r6, r6
 800df9e:	e7e6      	b.n	800df6e <_printf_i+0x182>
 800dfa0:	4615      	mov	r5, r2
 800dfa2:	e7bb      	b.n	800df1c <_printf_i+0x130>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	6826      	ldr	r6, [r4, #0]
 800dfa8:	6961      	ldr	r1, [r4, #20]
 800dfaa:	1d18      	adds	r0, r3, #4
 800dfac:	6028      	str	r0, [r5, #0]
 800dfae:	0635      	lsls	r5, r6, #24
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	d501      	bpl.n	800dfb8 <_printf_i+0x1cc>
 800dfb4:	6019      	str	r1, [r3, #0]
 800dfb6:	e002      	b.n	800dfbe <_printf_i+0x1d2>
 800dfb8:	0670      	lsls	r0, r6, #25
 800dfba:	d5fb      	bpl.n	800dfb4 <_printf_i+0x1c8>
 800dfbc:	8019      	strh	r1, [r3, #0]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	6123      	str	r3, [r4, #16]
 800dfc2:	4615      	mov	r5, r2
 800dfc4:	e7ba      	b.n	800df3c <_printf_i+0x150>
 800dfc6:	682b      	ldr	r3, [r5, #0]
 800dfc8:	1d1a      	adds	r2, r3, #4
 800dfca:	602a      	str	r2, [r5, #0]
 800dfcc:	681d      	ldr	r5, [r3, #0]
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f7f2 f914 	bl	8000200 <memchr>
 800dfd8:	b108      	cbz	r0, 800dfde <_printf_i+0x1f2>
 800dfda:	1b40      	subs	r0, r0, r5
 800dfdc:	6060      	str	r0, [r4, #4]
 800dfde:	6863      	ldr	r3, [r4, #4]
 800dfe0:	6123      	str	r3, [r4, #16]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfe8:	e7a8      	b.n	800df3c <_printf_i+0x150>
 800dfea:	6923      	ldr	r3, [r4, #16]
 800dfec:	462a      	mov	r2, r5
 800dfee:	4649      	mov	r1, r9
 800dff0:	4640      	mov	r0, r8
 800dff2:	47d0      	blx	sl
 800dff4:	3001      	adds	r0, #1
 800dff6:	d0ab      	beq.n	800df50 <_printf_i+0x164>
 800dff8:	6823      	ldr	r3, [r4, #0]
 800dffa:	079b      	lsls	r3, r3, #30
 800dffc:	d413      	bmi.n	800e026 <_printf_i+0x23a>
 800dffe:	68e0      	ldr	r0, [r4, #12]
 800e000:	9b03      	ldr	r3, [sp, #12]
 800e002:	4298      	cmp	r0, r3
 800e004:	bfb8      	it	lt
 800e006:	4618      	movlt	r0, r3
 800e008:	e7a4      	b.n	800df54 <_printf_i+0x168>
 800e00a:	2301      	movs	r3, #1
 800e00c:	4632      	mov	r2, r6
 800e00e:	4649      	mov	r1, r9
 800e010:	4640      	mov	r0, r8
 800e012:	47d0      	blx	sl
 800e014:	3001      	adds	r0, #1
 800e016:	d09b      	beq.n	800df50 <_printf_i+0x164>
 800e018:	3501      	adds	r5, #1
 800e01a:	68e3      	ldr	r3, [r4, #12]
 800e01c:	9903      	ldr	r1, [sp, #12]
 800e01e:	1a5b      	subs	r3, r3, r1
 800e020:	42ab      	cmp	r3, r5
 800e022:	dcf2      	bgt.n	800e00a <_printf_i+0x21e>
 800e024:	e7eb      	b.n	800dffe <_printf_i+0x212>
 800e026:	2500      	movs	r5, #0
 800e028:	f104 0619 	add.w	r6, r4, #25
 800e02c:	e7f5      	b.n	800e01a <_printf_i+0x22e>
 800e02e:	bf00      	nop
 800e030:	0803a721 	.word	0x0803a721
 800e034:	0803a732 	.word	0x0803a732

0800e038 <_sbrk_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d06      	ldr	r5, [pc, #24]	; (800e054 <_sbrk_r+0x1c>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	602b      	str	r3, [r5, #0]
 800e044:	f006 f9e2 	bl	801440c <_sbrk>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	d102      	bne.n	800e052 <_sbrk_r+0x1a>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	b103      	cbz	r3, 800e052 <_sbrk_r+0x1a>
 800e050:	6023      	str	r3, [r4, #0]
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	20003a40 	.word	0x20003a40

0800e058 <siprintf>:
 800e058:	b40e      	push	{r1, r2, r3}
 800e05a:	b500      	push	{lr}
 800e05c:	b09c      	sub	sp, #112	; 0x70
 800e05e:	ab1d      	add	r3, sp, #116	; 0x74
 800e060:	9002      	str	r0, [sp, #8]
 800e062:	9006      	str	r0, [sp, #24]
 800e064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e068:	4809      	ldr	r0, [pc, #36]	; (800e090 <siprintf+0x38>)
 800e06a:	9107      	str	r1, [sp, #28]
 800e06c:	9104      	str	r1, [sp, #16]
 800e06e:	4909      	ldr	r1, [pc, #36]	; (800e094 <siprintf+0x3c>)
 800e070:	f853 2b04 	ldr.w	r2, [r3], #4
 800e074:	9105      	str	r1, [sp, #20]
 800e076:	6800      	ldr	r0, [r0, #0]
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	a902      	add	r1, sp, #8
 800e07c:	f002 ff42 	bl	8010f04 <_svfiprintf_r>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	2200      	movs	r2, #0
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	b01c      	add	sp, #112	; 0x70
 800e088:	f85d eb04 	ldr.w	lr, [sp], #4
 800e08c:	b003      	add	sp, #12
 800e08e:	4770      	bx	lr
 800e090:	200002c0 	.word	0x200002c0
 800e094:	ffff0208 	.word	0xffff0208

0800e098 <siscanf>:
 800e098:	b40e      	push	{r1, r2, r3}
 800e09a:	b510      	push	{r4, lr}
 800e09c:	b09f      	sub	sp, #124	; 0x7c
 800e09e:	ac21      	add	r4, sp, #132	; 0x84
 800e0a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e0a4:	f854 2b04 	ldr.w	r2, [r4], #4
 800e0a8:	9201      	str	r2, [sp, #4]
 800e0aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e0ae:	9004      	str	r0, [sp, #16]
 800e0b0:	9008      	str	r0, [sp, #32]
 800e0b2:	f7f2 f89d 	bl	80001f0 <strlen>
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <siscanf+0x50>)
 800e0b8:	9005      	str	r0, [sp, #20]
 800e0ba:	9009      	str	r0, [sp, #36]	; 0x24
 800e0bc:	930d      	str	r3, [sp, #52]	; 0x34
 800e0be:	480b      	ldr	r0, [pc, #44]	; (800e0ec <siscanf+0x54>)
 800e0c0:	9a01      	ldr	r2, [sp, #4]
 800e0c2:	6800      	ldr	r0, [r0, #0]
 800e0c4:	9403      	str	r4, [sp, #12]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9311      	str	r3, [sp, #68]	; 0x44
 800e0ca:	9316      	str	r3, [sp, #88]	; 0x58
 800e0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e0d4:	a904      	add	r1, sp, #16
 800e0d6:	4623      	mov	r3, r4
 800e0d8:	f003 f86e 	bl	80111b8 <__ssvfiscanf_r>
 800e0dc:	b01f      	add	sp, #124	; 0x7c
 800e0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0e2:	b003      	add	sp, #12
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop
 800e0e8:	0800e113 	.word	0x0800e113
 800e0ec:	200002c0 	.word	0x200002c0

0800e0f0 <__sread>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f8:	f003 fb28 	bl	801174c <_read_r>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	bfab      	itete	ge
 800e100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e102:	89a3      	ldrhlt	r3, [r4, #12]
 800e104:	181b      	addge	r3, r3, r0
 800e106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e10a:	bfac      	ite	ge
 800e10c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e10e:	81a3      	strhlt	r3, [r4, #12]
 800e110:	bd10      	pop	{r4, pc}

0800e112 <__seofread>:
 800e112:	2000      	movs	r0, #0
 800e114:	4770      	bx	lr

0800e116 <__swrite>:
 800e116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11a:	461f      	mov	r7, r3
 800e11c:	898b      	ldrh	r3, [r1, #12]
 800e11e:	05db      	lsls	r3, r3, #23
 800e120:	4605      	mov	r5, r0
 800e122:	460c      	mov	r4, r1
 800e124:	4616      	mov	r6, r2
 800e126:	d505      	bpl.n	800e134 <__swrite+0x1e>
 800e128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12c:	2302      	movs	r3, #2
 800e12e:	2200      	movs	r2, #0
 800e130:	f002 fa26 	bl	8010580 <_lseek_r>
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e13e:	81a3      	strh	r3, [r4, #12]
 800e140:	4632      	mov	r2, r6
 800e142:	463b      	mov	r3, r7
 800e144:	4628      	mov	r0, r5
 800e146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e14a:	f001 b8e1 	b.w	800f310 <_write_r>

0800e14e <__sseek>:
 800e14e:	b510      	push	{r4, lr}
 800e150:	460c      	mov	r4, r1
 800e152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e156:	f002 fa13 	bl	8010580 <_lseek_r>
 800e15a:	1c43      	adds	r3, r0, #1
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	bf15      	itete	ne
 800e160:	6560      	strne	r0, [r4, #84]	; 0x54
 800e162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e16a:	81a3      	strheq	r3, [r4, #12]
 800e16c:	bf18      	it	ne
 800e16e:	81a3      	strhne	r3, [r4, #12]
 800e170:	bd10      	pop	{r4, pc}

0800e172 <__sclose>:
 800e172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e176:	f001 b957 	b.w	800f428 <_close_r>

0800e17a <strchr>:
 800e17a:	b2c9      	uxtb	r1, r1
 800e17c:	4603      	mov	r3, r0
 800e17e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e182:	b11a      	cbz	r2, 800e18c <strchr+0x12>
 800e184:	428a      	cmp	r2, r1
 800e186:	d1f9      	bne.n	800e17c <strchr+0x2>
 800e188:	4618      	mov	r0, r3
 800e18a:	4770      	bx	lr
 800e18c:	2900      	cmp	r1, #0
 800e18e:	bf18      	it	ne
 800e190:	2300      	movne	r3, #0
 800e192:	e7f9      	b.n	800e188 <strchr+0xe>

0800e194 <strcpy>:
 800e194:	4603      	mov	r3, r0
 800e196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e19a:	f803 2b01 	strb.w	r2, [r3], #1
 800e19e:	2a00      	cmp	r2, #0
 800e1a0:	d1f9      	bne.n	800e196 <strcpy+0x2>
 800e1a2:	4770      	bx	lr

0800e1a4 <iso_year_adjust>:
 800e1a4:	6942      	ldr	r2, [r0, #20]
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	f240 736c 	movw	r3, #1900	; 0x76c
 800e1ac:	bfa8      	it	ge
 800e1ae:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800e1b2:	4413      	add	r3, r2
 800e1b4:	0792      	lsls	r2, r2, #30
 800e1b6:	d105      	bne.n	800e1c4 <iso_year_adjust+0x20>
 800e1b8:	2164      	movs	r1, #100	; 0x64
 800e1ba:	fb93 f2f1 	sdiv	r2, r3, r1
 800e1be:	fb01 3212 	mls	r2, r1, r2, r3
 800e1c2:	b9da      	cbnz	r2, 800e1fc <iso_year_adjust+0x58>
 800e1c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e1c8:	fb93 f1f2 	sdiv	r1, r3, r2
 800e1cc:	fb02 3311 	mls	r3, r2, r1, r3
 800e1d0:	fab3 f383 	clz	r3, r3
 800e1d4:	095b      	lsrs	r3, r3, #5
 800e1d6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800e1da:	0040      	lsls	r0, r0, #1
 800e1dc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800e1e0:	4418      	add	r0, r3
 800e1e2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800e1e6:	4298      	cmp	r0, r3
 800e1e8:	d03a      	beq.n	800e260 <iso_year_adjust+0xbc>
 800e1ea:	dc21      	bgt.n	800e230 <iso_year_adjust+0x8c>
 800e1ec:	2801      	cmp	r0, #1
 800e1ee:	dc1a      	bgt.n	800e226 <iso_year_adjust+0x82>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	bfb4      	ite	lt
 800e1f4:	2000      	movlt	r0, #0
 800e1f6:	f04f 30ff 	movge.w	r0, #4294967295
 800e1fa:	4770      	bx	lr
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e7ea      	b.n	800e1d6 <iso_year_adjust+0x32>
 800e200:	2817      	cmp	r0, #23
 800e202:	d813      	bhi.n	800e22c <iso_year_adjust+0x88>
 800e204:	e8df f000 	tbb	[pc, r0]
 800e208:	0c0c0c0c 	.word	0x0c0c0c0c
 800e20c:	0c0c1212 	.word	0x0c0c1212
 800e210:	12121212 	.word	0x12121212
 800e214:	12121212 	.word	0x12121212
 800e218:	0c0c1212 	.word	0x0c0c1212
 800e21c:	0c0c1212 	.word	0x0c0c1212
 800e220:	f04f 30ff 	mov.w	r0, #4294967295
 800e224:	4770      	bx	lr
 800e226:	380a      	subs	r0, #10
 800e228:	2817      	cmp	r0, #23
 800e22a:	d9e9      	bls.n	800e200 <iso_year_adjust+0x5c>
 800e22c:	2000      	movs	r0, #0
 800e22e:	4770      	bx	lr
 800e230:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800e234:	4298      	cmp	r0, r3
 800e236:	dc06      	bgt.n	800e246 <iso_year_adjust+0xa2>
 800e238:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800e23c:	4298      	cmp	r0, r3
 800e23e:	bfd4      	ite	le
 800e240:	2000      	movle	r0, #0
 800e242:	2001      	movgt	r0, #1
 800e244:	4770      	bx	lr
 800e246:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800e24a:	3802      	subs	r0, #2
 800e24c:	2815      	cmp	r0, #21
 800e24e:	d8ed      	bhi.n	800e22c <iso_year_adjust+0x88>
 800e250:	2301      	movs	r3, #1
 800e252:	4083      	lsls	r3, r0
 800e254:	4803      	ldr	r0, [pc, #12]	; (800e264 <iso_year_adjust+0xc0>)
 800e256:	4018      	ands	r0, r3
 800e258:	3800      	subs	r0, #0
 800e25a:	bf18      	it	ne
 800e25c:	2001      	movne	r0, #1
 800e25e:	4770      	bx	lr
 800e260:	2001      	movs	r0, #1
 800e262:	4770      	bx	lr
 800e264:	002a001f 	.word	0x002a001f

0800e268 <__strftime.isra.0>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	b08f      	sub	sp, #60	; 0x3c
 800e26e:	461e      	mov	r6, r3
 800e270:	2300      	movs	r3, #0
 800e272:	4607      	mov	r7, r0
 800e274:	460d      	mov	r5, r1
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	461c      	mov	r4, r3
 800e27a:	7813      	ldrb	r3, [r2, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 84ba 	beq.w	800ebf6 <__strftime.isra.0+0x98e>
 800e282:	2b25      	cmp	r3, #37	; 0x25
 800e284:	d11f      	bne.n	800e2c6 <__strftime.isra.0+0x5e>
 800e286:	f892 b001 	ldrb.w	fp, [r2, #1]
 800e28a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800e28e:	d024      	beq.n	800e2da <__strftime.isra.0+0x72>
 800e290:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800e294:	d021      	beq.n	800e2da <__strftime.isra.0+0x72>
 800e296:	f102 0801 	add.w	r8, r2, #1
 800e29a:	f04f 0b00 	mov.w	fp, #0
 800e29e:	f898 2000 	ldrb.w	r2, [r8]
 800e2a2:	3a31      	subs	r2, #49	; 0x31
 800e2a4:	2a08      	cmp	r2, #8
 800e2a6:	d81b      	bhi.n	800e2e0 <__strftime.isra.0+0x78>
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	220a      	movs	r2, #10
 800e2ac:	a906      	add	r1, sp, #24
 800e2ae:	f000 fd97 	bl	800ede0 <strtoul>
 800e2b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e2b6:	4681      	mov	r9, r0
 800e2b8:	f898 2000 	ldrb.w	r2, [r8]
 800e2bc:	2a45      	cmp	r2, #69	; 0x45
 800e2be:	d112      	bne.n	800e2e6 <__strftime.isra.0+0x7e>
 800e2c0:	f108 0801 	add.w	r8, r8, #1
 800e2c4:	e011      	b.n	800e2ea <__strftime.isra.0+0x82>
 800e2c6:	1e69      	subs	r1, r5, #1
 800e2c8:	42a1      	cmp	r1, r4
 800e2ca:	d802      	bhi.n	800e2d2 <__strftime.isra.0+0x6a>
 800e2cc:	2400      	movs	r4, #0
 800e2ce:	f000 bc95 	b.w	800ebfc <__strftime.isra.0+0x994>
 800e2d2:	553b      	strb	r3, [r7, r4]
 800e2d4:	3201      	adds	r2, #1
 800e2d6:	3401      	adds	r4, #1
 800e2d8:	e7cf      	b.n	800e27a <__strftime.isra.0+0x12>
 800e2da:	f102 0802 	add.w	r8, r2, #2
 800e2de:	e7de      	b.n	800e29e <__strftime.isra.0+0x36>
 800e2e0:	f04f 0900 	mov.w	r9, #0
 800e2e4:	e7e8      	b.n	800e2b8 <__strftime.isra.0+0x50>
 800e2e6:	2a4f      	cmp	r2, #79	; 0x4f
 800e2e8:	d0ea      	beq.n	800e2c0 <__strftime.isra.0+0x58>
 800e2ea:	f898 0000 	ldrb.w	r0, [r8]
 800e2ee:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800e2f2:	2a55      	cmp	r2, #85	; 0x55
 800e2f4:	d8ea      	bhi.n	800e2cc <__strftime.isra.0+0x64>
 800e2f6:	a301      	add	r3, pc, #4	; (adr r3, 800e2fc <__strftime.isra.0+0x94>)
 800e2f8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800e2fc:	0800ebeb 	.word	0x0800ebeb
 800e300:	0800e2cd 	.word	0x0800e2cd
 800e304:	0800e2cd 	.word	0x0800e2cd
 800e308:	0800e2cd 	.word	0x0800e2cd
 800e30c:	0800e2cd 	.word	0x0800e2cd
 800e310:	0800e2cd 	.word	0x0800e2cd
 800e314:	0800e2cd 	.word	0x0800e2cd
 800e318:	0800e2cd 	.word	0x0800e2cd
 800e31c:	0800e2cd 	.word	0x0800e2cd
 800e320:	0800e2cd 	.word	0x0800e2cd
 800e324:	0800e2cd 	.word	0x0800e2cd
 800e328:	0800e2cd 	.word	0x0800e2cd
 800e32c:	0800e2cd 	.word	0x0800e2cd
 800e330:	0800e2cd 	.word	0x0800e2cd
 800e334:	0800e2cd 	.word	0x0800e2cd
 800e338:	0800e2cd 	.word	0x0800e2cd
 800e33c:	0800e2cd 	.word	0x0800e2cd
 800e340:	0800e2cd 	.word	0x0800e2cd
 800e344:	0800e2cd 	.word	0x0800e2cd
 800e348:	0800e2cd 	.word	0x0800e2cd
 800e34c:	0800e2cd 	.word	0x0800e2cd
 800e350:	0800e2cd 	.word	0x0800e2cd
 800e354:	0800e2cd 	.word	0x0800e2cd
 800e358:	0800e2cd 	.word	0x0800e2cd
 800e35c:	0800e2cd 	.word	0x0800e2cd
 800e360:	0800e2cd 	.word	0x0800e2cd
 800e364:	0800e2cd 	.word	0x0800e2cd
 800e368:	0800e2cd 	.word	0x0800e2cd
 800e36c:	0800e491 	.word	0x0800e491
 800e370:	0800e4e9 	.word	0x0800e4e9
 800e374:	0800e557 	.word	0x0800e557
 800e378:	0800e5f5 	.word	0x0800e5f5
 800e37c:	0800e2cd 	.word	0x0800e2cd
 800e380:	0800e641 	.word	0x0800e641
 800e384:	0800e72d 	.word	0x0800e72d
 800e388:	0800e807 	.word	0x0800e807
 800e38c:	0800e815 	.word	0x0800e815
 800e390:	0800e2cd 	.word	0x0800e2cd
 800e394:	0800e2cd 	.word	0x0800e2cd
 800e398:	0800e2cd 	.word	0x0800e2cd
 800e39c:	0800e845 	.word	0x0800e845
 800e3a0:	0800e2cd 	.word	0x0800e2cd
 800e3a4:	0800e2cd 	.word	0x0800e2cd
 800e3a8:	0800e859 	.word	0x0800e859
 800e3ac:	0800e2cd 	.word	0x0800e2cd
 800e3b0:	0800e8ab 	.word	0x0800e8ab
 800e3b4:	0800e9bf 	.word	0x0800e9bf
 800e3b8:	0800e9cf 	.word	0x0800e9cf
 800e3bc:	0800e9f7 	.word	0x0800e9f7
 800e3c0:	0800ea31 	.word	0x0800ea31
 800e3c4:	0800eaa5 	.word	0x0800eaa5
 800e3c8:	0800e54f 	.word	0x0800e54f
 800e3cc:	0800ead1 	.word	0x0800ead1
 800e3d0:	0800eb99 	.word	0x0800eb99
 800e3d4:	0800e2cd 	.word	0x0800e2cd
 800e3d8:	0800e2cd 	.word	0x0800e2cd
 800e3dc:	0800e2cd 	.word	0x0800e2cd
 800e3e0:	0800e2cd 	.word	0x0800e2cd
 800e3e4:	0800e2cd 	.word	0x0800e2cd
 800e3e8:	0800e2cd 	.word	0x0800e2cd
 800e3ec:	0800e455 	.word	0x0800e455
 800e3f0:	0800e4bf 	.word	0x0800e4bf
 800e3f4:	0800e515 	.word	0x0800e515
 800e3f8:	0800e5d1 	.word	0x0800e5d1
 800e3fc:	0800e5d1 	.word	0x0800e5d1
 800e400:	0800e2cd 	.word	0x0800e2cd
 800e404:	0800e693 	.word	0x0800e693
 800e408:	0800e4bf 	.word	0x0800e4bf
 800e40c:	0800e2cd 	.word	0x0800e2cd
 800e410:	0800e837 	.word	0x0800e837
 800e414:	0800e807 	.word	0x0800e807
 800e418:	0800e815 	.word	0x0800e815
 800e41c:	0800e83f 	.word	0x0800e83f
 800e420:	0800e849 	.word	0x0800e849
 800e424:	0800e2cd 	.word	0x0800e2cd
 800e428:	0800e859 	.word	0x0800e859
 800e42c:	0800e2cd 	.word	0x0800e2cd
 800e430:	0800e53f 	.word	0x0800e53f
 800e434:	0800e8bd 	.word	0x0800e8bd
 800e438:	0800e9c3 	.word	0x0800e9c3
 800e43c:	0800e9dd 	.word	0x0800e9dd
 800e440:	0800e2cd 	.word	0x0800e2cd
 800e444:	0800ea97 	.word	0x0800ea97
 800e448:	0800e547 	.word	0x0800e547
 800e44c:	0800eab5 	.word	0x0800eab5
 800e450:	0800eb23 	.word	0x0800eb23
 800e454:	69b3      	ldr	r3, [r6, #24]
 800e456:	4aa9      	ldr	r2, [pc, #676]	; (800e6fc <__strftime.isra.0+0x494>)
 800e458:	3318      	adds	r3, #24
 800e45a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e45e:	4648      	mov	r0, r9
 800e460:	f7f1 fec6 	bl	80001f0 <strlen>
 800e464:	f109 39ff 	add.w	r9, r9, #4294967295
 800e468:	4420      	add	r0, r4
 800e46a:	1e6b      	subs	r3, r5, #1
 800e46c:	42a0      	cmp	r0, r4
 800e46e:	d107      	bne.n	800e480 <__strftime.isra.0+0x218>
 800e470:	f898 3000 	ldrb.w	r3, [r8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 83be 	beq.w	800ebf6 <__strftime.isra.0+0x98e>
 800e47a:	f108 0201 	add.w	r2, r8, #1
 800e47e:	e6fc      	b.n	800e27a <__strftime.isra.0+0x12>
 800e480:	42a3      	cmp	r3, r4
 800e482:	f67f af23 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800e486:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e48a:	553a      	strb	r2, [r7, r4]
 800e48c:	3401      	adds	r4, #1
 800e48e:	e7ed      	b.n	800e46c <__strftime.isra.0+0x204>
 800e490:	69b2      	ldr	r2, [r6, #24]
 800e492:	4b9a      	ldr	r3, [pc, #616]	; (800e6fc <__strftime.isra.0+0x494>)
 800e494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e498:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800e49c:	4648      	mov	r0, r9
 800e49e:	f7f1 fea7 	bl	80001f0 <strlen>
 800e4a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800e4a6:	4420      	add	r0, r4
 800e4a8:	1e6b      	subs	r3, r5, #1
 800e4aa:	42a0      	cmp	r0, r4
 800e4ac:	d0e0      	beq.n	800e470 <__strftime.isra.0+0x208>
 800e4ae:	42a3      	cmp	r3, r4
 800e4b0:	f67f af0c 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800e4b4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e4b8:	553a      	strb	r2, [r7, r4]
 800e4ba:	3401      	adds	r4, #1
 800e4bc:	e7f5      	b.n	800e4aa <__strftime.isra.0+0x242>
 800e4be:	4b8f      	ldr	r3, [pc, #572]	; (800e6fc <__strftime.isra.0+0x494>)
 800e4c0:	6932      	ldr	r2, [r6, #16]
 800e4c2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800e4c6:	4648      	mov	r0, r9
 800e4c8:	f7f1 fe92 	bl	80001f0 <strlen>
 800e4cc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e4d0:	4420      	add	r0, r4
 800e4d2:	1e6b      	subs	r3, r5, #1
 800e4d4:	42a0      	cmp	r0, r4
 800e4d6:	d0cb      	beq.n	800e470 <__strftime.isra.0+0x208>
 800e4d8:	42a3      	cmp	r3, r4
 800e4da:	f67f aef7 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800e4de:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e4e2:	553a      	strb	r2, [r7, r4]
 800e4e4:	3401      	adds	r4, #1
 800e4e6:	e7f5      	b.n	800e4d4 <__strftime.isra.0+0x26c>
 800e4e8:	6933      	ldr	r3, [r6, #16]
 800e4ea:	4a84      	ldr	r2, [pc, #528]	; (800e6fc <__strftime.isra.0+0x494>)
 800e4ec:	330c      	adds	r3, #12
 800e4ee:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800e4f2:	4648      	mov	r0, r9
 800e4f4:	f7f1 fe7c 	bl	80001f0 <strlen>
 800e4f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800e4fc:	4420      	add	r0, r4
 800e4fe:	1e6b      	subs	r3, r5, #1
 800e500:	42a0      	cmp	r0, r4
 800e502:	d0b5      	beq.n	800e470 <__strftime.isra.0+0x208>
 800e504:	42a3      	cmp	r3, r4
 800e506:	f67f aee1 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800e50a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e50e:	553a      	strb	r2, [r7, r4]
 800e510:	3401      	adds	r4, #1
 800e512:	e7f5      	b.n	800e500 <__strftime.isra.0+0x298>
 800e514:	4b79      	ldr	r3, [pc, #484]	; (800e6fc <__strftime.isra.0+0x494>)
 800e516:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800e51a:	4648      	mov	r0, r9
 800e51c:	f7f1 fe68 	bl	80001f0 <strlen>
 800e520:	f899 3000 	ldrb.w	r3, [r9]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0a3      	beq.n	800e470 <__strftime.isra.0+0x208>
 800e528:	4633      	mov	r3, r6
 800e52a:	464a      	mov	r2, r9
 800e52c:	1b29      	subs	r1, r5, r4
 800e52e:	1938      	adds	r0, r7, r4
 800e530:	f7ff fe9a 	bl	800e268 <__strftime.isra.0>
 800e534:	2800      	cmp	r0, #0
 800e536:	f77f aec9 	ble.w	800e2cc <__strftime.isra.0+0x64>
 800e53a:	4404      	add	r4, r0
 800e53c:	e798      	b.n	800e470 <__strftime.isra.0+0x208>
 800e53e:	4b6f      	ldr	r3, [pc, #444]	; (800e6fc <__strftime.isra.0+0x494>)
 800e540:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800e544:	e7e9      	b.n	800e51a <__strftime.isra.0+0x2b2>
 800e546:	4b6d      	ldr	r3, [pc, #436]	; (800e6fc <__strftime.isra.0+0x494>)
 800e548:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800e54c:	e7e5      	b.n	800e51a <__strftime.isra.0+0x2b2>
 800e54e:	4b6b      	ldr	r3, [pc, #428]	; (800e6fc <__strftime.isra.0+0x494>)
 800e550:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800e554:	e7e1      	b.n	800e51a <__strftime.isra.0+0x2b2>
 800e556:	496a      	ldr	r1, [pc, #424]	; (800e700 <__strftime.isra.0+0x498>)
 800e558:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800e55c:	458a      	cmp	sl, r1
 800e55e:	bfac      	ite	ge
 800e560:	2100      	movge	r1, #0
 800e562:	2101      	movlt	r1, #1
 800e564:	f1ba 0f00 	cmp.w	sl, #0
 800e568:	db11      	blt.n	800e58e <__strftime.isra.0+0x326>
 800e56a:	2064      	movs	r0, #100	; 0x64
 800e56c:	fb9a f0f0 	sdiv	r0, sl, r0
 800e570:	3013      	adds	r0, #19
 800e572:	f1bb 0f00 	cmp.w	fp, #0
 800e576:	d014      	beq.n	800e5a2 <__strftime.isra.0+0x33a>
 800e578:	2863      	cmp	r0, #99	; 0x63
 800e57a:	dd27      	ble.n	800e5cc <__strftime.isra.0+0x364>
 800e57c:	4b61      	ldr	r3, [pc, #388]	; (800e704 <__strftime.isra.0+0x49c>)
 800e57e:	4a62      	ldr	r2, [pc, #392]	; (800e708 <__strftime.isra.0+0x4a0>)
 800e580:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800e584:	bf18      	it	ne
 800e586:	461a      	movne	r2, r3
 800e588:	f8df c198 	ldr.w	ip, [pc, #408]	; 800e724 <__strftime.isra.0+0x4bc>
 800e58c:	e00c      	b.n	800e5a8 <__strftime.isra.0+0x340>
 800e58e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800e592:	9103      	str	r1, [sp, #12]
 800e594:	f000 ff43 	bl	800f41e <abs>
 800e598:	2264      	movs	r2, #100	; 0x64
 800e59a:	9903      	ldr	r1, [sp, #12]
 800e59c:	fb90 f0f2 	sdiv	r0, r0, r2
 800e5a0:	e7e7      	b.n	800e572 <__strftime.isra.0+0x30a>
 800e5a2:	4a58      	ldr	r2, [pc, #352]	; (800e704 <__strftime.isra.0+0x49c>)
 800e5a4:	f8df c180 	ldr.w	ip, [pc, #384]	; 800e728 <__strftime.isra.0+0x4c0>
 800e5a8:	4b58      	ldr	r3, [pc, #352]	; (800e70c <__strftime.isra.0+0x4a4>)
 800e5aa:	9001      	str	r0, [sp, #4]
 800e5ac:	f1b9 0f02 	cmp.w	r9, #2
 800e5b0:	bf2c      	ite	cs
 800e5b2:	ebc1 0109 	rsbcs	r1, r1, r9
 800e5b6:	f1c1 0102 	rsbcc	r1, r1, #2
 800e5ba:	9100      	str	r1, [sp, #0]
 800e5bc:	4950      	ldr	r1, [pc, #320]	; (800e700 <__strftime.isra.0+0x498>)
 800e5be:	458a      	cmp	sl, r1
 800e5c0:	bfa8      	it	ge
 800e5c2:	4613      	movge	r3, r2
 800e5c4:	4662      	mov	r2, ip
 800e5c6:	1b29      	subs	r1, r5, r4
 800e5c8:	1938      	adds	r0, r7, r4
 800e5ca:	e028      	b.n	800e61e <__strftime.isra.0+0x3b6>
 800e5cc:	4a4d      	ldr	r2, [pc, #308]	; (800e704 <__strftime.isra.0+0x49c>)
 800e5ce:	e7db      	b.n	800e588 <__strftime.isra.0+0x320>
 800e5d0:	494f      	ldr	r1, [pc, #316]	; (800e710 <__strftime.isra.0+0x4a8>)
 800e5d2:	4a50      	ldr	r2, [pc, #320]	; (800e714 <__strftime.isra.0+0x4ac>)
 800e5d4:	68f3      	ldr	r3, [r6, #12]
 800e5d6:	2864      	cmp	r0, #100	; 0x64
 800e5d8:	bf08      	it	eq
 800e5da:	460a      	moveq	r2, r1
 800e5dc:	1b29      	subs	r1, r5, r4
 800e5de:	1938      	adds	r0, r7, r4
 800e5e0:	f003 f942 	bl	8011868 <sniprintf>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	f6ff ae71 	blt.w	800e2cc <__strftime.isra.0+0x64>
 800e5ea:	4404      	add	r4, r0
 800e5ec:	42a5      	cmp	r5, r4
 800e5ee:	f63f af3f 	bhi.w	800e470 <__strftime.isra.0+0x208>
 800e5f2:	e66b      	b.n	800e2cc <__strftime.isra.0+0x64>
 800e5f4:	6970      	ldr	r0, [r6, #20]
 800e5f6:	6933      	ldr	r3, [r6, #16]
 800e5f8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	eb07 0904 	add.w	r9, r7, r4
 800e602:	eba5 0104 	sub.w	r1, r5, r4
 800e606:	f103 0301 	add.w	r3, r3, #1
 800e60a:	db0b      	blt.n	800e624 <__strftime.isra.0+0x3bc>
 800e60c:	2264      	movs	r2, #100	; 0x64
 800e60e:	fb90 fcf2 	sdiv	ip, r0, r2
 800e612:	fb02 001c 	mls	r0, r2, ip, r0
 800e616:	4a40      	ldr	r2, [pc, #256]	; (800e718 <__strftime.isra.0+0x4b0>)
 800e618:	e9cd a000 	strd	sl, r0, [sp]
 800e61c:	4648      	mov	r0, r9
 800e61e:	f003 f923 	bl	8011868 <sniprintf>
 800e622:	e7df      	b.n	800e5e4 <__strftime.isra.0+0x37c>
 800e624:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e628:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800e62c:	f000 fef7 	bl	800f41e <abs>
 800e630:	2264      	movs	r2, #100	; 0x64
 800e632:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800e636:	fb90 fcf2 	sdiv	ip, r0, r2
 800e63a:	fb0c 0012 	mls	r0, ip, r2, r0
 800e63e:	e7ea      	b.n	800e616 <__strftime.isra.0+0x3ae>
 800e640:	2225      	movs	r2, #37	; 0x25
 800e642:	f88d 2018 	strb.w	r2, [sp, #24]
 800e646:	f1bb 0f00 	cmp.w	fp, #0
 800e64a:	d011      	beq.n	800e670 <__strftime.isra.0+0x408>
 800e64c:	f1b9 0f06 	cmp.w	r9, #6
 800e650:	bf38      	it	cc
 800e652:	f04f 0906 	movcc.w	r9, #6
 800e656:	f1b9 0306 	subs.w	r3, r9, #6
 800e65a:	f88d b019 	strb.w	fp, [sp, #25]
 800e65e:	d10c      	bne.n	800e67a <__strftime.isra.0+0x412>
 800e660:	f10d 001a 	add.w	r0, sp, #26
 800e664:	492d      	ldr	r1, [pc, #180]	; (800e71c <__strftime.isra.0+0x4b4>)
 800e666:	f7ff fd95 	bl	800e194 <strcpy>
 800e66a:	4633      	mov	r3, r6
 800e66c:	aa06      	add	r2, sp, #24
 800e66e:	e75d      	b.n	800e52c <__strftime.isra.0+0x2c4>
 800e670:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800e674:	f04f 090a 	mov.w	r9, #10
 800e678:	e7ed      	b.n	800e656 <__strftime.isra.0+0x3ee>
 800e67a:	4a29      	ldr	r2, [pc, #164]	; (800e720 <__strftime.isra.0+0x4b8>)
 800e67c:	211e      	movs	r1, #30
 800e67e:	f10d 001a 	add.w	r0, sp, #26
 800e682:	f003 f8f1 	bl	8011868 <sniprintf>
 800e686:	2800      	cmp	r0, #0
 800e688:	ddea      	ble.n	800e660 <__strftime.isra.0+0x3f8>
 800e68a:	f10d 031a 	add.w	r3, sp, #26
 800e68e:	4418      	add	r0, r3
 800e690:	e7e8      	b.n	800e664 <__strftime.isra.0+0x3fc>
 800e692:	4630      	mov	r0, r6
 800e694:	f7ff fd86 	bl	800e1a4 <iso_year_adjust>
 800e698:	4681      	mov	r9, r0
 800e69a:	6970      	ldr	r0, [r6, #20]
 800e69c:	2800      	cmp	r0, #0
 800e69e:	db11      	blt.n	800e6c4 <__strftime.isra.0+0x45c>
 800e6a0:	2364      	movs	r3, #100	; 0x64
 800e6a2:	fb90 f2f3 	sdiv	r2, r0, r3
 800e6a6:	fb03 0012 	mls	r0, r3, r2, r0
 800e6aa:	2264      	movs	r2, #100	; 0x64
 800e6ac:	4481      	add	r9, r0
 800e6ae:	fb99 f3f2 	sdiv	r3, r9, r2
 800e6b2:	fb02 9913 	mls	r9, r2, r3, r9
 800e6b6:	4491      	add	r9, r2
 800e6b8:	fbb9 f3f2 	udiv	r3, r9, r2
 800e6bc:	fb02 9313 	mls	r3, r2, r3, r9
 800e6c0:	4a13      	ldr	r2, [pc, #76]	; (800e710 <__strftime.isra.0+0x4a8>)
 800e6c2:	e78b      	b.n	800e5dc <__strftime.isra.0+0x374>
 800e6c4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e6c8:	f000 fea9 	bl	800f41e <abs>
 800e6cc:	2364      	movs	r3, #100	; 0x64
 800e6ce:	f1b9 0f00 	cmp.w	r9, #0
 800e6d2:	fb90 f2f3 	sdiv	r2, r0, r3
 800e6d6:	fb02 0013 	mls	r0, r2, r3, r0
 800e6da:	da07      	bge.n	800e6ec <__strftime.isra.0+0x484>
 800e6dc:	6972      	ldr	r2, [r6, #20]
 800e6de:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	bfb8      	it	lt
 800e6e6:	f04f 0901 	movlt.w	r9, #1
 800e6ea:	e7de      	b.n	800e6aa <__strftime.isra.0+0x442>
 800e6ec:	d0dd      	beq.n	800e6aa <__strftime.isra.0+0x442>
 800e6ee:	6972      	ldr	r2, [r6, #20]
 800e6f0:	4b03      	ldr	r3, [pc, #12]	; (800e700 <__strftime.isra.0+0x498>)
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	bfb8      	it	lt
 800e6f6:	f04f 39ff 	movlt.w	r9, #4294967295
 800e6fa:	e7d6      	b.n	800e6aa <__strftime.isra.0+0x442>
 800e6fc:	0803a924 	.word	0x0803a924
 800e700:	fffff894 	.word	0xfffff894
 800e704:	0803a626 	.word	0x0803a626
 800e708:	0803a752 	.word	0x0803a752
 800e70c:	0803adf5 	.word	0x0803adf5
 800e710:	0803a762 	.word	0x0803a762
 800e714:	0803a754 	.word	0x0803a754
 800e718:	0803a758 	.word	0x0803a758
 800e71c:	0803a76b 	.word	0x0803a76b
 800e720:	0803a767 	.word	0x0803a767
 800e724:	0803a74a 	.word	0x0803a74a
 800e728:	0803a743 	.word	0x0803a743
 800e72c:	6971      	ldr	r1, [r6, #20]
 800e72e:	4ab6      	ldr	r2, [pc, #728]	; (800ea08 <__strftime.isra.0+0x7a0>)
 800e730:	4291      	cmp	r1, r2
 800e732:	bfac      	ite	ge
 800e734:	2300      	movge	r3, #0
 800e736:	2301      	movlt	r3, #1
 800e738:	4630      	mov	r0, r6
 800e73a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800e73e:	f7ff fd31 	bl	800e1a4 <iso_year_adjust>
 800e742:	9904      	ldr	r1, [sp, #16]
 800e744:	2900      	cmp	r1, #0
 800e746:	4682      	mov	sl, r0
 800e748:	db2c      	blt.n	800e7a4 <__strftime.isra.0+0x53c>
 800e74a:	2264      	movs	r2, #100	; 0x64
 800e74c:	fb91 f2f2 	sdiv	r2, r1, r2
 800e750:	3213      	adds	r2, #19
 800e752:	6970      	ldr	r0, [r6, #20]
 800e754:	2800      	cmp	r0, #0
 800e756:	db30      	blt.n	800e7ba <__strftime.isra.0+0x552>
 800e758:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e75c:	fb90 fefc 	sdiv	lr, r0, ip
 800e760:	fb0c 001e 	mls	r0, ip, lr, r0
 800e764:	f1ba 0f00 	cmp.w	sl, #0
 800e768:	da36      	bge.n	800e7d8 <__strftime.isra.0+0x570>
 800e76a:	6971      	ldr	r1, [r6, #20]
 800e76c:	4ba7      	ldr	r3, [pc, #668]	; (800ea0c <__strftime.isra.0+0x7a4>)
 800e76e:	4299      	cmp	r1, r3
 800e770:	db3d      	blt.n	800e7ee <__strftime.isra.0+0x586>
 800e772:	4482      	add	sl, r0
 800e774:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e778:	d13e      	bne.n	800e7f8 <__strftime.isra.0+0x590>
 800e77a:	3a01      	subs	r2, #1
 800e77c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800e780:	9b03      	ldr	r3, [sp, #12]
 800e782:	2064      	movs	r0, #100	; 0x64
 800e784:	fb00 aa02 	mla	sl, r0, r2, sl
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 81ad 	beq.w	800eae8 <__strftime.isra.0+0x880>
 800e78e:	222d      	movs	r2, #45	; 0x2d
 800e790:	f88d 2018 	strb.w	r2, [sp, #24]
 800e794:	f1b9 0f00 	cmp.w	r9, #0
 800e798:	d001      	beq.n	800e79e <__strftime.isra.0+0x536>
 800e79a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e79e:	f10d 0219 	add.w	r2, sp, #25
 800e7a2:	e1ac      	b.n	800eafe <__strftime.isra.0+0x896>
 800e7a4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800e7a8:	9104      	str	r1, [sp, #16]
 800e7aa:	f000 fe38 	bl	800f41e <abs>
 800e7ae:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e7b2:	9904      	ldr	r1, [sp, #16]
 800e7b4:	fb90 f2fc 	sdiv	r2, r0, ip
 800e7b8:	e7cb      	b.n	800e752 <__strftime.isra.0+0x4ea>
 800e7ba:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800e7be:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e7c2:	f000 fe2c 	bl	800f41e <abs>
 800e7c6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e7ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800e7ce:	fb90 fefc 	sdiv	lr, r0, ip
 800e7d2:	fb0e 001c 	mls	r0, lr, ip, r0
 800e7d6:	e7c5      	b.n	800e764 <__strftime.isra.0+0x4fc>
 800e7d8:	d0cb      	beq.n	800e772 <__strftime.isra.0+0x50a>
 800e7da:	4b8b      	ldr	r3, [pc, #556]	; (800ea08 <__strftime.isra.0+0x7a0>)
 800e7dc:	4299      	cmp	r1, r3
 800e7de:	bfb4      	ite	lt
 800e7e0:	2301      	movlt	r3, #1
 800e7e2:	2300      	movge	r3, #0
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	bfb8      	it	lt
 800e7e8:	f04f 3aff 	movlt.w	sl, #4294967295
 800e7ec:	e7c1      	b.n	800e772 <__strftime.isra.0+0x50a>
 800e7ee:	f04f 0a01 	mov.w	sl, #1
 800e7f2:	f8cd a00c 	str.w	sl, [sp, #12]
 800e7f6:	e7bc      	b.n	800e772 <__strftime.isra.0+0x50a>
 800e7f8:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800e7fc:	bf04      	itt	eq
 800e7fe:	3201      	addeq	r2, #1
 800e800:	f04f 0a00 	moveq.w	sl, #0
 800e804:	e7bc      	b.n	800e780 <__strftime.isra.0+0x518>
 800e806:	4982      	ldr	r1, [pc, #520]	; (800ea10 <__strftime.isra.0+0x7a8>)
 800e808:	4a82      	ldr	r2, [pc, #520]	; (800ea14 <__strftime.isra.0+0x7ac>)
 800e80a:	68b3      	ldr	r3, [r6, #8]
 800e80c:	286b      	cmp	r0, #107	; 0x6b
 800e80e:	bf08      	it	eq
 800e810:	460a      	moveq	r2, r1
 800e812:	e6e3      	b.n	800e5dc <__strftime.isra.0+0x374>
 800e814:	68b3      	ldr	r3, [r6, #8]
 800e816:	b163      	cbz	r3, 800e832 <__strftime.isra.0+0x5ca>
 800e818:	2b0c      	cmp	r3, #12
 800e81a:	d004      	beq.n	800e826 <__strftime.isra.0+0x5be>
 800e81c:	210c      	movs	r1, #12
 800e81e:	fb93 f2f1 	sdiv	r2, r3, r1
 800e822:	fb01 3312 	mls	r3, r1, r2, r3
 800e826:	497b      	ldr	r1, [pc, #492]	; (800ea14 <__strftime.isra.0+0x7ac>)
 800e828:	4a79      	ldr	r2, [pc, #484]	; (800ea10 <__strftime.isra.0+0x7a8>)
 800e82a:	2849      	cmp	r0, #73	; 0x49
 800e82c:	bf08      	it	eq
 800e82e:	460a      	moveq	r2, r1
 800e830:	e6d4      	b.n	800e5dc <__strftime.isra.0+0x374>
 800e832:	230c      	movs	r3, #12
 800e834:	e7f7      	b.n	800e826 <__strftime.isra.0+0x5be>
 800e836:	69f3      	ldr	r3, [r6, #28]
 800e838:	4a77      	ldr	r2, [pc, #476]	; (800ea18 <__strftime.isra.0+0x7b0>)
 800e83a:	3301      	adds	r3, #1
 800e83c:	e6ce      	b.n	800e5dc <__strftime.isra.0+0x374>
 800e83e:	6933      	ldr	r3, [r6, #16]
 800e840:	3301      	adds	r3, #1
 800e842:	e73d      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800e844:	6873      	ldr	r3, [r6, #4]
 800e846:	e73b      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800e848:	1e6b      	subs	r3, r5, #1
 800e84a:	429c      	cmp	r4, r3
 800e84c:	f4bf ad3e 	bcs.w	800e2cc <__strftime.isra.0+0x64>
 800e850:	230a      	movs	r3, #10
 800e852:	553b      	strb	r3, [r7, r4]
 800e854:	3401      	adds	r4, #1
 800e856:	e60b      	b.n	800e470 <__strftime.isra.0+0x208>
 800e858:	68b3      	ldr	r3, [r6, #8]
 800e85a:	2b0b      	cmp	r3, #11
 800e85c:	4b6f      	ldr	r3, [pc, #444]	; (800ea1c <__strftime.isra.0+0x7b4>)
 800e85e:	bfd4      	ite	le
 800e860:	2200      	movle	r2, #0
 800e862:	2201      	movgt	r2, #1
 800e864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e868:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800e86c:	4648      	mov	r0, r9
 800e86e:	f7f1 fcbf 	bl	80001f0 <strlen>
 800e872:	f109 32ff 	add.w	r2, r9, #4294967295
 800e876:	4420      	add	r0, r4
 800e878:	f105 3cff 	add.w	ip, r5, #4294967295
 800e87c:	42a0      	cmp	r0, r4
 800e87e:	f43f adf7 	beq.w	800e470 <__strftime.isra.0+0x208>
 800e882:	45a4      	cmp	ip, r4
 800e884:	f67f ad22 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800e888:	f898 1000 	ldrb.w	r1, [r8]
 800e88c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e890:	2950      	cmp	r1, #80	; 0x50
 800e892:	d107      	bne.n	800e8a4 <__strftime.isra.0+0x63c>
 800e894:	4962      	ldr	r1, [pc, #392]	; (800ea20 <__strftime.isra.0+0x7b8>)
 800e896:	5cc9      	ldrb	r1, [r1, r3]
 800e898:	f001 0103 	and.w	r1, r1, #3
 800e89c:	2901      	cmp	r1, #1
 800e89e:	bf08      	it	eq
 800e8a0:	3320      	addeq	r3, #32
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	553b      	strb	r3, [r7, r4]
 800e8a6:	3401      	adds	r4, #1
 800e8a8:	e7e8      	b.n	800e87c <__strftime.isra.0+0x614>
 800e8aa:	6873      	ldr	r3, [r6, #4]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	4a5d      	ldr	r2, [pc, #372]	; (800ea24 <__strftime.isra.0+0x7bc>)
 800e8b0:	68b3      	ldr	r3, [r6, #8]
 800e8b2:	1b29      	subs	r1, r5, r4
 800e8b4:	1938      	adds	r0, r7, r4
 800e8b6:	f002 ffd7 	bl	8011868 <sniprintf>
 800e8ba:	e693      	b.n	800e5e4 <__strftime.isra.0+0x37c>
 800e8bc:	6a33      	ldr	r3, [r6, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	db7a      	blt.n	800e9b8 <__strftime.isra.0+0x750>
 800e8c2:	f000 fb41 	bl	800ef48 <__tz_lock>
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	b90b      	cbnz	r3, 800e8ce <__strftime.isra.0+0x666>
 800e8ca:	f000 fb49 	bl	800ef60 <_tzset_unlocked>
 800e8ce:	f001 fe45 	bl	801055c <__gettzinfo>
 800e8d2:	6a33      	ldr	r3, [r6, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bfd4      	ite	le
 800e8d8:	2200      	movle	r2, #0
 800e8da:	2201      	movgt	r2, #1
 800e8dc:	2328      	movs	r3, #40	; 0x28
 800e8de:	fb02 3303 	mla	r3, r2, r3, r3
 800e8e2:	58c3      	ldr	r3, [r0, r3]
 800e8e4:	f1c3 0900 	rsb	r9, r3, #0
 800e8e8:	f000 fb34 	bl	800ef54 <__tz_unlock>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	9302      	str	r3, [sp, #8]
 800e8f0:	6972      	ldr	r2, [r6, #20]
 800e8f2:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800e8f6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800e8fa:	f16c 0c00 	sbc.w	ip, ip, #0
 800e8fe:	f1bc 0f00 	cmp.w	ip, #0
 800e902:	eba5 0104 	sub.w	r1, r5, r4
 800e906:	eb07 0004 	add.w	r0, r7, r4
 800e90a:	da02      	bge.n	800e912 <__strftime.isra.0+0x6aa>
 800e90c:	3303      	adds	r3, #3
 800e90e:	f14c 0c00 	adc.w	ip, ip, #0
 800e912:	089b      	lsrs	r3, r3, #2
 800e914:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800e918:	f102 3aff 	add.w	sl, r2, #4294967295
 800e91c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800e920:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800e924:	fb9a fefe 	sdiv	lr, sl, lr
 800e928:	ebb3 030e 	subs.w	r3, r3, lr
 800e92c:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800e930:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800e934:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800e938:	fb9a fefe 	sdiv	lr, sl, lr
 800e93c:	eb13 030e 	adds.w	r3, r3, lr
 800e940:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800e944:	3a46      	subs	r2, #70	; 0x46
 800e946:	f240 1c6d 	movw	ip, #365	; 0x16d
 800e94a:	fb0c f202 	mul.w	r2, ip, r2
 800e94e:	189b      	adds	r3, r3, r2
 800e950:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800e954:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800e958:	f04f 0c18 	mov.w	ip, #24
 800e95c:	eb13 030e 	adds.w	r3, r3, lr
 800e960:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e964:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e968:	fb0c e202 	mla	r2, ip, r2, lr
 800e96c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800e970:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800e974:	eb13 030e 	adds.w	r3, r3, lr
 800e978:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800e97c:	fba3 320c 	umull	r3, r2, r3, ip
 800e980:	fb0c 220e 	mla	r2, ip, lr, r2
 800e984:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800e988:	eb13 030e 	adds.w	r3, r3, lr
 800e98c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e990:	fba3 3e0c 	umull	r3, lr, r3, ip
 800e994:	fb0c e202 	mla	r2, ip, r2, lr
 800e998:	f8d6 e000 	ldr.w	lr, [r6]
 800e99c:	eb13 030e 	adds.w	r3, r3, lr
 800e9a0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800e9a4:	ebb3 0309 	subs.w	r3, r3, r9
 800e9a8:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800e9ac:	e9cd 3200 	strd	r3, r2, [sp]
 800e9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ea28 <__strftime.isra.0+0x7c0>)
 800e9b2:	f002 ff59 	bl	8011868 <sniprintf>
 800e9b6:	e615      	b.n	800e5e4 <__strftime.isra.0+0x37c>
 800e9b8:	f04f 0900 	mov.w	r9, #0
 800e9bc:	e798      	b.n	800e8f0 <__strftime.isra.0+0x688>
 800e9be:	6833      	ldr	r3, [r6, #0]
 800e9c0:	e67e      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800e9c2:	1e6b      	subs	r3, r5, #1
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	f4bf ac81 	bcs.w	800e2cc <__strftime.isra.0+0x64>
 800e9ca:	2309      	movs	r3, #9
 800e9cc:	e741      	b.n	800e852 <__strftime.isra.0+0x5ea>
 800e9ce:	6833      	ldr	r3, [r6, #0]
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	6873      	ldr	r3, [r6, #4]
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	4a15      	ldr	r2, [pc, #84]	; (800ea2c <__strftime.isra.0+0x7c4>)
 800e9d8:	68b3      	ldr	r3, [r6, #8]
 800e9da:	e5f4      	b.n	800e5c6 <__strftime.isra.0+0x35e>
 800e9dc:	1e6b      	subs	r3, r5, #1
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	f4bf ac74 	bcs.w	800e2cc <__strftime.isra.0+0x64>
 800e9e4:	69b3      	ldr	r3, [r6, #24]
 800e9e6:	1c62      	adds	r2, r4, #1
 800e9e8:	b91b      	cbnz	r3, 800e9f2 <__strftime.isra.0+0x78a>
 800e9ea:	2337      	movs	r3, #55	; 0x37
 800e9ec:	553b      	strb	r3, [r7, r4]
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	e53e      	b.n	800e470 <__strftime.isra.0+0x208>
 800e9f2:	3330      	adds	r3, #48	; 0x30
 800e9f4:	e7fa      	b.n	800e9ec <__strftime.isra.0+0x784>
 800e9f6:	69f3      	ldr	r3, [r6, #28]
 800e9f8:	69b2      	ldr	r2, [r6, #24]
 800e9fa:	3307      	adds	r3, #7
 800e9fc:	1a9b      	subs	r3, r3, r2
 800e9fe:	2207      	movs	r2, #7
 800ea00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea04:	e65c      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800ea06:	bf00      	nop
 800ea08:	fffff894 	.word	0xfffff894
 800ea0c:	fffff895 	.word	0xfffff895
 800ea10:	0803a754 	.word	0x0803a754
 800ea14:	0803a762 	.word	0x0803a762
 800ea18:	0803a777 	.word	0x0803a777
 800ea1c:	0803a924 	.word	0x0803a924
 800ea20:	0803aa5d 	.word	0x0803aa5d
 800ea24:	0803a786 	.word	0x0803a786
 800ea28:	0803a77c 	.word	0x0803a77c
 800ea2c:	0803a781 	.word	0x0803a781
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7ff fbb7 	bl	800e1a4 <iso_year_adjust>
 800ea36:	69b2      	ldr	r2, [r6, #24]
 800ea38:	b132      	cbz	r2, 800ea48 <__strftime.isra.0+0x7e0>
 800ea3a:	3a01      	subs	r2, #1
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	dc28      	bgt.n	800ea92 <__strftime.isra.0+0x82a>
 800ea40:	69f3      	ldr	r3, [r6, #28]
 800ea42:	d103      	bne.n	800ea4c <__strftime.isra.0+0x7e4>
 800ea44:	330a      	adds	r3, #10
 800ea46:	e7d9      	b.n	800e9fc <__strftime.isra.0+0x794>
 800ea48:	2206      	movs	r2, #6
 800ea4a:	e7f7      	b.n	800ea3c <__strftime.isra.0+0x7d4>
 800ea4c:	6971      	ldr	r1, [r6, #20]
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	eba2 0203 	sub.w	r2, r2, r3
 800ea54:	f240 736b 	movw	r3, #1899	; 0x76b
 800ea58:	bfa8      	it	ge
 800ea5a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800ea5e:	440b      	add	r3, r1
 800ea60:	0799      	lsls	r1, r3, #30
 800ea62:	d105      	bne.n	800ea70 <__strftime.isra.0+0x808>
 800ea64:	2064      	movs	r0, #100	; 0x64
 800ea66:	fb93 f1f0 	sdiv	r1, r3, r0
 800ea6a:	fb00 3111 	mls	r1, r0, r1, r3
 800ea6e:	b971      	cbnz	r1, 800ea8e <__strftime.isra.0+0x826>
 800ea70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ea74:	fb93 f0f1 	sdiv	r0, r3, r1
 800ea78:	fb01 3310 	mls	r3, r1, r0, r3
 800ea7c:	fab3 f383 	clz	r3, r3
 800ea80:	095b      	lsrs	r3, r3, #5
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	2b05      	cmp	r3, #5
 800ea86:	bfb4      	ite	lt
 800ea88:	2335      	movlt	r3, #53	; 0x35
 800ea8a:	2334      	movge	r3, #52	; 0x34
 800ea8c:	e618      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e7f7      	b.n	800ea82 <__strftime.isra.0+0x81a>
 800ea92:	2301      	movs	r3, #1
 800ea94:	e614      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800ea96:	1e6b      	subs	r3, r5, #1
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	f4bf ac17 	bcs.w	800e2cc <__strftime.isra.0+0x64>
 800ea9e:	69b3      	ldr	r3, [r6, #24]
 800eaa0:	3330      	adds	r3, #48	; 0x30
 800eaa2:	e6d6      	b.n	800e852 <__strftime.isra.0+0x5ea>
 800eaa4:	69b2      	ldr	r2, [r6, #24]
 800eaa6:	b11a      	cbz	r2, 800eab0 <__strftime.isra.0+0x848>
 800eaa8:	3a01      	subs	r2, #1
 800eaaa:	69f3      	ldr	r3, [r6, #28]
 800eaac:	3307      	adds	r3, #7
 800eaae:	e7a5      	b.n	800e9fc <__strftime.isra.0+0x794>
 800eab0:	2206      	movs	r2, #6
 800eab2:	e7fa      	b.n	800eaaa <__strftime.isra.0+0x842>
 800eab4:	6970      	ldr	r0, [r6, #20]
 800eab6:	2800      	cmp	r0, #0
 800eab8:	db05      	blt.n	800eac6 <__strftime.isra.0+0x85e>
 800eaba:	2364      	movs	r3, #100	; 0x64
 800eabc:	fb90 f2f3 	sdiv	r2, r0, r3
 800eac0:	fb02 0313 	mls	r3, r2, r3, r0
 800eac4:	e5fc      	b.n	800e6c0 <__strftime.isra.0+0x458>
 800eac6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800eaca:	f000 fca8 	bl	800f41e <abs>
 800eace:	e7f4      	b.n	800eaba <__strftime.isra.0+0x852>
 800ead0:	6972      	ldr	r2, [r6, #20]
 800ead2:	494c      	ldr	r1, [pc, #304]	; (800ec04 <__strftime.isra.0+0x99c>)
 800ead4:	428a      	cmp	r2, r1
 800ead6:	da05      	bge.n	800eae4 <__strftime.isra.0+0x87c>
 800ead8:	202d      	movs	r0, #45	; 0x2d
 800eada:	f88d 0018 	strb.w	r0, [sp, #24]
 800eade:	eba1 0a02 	sub.w	sl, r1, r2
 800eae2:	e657      	b.n	800e794 <__strftime.isra.0+0x52c>
 800eae4:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800eae8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800eaec:	d106      	bne.n	800eafc <__strftime.isra.0+0x894>
 800eaee:	f242 720f 	movw	r2, #9999	; 0x270f
 800eaf2:	4592      	cmp	sl, r2
 800eaf4:	d902      	bls.n	800eafc <__strftime.isra.0+0x894>
 800eaf6:	f88d b018 	strb.w	fp, [sp, #24]
 800eafa:	e64b      	b.n	800e794 <__strftime.isra.0+0x52c>
 800eafc:	aa06      	add	r2, sp, #24
 800eafe:	2125      	movs	r1, #37	; 0x25
 800eb00:	7011      	strb	r1, [r2, #0]
 800eb02:	f1bb 0f00 	cmp.w	fp, #0
 800eb06:	d108      	bne.n	800eb1a <__strftime.isra.0+0x8b2>
 800eb08:	1c50      	adds	r0, r2, #1
 800eb0a:	493f      	ldr	r1, [pc, #252]	; (800ec08 <__strftime.isra.0+0x9a0>)
 800eb0c:	f7ff fb42 	bl	800e194 <strcpy>
 800eb10:	f8cd a000 	str.w	sl, [sp]
 800eb14:	464b      	mov	r3, r9
 800eb16:	aa06      	add	r2, sp, #24
 800eb18:	e6cb      	b.n	800e8b2 <__strftime.isra.0+0x64a>
 800eb1a:	2330      	movs	r3, #48	; 0x30
 800eb1c:	1c90      	adds	r0, r2, #2
 800eb1e:	7053      	strb	r3, [r2, #1]
 800eb20:	e7f3      	b.n	800eb0a <__strftime.isra.0+0x8a2>
 800eb22:	6a33      	ldr	r3, [r6, #32]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f6ff aca3 	blt.w	800e470 <__strftime.isra.0+0x208>
 800eb2a:	f000 fa0d 	bl	800ef48 <__tz_lock>
 800eb2e:	9b02      	ldr	r3, [sp, #8]
 800eb30:	b90b      	cbnz	r3, 800eb36 <__strftime.isra.0+0x8ce>
 800eb32:	f000 fa15 	bl	800ef60 <_tzset_unlocked>
 800eb36:	f001 fd11 	bl	801055c <__gettzinfo>
 800eb3a:	6a33      	ldr	r3, [r6, #32]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	bfd4      	ite	le
 800eb40:	2200      	movle	r2, #0
 800eb42:	2201      	movgt	r2, #1
 800eb44:	2328      	movs	r3, #40	; 0x28
 800eb46:	fb02 3303 	mla	r3, r2, r3, r3
 800eb4a:	eb07 0a04 	add.w	sl, r7, r4
 800eb4e:	58c3      	ldr	r3, [r0, r3]
 800eb50:	f1c3 0900 	rsb	r9, r3, #0
 800eb54:	f000 f9fe 	bl	800ef54 <__tz_unlock>
 800eb58:	233c      	movs	r3, #60	; 0x3c
 800eb5a:	fb99 f0f3 	sdiv	r0, r9, r3
 800eb5e:	f001 fd01 	bl	8010564 <labs>
 800eb62:	233c      	movs	r3, #60	; 0x3c
 800eb64:	eba5 0b04 	sub.w	fp, r5, r4
 800eb68:	fb90 f2f3 	sdiv	r2, r0, r3
 800eb6c:	fb02 0013 	mls	r0, r2, r3, r0
 800eb70:	9000      	str	r0, [sp, #0]
 800eb72:	4a26      	ldr	r2, [pc, #152]	; (800ec0c <__strftime.isra.0+0x9a4>)
 800eb74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800eb78:	4659      	mov	r1, fp
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	fb99 f3f3 	sdiv	r3, r9, r3
 800eb80:	f002 fe72 	bl	8011868 <sniprintf>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	f6ff aba1 	blt.w	800e2cc <__strftime.isra.0+0x64>
 800eb8a:	4404      	add	r4, r0
 800eb8c:	42a5      	cmp	r5, r4
 800eb8e:	f67f ab9d 	bls.w	800e2cc <__strftime.isra.0+0x64>
 800eb92:	2301      	movs	r3, #1
 800eb94:	9302      	str	r3, [sp, #8]
 800eb96:	e46b      	b.n	800e470 <__strftime.isra.0+0x208>
 800eb98:	6a33      	ldr	r3, [r6, #32]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f6ff ac68 	blt.w	800e470 <__strftime.isra.0+0x208>
 800eba0:	f000 f9d2 	bl	800ef48 <__tz_lock>
 800eba4:	9b02      	ldr	r3, [sp, #8]
 800eba6:	b90b      	cbnz	r3, 800ebac <__strftime.isra.0+0x944>
 800eba8:	f000 f9da 	bl	800ef60 <_tzset_unlocked>
 800ebac:	6a33      	ldr	r3, [r6, #32]
 800ebae:	4a18      	ldr	r2, [pc, #96]	; (800ec10 <__strftime.isra.0+0x9a8>)
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bfd4      	ite	le
 800ebb4:	2300      	movle	r3, #0
 800ebb6:	2301      	movgt	r3, #1
 800ebb8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ebbc:	4648      	mov	r0, r9
 800ebbe:	f7f1 fb17 	bl	80001f0 <strlen>
 800ebc2:	f109 39ff 	add.w	r9, r9, #4294967295
 800ebc6:	4420      	add	r0, r4
 800ebc8:	1e6b      	subs	r3, r5, #1
 800ebca:	42a0      	cmp	r0, r4
 800ebcc:	d102      	bne.n	800ebd4 <__strftime.isra.0+0x96c>
 800ebce:	f000 f9c1 	bl	800ef54 <__tz_unlock>
 800ebd2:	e7de      	b.n	800eb92 <__strftime.isra.0+0x92a>
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	d904      	bls.n	800ebe2 <__strftime.isra.0+0x97a>
 800ebd8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ebdc:	553a      	strb	r2, [r7, r4]
 800ebde:	3401      	adds	r4, #1
 800ebe0:	e7f3      	b.n	800ebca <__strftime.isra.0+0x962>
 800ebe2:	f000 f9b7 	bl	800ef54 <__tz_unlock>
 800ebe6:	f7ff bb71 	b.w	800e2cc <__strftime.isra.0+0x64>
 800ebea:	1e6b      	subs	r3, r5, #1
 800ebec:	429c      	cmp	r4, r3
 800ebee:	f4bf ab6d 	bcs.w	800e2cc <__strftime.isra.0+0x64>
 800ebf2:	2325      	movs	r3, #37	; 0x25
 800ebf4:	e62d      	b.n	800e852 <__strftime.isra.0+0x5ea>
 800ebf6:	b10d      	cbz	r5, 800ebfc <__strftime.isra.0+0x994>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	553b      	strb	r3, [r7, r4]
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	b00f      	add	sp, #60	; 0x3c
 800ec00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec04:	fffff894 	.word	0xfffff894
 800ec08:	0803a773 	.word	0x0803a773
 800ec0c:	0803a790 	.word	0x0803a790
 800ec10:	20000324 	.word	0x20000324

0800ec14 <strftime>:
 800ec14:	f7ff bb28 	b.w	800e268 <__strftime.isra.0>

0800ec18 <strncpy>:
 800ec18:	b510      	push	{r4, lr}
 800ec1a:	3901      	subs	r1, #1
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	b132      	cbz	r2, 800ec2e <strncpy+0x16>
 800ec20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec24:	f803 4b01 	strb.w	r4, [r3], #1
 800ec28:	3a01      	subs	r2, #1
 800ec2a:	2c00      	cmp	r4, #0
 800ec2c:	d1f7      	bne.n	800ec1e <strncpy+0x6>
 800ec2e:	441a      	add	r2, r3
 800ec30:	2100      	movs	r1, #0
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d100      	bne.n	800ec38 <strncpy+0x20>
 800ec36:	bd10      	pop	{r4, pc}
 800ec38:	f803 1b01 	strb.w	r1, [r3], #1
 800ec3c:	e7f9      	b.n	800ec32 <strncpy+0x1a>
	...

0800ec40 <strtok>:
 800ec40:	4b16      	ldr	r3, [pc, #88]	; (800ec9c <strtok+0x5c>)
 800ec42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec44:	681e      	ldr	r6, [r3, #0]
 800ec46:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ec48:	4605      	mov	r5, r0
 800ec4a:	b9fc      	cbnz	r4, 800ec8c <strtok+0x4c>
 800ec4c:	2050      	movs	r0, #80	; 0x50
 800ec4e:	9101      	str	r1, [sp, #4]
 800ec50:	f7fe f8b6 	bl	800cdc0 <malloc>
 800ec54:	9901      	ldr	r1, [sp, #4]
 800ec56:	65b0      	str	r0, [r6, #88]	; 0x58
 800ec58:	4602      	mov	r2, r0
 800ec5a:	b920      	cbnz	r0, 800ec66 <strtok+0x26>
 800ec5c:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <strtok+0x60>)
 800ec5e:	4811      	ldr	r0, [pc, #68]	; (800eca4 <strtok+0x64>)
 800ec60:	2157      	movs	r1, #87	; 0x57
 800ec62:	f7fe f859 	bl	800cd18 <__assert_func>
 800ec66:	e9c0 4400 	strd	r4, r4, [r0]
 800ec6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ec72:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ec76:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ec7a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ec7e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ec82:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ec86:	6184      	str	r4, [r0, #24]
 800ec88:	7704      	strb	r4, [r0, #28]
 800ec8a:	6244      	str	r4, [r0, #36]	; 0x24
 800ec8c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ec8e:	2301      	movs	r3, #1
 800ec90:	4628      	mov	r0, r5
 800ec92:	b002      	add	sp, #8
 800ec94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec98:	f000 b806 	b.w	800eca8 <__strtok_r>
 800ec9c:	200002c0 	.word	0x200002c0
 800eca0:	0803a594 	.word	0x0803a594
 800eca4:	0803a79c 	.word	0x0803a79c

0800eca8 <__strtok_r>:
 800eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecaa:	b908      	cbnz	r0, 800ecb0 <__strtok_r+0x8>
 800ecac:	6810      	ldr	r0, [r2, #0]
 800ecae:	b188      	cbz	r0, 800ecd4 <__strtok_r+0x2c>
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ecb8:	460f      	mov	r7, r1
 800ecba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ecbe:	b91e      	cbnz	r6, 800ecc8 <__strtok_r+0x20>
 800ecc0:	b965      	cbnz	r5, 800ecdc <__strtok_r+0x34>
 800ecc2:	6015      	str	r5, [r2, #0]
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	e005      	b.n	800ecd4 <__strtok_r+0x2c>
 800ecc8:	42b5      	cmp	r5, r6
 800ecca:	d1f6      	bne.n	800ecba <__strtok_r+0x12>
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1f0      	bne.n	800ecb2 <__strtok_r+0xa>
 800ecd0:	6014      	str	r4, [r2, #0]
 800ecd2:	7003      	strb	r3, [r0, #0]
 800ecd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd6:	461c      	mov	r4, r3
 800ecd8:	e00c      	b.n	800ecf4 <__strtok_r+0x4c>
 800ecda:	b915      	cbnz	r5, 800ece2 <__strtok_r+0x3a>
 800ecdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ece0:	460e      	mov	r6, r1
 800ece2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ece6:	42ab      	cmp	r3, r5
 800ece8:	d1f7      	bne.n	800ecda <__strtok_r+0x32>
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d0f3      	beq.n	800ecd6 <__strtok_r+0x2e>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ecf4:	6014      	str	r4, [r2, #0]
 800ecf6:	e7ed      	b.n	800ecd4 <__strtok_r+0x2c>

0800ecf8 <_strtoul_l.constprop.0>:
 800ecf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	4f36      	ldr	r7, [pc, #216]	; (800edd8 <_strtoul_l.constprop.0+0xe0>)
 800ecfe:	4686      	mov	lr, r0
 800ed00:	460d      	mov	r5, r1
 800ed02:	4628      	mov	r0, r5
 800ed04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed08:	5de6      	ldrb	r6, [r4, r7]
 800ed0a:	f016 0608 	ands.w	r6, r6, #8
 800ed0e:	d1f8      	bne.n	800ed02 <_strtoul_l.constprop.0+0xa>
 800ed10:	2c2d      	cmp	r4, #45	; 0x2d
 800ed12:	d12f      	bne.n	800ed74 <_strtoul_l.constprop.0+0x7c>
 800ed14:	782c      	ldrb	r4, [r5, #0]
 800ed16:	2601      	movs	r6, #1
 800ed18:	1c85      	adds	r5, r0, #2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d057      	beq.n	800edce <_strtoul_l.constprop.0+0xd6>
 800ed1e:	2b10      	cmp	r3, #16
 800ed20:	d109      	bne.n	800ed36 <_strtoul_l.constprop.0+0x3e>
 800ed22:	2c30      	cmp	r4, #48	; 0x30
 800ed24:	d107      	bne.n	800ed36 <_strtoul_l.constprop.0+0x3e>
 800ed26:	7828      	ldrb	r0, [r5, #0]
 800ed28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ed2c:	2858      	cmp	r0, #88	; 0x58
 800ed2e:	d149      	bne.n	800edc4 <_strtoul_l.constprop.0+0xcc>
 800ed30:	786c      	ldrb	r4, [r5, #1]
 800ed32:	2310      	movs	r3, #16
 800ed34:	3502      	adds	r5, #2
 800ed36:	f04f 38ff 	mov.w	r8, #4294967295
 800ed3a:	2700      	movs	r7, #0
 800ed3c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ed40:	fb03 f908 	mul.w	r9, r3, r8
 800ed44:	ea6f 0909 	mvn.w	r9, r9
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ed4e:	f1bc 0f09 	cmp.w	ip, #9
 800ed52:	d814      	bhi.n	800ed7e <_strtoul_l.constprop.0+0x86>
 800ed54:	4664      	mov	r4, ip
 800ed56:	42a3      	cmp	r3, r4
 800ed58:	dd22      	ble.n	800eda0 <_strtoul_l.constprop.0+0xa8>
 800ed5a:	2f00      	cmp	r7, #0
 800ed5c:	db1d      	blt.n	800ed9a <_strtoul_l.constprop.0+0xa2>
 800ed5e:	4580      	cmp	r8, r0
 800ed60:	d31b      	bcc.n	800ed9a <_strtoul_l.constprop.0+0xa2>
 800ed62:	d101      	bne.n	800ed68 <_strtoul_l.constprop.0+0x70>
 800ed64:	45a1      	cmp	r9, r4
 800ed66:	db18      	blt.n	800ed9a <_strtoul_l.constprop.0+0xa2>
 800ed68:	fb00 4003 	mla	r0, r0, r3, r4
 800ed6c:	2701      	movs	r7, #1
 800ed6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed72:	e7ea      	b.n	800ed4a <_strtoul_l.constprop.0+0x52>
 800ed74:	2c2b      	cmp	r4, #43	; 0x2b
 800ed76:	bf04      	itt	eq
 800ed78:	782c      	ldrbeq	r4, [r5, #0]
 800ed7a:	1c85      	addeq	r5, r0, #2
 800ed7c:	e7cd      	b.n	800ed1a <_strtoul_l.constprop.0+0x22>
 800ed7e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ed82:	f1bc 0f19 	cmp.w	ip, #25
 800ed86:	d801      	bhi.n	800ed8c <_strtoul_l.constprop.0+0x94>
 800ed88:	3c37      	subs	r4, #55	; 0x37
 800ed8a:	e7e4      	b.n	800ed56 <_strtoul_l.constprop.0+0x5e>
 800ed8c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ed90:	f1bc 0f19 	cmp.w	ip, #25
 800ed94:	d804      	bhi.n	800eda0 <_strtoul_l.constprop.0+0xa8>
 800ed96:	3c57      	subs	r4, #87	; 0x57
 800ed98:	e7dd      	b.n	800ed56 <_strtoul_l.constprop.0+0x5e>
 800ed9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ed9e:	e7e6      	b.n	800ed6e <_strtoul_l.constprop.0+0x76>
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	da07      	bge.n	800edb4 <_strtoul_l.constprop.0+0xbc>
 800eda4:	2322      	movs	r3, #34	; 0x22
 800eda6:	f8ce 3000 	str.w	r3, [lr]
 800edaa:	f04f 30ff 	mov.w	r0, #4294967295
 800edae:	b932      	cbnz	r2, 800edbe <_strtoul_l.constprop.0+0xc6>
 800edb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edb4:	b106      	cbz	r6, 800edb8 <_strtoul_l.constprop.0+0xc0>
 800edb6:	4240      	negs	r0, r0
 800edb8:	2a00      	cmp	r2, #0
 800edba:	d0f9      	beq.n	800edb0 <_strtoul_l.constprop.0+0xb8>
 800edbc:	b107      	cbz	r7, 800edc0 <_strtoul_l.constprop.0+0xc8>
 800edbe:	1e69      	subs	r1, r5, #1
 800edc0:	6011      	str	r1, [r2, #0]
 800edc2:	e7f5      	b.n	800edb0 <_strtoul_l.constprop.0+0xb8>
 800edc4:	2430      	movs	r4, #48	; 0x30
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1b5      	bne.n	800ed36 <_strtoul_l.constprop.0+0x3e>
 800edca:	2308      	movs	r3, #8
 800edcc:	e7b3      	b.n	800ed36 <_strtoul_l.constprop.0+0x3e>
 800edce:	2c30      	cmp	r4, #48	; 0x30
 800edd0:	d0a9      	beq.n	800ed26 <_strtoul_l.constprop.0+0x2e>
 800edd2:	230a      	movs	r3, #10
 800edd4:	e7af      	b.n	800ed36 <_strtoul_l.constprop.0+0x3e>
 800edd6:	bf00      	nop
 800edd8:	0803aa5d 	.word	0x0803aa5d

0800eddc <_strtoul_r>:
 800eddc:	f7ff bf8c 	b.w	800ecf8 <_strtoul_l.constprop.0>

0800ede0 <strtoul>:
 800ede0:	4613      	mov	r3, r2
 800ede2:	460a      	mov	r2, r1
 800ede4:	4601      	mov	r1, r0
 800ede6:	4802      	ldr	r0, [pc, #8]	; (800edf0 <strtoul+0x10>)
 800ede8:	6800      	ldr	r0, [r0, #0]
 800edea:	f7ff bf85 	b.w	800ecf8 <_strtoul_l.constprop.0>
 800edee:	bf00      	nop
 800edf0:	200002c0 	.word	0x200002c0

0800edf4 <__tzcalc_limits>:
 800edf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	4605      	mov	r5, r0
 800edfa:	f001 fbaf 	bl	801055c <__gettzinfo>
 800edfe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ee02:	429d      	cmp	r5, r3
 800ee04:	f340 8099 	ble.w	800ef3a <__tzcalc_limits+0x146>
 800ee08:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ee0c:	18ac      	adds	r4, r5, r2
 800ee0e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ee12:	f240 126d 	movw	r2, #365	; 0x16d
 800ee16:	10a4      	asrs	r4, r4, #2
 800ee18:	fb02 4403 	mla	r4, r2, r3, r4
 800ee1c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ee20:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ee24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee28:	441c      	add	r4, r3
 800ee2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ee2e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ee32:	fb95 fcf3 	sdiv	ip, r5, r3
 800ee36:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ee3a:	186a      	adds	r2, r5, r1
 800ee3c:	fabc f68c 	clz	r6, ip
 800ee40:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee44:	f005 0303 	and.w	r3, r5, #3
 800ee48:	4414      	add	r4, r2
 800ee4a:	2264      	movs	r2, #100	; 0x64
 800ee4c:	6045      	str	r5, [r0, #4]
 800ee4e:	fb95 f7f2 	sdiv	r7, r5, r2
 800ee52:	0976      	lsrs	r6, r6, #5
 800ee54:	fb02 5717 	mls	r7, r2, r7, r5
 800ee58:	4601      	mov	r1, r0
 800ee5a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	f04f 0a07 	mov.w	sl, #7
 800ee64:	7a0d      	ldrb	r5, [r1, #8]
 800ee66:	694b      	ldr	r3, [r1, #20]
 800ee68:	2d4a      	cmp	r5, #74	; 0x4a
 800ee6a:	d12d      	bne.n	800eec8 <__tzcalc_limits+0xd4>
 800ee6c:	9a00      	ldr	r2, [sp, #0]
 800ee6e:	eb04 0e03 	add.w	lr, r4, r3
 800ee72:	b902      	cbnz	r2, 800ee76 <__tzcalc_limits+0x82>
 800ee74:	b917      	cbnz	r7, 800ee7c <__tzcalc_limits+0x88>
 800ee76:	f1bc 0f00 	cmp.w	ip, #0
 800ee7a:	d123      	bne.n	800eec4 <__tzcalc_limits+0xd0>
 800ee7c:	2b3b      	cmp	r3, #59	; 0x3b
 800ee7e:	bfd4      	ite	le
 800ee80:	2300      	movle	r3, #0
 800ee82:	2301      	movgt	r3, #1
 800ee84:	4473      	add	r3, lr
 800ee86:	3b01      	subs	r3, #1
 800ee88:	698d      	ldr	r5, [r1, #24]
 800ee8a:	4a2d      	ldr	r2, [pc, #180]	; (800ef40 <__tzcalc_limits+0x14c>)
 800ee8c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800ee90:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800ee94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ee96:	18ed      	adds	r5, r5, r3
 800ee98:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800ee9c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800eea0:	3128      	adds	r1, #40	; 0x28
 800eea2:	458b      	cmp	fp, r1
 800eea4:	d1de      	bne.n	800ee64 <__tzcalc_limits+0x70>
 800eea6:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800eeaa:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800eeae:	428c      	cmp	r4, r1
 800eeb0:	eb72 0303 	sbcs.w	r3, r2, r3
 800eeb4:	bfb4      	ite	lt
 800eeb6:	2301      	movlt	r3, #1
 800eeb8:	2300      	movge	r3, #0
 800eeba:	6003      	str	r3, [r0, #0]
 800eebc:	2001      	movs	r0, #1
 800eebe:	b003      	add	sp, #12
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec4:	2300      	movs	r3, #0
 800eec6:	e7dd      	b.n	800ee84 <__tzcalc_limits+0x90>
 800eec8:	2d44      	cmp	r5, #68	; 0x44
 800eeca:	d101      	bne.n	800eed0 <__tzcalc_limits+0xdc>
 800eecc:	4423      	add	r3, r4
 800eece:	e7db      	b.n	800ee88 <__tzcalc_limits+0x94>
 800eed0:	9a00      	ldr	r2, [sp, #0]
 800eed2:	bb62      	cbnz	r2, 800ef2e <__tzcalc_limits+0x13a>
 800eed4:	2f00      	cmp	r7, #0
 800eed6:	bf0c      	ite	eq
 800eed8:	4635      	moveq	r5, r6
 800eeda:	2501      	movne	r5, #1
 800eedc:	68ca      	ldr	r2, [r1, #12]
 800eede:	9201      	str	r2, [sp, #4]
 800eee0:	4a18      	ldr	r2, [pc, #96]	; (800ef44 <__tzcalc_limits+0x150>)
 800eee2:	f04f 0930 	mov.w	r9, #48	; 0x30
 800eee6:	fb09 2505 	mla	r5, r9, r5, r2
 800eeea:	46a6      	mov	lr, r4
 800eeec:	f04f 0800 	mov.w	r8, #0
 800eef0:	3d04      	subs	r5, #4
 800eef2:	9a01      	ldr	r2, [sp, #4]
 800eef4:	f108 0801 	add.w	r8, r8, #1
 800eef8:	4542      	cmp	r2, r8
 800eefa:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800eefe:	dc18      	bgt.n	800ef32 <__tzcalc_limits+0x13e>
 800ef00:	f10e 0504 	add.w	r5, lr, #4
 800ef04:	fb95 f8fa 	sdiv	r8, r5, sl
 800ef08:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800ef0c:	eba5 0808 	sub.w	r8, r5, r8
 800ef10:	ebb3 0808 	subs.w	r8, r3, r8
 800ef14:	690b      	ldr	r3, [r1, #16]
 800ef16:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef1a:	bf48      	it	mi
 800ef1c:	f108 0807 	addmi.w	r8, r8, #7
 800ef20:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ef24:	4443      	add	r3, r8
 800ef26:	454b      	cmp	r3, r9
 800ef28:	da05      	bge.n	800ef36 <__tzcalc_limits+0x142>
 800ef2a:	4473      	add	r3, lr
 800ef2c:	e7ac      	b.n	800ee88 <__tzcalc_limits+0x94>
 800ef2e:	4635      	mov	r5, r6
 800ef30:	e7d4      	b.n	800eedc <__tzcalc_limits+0xe8>
 800ef32:	44ce      	add	lr, r9
 800ef34:	e7dd      	b.n	800eef2 <__tzcalc_limits+0xfe>
 800ef36:	3b07      	subs	r3, #7
 800ef38:	e7f5      	b.n	800ef26 <__tzcalc_limits+0x132>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	e7bf      	b.n	800eebe <__tzcalc_limits+0xca>
 800ef3e:	bf00      	nop
 800ef40:	00015180 	.word	0x00015180
 800ef44:	0803ac38 	.word	0x0803ac38

0800ef48 <__tz_lock>:
 800ef48:	4801      	ldr	r0, [pc, #4]	; (800ef50 <__tz_lock+0x8>)
 800ef4a:	f001 bb14 	b.w	8010576 <__retarget_lock_acquire>
 800ef4e:	bf00      	nop
 800ef50:	20003a3c 	.word	0x20003a3c

0800ef54 <__tz_unlock>:
 800ef54:	4801      	ldr	r0, [pc, #4]	; (800ef5c <__tz_unlock+0x8>)
 800ef56:	f001 bb10 	b.w	801057a <__retarget_lock_release>
 800ef5a:	bf00      	nop
 800ef5c:	20003a3c 	.word	0x20003a3c

0800ef60 <_tzset_unlocked>:
 800ef60:	4b01      	ldr	r3, [pc, #4]	; (800ef68 <_tzset_unlocked+0x8>)
 800ef62:	6818      	ldr	r0, [r3, #0]
 800ef64:	f000 b802 	b.w	800ef6c <_tzset_unlocked_r>
 800ef68:	200002c0 	.word	0x200002c0

0800ef6c <_tzset_unlocked_r>:
 800ef6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	b08d      	sub	sp, #52	; 0x34
 800ef72:	4607      	mov	r7, r0
 800ef74:	f001 faf2 	bl	801055c <__gettzinfo>
 800ef78:	49b0      	ldr	r1, [pc, #704]	; (800f23c <_tzset_unlocked_r+0x2d0>)
 800ef7a:	4eb1      	ldr	r6, [pc, #708]	; (800f240 <_tzset_unlocked_r+0x2d4>)
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f001 fae4 	bl	801054c <_getenv_r>
 800ef84:	4604      	mov	r4, r0
 800ef86:	b970      	cbnz	r0, 800efa6 <_tzset_unlocked_r+0x3a>
 800ef88:	4bae      	ldr	r3, [pc, #696]	; (800f244 <_tzset_unlocked_r+0x2d8>)
 800ef8a:	4aaf      	ldr	r2, [pc, #700]	; (800f248 <_tzset_unlocked_r+0x2dc>)
 800ef8c:	6018      	str	r0, [r3, #0]
 800ef8e:	4baf      	ldr	r3, [pc, #700]	; (800f24c <_tzset_unlocked_r+0x2e0>)
 800ef90:	6018      	str	r0, [r3, #0]
 800ef92:	4baf      	ldr	r3, [pc, #700]	; (800f250 <_tzset_unlocked_r+0x2e4>)
 800ef94:	6830      	ldr	r0, [r6, #0]
 800ef96:	e9c3 2200 	strd	r2, r2, [r3]
 800ef9a:	f7fd ff19 	bl	800cdd0 <free>
 800ef9e:	6034      	str	r4, [r6, #0]
 800efa0:	b00d      	add	sp, #52	; 0x34
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	6831      	ldr	r1, [r6, #0]
 800efa8:	2900      	cmp	r1, #0
 800efaa:	d162      	bne.n	800f072 <_tzset_unlocked_r+0x106>
 800efac:	6830      	ldr	r0, [r6, #0]
 800efae:	f7fd ff0f 	bl	800cdd0 <free>
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7f1 f91c 	bl	80001f0 <strlen>
 800efb8:	1c41      	adds	r1, r0, #1
 800efba:	4638      	mov	r0, r7
 800efbc:	f7fe fa04 	bl	800d3c8 <_malloc_r>
 800efc0:	6030      	str	r0, [r6, #0]
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d15a      	bne.n	800f07c <_tzset_unlocked_r+0x110>
 800efc6:	7823      	ldrb	r3, [r4, #0]
 800efc8:	4aa2      	ldr	r2, [pc, #648]	; (800f254 <_tzset_unlocked_r+0x2e8>)
 800efca:	49a3      	ldr	r1, [pc, #652]	; (800f258 <_tzset_unlocked_r+0x2ec>)
 800efcc:	2b3a      	cmp	r3, #58	; 0x3a
 800efce:	bf08      	it	eq
 800efd0:	3401      	addeq	r4, #1
 800efd2:	ae0a      	add	r6, sp, #40	; 0x28
 800efd4:	4633      	mov	r3, r6
 800efd6:	4620      	mov	r0, r4
 800efd8:	f7ff f85e 	bl	800e098 <siscanf>
 800efdc:	2800      	cmp	r0, #0
 800efde:	dddf      	ble.n	800efa0 <_tzset_unlocked_r+0x34>
 800efe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efe2:	18e7      	adds	r7, r4, r3
 800efe4:	5ce3      	ldrb	r3, [r4, r3]
 800efe6:	2b2d      	cmp	r3, #45	; 0x2d
 800efe8:	d14c      	bne.n	800f084 <_tzset_unlocked_r+0x118>
 800efea:	3701      	adds	r7, #1
 800efec:	f04f 38ff 	mov.w	r8, #4294967295
 800eff0:	f10d 0a20 	add.w	sl, sp, #32
 800eff4:	f10d 0b1e 	add.w	fp, sp, #30
 800eff8:	2400      	movs	r4, #0
 800effa:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800effe:	4997      	ldr	r1, [pc, #604]	; (800f25c <_tzset_unlocked_r+0x2f0>)
 800f000:	9603      	str	r6, [sp, #12]
 800f002:	f8cd b000 	str.w	fp, [sp]
 800f006:	4633      	mov	r3, r6
 800f008:	aa07      	add	r2, sp, #28
 800f00a:	4638      	mov	r0, r7
 800f00c:	f8ad 401e 	strh.w	r4, [sp, #30]
 800f010:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f014:	f7ff f840 	bl	800e098 <siscanf>
 800f018:	42a0      	cmp	r0, r4
 800f01a:	ddc1      	ble.n	800efa0 <_tzset_unlocked_r+0x34>
 800f01c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f024:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800f268 <_tzset_unlocked_r+0x2fc>
 800f028:	213c      	movs	r1, #60	; 0x3c
 800f02a:	fb01 3302 	mla	r3, r1, r2, r3
 800f02e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f032:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f036:	fb01 3302 	mla	r3, r1, r2, r3
 800f03a:	fb08 f303 	mul.w	r3, r8, r3
 800f03e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800f250 <_tzset_unlocked_r+0x2e4>
 800f042:	62ab      	str	r3, [r5, #40]	; 0x28
 800f044:	4b83      	ldr	r3, [pc, #524]	; (800f254 <_tzset_unlocked_r+0x2e8>)
 800f046:	f8c8 3000 	str.w	r3, [r8]
 800f04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f04c:	4982      	ldr	r1, [pc, #520]	; (800f258 <_tzset_unlocked_r+0x2ec>)
 800f04e:	441f      	add	r7, r3
 800f050:	464a      	mov	r2, r9
 800f052:	4633      	mov	r3, r6
 800f054:	4638      	mov	r0, r7
 800f056:	f7ff f81f 	bl	800e098 <siscanf>
 800f05a:	42a0      	cmp	r0, r4
 800f05c:	dc18      	bgt.n	800f090 <_tzset_unlocked_r+0x124>
 800f05e:	f8d8 3000 	ldr.w	r3, [r8]
 800f062:	f8c8 3004 	str.w	r3, [r8, #4]
 800f066:	4b77      	ldr	r3, [pc, #476]	; (800f244 <_tzset_unlocked_r+0x2d8>)
 800f068:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	4b77      	ldr	r3, [pc, #476]	; (800f24c <_tzset_unlocked_r+0x2e0>)
 800f06e:	601c      	str	r4, [r3, #0]
 800f070:	e796      	b.n	800efa0 <_tzset_unlocked_r+0x34>
 800f072:	f7f1 f915 	bl	80002a0 <strcmp>
 800f076:	2800      	cmp	r0, #0
 800f078:	d198      	bne.n	800efac <_tzset_unlocked_r+0x40>
 800f07a:	e791      	b.n	800efa0 <_tzset_unlocked_r+0x34>
 800f07c:	4621      	mov	r1, r4
 800f07e:	f7ff f889 	bl	800e194 <strcpy>
 800f082:	e7a0      	b.n	800efc6 <_tzset_unlocked_r+0x5a>
 800f084:	2b2b      	cmp	r3, #43	; 0x2b
 800f086:	bf08      	it	eq
 800f088:	3701      	addeq	r7, #1
 800f08a:	f04f 0801 	mov.w	r8, #1
 800f08e:	e7af      	b.n	800eff0 <_tzset_unlocked_r+0x84>
 800f090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f092:	f8c8 9004 	str.w	r9, [r8, #4]
 800f096:	18fc      	adds	r4, r7, r3
 800f098:	5cfb      	ldrb	r3, [r7, r3]
 800f09a:	2b2d      	cmp	r3, #45	; 0x2d
 800f09c:	f040 808b 	bne.w	800f1b6 <_tzset_unlocked_r+0x24a>
 800f0a0:	3401      	adds	r4, #1
 800f0a2:	f04f 37ff 	mov.w	r7, #4294967295
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f0ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f0b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f0b4:	930a      	str	r3, [sp, #40]	; 0x28
 800f0b6:	e9cd a602 	strd	sl, r6, [sp, #8]
 800f0ba:	e9cd b600 	strd	fp, r6, [sp]
 800f0be:	4967      	ldr	r1, [pc, #412]	; (800f25c <_tzset_unlocked_r+0x2f0>)
 800f0c0:	4633      	mov	r3, r6
 800f0c2:	aa07      	add	r2, sp, #28
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7fe ffe7 	bl	800e098 <siscanf>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	dc78      	bgt.n	800f1c0 <_tzset_unlocked_r+0x254>
 800f0ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f0d0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800f0d4:	652b      	str	r3, [r5, #80]	; 0x50
 800f0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0d8:	462f      	mov	r7, r5
 800f0da:	441c      	add	r4, r3
 800f0dc:	f04f 0900 	mov.w	r9, #0
 800f0e0:	7823      	ldrb	r3, [r4, #0]
 800f0e2:	2b2c      	cmp	r3, #44	; 0x2c
 800f0e4:	bf08      	it	eq
 800f0e6:	3401      	addeq	r4, #1
 800f0e8:	f894 8000 	ldrb.w	r8, [r4]
 800f0ec:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800f0f0:	d178      	bne.n	800f1e4 <_tzset_unlocked_r+0x278>
 800f0f2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800f0f6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f0fa:	ab09      	add	r3, sp, #36	; 0x24
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	4958      	ldr	r1, [pc, #352]	; (800f260 <_tzset_unlocked_r+0x2f4>)
 800f100:	9603      	str	r6, [sp, #12]
 800f102:	4633      	mov	r3, r6
 800f104:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800f108:	4620      	mov	r0, r4
 800f10a:	f7fe ffc5 	bl	800e098 <siscanf>
 800f10e:	2803      	cmp	r0, #3
 800f110:	f47f af46 	bne.w	800efa0 <_tzset_unlocked_r+0x34>
 800f114:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800f118:	1e4b      	subs	r3, r1, #1
 800f11a:	2b0b      	cmp	r3, #11
 800f11c:	f63f af40 	bhi.w	800efa0 <_tzset_unlocked_r+0x34>
 800f120:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f124:	1e53      	subs	r3, r2, #1
 800f126:	2b04      	cmp	r3, #4
 800f128:	f63f af3a 	bhi.w	800efa0 <_tzset_unlocked_r+0x34>
 800f12c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f130:	2b06      	cmp	r3, #6
 800f132:	f63f af35 	bhi.w	800efa0 <_tzset_unlocked_r+0x34>
 800f136:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800f13a:	f887 8008 	strb.w	r8, [r7, #8]
 800f13e:	617b      	str	r3, [r7, #20]
 800f140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f142:	eb04 0803 	add.w	r8, r4, r3
 800f146:	2302      	movs	r3, #2
 800f148:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f14c:	2300      	movs	r3, #0
 800f14e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f152:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f156:	930a      	str	r3, [sp, #40]	; 0x28
 800f158:	f898 3000 	ldrb.w	r3, [r8]
 800f15c:	2b2f      	cmp	r3, #47	; 0x2f
 800f15e:	d109      	bne.n	800f174 <_tzset_unlocked_r+0x208>
 800f160:	e9cd a602 	strd	sl, r6, [sp, #8]
 800f164:	e9cd b600 	strd	fp, r6, [sp]
 800f168:	493e      	ldr	r1, [pc, #248]	; (800f264 <_tzset_unlocked_r+0x2f8>)
 800f16a:	4633      	mov	r3, r6
 800f16c:	aa07      	add	r2, sp, #28
 800f16e:	4640      	mov	r0, r8
 800f170:	f7fe ff92 	bl	800e098 <siscanf>
 800f174:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f178:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f17c:	213c      	movs	r1, #60	; 0x3c
 800f17e:	fb01 3302 	mla	r3, r1, r2, r3
 800f182:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f186:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f18a:	fb01 3302 	mla	r3, r1, r2, r3
 800f18e:	61bb      	str	r3, [r7, #24]
 800f190:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f192:	3728      	adds	r7, #40	; 0x28
 800f194:	4444      	add	r4, r8
 800f196:	f1b9 0f00 	cmp.w	r9, #0
 800f19a:	d020      	beq.n	800f1de <_tzset_unlocked_r+0x272>
 800f19c:	6868      	ldr	r0, [r5, #4]
 800f19e:	f7ff fe29 	bl	800edf4 <__tzcalc_limits>
 800f1a2:	4b28      	ldr	r3, [pc, #160]	; (800f244 <_tzset_unlocked_r+0x2d8>)
 800f1a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	4a27      	ldr	r2, [pc, #156]	; (800f24c <_tzset_unlocked_r+0x2e0>)
 800f1ae:	bf18      	it	ne
 800f1b0:	2301      	movne	r3, #1
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	e6f4      	b.n	800efa0 <_tzset_unlocked_r+0x34>
 800f1b6:	2b2b      	cmp	r3, #43	; 0x2b
 800f1b8:	bf08      	it	eq
 800f1ba:	3401      	addeq	r4, #1
 800f1bc:	2701      	movs	r7, #1
 800f1be:	e772      	b.n	800f0a6 <_tzset_unlocked_r+0x13a>
 800f1c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f1c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f1c8:	213c      	movs	r1, #60	; 0x3c
 800f1ca:	fb01 3302 	mla	r3, r1, r2, r3
 800f1ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f1d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f1d6:	fb01 3302 	mla	r3, r1, r2, r3
 800f1da:	437b      	muls	r3, r7
 800f1dc:	e77a      	b.n	800f0d4 <_tzset_unlocked_r+0x168>
 800f1de:	f04f 0901 	mov.w	r9, #1
 800f1e2:	e77d      	b.n	800f0e0 <_tzset_unlocked_r+0x174>
 800f1e4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800f1e8:	bf06      	itte	eq
 800f1ea:	3401      	addeq	r4, #1
 800f1ec:	4643      	moveq	r3, r8
 800f1ee:	2344      	movne	r3, #68	; 0x44
 800f1f0:	220a      	movs	r2, #10
 800f1f2:	a90b      	add	r1, sp, #44	; 0x2c
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	9305      	str	r3, [sp, #20]
 800f1f8:	f7ff fdf2 	bl	800ede0 <strtoul>
 800f1fc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f200:	9b05      	ldr	r3, [sp, #20]
 800f202:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800f206:	45a0      	cmp	r8, r4
 800f208:	d114      	bne.n	800f234 <_tzset_unlocked_r+0x2c8>
 800f20a:	234d      	movs	r3, #77	; 0x4d
 800f20c:	f1b9 0f00 	cmp.w	r9, #0
 800f210:	d107      	bne.n	800f222 <_tzset_unlocked_r+0x2b6>
 800f212:	722b      	strb	r3, [r5, #8]
 800f214:	2103      	movs	r1, #3
 800f216:	2302      	movs	r3, #2
 800f218:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800f21c:	f8c5 9014 	str.w	r9, [r5, #20]
 800f220:	e791      	b.n	800f146 <_tzset_unlocked_r+0x1da>
 800f222:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800f226:	220b      	movs	r2, #11
 800f228:	2301      	movs	r3, #1
 800f22a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800f22e:	2300      	movs	r3, #0
 800f230:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f232:	e788      	b.n	800f146 <_tzset_unlocked_r+0x1da>
 800f234:	b280      	uxth	r0, r0
 800f236:	723b      	strb	r3, [r7, #8]
 800f238:	6178      	str	r0, [r7, #20]
 800f23a:	e784      	b.n	800f146 <_tzset_unlocked_r+0x1da>
 800f23c:	0803aa20 	.word	0x0803aa20
 800f240:	20003a2c 	.word	0x20003a2c
 800f244:	20003a34 	.word	0x20003a34
 800f248:	0803aa23 	.word	0x0803aa23
 800f24c:	20003a30 	.word	0x20003a30
 800f250:	20000324 	.word	0x20000324
 800f254:	20003a1f 	.word	0x20003a1f
 800f258:	0803aa27 	.word	0x0803aa27
 800f25c:	0803aa4a 	.word	0x0803aa4a
 800f260:	0803aa36 	.word	0x0803aa36
 800f264:	0803aa49 	.word	0x0803aa49
 800f268:	20003a14 	.word	0x20003a14

0800f26c <__swbuf_r>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	460e      	mov	r6, r1
 800f270:	4614      	mov	r4, r2
 800f272:	4605      	mov	r5, r0
 800f274:	b118      	cbz	r0, 800f27e <__swbuf_r+0x12>
 800f276:	6983      	ldr	r3, [r0, #24]
 800f278:	b90b      	cbnz	r3, 800f27e <__swbuf_r+0x12>
 800f27a:	f001 f88d 	bl	8010398 <__sinit>
 800f27e:	4b21      	ldr	r3, [pc, #132]	; (800f304 <__swbuf_r+0x98>)
 800f280:	429c      	cmp	r4, r3
 800f282:	d12b      	bne.n	800f2dc <__swbuf_r+0x70>
 800f284:	686c      	ldr	r4, [r5, #4]
 800f286:	69a3      	ldr	r3, [r4, #24]
 800f288:	60a3      	str	r3, [r4, #8]
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	071a      	lsls	r2, r3, #28
 800f28e:	d52f      	bpl.n	800f2f0 <__swbuf_r+0x84>
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	b36b      	cbz	r3, 800f2f0 <__swbuf_r+0x84>
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	6820      	ldr	r0, [r4, #0]
 800f298:	1ac0      	subs	r0, r0, r3
 800f29a:	6963      	ldr	r3, [r4, #20]
 800f29c:	b2f6      	uxtb	r6, r6
 800f29e:	4283      	cmp	r3, r0
 800f2a0:	4637      	mov	r7, r6
 800f2a2:	dc04      	bgt.n	800f2ae <__swbuf_r+0x42>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f000 ffe2 	bl	8010270 <_fflush_r>
 800f2ac:	bb30      	cbnz	r0, 800f2fc <__swbuf_r+0x90>
 800f2ae:	68a3      	ldr	r3, [r4, #8]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	60a3      	str	r3, [r4, #8]
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	6022      	str	r2, [r4, #0]
 800f2ba:	701e      	strb	r6, [r3, #0]
 800f2bc:	6963      	ldr	r3, [r4, #20]
 800f2be:	3001      	adds	r0, #1
 800f2c0:	4283      	cmp	r3, r0
 800f2c2:	d004      	beq.n	800f2ce <__swbuf_r+0x62>
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	07db      	lsls	r3, r3, #31
 800f2c8:	d506      	bpl.n	800f2d8 <__swbuf_r+0x6c>
 800f2ca:	2e0a      	cmp	r6, #10
 800f2cc:	d104      	bne.n	800f2d8 <__swbuf_r+0x6c>
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f000 ffcd 	bl	8010270 <_fflush_r>
 800f2d6:	b988      	cbnz	r0, 800f2fc <__swbuf_r+0x90>
 800f2d8:	4638      	mov	r0, r7
 800f2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	; (800f308 <__swbuf_r+0x9c>)
 800f2de:	429c      	cmp	r4, r3
 800f2e0:	d101      	bne.n	800f2e6 <__swbuf_r+0x7a>
 800f2e2:	68ac      	ldr	r4, [r5, #8]
 800f2e4:	e7cf      	b.n	800f286 <__swbuf_r+0x1a>
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <__swbuf_r+0xa0>)
 800f2e8:	429c      	cmp	r4, r3
 800f2ea:	bf08      	it	eq
 800f2ec:	68ec      	ldreq	r4, [r5, #12]
 800f2ee:	e7ca      	b.n	800f286 <__swbuf_r+0x1a>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f000 f81e 	bl	800f334 <__swsetup_r>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d0cb      	beq.n	800f294 <__swbuf_r+0x28>
 800f2fc:	f04f 37ff 	mov.w	r7, #4294967295
 800f300:	e7ea      	b.n	800f2d8 <__swbuf_r+0x6c>
 800f302:	bf00      	nop
 800f304:	0803abf8 	.word	0x0803abf8
 800f308:	0803ac18 	.word	0x0803ac18
 800f30c:	0803abd8 	.word	0x0803abd8

0800f310 <_write_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d07      	ldr	r5, [pc, #28]	; (800f330 <_write_r+0x20>)
 800f314:	4604      	mov	r4, r0
 800f316:	4608      	mov	r0, r1
 800f318:	4611      	mov	r1, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	602a      	str	r2, [r5, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	f005 f882 	bl	8014428 <_write>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_write_r+0x1e>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_write_r+0x1e>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20003a40 	.word	0x20003a40

0800f334 <__swsetup_r>:
 800f334:	4b32      	ldr	r3, [pc, #200]	; (800f400 <__swsetup_r+0xcc>)
 800f336:	b570      	push	{r4, r5, r6, lr}
 800f338:	681d      	ldr	r5, [r3, #0]
 800f33a:	4606      	mov	r6, r0
 800f33c:	460c      	mov	r4, r1
 800f33e:	b125      	cbz	r5, 800f34a <__swsetup_r+0x16>
 800f340:	69ab      	ldr	r3, [r5, #24]
 800f342:	b913      	cbnz	r3, 800f34a <__swsetup_r+0x16>
 800f344:	4628      	mov	r0, r5
 800f346:	f001 f827 	bl	8010398 <__sinit>
 800f34a:	4b2e      	ldr	r3, [pc, #184]	; (800f404 <__swsetup_r+0xd0>)
 800f34c:	429c      	cmp	r4, r3
 800f34e:	d10f      	bne.n	800f370 <__swsetup_r+0x3c>
 800f350:	686c      	ldr	r4, [r5, #4]
 800f352:	89a3      	ldrh	r3, [r4, #12]
 800f354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f358:	0719      	lsls	r1, r3, #28
 800f35a:	d42c      	bmi.n	800f3b6 <__swsetup_r+0x82>
 800f35c:	06dd      	lsls	r5, r3, #27
 800f35e:	d411      	bmi.n	800f384 <__swsetup_r+0x50>
 800f360:	2309      	movs	r3, #9
 800f362:	6033      	str	r3, [r6, #0]
 800f364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	f04f 30ff 	mov.w	r0, #4294967295
 800f36e:	e03e      	b.n	800f3ee <__swsetup_r+0xba>
 800f370:	4b25      	ldr	r3, [pc, #148]	; (800f408 <__swsetup_r+0xd4>)
 800f372:	429c      	cmp	r4, r3
 800f374:	d101      	bne.n	800f37a <__swsetup_r+0x46>
 800f376:	68ac      	ldr	r4, [r5, #8]
 800f378:	e7eb      	b.n	800f352 <__swsetup_r+0x1e>
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <__swsetup_r+0xd8>)
 800f37c:	429c      	cmp	r4, r3
 800f37e:	bf08      	it	eq
 800f380:	68ec      	ldreq	r4, [r5, #12]
 800f382:	e7e6      	b.n	800f352 <__swsetup_r+0x1e>
 800f384:	0758      	lsls	r0, r3, #29
 800f386:	d512      	bpl.n	800f3ae <__swsetup_r+0x7a>
 800f388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f38a:	b141      	cbz	r1, 800f39e <__swsetup_r+0x6a>
 800f38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f390:	4299      	cmp	r1, r3
 800f392:	d002      	beq.n	800f39a <__swsetup_r+0x66>
 800f394:	4630      	mov	r0, r6
 800f396:	f7fd ffab 	bl	800d2f0 <_free_r>
 800f39a:	2300      	movs	r3, #0
 800f39c:	6363      	str	r3, [r4, #52]	; 0x34
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3a4:	81a3      	strh	r3, [r4, #12]
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	6063      	str	r3, [r4, #4]
 800f3aa:	6923      	ldr	r3, [r4, #16]
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	f043 0308 	orr.w	r3, r3, #8
 800f3b4:	81a3      	strh	r3, [r4, #12]
 800f3b6:	6923      	ldr	r3, [r4, #16]
 800f3b8:	b94b      	cbnz	r3, 800f3ce <__swsetup_r+0x9a>
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3c4:	d003      	beq.n	800f3ce <__swsetup_r+0x9a>
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f001 f911 	bl	80105f0 <__smakebuf_r>
 800f3ce:	89a0      	ldrh	r0, [r4, #12]
 800f3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3d4:	f010 0301 	ands.w	r3, r0, #1
 800f3d8:	d00a      	beq.n	800f3f0 <__swsetup_r+0xbc>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	60a3      	str	r3, [r4, #8]
 800f3de:	6963      	ldr	r3, [r4, #20]
 800f3e0:	425b      	negs	r3, r3
 800f3e2:	61a3      	str	r3, [r4, #24]
 800f3e4:	6923      	ldr	r3, [r4, #16]
 800f3e6:	b943      	cbnz	r3, 800f3fa <__swsetup_r+0xc6>
 800f3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3ec:	d1ba      	bne.n	800f364 <__swsetup_r+0x30>
 800f3ee:	bd70      	pop	{r4, r5, r6, pc}
 800f3f0:	0781      	lsls	r1, r0, #30
 800f3f2:	bf58      	it	pl
 800f3f4:	6963      	ldrpl	r3, [r4, #20]
 800f3f6:	60a3      	str	r3, [r4, #8]
 800f3f8:	e7f4      	b.n	800f3e4 <__swsetup_r+0xb0>
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	e7f7      	b.n	800f3ee <__swsetup_r+0xba>
 800f3fe:	bf00      	nop
 800f400:	200002c0 	.word	0x200002c0
 800f404:	0803abf8 	.word	0x0803abf8
 800f408:	0803ac18 	.word	0x0803ac18
 800f40c:	0803abd8 	.word	0x0803abd8

0800f410 <abort>:
 800f410:	b508      	push	{r3, lr}
 800f412:	2006      	movs	r0, #6
 800f414:	f002 fa0c 	bl	8011830 <raise>
 800f418:	2001      	movs	r0, #1
 800f41a:	f005 f80d 	bl	8014438 <_exit>

0800f41e <abs>:
 800f41e:	2800      	cmp	r0, #0
 800f420:	bfb8      	it	lt
 800f422:	4240      	neglt	r0, r0
 800f424:	4770      	bx	lr
	...

0800f428 <_close_r>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d06      	ldr	r5, [pc, #24]	; (800f444 <_close_r+0x1c>)
 800f42c:	2300      	movs	r3, #0
 800f42e:	4604      	mov	r4, r0
 800f430:	4608      	mov	r0, r1
 800f432:	602b      	str	r3, [r5, #0]
 800f434:	f004 ffb2 	bl	801439c <_close>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_close_r+0x1a>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_close_r+0x1a>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	20003a40 	.word	0x20003a40

0800f448 <div>:
 800f448:	2900      	cmp	r1, #0
 800f44a:	b510      	push	{r4, lr}
 800f44c:	fb91 f4f2 	sdiv	r4, r1, r2
 800f450:	fb02 1314 	mls	r3, r2, r4, r1
 800f454:	db06      	blt.n	800f464 <div+0x1c>
 800f456:	2b00      	cmp	r3, #0
 800f458:	da01      	bge.n	800f45e <div+0x16>
 800f45a:	3401      	adds	r4, #1
 800f45c:	1a9b      	subs	r3, r3, r2
 800f45e:	e9c0 4300 	strd	r4, r3, [r0]
 800f462:	bd10      	pop	{r4, pc}
 800f464:	2b00      	cmp	r3, #0
 800f466:	bfc4      	itt	gt
 800f468:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800f46c:	189b      	addgt	r3, r3, r2
 800f46e:	e7f6      	b.n	800f45e <div+0x16>

0800f470 <quorem>:
 800f470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	6903      	ldr	r3, [r0, #16]
 800f476:	690c      	ldr	r4, [r1, #16]
 800f478:	42a3      	cmp	r3, r4
 800f47a:	4607      	mov	r7, r0
 800f47c:	f2c0 8081 	blt.w	800f582 <quorem+0x112>
 800f480:	3c01      	subs	r4, #1
 800f482:	f101 0814 	add.w	r8, r1, #20
 800f486:	f100 0514 	add.w	r5, r0, #20
 800f48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f498:	3301      	adds	r3, #1
 800f49a:	429a      	cmp	r2, r3
 800f49c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4a8:	d331      	bcc.n	800f50e <quorem+0x9e>
 800f4aa:	f04f 0e00 	mov.w	lr, #0
 800f4ae:	4640      	mov	r0, r8
 800f4b0:	46ac      	mov	ip, r5
 800f4b2:	46f2      	mov	sl, lr
 800f4b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f4b8:	b293      	uxth	r3, r2
 800f4ba:	fb06 e303 	mla	r3, r6, r3, lr
 800f4be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800f4c8:	f8dc a000 	ldr.w	sl, [ip]
 800f4cc:	0c12      	lsrs	r2, r2, #16
 800f4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800f4d2:	fb06 e202 	mla	r2, r6, r2, lr
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	9b00      	ldr	r3, [sp, #0]
 800f4da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f4e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f4ec:	4581      	cmp	r9, r0
 800f4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4f2:	f84c 3b04 	str.w	r3, [ip], #4
 800f4f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f4fa:	d2db      	bcs.n	800f4b4 <quorem+0x44>
 800f4fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f500:	b92b      	cbnz	r3, 800f50e <quorem+0x9e>
 800f502:	9b01      	ldr	r3, [sp, #4]
 800f504:	3b04      	subs	r3, #4
 800f506:	429d      	cmp	r5, r3
 800f508:	461a      	mov	r2, r3
 800f50a:	d32e      	bcc.n	800f56a <quorem+0xfa>
 800f50c:	613c      	str	r4, [r7, #16]
 800f50e:	4638      	mov	r0, r7
 800f510:	f001 fb56 	bl	8010bc0 <__mcmp>
 800f514:	2800      	cmp	r0, #0
 800f516:	db24      	blt.n	800f562 <quorem+0xf2>
 800f518:	3601      	adds	r6, #1
 800f51a:	4628      	mov	r0, r5
 800f51c:	f04f 0c00 	mov.w	ip, #0
 800f520:	f858 2b04 	ldr.w	r2, [r8], #4
 800f524:	f8d0 e000 	ldr.w	lr, [r0]
 800f528:	b293      	uxth	r3, r2
 800f52a:	ebac 0303 	sub.w	r3, ip, r3
 800f52e:	0c12      	lsrs	r2, r2, #16
 800f530:	fa13 f38e 	uxtah	r3, r3, lr
 800f534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f542:	45c1      	cmp	r9, r8
 800f544:	f840 3b04 	str.w	r3, [r0], #4
 800f548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f54c:	d2e8      	bcs.n	800f520 <quorem+0xb0>
 800f54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f556:	b922      	cbnz	r2, 800f562 <quorem+0xf2>
 800f558:	3b04      	subs	r3, #4
 800f55a:	429d      	cmp	r5, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	d30a      	bcc.n	800f576 <quorem+0x106>
 800f560:	613c      	str	r4, [r7, #16]
 800f562:	4630      	mov	r0, r6
 800f564:	b003      	add	sp, #12
 800f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56a:	6812      	ldr	r2, [r2, #0]
 800f56c:	3b04      	subs	r3, #4
 800f56e:	2a00      	cmp	r2, #0
 800f570:	d1cc      	bne.n	800f50c <quorem+0x9c>
 800f572:	3c01      	subs	r4, #1
 800f574:	e7c7      	b.n	800f506 <quorem+0x96>
 800f576:	6812      	ldr	r2, [r2, #0]
 800f578:	3b04      	subs	r3, #4
 800f57a:	2a00      	cmp	r2, #0
 800f57c:	d1f0      	bne.n	800f560 <quorem+0xf0>
 800f57e:	3c01      	subs	r4, #1
 800f580:	e7eb      	b.n	800f55a <quorem+0xea>
 800f582:	2000      	movs	r0, #0
 800f584:	e7ee      	b.n	800f564 <quorem+0xf4>
	...

0800f588 <_dtoa_r>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	ed2d 8b04 	vpush	{d8-d9}
 800f590:	ec57 6b10 	vmov	r6, r7, d0
 800f594:	b093      	sub	sp, #76	; 0x4c
 800f596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f59c:	9106      	str	r1, [sp, #24]
 800f59e:	ee10 aa10 	vmov	sl, s0
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800f5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800f5a8:	46bb      	mov	fp, r7
 800f5aa:	b975      	cbnz	r5, 800f5ca <_dtoa_r+0x42>
 800f5ac:	2010      	movs	r0, #16
 800f5ae:	f7fd fc07 	bl	800cdc0 <malloc>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	6260      	str	r0, [r4, #36]	; 0x24
 800f5b6:	b920      	cbnz	r0, 800f5c2 <_dtoa_r+0x3a>
 800f5b8:	4ba7      	ldr	r3, [pc, #668]	; (800f858 <_dtoa_r+0x2d0>)
 800f5ba:	21ea      	movs	r1, #234	; 0xea
 800f5bc:	48a7      	ldr	r0, [pc, #668]	; (800f85c <_dtoa_r+0x2d4>)
 800f5be:	f7fd fbab 	bl	800cd18 <__assert_func>
 800f5c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5c6:	6005      	str	r5, [r0, #0]
 800f5c8:	60c5      	str	r5, [r0, #12]
 800f5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5cc:	6819      	ldr	r1, [r3, #0]
 800f5ce:	b151      	cbz	r1, 800f5e6 <_dtoa_r+0x5e>
 800f5d0:	685a      	ldr	r2, [r3, #4]
 800f5d2:	604a      	str	r2, [r1, #4]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	4093      	lsls	r3, r2
 800f5d8:	608b      	str	r3, [r1, #8]
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f001 f8ae 	bl	801073c <_Bfree>
 800f5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	1e3b      	subs	r3, r7, #0
 800f5e8:	bfaa      	itet	ge
 800f5ea:	2300      	movge	r3, #0
 800f5ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f5f0:	f8c8 3000 	strge.w	r3, [r8]
 800f5f4:	4b9a      	ldr	r3, [pc, #616]	; (800f860 <_dtoa_r+0x2d8>)
 800f5f6:	bfbc      	itt	lt
 800f5f8:	2201      	movlt	r2, #1
 800f5fa:	f8c8 2000 	strlt.w	r2, [r8]
 800f5fe:	ea33 030b 	bics.w	r3, r3, fp
 800f602:	d11b      	bne.n	800f63c <_dtoa_r+0xb4>
 800f604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f606:	f242 730f 	movw	r3, #9999	; 0x270f
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f610:	4333      	orrs	r3, r6
 800f612:	f000 8592 	beq.w	801013a <_dtoa_r+0xbb2>
 800f616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f618:	b963      	cbnz	r3, 800f634 <_dtoa_r+0xac>
 800f61a:	4b92      	ldr	r3, [pc, #584]	; (800f864 <_dtoa_r+0x2dc>)
 800f61c:	e022      	b.n	800f664 <_dtoa_r+0xdc>
 800f61e:	4b92      	ldr	r3, [pc, #584]	; (800f868 <_dtoa_r+0x2e0>)
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	3308      	adds	r3, #8
 800f624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f626:	6013      	str	r3, [r2, #0]
 800f628:	9801      	ldr	r0, [sp, #4]
 800f62a:	b013      	add	sp, #76	; 0x4c
 800f62c:	ecbd 8b04 	vpop	{d8-d9}
 800f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f634:	4b8b      	ldr	r3, [pc, #556]	; (800f864 <_dtoa_r+0x2dc>)
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	3303      	adds	r3, #3
 800f63a:	e7f3      	b.n	800f624 <_dtoa_r+0x9c>
 800f63c:	2200      	movs	r2, #0
 800f63e:	2300      	movs	r3, #0
 800f640:	4650      	mov	r0, sl
 800f642:	4659      	mov	r1, fp
 800f644:	f7f1 fa5a 	bl	8000afc <__aeabi_dcmpeq>
 800f648:	ec4b ab19 	vmov	d9, sl, fp
 800f64c:	4680      	mov	r8, r0
 800f64e:	b158      	cbz	r0, 800f668 <_dtoa_r+0xe0>
 800f650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f652:	2301      	movs	r3, #1
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f000 856b 	beq.w	8010134 <_dtoa_r+0xbac>
 800f65e:	4883      	ldr	r0, [pc, #524]	; (800f86c <_dtoa_r+0x2e4>)
 800f660:	6018      	str	r0, [r3, #0]
 800f662:	1e43      	subs	r3, r0, #1
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	e7df      	b.n	800f628 <_dtoa_r+0xa0>
 800f668:	ec4b ab10 	vmov	d0, sl, fp
 800f66c:	aa10      	add	r2, sp, #64	; 0x40
 800f66e:	a911      	add	r1, sp, #68	; 0x44
 800f670:	4620      	mov	r0, r4
 800f672:	f001 fb4b 	bl	8010d0c <__d2b>
 800f676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f67a:	ee08 0a10 	vmov	s16, r0
 800f67e:	2d00      	cmp	r5, #0
 800f680:	f000 8084 	beq.w	800f78c <_dtoa_r+0x204>
 800f684:	ee19 3a90 	vmov	r3, s19
 800f688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f68c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f690:	4656      	mov	r6, sl
 800f692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f69a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f69e:	4b74      	ldr	r3, [pc, #464]	; (800f870 <_dtoa_r+0x2e8>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	f7f0 fe09 	bl	80002bc <__aeabi_dsub>
 800f6aa:	a365      	add	r3, pc, #404	; (adr r3, 800f840 <_dtoa_r+0x2b8>)
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	f7f0 ffbc 	bl	800062c <__aeabi_dmul>
 800f6b4:	a364      	add	r3, pc, #400	; (adr r3, 800f848 <_dtoa_r+0x2c0>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	f7f0 fe01 	bl	80002c0 <__adddf3>
 800f6be:	4606      	mov	r6, r0
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	f7f0 ff48 	bl	8000558 <__aeabi_i2d>
 800f6c8:	a361      	add	r3, pc, #388	; (adr r3, 800f850 <_dtoa_r+0x2c8>)
 800f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ce:	f7f0 ffad 	bl	800062c <__aeabi_dmul>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	4639      	mov	r1, r7
 800f6da:	f7f0 fdf1 	bl	80002c0 <__adddf3>
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460f      	mov	r7, r1
 800f6e2:	f7f1 fa53 	bl	8000b8c <__aeabi_d2iz>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	9000      	str	r0, [sp, #0]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	f7f1 fa0e 	bl	8000b10 <__aeabi_dcmplt>
 800f6f4:	b150      	cbz	r0, 800f70c <_dtoa_r+0x184>
 800f6f6:	9800      	ldr	r0, [sp, #0]
 800f6f8:	f7f0 ff2e 	bl	8000558 <__aeabi_i2d>
 800f6fc:	4632      	mov	r2, r6
 800f6fe:	463b      	mov	r3, r7
 800f700:	f7f1 f9fc 	bl	8000afc <__aeabi_dcmpeq>
 800f704:	b910      	cbnz	r0, 800f70c <_dtoa_r+0x184>
 800f706:	9b00      	ldr	r3, [sp, #0]
 800f708:	3b01      	subs	r3, #1
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	9b00      	ldr	r3, [sp, #0]
 800f70e:	2b16      	cmp	r3, #22
 800f710:	d85a      	bhi.n	800f7c8 <_dtoa_r+0x240>
 800f712:	9a00      	ldr	r2, [sp, #0]
 800f714:	4b57      	ldr	r3, [pc, #348]	; (800f874 <_dtoa_r+0x2ec>)
 800f716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71e:	ec51 0b19 	vmov	r0, r1, d9
 800f722:	f7f1 f9f5 	bl	8000b10 <__aeabi_dcmplt>
 800f726:	2800      	cmp	r0, #0
 800f728:	d050      	beq.n	800f7cc <_dtoa_r+0x244>
 800f72a:	9b00      	ldr	r3, [sp, #0]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	2300      	movs	r3, #0
 800f732:	930b      	str	r3, [sp, #44]	; 0x2c
 800f734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f736:	1b5d      	subs	r5, r3, r5
 800f738:	1e6b      	subs	r3, r5, #1
 800f73a:	9305      	str	r3, [sp, #20]
 800f73c:	bf45      	ittet	mi
 800f73e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f742:	9304      	strmi	r3, [sp, #16]
 800f744:	2300      	movpl	r3, #0
 800f746:	2300      	movmi	r3, #0
 800f748:	bf4c      	ite	mi
 800f74a:	9305      	strmi	r3, [sp, #20]
 800f74c:	9304      	strpl	r3, [sp, #16]
 800f74e:	9b00      	ldr	r3, [sp, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	db3d      	blt.n	800f7d0 <_dtoa_r+0x248>
 800f754:	9b05      	ldr	r3, [sp, #20]
 800f756:	9a00      	ldr	r2, [sp, #0]
 800f758:	920a      	str	r2, [sp, #40]	; 0x28
 800f75a:	4413      	add	r3, r2
 800f75c:	9305      	str	r3, [sp, #20]
 800f75e:	2300      	movs	r3, #0
 800f760:	9307      	str	r3, [sp, #28]
 800f762:	9b06      	ldr	r3, [sp, #24]
 800f764:	2b09      	cmp	r3, #9
 800f766:	f200 8089 	bhi.w	800f87c <_dtoa_r+0x2f4>
 800f76a:	2b05      	cmp	r3, #5
 800f76c:	bfc4      	itt	gt
 800f76e:	3b04      	subgt	r3, #4
 800f770:	9306      	strgt	r3, [sp, #24]
 800f772:	9b06      	ldr	r3, [sp, #24]
 800f774:	f1a3 0302 	sub.w	r3, r3, #2
 800f778:	bfcc      	ite	gt
 800f77a:	2500      	movgt	r5, #0
 800f77c:	2501      	movle	r5, #1
 800f77e:	2b03      	cmp	r3, #3
 800f780:	f200 8087 	bhi.w	800f892 <_dtoa_r+0x30a>
 800f784:	e8df f003 	tbb	[pc, r3]
 800f788:	59383a2d 	.word	0x59383a2d
 800f78c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f790:	441d      	add	r5, r3
 800f792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f796:	2b20      	cmp	r3, #32
 800f798:	bfc1      	itttt	gt
 800f79a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f79e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f7a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f7a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f7aa:	bfda      	itte	le
 800f7ac:	f1c3 0320 	rsble	r3, r3, #32
 800f7b0:	fa06 f003 	lslle.w	r0, r6, r3
 800f7b4:	4318      	orrgt	r0, r3
 800f7b6:	f7f0 febf 	bl	8000538 <__aeabi_ui2d>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4606      	mov	r6, r0
 800f7be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f7c2:	3d01      	subs	r5, #1
 800f7c4:	930e      	str	r3, [sp, #56]	; 0x38
 800f7c6:	e76a      	b.n	800f69e <_dtoa_r+0x116>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e7b2      	b.n	800f732 <_dtoa_r+0x1aa>
 800f7cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f7ce:	e7b1      	b.n	800f734 <_dtoa_r+0x1ac>
 800f7d0:	9b04      	ldr	r3, [sp, #16]
 800f7d2:	9a00      	ldr	r2, [sp, #0]
 800f7d4:	1a9b      	subs	r3, r3, r2
 800f7d6:	9304      	str	r3, [sp, #16]
 800f7d8:	4253      	negs	r3, r2
 800f7da:	9307      	str	r3, [sp, #28]
 800f7dc:	2300      	movs	r3, #0
 800f7de:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e0:	e7bf      	b.n	800f762 <_dtoa_r+0x1da>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	9308      	str	r3, [sp, #32]
 800f7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	dc55      	bgt.n	800f898 <_dtoa_r+0x310>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f6:	e00c      	b.n	800f812 <_dtoa_r+0x28a>
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e7f3      	b.n	800f7e4 <_dtoa_r+0x25c>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f800:	9308      	str	r3, [sp, #32]
 800f802:	9b00      	ldr	r3, [sp, #0]
 800f804:	4413      	add	r3, r2
 800f806:	9302      	str	r3, [sp, #8]
 800f808:	3301      	adds	r3, #1
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	9303      	str	r3, [sp, #12]
 800f80e:	bfb8      	it	lt
 800f810:	2301      	movlt	r3, #1
 800f812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f814:	2200      	movs	r2, #0
 800f816:	6042      	str	r2, [r0, #4]
 800f818:	2204      	movs	r2, #4
 800f81a:	f102 0614 	add.w	r6, r2, #20
 800f81e:	429e      	cmp	r6, r3
 800f820:	6841      	ldr	r1, [r0, #4]
 800f822:	d93d      	bls.n	800f8a0 <_dtoa_r+0x318>
 800f824:	4620      	mov	r0, r4
 800f826:	f000 ff49 	bl	80106bc <_Balloc>
 800f82a:	9001      	str	r0, [sp, #4]
 800f82c:	2800      	cmp	r0, #0
 800f82e:	d13b      	bne.n	800f8a8 <_dtoa_r+0x320>
 800f830:	4b11      	ldr	r3, [pc, #68]	; (800f878 <_dtoa_r+0x2f0>)
 800f832:	4602      	mov	r2, r0
 800f834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f838:	e6c0      	b.n	800f5bc <_dtoa_r+0x34>
 800f83a:	2301      	movs	r3, #1
 800f83c:	e7df      	b.n	800f7fe <_dtoa_r+0x276>
 800f83e:	bf00      	nop
 800f840:	636f4361 	.word	0x636f4361
 800f844:	3fd287a7 	.word	0x3fd287a7
 800f848:	8b60c8b3 	.word	0x8b60c8b3
 800f84c:	3fc68a28 	.word	0x3fc68a28
 800f850:	509f79fb 	.word	0x509f79fb
 800f854:	3fd34413 	.word	0x3fd34413
 800f858:	0803a594 	.word	0x0803a594
 800f85c:	0803ab6a 	.word	0x0803ab6a
 800f860:	7ff00000 	.word	0x7ff00000
 800f864:	0803ab66 	.word	0x0803ab66
 800f868:	0803ab5d 	.word	0x0803ab5d
 800f86c:	0803adf9 	.word	0x0803adf9
 800f870:	3ff80000 	.word	0x3ff80000
 800f874:	0803ad20 	.word	0x0803ad20
 800f878:	0803abc5 	.word	0x0803abc5
 800f87c:	2501      	movs	r5, #1
 800f87e:	2300      	movs	r3, #0
 800f880:	9306      	str	r3, [sp, #24]
 800f882:	9508      	str	r5, [sp, #32]
 800f884:	f04f 33ff 	mov.w	r3, #4294967295
 800f888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f88c:	2200      	movs	r2, #0
 800f88e:	2312      	movs	r3, #18
 800f890:	e7b0      	b.n	800f7f4 <_dtoa_r+0x26c>
 800f892:	2301      	movs	r3, #1
 800f894:	9308      	str	r3, [sp, #32]
 800f896:	e7f5      	b.n	800f884 <_dtoa_r+0x2fc>
 800f898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f89a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f89e:	e7b8      	b.n	800f812 <_dtoa_r+0x28a>
 800f8a0:	3101      	adds	r1, #1
 800f8a2:	6041      	str	r1, [r0, #4]
 800f8a4:	0052      	lsls	r2, r2, #1
 800f8a6:	e7b8      	b.n	800f81a <_dtoa_r+0x292>
 800f8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8aa:	9a01      	ldr	r2, [sp, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	2b0e      	cmp	r3, #14
 800f8b2:	f200 809d 	bhi.w	800f9f0 <_dtoa_r+0x468>
 800f8b6:	2d00      	cmp	r5, #0
 800f8b8:	f000 809a 	beq.w	800f9f0 <_dtoa_r+0x468>
 800f8bc:	9b00      	ldr	r3, [sp, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dd32      	ble.n	800f928 <_dtoa_r+0x3a0>
 800f8c2:	4ab7      	ldr	r2, [pc, #732]	; (800fba0 <_dtoa_r+0x618>)
 800f8c4:	f003 030f 	and.w	r3, r3, #15
 800f8c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8d0:	9b00      	ldr	r3, [sp, #0]
 800f8d2:	05d8      	lsls	r0, r3, #23
 800f8d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f8d8:	d516      	bpl.n	800f908 <_dtoa_r+0x380>
 800f8da:	4bb2      	ldr	r3, [pc, #712]	; (800fba4 <_dtoa_r+0x61c>)
 800f8dc:	ec51 0b19 	vmov	r0, r1, d9
 800f8e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8e4:	f7f0 ffcc 	bl	8000880 <__aeabi_ddiv>
 800f8e8:	f007 070f 	and.w	r7, r7, #15
 800f8ec:	4682      	mov	sl, r0
 800f8ee:	468b      	mov	fp, r1
 800f8f0:	2503      	movs	r5, #3
 800f8f2:	4eac      	ldr	r6, [pc, #688]	; (800fba4 <_dtoa_r+0x61c>)
 800f8f4:	b957      	cbnz	r7, 800f90c <_dtoa_r+0x384>
 800f8f6:	4642      	mov	r2, r8
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	4650      	mov	r0, sl
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	f7f0 ffbf 	bl	8000880 <__aeabi_ddiv>
 800f902:	4682      	mov	sl, r0
 800f904:	468b      	mov	fp, r1
 800f906:	e028      	b.n	800f95a <_dtoa_r+0x3d2>
 800f908:	2502      	movs	r5, #2
 800f90a:	e7f2      	b.n	800f8f2 <_dtoa_r+0x36a>
 800f90c:	07f9      	lsls	r1, r7, #31
 800f90e:	d508      	bpl.n	800f922 <_dtoa_r+0x39a>
 800f910:	4640      	mov	r0, r8
 800f912:	4649      	mov	r1, r9
 800f914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f918:	f7f0 fe88 	bl	800062c <__aeabi_dmul>
 800f91c:	3501      	adds	r5, #1
 800f91e:	4680      	mov	r8, r0
 800f920:	4689      	mov	r9, r1
 800f922:	107f      	asrs	r7, r7, #1
 800f924:	3608      	adds	r6, #8
 800f926:	e7e5      	b.n	800f8f4 <_dtoa_r+0x36c>
 800f928:	f000 809b 	beq.w	800fa62 <_dtoa_r+0x4da>
 800f92c:	9b00      	ldr	r3, [sp, #0]
 800f92e:	4f9d      	ldr	r7, [pc, #628]	; (800fba4 <_dtoa_r+0x61c>)
 800f930:	425e      	negs	r6, r3
 800f932:	4b9b      	ldr	r3, [pc, #620]	; (800fba0 <_dtoa_r+0x618>)
 800f934:	f006 020f 	and.w	r2, r6, #15
 800f938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f940:	ec51 0b19 	vmov	r0, r1, d9
 800f944:	f7f0 fe72 	bl	800062c <__aeabi_dmul>
 800f948:	1136      	asrs	r6, r6, #4
 800f94a:	4682      	mov	sl, r0
 800f94c:	468b      	mov	fp, r1
 800f94e:	2300      	movs	r3, #0
 800f950:	2502      	movs	r5, #2
 800f952:	2e00      	cmp	r6, #0
 800f954:	d17a      	bne.n	800fa4c <_dtoa_r+0x4c4>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1d3      	bne.n	800f902 <_dtoa_r+0x37a>
 800f95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 8082 	beq.w	800fa66 <_dtoa_r+0x4de>
 800f962:	4b91      	ldr	r3, [pc, #580]	; (800fba8 <_dtoa_r+0x620>)
 800f964:	2200      	movs	r2, #0
 800f966:	4650      	mov	r0, sl
 800f968:	4659      	mov	r1, fp
 800f96a:	f7f1 f8d1 	bl	8000b10 <__aeabi_dcmplt>
 800f96e:	2800      	cmp	r0, #0
 800f970:	d079      	beq.n	800fa66 <_dtoa_r+0x4de>
 800f972:	9b03      	ldr	r3, [sp, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d076      	beq.n	800fa66 <_dtoa_r+0x4de>
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	dd36      	ble.n	800f9ec <_dtoa_r+0x464>
 800f97e:	9b00      	ldr	r3, [sp, #0]
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	1e5f      	subs	r7, r3, #1
 800f986:	2200      	movs	r2, #0
 800f988:	4b88      	ldr	r3, [pc, #544]	; (800fbac <_dtoa_r+0x624>)
 800f98a:	f7f0 fe4f 	bl	800062c <__aeabi_dmul>
 800f98e:	9e02      	ldr	r6, [sp, #8]
 800f990:	4682      	mov	sl, r0
 800f992:	468b      	mov	fp, r1
 800f994:	3501      	adds	r5, #1
 800f996:	4628      	mov	r0, r5
 800f998:	f7f0 fdde 	bl	8000558 <__aeabi_i2d>
 800f99c:	4652      	mov	r2, sl
 800f99e:	465b      	mov	r3, fp
 800f9a0:	f7f0 fe44 	bl	800062c <__aeabi_dmul>
 800f9a4:	4b82      	ldr	r3, [pc, #520]	; (800fbb0 <_dtoa_r+0x628>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f7f0 fc8a 	bl	80002c0 <__adddf3>
 800f9ac:	46d0      	mov	r8, sl
 800f9ae:	46d9      	mov	r9, fp
 800f9b0:	4682      	mov	sl, r0
 800f9b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	d158      	bne.n	800fa6c <_dtoa_r+0x4e4>
 800f9ba:	4b7e      	ldr	r3, [pc, #504]	; (800fbb4 <_dtoa_r+0x62c>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	4640      	mov	r0, r8
 800f9c0:	4649      	mov	r1, r9
 800f9c2:	f7f0 fc7b 	bl	80002bc <__aeabi_dsub>
 800f9c6:	4652      	mov	r2, sl
 800f9c8:	465b      	mov	r3, fp
 800f9ca:	4680      	mov	r8, r0
 800f9cc:	4689      	mov	r9, r1
 800f9ce:	f7f1 f8bd 	bl	8000b4c <__aeabi_dcmpgt>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f040 8295 	bne.w	800ff02 <_dtoa_r+0x97a>
 800f9d8:	4652      	mov	r2, sl
 800f9da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f9de:	4640      	mov	r0, r8
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	f7f1 f895 	bl	8000b10 <__aeabi_dcmplt>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	f040 8289 	bne.w	800fefe <_dtoa_r+0x976>
 800f9ec:	ec5b ab19 	vmov	sl, fp, d9
 800f9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f2c0 8148 	blt.w	800fc88 <_dtoa_r+0x700>
 800f9f8:	9a00      	ldr	r2, [sp, #0]
 800f9fa:	2a0e      	cmp	r2, #14
 800f9fc:	f300 8144 	bgt.w	800fc88 <_dtoa_r+0x700>
 800fa00:	4b67      	ldr	r3, [pc, #412]	; (800fba0 <_dtoa_r+0x618>)
 800fa02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f280 80d5 	bge.w	800fbbc <_dtoa_r+0x634>
 800fa12:	9b03      	ldr	r3, [sp, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f300 80d1 	bgt.w	800fbbc <_dtoa_r+0x634>
 800fa1a:	f040 826f 	bne.w	800fefc <_dtoa_r+0x974>
 800fa1e:	4b65      	ldr	r3, [pc, #404]	; (800fbb4 <_dtoa_r+0x62c>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f0 fe01 	bl	800062c <__aeabi_dmul>
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	f7f1 f883 	bl	8000b38 <__aeabi_dcmpge>
 800fa32:	9e03      	ldr	r6, [sp, #12]
 800fa34:	4637      	mov	r7, r6
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f040 8245 	bne.w	800fec6 <_dtoa_r+0x93e>
 800fa3c:	9d01      	ldr	r5, [sp, #4]
 800fa3e:	2331      	movs	r3, #49	; 0x31
 800fa40:	f805 3b01 	strb.w	r3, [r5], #1
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	3301      	adds	r3, #1
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	e240      	b.n	800fece <_dtoa_r+0x946>
 800fa4c:	07f2      	lsls	r2, r6, #31
 800fa4e:	d505      	bpl.n	800fa5c <_dtoa_r+0x4d4>
 800fa50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa54:	f7f0 fdea 	bl	800062c <__aeabi_dmul>
 800fa58:	3501      	adds	r5, #1
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	1076      	asrs	r6, r6, #1
 800fa5e:	3708      	adds	r7, #8
 800fa60:	e777      	b.n	800f952 <_dtoa_r+0x3ca>
 800fa62:	2502      	movs	r5, #2
 800fa64:	e779      	b.n	800f95a <_dtoa_r+0x3d2>
 800fa66:	9f00      	ldr	r7, [sp, #0]
 800fa68:	9e03      	ldr	r6, [sp, #12]
 800fa6a:	e794      	b.n	800f996 <_dtoa_r+0x40e>
 800fa6c:	9901      	ldr	r1, [sp, #4]
 800fa6e:	4b4c      	ldr	r3, [pc, #304]	; (800fba0 <_dtoa_r+0x618>)
 800fa70:	4431      	add	r1, r6
 800fa72:	910d      	str	r1, [sp, #52]	; 0x34
 800fa74:	9908      	ldr	r1, [sp, #32]
 800fa76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fa7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa7e:	2900      	cmp	r1, #0
 800fa80:	d043      	beq.n	800fb0a <_dtoa_r+0x582>
 800fa82:	494d      	ldr	r1, [pc, #308]	; (800fbb8 <_dtoa_r+0x630>)
 800fa84:	2000      	movs	r0, #0
 800fa86:	f7f0 fefb 	bl	8000880 <__aeabi_ddiv>
 800fa8a:	4652      	mov	r2, sl
 800fa8c:	465b      	mov	r3, fp
 800fa8e:	f7f0 fc15 	bl	80002bc <__aeabi_dsub>
 800fa92:	9d01      	ldr	r5, [sp, #4]
 800fa94:	4682      	mov	sl, r0
 800fa96:	468b      	mov	fp, r1
 800fa98:	4649      	mov	r1, r9
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	f7f1 f876 	bl	8000b8c <__aeabi_d2iz>
 800faa0:	4606      	mov	r6, r0
 800faa2:	f7f0 fd59 	bl	8000558 <__aeabi_i2d>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4640      	mov	r0, r8
 800faac:	4649      	mov	r1, r9
 800faae:	f7f0 fc05 	bl	80002bc <__aeabi_dsub>
 800fab2:	3630      	adds	r6, #48	; 0x30
 800fab4:	f805 6b01 	strb.w	r6, [r5], #1
 800fab8:	4652      	mov	r2, sl
 800faba:	465b      	mov	r3, fp
 800fabc:	4680      	mov	r8, r0
 800fabe:	4689      	mov	r9, r1
 800fac0:	f7f1 f826 	bl	8000b10 <__aeabi_dcmplt>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d163      	bne.n	800fb90 <_dtoa_r+0x608>
 800fac8:	4642      	mov	r2, r8
 800faca:	464b      	mov	r3, r9
 800facc:	4936      	ldr	r1, [pc, #216]	; (800fba8 <_dtoa_r+0x620>)
 800face:	2000      	movs	r0, #0
 800fad0:	f7f0 fbf4 	bl	80002bc <__aeabi_dsub>
 800fad4:	4652      	mov	r2, sl
 800fad6:	465b      	mov	r3, fp
 800fad8:	f7f1 f81a 	bl	8000b10 <__aeabi_dcmplt>
 800fadc:	2800      	cmp	r0, #0
 800fade:	f040 80b5 	bne.w	800fc4c <_dtoa_r+0x6c4>
 800fae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fae4:	429d      	cmp	r5, r3
 800fae6:	d081      	beq.n	800f9ec <_dtoa_r+0x464>
 800fae8:	4b30      	ldr	r3, [pc, #192]	; (800fbac <_dtoa_r+0x624>)
 800faea:	2200      	movs	r2, #0
 800faec:	4650      	mov	r0, sl
 800faee:	4659      	mov	r1, fp
 800faf0:	f7f0 fd9c 	bl	800062c <__aeabi_dmul>
 800faf4:	4b2d      	ldr	r3, [pc, #180]	; (800fbac <_dtoa_r+0x624>)
 800faf6:	4682      	mov	sl, r0
 800faf8:	468b      	mov	fp, r1
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	2200      	movs	r2, #0
 800fb00:	f7f0 fd94 	bl	800062c <__aeabi_dmul>
 800fb04:	4680      	mov	r8, r0
 800fb06:	4689      	mov	r9, r1
 800fb08:	e7c6      	b.n	800fa98 <_dtoa_r+0x510>
 800fb0a:	4650      	mov	r0, sl
 800fb0c:	4659      	mov	r1, fp
 800fb0e:	f7f0 fd8d 	bl	800062c <__aeabi_dmul>
 800fb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb14:	9d01      	ldr	r5, [sp, #4]
 800fb16:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb18:	4682      	mov	sl, r0
 800fb1a:	468b      	mov	fp, r1
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	4640      	mov	r0, r8
 800fb20:	f7f1 f834 	bl	8000b8c <__aeabi_d2iz>
 800fb24:	4606      	mov	r6, r0
 800fb26:	f7f0 fd17 	bl	8000558 <__aeabi_i2d>
 800fb2a:	3630      	adds	r6, #48	; 0x30
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4640      	mov	r0, r8
 800fb32:	4649      	mov	r1, r9
 800fb34:	f7f0 fbc2 	bl	80002bc <__aeabi_dsub>
 800fb38:	f805 6b01 	strb.w	r6, [r5], #1
 800fb3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb3e:	429d      	cmp	r5, r3
 800fb40:	4680      	mov	r8, r0
 800fb42:	4689      	mov	r9, r1
 800fb44:	f04f 0200 	mov.w	r2, #0
 800fb48:	d124      	bne.n	800fb94 <_dtoa_r+0x60c>
 800fb4a:	4b1b      	ldr	r3, [pc, #108]	; (800fbb8 <_dtoa_r+0x630>)
 800fb4c:	4650      	mov	r0, sl
 800fb4e:	4659      	mov	r1, fp
 800fb50:	f7f0 fbb6 	bl	80002c0 <__adddf3>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4640      	mov	r0, r8
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	f7f0 fff6 	bl	8000b4c <__aeabi_dcmpgt>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	d173      	bne.n	800fc4c <_dtoa_r+0x6c4>
 800fb64:	4652      	mov	r2, sl
 800fb66:	465b      	mov	r3, fp
 800fb68:	4913      	ldr	r1, [pc, #76]	; (800fbb8 <_dtoa_r+0x630>)
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	f7f0 fba6 	bl	80002bc <__aeabi_dsub>
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	4640      	mov	r0, r8
 800fb76:	4649      	mov	r1, r9
 800fb78:	f7f0 ffca 	bl	8000b10 <__aeabi_dcmplt>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	f43f af35 	beq.w	800f9ec <_dtoa_r+0x464>
 800fb82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fb84:	1e6b      	subs	r3, r5, #1
 800fb86:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb8c:	2b30      	cmp	r3, #48	; 0x30
 800fb8e:	d0f8      	beq.n	800fb82 <_dtoa_r+0x5fa>
 800fb90:	9700      	str	r7, [sp, #0]
 800fb92:	e049      	b.n	800fc28 <_dtoa_r+0x6a0>
 800fb94:	4b05      	ldr	r3, [pc, #20]	; (800fbac <_dtoa_r+0x624>)
 800fb96:	f7f0 fd49 	bl	800062c <__aeabi_dmul>
 800fb9a:	4680      	mov	r8, r0
 800fb9c:	4689      	mov	r9, r1
 800fb9e:	e7bd      	b.n	800fb1c <_dtoa_r+0x594>
 800fba0:	0803ad20 	.word	0x0803ad20
 800fba4:	0803acf8 	.word	0x0803acf8
 800fba8:	3ff00000 	.word	0x3ff00000
 800fbac:	40240000 	.word	0x40240000
 800fbb0:	401c0000 	.word	0x401c0000
 800fbb4:	40140000 	.word	0x40140000
 800fbb8:	3fe00000 	.word	0x3fe00000
 800fbbc:	9d01      	ldr	r5, [sp, #4]
 800fbbe:	4656      	mov	r6, sl
 800fbc0:	465f      	mov	r7, fp
 800fbc2:	4642      	mov	r2, r8
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	4639      	mov	r1, r7
 800fbca:	f7f0 fe59 	bl	8000880 <__aeabi_ddiv>
 800fbce:	f7f0 ffdd 	bl	8000b8c <__aeabi_d2iz>
 800fbd2:	4682      	mov	sl, r0
 800fbd4:	f7f0 fcc0 	bl	8000558 <__aeabi_i2d>
 800fbd8:	4642      	mov	r2, r8
 800fbda:	464b      	mov	r3, r9
 800fbdc:	f7f0 fd26 	bl	800062c <__aeabi_dmul>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	4639      	mov	r1, r7
 800fbe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fbec:	f7f0 fb66 	bl	80002bc <__aeabi_dsub>
 800fbf0:	f805 6b01 	strb.w	r6, [r5], #1
 800fbf4:	9e01      	ldr	r6, [sp, #4]
 800fbf6:	9f03      	ldr	r7, [sp, #12]
 800fbf8:	1bae      	subs	r6, r5, r6
 800fbfa:	42b7      	cmp	r7, r6
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	d135      	bne.n	800fc6e <_dtoa_r+0x6e6>
 800fc02:	f7f0 fb5d 	bl	80002c0 <__adddf3>
 800fc06:	4642      	mov	r2, r8
 800fc08:	464b      	mov	r3, r9
 800fc0a:	4606      	mov	r6, r0
 800fc0c:	460f      	mov	r7, r1
 800fc0e:	f7f0 ff9d 	bl	8000b4c <__aeabi_dcmpgt>
 800fc12:	b9d0      	cbnz	r0, 800fc4a <_dtoa_r+0x6c2>
 800fc14:	4642      	mov	r2, r8
 800fc16:	464b      	mov	r3, r9
 800fc18:	4630      	mov	r0, r6
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	f7f0 ff6e 	bl	8000afc <__aeabi_dcmpeq>
 800fc20:	b110      	cbz	r0, 800fc28 <_dtoa_r+0x6a0>
 800fc22:	f01a 0f01 	tst.w	sl, #1
 800fc26:	d110      	bne.n	800fc4a <_dtoa_r+0x6c2>
 800fc28:	4620      	mov	r0, r4
 800fc2a:	ee18 1a10 	vmov	r1, s16
 800fc2e:	f000 fd85 	bl	801073c <_Bfree>
 800fc32:	2300      	movs	r3, #0
 800fc34:	9800      	ldr	r0, [sp, #0]
 800fc36:	702b      	strb	r3, [r5, #0]
 800fc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	6018      	str	r0, [r3, #0]
 800fc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f43f acf1 	beq.w	800f628 <_dtoa_r+0xa0>
 800fc46:	601d      	str	r5, [r3, #0]
 800fc48:	e4ee      	b.n	800f628 <_dtoa_r+0xa0>
 800fc4a:	9f00      	ldr	r7, [sp, #0]
 800fc4c:	462b      	mov	r3, r5
 800fc4e:	461d      	mov	r5, r3
 800fc50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc54:	2a39      	cmp	r2, #57	; 0x39
 800fc56:	d106      	bne.n	800fc66 <_dtoa_r+0x6de>
 800fc58:	9a01      	ldr	r2, [sp, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d1f7      	bne.n	800fc4e <_dtoa_r+0x6c6>
 800fc5e:	9901      	ldr	r1, [sp, #4]
 800fc60:	2230      	movs	r2, #48	; 0x30
 800fc62:	3701      	adds	r7, #1
 800fc64:	700a      	strb	r2, [r1, #0]
 800fc66:	781a      	ldrb	r2, [r3, #0]
 800fc68:	3201      	adds	r2, #1
 800fc6a:	701a      	strb	r2, [r3, #0]
 800fc6c:	e790      	b.n	800fb90 <_dtoa_r+0x608>
 800fc6e:	4ba6      	ldr	r3, [pc, #664]	; (800ff08 <_dtoa_r+0x980>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	f7f0 fcdb 	bl	800062c <__aeabi_dmul>
 800fc76:	2200      	movs	r2, #0
 800fc78:	2300      	movs	r3, #0
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	f7f0 ff3d 	bl	8000afc <__aeabi_dcmpeq>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d09d      	beq.n	800fbc2 <_dtoa_r+0x63a>
 800fc86:	e7cf      	b.n	800fc28 <_dtoa_r+0x6a0>
 800fc88:	9a08      	ldr	r2, [sp, #32]
 800fc8a:	2a00      	cmp	r2, #0
 800fc8c:	f000 80d7 	beq.w	800fe3e <_dtoa_r+0x8b6>
 800fc90:	9a06      	ldr	r2, [sp, #24]
 800fc92:	2a01      	cmp	r2, #1
 800fc94:	f300 80ba 	bgt.w	800fe0c <_dtoa_r+0x884>
 800fc98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc9a:	2a00      	cmp	r2, #0
 800fc9c:	f000 80b2 	beq.w	800fe04 <_dtoa_r+0x87c>
 800fca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fca4:	9e07      	ldr	r6, [sp, #28]
 800fca6:	9d04      	ldr	r5, [sp, #16]
 800fca8:	9a04      	ldr	r2, [sp, #16]
 800fcaa:	441a      	add	r2, r3
 800fcac:	9204      	str	r2, [sp, #16]
 800fcae:	9a05      	ldr	r2, [sp, #20]
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	441a      	add	r2, r3
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	9205      	str	r2, [sp, #20]
 800fcb8:	f000 fdf8 	bl	80108ac <__i2b>
 800fcbc:	4607      	mov	r7, r0
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	dd0c      	ble.n	800fcdc <_dtoa_r+0x754>
 800fcc2:	9b05      	ldr	r3, [sp, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd09      	ble.n	800fcdc <_dtoa_r+0x754>
 800fcc8:	42ab      	cmp	r3, r5
 800fcca:	9a04      	ldr	r2, [sp, #16]
 800fccc:	bfa8      	it	ge
 800fcce:	462b      	movge	r3, r5
 800fcd0:	1ad2      	subs	r2, r2, r3
 800fcd2:	9204      	str	r2, [sp, #16]
 800fcd4:	9a05      	ldr	r2, [sp, #20]
 800fcd6:	1aed      	subs	r5, r5, r3
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	9305      	str	r3, [sp, #20]
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	b31b      	cbz	r3, 800fd28 <_dtoa_r+0x7a0>
 800fce0:	9b08      	ldr	r3, [sp, #32]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f000 80af 	beq.w	800fe46 <_dtoa_r+0x8be>
 800fce8:	2e00      	cmp	r6, #0
 800fcea:	dd13      	ble.n	800fd14 <_dtoa_r+0x78c>
 800fcec:	4639      	mov	r1, r7
 800fcee:	4632      	mov	r2, r6
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fe9b 	bl	8010a2c <__pow5mult>
 800fcf6:	ee18 2a10 	vmov	r2, s16
 800fcfa:	4601      	mov	r1, r0
 800fcfc:	4607      	mov	r7, r0
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 fdea 	bl	80108d8 <__multiply>
 800fd04:	ee18 1a10 	vmov	r1, s16
 800fd08:	4680      	mov	r8, r0
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 fd16 	bl	801073c <_Bfree>
 800fd10:	ee08 8a10 	vmov	s16, r8
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	1b9a      	subs	r2, r3, r6
 800fd18:	d006      	beq.n	800fd28 <_dtoa_r+0x7a0>
 800fd1a:	ee18 1a10 	vmov	r1, s16
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f000 fe84 	bl	8010a2c <__pow5mult>
 800fd24:	ee08 0a10 	vmov	s16, r0
 800fd28:	2101      	movs	r1, #1
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 fdbe 	bl	80108ac <__i2b>
 800fd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	4606      	mov	r6, r0
 800fd36:	f340 8088 	ble.w	800fe4a <_dtoa_r+0x8c2>
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	4620      	mov	r0, r4
 800fd40:	f000 fe74 	bl	8010a2c <__pow5mult>
 800fd44:	9b06      	ldr	r3, [sp, #24]
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	4606      	mov	r6, r0
 800fd4a:	f340 8081 	ble.w	800fe50 <_dtoa_r+0x8c8>
 800fd4e:	f04f 0800 	mov.w	r8, #0
 800fd52:	6933      	ldr	r3, [r6, #16]
 800fd54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd58:	6918      	ldr	r0, [r3, #16]
 800fd5a:	f000 fd57 	bl	801080c <__hi0bits>
 800fd5e:	f1c0 0020 	rsb	r0, r0, #32
 800fd62:	9b05      	ldr	r3, [sp, #20]
 800fd64:	4418      	add	r0, r3
 800fd66:	f010 001f 	ands.w	r0, r0, #31
 800fd6a:	f000 8092 	beq.w	800fe92 <_dtoa_r+0x90a>
 800fd6e:	f1c0 0320 	rsb	r3, r0, #32
 800fd72:	2b04      	cmp	r3, #4
 800fd74:	f340 808a 	ble.w	800fe8c <_dtoa_r+0x904>
 800fd78:	f1c0 001c 	rsb	r0, r0, #28
 800fd7c:	9b04      	ldr	r3, [sp, #16]
 800fd7e:	4403      	add	r3, r0
 800fd80:	9304      	str	r3, [sp, #16]
 800fd82:	9b05      	ldr	r3, [sp, #20]
 800fd84:	4403      	add	r3, r0
 800fd86:	4405      	add	r5, r0
 800fd88:	9305      	str	r3, [sp, #20]
 800fd8a:	9b04      	ldr	r3, [sp, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd07      	ble.n	800fda0 <_dtoa_r+0x818>
 800fd90:	ee18 1a10 	vmov	r1, s16
 800fd94:	461a      	mov	r2, r3
 800fd96:	4620      	mov	r0, r4
 800fd98:	f000 fea2 	bl	8010ae0 <__lshift>
 800fd9c:	ee08 0a10 	vmov	s16, r0
 800fda0:	9b05      	ldr	r3, [sp, #20]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dd05      	ble.n	800fdb2 <_dtoa_r+0x82a>
 800fda6:	4631      	mov	r1, r6
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 fe98 	bl	8010ae0 <__lshift>
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d06e      	beq.n	800fe96 <_dtoa_r+0x90e>
 800fdb8:	ee18 0a10 	vmov	r0, s16
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	f000 feff 	bl	8010bc0 <__mcmp>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	da67      	bge.n	800fe96 <_dtoa_r+0x90e>
 800fdc6:	9b00      	ldr	r3, [sp, #0]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	ee18 1a10 	vmov	r1, s16
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	220a      	movs	r2, #10
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 fcd3 	bl	8010780 <__multadd>
 800fdda:	9b08      	ldr	r3, [sp, #32]
 800fddc:	ee08 0a10 	vmov	s16, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 81b1 	beq.w	8010148 <_dtoa_r+0xbc0>
 800fde6:	2300      	movs	r3, #0
 800fde8:	4639      	mov	r1, r7
 800fdea:	220a      	movs	r2, #10
 800fdec:	4620      	mov	r0, r4
 800fdee:	f000 fcc7 	bl	8010780 <__multadd>
 800fdf2:	9b02      	ldr	r3, [sp, #8]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	f300 808e 	bgt.w	800ff18 <_dtoa_r+0x990>
 800fdfc:	9b06      	ldr	r3, [sp, #24]
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	dc51      	bgt.n	800fea6 <_dtoa_r+0x91e>
 800fe02:	e089      	b.n	800ff18 <_dtoa_r+0x990>
 800fe04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe0a:	e74b      	b.n	800fca4 <_dtoa_r+0x71c>
 800fe0c:	9b03      	ldr	r3, [sp, #12]
 800fe0e:	1e5e      	subs	r6, r3, #1
 800fe10:	9b07      	ldr	r3, [sp, #28]
 800fe12:	42b3      	cmp	r3, r6
 800fe14:	bfbf      	itttt	lt
 800fe16:	9b07      	ldrlt	r3, [sp, #28]
 800fe18:	9607      	strlt	r6, [sp, #28]
 800fe1a:	1af2      	sublt	r2, r6, r3
 800fe1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fe1e:	bfb6      	itet	lt
 800fe20:	189b      	addlt	r3, r3, r2
 800fe22:	1b9e      	subge	r6, r3, r6
 800fe24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fe26:	9b03      	ldr	r3, [sp, #12]
 800fe28:	bfb8      	it	lt
 800fe2a:	2600      	movlt	r6, #0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	bfb7      	itett	lt
 800fe30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fe34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fe38:	1a9d      	sublt	r5, r3, r2
 800fe3a:	2300      	movlt	r3, #0
 800fe3c:	e734      	b.n	800fca8 <_dtoa_r+0x720>
 800fe3e:	9e07      	ldr	r6, [sp, #28]
 800fe40:	9d04      	ldr	r5, [sp, #16]
 800fe42:	9f08      	ldr	r7, [sp, #32]
 800fe44:	e73b      	b.n	800fcbe <_dtoa_r+0x736>
 800fe46:	9a07      	ldr	r2, [sp, #28]
 800fe48:	e767      	b.n	800fd1a <_dtoa_r+0x792>
 800fe4a:	9b06      	ldr	r3, [sp, #24]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	dc18      	bgt.n	800fe82 <_dtoa_r+0x8fa>
 800fe50:	f1ba 0f00 	cmp.w	sl, #0
 800fe54:	d115      	bne.n	800fe82 <_dtoa_r+0x8fa>
 800fe56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe5a:	b993      	cbnz	r3, 800fe82 <_dtoa_r+0x8fa>
 800fe5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe60:	0d1b      	lsrs	r3, r3, #20
 800fe62:	051b      	lsls	r3, r3, #20
 800fe64:	b183      	cbz	r3, 800fe88 <_dtoa_r+0x900>
 800fe66:	9b04      	ldr	r3, [sp, #16]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	9b05      	ldr	r3, [sp, #20]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	9305      	str	r3, [sp, #20]
 800fe72:	f04f 0801 	mov.w	r8, #1
 800fe76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f47f af6a 	bne.w	800fd52 <_dtoa_r+0x7ca>
 800fe7e:	2001      	movs	r0, #1
 800fe80:	e76f      	b.n	800fd62 <_dtoa_r+0x7da>
 800fe82:	f04f 0800 	mov.w	r8, #0
 800fe86:	e7f6      	b.n	800fe76 <_dtoa_r+0x8ee>
 800fe88:	4698      	mov	r8, r3
 800fe8a:	e7f4      	b.n	800fe76 <_dtoa_r+0x8ee>
 800fe8c:	f43f af7d 	beq.w	800fd8a <_dtoa_r+0x802>
 800fe90:	4618      	mov	r0, r3
 800fe92:	301c      	adds	r0, #28
 800fe94:	e772      	b.n	800fd7c <_dtoa_r+0x7f4>
 800fe96:	9b03      	ldr	r3, [sp, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dc37      	bgt.n	800ff0c <_dtoa_r+0x984>
 800fe9c:	9b06      	ldr	r3, [sp, #24]
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	dd34      	ble.n	800ff0c <_dtoa_r+0x984>
 800fea2:	9b03      	ldr	r3, [sp, #12]
 800fea4:	9302      	str	r3, [sp, #8]
 800fea6:	9b02      	ldr	r3, [sp, #8]
 800fea8:	b96b      	cbnz	r3, 800fec6 <_dtoa_r+0x93e>
 800feaa:	4631      	mov	r1, r6
 800feac:	2205      	movs	r2, #5
 800feae:	4620      	mov	r0, r4
 800feb0:	f000 fc66 	bl	8010780 <__multadd>
 800feb4:	4601      	mov	r1, r0
 800feb6:	4606      	mov	r6, r0
 800feb8:	ee18 0a10 	vmov	r0, s16
 800febc:	f000 fe80 	bl	8010bc0 <__mcmp>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	f73f adbb 	bgt.w	800fa3c <_dtoa_r+0x4b4>
 800fec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec8:	9d01      	ldr	r5, [sp, #4]
 800feca:	43db      	mvns	r3, r3
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	f04f 0800 	mov.w	r8, #0
 800fed2:	4631      	mov	r1, r6
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fc31 	bl	801073c <_Bfree>
 800feda:	2f00      	cmp	r7, #0
 800fedc:	f43f aea4 	beq.w	800fc28 <_dtoa_r+0x6a0>
 800fee0:	f1b8 0f00 	cmp.w	r8, #0
 800fee4:	d005      	beq.n	800fef2 <_dtoa_r+0x96a>
 800fee6:	45b8      	cmp	r8, r7
 800fee8:	d003      	beq.n	800fef2 <_dtoa_r+0x96a>
 800feea:	4641      	mov	r1, r8
 800feec:	4620      	mov	r0, r4
 800feee:	f000 fc25 	bl	801073c <_Bfree>
 800fef2:	4639      	mov	r1, r7
 800fef4:	4620      	mov	r0, r4
 800fef6:	f000 fc21 	bl	801073c <_Bfree>
 800fefa:	e695      	b.n	800fc28 <_dtoa_r+0x6a0>
 800fefc:	2600      	movs	r6, #0
 800fefe:	4637      	mov	r7, r6
 800ff00:	e7e1      	b.n	800fec6 <_dtoa_r+0x93e>
 800ff02:	9700      	str	r7, [sp, #0]
 800ff04:	4637      	mov	r7, r6
 800ff06:	e599      	b.n	800fa3c <_dtoa_r+0x4b4>
 800ff08:	40240000 	.word	0x40240000
 800ff0c:	9b08      	ldr	r3, [sp, #32]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f000 80ca 	beq.w	80100a8 <_dtoa_r+0xb20>
 800ff14:	9b03      	ldr	r3, [sp, #12]
 800ff16:	9302      	str	r3, [sp, #8]
 800ff18:	2d00      	cmp	r5, #0
 800ff1a:	dd05      	ble.n	800ff28 <_dtoa_r+0x9a0>
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	462a      	mov	r2, r5
 800ff20:	4620      	mov	r0, r4
 800ff22:	f000 fddd 	bl	8010ae0 <__lshift>
 800ff26:	4607      	mov	r7, r0
 800ff28:	f1b8 0f00 	cmp.w	r8, #0
 800ff2c:	d05b      	beq.n	800ffe6 <_dtoa_r+0xa5e>
 800ff2e:	6879      	ldr	r1, [r7, #4]
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fbc3 	bl	80106bc <_Balloc>
 800ff36:	4605      	mov	r5, r0
 800ff38:	b928      	cbnz	r0, 800ff46 <_dtoa_r+0x9be>
 800ff3a:	4b87      	ldr	r3, [pc, #540]	; (8010158 <_dtoa_r+0xbd0>)
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff42:	f7ff bb3b 	b.w	800f5bc <_dtoa_r+0x34>
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	3202      	adds	r2, #2
 800ff4a:	0092      	lsls	r2, r2, #2
 800ff4c:	f107 010c 	add.w	r1, r7, #12
 800ff50:	300c      	adds	r0, #12
 800ff52:	f7fc ff45 	bl	800cde0 <memcpy>
 800ff56:	2201      	movs	r2, #1
 800ff58:	4629      	mov	r1, r5
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fdc0 	bl	8010ae0 <__lshift>
 800ff60:	9b01      	ldr	r3, [sp, #4]
 800ff62:	f103 0901 	add.w	r9, r3, #1
 800ff66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	9305      	str	r3, [sp, #20]
 800ff6e:	f00a 0301 	and.w	r3, sl, #1
 800ff72:	46b8      	mov	r8, r7
 800ff74:	9304      	str	r3, [sp, #16]
 800ff76:	4607      	mov	r7, r0
 800ff78:	4631      	mov	r1, r6
 800ff7a:	ee18 0a10 	vmov	r0, s16
 800ff7e:	f7ff fa77 	bl	800f470 <quorem>
 800ff82:	4641      	mov	r1, r8
 800ff84:	9002      	str	r0, [sp, #8]
 800ff86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ff8a:	ee18 0a10 	vmov	r0, s16
 800ff8e:	f000 fe17 	bl	8010bc0 <__mcmp>
 800ff92:	463a      	mov	r2, r7
 800ff94:	9003      	str	r0, [sp, #12]
 800ff96:	4631      	mov	r1, r6
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fe2d 	bl	8010bf8 <__mdiff>
 800ff9e:	68c2      	ldr	r2, [r0, #12]
 800ffa0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	bb02      	cbnz	r2, 800ffea <_dtoa_r+0xa62>
 800ffa8:	4601      	mov	r1, r0
 800ffaa:	ee18 0a10 	vmov	r0, s16
 800ffae:	f000 fe07 	bl	8010bc0 <__mcmp>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	9207      	str	r2, [sp, #28]
 800ffba:	f000 fbbf 	bl	801073c <_Bfree>
 800ffbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ffc2:	ea43 0102 	orr.w	r1, r3, r2
 800ffc6:	9b04      	ldr	r3, [sp, #16]
 800ffc8:	430b      	orrs	r3, r1
 800ffca:	464d      	mov	r5, r9
 800ffcc:	d10f      	bne.n	800ffee <_dtoa_r+0xa66>
 800ffce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ffd2:	d02a      	beq.n	801002a <_dtoa_r+0xaa2>
 800ffd4:	9b03      	ldr	r3, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	dd02      	ble.n	800ffe0 <_dtoa_r+0xa58>
 800ffda:	9b02      	ldr	r3, [sp, #8]
 800ffdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ffe0:	f88b a000 	strb.w	sl, [fp]
 800ffe4:	e775      	b.n	800fed2 <_dtoa_r+0x94a>
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	e7ba      	b.n	800ff60 <_dtoa_r+0x9d8>
 800ffea:	2201      	movs	r2, #1
 800ffec:	e7e2      	b.n	800ffb4 <_dtoa_r+0xa2c>
 800ffee:	9b03      	ldr	r3, [sp, #12]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	db04      	blt.n	800fffe <_dtoa_r+0xa76>
 800fff4:	9906      	ldr	r1, [sp, #24]
 800fff6:	430b      	orrs	r3, r1
 800fff8:	9904      	ldr	r1, [sp, #16]
 800fffa:	430b      	orrs	r3, r1
 800fffc:	d122      	bne.n	8010044 <_dtoa_r+0xabc>
 800fffe:	2a00      	cmp	r2, #0
 8010000:	ddee      	ble.n	800ffe0 <_dtoa_r+0xa58>
 8010002:	ee18 1a10 	vmov	r1, s16
 8010006:	2201      	movs	r2, #1
 8010008:	4620      	mov	r0, r4
 801000a:	f000 fd69 	bl	8010ae0 <__lshift>
 801000e:	4631      	mov	r1, r6
 8010010:	ee08 0a10 	vmov	s16, r0
 8010014:	f000 fdd4 	bl	8010bc0 <__mcmp>
 8010018:	2800      	cmp	r0, #0
 801001a:	dc03      	bgt.n	8010024 <_dtoa_r+0xa9c>
 801001c:	d1e0      	bne.n	800ffe0 <_dtoa_r+0xa58>
 801001e:	f01a 0f01 	tst.w	sl, #1
 8010022:	d0dd      	beq.n	800ffe0 <_dtoa_r+0xa58>
 8010024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010028:	d1d7      	bne.n	800ffda <_dtoa_r+0xa52>
 801002a:	2339      	movs	r3, #57	; 0x39
 801002c:	f88b 3000 	strb.w	r3, [fp]
 8010030:	462b      	mov	r3, r5
 8010032:	461d      	mov	r5, r3
 8010034:	3b01      	subs	r3, #1
 8010036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801003a:	2a39      	cmp	r2, #57	; 0x39
 801003c:	d071      	beq.n	8010122 <_dtoa_r+0xb9a>
 801003e:	3201      	adds	r2, #1
 8010040:	701a      	strb	r2, [r3, #0]
 8010042:	e746      	b.n	800fed2 <_dtoa_r+0x94a>
 8010044:	2a00      	cmp	r2, #0
 8010046:	dd07      	ble.n	8010058 <_dtoa_r+0xad0>
 8010048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801004c:	d0ed      	beq.n	801002a <_dtoa_r+0xaa2>
 801004e:	f10a 0301 	add.w	r3, sl, #1
 8010052:	f88b 3000 	strb.w	r3, [fp]
 8010056:	e73c      	b.n	800fed2 <_dtoa_r+0x94a>
 8010058:	9b05      	ldr	r3, [sp, #20]
 801005a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801005e:	4599      	cmp	r9, r3
 8010060:	d047      	beq.n	80100f2 <_dtoa_r+0xb6a>
 8010062:	ee18 1a10 	vmov	r1, s16
 8010066:	2300      	movs	r3, #0
 8010068:	220a      	movs	r2, #10
 801006a:	4620      	mov	r0, r4
 801006c:	f000 fb88 	bl	8010780 <__multadd>
 8010070:	45b8      	cmp	r8, r7
 8010072:	ee08 0a10 	vmov	s16, r0
 8010076:	f04f 0300 	mov.w	r3, #0
 801007a:	f04f 020a 	mov.w	r2, #10
 801007e:	4641      	mov	r1, r8
 8010080:	4620      	mov	r0, r4
 8010082:	d106      	bne.n	8010092 <_dtoa_r+0xb0a>
 8010084:	f000 fb7c 	bl	8010780 <__multadd>
 8010088:	4680      	mov	r8, r0
 801008a:	4607      	mov	r7, r0
 801008c:	f109 0901 	add.w	r9, r9, #1
 8010090:	e772      	b.n	800ff78 <_dtoa_r+0x9f0>
 8010092:	f000 fb75 	bl	8010780 <__multadd>
 8010096:	4639      	mov	r1, r7
 8010098:	4680      	mov	r8, r0
 801009a:	2300      	movs	r3, #0
 801009c:	220a      	movs	r2, #10
 801009e:	4620      	mov	r0, r4
 80100a0:	f000 fb6e 	bl	8010780 <__multadd>
 80100a4:	4607      	mov	r7, r0
 80100a6:	e7f1      	b.n	801008c <_dtoa_r+0xb04>
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	9302      	str	r3, [sp, #8]
 80100ac:	9d01      	ldr	r5, [sp, #4]
 80100ae:	ee18 0a10 	vmov	r0, s16
 80100b2:	4631      	mov	r1, r6
 80100b4:	f7ff f9dc 	bl	800f470 <quorem>
 80100b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80100bc:	9b01      	ldr	r3, [sp, #4]
 80100be:	f805 ab01 	strb.w	sl, [r5], #1
 80100c2:	1aea      	subs	r2, r5, r3
 80100c4:	9b02      	ldr	r3, [sp, #8]
 80100c6:	4293      	cmp	r3, r2
 80100c8:	dd09      	ble.n	80100de <_dtoa_r+0xb56>
 80100ca:	ee18 1a10 	vmov	r1, s16
 80100ce:	2300      	movs	r3, #0
 80100d0:	220a      	movs	r2, #10
 80100d2:	4620      	mov	r0, r4
 80100d4:	f000 fb54 	bl	8010780 <__multadd>
 80100d8:	ee08 0a10 	vmov	s16, r0
 80100dc:	e7e7      	b.n	80100ae <_dtoa_r+0xb26>
 80100de:	9b02      	ldr	r3, [sp, #8]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	bfc8      	it	gt
 80100e4:	461d      	movgt	r5, r3
 80100e6:	9b01      	ldr	r3, [sp, #4]
 80100e8:	bfd8      	it	le
 80100ea:	2501      	movle	r5, #1
 80100ec:	441d      	add	r5, r3
 80100ee:	f04f 0800 	mov.w	r8, #0
 80100f2:	ee18 1a10 	vmov	r1, s16
 80100f6:	2201      	movs	r2, #1
 80100f8:	4620      	mov	r0, r4
 80100fa:	f000 fcf1 	bl	8010ae0 <__lshift>
 80100fe:	4631      	mov	r1, r6
 8010100:	ee08 0a10 	vmov	s16, r0
 8010104:	f000 fd5c 	bl	8010bc0 <__mcmp>
 8010108:	2800      	cmp	r0, #0
 801010a:	dc91      	bgt.n	8010030 <_dtoa_r+0xaa8>
 801010c:	d102      	bne.n	8010114 <_dtoa_r+0xb8c>
 801010e:	f01a 0f01 	tst.w	sl, #1
 8010112:	d18d      	bne.n	8010030 <_dtoa_r+0xaa8>
 8010114:	462b      	mov	r3, r5
 8010116:	461d      	mov	r5, r3
 8010118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801011c:	2a30      	cmp	r2, #48	; 0x30
 801011e:	d0fa      	beq.n	8010116 <_dtoa_r+0xb8e>
 8010120:	e6d7      	b.n	800fed2 <_dtoa_r+0x94a>
 8010122:	9a01      	ldr	r2, [sp, #4]
 8010124:	429a      	cmp	r2, r3
 8010126:	d184      	bne.n	8010032 <_dtoa_r+0xaaa>
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	2331      	movs	r3, #49	; 0x31
 8010130:	7013      	strb	r3, [r2, #0]
 8010132:	e6ce      	b.n	800fed2 <_dtoa_r+0x94a>
 8010134:	4b09      	ldr	r3, [pc, #36]	; (801015c <_dtoa_r+0xbd4>)
 8010136:	f7ff ba95 	b.w	800f664 <_dtoa_r+0xdc>
 801013a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801013c:	2b00      	cmp	r3, #0
 801013e:	f47f aa6e 	bne.w	800f61e <_dtoa_r+0x96>
 8010142:	4b07      	ldr	r3, [pc, #28]	; (8010160 <_dtoa_r+0xbd8>)
 8010144:	f7ff ba8e 	b.w	800f664 <_dtoa_r+0xdc>
 8010148:	9b02      	ldr	r3, [sp, #8]
 801014a:	2b00      	cmp	r3, #0
 801014c:	dcae      	bgt.n	80100ac <_dtoa_r+0xb24>
 801014e:	9b06      	ldr	r3, [sp, #24]
 8010150:	2b02      	cmp	r3, #2
 8010152:	f73f aea8 	bgt.w	800fea6 <_dtoa_r+0x91e>
 8010156:	e7a9      	b.n	80100ac <_dtoa_r+0xb24>
 8010158:	0803abc5 	.word	0x0803abc5
 801015c:	0803adf8 	.word	0x0803adf8
 8010160:	0803ab5d 	.word	0x0803ab5d

08010164 <__sflush_r>:
 8010164:	898a      	ldrh	r2, [r1, #12]
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	4605      	mov	r5, r0
 801016c:	0710      	lsls	r0, r2, #28
 801016e:	460c      	mov	r4, r1
 8010170:	d458      	bmi.n	8010224 <__sflush_r+0xc0>
 8010172:	684b      	ldr	r3, [r1, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	dc05      	bgt.n	8010184 <__sflush_r+0x20>
 8010178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801017a:	2b00      	cmp	r3, #0
 801017c:	dc02      	bgt.n	8010184 <__sflush_r+0x20>
 801017e:	2000      	movs	r0, #0
 8010180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010186:	2e00      	cmp	r6, #0
 8010188:	d0f9      	beq.n	801017e <__sflush_r+0x1a>
 801018a:	2300      	movs	r3, #0
 801018c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010190:	682f      	ldr	r7, [r5, #0]
 8010192:	602b      	str	r3, [r5, #0]
 8010194:	d032      	beq.n	80101fc <__sflush_r+0x98>
 8010196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	075a      	lsls	r2, r3, #29
 801019c:	d505      	bpl.n	80101aa <__sflush_r+0x46>
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	1ac0      	subs	r0, r0, r3
 80101a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101a4:	b10b      	cbz	r3, 80101aa <__sflush_r+0x46>
 80101a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101a8:	1ac0      	subs	r0, r0, r3
 80101aa:	2300      	movs	r3, #0
 80101ac:	4602      	mov	r2, r0
 80101ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101b0:	6a21      	ldr	r1, [r4, #32]
 80101b2:	4628      	mov	r0, r5
 80101b4:	47b0      	blx	r6
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	d106      	bne.n	80101ca <__sflush_r+0x66>
 80101bc:	6829      	ldr	r1, [r5, #0]
 80101be:	291d      	cmp	r1, #29
 80101c0:	d82c      	bhi.n	801021c <__sflush_r+0xb8>
 80101c2:	4a2a      	ldr	r2, [pc, #168]	; (801026c <__sflush_r+0x108>)
 80101c4:	40ca      	lsrs	r2, r1
 80101c6:	07d6      	lsls	r6, r2, #31
 80101c8:	d528      	bpl.n	801021c <__sflush_r+0xb8>
 80101ca:	2200      	movs	r2, #0
 80101cc:	6062      	str	r2, [r4, #4]
 80101ce:	04d9      	lsls	r1, r3, #19
 80101d0:	6922      	ldr	r2, [r4, #16]
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	d504      	bpl.n	80101e0 <__sflush_r+0x7c>
 80101d6:	1c42      	adds	r2, r0, #1
 80101d8:	d101      	bne.n	80101de <__sflush_r+0x7a>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	b903      	cbnz	r3, 80101e0 <__sflush_r+0x7c>
 80101de:	6560      	str	r0, [r4, #84]	; 0x54
 80101e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101e2:	602f      	str	r7, [r5, #0]
 80101e4:	2900      	cmp	r1, #0
 80101e6:	d0ca      	beq.n	801017e <__sflush_r+0x1a>
 80101e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d002      	beq.n	80101f6 <__sflush_r+0x92>
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7fd f87d 	bl	800d2f0 <_free_r>
 80101f6:	2000      	movs	r0, #0
 80101f8:	6360      	str	r0, [r4, #52]	; 0x34
 80101fa:	e7c1      	b.n	8010180 <__sflush_r+0x1c>
 80101fc:	6a21      	ldr	r1, [r4, #32]
 80101fe:	2301      	movs	r3, #1
 8010200:	4628      	mov	r0, r5
 8010202:	47b0      	blx	r6
 8010204:	1c41      	adds	r1, r0, #1
 8010206:	d1c7      	bne.n	8010198 <__sflush_r+0x34>
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d0c4      	beq.n	8010198 <__sflush_r+0x34>
 801020e:	2b1d      	cmp	r3, #29
 8010210:	d001      	beq.n	8010216 <__sflush_r+0xb2>
 8010212:	2b16      	cmp	r3, #22
 8010214:	d101      	bne.n	801021a <__sflush_r+0xb6>
 8010216:	602f      	str	r7, [r5, #0]
 8010218:	e7b1      	b.n	801017e <__sflush_r+0x1a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010220:	81a3      	strh	r3, [r4, #12]
 8010222:	e7ad      	b.n	8010180 <__sflush_r+0x1c>
 8010224:	690f      	ldr	r7, [r1, #16]
 8010226:	2f00      	cmp	r7, #0
 8010228:	d0a9      	beq.n	801017e <__sflush_r+0x1a>
 801022a:	0793      	lsls	r3, r2, #30
 801022c:	680e      	ldr	r6, [r1, #0]
 801022e:	bf08      	it	eq
 8010230:	694b      	ldreq	r3, [r1, #20]
 8010232:	600f      	str	r7, [r1, #0]
 8010234:	bf18      	it	ne
 8010236:	2300      	movne	r3, #0
 8010238:	eba6 0807 	sub.w	r8, r6, r7
 801023c:	608b      	str	r3, [r1, #8]
 801023e:	f1b8 0f00 	cmp.w	r8, #0
 8010242:	dd9c      	ble.n	801017e <__sflush_r+0x1a>
 8010244:	6a21      	ldr	r1, [r4, #32]
 8010246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010248:	4643      	mov	r3, r8
 801024a:	463a      	mov	r2, r7
 801024c:	4628      	mov	r0, r5
 801024e:	47b0      	blx	r6
 8010250:	2800      	cmp	r0, #0
 8010252:	dc06      	bgt.n	8010262 <__sflush_r+0xfe>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801025a:	81a3      	strh	r3, [r4, #12]
 801025c:	f04f 30ff 	mov.w	r0, #4294967295
 8010260:	e78e      	b.n	8010180 <__sflush_r+0x1c>
 8010262:	4407      	add	r7, r0
 8010264:	eba8 0800 	sub.w	r8, r8, r0
 8010268:	e7e9      	b.n	801023e <__sflush_r+0xda>
 801026a:	bf00      	nop
 801026c:	20400001 	.word	0x20400001

08010270 <_fflush_r>:
 8010270:	b538      	push	{r3, r4, r5, lr}
 8010272:	690b      	ldr	r3, [r1, #16]
 8010274:	4605      	mov	r5, r0
 8010276:	460c      	mov	r4, r1
 8010278:	b913      	cbnz	r3, 8010280 <_fflush_r+0x10>
 801027a:	2500      	movs	r5, #0
 801027c:	4628      	mov	r0, r5
 801027e:	bd38      	pop	{r3, r4, r5, pc}
 8010280:	b118      	cbz	r0, 801028a <_fflush_r+0x1a>
 8010282:	6983      	ldr	r3, [r0, #24]
 8010284:	b90b      	cbnz	r3, 801028a <_fflush_r+0x1a>
 8010286:	f000 f887 	bl	8010398 <__sinit>
 801028a:	4b14      	ldr	r3, [pc, #80]	; (80102dc <_fflush_r+0x6c>)
 801028c:	429c      	cmp	r4, r3
 801028e:	d11b      	bne.n	80102c8 <_fflush_r+0x58>
 8010290:	686c      	ldr	r4, [r5, #4]
 8010292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0ef      	beq.n	801027a <_fflush_r+0xa>
 801029a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801029c:	07d0      	lsls	r0, r2, #31
 801029e:	d404      	bmi.n	80102aa <_fflush_r+0x3a>
 80102a0:	0599      	lsls	r1, r3, #22
 80102a2:	d402      	bmi.n	80102aa <_fflush_r+0x3a>
 80102a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102a6:	f000 f967 	bl	8010578 <__retarget_lock_acquire_recursive>
 80102aa:	4628      	mov	r0, r5
 80102ac:	4621      	mov	r1, r4
 80102ae:	f7ff ff59 	bl	8010164 <__sflush_r>
 80102b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102b4:	07da      	lsls	r2, r3, #31
 80102b6:	4605      	mov	r5, r0
 80102b8:	d4e0      	bmi.n	801027c <_fflush_r+0xc>
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	059b      	lsls	r3, r3, #22
 80102be:	d4dd      	bmi.n	801027c <_fflush_r+0xc>
 80102c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102c2:	f000 f95b 	bl	801057c <__retarget_lock_release_recursive>
 80102c6:	e7d9      	b.n	801027c <_fflush_r+0xc>
 80102c8:	4b05      	ldr	r3, [pc, #20]	; (80102e0 <_fflush_r+0x70>)
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d101      	bne.n	80102d2 <_fflush_r+0x62>
 80102ce:	68ac      	ldr	r4, [r5, #8]
 80102d0:	e7df      	b.n	8010292 <_fflush_r+0x22>
 80102d2:	4b04      	ldr	r3, [pc, #16]	; (80102e4 <_fflush_r+0x74>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	bf08      	it	eq
 80102d8:	68ec      	ldreq	r4, [r5, #12]
 80102da:	e7da      	b.n	8010292 <_fflush_r+0x22>
 80102dc:	0803abf8 	.word	0x0803abf8
 80102e0:	0803ac18 	.word	0x0803ac18
 80102e4:	0803abd8 	.word	0x0803abd8

080102e8 <std>:
 80102e8:	2300      	movs	r3, #0
 80102ea:	b510      	push	{r4, lr}
 80102ec:	4604      	mov	r4, r0
 80102ee:	e9c0 3300 	strd	r3, r3, [r0]
 80102f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102f6:	6083      	str	r3, [r0, #8]
 80102f8:	8181      	strh	r1, [r0, #12]
 80102fa:	6643      	str	r3, [r0, #100]	; 0x64
 80102fc:	81c2      	strh	r2, [r0, #14]
 80102fe:	6183      	str	r3, [r0, #24]
 8010300:	4619      	mov	r1, r3
 8010302:	2208      	movs	r2, #8
 8010304:	305c      	adds	r0, #92	; 0x5c
 8010306:	f7fc fd79 	bl	800cdfc <memset>
 801030a:	4b05      	ldr	r3, [pc, #20]	; (8010320 <std+0x38>)
 801030c:	6263      	str	r3, [r4, #36]	; 0x24
 801030e:	4b05      	ldr	r3, [pc, #20]	; (8010324 <std+0x3c>)
 8010310:	62a3      	str	r3, [r4, #40]	; 0x28
 8010312:	4b05      	ldr	r3, [pc, #20]	; (8010328 <std+0x40>)
 8010314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010316:	4b05      	ldr	r3, [pc, #20]	; (801032c <std+0x44>)
 8010318:	6224      	str	r4, [r4, #32]
 801031a:	6323      	str	r3, [r4, #48]	; 0x30
 801031c:	bd10      	pop	{r4, pc}
 801031e:	bf00      	nop
 8010320:	0800e0f1 	.word	0x0800e0f1
 8010324:	0800e117 	.word	0x0800e117
 8010328:	0800e14f 	.word	0x0800e14f
 801032c:	0800e173 	.word	0x0800e173

08010330 <_cleanup_r>:
 8010330:	4901      	ldr	r1, [pc, #4]	; (8010338 <_cleanup_r+0x8>)
 8010332:	f000 b8af 	b.w	8010494 <_fwalk_reent>
 8010336:	bf00      	nop
 8010338:	08010271 	.word	0x08010271

0801033c <__sfmoreglue>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	2268      	movs	r2, #104	; 0x68
 8010340:	1e4d      	subs	r5, r1, #1
 8010342:	4355      	muls	r5, r2
 8010344:	460e      	mov	r6, r1
 8010346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801034a:	f7fd f83d 	bl	800d3c8 <_malloc_r>
 801034e:	4604      	mov	r4, r0
 8010350:	b140      	cbz	r0, 8010364 <__sfmoreglue+0x28>
 8010352:	2100      	movs	r1, #0
 8010354:	e9c0 1600 	strd	r1, r6, [r0]
 8010358:	300c      	adds	r0, #12
 801035a:	60a0      	str	r0, [r4, #8]
 801035c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010360:	f7fc fd4c 	bl	800cdfc <memset>
 8010364:	4620      	mov	r0, r4
 8010366:	bd70      	pop	{r4, r5, r6, pc}

08010368 <__sfp_lock_acquire>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__sfp_lock_acquire+0x8>)
 801036a:	f000 b905 	b.w	8010578 <__retarget_lock_acquire_recursive>
 801036e:	bf00      	nop
 8010370:	20003a3a 	.word	0x20003a3a

08010374 <__sfp_lock_release>:
 8010374:	4801      	ldr	r0, [pc, #4]	; (801037c <__sfp_lock_release+0x8>)
 8010376:	f000 b901 	b.w	801057c <__retarget_lock_release_recursive>
 801037a:	bf00      	nop
 801037c:	20003a3a 	.word	0x20003a3a

08010380 <__sinit_lock_acquire>:
 8010380:	4801      	ldr	r0, [pc, #4]	; (8010388 <__sinit_lock_acquire+0x8>)
 8010382:	f000 b8f9 	b.w	8010578 <__retarget_lock_acquire_recursive>
 8010386:	bf00      	nop
 8010388:	20003a3b 	.word	0x20003a3b

0801038c <__sinit_lock_release>:
 801038c:	4801      	ldr	r0, [pc, #4]	; (8010394 <__sinit_lock_release+0x8>)
 801038e:	f000 b8f5 	b.w	801057c <__retarget_lock_release_recursive>
 8010392:	bf00      	nop
 8010394:	20003a3b 	.word	0x20003a3b

08010398 <__sinit>:
 8010398:	b510      	push	{r4, lr}
 801039a:	4604      	mov	r4, r0
 801039c:	f7ff fff0 	bl	8010380 <__sinit_lock_acquire>
 80103a0:	69a3      	ldr	r3, [r4, #24]
 80103a2:	b11b      	cbz	r3, 80103ac <__sinit+0x14>
 80103a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103a8:	f7ff bff0 	b.w	801038c <__sinit_lock_release>
 80103ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103b0:	6523      	str	r3, [r4, #80]	; 0x50
 80103b2:	4b13      	ldr	r3, [pc, #76]	; (8010400 <__sinit+0x68>)
 80103b4:	4a13      	ldr	r2, [pc, #76]	; (8010404 <__sinit+0x6c>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80103ba:	42a3      	cmp	r3, r4
 80103bc:	bf04      	itt	eq
 80103be:	2301      	moveq	r3, #1
 80103c0:	61a3      	streq	r3, [r4, #24]
 80103c2:	4620      	mov	r0, r4
 80103c4:	f000 f820 	bl	8010408 <__sfp>
 80103c8:	6060      	str	r0, [r4, #4]
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f81c 	bl	8010408 <__sfp>
 80103d0:	60a0      	str	r0, [r4, #8]
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 f818 	bl	8010408 <__sfp>
 80103d8:	2200      	movs	r2, #0
 80103da:	60e0      	str	r0, [r4, #12]
 80103dc:	2104      	movs	r1, #4
 80103de:	6860      	ldr	r0, [r4, #4]
 80103e0:	f7ff ff82 	bl	80102e8 <std>
 80103e4:	68a0      	ldr	r0, [r4, #8]
 80103e6:	2201      	movs	r2, #1
 80103e8:	2109      	movs	r1, #9
 80103ea:	f7ff ff7d 	bl	80102e8 <std>
 80103ee:	68e0      	ldr	r0, [r4, #12]
 80103f0:	2202      	movs	r2, #2
 80103f2:	2112      	movs	r1, #18
 80103f4:	f7ff ff78 	bl	80102e8 <std>
 80103f8:	2301      	movs	r3, #1
 80103fa:	61a3      	str	r3, [r4, #24]
 80103fc:	e7d2      	b.n	80103a4 <__sinit+0xc>
 80103fe:	bf00      	nop
 8010400:	0803a69c 	.word	0x0803a69c
 8010404:	08010331 	.word	0x08010331

08010408 <__sfp>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	4607      	mov	r7, r0
 801040c:	f7ff ffac 	bl	8010368 <__sfp_lock_acquire>
 8010410:	4b1e      	ldr	r3, [pc, #120]	; (801048c <__sfp+0x84>)
 8010412:	681e      	ldr	r6, [r3, #0]
 8010414:	69b3      	ldr	r3, [r6, #24]
 8010416:	b913      	cbnz	r3, 801041e <__sfp+0x16>
 8010418:	4630      	mov	r0, r6
 801041a:	f7ff ffbd 	bl	8010398 <__sinit>
 801041e:	3648      	adds	r6, #72	; 0x48
 8010420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010424:	3b01      	subs	r3, #1
 8010426:	d503      	bpl.n	8010430 <__sfp+0x28>
 8010428:	6833      	ldr	r3, [r6, #0]
 801042a:	b30b      	cbz	r3, 8010470 <__sfp+0x68>
 801042c:	6836      	ldr	r6, [r6, #0]
 801042e:	e7f7      	b.n	8010420 <__sfp+0x18>
 8010430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010434:	b9d5      	cbnz	r5, 801046c <__sfp+0x64>
 8010436:	4b16      	ldr	r3, [pc, #88]	; (8010490 <__sfp+0x88>)
 8010438:	60e3      	str	r3, [r4, #12]
 801043a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801043e:	6665      	str	r5, [r4, #100]	; 0x64
 8010440:	f000 f898 	bl	8010574 <__retarget_lock_init_recursive>
 8010444:	f7ff ff96 	bl	8010374 <__sfp_lock_release>
 8010448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801044c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010450:	6025      	str	r5, [r4, #0]
 8010452:	61a5      	str	r5, [r4, #24]
 8010454:	2208      	movs	r2, #8
 8010456:	4629      	mov	r1, r5
 8010458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801045c:	f7fc fcce 	bl	800cdfc <memset>
 8010460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010468:	4620      	mov	r0, r4
 801046a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046c:	3468      	adds	r4, #104	; 0x68
 801046e:	e7d9      	b.n	8010424 <__sfp+0x1c>
 8010470:	2104      	movs	r1, #4
 8010472:	4638      	mov	r0, r7
 8010474:	f7ff ff62 	bl	801033c <__sfmoreglue>
 8010478:	4604      	mov	r4, r0
 801047a:	6030      	str	r0, [r6, #0]
 801047c:	2800      	cmp	r0, #0
 801047e:	d1d5      	bne.n	801042c <__sfp+0x24>
 8010480:	f7ff ff78 	bl	8010374 <__sfp_lock_release>
 8010484:	230c      	movs	r3, #12
 8010486:	603b      	str	r3, [r7, #0]
 8010488:	e7ee      	b.n	8010468 <__sfp+0x60>
 801048a:	bf00      	nop
 801048c:	0803a69c 	.word	0x0803a69c
 8010490:	ffff0001 	.word	0xffff0001

08010494 <_fwalk_reent>:
 8010494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010498:	4606      	mov	r6, r0
 801049a:	4688      	mov	r8, r1
 801049c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104a0:	2700      	movs	r7, #0
 80104a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104a6:	f1b9 0901 	subs.w	r9, r9, #1
 80104aa:	d505      	bpl.n	80104b8 <_fwalk_reent+0x24>
 80104ac:	6824      	ldr	r4, [r4, #0]
 80104ae:	2c00      	cmp	r4, #0
 80104b0:	d1f7      	bne.n	80104a2 <_fwalk_reent+0xe>
 80104b2:	4638      	mov	r0, r7
 80104b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104b8:	89ab      	ldrh	r3, [r5, #12]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d907      	bls.n	80104ce <_fwalk_reent+0x3a>
 80104be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104c2:	3301      	adds	r3, #1
 80104c4:	d003      	beq.n	80104ce <_fwalk_reent+0x3a>
 80104c6:	4629      	mov	r1, r5
 80104c8:	4630      	mov	r0, r6
 80104ca:	47c0      	blx	r8
 80104cc:	4307      	orrs	r7, r0
 80104ce:	3568      	adds	r5, #104	; 0x68
 80104d0:	e7e9      	b.n	80104a6 <_fwalk_reent+0x12>
	...

080104d4 <_findenv_r>:
 80104d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8010548 <_findenv_r+0x74>
 80104dc:	4607      	mov	r7, r0
 80104de:	4689      	mov	r9, r1
 80104e0:	4616      	mov	r6, r2
 80104e2:	f001 fac7 	bl	8011a74 <__env_lock>
 80104e6:	f8da 4000 	ldr.w	r4, [sl]
 80104ea:	b134      	cbz	r4, 80104fa <_findenv_r+0x26>
 80104ec:	464b      	mov	r3, r9
 80104ee:	4698      	mov	r8, r3
 80104f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f4:	b13a      	cbz	r2, 8010506 <_findenv_r+0x32>
 80104f6:	2a3d      	cmp	r2, #61	; 0x3d
 80104f8:	d1f9      	bne.n	80104ee <_findenv_r+0x1a>
 80104fa:	4638      	mov	r0, r7
 80104fc:	f001 fac0 	bl	8011a80 <__env_unlock>
 8010500:	2000      	movs	r0, #0
 8010502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010506:	eba8 0809 	sub.w	r8, r8, r9
 801050a:	46a3      	mov	fp, r4
 801050c:	f854 0b04 	ldr.w	r0, [r4], #4
 8010510:	2800      	cmp	r0, #0
 8010512:	d0f2      	beq.n	80104fa <_findenv_r+0x26>
 8010514:	4642      	mov	r2, r8
 8010516:	4649      	mov	r1, r9
 8010518:	f001 f9da 	bl	80118d0 <strncmp>
 801051c:	2800      	cmp	r0, #0
 801051e:	d1f4      	bne.n	801050a <_findenv_r+0x36>
 8010520:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010524:	eb03 0508 	add.w	r5, r3, r8
 8010528:	f813 3008 	ldrb.w	r3, [r3, r8]
 801052c:	2b3d      	cmp	r3, #61	; 0x3d
 801052e:	d1ec      	bne.n	801050a <_findenv_r+0x36>
 8010530:	f8da 3000 	ldr.w	r3, [sl]
 8010534:	ebab 0303 	sub.w	r3, fp, r3
 8010538:	109b      	asrs	r3, r3, #2
 801053a:	4638      	mov	r0, r7
 801053c:	6033      	str	r3, [r6, #0]
 801053e:	f001 fa9f 	bl	8011a80 <__env_unlock>
 8010542:	1c68      	adds	r0, r5, #1
 8010544:	e7dd      	b.n	8010502 <_findenv_r+0x2e>
 8010546:	bf00      	nop
 8010548:	20000388 	.word	0x20000388

0801054c <_getenv_r>:
 801054c:	b507      	push	{r0, r1, r2, lr}
 801054e:	aa01      	add	r2, sp, #4
 8010550:	f7ff ffc0 	bl	80104d4 <_findenv_r>
 8010554:	b003      	add	sp, #12
 8010556:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801055c <__gettzinfo>:
 801055c:	4800      	ldr	r0, [pc, #0]	; (8010560 <__gettzinfo+0x4>)
 801055e:	4770      	bx	lr
 8010560:	20000330 	.word	0x20000330

08010564 <labs>:
 8010564:	2800      	cmp	r0, #0
 8010566:	bfb8      	it	lt
 8010568:	4240      	neglt	r0, r0
 801056a:	4770      	bx	lr

0801056c <_localeconv_r>:
 801056c:	4800      	ldr	r0, [pc, #0]	; (8010570 <_localeconv_r+0x4>)
 801056e:	4770      	bx	lr
 8010570:	2000047c 	.word	0x2000047c

08010574 <__retarget_lock_init_recursive>:
 8010574:	4770      	bx	lr

08010576 <__retarget_lock_acquire>:
 8010576:	4770      	bx	lr

08010578 <__retarget_lock_acquire_recursive>:
 8010578:	4770      	bx	lr

0801057a <__retarget_lock_release>:
 801057a:	4770      	bx	lr

0801057c <__retarget_lock_release_recursive>:
 801057c:	4770      	bx	lr
	...

08010580 <_lseek_r>:
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	4d07      	ldr	r5, [pc, #28]	; (80105a0 <_lseek_r+0x20>)
 8010584:	4604      	mov	r4, r0
 8010586:	4608      	mov	r0, r1
 8010588:	4611      	mov	r1, r2
 801058a:	2200      	movs	r2, #0
 801058c:	602a      	str	r2, [r5, #0]
 801058e:	461a      	mov	r2, r3
 8010590:	f003 ff2c 	bl	80143ec <_lseek>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d102      	bne.n	801059e <_lseek_r+0x1e>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	b103      	cbz	r3, 801059e <_lseek_r+0x1e>
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	20003a40 	.word	0x20003a40

080105a4 <__swhatbuf_r>:
 80105a4:	b570      	push	{r4, r5, r6, lr}
 80105a6:	460e      	mov	r6, r1
 80105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ac:	2900      	cmp	r1, #0
 80105ae:	b096      	sub	sp, #88	; 0x58
 80105b0:	4614      	mov	r4, r2
 80105b2:	461d      	mov	r5, r3
 80105b4:	da08      	bge.n	80105c8 <__swhatbuf_r+0x24>
 80105b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	061a      	lsls	r2, r3, #24
 80105c0:	d410      	bmi.n	80105e4 <__swhatbuf_r+0x40>
 80105c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c6:	e00e      	b.n	80105e6 <__swhatbuf_r+0x42>
 80105c8:	466a      	mov	r2, sp
 80105ca:	f001 fa65 	bl	8011a98 <_fstat_r>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	dbf1      	blt.n	80105b6 <__swhatbuf_r+0x12>
 80105d2:	9a01      	ldr	r2, [sp, #4]
 80105d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105dc:	425a      	negs	r2, r3
 80105de:	415a      	adcs	r2, r3
 80105e0:	602a      	str	r2, [r5, #0]
 80105e2:	e7ee      	b.n	80105c2 <__swhatbuf_r+0x1e>
 80105e4:	2340      	movs	r3, #64	; 0x40
 80105e6:	2000      	movs	r0, #0
 80105e8:	6023      	str	r3, [r4, #0]
 80105ea:	b016      	add	sp, #88	; 0x58
 80105ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080105f0 <__smakebuf_r>:
 80105f0:	898b      	ldrh	r3, [r1, #12]
 80105f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105f4:	079d      	lsls	r5, r3, #30
 80105f6:	4606      	mov	r6, r0
 80105f8:	460c      	mov	r4, r1
 80105fa:	d507      	bpl.n	801060c <__smakebuf_r+0x1c>
 80105fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	6123      	str	r3, [r4, #16]
 8010604:	2301      	movs	r3, #1
 8010606:	6163      	str	r3, [r4, #20]
 8010608:	b002      	add	sp, #8
 801060a:	bd70      	pop	{r4, r5, r6, pc}
 801060c:	ab01      	add	r3, sp, #4
 801060e:	466a      	mov	r2, sp
 8010610:	f7ff ffc8 	bl	80105a4 <__swhatbuf_r>
 8010614:	9900      	ldr	r1, [sp, #0]
 8010616:	4605      	mov	r5, r0
 8010618:	4630      	mov	r0, r6
 801061a:	f7fc fed5 	bl	800d3c8 <_malloc_r>
 801061e:	b948      	cbnz	r0, 8010634 <__smakebuf_r+0x44>
 8010620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010624:	059a      	lsls	r2, r3, #22
 8010626:	d4ef      	bmi.n	8010608 <__smakebuf_r+0x18>
 8010628:	f023 0303 	bic.w	r3, r3, #3
 801062c:	f043 0302 	orr.w	r3, r3, #2
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	e7e3      	b.n	80105fc <__smakebuf_r+0xc>
 8010634:	4b0d      	ldr	r3, [pc, #52]	; (801066c <__smakebuf_r+0x7c>)
 8010636:	62b3      	str	r3, [r6, #40]	; 0x28
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	6020      	str	r0, [r4, #0]
 801063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010640:	81a3      	strh	r3, [r4, #12]
 8010642:	9b00      	ldr	r3, [sp, #0]
 8010644:	6163      	str	r3, [r4, #20]
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	6120      	str	r0, [r4, #16]
 801064a:	b15b      	cbz	r3, 8010664 <__smakebuf_r+0x74>
 801064c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010650:	4630      	mov	r0, r6
 8010652:	f001 fa33 	bl	8011abc <_isatty_r>
 8010656:	b128      	cbz	r0, 8010664 <__smakebuf_r+0x74>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f023 0303 	bic.w	r3, r3, #3
 801065e:	f043 0301 	orr.w	r3, r3, #1
 8010662:	81a3      	strh	r3, [r4, #12]
 8010664:	89a0      	ldrh	r0, [r4, #12]
 8010666:	4305      	orrs	r5, r0
 8010668:	81a5      	strh	r5, [r4, #12]
 801066a:	e7cd      	b.n	8010608 <__smakebuf_r+0x18>
 801066c:	08010331 	.word	0x08010331

08010670 <memmove>:
 8010670:	4288      	cmp	r0, r1
 8010672:	b510      	push	{r4, lr}
 8010674:	eb01 0402 	add.w	r4, r1, r2
 8010678:	d902      	bls.n	8010680 <memmove+0x10>
 801067a:	4284      	cmp	r4, r0
 801067c:	4623      	mov	r3, r4
 801067e:	d807      	bhi.n	8010690 <memmove+0x20>
 8010680:	1e43      	subs	r3, r0, #1
 8010682:	42a1      	cmp	r1, r4
 8010684:	d008      	beq.n	8010698 <memmove+0x28>
 8010686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801068a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801068e:	e7f8      	b.n	8010682 <memmove+0x12>
 8010690:	4402      	add	r2, r0
 8010692:	4601      	mov	r1, r0
 8010694:	428a      	cmp	r2, r1
 8010696:	d100      	bne.n	801069a <memmove+0x2a>
 8010698:	bd10      	pop	{r4, pc}
 801069a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801069e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106a2:	e7f7      	b.n	8010694 <memmove+0x24>

080106a4 <__malloc_lock>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__malloc_lock+0x8>)
 80106a6:	f7ff bf67 	b.w	8010578 <__retarget_lock_acquire_recursive>
 80106aa:	bf00      	nop
 80106ac:	20003a39 	.word	0x20003a39

080106b0 <__malloc_unlock>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__malloc_unlock+0x8>)
 80106b2:	f7ff bf63 	b.w	801057c <__retarget_lock_release_recursive>
 80106b6:	bf00      	nop
 80106b8:	20003a39 	.word	0x20003a39

080106bc <_Balloc>:
 80106bc:	b570      	push	{r4, r5, r6, lr}
 80106be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106c0:	4604      	mov	r4, r0
 80106c2:	460d      	mov	r5, r1
 80106c4:	b976      	cbnz	r6, 80106e4 <_Balloc+0x28>
 80106c6:	2010      	movs	r0, #16
 80106c8:	f7fc fb7a 	bl	800cdc0 <malloc>
 80106cc:	4602      	mov	r2, r0
 80106ce:	6260      	str	r0, [r4, #36]	; 0x24
 80106d0:	b920      	cbnz	r0, 80106dc <_Balloc+0x20>
 80106d2:	4b18      	ldr	r3, [pc, #96]	; (8010734 <_Balloc+0x78>)
 80106d4:	4818      	ldr	r0, [pc, #96]	; (8010738 <_Balloc+0x7c>)
 80106d6:	2166      	movs	r1, #102	; 0x66
 80106d8:	f7fc fb1e 	bl	800cd18 <__assert_func>
 80106dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106e0:	6006      	str	r6, [r0, #0]
 80106e2:	60c6      	str	r6, [r0, #12]
 80106e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80106e6:	68f3      	ldr	r3, [r6, #12]
 80106e8:	b183      	cbz	r3, 801070c <_Balloc+0x50>
 80106ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106f2:	b9b8      	cbnz	r0, 8010724 <_Balloc+0x68>
 80106f4:	2101      	movs	r1, #1
 80106f6:	fa01 f605 	lsl.w	r6, r1, r5
 80106fa:	1d72      	adds	r2, r6, #5
 80106fc:	0092      	lsls	r2, r2, #2
 80106fe:	4620      	mov	r0, r4
 8010700:	f000 fb60 	bl	8010dc4 <_calloc_r>
 8010704:	b160      	cbz	r0, 8010720 <_Balloc+0x64>
 8010706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801070a:	e00e      	b.n	801072a <_Balloc+0x6e>
 801070c:	2221      	movs	r2, #33	; 0x21
 801070e:	2104      	movs	r1, #4
 8010710:	4620      	mov	r0, r4
 8010712:	f000 fb57 	bl	8010dc4 <_calloc_r>
 8010716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010718:	60f0      	str	r0, [r6, #12]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1e4      	bne.n	80106ea <_Balloc+0x2e>
 8010720:	2000      	movs	r0, #0
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	6802      	ldr	r2, [r0, #0]
 8010726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801072a:	2300      	movs	r3, #0
 801072c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010730:	e7f7      	b.n	8010722 <_Balloc+0x66>
 8010732:	bf00      	nop
 8010734:	0803a594 	.word	0x0803a594
 8010738:	0803ac98 	.word	0x0803ac98

0801073c <_Bfree>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010740:	4605      	mov	r5, r0
 8010742:	460c      	mov	r4, r1
 8010744:	b976      	cbnz	r6, 8010764 <_Bfree+0x28>
 8010746:	2010      	movs	r0, #16
 8010748:	f7fc fb3a 	bl	800cdc0 <malloc>
 801074c:	4602      	mov	r2, r0
 801074e:	6268      	str	r0, [r5, #36]	; 0x24
 8010750:	b920      	cbnz	r0, 801075c <_Bfree+0x20>
 8010752:	4b09      	ldr	r3, [pc, #36]	; (8010778 <_Bfree+0x3c>)
 8010754:	4809      	ldr	r0, [pc, #36]	; (801077c <_Bfree+0x40>)
 8010756:	218a      	movs	r1, #138	; 0x8a
 8010758:	f7fc fade 	bl	800cd18 <__assert_func>
 801075c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010760:	6006      	str	r6, [r0, #0]
 8010762:	60c6      	str	r6, [r0, #12]
 8010764:	b13c      	cbz	r4, 8010776 <_Bfree+0x3a>
 8010766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010768:	6862      	ldr	r2, [r4, #4]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010770:	6021      	str	r1, [r4, #0]
 8010772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010776:	bd70      	pop	{r4, r5, r6, pc}
 8010778:	0803a594 	.word	0x0803a594
 801077c:	0803ac98 	.word	0x0803ac98

08010780 <__multadd>:
 8010780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010784:	690d      	ldr	r5, [r1, #16]
 8010786:	4607      	mov	r7, r0
 8010788:	460c      	mov	r4, r1
 801078a:	461e      	mov	r6, r3
 801078c:	f101 0c14 	add.w	ip, r1, #20
 8010790:	2000      	movs	r0, #0
 8010792:	f8dc 3000 	ldr.w	r3, [ip]
 8010796:	b299      	uxth	r1, r3
 8010798:	fb02 6101 	mla	r1, r2, r1, r6
 801079c:	0c1e      	lsrs	r6, r3, #16
 801079e:	0c0b      	lsrs	r3, r1, #16
 80107a0:	fb02 3306 	mla	r3, r2, r6, r3
 80107a4:	b289      	uxth	r1, r1
 80107a6:	3001      	adds	r0, #1
 80107a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107ac:	4285      	cmp	r5, r0
 80107ae:	f84c 1b04 	str.w	r1, [ip], #4
 80107b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107b6:	dcec      	bgt.n	8010792 <__multadd+0x12>
 80107b8:	b30e      	cbz	r6, 80107fe <__multadd+0x7e>
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	42ab      	cmp	r3, r5
 80107be:	dc19      	bgt.n	80107f4 <__multadd+0x74>
 80107c0:	6861      	ldr	r1, [r4, #4]
 80107c2:	4638      	mov	r0, r7
 80107c4:	3101      	adds	r1, #1
 80107c6:	f7ff ff79 	bl	80106bc <_Balloc>
 80107ca:	4680      	mov	r8, r0
 80107cc:	b928      	cbnz	r0, 80107da <__multadd+0x5a>
 80107ce:	4602      	mov	r2, r0
 80107d0:	4b0c      	ldr	r3, [pc, #48]	; (8010804 <__multadd+0x84>)
 80107d2:	480d      	ldr	r0, [pc, #52]	; (8010808 <__multadd+0x88>)
 80107d4:	21b5      	movs	r1, #181	; 0xb5
 80107d6:	f7fc fa9f 	bl	800cd18 <__assert_func>
 80107da:	6922      	ldr	r2, [r4, #16]
 80107dc:	3202      	adds	r2, #2
 80107de:	f104 010c 	add.w	r1, r4, #12
 80107e2:	0092      	lsls	r2, r2, #2
 80107e4:	300c      	adds	r0, #12
 80107e6:	f7fc fafb 	bl	800cde0 <memcpy>
 80107ea:	4621      	mov	r1, r4
 80107ec:	4638      	mov	r0, r7
 80107ee:	f7ff ffa5 	bl	801073c <_Bfree>
 80107f2:	4644      	mov	r4, r8
 80107f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107f8:	3501      	adds	r5, #1
 80107fa:	615e      	str	r6, [r3, #20]
 80107fc:	6125      	str	r5, [r4, #16]
 80107fe:	4620      	mov	r0, r4
 8010800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010804:	0803abc5 	.word	0x0803abc5
 8010808:	0803ac98 	.word	0x0803ac98

0801080c <__hi0bits>:
 801080c:	0c03      	lsrs	r3, r0, #16
 801080e:	041b      	lsls	r3, r3, #16
 8010810:	b9d3      	cbnz	r3, 8010848 <__hi0bits+0x3c>
 8010812:	0400      	lsls	r0, r0, #16
 8010814:	2310      	movs	r3, #16
 8010816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801081a:	bf04      	itt	eq
 801081c:	0200      	lsleq	r0, r0, #8
 801081e:	3308      	addeq	r3, #8
 8010820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010824:	bf04      	itt	eq
 8010826:	0100      	lsleq	r0, r0, #4
 8010828:	3304      	addeq	r3, #4
 801082a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801082e:	bf04      	itt	eq
 8010830:	0080      	lsleq	r0, r0, #2
 8010832:	3302      	addeq	r3, #2
 8010834:	2800      	cmp	r0, #0
 8010836:	db05      	blt.n	8010844 <__hi0bits+0x38>
 8010838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801083c:	f103 0301 	add.w	r3, r3, #1
 8010840:	bf08      	it	eq
 8010842:	2320      	moveq	r3, #32
 8010844:	4618      	mov	r0, r3
 8010846:	4770      	bx	lr
 8010848:	2300      	movs	r3, #0
 801084a:	e7e4      	b.n	8010816 <__hi0bits+0xa>

0801084c <__lo0bits>:
 801084c:	6803      	ldr	r3, [r0, #0]
 801084e:	f013 0207 	ands.w	r2, r3, #7
 8010852:	4601      	mov	r1, r0
 8010854:	d00b      	beq.n	801086e <__lo0bits+0x22>
 8010856:	07da      	lsls	r2, r3, #31
 8010858:	d423      	bmi.n	80108a2 <__lo0bits+0x56>
 801085a:	0798      	lsls	r0, r3, #30
 801085c:	bf49      	itett	mi
 801085e:	085b      	lsrmi	r3, r3, #1
 8010860:	089b      	lsrpl	r3, r3, #2
 8010862:	2001      	movmi	r0, #1
 8010864:	600b      	strmi	r3, [r1, #0]
 8010866:	bf5c      	itt	pl
 8010868:	600b      	strpl	r3, [r1, #0]
 801086a:	2002      	movpl	r0, #2
 801086c:	4770      	bx	lr
 801086e:	b298      	uxth	r0, r3
 8010870:	b9a8      	cbnz	r0, 801089e <__lo0bits+0x52>
 8010872:	0c1b      	lsrs	r3, r3, #16
 8010874:	2010      	movs	r0, #16
 8010876:	b2da      	uxtb	r2, r3
 8010878:	b90a      	cbnz	r2, 801087e <__lo0bits+0x32>
 801087a:	3008      	adds	r0, #8
 801087c:	0a1b      	lsrs	r3, r3, #8
 801087e:	071a      	lsls	r2, r3, #28
 8010880:	bf04      	itt	eq
 8010882:	091b      	lsreq	r3, r3, #4
 8010884:	3004      	addeq	r0, #4
 8010886:	079a      	lsls	r2, r3, #30
 8010888:	bf04      	itt	eq
 801088a:	089b      	lsreq	r3, r3, #2
 801088c:	3002      	addeq	r0, #2
 801088e:	07da      	lsls	r2, r3, #31
 8010890:	d403      	bmi.n	801089a <__lo0bits+0x4e>
 8010892:	085b      	lsrs	r3, r3, #1
 8010894:	f100 0001 	add.w	r0, r0, #1
 8010898:	d005      	beq.n	80108a6 <__lo0bits+0x5a>
 801089a:	600b      	str	r3, [r1, #0]
 801089c:	4770      	bx	lr
 801089e:	4610      	mov	r0, r2
 80108a0:	e7e9      	b.n	8010876 <__lo0bits+0x2a>
 80108a2:	2000      	movs	r0, #0
 80108a4:	4770      	bx	lr
 80108a6:	2020      	movs	r0, #32
 80108a8:	4770      	bx	lr
	...

080108ac <__i2b>:
 80108ac:	b510      	push	{r4, lr}
 80108ae:	460c      	mov	r4, r1
 80108b0:	2101      	movs	r1, #1
 80108b2:	f7ff ff03 	bl	80106bc <_Balloc>
 80108b6:	4602      	mov	r2, r0
 80108b8:	b928      	cbnz	r0, 80108c6 <__i2b+0x1a>
 80108ba:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <__i2b+0x24>)
 80108bc:	4805      	ldr	r0, [pc, #20]	; (80108d4 <__i2b+0x28>)
 80108be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80108c2:	f7fc fa29 	bl	800cd18 <__assert_func>
 80108c6:	2301      	movs	r3, #1
 80108c8:	6144      	str	r4, [r0, #20]
 80108ca:	6103      	str	r3, [r0, #16]
 80108cc:	bd10      	pop	{r4, pc}
 80108ce:	bf00      	nop
 80108d0:	0803abc5 	.word	0x0803abc5
 80108d4:	0803ac98 	.word	0x0803ac98

080108d8 <__multiply>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	4691      	mov	r9, r2
 80108de:	690a      	ldr	r2, [r1, #16]
 80108e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	bfb8      	it	lt
 80108e8:	460b      	movlt	r3, r1
 80108ea:	460c      	mov	r4, r1
 80108ec:	bfbc      	itt	lt
 80108ee:	464c      	movlt	r4, r9
 80108f0:	4699      	movlt	r9, r3
 80108f2:	6927      	ldr	r7, [r4, #16]
 80108f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80108f8:	68a3      	ldr	r3, [r4, #8]
 80108fa:	6861      	ldr	r1, [r4, #4]
 80108fc:	eb07 060a 	add.w	r6, r7, sl
 8010900:	42b3      	cmp	r3, r6
 8010902:	b085      	sub	sp, #20
 8010904:	bfb8      	it	lt
 8010906:	3101      	addlt	r1, #1
 8010908:	f7ff fed8 	bl	80106bc <_Balloc>
 801090c:	b930      	cbnz	r0, 801091c <__multiply+0x44>
 801090e:	4602      	mov	r2, r0
 8010910:	4b44      	ldr	r3, [pc, #272]	; (8010a24 <__multiply+0x14c>)
 8010912:	4845      	ldr	r0, [pc, #276]	; (8010a28 <__multiply+0x150>)
 8010914:	f240 115d 	movw	r1, #349	; 0x15d
 8010918:	f7fc f9fe 	bl	800cd18 <__assert_func>
 801091c:	f100 0514 	add.w	r5, r0, #20
 8010920:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010924:	462b      	mov	r3, r5
 8010926:	2200      	movs	r2, #0
 8010928:	4543      	cmp	r3, r8
 801092a:	d321      	bcc.n	8010970 <__multiply+0x98>
 801092c:	f104 0314 	add.w	r3, r4, #20
 8010930:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010934:	f109 0314 	add.w	r3, r9, #20
 8010938:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801093c:	9202      	str	r2, [sp, #8]
 801093e:	1b3a      	subs	r2, r7, r4
 8010940:	3a15      	subs	r2, #21
 8010942:	f022 0203 	bic.w	r2, r2, #3
 8010946:	3204      	adds	r2, #4
 8010948:	f104 0115 	add.w	r1, r4, #21
 801094c:	428f      	cmp	r7, r1
 801094e:	bf38      	it	cc
 8010950:	2204      	movcc	r2, #4
 8010952:	9201      	str	r2, [sp, #4]
 8010954:	9a02      	ldr	r2, [sp, #8]
 8010956:	9303      	str	r3, [sp, #12]
 8010958:	429a      	cmp	r2, r3
 801095a:	d80c      	bhi.n	8010976 <__multiply+0x9e>
 801095c:	2e00      	cmp	r6, #0
 801095e:	dd03      	ble.n	8010968 <__multiply+0x90>
 8010960:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010964:	2b00      	cmp	r3, #0
 8010966:	d05a      	beq.n	8010a1e <__multiply+0x146>
 8010968:	6106      	str	r6, [r0, #16]
 801096a:	b005      	add	sp, #20
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010970:	f843 2b04 	str.w	r2, [r3], #4
 8010974:	e7d8      	b.n	8010928 <__multiply+0x50>
 8010976:	f8b3 a000 	ldrh.w	sl, [r3]
 801097a:	f1ba 0f00 	cmp.w	sl, #0
 801097e:	d024      	beq.n	80109ca <__multiply+0xf2>
 8010980:	f104 0e14 	add.w	lr, r4, #20
 8010984:	46a9      	mov	r9, r5
 8010986:	f04f 0c00 	mov.w	ip, #0
 801098a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801098e:	f8d9 1000 	ldr.w	r1, [r9]
 8010992:	fa1f fb82 	uxth.w	fp, r2
 8010996:	b289      	uxth	r1, r1
 8010998:	fb0a 110b 	mla	r1, sl, fp, r1
 801099c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109a0:	f8d9 2000 	ldr.w	r2, [r9]
 80109a4:	4461      	add	r1, ip
 80109a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80109ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109b2:	b289      	uxth	r1, r1
 80109b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109b8:	4577      	cmp	r7, lr
 80109ba:	f849 1b04 	str.w	r1, [r9], #4
 80109be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109c2:	d8e2      	bhi.n	801098a <__multiply+0xb2>
 80109c4:	9a01      	ldr	r2, [sp, #4]
 80109c6:	f845 c002 	str.w	ip, [r5, r2]
 80109ca:	9a03      	ldr	r2, [sp, #12]
 80109cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109d0:	3304      	adds	r3, #4
 80109d2:	f1b9 0f00 	cmp.w	r9, #0
 80109d6:	d020      	beq.n	8010a1a <__multiply+0x142>
 80109d8:	6829      	ldr	r1, [r5, #0]
 80109da:	f104 0c14 	add.w	ip, r4, #20
 80109de:	46ae      	mov	lr, r5
 80109e0:	f04f 0a00 	mov.w	sl, #0
 80109e4:	f8bc b000 	ldrh.w	fp, [ip]
 80109e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109ec:	fb09 220b 	mla	r2, r9, fp, r2
 80109f0:	4492      	add	sl, r2
 80109f2:	b289      	uxth	r1, r1
 80109f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80109f8:	f84e 1b04 	str.w	r1, [lr], #4
 80109fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a00:	f8be 1000 	ldrh.w	r1, [lr]
 8010a04:	0c12      	lsrs	r2, r2, #16
 8010a06:	fb09 1102 	mla	r1, r9, r2, r1
 8010a0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010a0e:	4567      	cmp	r7, ip
 8010a10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a14:	d8e6      	bhi.n	80109e4 <__multiply+0x10c>
 8010a16:	9a01      	ldr	r2, [sp, #4]
 8010a18:	50a9      	str	r1, [r5, r2]
 8010a1a:	3504      	adds	r5, #4
 8010a1c:	e79a      	b.n	8010954 <__multiply+0x7c>
 8010a1e:	3e01      	subs	r6, #1
 8010a20:	e79c      	b.n	801095c <__multiply+0x84>
 8010a22:	bf00      	nop
 8010a24:	0803abc5 	.word	0x0803abc5
 8010a28:	0803ac98 	.word	0x0803ac98

08010a2c <__pow5mult>:
 8010a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a30:	4615      	mov	r5, r2
 8010a32:	f012 0203 	ands.w	r2, r2, #3
 8010a36:	4606      	mov	r6, r0
 8010a38:	460f      	mov	r7, r1
 8010a3a:	d007      	beq.n	8010a4c <__pow5mult+0x20>
 8010a3c:	4c25      	ldr	r4, [pc, #148]	; (8010ad4 <__pow5mult+0xa8>)
 8010a3e:	3a01      	subs	r2, #1
 8010a40:	2300      	movs	r3, #0
 8010a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a46:	f7ff fe9b 	bl	8010780 <__multadd>
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	10ad      	asrs	r5, r5, #2
 8010a4e:	d03d      	beq.n	8010acc <__pow5mult+0xa0>
 8010a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a52:	b97c      	cbnz	r4, 8010a74 <__pow5mult+0x48>
 8010a54:	2010      	movs	r0, #16
 8010a56:	f7fc f9b3 	bl	800cdc0 <malloc>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	6270      	str	r0, [r6, #36]	; 0x24
 8010a5e:	b928      	cbnz	r0, 8010a6c <__pow5mult+0x40>
 8010a60:	4b1d      	ldr	r3, [pc, #116]	; (8010ad8 <__pow5mult+0xac>)
 8010a62:	481e      	ldr	r0, [pc, #120]	; (8010adc <__pow5mult+0xb0>)
 8010a64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a68:	f7fc f956 	bl	800cd18 <__assert_func>
 8010a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a70:	6004      	str	r4, [r0, #0]
 8010a72:	60c4      	str	r4, [r0, #12]
 8010a74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a7c:	b94c      	cbnz	r4, 8010a92 <__pow5mult+0x66>
 8010a7e:	f240 2171 	movw	r1, #625	; 0x271
 8010a82:	4630      	mov	r0, r6
 8010a84:	f7ff ff12 	bl	80108ac <__i2b>
 8010a88:	2300      	movs	r3, #0
 8010a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a8e:	4604      	mov	r4, r0
 8010a90:	6003      	str	r3, [r0, #0]
 8010a92:	f04f 0900 	mov.w	r9, #0
 8010a96:	07eb      	lsls	r3, r5, #31
 8010a98:	d50a      	bpl.n	8010ab0 <__pow5mult+0x84>
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	4622      	mov	r2, r4
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7ff ff1a 	bl	80108d8 <__multiply>
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	4680      	mov	r8, r0
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff fe47 	bl	801073c <_Bfree>
 8010aae:	4647      	mov	r7, r8
 8010ab0:	106d      	asrs	r5, r5, #1
 8010ab2:	d00b      	beq.n	8010acc <__pow5mult+0xa0>
 8010ab4:	6820      	ldr	r0, [r4, #0]
 8010ab6:	b938      	cbnz	r0, 8010ac8 <__pow5mult+0x9c>
 8010ab8:	4622      	mov	r2, r4
 8010aba:	4621      	mov	r1, r4
 8010abc:	4630      	mov	r0, r6
 8010abe:	f7ff ff0b 	bl	80108d8 <__multiply>
 8010ac2:	6020      	str	r0, [r4, #0]
 8010ac4:	f8c0 9000 	str.w	r9, [r0]
 8010ac8:	4604      	mov	r4, r0
 8010aca:	e7e4      	b.n	8010a96 <__pow5mult+0x6a>
 8010acc:	4638      	mov	r0, r7
 8010ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad2:	bf00      	nop
 8010ad4:	0803ade8 	.word	0x0803ade8
 8010ad8:	0803a594 	.word	0x0803a594
 8010adc:	0803ac98 	.word	0x0803ac98

08010ae0 <__lshift>:
 8010ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ae4:	460c      	mov	r4, r1
 8010ae6:	6849      	ldr	r1, [r1, #4]
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010aee:	68a3      	ldr	r3, [r4, #8]
 8010af0:	4607      	mov	r7, r0
 8010af2:	4691      	mov	r9, r2
 8010af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010af8:	f108 0601 	add.w	r6, r8, #1
 8010afc:	42b3      	cmp	r3, r6
 8010afe:	db0b      	blt.n	8010b18 <__lshift+0x38>
 8010b00:	4638      	mov	r0, r7
 8010b02:	f7ff fddb 	bl	80106bc <_Balloc>
 8010b06:	4605      	mov	r5, r0
 8010b08:	b948      	cbnz	r0, 8010b1e <__lshift+0x3e>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	4b2a      	ldr	r3, [pc, #168]	; (8010bb8 <__lshift+0xd8>)
 8010b0e:	482b      	ldr	r0, [pc, #172]	; (8010bbc <__lshift+0xdc>)
 8010b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b14:	f7fc f900 	bl	800cd18 <__assert_func>
 8010b18:	3101      	adds	r1, #1
 8010b1a:	005b      	lsls	r3, r3, #1
 8010b1c:	e7ee      	b.n	8010afc <__lshift+0x1c>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	f100 0114 	add.w	r1, r0, #20
 8010b24:	f100 0210 	add.w	r2, r0, #16
 8010b28:	4618      	mov	r0, r3
 8010b2a:	4553      	cmp	r3, sl
 8010b2c:	db37      	blt.n	8010b9e <__lshift+0xbe>
 8010b2e:	6920      	ldr	r0, [r4, #16]
 8010b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b34:	f104 0314 	add.w	r3, r4, #20
 8010b38:	f019 091f 	ands.w	r9, r9, #31
 8010b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b44:	d02f      	beq.n	8010ba6 <__lshift+0xc6>
 8010b46:	f1c9 0e20 	rsb	lr, r9, #32
 8010b4a:	468a      	mov	sl, r1
 8010b4c:	f04f 0c00 	mov.w	ip, #0
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	fa02 f209 	lsl.w	r2, r2, r9
 8010b56:	ea42 020c 	orr.w	r2, r2, ip
 8010b5a:	f84a 2b04 	str.w	r2, [sl], #4
 8010b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b62:	4298      	cmp	r0, r3
 8010b64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b68:	d8f2      	bhi.n	8010b50 <__lshift+0x70>
 8010b6a:	1b03      	subs	r3, r0, r4
 8010b6c:	3b15      	subs	r3, #21
 8010b6e:	f023 0303 	bic.w	r3, r3, #3
 8010b72:	3304      	adds	r3, #4
 8010b74:	f104 0215 	add.w	r2, r4, #21
 8010b78:	4290      	cmp	r0, r2
 8010b7a:	bf38      	it	cc
 8010b7c:	2304      	movcc	r3, #4
 8010b7e:	f841 c003 	str.w	ip, [r1, r3]
 8010b82:	f1bc 0f00 	cmp.w	ip, #0
 8010b86:	d001      	beq.n	8010b8c <__lshift+0xac>
 8010b88:	f108 0602 	add.w	r6, r8, #2
 8010b8c:	3e01      	subs	r6, #1
 8010b8e:	4638      	mov	r0, r7
 8010b90:	612e      	str	r6, [r5, #16]
 8010b92:	4621      	mov	r1, r4
 8010b94:	f7ff fdd2 	bl	801073c <_Bfree>
 8010b98:	4628      	mov	r0, r5
 8010b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	e7c1      	b.n	8010b2a <__lshift+0x4a>
 8010ba6:	3904      	subs	r1, #4
 8010ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bb0:	4298      	cmp	r0, r3
 8010bb2:	d8f9      	bhi.n	8010ba8 <__lshift+0xc8>
 8010bb4:	e7ea      	b.n	8010b8c <__lshift+0xac>
 8010bb6:	bf00      	nop
 8010bb8:	0803abc5 	.word	0x0803abc5
 8010bbc:	0803ac98 	.word	0x0803ac98

08010bc0 <__mcmp>:
 8010bc0:	b530      	push	{r4, r5, lr}
 8010bc2:	6902      	ldr	r2, [r0, #16]
 8010bc4:	690c      	ldr	r4, [r1, #16]
 8010bc6:	1b12      	subs	r2, r2, r4
 8010bc8:	d10e      	bne.n	8010be8 <__mcmp+0x28>
 8010bca:	f100 0314 	add.w	r3, r0, #20
 8010bce:	3114      	adds	r1, #20
 8010bd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010bdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010be0:	42a5      	cmp	r5, r4
 8010be2:	d003      	beq.n	8010bec <__mcmp+0x2c>
 8010be4:	d305      	bcc.n	8010bf2 <__mcmp+0x32>
 8010be6:	2201      	movs	r2, #1
 8010be8:	4610      	mov	r0, r2
 8010bea:	bd30      	pop	{r4, r5, pc}
 8010bec:	4283      	cmp	r3, r0
 8010bee:	d3f3      	bcc.n	8010bd8 <__mcmp+0x18>
 8010bf0:	e7fa      	b.n	8010be8 <__mcmp+0x28>
 8010bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf6:	e7f7      	b.n	8010be8 <__mcmp+0x28>

08010bf8 <__mdiff>:
 8010bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	4606      	mov	r6, r0
 8010c00:	4611      	mov	r1, r2
 8010c02:	4620      	mov	r0, r4
 8010c04:	4690      	mov	r8, r2
 8010c06:	f7ff ffdb 	bl	8010bc0 <__mcmp>
 8010c0a:	1e05      	subs	r5, r0, #0
 8010c0c:	d110      	bne.n	8010c30 <__mdiff+0x38>
 8010c0e:	4629      	mov	r1, r5
 8010c10:	4630      	mov	r0, r6
 8010c12:	f7ff fd53 	bl	80106bc <_Balloc>
 8010c16:	b930      	cbnz	r0, 8010c26 <__mdiff+0x2e>
 8010c18:	4b3a      	ldr	r3, [pc, #232]	; (8010d04 <__mdiff+0x10c>)
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	f240 2132 	movw	r1, #562	; 0x232
 8010c20:	4839      	ldr	r0, [pc, #228]	; (8010d08 <__mdiff+0x110>)
 8010c22:	f7fc f879 	bl	800cd18 <__assert_func>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c30:	bfa4      	itt	ge
 8010c32:	4643      	movge	r3, r8
 8010c34:	46a0      	movge	r8, r4
 8010c36:	4630      	mov	r0, r6
 8010c38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c3c:	bfa6      	itte	ge
 8010c3e:	461c      	movge	r4, r3
 8010c40:	2500      	movge	r5, #0
 8010c42:	2501      	movlt	r5, #1
 8010c44:	f7ff fd3a 	bl	80106bc <_Balloc>
 8010c48:	b920      	cbnz	r0, 8010c54 <__mdiff+0x5c>
 8010c4a:	4b2e      	ldr	r3, [pc, #184]	; (8010d04 <__mdiff+0x10c>)
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c52:	e7e5      	b.n	8010c20 <__mdiff+0x28>
 8010c54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c58:	6926      	ldr	r6, [r4, #16]
 8010c5a:	60c5      	str	r5, [r0, #12]
 8010c5c:	f104 0914 	add.w	r9, r4, #20
 8010c60:	f108 0514 	add.w	r5, r8, #20
 8010c64:	f100 0e14 	add.w	lr, r0, #20
 8010c68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c70:	f108 0210 	add.w	r2, r8, #16
 8010c74:	46f2      	mov	sl, lr
 8010c76:	2100      	movs	r1, #0
 8010c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c80:	fa1f f883 	uxth.w	r8, r3
 8010c84:	fa11 f18b 	uxtah	r1, r1, fp
 8010c88:	0c1b      	lsrs	r3, r3, #16
 8010c8a:	eba1 0808 	sub.w	r8, r1, r8
 8010c8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c96:	fa1f f888 	uxth.w	r8, r8
 8010c9a:	1419      	asrs	r1, r3, #16
 8010c9c:	454e      	cmp	r6, r9
 8010c9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ca2:	f84a 3b04 	str.w	r3, [sl], #4
 8010ca6:	d8e7      	bhi.n	8010c78 <__mdiff+0x80>
 8010ca8:	1b33      	subs	r3, r6, r4
 8010caa:	3b15      	subs	r3, #21
 8010cac:	f023 0303 	bic.w	r3, r3, #3
 8010cb0:	3304      	adds	r3, #4
 8010cb2:	3415      	adds	r4, #21
 8010cb4:	42a6      	cmp	r6, r4
 8010cb6:	bf38      	it	cc
 8010cb8:	2304      	movcc	r3, #4
 8010cba:	441d      	add	r5, r3
 8010cbc:	4473      	add	r3, lr
 8010cbe:	469e      	mov	lr, r3
 8010cc0:	462e      	mov	r6, r5
 8010cc2:	4566      	cmp	r6, ip
 8010cc4:	d30e      	bcc.n	8010ce4 <__mdiff+0xec>
 8010cc6:	f10c 0203 	add.w	r2, ip, #3
 8010cca:	1b52      	subs	r2, r2, r5
 8010ccc:	f022 0203 	bic.w	r2, r2, #3
 8010cd0:	3d03      	subs	r5, #3
 8010cd2:	45ac      	cmp	ip, r5
 8010cd4:	bf38      	it	cc
 8010cd6:	2200      	movcc	r2, #0
 8010cd8:	441a      	add	r2, r3
 8010cda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010cde:	b17b      	cbz	r3, 8010d00 <__mdiff+0x108>
 8010ce0:	6107      	str	r7, [r0, #16]
 8010ce2:	e7a3      	b.n	8010c2c <__mdiff+0x34>
 8010ce4:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ce8:	fa11 f288 	uxtah	r2, r1, r8
 8010cec:	1414      	asrs	r4, r2, #16
 8010cee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cf2:	b292      	uxth	r2, r2
 8010cf4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8010cfc:	1421      	asrs	r1, r4, #16
 8010cfe:	e7e0      	b.n	8010cc2 <__mdiff+0xca>
 8010d00:	3f01      	subs	r7, #1
 8010d02:	e7ea      	b.n	8010cda <__mdiff+0xe2>
 8010d04:	0803abc5 	.word	0x0803abc5
 8010d08:	0803ac98 	.word	0x0803ac98

08010d0c <__d2b>:
 8010d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d10:	4689      	mov	r9, r1
 8010d12:	2101      	movs	r1, #1
 8010d14:	ec57 6b10 	vmov	r6, r7, d0
 8010d18:	4690      	mov	r8, r2
 8010d1a:	f7ff fccf 	bl	80106bc <_Balloc>
 8010d1e:	4604      	mov	r4, r0
 8010d20:	b930      	cbnz	r0, 8010d30 <__d2b+0x24>
 8010d22:	4602      	mov	r2, r0
 8010d24:	4b25      	ldr	r3, [pc, #148]	; (8010dbc <__d2b+0xb0>)
 8010d26:	4826      	ldr	r0, [pc, #152]	; (8010dc0 <__d2b+0xb4>)
 8010d28:	f240 310a 	movw	r1, #778	; 0x30a
 8010d2c:	f7fb fff4 	bl	800cd18 <__assert_func>
 8010d30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010d34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d38:	bb35      	cbnz	r5, 8010d88 <__d2b+0x7c>
 8010d3a:	2e00      	cmp	r6, #0
 8010d3c:	9301      	str	r3, [sp, #4]
 8010d3e:	d028      	beq.n	8010d92 <__d2b+0x86>
 8010d40:	4668      	mov	r0, sp
 8010d42:	9600      	str	r6, [sp, #0]
 8010d44:	f7ff fd82 	bl	801084c <__lo0bits>
 8010d48:	9900      	ldr	r1, [sp, #0]
 8010d4a:	b300      	cbz	r0, 8010d8e <__d2b+0x82>
 8010d4c:	9a01      	ldr	r2, [sp, #4]
 8010d4e:	f1c0 0320 	rsb	r3, r0, #32
 8010d52:	fa02 f303 	lsl.w	r3, r2, r3
 8010d56:	430b      	orrs	r3, r1
 8010d58:	40c2      	lsrs	r2, r0
 8010d5a:	6163      	str	r3, [r4, #20]
 8010d5c:	9201      	str	r2, [sp, #4]
 8010d5e:	9b01      	ldr	r3, [sp, #4]
 8010d60:	61a3      	str	r3, [r4, #24]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bf14      	ite	ne
 8010d66:	2202      	movne	r2, #2
 8010d68:	2201      	moveq	r2, #1
 8010d6a:	6122      	str	r2, [r4, #16]
 8010d6c:	b1d5      	cbz	r5, 8010da4 <__d2b+0x98>
 8010d6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d72:	4405      	add	r5, r0
 8010d74:	f8c9 5000 	str.w	r5, [r9]
 8010d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d7c:	f8c8 0000 	str.w	r0, [r8]
 8010d80:	4620      	mov	r0, r4
 8010d82:	b003      	add	sp, #12
 8010d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d8c:	e7d5      	b.n	8010d3a <__d2b+0x2e>
 8010d8e:	6161      	str	r1, [r4, #20]
 8010d90:	e7e5      	b.n	8010d5e <__d2b+0x52>
 8010d92:	a801      	add	r0, sp, #4
 8010d94:	f7ff fd5a 	bl	801084c <__lo0bits>
 8010d98:	9b01      	ldr	r3, [sp, #4]
 8010d9a:	6163      	str	r3, [r4, #20]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	6122      	str	r2, [r4, #16]
 8010da0:	3020      	adds	r0, #32
 8010da2:	e7e3      	b.n	8010d6c <__d2b+0x60>
 8010da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010dac:	f8c9 0000 	str.w	r0, [r9]
 8010db0:	6918      	ldr	r0, [r3, #16]
 8010db2:	f7ff fd2b 	bl	801080c <__hi0bits>
 8010db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dba:	e7df      	b.n	8010d7c <__d2b+0x70>
 8010dbc:	0803abc5 	.word	0x0803abc5
 8010dc0:	0803ac98 	.word	0x0803ac98

08010dc4 <_calloc_r>:
 8010dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dc6:	fba1 2402 	umull	r2, r4, r1, r2
 8010dca:	b94c      	cbnz	r4, 8010de0 <_calloc_r+0x1c>
 8010dcc:	4611      	mov	r1, r2
 8010dce:	9201      	str	r2, [sp, #4]
 8010dd0:	f7fc fafa 	bl	800d3c8 <_malloc_r>
 8010dd4:	9a01      	ldr	r2, [sp, #4]
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	b930      	cbnz	r0, 8010de8 <_calloc_r+0x24>
 8010dda:	4628      	mov	r0, r5
 8010ddc:	b003      	add	sp, #12
 8010dde:	bd30      	pop	{r4, r5, pc}
 8010de0:	220c      	movs	r2, #12
 8010de2:	6002      	str	r2, [r0, #0]
 8010de4:	2500      	movs	r5, #0
 8010de6:	e7f8      	b.n	8010dda <_calloc_r+0x16>
 8010de8:	4621      	mov	r1, r4
 8010dea:	f7fc f807 	bl	800cdfc <memset>
 8010dee:	e7f4      	b.n	8010dda <_calloc_r+0x16>

08010df0 <_realloc_r>:
 8010df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	4680      	mov	r8, r0
 8010df6:	4614      	mov	r4, r2
 8010df8:	460e      	mov	r6, r1
 8010dfa:	b921      	cbnz	r1, 8010e06 <_realloc_r+0x16>
 8010dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e00:	4611      	mov	r1, r2
 8010e02:	f7fc bae1 	b.w	800d3c8 <_malloc_r>
 8010e06:	b92a      	cbnz	r2, 8010e14 <_realloc_r+0x24>
 8010e08:	f7fc fa72 	bl	800d2f0 <_free_r>
 8010e0c:	4625      	mov	r5, r4
 8010e0e:	4628      	mov	r0, r5
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e14:	f000 fe74 	bl	8011b00 <_malloc_usable_size_r>
 8010e18:	4284      	cmp	r4, r0
 8010e1a:	4607      	mov	r7, r0
 8010e1c:	d802      	bhi.n	8010e24 <_realloc_r+0x34>
 8010e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e22:	d812      	bhi.n	8010e4a <_realloc_r+0x5a>
 8010e24:	4621      	mov	r1, r4
 8010e26:	4640      	mov	r0, r8
 8010e28:	f7fc face 	bl	800d3c8 <_malloc_r>
 8010e2c:	4605      	mov	r5, r0
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0ed      	beq.n	8010e0e <_realloc_r+0x1e>
 8010e32:	42bc      	cmp	r4, r7
 8010e34:	4622      	mov	r2, r4
 8010e36:	4631      	mov	r1, r6
 8010e38:	bf28      	it	cs
 8010e3a:	463a      	movcs	r2, r7
 8010e3c:	f7fb ffd0 	bl	800cde0 <memcpy>
 8010e40:	4631      	mov	r1, r6
 8010e42:	4640      	mov	r0, r8
 8010e44:	f7fc fa54 	bl	800d2f0 <_free_r>
 8010e48:	e7e1      	b.n	8010e0e <_realloc_r+0x1e>
 8010e4a:	4635      	mov	r5, r6
 8010e4c:	e7df      	b.n	8010e0e <_realloc_r+0x1e>

08010e4e <__ssputs_r>:
 8010e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e52:	688e      	ldr	r6, [r1, #8]
 8010e54:	429e      	cmp	r6, r3
 8010e56:	4682      	mov	sl, r0
 8010e58:	460c      	mov	r4, r1
 8010e5a:	4690      	mov	r8, r2
 8010e5c:	461f      	mov	r7, r3
 8010e5e:	d838      	bhi.n	8010ed2 <__ssputs_r+0x84>
 8010e60:	898a      	ldrh	r2, [r1, #12]
 8010e62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e66:	d032      	beq.n	8010ece <__ssputs_r+0x80>
 8010e68:	6825      	ldr	r5, [r4, #0]
 8010e6a:	6909      	ldr	r1, [r1, #16]
 8010e6c:	eba5 0901 	sub.w	r9, r5, r1
 8010e70:	6965      	ldr	r5, [r4, #20]
 8010e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	444b      	add	r3, r9
 8010e7e:	106d      	asrs	r5, r5, #1
 8010e80:	429d      	cmp	r5, r3
 8010e82:	bf38      	it	cc
 8010e84:	461d      	movcc	r5, r3
 8010e86:	0553      	lsls	r3, r2, #21
 8010e88:	d531      	bpl.n	8010eee <__ssputs_r+0xa0>
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	f7fc fa9c 	bl	800d3c8 <_malloc_r>
 8010e90:	4606      	mov	r6, r0
 8010e92:	b950      	cbnz	r0, 8010eaa <__ssputs_r+0x5c>
 8010e94:	230c      	movs	r3, #12
 8010e96:	f8ca 3000 	str.w	r3, [sl]
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea0:	81a3      	strh	r3, [r4, #12]
 8010ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eaa:	6921      	ldr	r1, [r4, #16]
 8010eac:	464a      	mov	r2, r9
 8010eae:	f7fb ff97 	bl	800cde0 <memcpy>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ebc:	81a3      	strh	r3, [r4, #12]
 8010ebe:	6126      	str	r6, [r4, #16]
 8010ec0:	6165      	str	r5, [r4, #20]
 8010ec2:	444e      	add	r6, r9
 8010ec4:	eba5 0509 	sub.w	r5, r5, r9
 8010ec8:	6026      	str	r6, [r4, #0]
 8010eca:	60a5      	str	r5, [r4, #8]
 8010ecc:	463e      	mov	r6, r7
 8010ece:	42be      	cmp	r6, r7
 8010ed0:	d900      	bls.n	8010ed4 <__ssputs_r+0x86>
 8010ed2:	463e      	mov	r6, r7
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	4632      	mov	r2, r6
 8010ed8:	4641      	mov	r1, r8
 8010eda:	f7ff fbc9 	bl	8010670 <memmove>
 8010ede:	68a3      	ldr	r3, [r4, #8]
 8010ee0:	1b9b      	subs	r3, r3, r6
 8010ee2:	60a3      	str	r3, [r4, #8]
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	4433      	add	r3, r6
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	2000      	movs	r0, #0
 8010eec:	e7db      	b.n	8010ea6 <__ssputs_r+0x58>
 8010eee:	462a      	mov	r2, r5
 8010ef0:	f7ff ff7e 	bl	8010df0 <_realloc_r>
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	d1e1      	bne.n	8010ebe <__ssputs_r+0x70>
 8010efa:	6921      	ldr	r1, [r4, #16]
 8010efc:	4650      	mov	r0, sl
 8010efe:	f7fc f9f7 	bl	800d2f0 <_free_r>
 8010f02:	e7c7      	b.n	8010e94 <__ssputs_r+0x46>

08010f04 <_svfiprintf_r>:
 8010f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	4698      	mov	r8, r3
 8010f0a:	898b      	ldrh	r3, [r1, #12]
 8010f0c:	061b      	lsls	r3, r3, #24
 8010f0e:	b09d      	sub	sp, #116	; 0x74
 8010f10:	4607      	mov	r7, r0
 8010f12:	460d      	mov	r5, r1
 8010f14:	4614      	mov	r4, r2
 8010f16:	d50e      	bpl.n	8010f36 <_svfiprintf_r+0x32>
 8010f18:	690b      	ldr	r3, [r1, #16]
 8010f1a:	b963      	cbnz	r3, 8010f36 <_svfiprintf_r+0x32>
 8010f1c:	2140      	movs	r1, #64	; 0x40
 8010f1e:	f7fc fa53 	bl	800d3c8 <_malloc_r>
 8010f22:	6028      	str	r0, [r5, #0]
 8010f24:	6128      	str	r0, [r5, #16]
 8010f26:	b920      	cbnz	r0, 8010f32 <_svfiprintf_r+0x2e>
 8010f28:	230c      	movs	r3, #12
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f30:	e0d1      	b.n	80110d6 <_svfiprintf_r+0x1d2>
 8010f32:	2340      	movs	r3, #64	; 0x40
 8010f34:	616b      	str	r3, [r5, #20]
 8010f36:	2300      	movs	r3, #0
 8010f38:	9309      	str	r3, [sp, #36]	; 0x24
 8010f3a:	2320      	movs	r3, #32
 8010f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f44:	2330      	movs	r3, #48	; 0x30
 8010f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80110f0 <_svfiprintf_r+0x1ec>
 8010f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f4e:	f04f 0901 	mov.w	r9, #1
 8010f52:	4623      	mov	r3, r4
 8010f54:	469a      	mov	sl, r3
 8010f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f5a:	b10a      	cbz	r2, 8010f60 <_svfiprintf_r+0x5c>
 8010f5c:	2a25      	cmp	r2, #37	; 0x25
 8010f5e:	d1f9      	bne.n	8010f54 <_svfiprintf_r+0x50>
 8010f60:	ebba 0b04 	subs.w	fp, sl, r4
 8010f64:	d00b      	beq.n	8010f7e <_svfiprintf_r+0x7a>
 8010f66:	465b      	mov	r3, fp
 8010f68:	4622      	mov	r2, r4
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	f7ff ff6e 	bl	8010e4e <__ssputs_r>
 8010f72:	3001      	adds	r0, #1
 8010f74:	f000 80aa 	beq.w	80110cc <_svfiprintf_r+0x1c8>
 8010f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f7a:	445a      	add	r2, fp
 8010f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 80a2 	beq.w	80110cc <_svfiprintf_r+0x1c8>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f92:	f10a 0a01 	add.w	sl, sl, #1
 8010f96:	9304      	str	r3, [sp, #16]
 8010f98:	9307      	str	r3, [sp, #28]
 8010f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8010fa0:	4654      	mov	r4, sl
 8010fa2:	2205      	movs	r2, #5
 8010fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fa8:	4851      	ldr	r0, [pc, #324]	; (80110f0 <_svfiprintf_r+0x1ec>)
 8010faa:	f7ef f929 	bl	8000200 <memchr>
 8010fae:	9a04      	ldr	r2, [sp, #16]
 8010fb0:	b9d8      	cbnz	r0, 8010fea <_svfiprintf_r+0xe6>
 8010fb2:	06d0      	lsls	r0, r2, #27
 8010fb4:	bf44      	itt	mi
 8010fb6:	2320      	movmi	r3, #32
 8010fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fbc:	0711      	lsls	r1, r2, #28
 8010fbe:	bf44      	itt	mi
 8010fc0:	232b      	movmi	r3, #43	; 0x2b
 8010fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8010fca:	2b2a      	cmp	r3, #42	; 0x2a
 8010fcc:	d015      	beq.n	8010ffa <_svfiprintf_r+0xf6>
 8010fce:	9a07      	ldr	r2, [sp, #28]
 8010fd0:	4654      	mov	r4, sl
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	f04f 0c0a 	mov.w	ip, #10
 8010fd8:	4621      	mov	r1, r4
 8010fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fde:	3b30      	subs	r3, #48	; 0x30
 8010fe0:	2b09      	cmp	r3, #9
 8010fe2:	d94e      	bls.n	8011082 <_svfiprintf_r+0x17e>
 8010fe4:	b1b0      	cbz	r0, 8011014 <_svfiprintf_r+0x110>
 8010fe6:	9207      	str	r2, [sp, #28]
 8010fe8:	e014      	b.n	8011014 <_svfiprintf_r+0x110>
 8010fea:	eba0 0308 	sub.w	r3, r0, r8
 8010fee:	fa09 f303 	lsl.w	r3, r9, r3
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	9304      	str	r3, [sp, #16]
 8010ff6:	46a2      	mov	sl, r4
 8010ff8:	e7d2      	b.n	8010fa0 <_svfiprintf_r+0x9c>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	1d19      	adds	r1, r3, #4
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	9103      	str	r1, [sp, #12]
 8011002:	2b00      	cmp	r3, #0
 8011004:	bfbb      	ittet	lt
 8011006:	425b      	neglt	r3, r3
 8011008:	f042 0202 	orrlt.w	r2, r2, #2
 801100c:	9307      	strge	r3, [sp, #28]
 801100e:	9307      	strlt	r3, [sp, #28]
 8011010:	bfb8      	it	lt
 8011012:	9204      	strlt	r2, [sp, #16]
 8011014:	7823      	ldrb	r3, [r4, #0]
 8011016:	2b2e      	cmp	r3, #46	; 0x2e
 8011018:	d10c      	bne.n	8011034 <_svfiprintf_r+0x130>
 801101a:	7863      	ldrb	r3, [r4, #1]
 801101c:	2b2a      	cmp	r3, #42	; 0x2a
 801101e:	d135      	bne.n	801108c <_svfiprintf_r+0x188>
 8011020:	9b03      	ldr	r3, [sp, #12]
 8011022:	1d1a      	adds	r2, r3, #4
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	9203      	str	r2, [sp, #12]
 8011028:	2b00      	cmp	r3, #0
 801102a:	bfb8      	it	lt
 801102c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011030:	3402      	adds	r4, #2
 8011032:	9305      	str	r3, [sp, #20]
 8011034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011100 <_svfiprintf_r+0x1fc>
 8011038:	7821      	ldrb	r1, [r4, #0]
 801103a:	2203      	movs	r2, #3
 801103c:	4650      	mov	r0, sl
 801103e:	f7ef f8df 	bl	8000200 <memchr>
 8011042:	b140      	cbz	r0, 8011056 <_svfiprintf_r+0x152>
 8011044:	2340      	movs	r3, #64	; 0x40
 8011046:	eba0 000a 	sub.w	r0, r0, sl
 801104a:	fa03 f000 	lsl.w	r0, r3, r0
 801104e:	9b04      	ldr	r3, [sp, #16]
 8011050:	4303      	orrs	r3, r0
 8011052:	3401      	adds	r4, #1
 8011054:	9304      	str	r3, [sp, #16]
 8011056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801105a:	4826      	ldr	r0, [pc, #152]	; (80110f4 <_svfiprintf_r+0x1f0>)
 801105c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011060:	2206      	movs	r2, #6
 8011062:	f7ef f8cd 	bl	8000200 <memchr>
 8011066:	2800      	cmp	r0, #0
 8011068:	d038      	beq.n	80110dc <_svfiprintf_r+0x1d8>
 801106a:	4b23      	ldr	r3, [pc, #140]	; (80110f8 <_svfiprintf_r+0x1f4>)
 801106c:	bb1b      	cbnz	r3, 80110b6 <_svfiprintf_r+0x1b2>
 801106e:	9b03      	ldr	r3, [sp, #12]
 8011070:	3307      	adds	r3, #7
 8011072:	f023 0307 	bic.w	r3, r3, #7
 8011076:	3308      	adds	r3, #8
 8011078:	9303      	str	r3, [sp, #12]
 801107a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801107c:	4433      	add	r3, r6
 801107e:	9309      	str	r3, [sp, #36]	; 0x24
 8011080:	e767      	b.n	8010f52 <_svfiprintf_r+0x4e>
 8011082:	fb0c 3202 	mla	r2, ip, r2, r3
 8011086:	460c      	mov	r4, r1
 8011088:	2001      	movs	r0, #1
 801108a:	e7a5      	b.n	8010fd8 <_svfiprintf_r+0xd4>
 801108c:	2300      	movs	r3, #0
 801108e:	3401      	adds	r4, #1
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	4619      	mov	r1, r3
 8011094:	f04f 0c0a 	mov.w	ip, #10
 8011098:	4620      	mov	r0, r4
 801109a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801109e:	3a30      	subs	r2, #48	; 0x30
 80110a0:	2a09      	cmp	r2, #9
 80110a2:	d903      	bls.n	80110ac <_svfiprintf_r+0x1a8>
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d0c5      	beq.n	8011034 <_svfiprintf_r+0x130>
 80110a8:	9105      	str	r1, [sp, #20]
 80110aa:	e7c3      	b.n	8011034 <_svfiprintf_r+0x130>
 80110ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80110b0:	4604      	mov	r4, r0
 80110b2:	2301      	movs	r3, #1
 80110b4:	e7f0      	b.n	8011098 <_svfiprintf_r+0x194>
 80110b6:	ab03      	add	r3, sp, #12
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	462a      	mov	r2, r5
 80110bc:	4b0f      	ldr	r3, [pc, #60]	; (80110fc <_svfiprintf_r+0x1f8>)
 80110be:	a904      	add	r1, sp, #16
 80110c0:	4638      	mov	r0, r7
 80110c2:	f7fc fbef 	bl	800d8a4 <_printf_float>
 80110c6:	1c42      	adds	r2, r0, #1
 80110c8:	4606      	mov	r6, r0
 80110ca:	d1d6      	bne.n	801107a <_svfiprintf_r+0x176>
 80110cc:	89ab      	ldrh	r3, [r5, #12]
 80110ce:	065b      	lsls	r3, r3, #25
 80110d0:	f53f af2c 	bmi.w	8010f2c <_svfiprintf_r+0x28>
 80110d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110d6:	b01d      	add	sp, #116	; 0x74
 80110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110dc:	ab03      	add	r3, sp, #12
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	462a      	mov	r2, r5
 80110e2:	4b06      	ldr	r3, [pc, #24]	; (80110fc <_svfiprintf_r+0x1f8>)
 80110e4:	a904      	add	r1, sp, #16
 80110e6:	4638      	mov	r0, r7
 80110e8:	f7fc fe80 	bl	800ddec <_printf_i>
 80110ec:	e7eb      	b.n	80110c6 <_svfiprintf_r+0x1c2>
 80110ee:	bf00      	nop
 80110f0:	0803a700 	.word	0x0803a700
 80110f4:	0803a70a 	.word	0x0803a70a
 80110f8:	0800d8a5 	.word	0x0800d8a5
 80110fc:	08010e4f 	.word	0x08010e4f
 8011100:	0803a706 	.word	0x0803a706

08011104 <_sungetc_r>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	1c4b      	adds	r3, r1, #1
 8011108:	4614      	mov	r4, r2
 801110a:	d103      	bne.n	8011114 <_sungetc_r+0x10>
 801110c:	f04f 35ff 	mov.w	r5, #4294967295
 8011110:	4628      	mov	r0, r5
 8011112:	bd38      	pop	{r3, r4, r5, pc}
 8011114:	8993      	ldrh	r3, [r2, #12]
 8011116:	f023 0320 	bic.w	r3, r3, #32
 801111a:	8193      	strh	r3, [r2, #12]
 801111c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801111e:	6852      	ldr	r2, [r2, #4]
 8011120:	b2cd      	uxtb	r5, r1
 8011122:	b18b      	cbz	r3, 8011148 <_sungetc_r+0x44>
 8011124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011126:	4293      	cmp	r3, r2
 8011128:	dd08      	ble.n	801113c <_sungetc_r+0x38>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	1e5a      	subs	r2, r3, #1
 801112e:	6022      	str	r2, [r4, #0]
 8011130:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011134:	6863      	ldr	r3, [r4, #4]
 8011136:	3301      	adds	r3, #1
 8011138:	6063      	str	r3, [r4, #4]
 801113a:	e7e9      	b.n	8011110 <_sungetc_r+0xc>
 801113c:	4621      	mov	r1, r4
 801113e:	f000 fc5f 	bl	8011a00 <__submore>
 8011142:	2800      	cmp	r0, #0
 8011144:	d0f1      	beq.n	801112a <_sungetc_r+0x26>
 8011146:	e7e1      	b.n	801110c <_sungetc_r+0x8>
 8011148:	6921      	ldr	r1, [r4, #16]
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	b151      	cbz	r1, 8011164 <_sungetc_r+0x60>
 801114e:	4299      	cmp	r1, r3
 8011150:	d208      	bcs.n	8011164 <_sungetc_r+0x60>
 8011152:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011156:	42a9      	cmp	r1, r5
 8011158:	d104      	bne.n	8011164 <_sungetc_r+0x60>
 801115a:	3b01      	subs	r3, #1
 801115c:	3201      	adds	r2, #1
 801115e:	6023      	str	r3, [r4, #0]
 8011160:	6062      	str	r2, [r4, #4]
 8011162:	e7d5      	b.n	8011110 <_sungetc_r+0xc>
 8011164:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801116c:	6363      	str	r3, [r4, #52]	; 0x34
 801116e:	2303      	movs	r3, #3
 8011170:	63a3      	str	r3, [r4, #56]	; 0x38
 8011172:	4623      	mov	r3, r4
 8011174:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	2301      	movs	r3, #1
 801117c:	e7dc      	b.n	8011138 <_sungetc_r+0x34>

0801117e <__ssrefill_r>:
 801117e:	b510      	push	{r4, lr}
 8011180:	460c      	mov	r4, r1
 8011182:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011184:	b169      	cbz	r1, 80111a2 <__ssrefill_r+0x24>
 8011186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801118a:	4299      	cmp	r1, r3
 801118c:	d001      	beq.n	8011192 <__ssrefill_r+0x14>
 801118e:	f7fc f8af 	bl	800d2f0 <_free_r>
 8011192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011194:	6063      	str	r3, [r4, #4]
 8011196:	2000      	movs	r0, #0
 8011198:	6360      	str	r0, [r4, #52]	; 0x34
 801119a:	b113      	cbz	r3, 80111a2 <__ssrefill_r+0x24>
 801119c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801119e:	6023      	str	r3, [r4, #0]
 80111a0:	bd10      	pop	{r4, pc}
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	2300      	movs	r3, #0
 80111a8:	6063      	str	r3, [r4, #4]
 80111aa:	89a3      	ldrh	r3, [r4, #12]
 80111ac:	f043 0320 	orr.w	r3, r3, #32
 80111b0:	81a3      	strh	r3, [r4, #12]
 80111b2:	f04f 30ff 	mov.w	r0, #4294967295
 80111b6:	e7f3      	b.n	80111a0 <__ssrefill_r+0x22>

080111b8 <__ssvfiscanf_r>:
 80111b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111bc:	460c      	mov	r4, r1
 80111be:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80111c2:	2100      	movs	r1, #0
 80111c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80111c8:	49a6      	ldr	r1, [pc, #664]	; (8011464 <__ssvfiscanf_r+0x2ac>)
 80111ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80111cc:	f10d 0804 	add.w	r8, sp, #4
 80111d0:	49a5      	ldr	r1, [pc, #660]	; (8011468 <__ssvfiscanf_r+0x2b0>)
 80111d2:	4fa6      	ldr	r7, [pc, #664]	; (801146c <__ssvfiscanf_r+0x2b4>)
 80111d4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011470 <__ssvfiscanf_r+0x2b8>
 80111d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80111dc:	4606      	mov	r6, r0
 80111de:	91a1      	str	r1, [sp, #644]	; 0x284
 80111e0:	9300      	str	r3, [sp, #0]
 80111e2:	7813      	ldrb	r3, [r2, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 815a 	beq.w	801149e <__ssvfiscanf_r+0x2e6>
 80111ea:	5dd9      	ldrb	r1, [r3, r7]
 80111ec:	f011 0108 	ands.w	r1, r1, #8
 80111f0:	f102 0501 	add.w	r5, r2, #1
 80111f4:	d019      	beq.n	801122a <__ssvfiscanf_r+0x72>
 80111f6:	6863      	ldr	r3, [r4, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	dd0f      	ble.n	801121c <__ssvfiscanf_r+0x64>
 80111fc:	6823      	ldr	r3, [r4, #0]
 80111fe:	781a      	ldrb	r2, [r3, #0]
 8011200:	5cba      	ldrb	r2, [r7, r2]
 8011202:	0712      	lsls	r2, r2, #28
 8011204:	d401      	bmi.n	801120a <__ssvfiscanf_r+0x52>
 8011206:	462a      	mov	r2, r5
 8011208:	e7eb      	b.n	80111e2 <__ssvfiscanf_r+0x2a>
 801120a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801120c:	3201      	adds	r2, #1
 801120e:	9245      	str	r2, [sp, #276]	; 0x114
 8011210:	6862      	ldr	r2, [r4, #4]
 8011212:	3301      	adds	r3, #1
 8011214:	3a01      	subs	r2, #1
 8011216:	6062      	str	r2, [r4, #4]
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	e7ec      	b.n	80111f6 <__ssvfiscanf_r+0x3e>
 801121c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801121e:	4621      	mov	r1, r4
 8011220:	4630      	mov	r0, r6
 8011222:	4798      	blx	r3
 8011224:	2800      	cmp	r0, #0
 8011226:	d0e9      	beq.n	80111fc <__ssvfiscanf_r+0x44>
 8011228:	e7ed      	b.n	8011206 <__ssvfiscanf_r+0x4e>
 801122a:	2b25      	cmp	r3, #37	; 0x25
 801122c:	d012      	beq.n	8011254 <__ssvfiscanf_r+0x9c>
 801122e:	469a      	mov	sl, r3
 8011230:	6863      	ldr	r3, [r4, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	f340 8091 	ble.w	801135a <__ssvfiscanf_r+0x1a2>
 8011238:	6822      	ldr	r2, [r4, #0]
 801123a:	7813      	ldrb	r3, [r2, #0]
 801123c:	4553      	cmp	r3, sl
 801123e:	f040 812e 	bne.w	801149e <__ssvfiscanf_r+0x2e6>
 8011242:	6863      	ldr	r3, [r4, #4]
 8011244:	3b01      	subs	r3, #1
 8011246:	6063      	str	r3, [r4, #4]
 8011248:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801124a:	3201      	adds	r2, #1
 801124c:	3301      	adds	r3, #1
 801124e:	6022      	str	r2, [r4, #0]
 8011250:	9345      	str	r3, [sp, #276]	; 0x114
 8011252:	e7d8      	b.n	8011206 <__ssvfiscanf_r+0x4e>
 8011254:	9141      	str	r1, [sp, #260]	; 0x104
 8011256:	9143      	str	r1, [sp, #268]	; 0x10c
 8011258:	7853      	ldrb	r3, [r2, #1]
 801125a:	2b2a      	cmp	r3, #42	; 0x2a
 801125c:	bf02      	ittt	eq
 801125e:	2310      	moveq	r3, #16
 8011260:	1c95      	addeq	r5, r2, #2
 8011262:	9341      	streq	r3, [sp, #260]	; 0x104
 8011264:	220a      	movs	r2, #10
 8011266:	46aa      	mov	sl, r5
 8011268:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801126c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011270:	2b09      	cmp	r3, #9
 8011272:	d91d      	bls.n	80112b0 <__ssvfiscanf_r+0xf8>
 8011274:	487e      	ldr	r0, [pc, #504]	; (8011470 <__ssvfiscanf_r+0x2b8>)
 8011276:	2203      	movs	r2, #3
 8011278:	f7ee ffc2 	bl	8000200 <memchr>
 801127c:	b140      	cbz	r0, 8011290 <__ssvfiscanf_r+0xd8>
 801127e:	2301      	movs	r3, #1
 8011280:	eba0 0009 	sub.w	r0, r0, r9
 8011284:	fa03 f000 	lsl.w	r0, r3, r0
 8011288:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801128a:	4318      	orrs	r0, r3
 801128c:	9041      	str	r0, [sp, #260]	; 0x104
 801128e:	4655      	mov	r5, sl
 8011290:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011294:	2b78      	cmp	r3, #120	; 0x78
 8011296:	d806      	bhi.n	80112a6 <__ssvfiscanf_r+0xee>
 8011298:	2b57      	cmp	r3, #87	; 0x57
 801129a:	d810      	bhi.n	80112be <__ssvfiscanf_r+0x106>
 801129c:	2b25      	cmp	r3, #37	; 0x25
 801129e:	d0c6      	beq.n	801122e <__ssvfiscanf_r+0x76>
 80112a0:	d856      	bhi.n	8011350 <__ssvfiscanf_r+0x198>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d064      	beq.n	8011370 <__ssvfiscanf_r+0x1b8>
 80112a6:	2303      	movs	r3, #3
 80112a8:	9347      	str	r3, [sp, #284]	; 0x11c
 80112aa:	230a      	movs	r3, #10
 80112ac:	9342      	str	r3, [sp, #264]	; 0x108
 80112ae:	e071      	b.n	8011394 <__ssvfiscanf_r+0x1dc>
 80112b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80112b2:	fb02 1103 	mla	r1, r2, r3, r1
 80112b6:	3930      	subs	r1, #48	; 0x30
 80112b8:	9143      	str	r1, [sp, #268]	; 0x10c
 80112ba:	4655      	mov	r5, sl
 80112bc:	e7d3      	b.n	8011266 <__ssvfiscanf_r+0xae>
 80112be:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80112c2:	2a20      	cmp	r2, #32
 80112c4:	d8ef      	bhi.n	80112a6 <__ssvfiscanf_r+0xee>
 80112c6:	a101      	add	r1, pc, #4	; (adr r1, 80112cc <__ssvfiscanf_r+0x114>)
 80112c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80112cc:	0801137f 	.word	0x0801137f
 80112d0:	080112a7 	.word	0x080112a7
 80112d4:	080112a7 	.word	0x080112a7
 80112d8:	080113dd 	.word	0x080113dd
 80112dc:	080112a7 	.word	0x080112a7
 80112e0:	080112a7 	.word	0x080112a7
 80112e4:	080112a7 	.word	0x080112a7
 80112e8:	080112a7 	.word	0x080112a7
 80112ec:	080112a7 	.word	0x080112a7
 80112f0:	080112a7 	.word	0x080112a7
 80112f4:	080112a7 	.word	0x080112a7
 80112f8:	080113f3 	.word	0x080113f3
 80112fc:	080113c9 	.word	0x080113c9
 8011300:	08011357 	.word	0x08011357
 8011304:	08011357 	.word	0x08011357
 8011308:	08011357 	.word	0x08011357
 801130c:	080112a7 	.word	0x080112a7
 8011310:	080113cd 	.word	0x080113cd
 8011314:	080112a7 	.word	0x080112a7
 8011318:	080112a7 	.word	0x080112a7
 801131c:	080112a7 	.word	0x080112a7
 8011320:	080112a7 	.word	0x080112a7
 8011324:	08011403 	.word	0x08011403
 8011328:	080113d5 	.word	0x080113d5
 801132c:	08011377 	.word	0x08011377
 8011330:	080112a7 	.word	0x080112a7
 8011334:	080112a7 	.word	0x080112a7
 8011338:	080113ff 	.word	0x080113ff
 801133c:	080112a7 	.word	0x080112a7
 8011340:	080113c9 	.word	0x080113c9
 8011344:	080112a7 	.word	0x080112a7
 8011348:	080112a7 	.word	0x080112a7
 801134c:	0801137f 	.word	0x0801137f
 8011350:	3b45      	subs	r3, #69	; 0x45
 8011352:	2b02      	cmp	r3, #2
 8011354:	d8a7      	bhi.n	80112a6 <__ssvfiscanf_r+0xee>
 8011356:	2305      	movs	r3, #5
 8011358:	e01b      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 801135a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801135c:	4621      	mov	r1, r4
 801135e:	4630      	mov	r0, r6
 8011360:	4798      	blx	r3
 8011362:	2800      	cmp	r0, #0
 8011364:	f43f af68 	beq.w	8011238 <__ssvfiscanf_r+0x80>
 8011368:	9844      	ldr	r0, [sp, #272]	; 0x110
 801136a:	2800      	cmp	r0, #0
 801136c:	f040 808d 	bne.w	801148a <__ssvfiscanf_r+0x2d2>
 8011370:	f04f 30ff 	mov.w	r0, #4294967295
 8011374:	e08f      	b.n	8011496 <__ssvfiscanf_r+0x2de>
 8011376:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011378:	f042 0220 	orr.w	r2, r2, #32
 801137c:	9241      	str	r2, [sp, #260]	; 0x104
 801137e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011384:	9241      	str	r2, [sp, #260]	; 0x104
 8011386:	2210      	movs	r2, #16
 8011388:	2b6f      	cmp	r3, #111	; 0x6f
 801138a:	9242      	str	r2, [sp, #264]	; 0x108
 801138c:	bf34      	ite	cc
 801138e:	2303      	movcc	r3, #3
 8011390:	2304      	movcs	r3, #4
 8011392:	9347      	str	r3, [sp, #284]	; 0x11c
 8011394:	6863      	ldr	r3, [r4, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	dd42      	ble.n	8011420 <__ssvfiscanf_r+0x268>
 801139a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801139c:	0659      	lsls	r1, r3, #25
 801139e:	d404      	bmi.n	80113aa <__ssvfiscanf_r+0x1f2>
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	781a      	ldrb	r2, [r3, #0]
 80113a4:	5cba      	ldrb	r2, [r7, r2]
 80113a6:	0712      	lsls	r2, r2, #28
 80113a8:	d441      	bmi.n	801142e <__ssvfiscanf_r+0x276>
 80113aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80113ac:	2b02      	cmp	r3, #2
 80113ae:	dc50      	bgt.n	8011452 <__ssvfiscanf_r+0x29a>
 80113b0:	466b      	mov	r3, sp
 80113b2:	4622      	mov	r2, r4
 80113b4:	a941      	add	r1, sp, #260	; 0x104
 80113b6:	4630      	mov	r0, r6
 80113b8:	f000 f876 	bl	80114a8 <_scanf_chars>
 80113bc:	2801      	cmp	r0, #1
 80113be:	d06e      	beq.n	801149e <__ssvfiscanf_r+0x2e6>
 80113c0:	2802      	cmp	r0, #2
 80113c2:	f47f af20 	bne.w	8011206 <__ssvfiscanf_r+0x4e>
 80113c6:	e7cf      	b.n	8011368 <__ssvfiscanf_r+0x1b0>
 80113c8:	220a      	movs	r2, #10
 80113ca:	e7dd      	b.n	8011388 <__ssvfiscanf_r+0x1d0>
 80113cc:	2300      	movs	r3, #0
 80113ce:	9342      	str	r3, [sp, #264]	; 0x108
 80113d0:	2303      	movs	r3, #3
 80113d2:	e7de      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 80113d4:	2308      	movs	r3, #8
 80113d6:	9342      	str	r3, [sp, #264]	; 0x108
 80113d8:	2304      	movs	r3, #4
 80113da:	e7da      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 80113dc:	4629      	mov	r1, r5
 80113de:	4640      	mov	r0, r8
 80113e0:	f000 f9c6 	bl	8011770 <__sccl>
 80113e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80113e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ea:	9341      	str	r3, [sp, #260]	; 0x104
 80113ec:	4605      	mov	r5, r0
 80113ee:	2301      	movs	r3, #1
 80113f0:	e7cf      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 80113f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80113f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f8:	9341      	str	r3, [sp, #260]	; 0x104
 80113fa:	2300      	movs	r3, #0
 80113fc:	e7c9      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 80113fe:	2302      	movs	r3, #2
 8011400:	e7c7      	b.n	8011392 <__ssvfiscanf_r+0x1da>
 8011402:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011404:	06c3      	lsls	r3, r0, #27
 8011406:	f53f aefe 	bmi.w	8011206 <__ssvfiscanf_r+0x4e>
 801140a:	9b00      	ldr	r3, [sp, #0]
 801140c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801140e:	1d19      	adds	r1, r3, #4
 8011410:	9100      	str	r1, [sp, #0]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f010 0f01 	tst.w	r0, #1
 8011418:	bf14      	ite	ne
 801141a:	801a      	strhne	r2, [r3, #0]
 801141c:	601a      	streq	r2, [r3, #0]
 801141e:	e6f2      	b.n	8011206 <__ssvfiscanf_r+0x4e>
 8011420:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011422:	4621      	mov	r1, r4
 8011424:	4630      	mov	r0, r6
 8011426:	4798      	blx	r3
 8011428:	2800      	cmp	r0, #0
 801142a:	d0b6      	beq.n	801139a <__ssvfiscanf_r+0x1e2>
 801142c:	e79c      	b.n	8011368 <__ssvfiscanf_r+0x1b0>
 801142e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011430:	3201      	adds	r2, #1
 8011432:	9245      	str	r2, [sp, #276]	; 0x114
 8011434:	6862      	ldr	r2, [r4, #4]
 8011436:	3a01      	subs	r2, #1
 8011438:	2a00      	cmp	r2, #0
 801143a:	6062      	str	r2, [r4, #4]
 801143c:	dd02      	ble.n	8011444 <__ssvfiscanf_r+0x28c>
 801143e:	3301      	adds	r3, #1
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	e7ad      	b.n	80113a0 <__ssvfiscanf_r+0x1e8>
 8011444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011446:	4621      	mov	r1, r4
 8011448:	4630      	mov	r0, r6
 801144a:	4798      	blx	r3
 801144c:	2800      	cmp	r0, #0
 801144e:	d0a7      	beq.n	80113a0 <__ssvfiscanf_r+0x1e8>
 8011450:	e78a      	b.n	8011368 <__ssvfiscanf_r+0x1b0>
 8011452:	2b04      	cmp	r3, #4
 8011454:	dc0e      	bgt.n	8011474 <__ssvfiscanf_r+0x2bc>
 8011456:	466b      	mov	r3, sp
 8011458:	4622      	mov	r2, r4
 801145a:	a941      	add	r1, sp, #260	; 0x104
 801145c:	4630      	mov	r0, r6
 801145e:	f000 f87d 	bl	801155c <_scanf_i>
 8011462:	e7ab      	b.n	80113bc <__ssvfiscanf_r+0x204>
 8011464:	08011105 	.word	0x08011105
 8011468:	0801117f 	.word	0x0801117f
 801146c:	0803aa5d 	.word	0x0803aa5d
 8011470:	0803a706 	.word	0x0803a706
 8011474:	4b0b      	ldr	r3, [pc, #44]	; (80114a4 <__ssvfiscanf_r+0x2ec>)
 8011476:	2b00      	cmp	r3, #0
 8011478:	f43f aec5 	beq.w	8011206 <__ssvfiscanf_r+0x4e>
 801147c:	466b      	mov	r3, sp
 801147e:	4622      	mov	r2, r4
 8011480:	a941      	add	r1, sp, #260	; 0x104
 8011482:	4630      	mov	r0, r6
 8011484:	f3af 8000 	nop.w
 8011488:	e798      	b.n	80113bc <__ssvfiscanf_r+0x204>
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011490:	bf18      	it	ne
 8011492:	f04f 30ff 	movne.w	r0, #4294967295
 8011496:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80114a0:	e7f9      	b.n	8011496 <__ssvfiscanf_r+0x2de>
 80114a2:	bf00      	nop
 80114a4:	00000000 	.word	0x00000000

080114a8 <_scanf_chars>:
 80114a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114ac:	4615      	mov	r5, r2
 80114ae:	688a      	ldr	r2, [r1, #8]
 80114b0:	4680      	mov	r8, r0
 80114b2:	460c      	mov	r4, r1
 80114b4:	b932      	cbnz	r2, 80114c4 <_scanf_chars+0x1c>
 80114b6:	698a      	ldr	r2, [r1, #24]
 80114b8:	2a00      	cmp	r2, #0
 80114ba:	bf0c      	ite	eq
 80114bc:	2201      	moveq	r2, #1
 80114be:	f04f 32ff 	movne.w	r2, #4294967295
 80114c2:	608a      	str	r2, [r1, #8]
 80114c4:	6822      	ldr	r2, [r4, #0]
 80114c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011558 <_scanf_chars+0xb0>
 80114ca:	06d1      	lsls	r1, r2, #27
 80114cc:	bf5f      	itttt	pl
 80114ce:	681a      	ldrpl	r2, [r3, #0]
 80114d0:	1d11      	addpl	r1, r2, #4
 80114d2:	6019      	strpl	r1, [r3, #0]
 80114d4:	6816      	ldrpl	r6, [r2, #0]
 80114d6:	2700      	movs	r7, #0
 80114d8:	69a0      	ldr	r0, [r4, #24]
 80114da:	b188      	cbz	r0, 8011500 <_scanf_chars+0x58>
 80114dc:	2801      	cmp	r0, #1
 80114de:	d107      	bne.n	80114f0 <_scanf_chars+0x48>
 80114e0:	682a      	ldr	r2, [r5, #0]
 80114e2:	7811      	ldrb	r1, [r2, #0]
 80114e4:	6962      	ldr	r2, [r4, #20]
 80114e6:	5c52      	ldrb	r2, [r2, r1]
 80114e8:	b952      	cbnz	r2, 8011500 <_scanf_chars+0x58>
 80114ea:	2f00      	cmp	r7, #0
 80114ec:	d031      	beq.n	8011552 <_scanf_chars+0xaa>
 80114ee:	e022      	b.n	8011536 <_scanf_chars+0x8e>
 80114f0:	2802      	cmp	r0, #2
 80114f2:	d120      	bne.n	8011536 <_scanf_chars+0x8e>
 80114f4:	682b      	ldr	r3, [r5, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80114fc:	071b      	lsls	r3, r3, #28
 80114fe:	d41a      	bmi.n	8011536 <_scanf_chars+0x8e>
 8011500:	6823      	ldr	r3, [r4, #0]
 8011502:	06da      	lsls	r2, r3, #27
 8011504:	bf5e      	ittt	pl
 8011506:	682b      	ldrpl	r3, [r5, #0]
 8011508:	781b      	ldrbpl	r3, [r3, #0]
 801150a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801150e:	682a      	ldr	r2, [r5, #0]
 8011510:	686b      	ldr	r3, [r5, #4]
 8011512:	3201      	adds	r2, #1
 8011514:	602a      	str	r2, [r5, #0]
 8011516:	68a2      	ldr	r2, [r4, #8]
 8011518:	3b01      	subs	r3, #1
 801151a:	3a01      	subs	r2, #1
 801151c:	606b      	str	r3, [r5, #4]
 801151e:	3701      	adds	r7, #1
 8011520:	60a2      	str	r2, [r4, #8]
 8011522:	b142      	cbz	r2, 8011536 <_scanf_chars+0x8e>
 8011524:	2b00      	cmp	r3, #0
 8011526:	dcd7      	bgt.n	80114d8 <_scanf_chars+0x30>
 8011528:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801152c:	4629      	mov	r1, r5
 801152e:	4640      	mov	r0, r8
 8011530:	4798      	blx	r3
 8011532:	2800      	cmp	r0, #0
 8011534:	d0d0      	beq.n	80114d8 <_scanf_chars+0x30>
 8011536:	6823      	ldr	r3, [r4, #0]
 8011538:	f013 0310 	ands.w	r3, r3, #16
 801153c:	d105      	bne.n	801154a <_scanf_chars+0xa2>
 801153e:	68e2      	ldr	r2, [r4, #12]
 8011540:	3201      	adds	r2, #1
 8011542:	60e2      	str	r2, [r4, #12]
 8011544:	69a2      	ldr	r2, [r4, #24]
 8011546:	b102      	cbz	r2, 801154a <_scanf_chars+0xa2>
 8011548:	7033      	strb	r3, [r6, #0]
 801154a:	6923      	ldr	r3, [r4, #16]
 801154c:	443b      	add	r3, r7
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	2000      	movs	r0, #0
 8011552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011556:	bf00      	nop
 8011558:	0803aa5d 	.word	0x0803aa5d

0801155c <_scanf_i>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	4698      	mov	r8, r3
 8011562:	4b76      	ldr	r3, [pc, #472]	; (801173c <_scanf_i+0x1e0>)
 8011564:	460c      	mov	r4, r1
 8011566:	4682      	mov	sl, r0
 8011568:	4616      	mov	r6, r2
 801156a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801156e:	b087      	sub	sp, #28
 8011570:	ab03      	add	r3, sp, #12
 8011572:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011576:	4b72      	ldr	r3, [pc, #456]	; (8011740 <_scanf_i+0x1e4>)
 8011578:	69a1      	ldr	r1, [r4, #24]
 801157a:	4a72      	ldr	r2, [pc, #456]	; (8011744 <_scanf_i+0x1e8>)
 801157c:	2903      	cmp	r1, #3
 801157e:	bf18      	it	ne
 8011580:	461a      	movne	r2, r3
 8011582:	68a3      	ldr	r3, [r4, #8]
 8011584:	9201      	str	r2, [sp, #4]
 8011586:	1e5a      	subs	r2, r3, #1
 8011588:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801158c:	bf88      	it	hi
 801158e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011592:	4627      	mov	r7, r4
 8011594:	bf82      	ittt	hi
 8011596:	eb03 0905 	addhi.w	r9, r3, r5
 801159a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801159e:	60a3      	strhi	r3, [r4, #8]
 80115a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80115a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80115a8:	bf98      	it	ls
 80115aa:	f04f 0900 	movls.w	r9, #0
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	463d      	mov	r5, r7
 80115b2:	f04f 0b00 	mov.w	fp, #0
 80115b6:	6831      	ldr	r1, [r6, #0]
 80115b8:	ab03      	add	r3, sp, #12
 80115ba:	7809      	ldrb	r1, [r1, #0]
 80115bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80115c0:	2202      	movs	r2, #2
 80115c2:	f7ee fe1d 	bl	8000200 <memchr>
 80115c6:	b328      	cbz	r0, 8011614 <_scanf_i+0xb8>
 80115c8:	f1bb 0f01 	cmp.w	fp, #1
 80115cc:	d159      	bne.n	8011682 <_scanf_i+0x126>
 80115ce:	6862      	ldr	r2, [r4, #4]
 80115d0:	b92a      	cbnz	r2, 80115de <_scanf_i+0x82>
 80115d2:	6822      	ldr	r2, [r4, #0]
 80115d4:	2308      	movs	r3, #8
 80115d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115da:	6063      	str	r3, [r4, #4]
 80115dc:	6022      	str	r2, [r4, #0]
 80115de:	6822      	ldr	r2, [r4, #0]
 80115e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80115e4:	6022      	str	r2, [r4, #0]
 80115e6:	68a2      	ldr	r2, [r4, #8]
 80115e8:	1e51      	subs	r1, r2, #1
 80115ea:	60a1      	str	r1, [r4, #8]
 80115ec:	b192      	cbz	r2, 8011614 <_scanf_i+0xb8>
 80115ee:	6832      	ldr	r2, [r6, #0]
 80115f0:	1c51      	adds	r1, r2, #1
 80115f2:	6031      	str	r1, [r6, #0]
 80115f4:	7812      	ldrb	r2, [r2, #0]
 80115f6:	f805 2b01 	strb.w	r2, [r5], #1
 80115fa:	6872      	ldr	r2, [r6, #4]
 80115fc:	3a01      	subs	r2, #1
 80115fe:	2a00      	cmp	r2, #0
 8011600:	6072      	str	r2, [r6, #4]
 8011602:	dc07      	bgt.n	8011614 <_scanf_i+0xb8>
 8011604:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011608:	4631      	mov	r1, r6
 801160a:	4650      	mov	r0, sl
 801160c:	4790      	blx	r2
 801160e:	2800      	cmp	r0, #0
 8011610:	f040 8085 	bne.w	801171e <_scanf_i+0x1c2>
 8011614:	f10b 0b01 	add.w	fp, fp, #1
 8011618:	f1bb 0f03 	cmp.w	fp, #3
 801161c:	d1cb      	bne.n	80115b6 <_scanf_i+0x5a>
 801161e:	6863      	ldr	r3, [r4, #4]
 8011620:	b90b      	cbnz	r3, 8011626 <_scanf_i+0xca>
 8011622:	230a      	movs	r3, #10
 8011624:	6063      	str	r3, [r4, #4]
 8011626:	6863      	ldr	r3, [r4, #4]
 8011628:	4947      	ldr	r1, [pc, #284]	; (8011748 <_scanf_i+0x1ec>)
 801162a:	6960      	ldr	r0, [r4, #20]
 801162c:	1ac9      	subs	r1, r1, r3
 801162e:	f000 f89f 	bl	8011770 <__sccl>
 8011632:	f04f 0b00 	mov.w	fp, #0
 8011636:	68a3      	ldr	r3, [r4, #8]
 8011638:	6822      	ldr	r2, [r4, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d03d      	beq.n	80116ba <_scanf_i+0x15e>
 801163e:	6831      	ldr	r1, [r6, #0]
 8011640:	6960      	ldr	r0, [r4, #20]
 8011642:	f891 c000 	ldrb.w	ip, [r1]
 8011646:	f810 000c 	ldrb.w	r0, [r0, ip]
 801164a:	2800      	cmp	r0, #0
 801164c:	d035      	beq.n	80116ba <_scanf_i+0x15e>
 801164e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011652:	d124      	bne.n	801169e <_scanf_i+0x142>
 8011654:	0510      	lsls	r0, r2, #20
 8011656:	d522      	bpl.n	801169e <_scanf_i+0x142>
 8011658:	f10b 0b01 	add.w	fp, fp, #1
 801165c:	f1b9 0f00 	cmp.w	r9, #0
 8011660:	d003      	beq.n	801166a <_scanf_i+0x10e>
 8011662:	3301      	adds	r3, #1
 8011664:	f109 39ff 	add.w	r9, r9, #4294967295
 8011668:	60a3      	str	r3, [r4, #8]
 801166a:	6873      	ldr	r3, [r6, #4]
 801166c:	3b01      	subs	r3, #1
 801166e:	2b00      	cmp	r3, #0
 8011670:	6073      	str	r3, [r6, #4]
 8011672:	dd1b      	ble.n	80116ac <_scanf_i+0x150>
 8011674:	6833      	ldr	r3, [r6, #0]
 8011676:	3301      	adds	r3, #1
 8011678:	6033      	str	r3, [r6, #0]
 801167a:	68a3      	ldr	r3, [r4, #8]
 801167c:	3b01      	subs	r3, #1
 801167e:	60a3      	str	r3, [r4, #8]
 8011680:	e7d9      	b.n	8011636 <_scanf_i+0xda>
 8011682:	f1bb 0f02 	cmp.w	fp, #2
 8011686:	d1ae      	bne.n	80115e6 <_scanf_i+0x8a>
 8011688:	6822      	ldr	r2, [r4, #0]
 801168a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801168e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011692:	d1bf      	bne.n	8011614 <_scanf_i+0xb8>
 8011694:	2310      	movs	r3, #16
 8011696:	6063      	str	r3, [r4, #4]
 8011698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801169c:	e7a2      	b.n	80115e4 <_scanf_i+0x88>
 801169e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80116a2:	6022      	str	r2, [r4, #0]
 80116a4:	780b      	ldrb	r3, [r1, #0]
 80116a6:	f805 3b01 	strb.w	r3, [r5], #1
 80116aa:	e7de      	b.n	801166a <_scanf_i+0x10e>
 80116ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80116b0:	4631      	mov	r1, r6
 80116b2:	4650      	mov	r0, sl
 80116b4:	4798      	blx	r3
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d0df      	beq.n	801167a <_scanf_i+0x11e>
 80116ba:	6823      	ldr	r3, [r4, #0]
 80116bc:	05db      	lsls	r3, r3, #23
 80116be:	d50d      	bpl.n	80116dc <_scanf_i+0x180>
 80116c0:	42bd      	cmp	r5, r7
 80116c2:	d909      	bls.n	80116d8 <_scanf_i+0x17c>
 80116c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80116c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116cc:	4632      	mov	r2, r6
 80116ce:	4650      	mov	r0, sl
 80116d0:	4798      	blx	r3
 80116d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80116d6:	464d      	mov	r5, r9
 80116d8:	42bd      	cmp	r5, r7
 80116da:	d02d      	beq.n	8011738 <_scanf_i+0x1dc>
 80116dc:	6822      	ldr	r2, [r4, #0]
 80116de:	f012 0210 	ands.w	r2, r2, #16
 80116e2:	d113      	bne.n	801170c <_scanf_i+0x1b0>
 80116e4:	702a      	strb	r2, [r5, #0]
 80116e6:	6863      	ldr	r3, [r4, #4]
 80116e8:	9e01      	ldr	r6, [sp, #4]
 80116ea:	4639      	mov	r1, r7
 80116ec:	4650      	mov	r0, sl
 80116ee:	47b0      	blx	r6
 80116f0:	6821      	ldr	r1, [r4, #0]
 80116f2:	f8d8 3000 	ldr.w	r3, [r8]
 80116f6:	f011 0f20 	tst.w	r1, #32
 80116fa:	d013      	beq.n	8011724 <_scanf_i+0x1c8>
 80116fc:	1d1a      	adds	r2, r3, #4
 80116fe:	f8c8 2000 	str.w	r2, [r8]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	6018      	str	r0, [r3, #0]
 8011706:	68e3      	ldr	r3, [r4, #12]
 8011708:	3301      	adds	r3, #1
 801170a:	60e3      	str	r3, [r4, #12]
 801170c:	1bed      	subs	r5, r5, r7
 801170e:	44ab      	add	fp, r5
 8011710:	6925      	ldr	r5, [r4, #16]
 8011712:	445d      	add	r5, fp
 8011714:	6125      	str	r5, [r4, #16]
 8011716:	2000      	movs	r0, #0
 8011718:	b007      	add	sp, #28
 801171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171e:	f04f 0b00 	mov.w	fp, #0
 8011722:	e7ca      	b.n	80116ba <_scanf_i+0x15e>
 8011724:	1d1a      	adds	r2, r3, #4
 8011726:	f8c8 2000 	str.w	r2, [r8]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f011 0f01 	tst.w	r1, #1
 8011730:	bf14      	ite	ne
 8011732:	8018      	strhne	r0, [r3, #0]
 8011734:	6018      	streq	r0, [r3, #0]
 8011736:	e7e6      	b.n	8011706 <_scanf_i+0x1aa>
 8011738:	2001      	movs	r0, #1
 801173a:	e7ed      	b.n	8011718 <_scanf_i+0x1bc>
 801173c:	08014d00 	.word	0x08014d00
 8011740:	0800eddd 	.word	0x0800eddd
 8011744:	080119fd 	.word	0x080119fd
 8011748:	0803ae0d 	.word	0x0803ae0d

0801174c <_read_r>:
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	4d07      	ldr	r5, [pc, #28]	; (801176c <_read_r+0x20>)
 8011750:	4604      	mov	r4, r0
 8011752:	4608      	mov	r0, r1
 8011754:	4611      	mov	r1, r2
 8011756:	2200      	movs	r2, #0
 8011758:	602a      	str	r2, [r5, #0]
 801175a:	461a      	mov	r2, r3
 801175c:	f002 fe4e 	bl	80143fc <_read>
 8011760:	1c43      	adds	r3, r0, #1
 8011762:	d102      	bne.n	801176a <_read_r+0x1e>
 8011764:	682b      	ldr	r3, [r5, #0]
 8011766:	b103      	cbz	r3, 801176a <_read_r+0x1e>
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	bd38      	pop	{r3, r4, r5, pc}
 801176c:	20003a40 	.word	0x20003a40

08011770 <__sccl>:
 8011770:	b570      	push	{r4, r5, r6, lr}
 8011772:	780b      	ldrb	r3, [r1, #0]
 8011774:	4604      	mov	r4, r0
 8011776:	2b5e      	cmp	r3, #94	; 0x5e
 8011778:	bf0b      	itete	eq
 801177a:	784b      	ldrbeq	r3, [r1, #1]
 801177c:	1c48      	addne	r0, r1, #1
 801177e:	1c88      	addeq	r0, r1, #2
 8011780:	2200      	movne	r2, #0
 8011782:	bf08      	it	eq
 8011784:	2201      	moveq	r2, #1
 8011786:	1e61      	subs	r1, r4, #1
 8011788:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801178c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011790:	42a9      	cmp	r1, r5
 8011792:	d1fb      	bne.n	801178c <__sccl+0x1c>
 8011794:	b90b      	cbnz	r3, 801179a <__sccl+0x2a>
 8011796:	3801      	subs	r0, #1
 8011798:	bd70      	pop	{r4, r5, r6, pc}
 801179a:	f082 0201 	eor.w	r2, r2, #1
 801179e:	54e2      	strb	r2, [r4, r3]
 80117a0:	4605      	mov	r5, r0
 80117a2:	4628      	mov	r0, r5
 80117a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80117a8:	292d      	cmp	r1, #45	; 0x2d
 80117aa:	d006      	beq.n	80117ba <__sccl+0x4a>
 80117ac:	295d      	cmp	r1, #93	; 0x5d
 80117ae:	d0f3      	beq.n	8011798 <__sccl+0x28>
 80117b0:	b909      	cbnz	r1, 80117b6 <__sccl+0x46>
 80117b2:	4628      	mov	r0, r5
 80117b4:	e7f0      	b.n	8011798 <__sccl+0x28>
 80117b6:	460b      	mov	r3, r1
 80117b8:	e7f1      	b.n	801179e <__sccl+0x2e>
 80117ba:	786e      	ldrb	r6, [r5, #1]
 80117bc:	2e5d      	cmp	r6, #93	; 0x5d
 80117be:	d0fa      	beq.n	80117b6 <__sccl+0x46>
 80117c0:	42b3      	cmp	r3, r6
 80117c2:	dcf8      	bgt.n	80117b6 <__sccl+0x46>
 80117c4:	3502      	adds	r5, #2
 80117c6:	4619      	mov	r1, r3
 80117c8:	3101      	adds	r1, #1
 80117ca:	428e      	cmp	r6, r1
 80117cc:	5462      	strb	r2, [r4, r1]
 80117ce:	dcfb      	bgt.n	80117c8 <__sccl+0x58>
 80117d0:	1af1      	subs	r1, r6, r3
 80117d2:	3901      	subs	r1, #1
 80117d4:	1c58      	adds	r0, r3, #1
 80117d6:	42b3      	cmp	r3, r6
 80117d8:	bfa8      	it	ge
 80117da:	2100      	movge	r1, #0
 80117dc:	1843      	adds	r3, r0, r1
 80117de:	e7e0      	b.n	80117a2 <__sccl+0x32>

080117e0 <_raise_r>:
 80117e0:	291f      	cmp	r1, #31
 80117e2:	b538      	push	{r3, r4, r5, lr}
 80117e4:	4604      	mov	r4, r0
 80117e6:	460d      	mov	r5, r1
 80117e8:	d904      	bls.n	80117f4 <_raise_r+0x14>
 80117ea:	2316      	movs	r3, #22
 80117ec:	6003      	str	r3, [r0, #0]
 80117ee:	f04f 30ff 	mov.w	r0, #4294967295
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
 80117f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117f6:	b112      	cbz	r2, 80117fe <_raise_r+0x1e>
 80117f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117fc:	b94b      	cbnz	r3, 8011812 <_raise_r+0x32>
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 f830 	bl	8011864 <_getpid_r>
 8011804:	462a      	mov	r2, r5
 8011806:	4601      	mov	r1, r0
 8011808:	4620      	mov	r0, r4
 801180a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801180e:	f000 b817 	b.w	8011840 <_kill_r>
 8011812:	2b01      	cmp	r3, #1
 8011814:	d00a      	beq.n	801182c <_raise_r+0x4c>
 8011816:	1c59      	adds	r1, r3, #1
 8011818:	d103      	bne.n	8011822 <_raise_r+0x42>
 801181a:	2316      	movs	r3, #22
 801181c:	6003      	str	r3, [r0, #0]
 801181e:	2001      	movs	r0, #1
 8011820:	e7e7      	b.n	80117f2 <_raise_r+0x12>
 8011822:	2400      	movs	r4, #0
 8011824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011828:	4628      	mov	r0, r5
 801182a:	4798      	blx	r3
 801182c:	2000      	movs	r0, #0
 801182e:	e7e0      	b.n	80117f2 <_raise_r+0x12>

08011830 <raise>:
 8011830:	4b02      	ldr	r3, [pc, #8]	; (801183c <raise+0xc>)
 8011832:	4601      	mov	r1, r0
 8011834:	6818      	ldr	r0, [r3, #0]
 8011836:	f7ff bfd3 	b.w	80117e0 <_raise_r>
 801183a:	bf00      	nop
 801183c:	200002c0 	.word	0x200002c0

08011840 <_kill_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4d07      	ldr	r5, [pc, #28]	; (8011860 <_kill_r+0x20>)
 8011844:	2300      	movs	r3, #0
 8011846:	4604      	mov	r4, r0
 8011848:	4608      	mov	r0, r1
 801184a:	4611      	mov	r1, r2
 801184c:	602b      	str	r3, [r5, #0]
 801184e:	f002 fdc5 	bl	80143dc <_kill>
 8011852:	1c43      	adds	r3, r0, #1
 8011854:	d102      	bne.n	801185c <_kill_r+0x1c>
 8011856:	682b      	ldr	r3, [r5, #0]
 8011858:	b103      	cbz	r3, 801185c <_kill_r+0x1c>
 801185a:	6023      	str	r3, [r4, #0]
 801185c:	bd38      	pop	{r3, r4, r5, pc}
 801185e:	bf00      	nop
 8011860:	20003a40 	.word	0x20003a40

08011864 <_getpid_r>:
 8011864:	f002 bdaa 	b.w	80143bc <_getpid>

08011868 <sniprintf>:
 8011868:	b40c      	push	{r2, r3}
 801186a:	b530      	push	{r4, r5, lr}
 801186c:	4b17      	ldr	r3, [pc, #92]	; (80118cc <sniprintf+0x64>)
 801186e:	1e0c      	subs	r4, r1, #0
 8011870:	681d      	ldr	r5, [r3, #0]
 8011872:	b09d      	sub	sp, #116	; 0x74
 8011874:	da08      	bge.n	8011888 <sniprintf+0x20>
 8011876:	238b      	movs	r3, #139	; 0x8b
 8011878:	602b      	str	r3, [r5, #0]
 801187a:	f04f 30ff 	mov.w	r0, #4294967295
 801187e:	b01d      	add	sp, #116	; 0x74
 8011880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011884:	b002      	add	sp, #8
 8011886:	4770      	bx	lr
 8011888:	f44f 7302 	mov.w	r3, #520	; 0x208
 801188c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011890:	bf14      	ite	ne
 8011892:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011896:	4623      	moveq	r3, r4
 8011898:	9304      	str	r3, [sp, #16]
 801189a:	9307      	str	r3, [sp, #28]
 801189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118a0:	9002      	str	r0, [sp, #8]
 80118a2:	9006      	str	r0, [sp, #24]
 80118a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80118a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80118aa:	ab21      	add	r3, sp, #132	; 0x84
 80118ac:	a902      	add	r1, sp, #8
 80118ae:	4628      	mov	r0, r5
 80118b0:	9301      	str	r3, [sp, #4]
 80118b2:	f7ff fb27 	bl	8010f04 <_svfiprintf_r>
 80118b6:	1c43      	adds	r3, r0, #1
 80118b8:	bfbc      	itt	lt
 80118ba:	238b      	movlt	r3, #139	; 0x8b
 80118bc:	602b      	strlt	r3, [r5, #0]
 80118be:	2c00      	cmp	r4, #0
 80118c0:	d0dd      	beq.n	801187e <sniprintf+0x16>
 80118c2:	9b02      	ldr	r3, [sp, #8]
 80118c4:	2200      	movs	r2, #0
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e7d9      	b.n	801187e <sniprintf+0x16>
 80118ca:	bf00      	nop
 80118cc:	200002c0 	.word	0x200002c0

080118d0 <strncmp>:
 80118d0:	b510      	push	{r4, lr}
 80118d2:	b17a      	cbz	r2, 80118f4 <strncmp+0x24>
 80118d4:	4603      	mov	r3, r0
 80118d6:	3901      	subs	r1, #1
 80118d8:	1884      	adds	r4, r0, r2
 80118da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80118de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118e2:	4290      	cmp	r0, r2
 80118e4:	d101      	bne.n	80118ea <strncmp+0x1a>
 80118e6:	42a3      	cmp	r3, r4
 80118e8:	d101      	bne.n	80118ee <strncmp+0x1e>
 80118ea:	1a80      	subs	r0, r0, r2
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d1f3      	bne.n	80118da <strncmp+0xa>
 80118f2:	e7fa      	b.n	80118ea <strncmp+0x1a>
 80118f4:	4610      	mov	r0, r2
 80118f6:	e7f9      	b.n	80118ec <strncmp+0x1c>

080118f8 <_strtol_l.constprop.0>:
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118fe:	d001      	beq.n	8011904 <_strtol_l.constprop.0+0xc>
 8011900:	2b24      	cmp	r3, #36	; 0x24
 8011902:	d906      	bls.n	8011912 <_strtol_l.constprop.0+0x1a>
 8011904:	f000 f8c2 	bl	8011a8c <__errno>
 8011908:	2316      	movs	r3, #22
 801190a:	6003      	str	r3, [r0, #0]
 801190c:	2000      	movs	r0, #0
 801190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80119f8 <_strtol_l.constprop.0+0x100>
 8011916:	460d      	mov	r5, r1
 8011918:	462e      	mov	r6, r5
 801191a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801191e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011922:	f017 0708 	ands.w	r7, r7, #8
 8011926:	d1f7      	bne.n	8011918 <_strtol_l.constprop.0+0x20>
 8011928:	2c2d      	cmp	r4, #45	; 0x2d
 801192a:	d132      	bne.n	8011992 <_strtol_l.constprop.0+0x9a>
 801192c:	782c      	ldrb	r4, [r5, #0]
 801192e:	2701      	movs	r7, #1
 8011930:	1cb5      	adds	r5, r6, #2
 8011932:	2b00      	cmp	r3, #0
 8011934:	d05b      	beq.n	80119ee <_strtol_l.constprop.0+0xf6>
 8011936:	2b10      	cmp	r3, #16
 8011938:	d109      	bne.n	801194e <_strtol_l.constprop.0+0x56>
 801193a:	2c30      	cmp	r4, #48	; 0x30
 801193c:	d107      	bne.n	801194e <_strtol_l.constprop.0+0x56>
 801193e:	782c      	ldrb	r4, [r5, #0]
 8011940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011944:	2c58      	cmp	r4, #88	; 0x58
 8011946:	d14d      	bne.n	80119e4 <_strtol_l.constprop.0+0xec>
 8011948:	786c      	ldrb	r4, [r5, #1]
 801194a:	2310      	movs	r3, #16
 801194c:	3502      	adds	r5, #2
 801194e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011952:	f108 38ff 	add.w	r8, r8, #4294967295
 8011956:	f04f 0c00 	mov.w	ip, #0
 801195a:	fbb8 f9f3 	udiv	r9, r8, r3
 801195e:	4666      	mov	r6, ip
 8011960:	fb03 8a19 	mls	sl, r3, r9, r8
 8011964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011968:	f1be 0f09 	cmp.w	lr, #9
 801196c:	d816      	bhi.n	801199c <_strtol_l.constprop.0+0xa4>
 801196e:	4674      	mov	r4, lr
 8011970:	42a3      	cmp	r3, r4
 8011972:	dd24      	ble.n	80119be <_strtol_l.constprop.0+0xc6>
 8011974:	f1bc 0f00 	cmp.w	ip, #0
 8011978:	db1e      	blt.n	80119b8 <_strtol_l.constprop.0+0xc0>
 801197a:	45b1      	cmp	r9, r6
 801197c:	d31c      	bcc.n	80119b8 <_strtol_l.constprop.0+0xc0>
 801197e:	d101      	bne.n	8011984 <_strtol_l.constprop.0+0x8c>
 8011980:	45a2      	cmp	sl, r4
 8011982:	db19      	blt.n	80119b8 <_strtol_l.constprop.0+0xc0>
 8011984:	fb06 4603 	mla	r6, r6, r3, r4
 8011988:	f04f 0c01 	mov.w	ip, #1
 801198c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011990:	e7e8      	b.n	8011964 <_strtol_l.constprop.0+0x6c>
 8011992:	2c2b      	cmp	r4, #43	; 0x2b
 8011994:	bf04      	itt	eq
 8011996:	782c      	ldrbeq	r4, [r5, #0]
 8011998:	1cb5      	addeq	r5, r6, #2
 801199a:	e7ca      	b.n	8011932 <_strtol_l.constprop.0+0x3a>
 801199c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80119a0:	f1be 0f19 	cmp.w	lr, #25
 80119a4:	d801      	bhi.n	80119aa <_strtol_l.constprop.0+0xb2>
 80119a6:	3c37      	subs	r4, #55	; 0x37
 80119a8:	e7e2      	b.n	8011970 <_strtol_l.constprop.0+0x78>
 80119aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80119ae:	f1be 0f19 	cmp.w	lr, #25
 80119b2:	d804      	bhi.n	80119be <_strtol_l.constprop.0+0xc6>
 80119b4:	3c57      	subs	r4, #87	; 0x57
 80119b6:	e7db      	b.n	8011970 <_strtol_l.constprop.0+0x78>
 80119b8:	f04f 3cff 	mov.w	ip, #4294967295
 80119bc:	e7e6      	b.n	801198c <_strtol_l.constprop.0+0x94>
 80119be:	f1bc 0f00 	cmp.w	ip, #0
 80119c2:	da05      	bge.n	80119d0 <_strtol_l.constprop.0+0xd8>
 80119c4:	2322      	movs	r3, #34	; 0x22
 80119c6:	6003      	str	r3, [r0, #0]
 80119c8:	4646      	mov	r6, r8
 80119ca:	b942      	cbnz	r2, 80119de <_strtol_l.constprop.0+0xe6>
 80119cc:	4630      	mov	r0, r6
 80119ce:	e79e      	b.n	801190e <_strtol_l.constprop.0+0x16>
 80119d0:	b107      	cbz	r7, 80119d4 <_strtol_l.constprop.0+0xdc>
 80119d2:	4276      	negs	r6, r6
 80119d4:	2a00      	cmp	r2, #0
 80119d6:	d0f9      	beq.n	80119cc <_strtol_l.constprop.0+0xd4>
 80119d8:	f1bc 0f00 	cmp.w	ip, #0
 80119dc:	d000      	beq.n	80119e0 <_strtol_l.constprop.0+0xe8>
 80119de:	1e69      	subs	r1, r5, #1
 80119e0:	6011      	str	r1, [r2, #0]
 80119e2:	e7f3      	b.n	80119cc <_strtol_l.constprop.0+0xd4>
 80119e4:	2430      	movs	r4, #48	; 0x30
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1b1      	bne.n	801194e <_strtol_l.constprop.0+0x56>
 80119ea:	2308      	movs	r3, #8
 80119ec:	e7af      	b.n	801194e <_strtol_l.constprop.0+0x56>
 80119ee:	2c30      	cmp	r4, #48	; 0x30
 80119f0:	d0a5      	beq.n	801193e <_strtol_l.constprop.0+0x46>
 80119f2:	230a      	movs	r3, #10
 80119f4:	e7ab      	b.n	801194e <_strtol_l.constprop.0+0x56>
 80119f6:	bf00      	nop
 80119f8:	0803aa5d 	.word	0x0803aa5d

080119fc <_strtol_r>:
 80119fc:	f7ff bf7c 	b.w	80118f8 <_strtol_l.constprop.0>

08011a00 <__submore>:
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	460c      	mov	r4, r1
 8011a06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a0c:	4299      	cmp	r1, r3
 8011a0e:	d11d      	bne.n	8011a4c <__submore+0x4c>
 8011a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011a14:	f7fb fcd8 	bl	800d3c8 <_malloc_r>
 8011a18:	b918      	cbnz	r0, 8011a22 <__submore+0x22>
 8011a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a26:	63a3      	str	r3, [r4, #56]	; 0x38
 8011a28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011a32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011a36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011a3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011a3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011a42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011a46:	6020      	str	r0, [r4, #0]
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e7e8      	b.n	8011a1e <__submore+0x1e>
 8011a4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011a4e:	0077      	lsls	r7, r6, #1
 8011a50:	463a      	mov	r2, r7
 8011a52:	f7ff f9cd 	bl	8010df0 <_realloc_r>
 8011a56:	4605      	mov	r5, r0
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	d0de      	beq.n	8011a1a <__submore+0x1a>
 8011a5c:	eb00 0806 	add.w	r8, r0, r6
 8011a60:	4601      	mov	r1, r0
 8011a62:	4632      	mov	r2, r6
 8011a64:	4640      	mov	r0, r8
 8011a66:	f7fb f9bb 	bl	800cde0 <memcpy>
 8011a6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011a6e:	f8c4 8000 	str.w	r8, [r4]
 8011a72:	e7e9      	b.n	8011a48 <__submore+0x48>

08011a74 <__env_lock>:
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <__env_lock+0x8>)
 8011a76:	f7fe bd7f 	b.w	8010578 <__retarget_lock_acquire_recursive>
 8011a7a:	bf00      	nop
 8011a7c:	20003a38 	.word	0x20003a38

08011a80 <__env_unlock>:
 8011a80:	4801      	ldr	r0, [pc, #4]	; (8011a88 <__env_unlock+0x8>)
 8011a82:	f7fe bd7b 	b.w	801057c <__retarget_lock_release_recursive>
 8011a86:	bf00      	nop
 8011a88:	20003a38 	.word	0x20003a38

08011a8c <__errno>:
 8011a8c:	4b01      	ldr	r3, [pc, #4]	; (8011a94 <__errno+0x8>)
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	200002c0 	.word	0x200002c0

08011a98 <_fstat_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	4d07      	ldr	r5, [pc, #28]	; (8011ab8 <_fstat_r+0x20>)
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	602b      	str	r3, [r5, #0]
 8011aa6:	f002 fc81 	bl	80143ac <_fstat>
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	d102      	bne.n	8011ab4 <_fstat_r+0x1c>
 8011aae:	682b      	ldr	r3, [r5, #0]
 8011ab0:	b103      	cbz	r3, 8011ab4 <_fstat_r+0x1c>
 8011ab2:	6023      	str	r3, [r4, #0]
 8011ab4:	bd38      	pop	{r3, r4, r5, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20003a40 	.word	0x20003a40

08011abc <_isatty_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	4d06      	ldr	r5, [pc, #24]	; (8011ad8 <_isatty_r+0x1c>)
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	602b      	str	r3, [r5, #0]
 8011ac8:	f002 fc80 	bl	80143cc <_isatty>
 8011acc:	1c43      	adds	r3, r0, #1
 8011ace:	d102      	bne.n	8011ad6 <_isatty_r+0x1a>
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	b103      	cbz	r3, 8011ad6 <_isatty_r+0x1a>
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	20003a40 	.word	0x20003a40

08011adc <__ascii_mbtowc>:
 8011adc:	b082      	sub	sp, #8
 8011ade:	b901      	cbnz	r1, 8011ae2 <__ascii_mbtowc+0x6>
 8011ae0:	a901      	add	r1, sp, #4
 8011ae2:	b142      	cbz	r2, 8011af6 <__ascii_mbtowc+0x1a>
 8011ae4:	b14b      	cbz	r3, 8011afa <__ascii_mbtowc+0x1e>
 8011ae6:	7813      	ldrb	r3, [r2, #0]
 8011ae8:	600b      	str	r3, [r1, #0]
 8011aea:	7812      	ldrb	r2, [r2, #0]
 8011aec:	1e10      	subs	r0, r2, #0
 8011aee:	bf18      	it	ne
 8011af0:	2001      	movne	r0, #1
 8011af2:	b002      	add	sp, #8
 8011af4:	4770      	bx	lr
 8011af6:	4610      	mov	r0, r2
 8011af8:	e7fb      	b.n	8011af2 <__ascii_mbtowc+0x16>
 8011afa:	f06f 0001 	mvn.w	r0, #1
 8011afe:	e7f8      	b.n	8011af2 <__ascii_mbtowc+0x16>

08011b00 <_malloc_usable_size_r>:
 8011b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b04:	1f18      	subs	r0, r3, #4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfbc      	itt	lt
 8011b0a:	580b      	ldrlt	r3, [r1, r0]
 8011b0c:	18c0      	addlt	r0, r0, r3
 8011b0e:	4770      	bx	lr

08011b10 <__ascii_wctomb>:
 8011b10:	b149      	cbz	r1, 8011b26 <__ascii_wctomb+0x16>
 8011b12:	2aff      	cmp	r2, #255	; 0xff
 8011b14:	bf85      	ittet	hi
 8011b16:	238a      	movhi	r3, #138	; 0x8a
 8011b18:	6003      	strhi	r3, [r0, #0]
 8011b1a:	700a      	strbls	r2, [r1, #0]
 8011b1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b20:	bf98      	it	ls
 8011b22:	2001      	movls	r0, #1
 8011b24:	4770      	bx	lr
 8011b26:	4608      	mov	r0, r1
 8011b28:	4770      	bx	lr
 8011b2a:	0000      	movs	r0, r0
 8011b2c:	0000      	movs	r0, r0
	...

08011b30 <cos>:
 8011b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b32:	ec53 2b10 	vmov	r2, r3, d0
 8011b36:	4826      	ldr	r0, [pc, #152]	; (8011bd0 <cos+0xa0>)
 8011b38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b3c:	4281      	cmp	r1, r0
 8011b3e:	dc06      	bgt.n	8011b4e <cos+0x1e>
 8011b40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011bc8 <cos+0x98>
 8011b44:	b005      	add	sp, #20
 8011b46:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b4a:	f001 bbf1 	b.w	8013330 <__kernel_cos>
 8011b4e:	4821      	ldr	r0, [pc, #132]	; (8011bd4 <cos+0xa4>)
 8011b50:	4281      	cmp	r1, r0
 8011b52:	dd09      	ble.n	8011b68 <cos+0x38>
 8011b54:	ee10 0a10 	vmov	r0, s0
 8011b58:	4619      	mov	r1, r3
 8011b5a:	f7ee fbaf 	bl	80002bc <__aeabi_dsub>
 8011b5e:	ec41 0b10 	vmov	d0, r0, r1
 8011b62:	b005      	add	sp, #20
 8011b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b68:	4668      	mov	r0, sp
 8011b6a:	f001 f921 	bl	8012db0 <__ieee754_rem_pio2>
 8011b6e:	f000 0003 	and.w	r0, r0, #3
 8011b72:	2801      	cmp	r0, #1
 8011b74:	d00b      	beq.n	8011b8e <cos+0x5e>
 8011b76:	2802      	cmp	r0, #2
 8011b78:	d016      	beq.n	8011ba8 <cos+0x78>
 8011b7a:	b9e0      	cbnz	r0, 8011bb6 <cos+0x86>
 8011b7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b80:	ed9d 0b00 	vldr	d0, [sp]
 8011b84:	f001 fbd4 	bl	8013330 <__kernel_cos>
 8011b88:	ec51 0b10 	vmov	r0, r1, d0
 8011b8c:	e7e7      	b.n	8011b5e <cos+0x2e>
 8011b8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b92:	ed9d 0b00 	vldr	d0, [sp]
 8011b96:	f001 ffe3 	bl	8013b60 <__kernel_sin>
 8011b9a:	ec53 2b10 	vmov	r2, r3, d0
 8011b9e:	ee10 0a10 	vmov	r0, s0
 8011ba2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011ba6:	e7da      	b.n	8011b5e <cos+0x2e>
 8011ba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bac:	ed9d 0b00 	vldr	d0, [sp]
 8011bb0:	f001 fbbe 	bl	8013330 <__kernel_cos>
 8011bb4:	e7f1      	b.n	8011b9a <cos+0x6a>
 8011bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bba:	ed9d 0b00 	vldr	d0, [sp]
 8011bbe:	2001      	movs	r0, #1
 8011bc0:	f001 ffce 	bl	8013b60 <__kernel_sin>
 8011bc4:	e7e0      	b.n	8011b88 <cos+0x58>
 8011bc6:	bf00      	nop
	...
 8011bd0:	3fe921fb 	.word	0x3fe921fb
 8011bd4:	7fefffff 	.word	0x7fefffff

08011bd8 <sin>:
 8011bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bda:	ec53 2b10 	vmov	r2, r3, d0
 8011bde:	4828      	ldr	r0, [pc, #160]	; (8011c80 <sin+0xa8>)
 8011be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011be4:	4281      	cmp	r1, r0
 8011be6:	dc07      	bgt.n	8011bf8 <sin+0x20>
 8011be8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011c78 <sin+0xa0>
 8011bec:	2000      	movs	r0, #0
 8011bee:	b005      	add	sp, #20
 8011bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bf4:	f001 bfb4 	b.w	8013b60 <__kernel_sin>
 8011bf8:	4822      	ldr	r0, [pc, #136]	; (8011c84 <sin+0xac>)
 8011bfa:	4281      	cmp	r1, r0
 8011bfc:	dd09      	ble.n	8011c12 <sin+0x3a>
 8011bfe:	ee10 0a10 	vmov	r0, s0
 8011c02:	4619      	mov	r1, r3
 8011c04:	f7ee fb5a 	bl	80002bc <__aeabi_dsub>
 8011c08:	ec41 0b10 	vmov	d0, r0, r1
 8011c0c:	b005      	add	sp, #20
 8011c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c12:	4668      	mov	r0, sp
 8011c14:	f001 f8cc 	bl	8012db0 <__ieee754_rem_pio2>
 8011c18:	f000 0003 	and.w	r0, r0, #3
 8011c1c:	2801      	cmp	r0, #1
 8011c1e:	d00c      	beq.n	8011c3a <sin+0x62>
 8011c20:	2802      	cmp	r0, #2
 8011c22:	d011      	beq.n	8011c48 <sin+0x70>
 8011c24:	b9f0      	cbnz	r0, 8011c64 <sin+0x8c>
 8011c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c2a:	ed9d 0b00 	vldr	d0, [sp]
 8011c2e:	2001      	movs	r0, #1
 8011c30:	f001 ff96 	bl	8013b60 <__kernel_sin>
 8011c34:	ec51 0b10 	vmov	r0, r1, d0
 8011c38:	e7e6      	b.n	8011c08 <sin+0x30>
 8011c3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c3e:	ed9d 0b00 	vldr	d0, [sp]
 8011c42:	f001 fb75 	bl	8013330 <__kernel_cos>
 8011c46:	e7f5      	b.n	8011c34 <sin+0x5c>
 8011c48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c4c:	ed9d 0b00 	vldr	d0, [sp]
 8011c50:	2001      	movs	r0, #1
 8011c52:	f001 ff85 	bl	8013b60 <__kernel_sin>
 8011c56:	ec53 2b10 	vmov	r2, r3, d0
 8011c5a:	ee10 0a10 	vmov	r0, s0
 8011c5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c62:	e7d1      	b.n	8011c08 <sin+0x30>
 8011c64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c68:	ed9d 0b00 	vldr	d0, [sp]
 8011c6c:	f001 fb60 	bl	8013330 <__kernel_cos>
 8011c70:	e7f1      	b.n	8011c56 <sin+0x7e>
 8011c72:	bf00      	nop
 8011c74:	f3af 8000 	nop.w
	...
 8011c80:	3fe921fb 	.word	0x3fe921fb
 8011c84:	7fefffff 	.word	0x7fefffff

08011c88 <tan>:
 8011c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c8a:	ec53 2b10 	vmov	r2, r3, d0
 8011c8e:	4816      	ldr	r0, [pc, #88]	; (8011ce8 <tan+0x60>)
 8011c90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c94:	4281      	cmp	r1, r0
 8011c96:	dc07      	bgt.n	8011ca8 <tan+0x20>
 8011c98:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8011ce0 <tan+0x58>
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	b005      	add	sp, #20
 8011ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ca4:	f002 b81c 	b.w	8013ce0 <__kernel_tan>
 8011ca8:	4810      	ldr	r0, [pc, #64]	; (8011cec <tan+0x64>)
 8011caa:	4281      	cmp	r1, r0
 8011cac:	dd09      	ble.n	8011cc2 <tan+0x3a>
 8011cae:	ee10 0a10 	vmov	r0, s0
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	f7ee fb02 	bl	80002bc <__aeabi_dsub>
 8011cb8:	ec41 0b10 	vmov	d0, r0, r1
 8011cbc:	b005      	add	sp, #20
 8011cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cc2:	4668      	mov	r0, sp
 8011cc4:	f001 f874 	bl	8012db0 <__ieee754_rem_pio2>
 8011cc8:	0040      	lsls	r0, r0, #1
 8011cca:	f000 0002 	and.w	r0, r0, #2
 8011cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cd2:	ed9d 0b00 	vldr	d0, [sp]
 8011cd6:	f1c0 0001 	rsb	r0, r0, #1
 8011cda:	f002 f801 	bl	8013ce0 <__kernel_tan>
 8011cde:	e7ed      	b.n	8011cbc <tan+0x34>
	...
 8011ce8:	3fe921fb 	.word	0x3fe921fb
 8011cec:	7fefffff 	.word	0x7fefffff

08011cf0 <acos>:
 8011cf0:	b538      	push	{r3, r4, r5, lr}
 8011cf2:	ed2d 8b02 	vpush	{d8}
 8011cf6:	ec55 4b10 	vmov	r4, r5, d0
 8011cfa:	f000 f8c9 	bl	8011e90 <__ieee754_acos>
 8011cfe:	4622      	mov	r2, r4
 8011d00:	462b      	mov	r3, r5
 8011d02:	4620      	mov	r0, r4
 8011d04:	4629      	mov	r1, r5
 8011d06:	eeb0 8a40 	vmov.f32	s16, s0
 8011d0a:	eef0 8a60 	vmov.f32	s17, s1
 8011d0e:	f7ee ff27 	bl	8000b60 <__aeabi_dcmpun>
 8011d12:	b9a8      	cbnz	r0, 8011d40 <acos+0x50>
 8011d14:	ec45 4b10 	vmov	d0, r4, r5
 8011d18:	f002 fa1c 	bl	8014154 <fabs>
 8011d1c:	4b0c      	ldr	r3, [pc, #48]	; (8011d50 <acos+0x60>)
 8011d1e:	ec51 0b10 	vmov	r0, r1, d0
 8011d22:	2200      	movs	r2, #0
 8011d24:	f7ee ff12 	bl	8000b4c <__aeabi_dcmpgt>
 8011d28:	b150      	cbz	r0, 8011d40 <acos+0x50>
 8011d2a:	f7ff feaf 	bl	8011a8c <__errno>
 8011d2e:	ecbd 8b02 	vpop	{d8}
 8011d32:	2321      	movs	r3, #33	; 0x21
 8011d34:	6003      	str	r3, [r0, #0]
 8011d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d3a:	4806      	ldr	r0, [pc, #24]	; (8011d54 <acos+0x64>)
 8011d3c:	f002 baa0 	b.w	8014280 <nan>
 8011d40:	eeb0 0a48 	vmov.f32	s0, s16
 8011d44:	eef0 0a68 	vmov.f32	s1, s17
 8011d48:	ecbd 8b02 	vpop	{d8}
 8011d4c:	bd38      	pop	{r3, r4, r5, pc}
 8011d4e:	bf00      	nop
 8011d50:	3ff00000 	.word	0x3ff00000
 8011d54:	0803a626 	.word	0x0803a626

08011d58 <pow>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	ed2d 8b02 	vpush	{d8}
 8011d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8011d62:	eef0 8a60 	vmov.f32	s17, s1
 8011d66:	ec55 4b11 	vmov	r4, r5, d1
 8011d6a:	f000 faf1 	bl	8012350 <__ieee754_pow>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	462b      	mov	r3, r5
 8011d72:	4620      	mov	r0, r4
 8011d74:	4629      	mov	r1, r5
 8011d76:	ec57 6b10 	vmov	r6, r7, d0
 8011d7a:	f7ee fef1 	bl	8000b60 <__aeabi_dcmpun>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d13b      	bne.n	8011dfa <pow+0xa2>
 8011d82:	ec51 0b18 	vmov	r0, r1, d8
 8011d86:	2200      	movs	r2, #0
 8011d88:	2300      	movs	r3, #0
 8011d8a:	f7ee feb7 	bl	8000afc <__aeabi_dcmpeq>
 8011d8e:	b1b8      	cbz	r0, 8011dc0 <pow+0x68>
 8011d90:	2200      	movs	r2, #0
 8011d92:	2300      	movs	r3, #0
 8011d94:	4620      	mov	r0, r4
 8011d96:	4629      	mov	r1, r5
 8011d98:	f7ee feb0 	bl	8000afc <__aeabi_dcmpeq>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d146      	bne.n	8011e2e <pow+0xd6>
 8011da0:	ec45 4b10 	vmov	d0, r4, r5
 8011da4:	f002 f9df 	bl	8014166 <finite>
 8011da8:	b338      	cbz	r0, 8011dfa <pow+0xa2>
 8011daa:	2200      	movs	r2, #0
 8011dac:	2300      	movs	r3, #0
 8011dae:	4620      	mov	r0, r4
 8011db0:	4629      	mov	r1, r5
 8011db2:	f7ee fead 	bl	8000b10 <__aeabi_dcmplt>
 8011db6:	b300      	cbz	r0, 8011dfa <pow+0xa2>
 8011db8:	f7ff fe68 	bl	8011a8c <__errno>
 8011dbc:	2322      	movs	r3, #34	; 0x22
 8011dbe:	e01b      	b.n	8011df8 <pow+0xa0>
 8011dc0:	ec47 6b10 	vmov	d0, r6, r7
 8011dc4:	f002 f9cf 	bl	8014166 <finite>
 8011dc8:	b9e0      	cbnz	r0, 8011e04 <pow+0xac>
 8011dca:	eeb0 0a48 	vmov.f32	s0, s16
 8011dce:	eef0 0a68 	vmov.f32	s1, s17
 8011dd2:	f002 f9c8 	bl	8014166 <finite>
 8011dd6:	b1a8      	cbz	r0, 8011e04 <pow+0xac>
 8011dd8:	ec45 4b10 	vmov	d0, r4, r5
 8011ddc:	f002 f9c3 	bl	8014166 <finite>
 8011de0:	b180      	cbz	r0, 8011e04 <pow+0xac>
 8011de2:	4632      	mov	r2, r6
 8011de4:	463b      	mov	r3, r7
 8011de6:	4630      	mov	r0, r6
 8011de8:	4639      	mov	r1, r7
 8011dea:	f7ee feb9 	bl	8000b60 <__aeabi_dcmpun>
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d0e2      	beq.n	8011db8 <pow+0x60>
 8011df2:	f7ff fe4b 	bl	8011a8c <__errno>
 8011df6:	2321      	movs	r3, #33	; 0x21
 8011df8:	6003      	str	r3, [r0, #0]
 8011dfa:	ecbd 8b02 	vpop	{d8}
 8011dfe:	ec47 6b10 	vmov	d0, r6, r7
 8011e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e04:	2200      	movs	r2, #0
 8011e06:	2300      	movs	r3, #0
 8011e08:	4630      	mov	r0, r6
 8011e0a:	4639      	mov	r1, r7
 8011e0c:	f7ee fe76 	bl	8000afc <__aeabi_dcmpeq>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d0f2      	beq.n	8011dfa <pow+0xa2>
 8011e14:	eeb0 0a48 	vmov.f32	s0, s16
 8011e18:	eef0 0a68 	vmov.f32	s1, s17
 8011e1c:	f002 f9a3 	bl	8014166 <finite>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d0ea      	beq.n	8011dfa <pow+0xa2>
 8011e24:	ec45 4b10 	vmov	d0, r4, r5
 8011e28:	f002 f99d 	bl	8014166 <finite>
 8011e2c:	e7c3      	b.n	8011db6 <pow+0x5e>
 8011e2e:	4f01      	ldr	r7, [pc, #4]	; (8011e34 <pow+0xdc>)
 8011e30:	2600      	movs	r6, #0
 8011e32:	e7e2      	b.n	8011dfa <pow+0xa2>
 8011e34:	3ff00000 	.word	0x3ff00000

08011e38 <sqrt>:
 8011e38:	b538      	push	{r3, r4, r5, lr}
 8011e3a:	ed2d 8b02 	vpush	{d8}
 8011e3e:	ec55 4b10 	vmov	r4, r5, d0
 8011e42:	f001 f9c1 	bl	80131c8 <__ieee754_sqrt>
 8011e46:	4622      	mov	r2, r4
 8011e48:	462b      	mov	r3, r5
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	4629      	mov	r1, r5
 8011e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8011e52:	eef0 8a60 	vmov.f32	s17, s1
 8011e56:	f7ee fe83 	bl	8000b60 <__aeabi_dcmpun>
 8011e5a:	b990      	cbnz	r0, 8011e82 <sqrt+0x4a>
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	2300      	movs	r3, #0
 8011e60:	4620      	mov	r0, r4
 8011e62:	4629      	mov	r1, r5
 8011e64:	f7ee fe54 	bl	8000b10 <__aeabi_dcmplt>
 8011e68:	b158      	cbz	r0, 8011e82 <sqrt+0x4a>
 8011e6a:	f7ff fe0f 	bl	8011a8c <__errno>
 8011e6e:	2321      	movs	r3, #33	; 0x21
 8011e70:	6003      	str	r3, [r0, #0]
 8011e72:	2200      	movs	r2, #0
 8011e74:	2300      	movs	r3, #0
 8011e76:	4610      	mov	r0, r2
 8011e78:	4619      	mov	r1, r3
 8011e7a:	f7ee fd01 	bl	8000880 <__aeabi_ddiv>
 8011e7e:	ec41 0b18 	vmov	d8, r0, r1
 8011e82:	eeb0 0a48 	vmov.f32	s0, s16
 8011e86:	eef0 0a68 	vmov.f32	s1, s17
 8011e8a:	ecbd 8b02 	vpop	{d8}
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}

08011e90 <__ieee754_acos>:
 8011e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e94:	ec55 4b10 	vmov	r4, r5, d0
 8011e98:	49b7      	ldr	r1, [pc, #732]	; (8012178 <__ieee754_acos+0x2e8>)
 8011e9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e9e:	428b      	cmp	r3, r1
 8011ea0:	dd1b      	ble.n	8011eda <__ieee754_acos+0x4a>
 8011ea2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011ea6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011eaa:	4323      	orrs	r3, r4
 8011eac:	d106      	bne.n	8011ebc <__ieee754_acos+0x2c>
 8011eae:	2d00      	cmp	r5, #0
 8011eb0:	f300 8211 	bgt.w	80122d6 <__ieee754_acos+0x446>
 8011eb4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8012110 <__ieee754_acos+0x280>
 8011eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ebc:	ee10 2a10 	vmov	r2, s0
 8011ec0:	462b      	mov	r3, r5
 8011ec2:	ee10 0a10 	vmov	r0, s0
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee f9f8 	bl	80002bc <__aeabi_dsub>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	f7ee fcd6 	bl	8000880 <__aeabi_ddiv>
 8011ed4:	ec41 0b10 	vmov	d0, r0, r1
 8011ed8:	e7ee      	b.n	8011eb8 <__ieee754_acos+0x28>
 8011eda:	49a8      	ldr	r1, [pc, #672]	; (801217c <__ieee754_acos+0x2ec>)
 8011edc:	428b      	cmp	r3, r1
 8011ede:	f300 8087 	bgt.w	8011ff0 <__ieee754_acos+0x160>
 8011ee2:	4aa7      	ldr	r2, [pc, #668]	; (8012180 <__ieee754_acos+0x2f0>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	f340 81f9 	ble.w	80122dc <__ieee754_acos+0x44c>
 8011eea:	ee10 2a10 	vmov	r2, s0
 8011eee:	ee10 0a10 	vmov	r0, s0
 8011ef2:	462b      	mov	r3, r5
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	f7ee fb99 	bl	800062c <__aeabi_dmul>
 8011efa:	a387      	add	r3, pc, #540	; (adr r3, 8012118 <__ieee754_acos+0x288>)
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	4606      	mov	r6, r0
 8011f02:	460f      	mov	r7, r1
 8011f04:	f7ee fb92 	bl	800062c <__aeabi_dmul>
 8011f08:	a385      	add	r3, pc, #532	; (adr r3, 8012120 <__ieee754_acos+0x290>)
 8011f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0e:	f7ee f9d7 	bl	80002c0 <__adddf3>
 8011f12:	4632      	mov	r2, r6
 8011f14:	463b      	mov	r3, r7
 8011f16:	f7ee fb89 	bl	800062c <__aeabi_dmul>
 8011f1a:	a383      	add	r3, pc, #524	; (adr r3, 8012128 <__ieee754_acos+0x298>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee f9cc 	bl	80002bc <__aeabi_dsub>
 8011f24:	4632      	mov	r2, r6
 8011f26:	463b      	mov	r3, r7
 8011f28:	f7ee fb80 	bl	800062c <__aeabi_dmul>
 8011f2c:	a380      	add	r3, pc, #512	; (adr r3, 8012130 <__ieee754_acos+0x2a0>)
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	f7ee f9c5 	bl	80002c0 <__adddf3>
 8011f36:	4632      	mov	r2, r6
 8011f38:	463b      	mov	r3, r7
 8011f3a:	f7ee fb77 	bl	800062c <__aeabi_dmul>
 8011f3e:	a37e      	add	r3, pc, #504	; (adr r3, 8012138 <__ieee754_acos+0x2a8>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	f7ee f9ba 	bl	80002bc <__aeabi_dsub>
 8011f48:	4632      	mov	r2, r6
 8011f4a:	463b      	mov	r3, r7
 8011f4c:	f7ee fb6e 	bl	800062c <__aeabi_dmul>
 8011f50:	a37b      	add	r3, pc, #492	; (adr r3, 8012140 <__ieee754_acos+0x2b0>)
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	f7ee f9b3 	bl	80002c0 <__adddf3>
 8011f5a:	4632      	mov	r2, r6
 8011f5c:	463b      	mov	r3, r7
 8011f5e:	f7ee fb65 	bl	800062c <__aeabi_dmul>
 8011f62:	a379      	add	r3, pc, #484	; (adr r3, 8012148 <__ieee754_acos+0x2b8>)
 8011f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f68:	4680      	mov	r8, r0
 8011f6a:	4689      	mov	r9, r1
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	4639      	mov	r1, r7
 8011f70:	f7ee fb5c 	bl	800062c <__aeabi_dmul>
 8011f74:	a376      	add	r3, pc, #472	; (adr r3, 8012150 <__ieee754_acos+0x2c0>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f7ee f99f 	bl	80002bc <__aeabi_dsub>
 8011f7e:	4632      	mov	r2, r6
 8011f80:	463b      	mov	r3, r7
 8011f82:	f7ee fb53 	bl	800062c <__aeabi_dmul>
 8011f86:	a374      	add	r3, pc, #464	; (adr r3, 8012158 <__ieee754_acos+0x2c8>)
 8011f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8c:	f7ee f998 	bl	80002c0 <__adddf3>
 8011f90:	4632      	mov	r2, r6
 8011f92:	463b      	mov	r3, r7
 8011f94:	f7ee fb4a 	bl	800062c <__aeabi_dmul>
 8011f98:	a371      	add	r3, pc, #452	; (adr r3, 8012160 <__ieee754_acos+0x2d0>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f7ee f98d 	bl	80002bc <__aeabi_dsub>
 8011fa2:	4632      	mov	r2, r6
 8011fa4:	463b      	mov	r3, r7
 8011fa6:	f7ee fb41 	bl	800062c <__aeabi_dmul>
 8011faa:	4b76      	ldr	r3, [pc, #472]	; (8012184 <__ieee754_acos+0x2f4>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	f7ee f987 	bl	80002c0 <__adddf3>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4640      	mov	r0, r8
 8011fb8:	4649      	mov	r1, r9
 8011fba:	f7ee fc61 	bl	8000880 <__aeabi_ddiv>
 8011fbe:	4622      	mov	r2, r4
 8011fc0:	462b      	mov	r3, r5
 8011fc2:	f7ee fb33 	bl	800062c <__aeabi_dmul>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	460b      	mov	r3, r1
 8011fca:	a167      	add	r1, pc, #412	; (adr r1, 8012168 <__ieee754_acos+0x2d8>)
 8011fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fd0:	f7ee f974 	bl	80002bc <__aeabi_dsub>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	4620      	mov	r0, r4
 8011fda:	4629      	mov	r1, r5
 8011fdc:	f7ee f96e 	bl	80002bc <__aeabi_dsub>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	a162      	add	r1, pc, #392	; (adr r1, 8012170 <__ieee754_acos+0x2e0>)
 8011fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fea:	f7ee f967 	bl	80002bc <__aeabi_dsub>
 8011fee:	e771      	b.n	8011ed4 <__ieee754_acos+0x44>
 8011ff0:	2d00      	cmp	r5, #0
 8011ff2:	f280 80cb 	bge.w	801218c <__ieee754_acos+0x2fc>
 8011ff6:	ee10 0a10 	vmov	r0, s0
 8011ffa:	4b62      	ldr	r3, [pc, #392]	; (8012184 <__ieee754_acos+0x2f4>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	4629      	mov	r1, r5
 8012000:	f7ee f95e 	bl	80002c0 <__adddf3>
 8012004:	4b60      	ldr	r3, [pc, #384]	; (8012188 <__ieee754_acos+0x2f8>)
 8012006:	2200      	movs	r2, #0
 8012008:	f7ee fb10 	bl	800062c <__aeabi_dmul>
 801200c:	a342      	add	r3, pc, #264	; (adr r3, 8012118 <__ieee754_acos+0x288>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	4604      	mov	r4, r0
 8012014:	460d      	mov	r5, r1
 8012016:	f7ee fb09 	bl	800062c <__aeabi_dmul>
 801201a:	a341      	add	r3, pc, #260	; (adr r3, 8012120 <__ieee754_acos+0x290>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	f7ee f94e 	bl	80002c0 <__adddf3>
 8012024:	4622      	mov	r2, r4
 8012026:	462b      	mov	r3, r5
 8012028:	f7ee fb00 	bl	800062c <__aeabi_dmul>
 801202c:	a33e      	add	r3, pc, #248	; (adr r3, 8012128 <__ieee754_acos+0x298>)
 801202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012032:	f7ee f943 	bl	80002bc <__aeabi_dsub>
 8012036:	4622      	mov	r2, r4
 8012038:	462b      	mov	r3, r5
 801203a:	f7ee faf7 	bl	800062c <__aeabi_dmul>
 801203e:	a33c      	add	r3, pc, #240	; (adr r3, 8012130 <__ieee754_acos+0x2a0>)
 8012040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012044:	f7ee f93c 	bl	80002c0 <__adddf3>
 8012048:	4622      	mov	r2, r4
 801204a:	462b      	mov	r3, r5
 801204c:	f7ee faee 	bl	800062c <__aeabi_dmul>
 8012050:	a339      	add	r3, pc, #228	; (adr r3, 8012138 <__ieee754_acos+0x2a8>)
 8012052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012056:	f7ee f931 	bl	80002bc <__aeabi_dsub>
 801205a:	4622      	mov	r2, r4
 801205c:	462b      	mov	r3, r5
 801205e:	f7ee fae5 	bl	800062c <__aeabi_dmul>
 8012062:	a337      	add	r3, pc, #220	; (adr r3, 8012140 <__ieee754_acos+0x2b0>)
 8012064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012068:	f7ee f92a 	bl	80002c0 <__adddf3>
 801206c:	4622      	mov	r2, r4
 801206e:	462b      	mov	r3, r5
 8012070:	f7ee fadc 	bl	800062c <__aeabi_dmul>
 8012074:	ec45 4b10 	vmov	d0, r4, r5
 8012078:	4680      	mov	r8, r0
 801207a:	4689      	mov	r9, r1
 801207c:	f001 f8a4 	bl	80131c8 <__ieee754_sqrt>
 8012080:	a331      	add	r3, pc, #196	; (adr r3, 8012148 <__ieee754_acos+0x2b8>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	4620      	mov	r0, r4
 8012088:	4629      	mov	r1, r5
 801208a:	ec57 6b10 	vmov	r6, r7, d0
 801208e:	f7ee facd 	bl	800062c <__aeabi_dmul>
 8012092:	a32f      	add	r3, pc, #188	; (adr r3, 8012150 <__ieee754_acos+0x2c0>)
 8012094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012098:	f7ee f910 	bl	80002bc <__aeabi_dsub>
 801209c:	4622      	mov	r2, r4
 801209e:	462b      	mov	r3, r5
 80120a0:	f7ee fac4 	bl	800062c <__aeabi_dmul>
 80120a4:	a32c      	add	r3, pc, #176	; (adr r3, 8012158 <__ieee754_acos+0x2c8>)
 80120a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120aa:	f7ee f909 	bl	80002c0 <__adddf3>
 80120ae:	4622      	mov	r2, r4
 80120b0:	462b      	mov	r3, r5
 80120b2:	f7ee fabb 	bl	800062c <__aeabi_dmul>
 80120b6:	a32a      	add	r3, pc, #168	; (adr r3, 8012160 <__ieee754_acos+0x2d0>)
 80120b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120bc:	f7ee f8fe 	bl	80002bc <__aeabi_dsub>
 80120c0:	4622      	mov	r2, r4
 80120c2:	462b      	mov	r3, r5
 80120c4:	f7ee fab2 	bl	800062c <__aeabi_dmul>
 80120c8:	4b2e      	ldr	r3, [pc, #184]	; (8012184 <__ieee754_acos+0x2f4>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	f7ee f8f8 	bl	80002c0 <__adddf3>
 80120d0:	4602      	mov	r2, r0
 80120d2:	460b      	mov	r3, r1
 80120d4:	4640      	mov	r0, r8
 80120d6:	4649      	mov	r1, r9
 80120d8:	f7ee fbd2 	bl	8000880 <__aeabi_ddiv>
 80120dc:	4632      	mov	r2, r6
 80120de:	463b      	mov	r3, r7
 80120e0:	f7ee faa4 	bl	800062c <__aeabi_dmul>
 80120e4:	a320      	add	r3, pc, #128	; (adr r3, 8012168 <__ieee754_acos+0x2d8>)
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	f7ee f8e7 	bl	80002bc <__aeabi_dsub>
 80120ee:	4632      	mov	r2, r6
 80120f0:	463b      	mov	r3, r7
 80120f2:	f7ee f8e5 	bl	80002c0 <__adddf3>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	f7ee f8e1 	bl	80002c0 <__adddf3>
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	a103      	add	r1, pc, #12	; (adr r1, 8012110 <__ieee754_acos+0x280>)
 8012104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012108:	e76f      	b.n	8011fea <__ieee754_acos+0x15a>
 801210a:	bf00      	nop
 801210c:	f3af 8000 	nop.w
 8012110:	54442d18 	.word	0x54442d18
 8012114:	400921fb 	.word	0x400921fb
 8012118:	0dfdf709 	.word	0x0dfdf709
 801211c:	3f023de1 	.word	0x3f023de1
 8012120:	7501b288 	.word	0x7501b288
 8012124:	3f49efe0 	.word	0x3f49efe0
 8012128:	b5688f3b 	.word	0xb5688f3b
 801212c:	3fa48228 	.word	0x3fa48228
 8012130:	0e884455 	.word	0x0e884455
 8012134:	3fc9c155 	.word	0x3fc9c155
 8012138:	03eb6f7d 	.word	0x03eb6f7d
 801213c:	3fd4d612 	.word	0x3fd4d612
 8012140:	55555555 	.word	0x55555555
 8012144:	3fc55555 	.word	0x3fc55555
 8012148:	b12e9282 	.word	0xb12e9282
 801214c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012150:	1b8d0159 	.word	0x1b8d0159
 8012154:	3fe6066c 	.word	0x3fe6066c
 8012158:	9c598ac8 	.word	0x9c598ac8
 801215c:	40002ae5 	.word	0x40002ae5
 8012160:	1c8a2d4b 	.word	0x1c8a2d4b
 8012164:	40033a27 	.word	0x40033a27
 8012168:	33145c07 	.word	0x33145c07
 801216c:	3c91a626 	.word	0x3c91a626
 8012170:	54442d18 	.word	0x54442d18
 8012174:	3ff921fb 	.word	0x3ff921fb
 8012178:	3fefffff 	.word	0x3fefffff
 801217c:	3fdfffff 	.word	0x3fdfffff
 8012180:	3c600000 	.word	0x3c600000
 8012184:	3ff00000 	.word	0x3ff00000
 8012188:	3fe00000 	.word	0x3fe00000
 801218c:	ee10 2a10 	vmov	r2, s0
 8012190:	462b      	mov	r3, r5
 8012192:	496d      	ldr	r1, [pc, #436]	; (8012348 <__ieee754_acos+0x4b8>)
 8012194:	2000      	movs	r0, #0
 8012196:	f7ee f891 	bl	80002bc <__aeabi_dsub>
 801219a:	4b6c      	ldr	r3, [pc, #432]	; (801234c <__ieee754_acos+0x4bc>)
 801219c:	2200      	movs	r2, #0
 801219e:	f7ee fa45 	bl	800062c <__aeabi_dmul>
 80121a2:	4604      	mov	r4, r0
 80121a4:	460d      	mov	r5, r1
 80121a6:	ec45 4b10 	vmov	d0, r4, r5
 80121aa:	f001 f80d 	bl	80131c8 <__ieee754_sqrt>
 80121ae:	a34e      	add	r3, pc, #312	; (adr r3, 80122e8 <__ieee754_acos+0x458>)
 80121b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b4:	4620      	mov	r0, r4
 80121b6:	4629      	mov	r1, r5
 80121b8:	ec59 8b10 	vmov	r8, r9, d0
 80121bc:	f7ee fa36 	bl	800062c <__aeabi_dmul>
 80121c0:	a34b      	add	r3, pc, #300	; (adr r3, 80122f0 <__ieee754_acos+0x460>)
 80121c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c6:	f7ee f87b 	bl	80002c0 <__adddf3>
 80121ca:	4622      	mov	r2, r4
 80121cc:	462b      	mov	r3, r5
 80121ce:	f7ee fa2d 	bl	800062c <__aeabi_dmul>
 80121d2:	a349      	add	r3, pc, #292	; (adr r3, 80122f8 <__ieee754_acos+0x468>)
 80121d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d8:	f7ee f870 	bl	80002bc <__aeabi_dsub>
 80121dc:	4622      	mov	r2, r4
 80121de:	462b      	mov	r3, r5
 80121e0:	f7ee fa24 	bl	800062c <__aeabi_dmul>
 80121e4:	a346      	add	r3, pc, #280	; (adr r3, 8012300 <__ieee754_acos+0x470>)
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	f7ee f869 	bl	80002c0 <__adddf3>
 80121ee:	4622      	mov	r2, r4
 80121f0:	462b      	mov	r3, r5
 80121f2:	f7ee fa1b 	bl	800062c <__aeabi_dmul>
 80121f6:	a344      	add	r3, pc, #272	; (adr r3, 8012308 <__ieee754_acos+0x478>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f7ee f85e 	bl	80002bc <__aeabi_dsub>
 8012200:	4622      	mov	r2, r4
 8012202:	462b      	mov	r3, r5
 8012204:	f7ee fa12 	bl	800062c <__aeabi_dmul>
 8012208:	a341      	add	r3, pc, #260	; (adr r3, 8012310 <__ieee754_acos+0x480>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f857 	bl	80002c0 <__adddf3>
 8012212:	4622      	mov	r2, r4
 8012214:	462b      	mov	r3, r5
 8012216:	f7ee fa09 	bl	800062c <__aeabi_dmul>
 801221a:	a33f      	add	r3, pc, #252	; (adr r3, 8012318 <__ieee754_acos+0x488>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	4682      	mov	sl, r0
 8012222:	468b      	mov	fp, r1
 8012224:	4620      	mov	r0, r4
 8012226:	4629      	mov	r1, r5
 8012228:	f7ee fa00 	bl	800062c <__aeabi_dmul>
 801222c:	a33c      	add	r3, pc, #240	; (adr r3, 8012320 <__ieee754_acos+0x490>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f7ee f843 	bl	80002bc <__aeabi_dsub>
 8012236:	4622      	mov	r2, r4
 8012238:	462b      	mov	r3, r5
 801223a:	f7ee f9f7 	bl	800062c <__aeabi_dmul>
 801223e:	a33a      	add	r3, pc, #232	; (adr r3, 8012328 <__ieee754_acos+0x498>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	f7ee f83c 	bl	80002c0 <__adddf3>
 8012248:	4622      	mov	r2, r4
 801224a:	462b      	mov	r3, r5
 801224c:	f7ee f9ee 	bl	800062c <__aeabi_dmul>
 8012250:	a337      	add	r3, pc, #220	; (adr r3, 8012330 <__ieee754_acos+0x4a0>)
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f7ee f831 	bl	80002bc <__aeabi_dsub>
 801225a:	4622      	mov	r2, r4
 801225c:	462b      	mov	r3, r5
 801225e:	f7ee f9e5 	bl	800062c <__aeabi_dmul>
 8012262:	4b39      	ldr	r3, [pc, #228]	; (8012348 <__ieee754_acos+0x4b8>)
 8012264:	2200      	movs	r2, #0
 8012266:	f7ee f82b 	bl	80002c0 <__adddf3>
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	4650      	mov	r0, sl
 8012270:	4659      	mov	r1, fp
 8012272:	f7ee fb05 	bl	8000880 <__aeabi_ddiv>
 8012276:	4642      	mov	r2, r8
 8012278:	464b      	mov	r3, r9
 801227a:	f7ee f9d7 	bl	800062c <__aeabi_dmul>
 801227e:	2600      	movs	r6, #0
 8012280:	4682      	mov	sl, r0
 8012282:	468b      	mov	fp, r1
 8012284:	4632      	mov	r2, r6
 8012286:	464b      	mov	r3, r9
 8012288:	4630      	mov	r0, r6
 801228a:	4649      	mov	r1, r9
 801228c:	f7ee f9ce 	bl	800062c <__aeabi_dmul>
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	4620      	mov	r0, r4
 8012296:	4629      	mov	r1, r5
 8012298:	f7ee f810 	bl	80002bc <__aeabi_dsub>
 801229c:	4632      	mov	r2, r6
 801229e:	4604      	mov	r4, r0
 80122a0:	460d      	mov	r5, r1
 80122a2:	464b      	mov	r3, r9
 80122a4:	4640      	mov	r0, r8
 80122a6:	4649      	mov	r1, r9
 80122a8:	f7ee f80a 	bl	80002c0 <__adddf3>
 80122ac:	4602      	mov	r2, r0
 80122ae:	460b      	mov	r3, r1
 80122b0:	4620      	mov	r0, r4
 80122b2:	4629      	mov	r1, r5
 80122b4:	f7ee fae4 	bl	8000880 <__aeabi_ddiv>
 80122b8:	4602      	mov	r2, r0
 80122ba:	460b      	mov	r3, r1
 80122bc:	4650      	mov	r0, sl
 80122be:	4659      	mov	r1, fp
 80122c0:	f7ed fffe 	bl	80002c0 <__adddf3>
 80122c4:	4632      	mov	r2, r6
 80122c6:	464b      	mov	r3, r9
 80122c8:	f7ed fffa 	bl	80002c0 <__adddf3>
 80122cc:	4602      	mov	r2, r0
 80122ce:	460b      	mov	r3, r1
 80122d0:	f7ed fff6 	bl	80002c0 <__adddf3>
 80122d4:	e5fe      	b.n	8011ed4 <__ieee754_acos+0x44>
 80122d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012338 <__ieee754_acos+0x4a8>
 80122da:	e5ed      	b.n	8011eb8 <__ieee754_acos+0x28>
 80122dc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012340 <__ieee754_acos+0x4b0>
 80122e0:	e5ea      	b.n	8011eb8 <__ieee754_acos+0x28>
 80122e2:	bf00      	nop
 80122e4:	f3af 8000 	nop.w
 80122e8:	0dfdf709 	.word	0x0dfdf709
 80122ec:	3f023de1 	.word	0x3f023de1
 80122f0:	7501b288 	.word	0x7501b288
 80122f4:	3f49efe0 	.word	0x3f49efe0
 80122f8:	b5688f3b 	.word	0xb5688f3b
 80122fc:	3fa48228 	.word	0x3fa48228
 8012300:	0e884455 	.word	0x0e884455
 8012304:	3fc9c155 	.word	0x3fc9c155
 8012308:	03eb6f7d 	.word	0x03eb6f7d
 801230c:	3fd4d612 	.word	0x3fd4d612
 8012310:	55555555 	.word	0x55555555
 8012314:	3fc55555 	.word	0x3fc55555
 8012318:	b12e9282 	.word	0xb12e9282
 801231c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012320:	1b8d0159 	.word	0x1b8d0159
 8012324:	3fe6066c 	.word	0x3fe6066c
 8012328:	9c598ac8 	.word	0x9c598ac8
 801232c:	40002ae5 	.word	0x40002ae5
 8012330:	1c8a2d4b 	.word	0x1c8a2d4b
 8012334:	40033a27 	.word	0x40033a27
	...
 8012340:	54442d18 	.word	0x54442d18
 8012344:	3ff921fb 	.word	0x3ff921fb
 8012348:	3ff00000 	.word	0x3ff00000
 801234c:	3fe00000 	.word	0x3fe00000

08012350 <__ieee754_pow>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	ed2d 8b06 	vpush	{d8-d10}
 8012358:	b089      	sub	sp, #36	; 0x24
 801235a:	ed8d 1b00 	vstr	d1, [sp]
 801235e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012362:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012366:	ea58 0102 	orrs.w	r1, r8, r2
 801236a:	ec57 6b10 	vmov	r6, r7, d0
 801236e:	d115      	bne.n	801239c <__ieee754_pow+0x4c>
 8012370:	19b3      	adds	r3, r6, r6
 8012372:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012376:	4152      	adcs	r2, r2
 8012378:	4299      	cmp	r1, r3
 801237a:	4b89      	ldr	r3, [pc, #548]	; (80125a0 <__ieee754_pow+0x250>)
 801237c:	4193      	sbcs	r3, r2
 801237e:	f080 84d2 	bcs.w	8012d26 <__ieee754_pow+0x9d6>
 8012382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012386:	4630      	mov	r0, r6
 8012388:	4639      	mov	r1, r7
 801238a:	f7ed ff99 	bl	80002c0 <__adddf3>
 801238e:	ec41 0b10 	vmov	d0, r0, r1
 8012392:	b009      	add	sp, #36	; 0x24
 8012394:	ecbd 8b06 	vpop	{d8-d10}
 8012398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239c:	4b81      	ldr	r3, [pc, #516]	; (80125a4 <__ieee754_pow+0x254>)
 801239e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80123a2:	429c      	cmp	r4, r3
 80123a4:	ee10 aa10 	vmov	sl, s0
 80123a8:	463d      	mov	r5, r7
 80123aa:	dc06      	bgt.n	80123ba <__ieee754_pow+0x6a>
 80123ac:	d101      	bne.n	80123b2 <__ieee754_pow+0x62>
 80123ae:	2e00      	cmp	r6, #0
 80123b0:	d1e7      	bne.n	8012382 <__ieee754_pow+0x32>
 80123b2:	4598      	cmp	r8, r3
 80123b4:	dc01      	bgt.n	80123ba <__ieee754_pow+0x6a>
 80123b6:	d10f      	bne.n	80123d8 <__ieee754_pow+0x88>
 80123b8:	b172      	cbz	r2, 80123d8 <__ieee754_pow+0x88>
 80123ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80123be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80123c2:	ea55 050a 	orrs.w	r5, r5, sl
 80123c6:	d1dc      	bne.n	8012382 <__ieee754_pow+0x32>
 80123c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80123cc:	18db      	adds	r3, r3, r3
 80123ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80123d2:	4152      	adcs	r2, r2
 80123d4:	429d      	cmp	r5, r3
 80123d6:	e7d0      	b.n	801237a <__ieee754_pow+0x2a>
 80123d8:	2d00      	cmp	r5, #0
 80123da:	da3b      	bge.n	8012454 <__ieee754_pow+0x104>
 80123dc:	4b72      	ldr	r3, [pc, #456]	; (80125a8 <__ieee754_pow+0x258>)
 80123de:	4598      	cmp	r8, r3
 80123e0:	dc51      	bgt.n	8012486 <__ieee754_pow+0x136>
 80123e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80123e6:	4598      	cmp	r8, r3
 80123e8:	f340 84ac 	ble.w	8012d44 <__ieee754_pow+0x9f4>
 80123ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80123f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80123f4:	2b14      	cmp	r3, #20
 80123f6:	dd0f      	ble.n	8012418 <__ieee754_pow+0xc8>
 80123f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80123fc:	fa22 f103 	lsr.w	r1, r2, r3
 8012400:	fa01 f303 	lsl.w	r3, r1, r3
 8012404:	4293      	cmp	r3, r2
 8012406:	f040 849d 	bne.w	8012d44 <__ieee754_pow+0x9f4>
 801240a:	f001 0101 	and.w	r1, r1, #1
 801240e:	f1c1 0302 	rsb	r3, r1, #2
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	b182      	cbz	r2, 8012438 <__ieee754_pow+0xe8>
 8012416:	e05f      	b.n	80124d8 <__ieee754_pow+0x188>
 8012418:	2a00      	cmp	r2, #0
 801241a:	d15b      	bne.n	80124d4 <__ieee754_pow+0x184>
 801241c:	f1c3 0314 	rsb	r3, r3, #20
 8012420:	fa48 f103 	asr.w	r1, r8, r3
 8012424:	fa01 f303 	lsl.w	r3, r1, r3
 8012428:	4543      	cmp	r3, r8
 801242a:	f040 8488 	bne.w	8012d3e <__ieee754_pow+0x9ee>
 801242e:	f001 0101 	and.w	r1, r1, #1
 8012432:	f1c1 0302 	rsb	r3, r1, #2
 8012436:	9304      	str	r3, [sp, #16]
 8012438:	4b5c      	ldr	r3, [pc, #368]	; (80125ac <__ieee754_pow+0x25c>)
 801243a:	4598      	cmp	r8, r3
 801243c:	d132      	bne.n	80124a4 <__ieee754_pow+0x154>
 801243e:	f1b9 0f00 	cmp.w	r9, #0
 8012442:	f280 8478 	bge.w	8012d36 <__ieee754_pow+0x9e6>
 8012446:	4959      	ldr	r1, [pc, #356]	; (80125ac <__ieee754_pow+0x25c>)
 8012448:	4632      	mov	r2, r6
 801244a:	463b      	mov	r3, r7
 801244c:	2000      	movs	r0, #0
 801244e:	f7ee fa17 	bl	8000880 <__aeabi_ddiv>
 8012452:	e79c      	b.n	801238e <__ieee754_pow+0x3e>
 8012454:	2300      	movs	r3, #0
 8012456:	9304      	str	r3, [sp, #16]
 8012458:	2a00      	cmp	r2, #0
 801245a:	d13d      	bne.n	80124d8 <__ieee754_pow+0x188>
 801245c:	4b51      	ldr	r3, [pc, #324]	; (80125a4 <__ieee754_pow+0x254>)
 801245e:	4598      	cmp	r8, r3
 8012460:	d1ea      	bne.n	8012438 <__ieee754_pow+0xe8>
 8012462:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012466:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801246a:	ea53 030a 	orrs.w	r3, r3, sl
 801246e:	f000 845a 	beq.w	8012d26 <__ieee754_pow+0x9d6>
 8012472:	4b4f      	ldr	r3, [pc, #316]	; (80125b0 <__ieee754_pow+0x260>)
 8012474:	429c      	cmp	r4, r3
 8012476:	dd08      	ble.n	801248a <__ieee754_pow+0x13a>
 8012478:	f1b9 0f00 	cmp.w	r9, #0
 801247c:	f2c0 8457 	blt.w	8012d2e <__ieee754_pow+0x9de>
 8012480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012484:	e783      	b.n	801238e <__ieee754_pow+0x3e>
 8012486:	2302      	movs	r3, #2
 8012488:	e7e5      	b.n	8012456 <__ieee754_pow+0x106>
 801248a:	f1b9 0f00 	cmp.w	r9, #0
 801248e:	f04f 0000 	mov.w	r0, #0
 8012492:	f04f 0100 	mov.w	r1, #0
 8012496:	f6bf af7a 	bge.w	801238e <__ieee754_pow+0x3e>
 801249a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801249e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124a2:	e774      	b.n	801238e <__ieee754_pow+0x3e>
 80124a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80124a8:	d106      	bne.n	80124b8 <__ieee754_pow+0x168>
 80124aa:	4632      	mov	r2, r6
 80124ac:	463b      	mov	r3, r7
 80124ae:	4630      	mov	r0, r6
 80124b0:	4639      	mov	r1, r7
 80124b2:	f7ee f8bb 	bl	800062c <__aeabi_dmul>
 80124b6:	e76a      	b.n	801238e <__ieee754_pow+0x3e>
 80124b8:	4b3e      	ldr	r3, [pc, #248]	; (80125b4 <__ieee754_pow+0x264>)
 80124ba:	4599      	cmp	r9, r3
 80124bc:	d10c      	bne.n	80124d8 <__ieee754_pow+0x188>
 80124be:	2d00      	cmp	r5, #0
 80124c0:	db0a      	blt.n	80124d8 <__ieee754_pow+0x188>
 80124c2:	ec47 6b10 	vmov	d0, r6, r7
 80124c6:	b009      	add	sp, #36	; 0x24
 80124c8:	ecbd 8b06 	vpop	{d8-d10}
 80124cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d0:	f000 be7a 	b.w	80131c8 <__ieee754_sqrt>
 80124d4:	2300      	movs	r3, #0
 80124d6:	9304      	str	r3, [sp, #16]
 80124d8:	ec47 6b10 	vmov	d0, r6, r7
 80124dc:	f001 fe3a 	bl	8014154 <fabs>
 80124e0:	ec51 0b10 	vmov	r0, r1, d0
 80124e4:	f1ba 0f00 	cmp.w	sl, #0
 80124e8:	d129      	bne.n	801253e <__ieee754_pow+0x1ee>
 80124ea:	b124      	cbz	r4, 80124f6 <__ieee754_pow+0x1a6>
 80124ec:	4b2f      	ldr	r3, [pc, #188]	; (80125ac <__ieee754_pow+0x25c>)
 80124ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d123      	bne.n	801253e <__ieee754_pow+0x1ee>
 80124f6:	f1b9 0f00 	cmp.w	r9, #0
 80124fa:	da05      	bge.n	8012508 <__ieee754_pow+0x1b8>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	2000      	movs	r0, #0
 8012502:	492a      	ldr	r1, [pc, #168]	; (80125ac <__ieee754_pow+0x25c>)
 8012504:	f7ee f9bc 	bl	8000880 <__aeabi_ddiv>
 8012508:	2d00      	cmp	r5, #0
 801250a:	f6bf af40 	bge.w	801238e <__ieee754_pow+0x3e>
 801250e:	9b04      	ldr	r3, [sp, #16]
 8012510:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012514:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012518:	4323      	orrs	r3, r4
 801251a:	d108      	bne.n	801252e <__ieee754_pow+0x1de>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4610      	mov	r0, r2
 8012522:	4619      	mov	r1, r3
 8012524:	f7ed feca 	bl	80002bc <__aeabi_dsub>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	e78f      	b.n	801244e <__ieee754_pow+0xfe>
 801252e:	9b04      	ldr	r3, [sp, #16]
 8012530:	2b01      	cmp	r3, #1
 8012532:	f47f af2c 	bne.w	801238e <__ieee754_pow+0x3e>
 8012536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801253a:	4619      	mov	r1, r3
 801253c:	e727      	b.n	801238e <__ieee754_pow+0x3e>
 801253e:	0feb      	lsrs	r3, r5, #31
 8012540:	3b01      	subs	r3, #1
 8012542:	9306      	str	r3, [sp, #24]
 8012544:	9a06      	ldr	r2, [sp, #24]
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	4313      	orrs	r3, r2
 801254a:	d102      	bne.n	8012552 <__ieee754_pow+0x202>
 801254c:	4632      	mov	r2, r6
 801254e:	463b      	mov	r3, r7
 8012550:	e7e6      	b.n	8012520 <__ieee754_pow+0x1d0>
 8012552:	4b19      	ldr	r3, [pc, #100]	; (80125b8 <__ieee754_pow+0x268>)
 8012554:	4598      	cmp	r8, r3
 8012556:	f340 80fb 	ble.w	8012750 <__ieee754_pow+0x400>
 801255a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801255e:	4598      	cmp	r8, r3
 8012560:	4b13      	ldr	r3, [pc, #76]	; (80125b0 <__ieee754_pow+0x260>)
 8012562:	dd0c      	ble.n	801257e <__ieee754_pow+0x22e>
 8012564:	429c      	cmp	r4, r3
 8012566:	dc0f      	bgt.n	8012588 <__ieee754_pow+0x238>
 8012568:	f1b9 0f00 	cmp.w	r9, #0
 801256c:	da0f      	bge.n	801258e <__ieee754_pow+0x23e>
 801256e:	2000      	movs	r0, #0
 8012570:	b009      	add	sp, #36	; 0x24
 8012572:	ecbd 8b06 	vpop	{d8-d10}
 8012576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801257a:	f001 bde2 	b.w	8014142 <__math_oflow>
 801257e:	429c      	cmp	r4, r3
 8012580:	dbf2      	blt.n	8012568 <__ieee754_pow+0x218>
 8012582:	4b0a      	ldr	r3, [pc, #40]	; (80125ac <__ieee754_pow+0x25c>)
 8012584:	429c      	cmp	r4, r3
 8012586:	dd19      	ble.n	80125bc <__ieee754_pow+0x26c>
 8012588:	f1b9 0f00 	cmp.w	r9, #0
 801258c:	dcef      	bgt.n	801256e <__ieee754_pow+0x21e>
 801258e:	2000      	movs	r0, #0
 8012590:	b009      	add	sp, #36	; 0x24
 8012592:	ecbd 8b06 	vpop	{d8-d10}
 8012596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259a:	f001 bdc9 	b.w	8014130 <__math_uflow>
 801259e:	bf00      	nop
 80125a0:	fff00000 	.word	0xfff00000
 80125a4:	7ff00000 	.word	0x7ff00000
 80125a8:	433fffff 	.word	0x433fffff
 80125ac:	3ff00000 	.word	0x3ff00000
 80125b0:	3fefffff 	.word	0x3fefffff
 80125b4:	3fe00000 	.word	0x3fe00000
 80125b8:	41e00000 	.word	0x41e00000
 80125bc:	4b60      	ldr	r3, [pc, #384]	; (8012740 <__ieee754_pow+0x3f0>)
 80125be:	2200      	movs	r2, #0
 80125c0:	f7ed fe7c 	bl	80002bc <__aeabi_dsub>
 80125c4:	a354      	add	r3, pc, #336	; (adr r3, 8012718 <__ieee754_pow+0x3c8>)
 80125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ca:	4604      	mov	r4, r0
 80125cc:	460d      	mov	r5, r1
 80125ce:	f7ee f82d 	bl	800062c <__aeabi_dmul>
 80125d2:	a353      	add	r3, pc, #332	; (adr r3, 8012720 <__ieee754_pow+0x3d0>)
 80125d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d8:	4606      	mov	r6, r0
 80125da:	460f      	mov	r7, r1
 80125dc:	4620      	mov	r0, r4
 80125de:	4629      	mov	r1, r5
 80125e0:	f7ee f824 	bl	800062c <__aeabi_dmul>
 80125e4:	4b57      	ldr	r3, [pc, #348]	; (8012744 <__ieee754_pow+0x3f4>)
 80125e6:	4682      	mov	sl, r0
 80125e8:	468b      	mov	fp, r1
 80125ea:	2200      	movs	r2, #0
 80125ec:	4620      	mov	r0, r4
 80125ee:	4629      	mov	r1, r5
 80125f0:	f7ee f81c 	bl	800062c <__aeabi_dmul>
 80125f4:	4602      	mov	r2, r0
 80125f6:	460b      	mov	r3, r1
 80125f8:	a14b      	add	r1, pc, #300	; (adr r1, 8012728 <__ieee754_pow+0x3d8>)
 80125fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125fe:	f7ed fe5d 	bl	80002bc <__aeabi_dsub>
 8012602:	4622      	mov	r2, r4
 8012604:	462b      	mov	r3, r5
 8012606:	f7ee f811 	bl	800062c <__aeabi_dmul>
 801260a:	4602      	mov	r2, r0
 801260c:	460b      	mov	r3, r1
 801260e:	2000      	movs	r0, #0
 8012610:	494d      	ldr	r1, [pc, #308]	; (8012748 <__ieee754_pow+0x3f8>)
 8012612:	f7ed fe53 	bl	80002bc <__aeabi_dsub>
 8012616:	4622      	mov	r2, r4
 8012618:	4680      	mov	r8, r0
 801261a:	4689      	mov	r9, r1
 801261c:	462b      	mov	r3, r5
 801261e:	4620      	mov	r0, r4
 8012620:	4629      	mov	r1, r5
 8012622:	f7ee f803 	bl	800062c <__aeabi_dmul>
 8012626:	4602      	mov	r2, r0
 8012628:	460b      	mov	r3, r1
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ed fffd 	bl	800062c <__aeabi_dmul>
 8012632:	a33f      	add	r3, pc, #252	; (adr r3, 8012730 <__ieee754_pow+0x3e0>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f7ed fff8 	bl	800062c <__aeabi_dmul>
 801263c:	4602      	mov	r2, r0
 801263e:	460b      	mov	r3, r1
 8012640:	4650      	mov	r0, sl
 8012642:	4659      	mov	r1, fp
 8012644:	f7ed fe3a 	bl	80002bc <__aeabi_dsub>
 8012648:	4602      	mov	r2, r0
 801264a:	460b      	mov	r3, r1
 801264c:	4680      	mov	r8, r0
 801264e:	4689      	mov	r9, r1
 8012650:	4630      	mov	r0, r6
 8012652:	4639      	mov	r1, r7
 8012654:	f7ed fe34 	bl	80002c0 <__adddf3>
 8012658:	2000      	movs	r0, #0
 801265a:	4632      	mov	r2, r6
 801265c:	463b      	mov	r3, r7
 801265e:	4604      	mov	r4, r0
 8012660:	460d      	mov	r5, r1
 8012662:	f7ed fe2b 	bl	80002bc <__aeabi_dsub>
 8012666:	4602      	mov	r2, r0
 8012668:	460b      	mov	r3, r1
 801266a:	4640      	mov	r0, r8
 801266c:	4649      	mov	r1, r9
 801266e:	f7ed fe25 	bl	80002bc <__aeabi_dsub>
 8012672:	9b04      	ldr	r3, [sp, #16]
 8012674:	9a06      	ldr	r2, [sp, #24]
 8012676:	3b01      	subs	r3, #1
 8012678:	4313      	orrs	r3, r2
 801267a:	4682      	mov	sl, r0
 801267c:	468b      	mov	fp, r1
 801267e:	f040 81e7 	bne.w	8012a50 <__ieee754_pow+0x700>
 8012682:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012738 <__ieee754_pow+0x3e8>
 8012686:	eeb0 8a47 	vmov.f32	s16, s14
 801268a:	eef0 8a67 	vmov.f32	s17, s15
 801268e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012692:	2600      	movs	r6, #0
 8012694:	4632      	mov	r2, r6
 8012696:	463b      	mov	r3, r7
 8012698:	e9dd 0100 	ldrd	r0, r1, [sp]
 801269c:	f7ed fe0e 	bl	80002bc <__aeabi_dsub>
 80126a0:	4622      	mov	r2, r4
 80126a2:	462b      	mov	r3, r5
 80126a4:	f7ed ffc2 	bl	800062c <__aeabi_dmul>
 80126a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ac:	4680      	mov	r8, r0
 80126ae:	4689      	mov	r9, r1
 80126b0:	4650      	mov	r0, sl
 80126b2:	4659      	mov	r1, fp
 80126b4:	f7ed ffba 	bl	800062c <__aeabi_dmul>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	4640      	mov	r0, r8
 80126be:	4649      	mov	r1, r9
 80126c0:	f7ed fdfe 	bl	80002c0 <__adddf3>
 80126c4:	4632      	mov	r2, r6
 80126c6:	463b      	mov	r3, r7
 80126c8:	4680      	mov	r8, r0
 80126ca:	4689      	mov	r9, r1
 80126cc:	4620      	mov	r0, r4
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7ed ffac 	bl	800062c <__aeabi_dmul>
 80126d4:	460b      	mov	r3, r1
 80126d6:	4604      	mov	r4, r0
 80126d8:	460d      	mov	r5, r1
 80126da:	4602      	mov	r2, r0
 80126dc:	4649      	mov	r1, r9
 80126de:	4640      	mov	r0, r8
 80126e0:	f7ed fdee 	bl	80002c0 <__adddf3>
 80126e4:	4b19      	ldr	r3, [pc, #100]	; (801274c <__ieee754_pow+0x3fc>)
 80126e6:	4299      	cmp	r1, r3
 80126e8:	ec45 4b19 	vmov	d9, r4, r5
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	468b      	mov	fp, r1
 80126f2:	f340 82f1 	ble.w	8012cd8 <__ieee754_pow+0x988>
 80126f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80126fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80126fe:	4303      	orrs	r3, r0
 8012700:	f000 81e4 	beq.w	8012acc <__ieee754_pow+0x77c>
 8012704:	ec51 0b18 	vmov	r0, r1, d8
 8012708:	2200      	movs	r2, #0
 801270a:	2300      	movs	r3, #0
 801270c:	f7ee fa00 	bl	8000b10 <__aeabi_dcmplt>
 8012710:	3800      	subs	r0, #0
 8012712:	bf18      	it	ne
 8012714:	2001      	movne	r0, #1
 8012716:	e72b      	b.n	8012570 <__ieee754_pow+0x220>
 8012718:	60000000 	.word	0x60000000
 801271c:	3ff71547 	.word	0x3ff71547
 8012720:	f85ddf44 	.word	0xf85ddf44
 8012724:	3e54ae0b 	.word	0x3e54ae0b
 8012728:	55555555 	.word	0x55555555
 801272c:	3fd55555 	.word	0x3fd55555
 8012730:	652b82fe 	.word	0x652b82fe
 8012734:	3ff71547 	.word	0x3ff71547
 8012738:	00000000 	.word	0x00000000
 801273c:	bff00000 	.word	0xbff00000
 8012740:	3ff00000 	.word	0x3ff00000
 8012744:	3fd00000 	.word	0x3fd00000
 8012748:	3fe00000 	.word	0x3fe00000
 801274c:	408fffff 	.word	0x408fffff
 8012750:	4bd5      	ldr	r3, [pc, #852]	; (8012aa8 <__ieee754_pow+0x758>)
 8012752:	402b      	ands	r3, r5
 8012754:	2200      	movs	r2, #0
 8012756:	b92b      	cbnz	r3, 8012764 <__ieee754_pow+0x414>
 8012758:	4bd4      	ldr	r3, [pc, #848]	; (8012aac <__ieee754_pow+0x75c>)
 801275a:	f7ed ff67 	bl	800062c <__aeabi_dmul>
 801275e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012762:	460c      	mov	r4, r1
 8012764:	1523      	asrs	r3, r4, #20
 8012766:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801276a:	4413      	add	r3, r2
 801276c:	9305      	str	r3, [sp, #20]
 801276e:	4bd0      	ldr	r3, [pc, #832]	; (8012ab0 <__ieee754_pow+0x760>)
 8012770:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012774:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012778:	429c      	cmp	r4, r3
 801277a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801277e:	dd08      	ble.n	8012792 <__ieee754_pow+0x442>
 8012780:	4bcc      	ldr	r3, [pc, #816]	; (8012ab4 <__ieee754_pow+0x764>)
 8012782:	429c      	cmp	r4, r3
 8012784:	f340 8162 	ble.w	8012a4c <__ieee754_pow+0x6fc>
 8012788:	9b05      	ldr	r3, [sp, #20]
 801278a:	3301      	adds	r3, #1
 801278c:	9305      	str	r3, [sp, #20]
 801278e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012792:	2400      	movs	r4, #0
 8012794:	00e3      	lsls	r3, r4, #3
 8012796:	9307      	str	r3, [sp, #28]
 8012798:	4bc7      	ldr	r3, [pc, #796]	; (8012ab8 <__ieee754_pow+0x768>)
 801279a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801279e:	ed93 7b00 	vldr	d7, [r3]
 80127a2:	4629      	mov	r1, r5
 80127a4:	ec53 2b17 	vmov	r2, r3, d7
 80127a8:	eeb0 9a47 	vmov.f32	s18, s14
 80127ac:	eef0 9a67 	vmov.f32	s19, s15
 80127b0:	4682      	mov	sl, r0
 80127b2:	f7ed fd83 	bl	80002bc <__aeabi_dsub>
 80127b6:	4652      	mov	r2, sl
 80127b8:	4606      	mov	r6, r0
 80127ba:	460f      	mov	r7, r1
 80127bc:	462b      	mov	r3, r5
 80127be:	ec51 0b19 	vmov	r0, r1, d9
 80127c2:	f7ed fd7d 	bl	80002c0 <__adddf3>
 80127c6:	4602      	mov	r2, r0
 80127c8:	460b      	mov	r3, r1
 80127ca:	2000      	movs	r0, #0
 80127cc:	49bb      	ldr	r1, [pc, #748]	; (8012abc <__ieee754_pow+0x76c>)
 80127ce:	f7ee f857 	bl	8000880 <__aeabi_ddiv>
 80127d2:	ec41 0b1a 	vmov	d10, r0, r1
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed ff25 	bl	800062c <__aeabi_dmul>
 80127e2:	2300      	movs	r3, #0
 80127e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127e8:	9302      	str	r3, [sp, #8]
 80127ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80127ee:	46ab      	mov	fp, r5
 80127f0:	106d      	asrs	r5, r5, #1
 80127f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80127f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80127fa:	ec41 0b18 	vmov	d8, r0, r1
 80127fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012802:	2200      	movs	r2, #0
 8012804:	4640      	mov	r0, r8
 8012806:	4649      	mov	r1, r9
 8012808:	4614      	mov	r4, r2
 801280a:	461d      	mov	r5, r3
 801280c:	f7ed ff0e 	bl	800062c <__aeabi_dmul>
 8012810:	4602      	mov	r2, r0
 8012812:	460b      	mov	r3, r1
 8012814:	4630      	mov	r0, r6
 8012816:	4639      	mov	r1, r7
 8012818:	f7ed fd50 	bl	80002bc <__aeabi_dsub>
 801281c:	ec53 2b19 	vmov	r2, r3, d9
 8012820:	4606      	mov	r6, r0
 8012822:	460f      	mov	r7, r1
 8012824:	4620      	mov	r0, r4
 8012826:	4629      	mov	r1, r5
 8012828:	f7ed fd48 	bl	80002bc <__aeabi_dsub>
 801282c:	4602      	mov	r2, r0
 801282e:	460b      	mov	r3, r1
 8012830:	4650      	mov	r0, sl
 8012832:	4659      	mov	r1, fp
 8012834:	f7ed fd42 	bl	80002bc <__aeabi_dsub>
 8012838:	4642      	mov	r2, r8
 801283a:	464b      	mov	r3, r9
 801283c:	f7ed fef6 	bl	800062c <__aeabi_dmul>
 8012840:	4602      	mov	r2, r0
 8012842:	460b      	mov	r3, r1
 8012844:	4630      	mov	r0, r6
 8012846:	4639      	mov	r1, r7
 8012848:	f7ed fd38 	bl	80002bc <__aeabi_dsub>
 801284c:	ec53 2b1a 	vmov	r2, r3, d10
 8012850:	f7ed feec 	bl	800062c <__aeabi_dmul>
 8012854:	ec53 2b18 	vmov	r2, r3, d8
 8012858:	ec41 0b19 	vmov	d9, r0, r1
 801285c:	ec51 0b18 	vmov	r0, r1, d8
 8012860:	f7ed fee4 	bl	800062c <__aeabi_dmul>
 8012864:	a37c      	add	r3, pc, #496	; (adr r3, 8012a58 <__ieee754_pow+0x708>)
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	4604      	mov	r4, r0
 801286c:	460d      	mov	r5, r1
 801286e:	f7ed fedd 	bl	800062c <__aeabi_dmul>
 8012872:	a37b      	add	r3, pc, #492	; (adr r3, 8012a60 <__ieee754_pow+0x710>)
 8012874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012878:	f7ed fd22 	bl	80002c0 <__adddf3>
 801287c:	4622      	mov	r2, r4
 801287e:	462b      	mov	r3, r5
 8012880:	f7ed fed4 	bl	800062c <__aeabi_dmul>
 8012884:	a378      	add	r3, pc, #480	; (adr r3, 8012a68 <__ieee754_pow+0x718>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	f7ed fd19 	bl	80002c0 <__adddf3>
 801288e:	4622      	mov	r2, r4
 8012890:	462b      	mov	r3, r5
 8012892:	f7ed fecb 	bl	800062c <__aeabi_dmul>
 8012896:	a376      	add	r3, pc, #472	; (adr r3, 8012a70 <__ieee754_pow+0x720>)
 8012898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289c:	f7ed fd10 	bl	80002c0 <__adddf3>
 80128a0:	4622      	mov	r2, r4
 80128a2:	462b      	mov	r3, r5
 80128a4:	f7ed fec2 	bl	800062c <__aeabi_dmul>
 80128a8:	a373      	add	r3, pc, #460	; (adr r3, 8012a78 <__ieee754_pow+0x728>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fd07 	bl	80002c0 <__adddf3>
 80128b2:	4622      	mov	r2, r4
 80128b4:	462b      	mov	r3, r5
 80128b6:	f7ed feb9 	bl	800062c <__aeabi_dmul>
 80128ba:	a371      	add	r3, pc, #452	; (adr r3, 8012a80 <__ieee754_pow+0x730>)
 80128bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c0:	f7ed fcfe 	bl	80002c0 <__adddf3>
 80128c4:	4622      	mov	r2, r4
 80128c6:	4606      	mov	r6, r0
 80128c8:	460f      	mov	r7, r1
 80128ca:	462b      	mov	r3, r5
 80128cc:	4620      	mov	r0, r4
 80128ce:	4629      	mov	r1, r5
 80128d0:	f7ed feac 	bl	800062c <__aeabi_dmul>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	4630      	mov	r0, r6
 80128da:	4639      	mov	r1, r7
 80128dc:	f7ed fea6 	bl	800062c <__aeabi_dmul>
 80128e0:	4642      	mov	r2, r8
 80128e2:	4604      	mov	r4, r0
 80128e4:	460d      	mov	r5, r1
 80128e6:	464b      	mov	r3, r9
 80128e8:	ec51 0b18 	vmov	r0, r1, d8
 80128ec:	f7ed fce8 	bl	80002c0 <__adddf3>
 80128f0:	ec53 2b19 	vmov	r2, r3, d9
 80128f4:	f7ed fe9a 	bl	800062c <__aeabi_dmul>
 80128f8:	4622      	mov	r2, r4
 80128fa:	462b      	mov	r3, r5
 80128fc:	f7ed fce0 	bl	80002c0 <__adddf3>
 8012900:	4642      	mov	r2, r8
 8012902:	4682      	mov	sl, r0
 8012904:	468b      	mov	fp, r1
 8012906:	464b      	mov	r3, r9
 8012908:	4640      	mov	r0, r8
 801290a:	4649      	mov	r1, r9
 801290c:	f7ed fe8e 	bl	800062c <__aeabi_dmul>
 8012910:	4b6b      	ldr	r3, [pc, #428]	; (8012ac0 <__ieee754_pow+0x770>)
 8012912:	2200      	movs	r2, #0
 8012914:	4606      	mov	r6, r0
 8012916:	460f      	mov	r7, r1
 8012918:	f7ed fcd2 	bl	80002c0 <__adddf3>
 801291c:	4652      	mov	r2, sl
 801291e:	465b      	mov	r3, fp
 8012920:	f7ed fcce 	bl	80002c0 <__adddf3>
 8012924:	2000      	movs	r0, #0
 8012926:	4604      	mov	r4, r0
 8012928:	460d      	mov	r5, r1
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	4640      	mov	r0, r8
 8012930:	4649      	mov	r1, r9
 8012932:	f7ed fe7b 	bl	800062c <__aeabi_dmul>
 8012936:	4b62      	ldr	r3, [pc, #392]	; (8012ac0 <__ieee754_pow+0x770>)
 8012938:	4680      	mov	r8, r0
 801293a:	4689      	mov	r9, r1
 801293c:	2200      	movs	r2, #0
 801293e:	4620      	mov	r0, r4
 8012940:	4629      	mov	r1, r5
 8012942:	f7ed fcbb 	bl	80002bc <__aeabi_dsub>
 8012946:	4632      	mov	r2, r6
 8012948:	463b      	mov	r3, r7
 801294a:	f7ed fcb7 	bl	80002bc <__aeabi_dsub>
 801294e:	4602      	mov	r2, r0
 8012950:	460b      	mov	r3, r1
 8012952:	4650      	mov	r0, sl
 8012954:	4659      	mov	r1, fp
 8012956:	f7ed fcb1 	bl	80002bc <__aeabi_dsub>
 801295a:	ec53 2b18 	vmov	r2, r3, d8
 801295e:	f7ed fe65 	bl	800062c <__aeabi_dmul>
 8012962:	4622      	mov	r2, r4
 8012964:	4606      	mov	r6, r0
 8012966:	460f      	mov	r7, r1
 8012968:	462b      	mov	r3, r5
 801296a:	ec51 0b19 	vmov	r0, r1, d9
 801296e:	f7ed fe5d 	bl	800062c <__aeabi_dmul>
 8012972:	4602      	mov	r2, r0
 8012974:	460b      	mov	r3, r1
 8012976:	4630      	mov	r0, r6
 8012978:	4639      	mov	r1, r7
 801297a:	f7ed fca1 	bl	80002c0 <__adddf3>
 801297e:	4606      	mov	r6, r0
 8012980:	460f      	mov	r7, r1
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	4640      	mov	r0, r8
 8012988:	4649      	mov	r1, r9
 801298a:	f7ed fc99 	bl	80002c0 <__adddf3>
 801298e:	a33e      	add	r3, pc, #248	; (adr r3, 8012a88 <__ieee754_pow+0x738>)
 8012990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012994:	2000      	movs	r0, #0
 8012996:	4604      	mov	r4, r0
 8012998:	460d      	mov	r5, r1
 801299a:	f7ed fe47 	bl	800062c <__aeabi_dmul>
 801299e:	4642      	mov	r2, r8
 80129a0:	ec41 0b18 	vmov	d8, r0, r1
 80129a4:	464b      	mov	r3, r9
 80129a6:	4620      	mov	r0, r4
 80129a8:	4629      	mov	r1, r5
 80129aa:	f7ed fc87 	bl	80002bc <__aeabi_dsub>
 80129ae:	4602      	mov	r2, r0
 80129b0:	460b      	mov	r3, r1
 80129b2:	4630      	mov	r0, r6
 80129b4:	4639      	mov	r1, r7
 80129b6:	f7ed fc81 	bl	80002bc <__aeabi_dsub>
 80129ba:	a335      	add	r3, pc, #212	; (adr r3, 8012a90 <__ieee754_pow+0x740>)
 80129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c0:	f7ed fe34 	bl	800062c <__aeabi_dmul>
 80129c4:	a334      	add	r3, pc, #208	; (adr r3, 8012a98 <__ieee754_pow+0x748>)
 80129c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ca:	4606      	mov	r6, r0
 80129cc:	460f      	mov	r7, r1
 80129ce:	4620      	mov	r0, r4
 80129d0:	4629      	mov	r1, r5
 80129d2:	f7ed fe2b 	bl	800062c <__aeabi_dmul>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	4630      	mov	r0, r6
 80129dc:	4639      	mov	r1, r7
 80129de:	f7ed fc6f 	bl	80002c0 <__adddf3>
 80129e2:	9a07      	ldr	r2, [sp, #28]
 80129e4:	4b37      	ldr	r3, [pc, #220]	; (8012ac4 <__ieee754_pow+0x774>)
 80129e6:	4413      	add	r3, r2
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	f7ed fc68 	bl	80002c0 <__adddf3>
 80129f0:	4682      	mov	sl, r0
 80129f2:	9805      	ldr	r0, [sp, #20]
 80129f4:	468b      	mov	fp, r1
 80129f6:	f7ed fdaf 	bl	8000558 <__aeabi_i2d>
 80129fa:	9a07      	ldr	r2, [sp, #28]
 80129fc:	4b32      	ldr	r3, [pc, #200]	; (8012ac8 <__ieee754_pow+0x778>)
 80129fe:	4413      	add	r3, r2
 8012a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a04:	4606      	mov	r6, r0
 8012a06:	460f      	mov	r7, r1
 8012a08:	4652      	mov	r2, sl
 8012a0a:	465b      	mov	r3, fp
 8012a0c:	ec51 0b18 	vmov	r0, r1, d8
 8012a10:	f7ed fc56 	bl	80002c0 <__adddf3>
 8012a14:	4642      	mov	r2, r8
 8012a16:	464b      	mov	r3, r9
 8012a18:	f7ed fc52 	bl	80002c0 <__adddf3>
 8012a1c:	4632      	mov	r2, r6
 8012a1e:	463b      	mov	r3, r7
 8012a20:	f7ed fc4e 	bl	80002c0 <__adddf3>
 8012a24:	2000      	movs	r0, #0
 8012a26:	4632      	mov	r2, r6
 8012a28:	463b      	mov	r3, r7
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	460d      	mov	r5, r1
 8012a2e:	f7ed fc45 	bl	80002bc <__aeabi_dsub>
 8012a32:	4642      	mov	r2, r8
 8012a34:	464b      	mov	r3, r9
 8012a36:	f7ed fc41 	bl	80002bc <__aeabi_dsub>
 8012a3a:	ec53 2b18 	vmov	r2, r3, d8
 8012a3e:	f7ed fc3d 	bl	80002bc <__aeabi_dsub>
 8012a42:	4602      	mov	r2, r0
 8012a44:	460b      	mov	r3, r1
 8012a46:	4650      	mov	r0, sl
 8012a48:	4659      	mov	r1, fp
 8012a4a:	e610      	b.n	801266e <__ieee754_pow+0x31e>
 8012a4c:	2401      	movs	r4, #1
 8012a4e:	e6a1      	b.n	8012794 <__ieee754_pow+0x444>
 8012a50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012aa0 <__ieee754_pow+0x750>
 8012a54:	e617      	b.n	8012686 <__ieee754_pow+0x336>
 8012a56:	bf00      	nop
 8012a58:	4a454eef 	.word	0x4a454eef
 8012a5c:	3fca7e28 	.word	0x3fca7e28
 8012a60:	93c9db65 	.word	0x93c9db65
 8012a64:	3fcd864a 	.word	0x3fcd864a
 8012a68:	a91d4101 	.word	0xa91d4101
 8012a6c:	3fd17460 	.word	0x3fd17460
 8012a70:	518f264d 	.word	0x518f264d
 8012a74:	3fd55555 	.word	0x3fd55555
 8012a78:	db6fabff 	.word	0xdb6fabff
 8012a7c:	3fdb6db6 	.word	0x3fdb6db6
 8012a80:	33333303 	.word	0x33333303
 8012a84:	3fe33333 	.word	0x3fe33333
 8012a88:	e0000000 	.word	0xe0000000
 8012a8c:	3feec709 	.word	0x3feec709
 8012a90:	dc3a03fd 	.word	0xdc3a03fd
 8012a94:	3feec709 	.word	0x3feec709
 8012a98:	145b01f5 	.word	0x145b01f5
 8012a9c:	be3e2fe0 	.word	0xbe3e2fe0
 8012aa0:	00000000 	.word	0x00000000
 8012aa4:	3ff00000 	.word	0x3ff00000
 8012aa8:	7ff00000 	.word	0x7ff00000
 8012aac:	43400000 	.word	0x43400000
 8012ab0:	0003988e 	.word	0x0003988e
 8012ab4:	000bb679 	.word	0x000bb679
 8012ab8:	0803ae20 	.word	0x0803ae20
 8012abc:	3ff00000 	.word	0x3ff00000
 8012ac0:	40080000 	.word	0x40080000
 8012ac4:	0803ae40 	.word	0x0803ae40
 8012ac8:	0803ae30 	.word	0x0803ae30
 8012acc:	a3b5      	add	r3, pc, #724	; (adr r3, 8012da4 <__ieee754_pow+0xa54>)
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	4640      	mov	r0, r8
 8012ad4:	4649      	mov	r1, r9
 8012ad6:	f7ed fbf3 	bl	80002c0 <__adddf3>
 8012ada:	4622      	mov	r2, r4
 8012adc:	ec41 0b1a 	vmov	d10, r0, r1
 8012ae0:	462b      	mov	r3, r5
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f7ed fbe9 	bl	80002bc <__aeabi_dsub>
 8012aea:	4602      	mov	r2, r0
 8012aec:	460b      	mov	r3, r1
 8012aee:	ec51 0b1a 	vmov	r0, r1, d10
 8012af2:	f7ee f82b 	bl	8000b4c <__aeabi_dcmpgt>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f47f ae04 	bne.w	8012704 <__ieee754_pow+0x3b4>
 8012afc:	4aa4      	ldr	r2, [pc, #656]	; (8012d90 <__ieee754_pow+0xa40>)
 8012afe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b02:	4293      	cmp	r3, r2
 8012b04:	f340 8108 	ble.w	8012d18 <__ieee754_pow+0x9c8>
 8012b08:	151b      	asrs	r3, r3, #20
 8012b0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012b0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012b12:	fa4a f303 	asr.w	r3, sl, r3
 8012b16:	445b      	add	r3, fp
 8012b18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012b1c:	4e9d      	ldr	r6, [pc, #628]	; (8012d94 <__ieee754_pow+0xa44>)
 8012b1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012b22:	4116      	asrs	r6, r2
 8012b24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012b28:	2000      	movs	r0, #0
 8012b2a:	ea23 0106 	bic.w	r1, r3, r6
 8012b2e:	f1c2 0214 	rsb	r2, r2, #20
 8012b32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012b36:	fa4a fa02 	asr.w	sl, sl, r2
 8012b3a:	f1bb 0f00 	cmp.w	fp, #0
 8012b3e:	4602      	mov	r2, r0
 8012b40:	460b      	mov	r3, r1
 8012b42:	4620      	mov	r0, r4
 8012b44:	4629      	mov	r1, r5
 8012b46:	bfb8      	it	lt
 8012b48:	f1ca 0a00 	rsblt	sl, sl, #0
 8012b4c:	f7ed fbb6 	bl	80002bc <__aeabi_dsub>
 8012b50:	ec41 0b19 	vmov	d9, r0, r1
 8012b54:	4642      	mov	r2, r8
 8012b56:	464b      	mov	r3, r9
 8012b58:	ec51 0b19 	vmov	r0, r1, d9
 8012b5c:	f7ed fbb0 	bl	80002c0 <__adddf3>
 8012b60:	a37b      	add	r3, pc, #492	; (adr r3, 8012d50 <__ieee754_pow+0xa00>)
 8012b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b66:	2000      	movs	r0, #0
 8012b68:	4604      	mov	r4, r0
 8012b6a:	460d      	mov	r5, r1
 8012b6c:	f7ed fd5e 	bl	800062c <__aeabi_dmul>
 8012b70:	ec53 2b19 	vmov	r2, r3, d9
 8012b74:	4606      	mov	r6, r0
 8012b76:	460f      	mov	r7, r1
 8012b78:	4620      	mov	r0, r4
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	f7ed fb9e 	bl	80002bc <__aeabi_dsub>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	4640      	mov	r0, r8
 8012b86:	4649      	mov	r1, r9
 8012b88:	f7ed fb98 	bl	80002bc <__aeabi_dsub>
 8012b8c:	a372      	add	r3, pc, #456	; (adr r3, 8012d58 <__ieee754_pow+0xa08>)
 8012b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b92:	f7ed fd4b 	bl	800062c <__aeabi_dmul>
 8012b96:	a372      	add	r3, pc, #456	; (adr r3, 8012d60 <__ieee754_pow+0xa10>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	4680      	mov	r8, r0
 8012b9e:	4689      	mov	r9, r1
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	f7ed fd42 	bl	800062c <__aeabi_dmul>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	460b      	mov	r3, r1
 8012bac:	4640      	mov	r0, r8
 8012bae:	4649      	mov	r1, r9
 8012bb0:	f7ed fb86 	bl	80002c0 <__adddf3>
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	4639      	mov	r1, r7
 8012bc0:	f7ed fb7e 	bl	80002c0 <__adddf3>
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	4680      	mov	r8, r0
 8012bca:	4689      	mov	r9, r1
 8012bcc:	f7ed fb76 	bl	80002bc <__aeabi_dsub>
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f7ed fb70 	bl	80002bc <__aeabi_dsub>
 8012bdc:	4642      	mov	r2, r8
 8012bde:	4606      	mov	r6, r0
 8012be0:	460f      	mov	r7, r1
 8012be2:	464b      	mov	r3, r9
 8012be4:	4640      	mov	r0, r8
 8012be6:	4649      	mov	r1, r9
 8012be8:	f7ed fd20 	bl	800062c <__aeabi_dmul>
 8012bec:	a35e      	add	r3, pc, #376	; (adr r3, 8012d68 <__ieee754_pow+0xa18>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	460d      	mov	r5, r1
 8012bf6:	f7ed fd19 	bl	800062c <__aeabi_dmul>
 8012bfa:	a35d      	add	r3, pc, #372	; (adr r3, 8012d70 <__ieee754_pow+0xa20>)
 8012bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c00:	f7ed fb5c 	bl	80002bc <__aeabi_dsub>
 8012c04:	4622      	mov	r2, r4
 8012c06:	462b      	mov	r3, r5
 8012c08:	f7ed fd10 	bl	800062c <__aeabi_dmul>
 8012c0c:	a35a      	add	r3, pc, #360	; (adr r3, 8012d78 <__ieee754_pow+0xa28>)
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	f7ed fb55 	bl	80002c0 <__adddf3>
 8012c16:	4622      	mov	r2, r4
 8012c18:	462b      	mov	r3, r5
 8012c1a:	f7ed fd07 	bl	800062c <__aeabi_dmul>
 8012c1e:	a358      	add	r3, pc, #352	; (adr r3, 8012d80 <__ieee754_pow+0xa30>)
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	f7ed fb4a 	bl	80002bc <__aeabi_dsub>
 8012c28:	4622      	mov	r2, r4
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	f7ed fcfe 	bl	800062c <__aeabi_dmul>
 8012c30:	a355      	add	r3, pc, #340	; (adr r3, 8012d88 <__ieee754_pow+0xa38>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	f7ed fb43 	bl	80002c0 <__adddf3>
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	f7ed fcf5 	bl	800062c <__aeabi_dmul>
 8012c42:	4602      	mov	r2, r0
 8012c44:	460b      	mov	r3, r1
 8012c46:	4640      	mov	r0, r8
 8012c48:	4649      	mov	r1, r9
 8012c4a:	f7ed fb37 	bl	80002bc <__aeabi_dsub>
 8012c4e:	4604      	mov	r4, r0
 8012c50:	460d      	mov	r5, r1
 8012c52:	4602      	mov	r2, r0
 8012c54:	460b      	mov	r3, r1
 8012c56:	4640      	mov	r0, r8
 8012c58:	4649      	mov	r1, r9
 8012c5a:	f7ed fce7 	bl	800062c <__aeabi_dmul>
 8012c5e:	2200      	movs	r2, #0
 8012c60:	ec41 0b19 	vmov	d9, r0, r1
 8012c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c68:	4620      	mov	r0, r4
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	f7ed fb26 	bl	80002bc <__aeabi_dsub>
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	ec51 0b19 	vmov	r0, r1, d9
 8012c78:	f7ed fe02 	bl	8000880 <__aeabi_ddiv>
 8012c7c:	4632      	mov	r2, r6
 8012c7e:	4604      	mov	r4, r0
 8012c80:	460d      	mov	r5, r1
 8012c82:	463b      	mov	r3, r7
 8012c84:	4640      	mov	r0, r8
 8012c86:	4649      	mov	r1, r9
 8012c88:	f7ed fcd0 	bl	800062c <__aeabi_dmul>
 8012c8c:	4632      	mov	r2, r6
 8012c8e:	463b      	mov	r3, r7
 8012c90:	f7ed fb16 	bl	80002c0 <__adddf3>
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	4620      	mov	r0, r4
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	f7ed fb0e 	bl	80002bc <__aeabi_dsub>
 8012ca0:	4642      	mov	r2, r8
 8012ca2:	464b      	mov	r3, r9
 8012ca4:	f7ed fb0a 	bl	80002bc <__aeabi_dsub>
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4602      	mov	r2, r0
 8012cac:	493a      	ldr	r1, [pc, #232]	; (8012d98 <__ieee754_pow+0xa48>)
 8012cae:	2000      	movs	r0, #0
 8012cb0:	f7ed fb04 	bl	80002bc <__aeabi_dsub>
 8012cb4:	ec41 0b10 	vmov	d0, r0, r1
 8012cb8:	ee10 3a90 	vmov	r3, s1
 8012cbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012cc4:	da2b      	bge.n	8012d1e <__ieee754_pow+0x9ce>
 8012cc6:	4650      	mov	r0, sl
 8012cc8:	f001 fae2 	bl	8014290 <scalbn>
 8012ccc:	ec51 0b10 	vmov	r0, r1, d0
 8012cd0:	ec53 2b18 	vmov	r2, r3, d8
 8012cd4:	f7ff bbed 	b.w	80124b2 <__ieee754_pow+0x162>
 8012cd8:	4b30      	ldr	r3, [pc, #192]	; (8012d9c <__ieee754_pow+0xa4c>)
 8012cda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012cde:	429e      	cmp	r6, r3
 8012ce0:	f77f af0c 	ble.w	8012afc <__ieee754_pow+0x7ac>
 8012ce4:	4b2e      	ldr	r3, [pc, #184]	; (8012da0 <__ieee754_pow+0xa50>)
 8012ce6:	440b      	add	r3, r1
 8012ce8:	4303      	orrs	r3, r0
 8012cea:	d009      	beq.n	8012d00 <__ieee754_pow+0x9b0>
 8012cec:	ec51 0b18 	vmov	r0, r1, d8
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	f7ed ff0c 	bl	8000b10 <__aeabi_dcmplt>
 8012cf8:	3800      	subs	r0, #0
 8012cfa:	bf18      	it	ne
 8012cfc:	2001      	movne	r0, #1
 8012cfe:	e447      	b.n	8012590 <__ieee754_pow+0x240>
 8012d00:	4622      	mov	r2, r4
 8012d02:	462b      	mov	r3, r5
 8012d04:	f7ed fada 	bl	80002bc <__aeabi_dsub>
 8012d08:	4642      	mov	r2, r8
 8012d0a:	464b      	mov	r3, r9
 8012d0c:	f7ed ff14 	bl	8000b38 <__aeabi_dcmpge>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	f43f aef3 	beq.w	8012afc <__ieee754_pow+0x7ac>
 8012d16:	e7e9      	b.n	8012cec <__ieee754_pow+0x99c>
 8012d18:	f04f 0a00 	mov.w	sl, #0
 8012d1c:	e71a      	b.n	8012b54 <__ieee754_pow+0x804>
 8012d1e:	ec51 0b10 	vmov	r0, r1, d0
 8012d22:	4619      	mov	r1, r3
 8012d24:	e7d4      	b.n	8012cd0 <__ieee754_pow+0x980>
 8012d26:	491c      	ldr	r1, [pc, #112]	; (8012d98 <__ieee754_pow+0xa48>)
 8012d28:	2000      	movs	r0, #0
 8012d2a:	f7ff bb30 	b.w	801238e <__ieee754_pow+0x3e>
 8012d2e:	2000      	movs	r0, #0
 8012d30:	2100      	movs	r1, #0
 8012d32:	f7ff bb2c 	b.w	801238e <__ieee754_pow+0x3e>
 8012d36:	4630      	mov	r0, r6
 8012d38:	4639      	mov	r1, r7
 8012d3a:	f7ff bb28 	b.w	801238e <__ieee754_pow+0x3e>
 8012d3e:	9204      	str	r2, [sp, #16]
 8012d40:	f7ff bb7a 	b.w	8012438 <__ieee754_pow+0xe8>
 8012d44:	2300      	movs	r3, #0
 8012d46:	f7ff bb64 	b.w	8012412 <__ieee754_pow+0xc2>
 8012d4a:	bf00      	nop
 8012d4c:	f3af 8000 	nop.w
 8012d50:	00000000 	.word	0x00000000
 8012d54:	3fe62e43 	.word	0x3fe62e43
 8012d58:	fefa39ef 	.word	0xfefa39ef
 8012d5c:	3fe62e42 	.word	0x3fe62e42
 8012d60:	0ca86c39 	.word	0x0ca86c39
 8012d64:	be205c61 	.word	0xbe205c61
 8012d68:	72bea4d0 	.word	0x72bea4d0
 8012d6c:	3e663769 	.word	0x3e663769
 8012d70:	c5d26bf1 	.word	0xc5d26bf1
 8012d74:	3ebbbd41 	.word	0x3ebbbd41
 8012d78:	af25de2c 	.word	0xaf25de2c
 8012d7c:	3f11566a 	.word	0x3f11566a
 8012d80:	16bebd93 	.word	0x16bebd93
 8012d84:	3f66c16c 	.word	0x3f66c16c
 8012d88:	5555553e 	.word	0x5555553e
 8012d8c:	3fc55555 	.word	0x3fc55555
 8012d90:	3fe00000 	.word	0x3fe00000
 8012d94:	000fffff 	.word	0x000fffff
 8012d98:	3ff00000 	.word	0x3ff00000
 8012d9c:	4090cbff 	.word	0x4090cbff
 8012da0:	3f6f3400 	.word	0x3f6f3400
 8012da4:	652b82fe 	.word	0x652b82fe
 8012da8:	3c971547 	.word	0x3c971547
 8012dac:	00000000 	.word	0x00000000

08012db0 <__ieee754_rem_pio2>:
 8012db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db4:	ed2d 8b02 	vpush	{d8}
 8012db8:	ec55 4b10 	vmov	r4, r5, d0
 8012dbc:	4bca      	ldr	r3, [pc, #808]	; (80130e8 <__ieee754_rem_pio2+0x338>)
 8012dbe:	b08b      	sub	sp, #44	; 0x2c
 8012dc0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012dc4:	4598      	cmp	r8, r3
 8012dc6:	4682      	mov	sl, r0
 8012dc8:	9502      	str	r5, [sp, #8]
 8012dca:	dc08      	bgt.n	8012dde <__ieee754_rem_pio2+0x2e>
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2300      	movs	r3, #0
 8012dd0:	ed80 0b00 	vstr	d0, [r0]
 8012dd4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012dd8:	f04f 0b00 	mov.w	fp, #0
 8012ddc:	e028      	b.n	8012e30 <__ieee754_rem_pio2+0x80>
 8012dde:	4bc3      	ldr	r3, [pc, #780]	; (80130ec <__ieee754_rem_pio2+0x33c>)
 8012de0:	4598      	cmp	r8, r3
 8012de2:	dc78      	bgt.n	8012ed6 <__ieee754_rem_pio2+0x126>
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	4ec2      	ldr	r6, [pc, #776]	; (80130f0 <__ieee754_rem_pio2+0x340>)
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	ee10 0a10 	vmov	r0, s0
 8012dee:	a3b0      	add	r3, pc, #704	; (adr r3, 80130b0 <__ieee754_rem_pio2+0x300>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	4629      	mov	r1, r5
 8012df6:	dd39      	ble.n	8012e6c <__ieee754_rem_pio2+0xbc>
 8012df8:	f7ed fa60 	bl	80002bc <__aeabi_dsub>
 8012dfc:	45b0      	cmp	r8, r6
 8012dfe:	4604      	mov	r4, r0
 8012e00:	460d      	mov	r5, r1
 8012e02:	d01b      	beq.n	8012e3c <__ieee754_rem_pio2+0x8c>
 8012e04:	a3ac      	add	r3, pc, #688	; (adr r3, 80130b8 <__ieee754_rem_pio2+0x308>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	f7ed fa57 	bl	80002bc <__aeabi_dsub>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	460b      	mov	r3, r1
 8012e12:	e9ca 2300 	strd	r2, r3, [sl]
 8012e16:	4620      	mov	r0, r4
 8012e18:	4629      	mov	r1, r5
 8012e1a:	f7ed fa4f 	bl	80002bc <__aeabi_dsub>
 8012e1e:	a3a6      	add	r3, pc, #664	; (adr r3, 80130b8 <__ieee754_rem_pio2+0x308>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	f7ed fa4a 	bl	80002bc <__aeabi_dsub>
 8012e28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e2c:	f04f 0b01 	mov.w	fp, #1
 8012e30:	4658      	mov	r0, fp
 8012e32:	b00b      	add	sp, #44	; 0x2c
 8012e34:	ecbd 8b02 	vpop	{d8}
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	a3a0      	add	r3, pc, #640	; (adr r3, 80130c0 <__ieee754_rem_pio2+0x310>)
 8012e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e42:	f7ed fa3b 	bl	80002bc <__aeabi_dsub>
 8012e46:	a3a0      	add	r3, pc, #640	; (adr r3, 80130c8 <__ieee754_rem_pio2+0x318>)
 8012e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	460d      	mov	r5, r1
 8012e50:	f7ed fa34 	bl	80002bc <__aeabi_dsub>
 8012e54:	4602      	mov	r2, r0
 8012e56:	460b      	mov	r3, r1
 8012e58:	e9ca 2300 	strd	r2, r3, [sl]
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	4629      	mov	r1, r5
 8012e60:	f7ed fa2c 	bl	80002bc <__aeabi_dsub>
 8012e64:	a398      	add	r3, pc, #608	; (adr r3, 80130c8 <__ieee754_rem_pio2+0x318>)
 8012e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6a:	e7db      	b.n	8012e24 <__ieee754_rem_pio2+0x74>
 8012e6c:	f7ed fa28 	bl	80002c0 <__adddf3>
 8012e70:	45b0      	cmp	r8, r6
 8012e72:	4604      	mov	r4, r0
 8012e74:	460d      	mov	r5, r1
 8012e76:	d016      	beq.n	8012ea6 <__ieee754_rem_pio2+0xf6>
 8012e78:	a38f      	add	r3, pc, #572	; (adr r3, 80130b8 <__ieee754_rem_pio2+0x308>)
 8012e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7e:	f7ed fa1f 	bl	80002c0 <__adddf3>
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	e9ca 2300 	strd	r2, r3, [sl]
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ed fa15 	bl	80002bc <__aeabi_dsub>
 8012e92:	a389      	add	r3, pc, #548	; (adr r3, 80130b8 <__ieee754_rem_pio2+0x308>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	f7ed fa12 	bl	80002c0 <__adddf3>
 8012e9c:	f04f 3bff 	mov.w	fp, #4294967295
 8012ea0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ea4:	e7c4      	b.n	8012e30 <__ieee754_rem_pio2+0x80>
 8012ea6:	a386      	add	r3, pc, #536	; (adr r3, 80130c0 <__ieee754_rem_pio2+0x310>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	f7ed fa08 	bl	80002c0 <__adddf3>
 8012eb0:	a385      	add	r3, pc, #532	; (adr r3, 80130c8 <__ieee754_rem_pio2+0x318>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	460d      	mov	r5, r1
 8012eba:	f7ed fa01 	bl	80002c0 <__adddf3>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	e9ca 2300 	strd	r2, r3, [sl]
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	4629      	mov	r1, r5
 8012eca:	f7ed f9f7 	bl	80002bc <__aeabi_dsub>
 8012ece:	a37e      	add	r3, pc, #504	; (adr r3, 80130c8 <__ieee754_rem_pio2+0x318>)
 8012ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed4:	e7e0      	b.n	8012e98 <__ieee754_rem_pio2+0xe8>
 8012ed6:	4b87      	ldr	r3, [pc, #540]	; (80130f4 <__ieee754_rem_pio2+0x344>)
 8012ed8:	4598      	cmp	r8, r3
 8012eda:	f300 80d9 	bgt.w	8013090 <__ieee754_rem_pio2+0x2e0>
 8012ede:	f001 f939 	bl	8014154 <fabs>
 8012ee2:	ec55 4b10 	vmov	r4, r5, d0
 8012ee6:	ee10 0a10 	vmov	r0, s0
 8012eea:	a379      	add	r3, pc, #484	; (adr r3, 80130d0 <__ieee754_rem_pio2+0x320>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f7ed fb9b 	bl	800062c <__aeabi_dmul>
 8012ef6:	4b80      	ldr	r3, [pc, #512]	; (80130f8 <__ieee754_rem_pio2+0x348>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f7ed f9e1 	bl	80002c0 <__adddf3>
 8012efe:	f7ed fe45 	bl	8000b8c <__aeabi_d2iz>
 8012f02:	4683      	mov	fp, r0
 8012f04:	f7ed fb28 	bl	8000558 <__aeabi_i2d>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	460b      	mov	r3, r1
 8012f0c:	ec43 2b18 	vmov	d8, r2, r3
 8012f10:	a367      	add	r3, pc, #412	; (adr r3, 80130b0 <__ieee754_rem_pio2+0x300>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed fb89 	bl	800062c <__aeabi_dmul>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	4620      	mov	r0, r4
 8012f20:	4629      	mov	r1, r5
 8012f22:	f7ed f9cb 	bl	80002bc <__aeabi_dsub>
 8012f26:	a364      	add	r3, pc, #400	; (adr r3, 80130b8 <__ieee754_rem_pio2+0x308>)
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	ec51 0b18 	vmov	r0, r1, d8
 8012f34:	f7ed fb7a 	bl	800062c <__aeabi_dmul>
 8012f38:	f1bb 0f1f 	cmp.w	fp, #31
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	460d      	mov	r5, r1
 8012f40:	dc0d      	bgt.n	8012f5e <__ieee754_rem_pio2+0x1ae>
 8012f42:	4b6e      	ldr	r3, [pc, #440]	; (80130fc <__ieee754_rem_pio2+0x34c>)
 8012f44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f4c:	4543      	cmp	r3, r8
 8012f4e:	d006      	beq.n	8012f5e <__ieee754_rem_pio2+0x1ae>
 8012f50:	4622      	mov	r2, r4
 8012f52:	462b      	mov	r3, r5
 8012f54:	4630      	mov	r0, r6
 8012f56:	4639      	mov	r1, r7
 8012f58:	f7ed f9b0 	bl	80002bc <__aeabi_dsub>
 8012f5c:	e00f      	b.n	8012f7e <__ieee754_rem_pio2+0x1ce>
 8012f5e:	462b      	mov	r3, r5
 8012f60:	4622      	mov	r2, r4
 8012f62:	4630      	mov	r0, r6
 8012f64:	4639      	mov	r1, r7
 8012f66:	f7ed f9a9 	bl	80002bc <__aeabi_dsub>
 8012f6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f6e:	9303      	str	r3, [sp, #12]
 8012f70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012f78:	f1b8 0f10 	cmp.w	r8, #16
 8012f7c:	dc02      	bgt.n	8012f84 <__ieee754_rem_pio2+0x1d4>
 8012f7e:	e9ca 0100 	strd	r0, r1, [sl]
 8012f82:	e039      	b.n	8012ff8 <__ieee754_rem_pio2+0x248>
 8012f84:	a34e      	add	r3, pc, #312	; (adr r3, 80130c0 <__ieee754_rem_pio2+0x310>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	ec51 0b18 	vmov	r0, r1, d8
 8012f8e:	f7ed fb4d 	bl	800062c <__aeabi_dmul>
 8012f92:	4604      	mov	r4, r0
 8012f94:	460d      	mov	r5, r1
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	4639      	mov	r1, r7
 8012f9e:	f7ed f98d 	bl	80002bc <__aeabi_dsub>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	4680      	mov	r8, r0
 8012fa8:	4689      	mov	r9, r1
 8012faa:	4630      	mov	r0, r6
 8012fac:	4639      	mov	r1, r7
 8012fae:	f7ed f985 	bl	80002bc <__aeabi_dsub>
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	462b      	mov	r3, r5
 8012fb6:	f7ed f981 	bl	80002bc <__aeabi_dsub>
 8012fba:	a343      	add	r3, pc, #268	; (adr r3, 80130c8 <__ieee754_rem_pio2+0x318>)
 8012fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	460d      	mov	r5, r1
 8012fc4:	ec51 0b18 	vmov	r0, r1, d8
 8012fc8:	f7ed fb30 	bl	800062c <__aeabi_dmul>
 8012fcc:	4622      	mov	r2, r4
 8012fce:	462b      	mov	r3, r5
 8012fd0:	f7ed f974 	bl	80002bc <__aeabi_dsub>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	4604      	mov	r4, r0
 8012fda:	460d      	mov	r5, r1
 8012fdc:	4640      	mov	r0, r8
 8012fde:	4649      	mov	r1, r9
 8012fe0:	f7ed f96c 	bl	80002bc <__aeabi_dsub>
 8012fe4:	9a03      	ldr	r2, [sp, #12]
 8012fe6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fea:	1ad3      	subs	r3, r2, r3
 8012fec:	2b31      	cmp	r3, #49	; 0x31
 8012fee:	dc24      	bgt.n	801303a <__ieee754_rem_pio2+0x28a>
 8012ff0:	e9ca 0100 	strd	r0, r1, [sl]
 8012ff4:	4646      	mov	r6, r8
 8012ff6:	464f      	mov	r7, r9
 8012ff8:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	4642      	mov	r2, r8
 8013000:	464b      	mov	r3, r9
 8013002:	4639      	mov	r1, r7
 8013004:	f7ed f95a 	bl	80002bc <__aeabi_dsub>
 8013008:	462b      	mov	r3, r5
 801300a:	4622      	mov	r2, r4
 801300c:	f7ed f956 	bl	80002bc <__aeabi_dsub>
 8013010:	9b02      	ldr	r3, [sp, #8]
 8013012:	2b00      	cmp	r3, #0
 8013014:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013018:	f6bf af0a 	bge.w	8012e30 <__ieee754_rem_pio2+0x80>
 801301c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013020:	f8ca 3004 	str.w	r3, [sl, #4]
 8013024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013028:	f8ca 8000 	str.w	r8, [sl]
 801302c:	f8ca 0008 	str.w	r0, [sl, #8]
 8013030:	f8ca 300c 	str.w	r3, [sl, #12]
 8013034:	f1cb 0b00 	rsb	fp, fp, #0
 8013038:	e6fa      	b.n	8012e30 <__ieee754_rem_pio2+0x80>
 801303a:	a327      	add	r3, pc, #156	; (adr r3, 80130d8 <__ieee754_rem_pio2+0x328>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	ec51 0b18 	vmov	r0, r1, d8
 8013044:	f7ed faf2 	bl	800062c <__aeabi_dmul>
 8013048:	4604      	mov	r4, r0
 801304a:	460d      	mov	r5, r1
 801304c:	4602      	mov	r2, r0
 801304e:	460b      	mov	r3, r1
 8013050:	4640      	mov	r0, r8
 8013052:	4649      	mov	r1, r9
 8013054:	f7ed f932 	bl	80002bc <__aeabi_dsub>
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	4606      	mov	r6, r0
 801305e:	460f      	mov	r7, r1
 8013060:	4640      	mov	r0, r8
 8013062:	4649      	mov	r1, r9
 8013064:	f7ed f92a 	bl	80002bc <__aeabi_dsub>
 8013068:	4622      	mov	r2, r4
 801306a:	462b      	mov	r3, r5
 801306c:	f7ed f926 	bl	80002bc <__aeabi_dsub>
 8013070:	a31b      	add	r3, pc, #108	; (adr r3, 80130e0 <__ieee754_rem_pio2+0x330>)
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	4604      	mov	r4, r0
 8013078:	460d      	mov	r5, r1
 801307a:	ec51 0b18 	vmov	r0, r1, d8
 801307e:	f7ed fad5 	bl	800062c <__aeabi_dmul>
 8013082:	4622      	mov	r2, r4
 8013084:	462b      	mov	r3, r5
 8013086:	f7ed f919 	bl	80002bc <__aeabi_dsub>
 801308a:	4604      	mov	r4, r0
 801308c:	460d      	mov	r5, r1
 801308e:	e75f      	b.n	8012f50 <__ieee754_rem_pio2+0x1a0>
 8013090:	4b1b      	ldr	r3, [pc, #108]	; (8013100 <__ieee754_rem_pio2+0x350>)
 8013092:	4598      	cmp	r8, r3
 8013094:	dd36      	ble.n	8013104 <__ieee754_rem_pio2+0x354>
 8013096:	ee10 2a10 	vmov	r2, s0
 801309a:	462b      	mov	r3, r5
 801309c:	4620      	mov	r0, r4
 801309e:	4629      	mov	r1, r5
 80130a0:	f7ed f90c 	bl	80002bc <__aeabi_dsub>
 80130a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80130a8:	e9ca 0100 	strd	r0, r1, [sl]
 80130ac:	e694      	b.n	8012dd8 <__ieee754_rem_pio2+0x28>
 80130ae:	bf00      	nop
 80130b0:	54400000 	.word	0x54400000
 80130b4:	3ff921fb 	.word	0x3ff921fb
 80130b8:	1a626331 	.word	0x1a626331
 80130bc:	3dd0b461 	.word	0x3dd0b461
 80130c0:	1a600000 	.word	0x1a600000
 80130c4:	3dd0b461 	.word	0x3dd0b461
 80130c8:	2e037073 	.word	0x2e037073
 80130cc:	3ba3198a 	.word	0x3ba3198a
 80130d0:	6dc9c883 	.word	0x6dc9c883
 80130d4:	3fe45f30 	.word	0x3fe45f30
 80130d8:	2e000000 	.word	0x2e000000
 80130dc:	3ba3198a 	.word	0x3ba3198a
 80130e0:	252049c1 	.word	0x252049c1
 80130e4:	397b839a 	.word	0x397b839a
 80130e8:	3fe921fb 	.word	0x3fe921fb
 80130ec:	4002d97b 	.word	0x4002d97b
 80130f0:	3ff921fb 	.word	0x3ff921fb
 80130f4:	413921fb 	.word	0x413921fb
 80130f8:	3fe00000 	.word	0x3fe00000
 80130fc:	0803ae50 	.word	0x0803ae50
 8013100:	7fefffff 	.word	0x7fefffff
 8013104:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013108:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801310c:	ee10 0a10 	vmov	r0, s0
 8013110:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013114:	ee10 6a10 	vmov	r6, s0
 8013118:	460f      	mov	r7, r1
 801311a:	f7ed fd37 	bl	8000b8c <__aeabi_d2iz>
 801311e:	f7ed fa1b 	bl	8000558 <__aeabi_i2d>
 8013122:	4602      	mov	r2, r0
 8013124:	460b      	mov	r3, r1
 8013126:	4630      	mov	r0, r6
 8013128:	4639      	mov	r1, r7
 801312a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801312e:	f7ed f8c5 	bl	80002bc <__aeabi_dsub>
 8013132:	4b23      	ldr	r3, [pc, #140]	; (80131c0 <__ieee754_rem_pio2+0x410>)
 8013134:	2200      	movs	r2, #0
 8013136:	f7ed fa79 	bl	800062c <__aeabi_dmul>
 801313a:	460f      	mov	r7, r1
 801313c:	4606      	mov	r6, r0
 801313e:	f7ed fd25 	bl	8000b8c <__aeabi_d2iz>
 8013142:	f7ed fa09 	bl	8000558 <__aeabi_i2d>
 8013146:	4602      	mov	r2, r0
 8013148:	460b      	mov	r3, r1
 801314a:	4630      	mov	r0, r6
 801314c:	4639      	mov	r1, r7
 801314e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013152:	f7ed f8b3 	bl	80002bc <__aeabi_dsub>
 8013156:	4b1a      	ldr	r3, [pc, #104]	; (80131c0 <__ieee754_rem_pio2+0x410>)
 8013158:	2200      	movs	r2, #0
 801315a:	f7ed fa67 	bl	800062c <__aeabi_dmul>
 801315e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013162:	ad04      	add	r5, sp, #16
 8013164:	f04f 0803 	mov.w	r8, #3
 8013168:	46a9      	mov	r9, r5
 801316a:	2600      	movs	r6, #0
 801316c:	2700      	movs	r7, #0
 801316e:	4632      	mov	r2, r6
 8013170:	463b      	mov	r3, r7
 8013172:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013176:	46c3      	mov	fp, r8
 8013178:	3d08      	subs	r5, #8
 801317a:	f108 38ff 	add.w	r8, r8, #4294967295
 801317e:	f7ed fcbd 	bl	8000afc <__aeabi_dcmpeq>
 8013182:	2800      	cmp	r0, #0
 8013184:	d1f3      	bne.n	801316e <__ieee754_rem_pio2+0x3be>
 8013186:	4b0f      	ldr	r3, [pc, #60]	; (80131c4 <__ieee754_rem_pio2+0x414>)
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	2302      	movs	r3, #2
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	4622      	mov	r2, r4
 8013190:	465b      	mov	r3, fp
 8013192:	4651      	mov	r1, sl
 8013194:	4648      	mov	r0, r9
 8013196:	f000 f993 	bl	80134c0 <__kernel_rem_pio2>
 801319a:	9b02      	ldr	r3, [sp, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	4683      	mov	fp, r0
 80131a0:	f6bf ae46 	bge.w	8012e30 <__ieee754_rem_pio2+0x80>
 80131a4:	e9da 2100 	ldrd	r2, r1, [sl]
 80131a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131ac:	e9ca 2300 	strd	r2, r3, [sl]
 80131b0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80131b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131b8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80131bc:	e73a      	b.n	8013034 <__ieee754_rem_pio2+0x284>
 80131be:	bf00      	nop
 80131c0:	41700000 	.word	0x41700000
 80131c4:	0803aed0 	.word	0x0803aed0

080131c8 <__ieee754_sqrt>:
 80131c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131cc:	ec55 4b10 	vmov	r4, r5, d0
 80131d0:	4e55      	ldr	r6, [pc, #340]	; (8013328 <__ieee754_sqrt+0x160>)
 80131d2:	43ae      	bics	r6, r5
 80131d4:	ee10 0a10 	vmov	r0, s0
 80131d8:	ee10 3a10 	vmov	r3, s0
 80131dc:	462a      	mov	r2, r5
 80131de:	4629      	mov	r1, r5
 80131e0:	d110      	bne.n	8013204 <__ieee754_sqrt+0x3c>
 80131e2:	ee10 2a10 	vmov	r2, s0
 80131e6:	462b      	mov	r3, r5
 80131e8:	f7ed fa20 	bl	800062c <__aeabi_dmul>
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4620      	mov	r0, r4
 80131f2:	4629      	mov	r1, r5
 80131f4:	f7ed f864 	bl	80002c0 <__adddf3>
 80131f8:	4604      	mov	r4, r0
 80131fa:	460d      	mov	r5, r1
 80131fc:	ec45 4b10 	vmov	d0, r4, r5
 8013200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013204:	2d00      	cmp	r5, #0
 8013206:	dc10      	bgt.n	801322a <__ieee754_sqrt+0x62>
 8013208:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801320c:	4330      	orrs	r0, r6
 801320e:	d0f5      	beq.n	80131fc <__ieee754_sqrt+0x34>
 8013210:	b15d      	cbz	r5, 801322a <__ieee754_sqrt+0x62>
 8013212:	ee10 2a10 	vmov	r2, s0
 8013216:	462b      	mov	r3, r5
 8013218:	ee10 0a10 	vmov	r0, s0
 801321c:	f7ed f84e 	bl	80002bc <__aeabi_dsub>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	f7ed fb2c 	bl	8000880 <__aeabi_ddiv>
 8013228:	e7e6      	b.n	80131f8 <__ieee754_sqrt+0x30>
 801322a:	1512      	asrs	r2, r2, #20
 801322c:	d074      	beq.n	8013318 <__ieee754_sqrt+0x150>
 801322e:	07d4      	lsls	r4, r2, #31
 8013230:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013234:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801323c:	bf5e      	ittt	pl
 801323e:	0fda      	lsrpl	r2, r3, #31
 8013240:	005b      	lslpl	r3, r3, #1
 8013242:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013246:	2400      	movs	r4, #0
 8013248:	0fda      	lsrs	r2, r3, #31
 801324a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801324e:	107f      	asrs	r7, r7, #1
 8013250:	005b      	lsls	r3, r3, #1
 8013252:	2516      	movs	r5, #22
 8013254:	4620      	mov	r0, r4
 8013256:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801325a:	1886      	adds	r6, r0, r2
 801325c:	428e      	cmp	r6, r1
 801325e:	bfde      	ittt	le
 8013260:	1b89      	suble	r1, r1, r6
 8013262:	18b0      	addle	r0, r6, r2
 8013264:	18a4      	addle	r4, r4, r2
 8013266:	0049      	lsls	r1, r1, #1
 8013268:	3d01      	subs	r5, #1
 801326a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801326e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013272:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013276:	d1f0      	bne.n	801325a <__ieee754_sqrt+0x92>
 8013278:	462a      	mov	r2, r5
 801327a:	f04f 0e20 	mov.w	lr, #32
 801327e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013282:	4281      	cmp	r1, r0
 8013284:	eb06 0c05 	add.w	ip, r6, r5
 8013288:	dc02      	bgt.n	8013290 <__ieee754_sqrt+0xc8>
 801328a:	d113      	bne.n	80132b4 <__ieee754_sqrt+0xec>
 801328c:	459c      	cmp	ip, r3
 801328e:	d811      	bhi.n	80132b4 <__ieee754_sqrt+0xec>
 8013290:	f1bc 0f00 	cmp.w	ip, #0
 8013294:	eb0c 0506 	add.w	r5, ip, r6
 8013298:	da43      	bge.n	8013322 <__ieee754_sqrt+0x15a>
 801329a:	2d00      	cmp	r5, #0
 801329c:	db41      	blt.n	8013322 <__ieee754_sqrt+0x15a>
 801329e:	f100 0801 	add.w	r8, r0, #1
 80132a2:	1a09      	subs	r1, r1, r0
 80132a4:	459c      	cmp	ip, r3
 80132a6:	bf88      	it	hi
 80132a8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80132ac:	eba3 030c 	sub.w	r3, r3, ip
 80132b0:	4432      	add	r2, r6
 80132b2:	4640      	mov	r0, r8
 80132b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80132b8:	f1be 0e01 	subs.w	lr, lr, #1
 80132bc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80132c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80132c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80132c8:	d1db      	bne.n	8013282 <__ieee754_sqrt+0xba>
 80132ca:	430b      	orrs	r3, r1
 80132cc:	d006      	beq.n	80132dc <__ieee754_sqrt+0x114>
 80132ce:	1c50      	adds	r0, r2, #1
 80132d0:	bf13      	iteet	ne
 80132d2:	3201      	addne	r2, #1
 80132d4:	3401      	addeq	r4, #1
 80132d6:	4672      	moveq	r2, lr
 80132d8:	f022 0201 	bicne.w	r2, r2, #1
 80132dc:	1063      	asrs	r3, r4, #1
 80132de:	0852      	lsrs	r2, r2, #1
 80132e0:	07e1      	lsls	r1, r4, #31
 80132e2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80132e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80132ea:	bf48      	it	mi
 80132ec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80132f0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80132f4:	4614      	mov	r4, r2
 80132f6:	e781      	b.n	80131fc <__ieee754_sqrt+0x34>
 80132f8:	0ad9      	lsrs	r1, r3, #11
 80132fa:	3815      	subs	r0, #21
 80132fc:	055b      	lsls	r3, r3, #21
 80132fe:	2900      	cmp	r1, #0
 8013300:	d0fa      	beq.n	80132f8 <__ieee754_sqrt+0x130>
 8013302:	02cd      	lsls	r5, r1, #11
 8013304:	d50a      	bpl.n	801331c <__ieee754_sqrt+0x154>
 8013306:	f1c2 0420 	rsb	r4, r2, #32
 801330a:	fa23 f404 	lsr.w	r4, r3, r4
 801330e:	1e55      	subs	r5, r2, #1
 8013310:	4093      	lsls	r3, r2
 8013312:	4321      	orrs	r1, r4
 8013314:	1b42      	subs	r2, r0, r5
 8013316:	e78a      	b.n	801322e <__ieee754_sqrt+0x66>
 8013318:	4610      	mov	r0, r2
 801331a:	e7f0      	b.n	80132fe <__ieee754_sqrt+0x136>
 801331c:	0049      	lsls	r1, r1, #1
 801331e:	3201      	adds	r2, #1
 8013320:	e7ef      	b.n	8013302 <__ieee754_sqrt+0x13a>
 8013322:	4680      	mov	r8, r0
 8013324:	e7bd      	b.n	80132a2 <__ieee754_sqrt+0xda>
 8013326:	bf00      	nop
 8013328:	7ff00000 	.word	0x7ff00000
 801332c:	00000000 	.word	0x00000000

08013330 <__kernel_cos>:
 8013330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	ec57 6b10 	vmov	r6, r7, d0
 8013338:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801333c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013340:	ed8d 1b00 	vstr	d1, [sp]
 8013344:	da07      	bge.n	8013356 <__kernel_cos+0x26>
 8013346:	ee10 0a10 	vmov	r0, s0
 801334a:	4639      	mov	r1, r7
 801334c:	f7ed fc1e 	bl	8000b8c <__aeabi_d2iz>
 8013350:	2800      	cmp	r0, #0
 8013352:	f000 8088 	beq.w	8013466 <__kernel_cos+0x136>
 8013356:	4632      	mov	r2, r6
 8013358:	463b      	mov	r3, r7
 801335a:	4630      	mov	r0, r6
 801335c:	4639      	mov	r1, r7
 801335e:	f7ed f965 	bl	800062c <__aeabi_dmul>
 8013362:	4b51      	ldr	r3, [pc, #324]	; (80134a8 <__kernel_cos+0x178>)
 8013364:	2200      	movs	r2, #0
 8013366:	4604      	mov	r4, r0
 8013368:	460d      	mov	r5, r1
 801336a:	f7ed f95f 	bl	800062c <__aeabi_dmul>
 801336e:	a340      	add	r3, pc, #256	; (adr r3, 8013470 <__kernel_cos+0x140>)
 8013370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013374:	4682      	mov	sl, r0
 8013376:	468b      	mov	fp, r1
 8013378:	4620      	mov	r0, r4
 801337a:	4629      	mov	r1, r5
 801337c:	f7ed f956 	bl	800062c <__aeabi_dmul>
 8013380:	a33d      	add	r3, pc, #244	; (adr r3, 8013478 <__kernel_cos+0x148>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7ec ff9b 	bl	80002c0 <__adddf3>
 801338a:	4622      	mov	r2, r4
 801338c:	462b      	mov	r3, r5
 801338e:	f7ed f94d 	bl	800062c <__aeabi_dmul>
 8013392:	a33b      	add	r3, pc, #236	; (adr r3, 8013480 <__kernel_cos+0x150>)
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	f7ec ff90 	bl	80002bc <__aeabi_dsub>
 801339c:	4622      	mov	r2, r4
 801339e:	462b      	mov	r3, r5
 80133a0:	f7ed f944 	bl	800062c <__aeabi_dmul>
 80133a4:	a338      	add	r3, pc, #224	; (adr r3, 8013488 <__kernel_cos+0x158>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	f7ec ff89 	bl	80002c0 <__adddf3>
 80133ae:	4622      	mov	r2, r4
 80133b0:	462b      	mov	r3, r5
 80133b2:	f7ed f93b 	bl	800062c <__aeabi_dmul>
 80133b6:	a336      	add	r3, pc, #216	; (adr r3, 8013490 <__kernel_cos+0x160>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	f7ec ff7e 	bl	80002bc <__aeabi_dsub>
 80133c0:	4622      	mov	r2, r4
 80133c2:	462b      	mov	r3, r5
 80133c4:	f7ed f932 	bl	800062c <__aeabi_dmul>
 80133c8:	a333      	add	r3, pc, #204	; (adr r3, 8013498 <__kernel_cos+0x168>)
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	f7ec ff77 	bl	80002c0 <__adddf3>
 80133d2:	4622      	mov	r2, r4
 80133d4:	462b      	mov	r3, r5
 80133d6:	f7ed f929 	bl	800062c <__aeabi_dmul>
 80133da:	4622      	mov	r2, r4
 80133dc:	462b      	mov	r3, r5
 80133de:	f7ed f925 	bl	800062c <__aeabi_dmul>
 80133e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133e6:	4604      	mov	r4, r0
 80133e8:	460d      	mov	r5, r1
 80133ea:	4630      	mov	r0, r6
 80133ec:	4639      	mov	r1, r7
 80133ee:	f7ed f91d 	bl	800062c <__aeabi_dmul>
 80133f2:	460b      	mov	r3, r1
 80133f4:	4602      	mov	r2, r0
 80133f6:	4629      	mov	r1, r5
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ec ff5f 	bl	80002bc <__aeabi_dsub>
 80133fe:	4b2b      	ldr	r3, [pc, #172]	; (80134ac <__kernel_cos+0x17c>)
 8013400:	4598      	cmp	r8, r3
 8013402:	4606      	mov	r6, r0
 8013404:	460f      	mov	r7, r1
 8013406:	dc10      	bgt.n	801342a <__kernel_cos+0xfa>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	4650      	mov	r0, sl
 801340e:	4659      	mov	r1, fp
 8013410:	f7ec ff54 	bl	80002bc <__aeabi_dsub>
 8013414:	460b      	mov	r3, r1
 8013416:	4926      	ldr	r1, [pc, #152]	; (80134b0 <__kernel_cos+0x180>)
 8013418:	4602      	mov	r2, r0
 801341a:	2000      	movs	r0, #0
 801341c:	f7ec ff4e 	bl	80002bc <__aeabi_dsub>
 8013420:	ec41 0b10 	vmov	d0, r0, r1
 8013424:	b003      	add	sp, #12
 8013426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342a:	4b22      	ldr	r3, [pc, #136]	; (80134b4 <__kernel_cos+0x184>)
 801342c:	4920      	ldr	r1, [pc, #128]	; (80134b0 <__kernel_cos+0x180>)
 801342e:	4598      	cmp	r8, r3
 8013430:	bfcc      	ite	gt
 8013432:	4d21      	ldrgt	r5, [pc, #132]	; (80134b8 <__kernel_cos+0x188>)
 8013434:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013438:	2400      	movs	r4, #0
 801343a:	4622      	mov	r2, r4
 801343c:	462b      	mov	r3, r5
 801343e:	2000      	movs	r0, #0
 8013440:	f7ec ff3c 	bl	80002bc <__aeabi_dsub>
 8013444:	4622      	mov	r2, r4
 8013446:	4680      	mov	r8, r0
 8013448:	4689      	mov	r9, r1
 801344a:	462b      	mov	r3, r5
 801344c:	4650      	mov	r0, sl
 801344e:	4659      	mov	r1, fp
 8013450:	f7ec ff34 	bl	80002bc <__aeabi_dsub>
 8013454:	4632      	mov	r2, r6
 8013456:	463b      	mov	r3, r7
 8013458:	f7ec ff30 	bl	80002bc <__aeabi_dsub>
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	4640      	mov	r0, r8
 8013462:	4649      	mov	r1, r9
 8013464:	e7da      	b.n	801341c <__kernel_cos+0xec>
 8013466:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80134a0 <__kernel_cos+0x170>
 801346a:	e7db      	b.n	8013424 <__kernel_cos+0xf4>
 801346c:	f3af 8000 	nop.w
 8013470:	be8838d4 	.word	0xbe8838d4
 8013474:	bda8fae9 	.word	0xbda8fae9
 8013478:	bdb4b1c4 	.word	0xbdb4b1c4
 801347c:	3e21ee9e 	.word	0x3e21ee9e
 8013480:	809c52ad 	.word	0x809c52ad
 8013484:	3e927e4f 	.word	0x3e927e4f
 8013488:	19cb1590 	.word	0x19cb1590
 801348c:	3efa01a0 	.word	0x3efa01a0
 8013490:	16c15177 	.word	0x16c15177
 8013494:	3f56c16c 	.word	0x3f56c16c
 8013498:	5555554c 	.word	0x5555554c
 801349c:	3fa55555 	.word	0x3fa55555
 80134a0:	00000000 	.word	0x00000000
 80134a4:	3ff00000 	.word	0x3ff00000
 80134a8:	3fe00000 	.word	0x3fe00000
 80134ac:	3fd33332 	.word	0x3fd33332
 80134b0:	3ff00000 	.word	0x3ff00000
 80134b4:	3fe90000 	.word	0x3fe90000
 80134b8:	3fd20000 	.word	0x3fd20000
 80134bc:	00000000 	.word	0x00000000

080134c0 <__kernel_rem_pio2>:
 80134c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c4:	ed2d 8b02 	vpush	{d8}
 80134c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80134cc:	f112 0f14 	cmn.w	r2, #20
 80134d0:	9308      	str	r3, [sp, #32]
 80134d2:	9101      	str	r1, [sp, #4]
 80134d4:	4bc4      	ldr	r3, [pc, #784]	; (80137e8 <__kernel_rem_pio2+0x328>)
 80134d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80134d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80134da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134de:	9302      	str	r3, [sp, #8]
 80134e0:	9b08      	ldr	r3, [sp, #32]
 80134e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80134e6:	bfa8      	it	ge
 80134e8:	1ed4      	subge	r4, r2, #3
 80134ea:	9306      	str	r3, [sp, #24]
 80134ec:	bfb2      	itee	lt
 80134ee:	2400      	movlt	r4, #0
 80134f0:	2318      	movge	r3, #24
 80134f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80134f6:	f06f 0317 	mvn.w	r3, #23
 80134fa:	fb04 3303 	mla	r3, r4, r3, r3
 80134fe:	eb03 0a02 	add.w	sl, r3, r2
 8013502:	9b02      	ldr	r3, [sp, #8]
 8013504:	9a06      	ldr	r2, [sp, #24]
 8013506:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80137d8 <__kernel_rem_pio2+0x318>
 801350a:	eb03 0802 	add.w	r8, r3, r2
 801350e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013510:	1aa7      	subs	r7, r4, r2
 8013512:	ae22      	add	r6, sp, #136	; 0x88
 8013514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013518:	2500      	movs	r5, #0
 801351a:	4545      	cmp	r5, r8
 801351c:	dd13      	ble.n	8013546 <__kernel_rem_pio2+0x86>
 801351e:	9b08      	ldr	r3, [sp, #32]
 8013520:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80137d8 <__kernel_rem_pio2+0x318>
 8013524:	aa22      	add	r2, sp, #136	; 0x88
 8013526:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801352a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801352e:	f04f 0800 	mov.w	r8, #0
 8013532:	9b02      	ldr	r3, [sp, #8]
 8013534:	4598      	cmp	r8, r3
 8013536:	dc2f      	bgt.n	8013598 <__kernel_rem_pio2+0xd8>
 8013538:	ed8d 8b04 	vstr	d8, [sp, #16]
 801353c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013540:	462f      	mov	r7, r5
 8013542:	2600      	movs	r6, #0
 8013544:	e01b      	b.n	801357e <__kernel_rem_pio2+0xbe>
 8013546:	42ef      	cmn	r7, r5
 8013548:	d407      	bmi.n	801355a <__kernel_rem_pio2+0x9a>
 801354a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801354e:	f7ed f803 	bl	8000558 <__aeabi_i2d>
 8013552:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013556:	3501      	adds	r5, #1
 8013558:	e7df      	b.n	801351a <__kernel_rem_pio2+0x5a>
 801355a:	ec51 0b18 	vmov	r0, r1, d8
 801355e:	e7f8      	b.n	8013552 <__kernel_rem_pio2+0x92>
 8013560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013564:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013568:	f7ed f860 	bl	800062c <__aeabi_dmul>
 801356c:	4602      	mov	r2, r0
 801356e:	460b      	mov	r3, r1
 8013570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013574:	f7ec fea4 	bl	80002c0 <__adddf3>
 8013578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801357c:	3601      	adds	r6, #1
 801357e:	9b06      	ldr	r3, [sp, #24]
 8013580:	429e      	cmp	r6, r3
 8013582:	f1a7 0708 	sub.w	r7, r7, #8
 8013586:	ddeb      	ble.n	8013560 <__kernel_rem_pio2+0xa0>
 8013588:	ed9d 7b04 	vldr	d7, [sp, #16]
 801358c:	f108 0801 	add.w	r8, r8, #1
 8013590:	ecab 7b02 	vstmia	fp!, {d7}
 8013594:	3508      	adds	r5, #8
 8013596:	e7cc      	b.n	8013532 <__kernel_rem_pio2+0x72>
 8013598:	9b02      	ldr	r3, [sp, #8]
 801359a:	aa0e      	add	r2, sp, #56	; 0x38
 801359c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135a0:	930d      	str	r3, [sp, #52]	; 0x34
 80135a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80135a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80135a8:	9c02      	ldr	r4, [sp, #8]
 80135aa:	930c      	str	r3, [sp, #48]	; 0x30
 80135ac:	00e3      	lsls	r3, r4, #3
 80135ae:	930a      	str	r3, [sp, #40]	; 0x28
 80135b0:	ab9a      	add	r3, sp, #616	; 0x268
 80135b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80135b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80135ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80135be:	ab72      	add	r3, sp, #456	; 0x1c8
 80135c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80135c4:	46c3      	mov	fp, r8
 80135c6:	46a1      	mov	r9, r4
 80135c8:	f1b9 0f00 	cmp.w	r9, #0
 80135cc:	f1a5 0508 	sub.w	r5, r5, #8
 80135d0:	dc77      	bgt.n	80136c2 <__kernel_rem_pio2+0x202>
 80135d2:	ec47 6b10 	vmov	d0, r6, r7
 80135d6:	4650      	mov	r0, sl
 80135d8:	f000 fe5a 	bl	8014290 <scalbn>
 80135dc:	ec57 6b10 	vmov	r6, r7, d0
 80135e0:	2200      	movs	r2, #0
 80135e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80135e6:	ee10 0a10 	vmov	r0, s0
 80135ea:	4639      	mov	r1, r7
 80135ec:	f7ed f81e 	bl	800062c <__aeabi_dmul>
 80135f0:	ec41 0b10 	vmov	d0, r0, r1
 80135f4:	f000 fdc4 	bl	8014180 <floor>
 80135f8:	4b7c      	ldr	r3, [pc, #496]	; (80137ec <__kernel_rem_pio2+0x32c>)
 80135fa:	ec51 0b10 	vmov	r0, r1, d0
 80135fe:	2200      	movs	r2, #0
 8013600:	f7ed f814 	bl	800062c <__aeabi_dmul>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	4630      	mov	r0, r6
 801360a:	4639      	mov	r1, r7
 801360c:	f7ec fe56 	bl	80002bc <__aeabi_dsub>
 8013610:	460f      	mov	r7, r1
 8013612:	4606      	mov	r6, r0
 8013614:	f7ed faba 	bl	8000b8c <__aeabi_d2iz>
 8013618:	9004      	str	r0, [sp, #16]
 801361a:	f7ec ff9d 	bl	8000558 <__aeabi_i2d>
 801361e:	4602      	mov	r2, r0
 8013620:	460b      	mov	r3, r1
 8013622:	4630      	mov	r0, r6
 8013624:	4639      	mov	r1, r7
 8013626:	f7ec fe49 	bl	80002bc <__aeabi_dsub>
 801362a:	f1ba 0f00 	cmp.w	sl, #0
 801362e:	4606      	mov	r6, r0
 8013630:	460f      	mov	r7, r1
 8013632:	dd6d      	ble.n	8013710 <__kernel_rem_pio2+0x250>
 8013634:	1e62      	subs	r2, r4, #1
 8013636:	ab0e      	add	r3, sp, #56	; 0x38
 8013638:	9d04      	ldr	r5, [sp, #16]
 801363a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801363e:	f1ca 0118 	rsb	r1, sl, #24
 8013642:	fa40 f301 	asr.w	r3, r0, r1
 8013646:	441d      	add	r5, r3
 8013648:	408b      	lsls	r3, r1
 801364a:	1ac0      	subs	r0, r0, r3
 801364c:	ab0e      	add	r3, sp, #56	; 0x38
 801364e:	9504      	str	r5, [sp, #16]
 8013650:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013654:	f1ca 0317 	rsb	r3, sl, #23
 8013658:	fa40 fb03 	asr.w	fp, r0, r3
 801365c:	f1bb 0f00 	cmp.w	fp, #0
 8013660:	dd65      	ble.n	801372e <__kernel_rem_pio2+0x26e>
 8013662:	9b04      	ldr	r3, [sp, #16]
 8013664:	2200      	movs	r2, #0
 8013666:	3301      	adds	r3, #1
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	4615      	mov	r5, r2
 801366c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013670:	4294      	cmp	r4, r2
 8013672:	f300 809c 	bgt.w	80137ae <__kernel_rem_pio2+0x2ee>
 8013676:	f1ba 0f00 	cmp.w	sl, #0
 801367a:	dd07      	ble.n	801368c <__kernel_rem_pio2+0x1cc>
 801367c:	f1ba 0f01 	cmp.w	sl, #1
 8013680:	f000 80c0 	beq.w	8013804 <__kernel_rem_pio2+0x344>
 8013684:	f1ba 0f02 	cmp.w	sl, #2
 8013688:	f000 80c6 	beq.w	8013818 <__kernel_rem_pio2+0x358>
 801368c:	f1bb 0f02 	cmp.w	fp, #2
 8013690:	d14d      	bne.n	801372e <__kernel_rem_pio2+0x26e>
 8013692:	4632      	mov	r2, r6
 8013694:	463b      	mov	r3, r7
 8013696:	4956      	ldr	r1, [pc, #344]	; (80137f0 <__kernel_rem_pio2+0x330>)
 8013698:	2000      	movs	r0, #0
 801369a:	f7ec fe0f 	bl	80002bc <__aeabi_dsub>
 801369e:	4606      	mov	r6, r0
 80136a0:	460f      	mov	r7, r1
 80136a2:	2d00      	cmp	r5, #0
 80136a4:	d043      	beq.n	801372e <__kernel_rem_pio2+0x26e>
 80136a6:	4650      	mov	r0, sl
 80136a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80137e0 <__kernel_rem_pio2+0x320>
 80136ac:	f000 fdf0 	bl	8014290 <scalbn>
 80136b0:	4630      	mov	r0, r6
 80136b2:	4639      	mov	r1, r7
 80136b4:	ec53 2b10 	vmov	r2, r3, d0
 80136b8:	f7ec fe00 	bl	80002bc <__aeabi_dsub>
 80136bc:	4606      	mov	r6, r0
 80136be:	460f      	mov	r7, r1
 80136c0:	e035      	b.n	801372e <__kernel_rem_pio2+0x26e>
 80136c2:	4b4c      	ldr	r3, [pc, #304]	; (80137f4 <__kernel_rem_pio2+0x334>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	4630      	mov	r0, r6
 80136c8:	4639      	mov	r1, r7
 80136ca:	f7ec ffaf 	bl	800062c <__aeabi_dmul>
 80136ce:	f7ed fa5d 	bl	8000b8c <__aeabi_d2iz>
 80136d2:	f7ec ff41 	bl	8000558 <__aeabi_i2d>
 80136d6:	4602      	mov	r2, r0
 80136d8:	460b      	mov	r3, r1
 80136da:	ec43 2b18 	vmov	d8, r2, r3
 80136de:	4b46      	ldr	r3, [pc, #280]	; (80137f8 <__kernel_rem_pio2+0x338>)
 80136e0:	2200      	movs	r2, #0
 80136e2:	f7ec ffa3 	bl	800062c <__aeabi_dmul>
 80136e6:	4602      	mov	r2, r0
 80136e8:	460b      	mov	r3, r1
 80136ea:	4630      	mov	r0, r6
 80136ec:	4639      	mov	r1, r7
 80136ee:	f7ec fde5 	bl	80002bc <__aeabi_dsub>
 80136f2:	f7ed fa4b 	bl	8000b8c <__aeabi_d2iz>
 80136f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136fa:	f84b 0b04 	str.w	r0, [fp], #4
 80136fe:	ec51 0b18 	vmov	r0, r1, d8
 8013702:	f7ec fddd 	bl	80002c0 <__adddf3>
 8013706:	f109 39ff 	add.w	r9, r9, #4294967295
 801370a:	4606      	mov	r6, r0
 801370c:	460f      	mov	r7, r1
 801370e:	e75b      	b.n	80135c8 <__kernel_rem_pio2+0x108>
 8013710:	d106      	bne.n	8013720 <__kernel_rem_pio2+0x260>
 8013712:	1e63      	subs	r3, r4, #1
 8013714:	aa0e      	add	r2, sp, #56	; 0x38
 8013716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801371a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801371e:	e79d      	b.n	801365c <__kernel_rem_pio2+0x19c>
 8013720:	4b36      	ldr	r3, [pc, #216]	; (80137fc <__kernel_rem_pio2+0x33c>)
 8013722:	2200      	movs	r2, #0
 8013724:	f7ed fa08 	bl	8000b38 <__aeabi_dcmpge>
 8013728:	2800      	cmp	r0, #0
 801372a:	d13d      	bne.n	80137a8 <__kernel_rem_pio2+0x2e8>
 801372c:	4683      	mov	fp, r0
 801372e:	2200      	movs	r2, #0
 8013730:	2300      	movs	r3, #0
 8013732:	4630      	mov	r0, r6
 8013734:	4639      	mov	r1, r7
 8013736:	f7ed f9e1 	bl	8000afc <__aeabi_dcmpeq>
 801373a:	2800      	cmp	r0, #0
 801373c:	f000 80c0 	beq.w	80138c0 <__kernel_rem_pio2+0x400>
 8013740:	1e65      	subs	r5, r4, #1
 8013742:	462b      	mov	r3, r5
 8013744:	2200      	movs	r2, #0
 8013746:	9902      	ldr	r1, [sp, #8]
 8013748:	428b      	cmp	r3, r1
 801374a:	da6c      	bge.n	8013826 <__kernel_rem_pio2+0x366>
 801374c:	2a00      	cmp	r2, #0
 801374e:	f000 8089 	beq.w	8013864 <__kernel_rem_pio2+0x3a4>
 8013752:	ab0e      	add	r3, sp, #56	; 0x38
 8013754:	f1aa 0a18 	sub.w	sl, sl, #24
 8013758:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801375c:	2b00      	cmp	r3, #0
 801375e:	f000 80ad 	beq.w	80138bc <__kernel_rem_pio2+0x3fc>
 8013762:	4650      	mov	r0, sl
 8013764:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80137e0 <__kernel_rem_pio2+0x320>
 8013768:	f000 fd92 	bl	8014290 <scalbn>
 801376c:	ab9a      	add	r3, sp, #616	; 0x268
 801376e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013772:	ec57 6b10 	vmov	r6, r7, d0
 8013776:	00ec      	lsls	r4, r5, #3
 8013778:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801377c:	46aa      	mov	sl, r5
 801377e:	f1ba 0f00 	cmp.w	sl, #0
 8013782:	f280 80d6 	bge.w	8013932 <__kernel_rem_pio2+0x472>
 8013786:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80137d8 <__kernel_rem_pio2+0x318>
 801378a:	462e      	mov	r6, r5
 801378c:	2e00      	cmp	r6, #0
 801378e:	f2c0 8104 	blt.w	801399a <__kernel_rem_pio2+0x4da>
 8013792:	ab72      	add	r3, sp, #456	; 0x1c8
 8013794:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013798:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013800 <__kernel_rem_pio2+0x340>
 801379c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80137a0:	f04f 0800 	mov.w	r8, #0
 80137a4:	1baf      	subs	r7, r5, r6
 80137a6:	e0ea      	b.n	801397e <__kernel_rem_pio2+0x4be>
 80137a8:	f04f 0b02 	mov.w	fp, #2
 80137ac:	e759      	b.n	8013662 <__kernel_rem_pio2+0x1a2>
 80137ae:	f8d8 3000 	ldr.w	r3, [r8]
 80137b2:	b955      	cbnz	r5, 80137ca <__kernel_rem_pio2+0x30a>
 80137b4:	b123      	cbz	r3, 80137c0 <__kernel_rem_pio2+0x300>
 80137b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80137ba:	f8c8 3000 	str.w	r3, [r8]
 80137be:	2301      	movs	r3, #1
 80137c0:	3201      	adds	r2, #1
 80137c2:	f108 0804 	add.w	r8, r8, #4
 80137c6:	461d      	mov	r5, r3
 80137c8:	e752      	b.n	8013670 <__kernel_rem_pio2+0x1b0>
 80137ca:	1acb      	subs	r3, r1, r3
 80137cc:	f8c8 3000 	str.w	r3, [r8]
 80137d0:	462b      	mov	r3, r5
 80137d2:	e7f5      	b.n	80137c0 <__kernel_rem_pio2+0x300>
 80137d4:	f3af 8000 	nop.w
	...
 80137e4:	3ff00000 	.word	0x3ff00000
 80137e8:	0803b018 	.word	0x0803b018
 80137ec:	40200000 	.word	0x40200000
 80137f0:	3ff00000 	.word	0x3ff00000
 80137f4:	3e700000 	.word	0x3e700000
 80137f8:	41700000 	.word	0x41700000
 80137fc:	3fe00000 	.word	0x3fe00000
 8013800:	0803afd8 	.word	0x0803afd8
 8013804:	1e62      	subs	r2, r4, #1
 8013806:	ab0e      	add	r3, sp, #56	; 0x38
 8013808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801380c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013810:	a90e      	add	r1, sp, #56	; 0x38
 8013812:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013816:	e739      	b.n	801368c <__kernel_rem_pio2+0x1cc>
 8013818:	1e62      	subs	r2, r4, #1
 801381a:	ab0e      	add	r3, sp, #56	; 0x38
 801381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013820:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013824:	e7f4      	b.n	8013810 <__kernel_rem_pio2+0x350>
 8013826:	a90e      	add	r1, sp, #56	; 0x38
 8013828:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801382c:	3b01      	subs	r3, #1
 801382e:	430a      	orrs	r2, r1
 8013830:	e789      	b.n	8013746 <__kernel_rem_pio2+0x286>
 8013832:	3301      	adds	r3, #1
 8013834:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013838:	2900      	cmp	r1, #0
 801383a:	d0fa      	beq.n	8013832 <__kernel_rem_pio2+0x372>
 801383c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801383e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013842:	446a      	add	r2, sp
 8013844:	3a98      	subs	r2, #152	; 0x98
 8013846:	920a      	str	r2, [sp, #40]	; 0x28
 8013848:	9a08      	ldr	r2, [sp, #32]
 801384a:	18e3      	adds	r3, r4, r3
 801384c:	18a5      	adds	r5, r4, r2
 801384e:	aa22      	add	r2, sp, #136	; 0x88
 8013850:	f104 0801 	add.w	r8, r4, #1
 8013854:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013858:	9304      	str	r3, [sp, #16]
 801385a:	9b04      	ldr	r3, [sp, #16]
 801385c:	4543      	cmp	r3, r8
 801385e:	da04      	bge.n	801386a <__kernel_rem_pio2+0x3aa>
 8013860:	461c      	mov	r4, r3
 8013862:	e6a3      	b.n	80135ac <__kernel_rem_pio2+0xec>
 8013864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013866:	2301      	movs	r3, #1
 8013868:	e7e4      	b.n	8013834 <__kernel_rem_pio2+0x374>
 801386a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801386c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013870:	f7ec fe72 	bl	8000558 <__aeabi_i2d>
 8013874:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801387a:	46ab      	mov	fp, r5
 801387c:	461c      	mov	r4, r3
 801387e:	f04f 0900 	mov.w	r9, #0
 8013882:	2600      	movs	r6, #0
 8013884:	2700      	movs	r7, #0
 8013886:	9b06      	ldr	r3, [sp, #24]
 8013888:	4599      	cmp	r9, r3
 801388a:	dd06      	ble.n	801389a <__kernel_rem_pio2+0x3da>
 801388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801388e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013892:	f108 0801 	add.w	r8, r8, #1
 8013896:	930a      	str	r3, [sp, #40]	; 0x28
 8013898:	e7df      	b.n	801385a <__kernel_rem_pio2+0x39a>
 801389a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801389e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80138a2:	f7ec fec3 	bl	800062c <__aeabi_dmul>
 80138a6:	4602      	mov	r2, r0
 80138a8:	460b      	mov	r3, r1
 80138aa:	4630      	mov	r0, r6
 80138ac:	4639      	mov	r1, r7
 80138ae:	f7ec fd07 	bl	80002c0 <__adddf3>
 80138b2:	f109 0901 	add.w	r9, r9, #1
 80138b6:	4606      	mov	r6, r0
 80138b8:	460f      	mov	r7, r1
 80138ba:	e7e4      	b.n	8013886 <__kernel_rem_pio2+0x3c6>
 80138bc:	3d01      	subs	r5, #1
 80138be:	e748      	b.n	8013752 <__kernel_rem_pio2+0x292>
 80138c0:	ec47 6b10 	vmov	d0, r6, r7
 80138c4:	f1ca 0000 	rsb	r0, sl, #0
 80138c8:	f000 fce2 	bl	8014290 <scalbn>
 80138cc:	ec57 6b10 	vmov	r6, r7, d0
 80138d0:	4ba0      	ldr	r3, [pc, #640]	; (8013b54 <__kernel_rem_pio2+0x694>)
 80138d2:	ee10 0a10 	vmov	r0, s0
 80138d6:	2200      	movs	r2, #0
 80138d8:	4639      	mov	r1, r7
 80138da:	f7ed f92d 	bl	8000b38 <__aeabi_dcmpge>
 80138de:	b1f8      	cbz	r0, 8013920 <__kernel_rem_pio2+0x460>
 80138e0:	4b9d      	ldr	r3, [pc, #628]	; (8013b58 <__kernel_rem_pio2+0x698>)
 80138e2:	2200      	movs	r2, #0
 80138e4:	4630      	mov	r0, r6
 80138e6:	4639      	mov	r1, r7
 80138e8:	f7ec fea0 	bl	800062c <__aeabi_dmul>
 80138ec:	f7ed f94e 	bl	8000b8c <__aeabi_d2iz>
 80138f0:	4680      	mov	r8, r0
 80138f2:	f7ec fe31 	bl	8000558 <__aeabi_i2d>
 80138f6:	4b97      	ldr	r3, [pc, #604]	; (8013b54 <__kernel_rem_pio2+0x694>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	f7ec fe97 	bl	800062c <__aeabi_dmul>
 80138fe:	460b      	mov	r3, r1
 8013900:	4602      	mov	r2, r0
 8013902:	4639      	mov	r1, r7
 8013904:	4630      	mov	r0, r6
 8013906:	f7ec fcd9 	bl	80002bc <__aeabi_dsub>
 801390a:	f7ed f93f 	bl	8000b8c <__aeabi_d2iz>
 801390e:	1c65      	adds	r5, r4, #1
 8013910:	ab0e      	add	r3, sp, #56	; 0x38
 8013912:	f10a 0a18 	add.w	sl, sl, #24
 8013916:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801391a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801391e:	e720      	b.n	8013762 <__kernel_rem_pio2+0x2a2>
 8013920:	4630      	mov	r0, r6
 8013922:	4639      	mov	r1, r7
 8013924:	f7ed f932 	bl	8000b8c <__aeabi_d2iz>
 8013928:	ab0e      	add	r3, sp, #56	; 0x38
 801392a:	4625      	mov	r5, r4
 801392c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013930:	e717      	b.n	8013762 <__kernel_rem_pio2+0x2a2>
 8013932:	ab0e      	add	r3, sp, #56	; 0x38
 8013934:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013938:	f7ec fe0e 	bl	8000558 <__aeabi_i2d>
 801393c:	4632      	mov	r2, r6
 801393e:	463b      	mov	r3, r7
 8013940:	f7ec fe74 	bl	800062c <__aeabi_dmul>
 8013944:	4b84      	ldr	r3, [pc, #528]	; (8013b58 <__kernel_rem_pio2+0x698>)
 8013946:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801394a:	2200      	movs	r2, #0
 801394c:	4630      	mov	r0, r6
 801394e:	4639      	mov	r1, r7
 8013950:	f7ec fe6c 	bl	800062c <__aeabi_dmul>
 8013954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013958:	4606      	mov	r6, r0
 801395a:	460f      	mov	r7, r1
 801395c:	e70f      	b.n	801377e <__kernel_rem_pio2+0x2be>
 801395e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013962:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013966:	f7ec fe61 	bl	800062c <__aeabi_dmul>
 801396a:	4602      	mov	r2, r0
 801396c:	460b      	mov	r3, r1
 801396e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013972:	f7ec fca5 	bl	80002c0 <__adddf3>
 8013976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801397a:	f108 0801 	add.w	r8, r8, #1
 801397e:	9b02      	ldr	r3, [sp, #8]
 8013980:	4598      	cmp	r8, r3
 8013982:	dc01      	bgt.n	8013988 <__kernel_rem_pio2+0x4c8>
 8013984:	45b8      	cmp	r8, r7
 8013986:	ddea      	ble.n	801395e <__kernel_rem_pio2+0x49e>
 8013988:	ed9d 7b06 	vldr	d7, [sp, #24]
 801398c:	ab4a      	add	r3, sp, #296	; 0x128
 801398e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013992:	ed87 7b00 	vstr	d7, [r7]
 8013996:	3e01      	subs	r6, #1
 8013998:	e6f8      	b.n	801378c <__kernel_rem_pio2+0x2cc>
 801399a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801399c:	2b02      	cmp	r3, #2
 801399e:	dc0b      	bgt.n	80139b8 <__kernel_rem_pio2+0x4f8>
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	dc35      	bgt.n	8013a10 <__kernel_rem_pio2+0x550>
 80139a4:	d059      	beq.n	8013a5a <__kernel_rem_pio2+0x59a>
 80139a6:	9b04      	ldr	r3, [sp, #16]
 80139a8:	f003 0007 	and.w	r0, r3, #7
 80139ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80139b0:	ecbd 8b02 	vpop	{d8}
 80139b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80139ba:	2b03      	cmp	r3, #3
 80139bc:	d1f3      	bne.n	80139a6 <__kernel_rem_pio2+0x4e6>
 80139be:	ab4a      	add	r3, sp, #296	; 0x128
 80139c0:	4423      	add	r3, r4
 80139c2:	9306      	str	r3, [sp, #24]
 80139c4:	461c      	mov	r4, r3
 80139c6:	469a      	mov	sl, r3
 80139c8:	9502      	str	r5, [sp, #8]
 80139ca:	9b02      	ldr	r3, [sp, #8]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f1aa 0a08 	sub.w	sl, sl, #8
 80139d2:	dc6b      	bgt.n	8013aac <__kernel_rem_pio2+0x5ec>
 80139d4:	46aa      	mov	sl, r5
 80139d6:	f1ba 0f01 	cmp.w	sl, #1
 80139da:	f1a4 0408 	sub.w	r4, r4, #8
 80139de:	f300 8085 	bgt.w	8013aec <__kernel_rem_pio2+0x62c>
 80139e2:	9c06      	ldr	r4, [sp, #24]
 80139e4:	2000      	movs	r0, #0
 80139e6:	3408      	adds	r4, #8
 80139e8:	2100      	movs	r1, #0
 80139ea:	2d01      	cmp	r5, #1
 80139ec:	f300 809d 	bgt.w	8013b2a <__kernel_rem_pio2+0x66a>
 80139f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80139f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80139f8:	f1bb 0f00 	cmp.w	fp, #0
 80139fc:	f040 809b 	bne.w	8013b36 <__kernel_rem_pio2+0x676>
 8013a00:	9b01      	ldr	r3, [sp, #4]
 8013a02:	e9c3 5600 	strd	r5, r6, [r3]
 8013a06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013a0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013a0e:	e7ca      	b.n	80139a6 <__kernel_rem_pio2+0x4e6>
 8013a10:	3408      	adds	r4, #8
 8013a12:	ab4a      	add	r3, sp, #296	; 0x128
 8013a14:	441c      	add	r4, r3
 8013a16:	462e      	mov	r6, r5
 8013a18:	2000      	movs	r0, #0
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	2e00      	cmp	r6, #0
 8013a1e:	da36      	bge.n	8013a8e <__kernel_rem_pio2+0x5ce>
 8013a20:	f1bb 0f00 	cmp.w	fp, #0
 8013a24:	d039      	beq.n	8013a9a <__kernel_rem_pio2+0x5da>
 8013a26:	4602      	mov	r2, r0
 8013a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a2c:	9c01      	ldr	r4, [sp, #4]
 8013a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8013a32:	4602      	mov	r2, r0
 8013a34:	460b      	mov	r3, r1
 8013a36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013a3a:	f7ec fc3f 	bl	80002bc <__aeabi_dsub>
 8013a3e:	ae4c      	add	r6, sp, #304	; 0x130
 8013a40:	2401      	movs	r4, #1
 8013a42:	42a5      	cmp	r5, r4
 8013a44:	da2c      	bge.n	8013aa0 <__kernel_rem_pio2+0x5e0>
 8013a46:	f1bb 0f00 	cmp.w	fp, #0
 8013a4a:	d002      	beq.n	8013a52 <__kernel_rem_pio2+0x592>
 8013a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a50:	4619      	mov	r1, r3
 8013a52:	9b01      	ldr	r3, [sp, #4]
 8013a54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a58:	e7a5      	b.n	80139a6 <__kernel_rem_pio2+0x4e6>
 8013a5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013a5e:	eb0d 0403 	add.w	r4, sp, r3
 8013a62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013a66:	2000      	movs	r0, #0
 8013a68:	2100      	movs	r1, #0
 8013a6a:	2d00      	cmp	r5, #0
 8013a6c:	da09      	bge.n	8013a82 <__kernel_rem_pio2+0x5c2>
 8013a6e:	f1bb 0f00 	cmp.w	fp, #0
 8013a72:	d002      	beq.n	8013a7a <__kernel_rem_pio2+0x5ba>
 8013a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a78:	4619      	mov	r1, r3
 8013a7a:	9b01      	ldr	r3, [sp, #4]
 8013a7c:	e9c3 0100 	strd	r0, r1, [r3]
 8013a80:	e791      	b.n	80139a6 <__kernel_rem_pio2+0x4e6>
 8013a82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a86:	f7ec fc1b 	bl	80002c0 <__adddf3>
 8013a8a:	3d01      	subs	r5, #1
 8013a8c:	e7ed      	b.n	8013a6a <__kernel_rem_pio2+0x5aa>
 8013a8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a92:	f7ec fc15 	bl	80002c0 <__adddf3>
 8013a96:	3e01      	subs	r6, #1
 8013a98:	e7c0      	b.n	8013a1c <__kernel_rem_pio2+0x55c>
 8013a9a:	4602      	mov	r2, r0
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	e7c5      	b.n	8013a2c <__kernel_rem_pio2+0x56c>
 8013aa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013aa4:	f7ec fc0c 	bl	80002c0 <__adddf3>
 8013aa8:	3401      	adds	r4, #1
 8013aaa:	e7ca      	b.n	8013a42 <__kernel_rem_pio2+0x582>
 8013aac:	e9da 8900 	ldrd	r8, r9, [sl]
 8013ab0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013ab4:	9b02      	ldr	r3, [sp, #8]
 8013ab6:	3b01      	subs	r3, #1
 8013ab8:	9302      	str	r3, [sp, #8]
 8013aba:	4632      	mov	r2, r6
 8013abc:	463b      	mov	r3, r7
 8013abe:	4640      	mov	r0, r8
 8013ac0:	4649      	mov	r1, r9
 8013ac2:	f7ec fbfd 	bl	80002c0 <__adddf3>
 8013ac6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013aca:	4602      	mov	r2, r0
 8013acc:	460b      	mov	r3, r1
 8013ace:	4640      	mov	r0, r8
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	f7ec fbf3 	bl	80002bc <__aeabi_dsub>
 8013ad6:	4632      	mov	r2, r6
 8013ad8:	463b      	mov	r3, r7
 8013ada:	f7ec fbf1 	bl	80002c0 <__adddf3>
 8013ade:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013ae2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013ae6:	ed8a 7b00 	vstr	d7, [sl]
 8013aea:	e76e      	b.n	80139ca <__kernel_rem_pio2+0x50a>
 8013aec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013af0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013af4:	4640      	mov	r0, r8
 8013af6:	4632      	mov	r2, r6
 8013af8:	463b      	mov	r3, r7
 8013afa:	4649      	mov	r1, r9
 8013afc:	f7ec fbe0 	bl	80002c0 <__adddf3>
 8013b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b04:	4602      	mov	r2, r0
 8013b06:	460b      	mov	r3, r1
 8013b08:	4640      	mov	r0, r8
 8013b0a:	4649      	mov	r1, r9
 8013b0c:	f7ec fbd6 	bl	80002bc <__aeabi_dsub>
 8013b10:	4632      	mov	r2, r6
 8013b12:	463b      	mov	r3, r7
 8013b14:	f7ec fbd4 	bl	80002c0 <__adddf3>
 8013b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b20:	ed84 7b00 	vstr	d7, [r4]
 8013b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b28:	e755      	b.n	80139d6 <__kernel_rem_pio2+0x516>
 8013b2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013b2e:	f7ec fbc7 	bl	80002c0 <__adddf3>
 8013b32:	3d01      	subs	r5, #1
 8013b34:	e759      	b.n	80139ea <__kernel_rem_pio2+0x52a>
 8013b36:	9b01      	ldr	r3, [sp, #4]
 8013b38:	9a01      	ldr	r2, [sp, #4]
 8013b3a:	601d      	str	r5, [r3, #0]
 8013b3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013b40:	605c      	str	r4, [r3, #4]
 8013b42:	609f      	str	r7, [r3, #8]
 8013b44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013b48:	60d3      	str	r3, [r2, #12]
 8013b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b4e:	6110      	str	r0, [r2, #16]
 8013b50:	6153      	str	r3, [r2, #20]
 8013b52:	e728      	b.n	80139a6 <__kernel_rem_pio2+0x4e6>
 8013b54:	41700000 	.word	0x41700000
 8013b58:	3e700000 	.word	0x3e700000
 8013b5c:	00000000 	.word	0x00000000

08013b60 <__kernel_sin>:
 8013b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	ed2d 8b04 	vpush	{d8-d9}
 8013b68:	eeb0 8a41 	vmov.f32	s16, s2
 8013b6c:	eef0 8a61 	vmov.f32	s17, s3
 8013b70:	ec55 4b10 	vmov	r4, r5, d0
 8013b74:	b083      	sub	sp, #12
 8013b76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013b7e:	9001      	str	r0, [sp, #4]
 8013b80:	da06      	bge.n	8013b90 <__kernel_sin+0x30>
 8013b82:	ee10 0a10 	vmov	r0, s0
 8013b86:	4629      	mov	r1, r5
 8013b88:	f7ed f800 	bl	8000b8c <__aeabi_d2iz>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d051      	beq.n	8013c34 <__kernel_sin+0xd4>
 8013b90:	4622      	mov	r2, r4
 8013b92:	462b      	mov	r3, r5
 8013b94:	4620      	mov	r0, r4
 8013b96:	4629      	mov	r1, r5
 8013b98:	f7ec fd48 	bl	800062c <__aeabi_dmul>
 8013b9c:	4682      	mov	sl, r0
 8013b9e:	468b      	mov	fp, r1
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	f7ec fd40 	bl	800062c <__aeabi_dmul>
 8013bac:	a341      	add	r3, pc, #260	; (adr r3, 8013cb4 <__kernel_sin+0x154>)
 8013bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb2:	4680      	mov	r8, r0
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	4650      	mov	r0, sl
 8013bb8:	4659      	mov	r1, fp
 8013bba:	f7ec fd37 	bl	800062c <__aeabi_dmul>
 8013bbe:	a33f      	add	r3, pc, #252	; (adr r3, 8013cbc <__kernel_sin+0x15c>)
 8013bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc4:	f7ec fb7a 	bl	80002bc <__aeabi_dsub>
 8013bc8:	4652      	mov	r2, sl
 8013bca:	465b      	mov	r3, fp
 8013bcc:	f7ec fd2e 	bl	800062c <__aeabi_dmul>
 8013bd0:	a33c      	add	r3, pc, #240	; (adr r3, 8013cc4 <__kernel_sin+0x164>)
 8013bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd6:	f7ec fb73 	bl	80002c0 <__adddf3>
 8013bda:	4652      	mov	r2, sl
 8013bdc:	465b      	mov	r3, fp
 8013bde:	f7ec fd25 	bl	800062c <__aeabi_dmul>
 8013be2:	a33a      	add	r3, pc, #232	; (adr r3, 8013ccc <__kernel_sin+0x16c>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	f7ec fb68 	bl	80002bc <__aeabi_dsub>
 8013bec:	4652      	mov	r2, sl
 8013bee:	465b      	mov	r3, fp
 8013bf0:	f7ec fd1c 	bl	800062c <__aeabi_dmul>
 8013bf4:	a337      	add	r3, pc, #220	; (adr r3, 8013cd4 <__kernel_sin+0x174>)
 8013bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfa:	f7ec fb61 	bl	80002c0 <__adddf3>
 8013bfe:	9b01      	ldr	r3, [sp, #4]
 8013c00:	4606      	mov	r6, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	b9eb      	cbnz	r3, 8013c42 <__kernel_sin+0xe2>
 8013c06:	4602      	mov	r2, r0
 8013c08:	460b      	mov	r3, r1
 8013c0a:	4650      	mov	r0, sl
 8013c0c:	4659      	mov	r1, fp
 8013c0e:	f7ec fd0d 	bl	800062c <__aeabi_dmul>
 8013c12:	a325      	add	r3, pc, #148	; (adr r3, 8013ca8 <__kernel_sin+0x148>)
 8013c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c18:	f7ec fb50 	bl	80002bc <__aeabi_dsub>
 8013c1c:	4642      	mov	r2, r8
 8013c1e:	464b      	mov	r3, r9
 8013c20:	f7ec fd04 	bl	800062c <__aeabi_dmul>
 8013c24:	4602      	mov	r2, r0
 8013c26:	460b      	mov	r3, r1
 8013c28:	4620      	mov	r0, r4
 8013c2a:	4629      	mov	r1, r5
 8013c2c:	f7ec fb48 	bl	80002c0 <__adddf3>
 8013c30:	4604      	mov	r4, r0
 8013c32:	460d      	mov	r5, r1
 8013c34:	ec45 4b10 	vmov	d0, r4, r5
 8013c38:	b003      	add	sp, #12
 8013c3a:	ecbd 8b04 	vpop	{d8-d9}
 8013c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c42:	4b1b      	ldr	r3, [pc, #108]	; (8013cb0 <__kernel_sin+0x150>)
 8013c44:	ec51 0b18 	vmov	r0, r1, d8
 8013c48:	2200      	movs	r2, #0
 8013c4a:	f7ec fcef 	bl	800062c <__aeabi_dmul>
 8013c4e:	4632      	mov	r2, r6
 8013c50:	ec41 0b19 	vmov	d9, r0, r1
 8013c54:	463b      	mov	r3, r7
 8013c56:	4640      	mov	r0, r8
 8013c58:	4649      	mov	r1, r9
 8013c5a:	f7ec fce7 	bl	800062c <__aeabi_dmul>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	460b      	mov	r3, r1
 8013c62:	ec51 0b19 	vmov	r0, r1, d9
 8013c66:	f7ec fb29 	bl	80002bc <__aeabi_dsub>
 8013c6a:	4652      	mov	r2, sl
 8013c6c:	465b      	mov	r3, fp
 8013c6e:	f7ec fcdd 	bl	800062c <__aeabi_dmul>
 8013c72:	ec53 2b18 	vmov	r2, r3, d8
 8013c76:	f7ec fb21 	bl	80002bc <__aeabi_dsub>
 8013c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8013ca8 <__kernel_sin+0x148>)
 8013c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c80:	4606      	mov	r6, r0
 8013c82:	460f      	mov	r7, r1
 8013c84:	4640      	mov	r0, r8
 8013c86:	4649      	mov	r1, r9
 8013c88:	f7ec fcd0 	bl	800062c <__aeabi_dmul>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	460b      	mov	r3, r1
 8013c90:	4630      	mov	r0, r6
 8013c92:	4639      	mov	r1, r7
 8013c94:	f7ec fb14 	bl	80002c0 <__adddf3>
 8013c98:	4602      	mov	r2, r0
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	f7ec fb0c 	bl	80002bc <__aeabi_dsub>
 8013ca4:	e7c4      	b.n	8013c30 <__kernel_sin+0xd0>
 8013ca6:	bf00      	nop
 8013ca8:	55555549 	.word	0x55555549
 8013cac:	3fc55555 	.word	0x3fc55555
 8013cb0:	3fe00000 	.word	0x3fe00000
 8013cb4:	5acfd57c 	.word	0x5acfd57c
 8013cb8:	3de5d93a 	.word	0x3de5d93a
 8013cbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8013cc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8013cc4:	57b1fe7d 	.word	0x57b1fe7d
 8013cc8:	3ec71de3 	.word	0x3ec71de3
 8013ccc:	19c161d5 	.word	0x19c161d5
 8013cd0:	3f2a01a0 	.word	0x3f2a01a0
 8013cd4:	1110f8a6 	.word	0x1110f8a6
 8013cd8:	3f811111 	.word	0x3f811111
 8013cdc:	00000000 	.word	0x00000000

08013ce0 <__kernel_tan>:
 8013ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	ed2d 8b06 	vpush	{d8-d10}
 8013ce8:	ec5b ab10 	vmov	sl, fp, d0
 8013cec:	4be0      	ldr	r3, [pc, #896]	; (8014070 <__kernel_tan+0x390>)
 8013cee:	b083      	sub	sp, #12
 8013cf0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8013cf4:	429f      	cmp	r7, r3
 8013cf6:	ec59 8b11 	vmov	r8, r9, d1
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	f8cd b000 	str.w	fp, [sp]
 8013d00:	dc61      	bgt.n	8013dc6 <__kernel_tan+0xe6>
 8013d02:	ee10 0a10 	vmov	r0, s0
 8013d06:	4659      	mov	r1, fp
 8013d08:	f7ec ff40 	bl	8000b8c <__aeabi_d2iz>
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	f040 8083 	bne.w	8013e1a <__kernel_tan+0x13a>
 8013d14:	1c73      	adds	r3, r6, #1
 8013d16:	4652      	mov	r2, sl
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	433b      	orrs	r3, r7
 8013d1c:	d112      	bne.n	8013d44 <__kernel_tan+0x64>
 8013d1e:	ec4b ab10 	vmov	d0, sl, fp
 8013d22:	f000 fa17 	bl	8014154 <fabs>
 8013d26:	49d3      	ldr	r1, [pc, #844]	; (8014074 <__kernel_tan+0x394>)
 8013d28:	ec53 2b10 	vmov	r2, r3, d0
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	f7ec fda7 	bl	8000880 <__aeabi_ddiv>
 8013d32:	4682      	mov	sl, r0
 8013d34:	468b      	mov	fp, r1
 8013d36:	ec4b ab10 	vmov	d0, sl, fp
 8013d3a:	b003      	add	sp, #12
 8013d3c:	ecbd 8b06 	vpop	{d8-d10}
 8013d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d44:	2e01      	cmp	r6, #1
 8013d46:	d0f6      	beq.n	8013d36 <__kernel_tan+0x56>
 8013d48:	4642      	mov	r2, r8
 8013d4a:	464b      	mov	r3, r9
 8013d4c:	4650      	mov	r0, sl
 8013d4e:	4659      	mov	r1, fp
 8013d50:	f7ec fab6 	bl	80002c0 <__adddf3>
 8013d54:	4602      	mov	r2, r0
 8013d56:	460b      	mov	r3, r1
 8013d58:	460f      	mov	r7, r1
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	49c6      	ldr	r1, [pc, #792]	; (8014078 <__kernel_tan+0x398>)
 8013d5e:	f7ec fd8f 	bl	8000880 <__aeabi_ddiv>
 8013d62:	e9cd 0100 	strd	r0, r1, [sp]
 8013d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d6a:	462e      	mov	r6, r5
 8013d6c:	4652      	mov	r2, sl
 8013d6e:	462c      	mov	r4, r5
 8013d70:	4630      	mov	r0, r6
 8013d72:	461d      	mov	r5, r3
 8013d74:	4639      	mov	r1, r7
 8013d76:	465b      	mov	r3, fp
 8013d78:	f7ec faa0 	bl	80002bc <__aeabi_dsub>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	460b      	mov	r3, r1
 8013d80:	4640      	mov	r0, r8
 8013d82:	4649      	mov	r1, r9
 8013d84:	f7ec fa9a 	bl	80002bc <__aeabi_dsub>
 8013d88:	4632      	mov	r2, r6
 8013d8a:	462b      	mov	r3, r5
 8013d8c:	f7ec fc4e 	bl	800062c <__aeabi_dmul>
 8013d90:	4632      	mov	r2, r6
 8013d92:	4680      	mov	r8, r0
 8013d94:	4689      	mov	r9, r1
 8013d96:	462b      	mov	r3, r5
 8013d98:	4630      	mov	r0, r6
 8013d9a:	4639      	mov	r1, r7
 8013d9c:	f7ec fc46 	bl	800062c <__aeabi_dmul>
 8013da0:	4bb4      	ldr	r3, [pc, #720]	; (8014074 <__kernel_tan+0x394>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	f7ec fa8c 	bl	80002c0 <__adddf3>
 8013da8:	4602      	mov	r2, r0
 8013daa:	460b      	mov	r3, r1
 8013dac:	4640      	mov	r0, r8
 8013dae:	4649      	mov	r1, r9
 8013db0:	f7ec fa86 	bl	80002c0 <__adddf3>
 8013db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013db8:	f7ec fc38 	bl	800062c <__aeabi_dmul>
 8013dbc:	4622      	mov	r2, r4
 8013dbe:	462b      	mov	r3, r5
 8013dc0:	f7ec fa7e 	bl	80002c0 <__adddf3>
 8013dc4:	e7b5      	b.n	8013d32 <__kernel_tan+0x52>
 8013dc6:	4bad      	ldr	r3, [pc, #692]	; (801407c <__kernel_tan+0x39c>)
 8013dc8:	429f      	cmp	r7, r3
 8013dca:	dd26      	ble.n	8013e1a <__kernel_tan+0x13a>
 8013dcc:	9b00      	ldr	r3, [sp, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	da09      	bge.n	8013de6 <__kernel_tan+0x106>
 8013dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013dd6:	469b      	mov	fp, r3
 8013dd8:	ee10 aa10 	vmov	sl, s0
 8013ddc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013de0:	ee11 8a10 	vmov	r8, s2
 8013de4:	4699      	mov	r9, r3
 8013de6:	4652      	mov	r2, sl
 8013de8:	465b      	mov	r3, fp
 8013dea:	a183      	add	r1, pc, #524	; (adr r1, 8013ff8 <__kernel_tan+0x318>)
 8013dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df0:	f7ec fa64 	bl	80002bc <__aeabi_dsub>
 8013df4:	4642      	mov	r2, r8
 8013df6:	464b      	mov	r3, r9
 8013df8:	4604      	mov	r4, r0
 8013dfa:	460d      	mov	r5, r1
 8013dfc:	a180      	add	r1, pc, #512	; (adr r1, 8014000 <__kernel_tan+0x320>)
 8013dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e02:	f7ec fa5b 	bl	80002bc <__aeabi_dsub>
 8013e06:	4622      	mov	r2, r4
 8013e08:	462b      	mov	r3, r5
 8013e0a:	f7ec fa59 	bl	80002c0 <__adddf3>
 8013e0e:	f04f 0800 	mov.w	r8, #0
 8013e12:	4682      	mov	sl, r0
 8013e14:	468b      	mov	fp, r1
 8013e16:	f04f 0900 	mov.w	r9, #0
 8013e1a:	4652      	mov	r2, sl
 8013e1c:	465b      	mov	r3, fp
 8013e1e:	4650      	mov	r0, sl
 8013e20:	4659      	mov	r1, fp
 8013e22:	f7ec fc03 	bl	800062c <__aeabi_dmul>
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	ec43 2b18 	vmov	d8, r2, r3
 8013e2e:	f7ec fbfd 	bl	800062c <__aeabi_dmul>
 8013e32:	ec53 2b18 	vmov	r2, r3, d8
 8013e36:	4604      	mov	r4, r0
 8013e38:	460d      	mov	r5, r1
 8013e3a:	4650      	mov	r0, sl
 8013e3c:	4659      	mov	r1, fp
 8013e3e:	f7ec fbf5 	bl	800062c <__aeabi_dmul>
 8013e42:	a371      	add	r3, pc, #452	; (adr r3, 8014008 <__kernel_tan+0x328>)
 8013e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e48:	ec41 0b19 	vmov	d9, r0, r1
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	4629      	mov	r1, r5
 8013e50:	f7ec fbec 	bl	800062c <__aeabi_dmul>
 8013e54:	a36e      	add	r3, pc, #440	; (adr r3, 8014010 <__kernel_tan+0x330>)
 8013e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5a:	f7ec fa31 	bl	80002c0 <__adddf3>
 8013e5e:	4622      	mov	r2, r4
 8013e60:	462b      	mov	r3, r5
 8013e62:	f7ec fbe3 	bl	800062c <__aeabi_dmul>
 8013e66:	a36c      	add	r3, pc, #432	; (adr r3, 8014018 <__kernel_tan+0x338>)
 8013e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6c:	f7ec fa28 	bl	80002c0 <__adddf3>
 8013e70:	4622      	mov	r2, r4
 8013e72:	462b      	mov	r3, r5
 8013e74:	f7ec fbda 	bl	800062c <__aeabi_dmul>
 8013e78:	a369      	add	r3, pc, #420	; (adr r3, 8014020 <__kernel_tan+0x340>)
 8013e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7e:	f7ec fa1f 	bl	80002c0 <__adddf3>
 8013e82:	4622      	mov	r2, r4
 8013e84:	462b      	mov	r3, r5
 8013e86:	f7ec fbd1 	bl	800062c <__aeabi_dmul>
 8013e8a:	a367      	add	r3, pc, #412	; (adr r3, 8014028 <__kernel_tan+0x348>)
 8013e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e90:	f7ec fa16 	bl	80002c0 <__adddf3>
 8013e94:	4622      	mov	r2, r4
 8013e96:	462b      	mov	r3, r5
 8013e98:	f7ec fbc8 	bl	800062c <__aeabi_dmul>
 8013e9c:	a364      	add	r3, pc, #400	; (adr r3, 8014030 <__kernel_tan+0x350>)
 8013e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea2:	f7ec fa0d 	bl	80002c0 <__adddf3>
 8013ea6:	ec53 2b18 	vmov	r2, r3, d8
 8013eaa:	f7ec fbbf 	bl	800062c <__aeabi_dmul>
 8013eae:	a362      	add	r3, pc, #392	; (adr r3, 8014038 <__kernel_tan+0x358>)
 8013eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb4:	ec41 0b1a 	vmov	d10, r0, r1
 8013eb8:	4620      	mov	r0, r4
 8013eba:	4629      	mov	r1, r5
 8013ebc:	f7ec fbb6 	bl	800062c <__aeabi_dmul>
 8013ec0:	a35f      	add	r3, pc, #380	; (adr r3, 8014040 <__kernel_tan+0x360>)
 8013ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec6:	f7ec f9fb 	bl	80002c0 <__adddf3>
 8013eca:	4622      	mov	r2, r4
 8013ecc:	462b      	mov	r3, r5
 8013ece:	f7ec fbad 	bl	800062c <__aeabi_dmul>
 8013ed2:	a35d      	add	r3, pc, #372	; (adr r3, 8014048 <__kernel_tan+0x368>)
 8013ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed8:	f7ec f9f2 	bl	80002c0 <__adddf3>
 8013edc:	4622      	mov	r2, r4
 8013ede:	462b      	mov	r3, r5
 8013ee0:	f7ec fba4 	bl	800062c <__aeabi_dmul>
 8013ee4:	a35a      	add	r3, pc, #360	; (adr r3, 8014050 <__kernel_tan+0x370>)
 8013ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eea:	f7ec f9e9 	bl	80002c0 <__adddf3>
 8013eee:	4622      	mov	r2, r4
 8013ef0:	462b      	mov	r3, r5
 8013ef2:	f7ec fb9b 	bl	800062c <__aeabi_dmul>
 8013ef6:	a358      	add	r3, pc, #352	; (adr r3, 8014058 <__kernel_tan+0x378>)
 8013ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efc:	f7ec f9e0 	bl	80002c0 <__adddf3>
 8013f00:	4622      	mov	r2, r4
 8013f02:	462b      	mov	r3, r5
 8013f04:	f7ec fb92 	bl	800062c <__aeabi_dmul>
 8013f08:	a355      	add	r3, pc, #340	; (adr r3, 8014060 <__kernel_tan+0x380>)
 8013f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0e:	f7ec f9d7 	bl	80002c0 <__adddf3>
 8013f12:	4602      	mov	r2, r0
 8013f14:	460b      	mov	r3, r1
 8013f16:	ec51 0b1a 	vmov	r0, r1, d10
 8013f1a:	f7ec f9d1 	bl	80002c0 <__adddf3>
 8013f1e:	ec53 2b19 	vmov	r2, r3, d9
 8013f22:	f7ec fb83 	bl	800062c <__aeabi_dmul>
 8013f26:	4642      	mov	r2, r8
 8013f28:	464b      	mov	r3, r9
 8013f2a:	f7ec f9c9 	bl	80002c0 <__adddf3>
 8013f2e:	ec53 2b18 	vmov	r2, r3, d8
 8013f32:	f7ec fb7b 	bl	800062c <__aeabi_dmul>
 8013f36:	4642      	mov	r2, r8
 8013f38:	464b      	mov	r3, r9
 8013f3a:	f7ec f9c1 	bl	80002c0 <__adddf3>
 8013f3e:	a34a      	add	r3, pc, #296	; (adr r3, 8014068 <__kernel_tan+0x388>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	4604      	mov	r4, r0
 8013f46:	460d      	mov	r5, r1
 8013f48:	ec51 0b19 	vmov	r0, r1, d9
 8013f4c:	f7ec fb6e 	bl	800062c <__aeabi_dmul>
 8013f50:	4622      	mov	r2, r4
 8013f52:	462b      	mov	r3, r5
 8013f54:	f7ec f9b4 	bl	80002c0 <__adddf3>
 8013f58:	460b      	mov	r3, r1
 8013f5a:	ec41 0b18 	vmov	d8, r0, r1
 8013f5e:	4602      	mov	r2, r0
 8013f60:	4659      	mov	r1, fp
 8013f62:	4650      	mov	r0, sl
 8013f64:	f7ec f9ac 	bl	80002c0 <__adddf3>
 8013f68:	4b44      	ldr	r3, [pc, #272]	; (801407c <__kernel_tan+0x39c>)
 8013f6a:	429f      	cmp	r7, r3
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	460d      	mov	r5, r1
 8013f70:	f340 8086 	ble.w	8014080 <__kernel_tan+0x3a0>
 8013f74:	4630      	mov	r0, r6
 8013f76:	f7ec faef 	bl	8000558 <__aeabi_i2d>
 8013f7a:	4622      	mov	r2, r4
 8013f7c:	4680      	mov	r8, r0
 8013f7e:	4689      	mov	r9, r1
 8013f80:	462b      	mov	r3, r5
 8013f82:	4620      	mov	r0, r4
 8013f84:	4629      	mov	r1, r5
 8013f86:	f7ec fb51 	bl	800062c <__aeabi_dmul>
 8013f8a:	4642      	mov	r2, r8
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	460f      	mov	r7, r1
 8013f90:	464b      	mov	r3, r9
 8013f92:	4620      	mov	r0, r4
 8013f94:	4629      	mov	r1, r5
 8013f96:	f7ec f993 	bl	80002c0 <__adddf3>
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	4630      	mov	r0, r6
 8013fa0:	4639      	mov	r1, r7
 8013fa2:	f7ec fc6d 	bl	8000880 <__aeabi_ddiv>
 8013fa6:	ec53 2b18 	vmov	r2, r3, d8
 8013faa:	f7ec f987 	bl	80002bc <__aeabi_dsub>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	4659      	mov	r1, fp
 8013fb6:	f7ec f981 	bl	80002bc <__aeabi_dsub>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	f7ec f97f 	bl	80002c0 <__adddf3>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	4640      	mov	r0, r8
 8013fc8:	4649      	mov	r1, r9
 8013fca:	f7ec f977 	bl	80002bc <__aeabi_dsub>
 8013fce:	9b00      	ldr	r3, [sp, #0]
 8013fd0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8013fd4:	f00a 0a02 	and.w	sl, sl, #2
 8013fd8:	4604      	mov	r4, r0
 8013fda:	f1ca 0001 	rsb	r0, sl, #1
 8013fde:	460d      	mov	r5, r1
 8013fe0:	f7ec faba 	bl	8000558 <__aeabi_i2d>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	4620      	mov	r0, r4
 8013fea:	4629      	mov	r1, r5
 8013fec:	f7ec fb1e 	bl	800062c <__aeabi_dmul>
 8013ff0:	e69f      	b.n	8013d32 <__kernel_tan+0x52>
 8013ff2:	bf00      	nop
 8013ff4:	f3af 8000 	nop.w
 8013ff8:	54442d18 	.word	0x54442d18
 8013ffc:	3fe921fb 	.word	0x3fe921fb
 8014000:	33145c07 	.word	0x33145c07
 8014004:	3c81a626 	.word	0x3c81a626
 8014008:	74bf7ad4 	.word	0x74bf7ad4
 801400c:	3efb2a70 	.word	0x3efb2a70
 8014010:	32f0a7e9 	.word	0x32f0a7e9
 8014014:	3f12b80f 	.word	0x3f12b80f
 8014018:	1a8d1068 	.word	0x1a8d1068
 801401c:	3f3026f7 	.word	0x3f3026f7
 8014020:	fee08315 	.word	0xfee08315
 8014024:	3f57dbc8 	.word	0x3f57dbc8
 8014028:	e96e8493 	.word	0xe96e8493
 801402c:	3f8226e3 	.word	0x3f8226e3
 8014030:	1bb341fe 	.word	0x1bb341fe
 8014034:	3faba1ba 	.word	0x3faba1ba
 8014038:	db605373 	.word	0xdb605373
 801403c:	bef375cb 	.word	0xbef375cb
 8014040:	a03792a6 	.word	0xa03792a6
 8014044:	3f147e88 	.word	0x3f147e88
 8014048:	f2f26501 	.word	0xf2f26501
 801404c:	3f4344d8 	.word	0x3f4344d8
 8014050:	c9560328 	.word	0xc9560328
 8014054:	3f6d6d22 	.word	0x3f6d6d22
 8014058:	8406d637 	.word	0x8406d637
 801405c:	3f9664f4 	.word	0x3f9664f4
 8014060:	1110fe7a 	.word	0x1110fe7a
 8014064:	3fc11111 	.word	0x3fc11111
 8014068:	55555563 	.word	0x55555563
 801406c:	3fd55555 	.word	0x3fd55555
 8014070:	3e2fffff 	.word	0x3e2fffff
 8014074:	3ff00000 	.word	0x3ff00000
 8014078:	bff00000 	.word	0xbff00000
 801407c:	3fe59427 	.word	0x3fe59427
 8014080:	2e01      	cmp	r6, #1
 8014082:	d02f      	beq.n	80140e4 <__kernel_tan+0x404>
 8014084:	460f      	mov	r7, r1
 8014086:	4602      	mov	r2, r0
 8014088:	460b      	mov	r3, r1
 801408a:	4689      	mov	r9, r1
 801408c:	2000      	movs	r0, #0
 801408e:	4917      	ldr	r1, [pc, #92]	; (80140ec <__kernel_tan+0x40c>)
 8014090:	f7ec fbf6 	bl	8000880 <__aeabi_ddiv>
 8014094:	2600      	movs	r6, #0
 8014096:	e9cd 0100 	strd	r0, r1, [sp]
 801409a:	4652      	mov	r2, sl
 801409c:	465b      	mov	r3, fp
 801409e:	4630      	mov	r0, r6
 80140a0:	4639      	mov	r1, r7
 80140a2:	f7ec f90b 	bl	80002bc <__aeabi_dsub>
 80140a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80140aa:	4602      	mov	r2, r0
 80140ac:	460b      	mov	r3, r1
 80140ae:	ec51 0b18 	vmov	r0, r1, d8
 80140b2:	f7ec f903 	bl	80002bc <__aeabi_dsub>
 80140b6:	4632      	mov	r2, r6
 80140b8:	462b      	mov	r3, r5
 80140ba:	f7ec fab7 	bl	800062c <__aeabi_dmul>
 80140be:	46b0      	mov	r8, r6
 80140c0:	460f      	mov	r7, r1
 80140c2:	4642      	mov	r2, r8
 80140c4:	462b      	mov	r3, r5
 80140c6:	4634      	mov	r4, r6
 80140c8:	4649      	mov	r1, r9
 80140ca:	4606      	mov	r6, r0
 80140cc:	4640      	mov	r0, r8
 80140ce:	f7ec faad 	bl	800062c <__aeabi_dmul>
 80140d2:	4b07      	ldr	r3, [pc, #28]	; (80140f0 <__kernel_tan+0x410>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	f7ec f8f3 	bl	80002c0 <__adddf3>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	4630      	mov	r0, r6
 80140e0:	4639      	mov	r1, r7
 80140e2:	e665      	b.n	8013db0 <__kernel_tan+0xd0>
 80140e4:	4682      	mov	sl, r0
 80140e6:	468b      	mov	fp, r1
 80140e8:	e625      	b.n	8013d36 <__kernel_tan+0x56>
 80140ea:	bf00      	nop
 80140ec:	bff00000 	.word	0xbff00000
 80140f0:	3ff00000 	.word	0x3ff00000

080140f4 <with_errno>:
 80140f4:	b570      	push	{r4, r5, r6, lr}
 80140f6:	4604      	mov	r4, r0
 80140f8:	460d      	mov	r5, r1
 80140fa:	4616      	mov	r6, r2
 80140fc:	f7fd fcc6 	bl	8011a8c <__errno>
 8014100:	4629      	mov	r1, r5
 8014102:	6006      	str	r6, [r0, #0]
 8014104:	4620      	mov	r0, r4
 8014106:	bd70      	pop	{r4, r5, r6, pc}

08014108 <xflow>:
 8014108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801410a:	4614      	mov	r4, r2
 801410c:	461d      	mov	r5, r3
 801410e:	b108      	cbz	r0, 8014114 <xflow+0xc>
 8014110:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014114:	e9cd 2300 	strd	r2, r3, [sp]
 8014118:	e9dd 2300 	ldrd	r2, r3, [sp]
 801411c:	4620      	mov	r0, r4
 801411e:	4629      	mov	r1, r5
 8014120:	f7ec fa84 	bl	800062c <__aeabi_dmul>
 8014124:	2222      	movs	r2, #34	; 0x22
 8014126:	b003      	add	sp, #12
 8014128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801412c:	f7ff bfe2 	b.w	80140f4 <with_errno>

08014130 <__math_uflow>:
 8014130:	b508      	push	{r3, lr}
 8014132:	2200      	movs	r2, #0
 8014134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014138:	f7ff ffe6 	bl	8014108 <xflow>
 801413c:	ec41 0b10 	vmov	d0, r0, r1
 8014140:	bd08      	pop	{r3, pc}

08014142 <__math_oflow>:
 8014142:	b508      	push	{r3, lr}
 8014144:	2200      	movs	r2, #0
 8014146:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801414a:	f7ff ffdd 	bl	8014108 <xflow>
 801414e:	ec41 0b10 	vmov	d0, r0, r1
 8014152:	bd08      	pop	{r3, pc}

08014154 <fabs>:
 8014154:	ec51 0b10 	vmov	r0, r1, d0
 8014158:	ee10 2a10 	vmov	r2, s0
 801415c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014160:	ec43 2b10 	vmov	d0, r2, r3
 8014164:	4770      	bx	lr

08014166 <finite>:
 8014166:	b082      	sub	sp, #8
 8014168:	ed8d 0b00 	vstr	d0, [sp]
 801416c:	9801      	ldr	r0, [sp, #4]
 801416e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014172:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014176:	0fc0      	lsrs	r0, r0, #31
 8014178:	b002      	add	sp, #8
 801417a:	4770      	bx	lr
 801417c:	0000      	movs	r0, r0
	...

08014180 <floor>:
 8014180:	ec51 0b10 	vmov	r0, r1, d0
 8014184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014188:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801418c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014190:	2e13      	cmp	r6, #19
 8014192:	ee10 5a10 	vmov	r5, s0
 8014196:	ee10 8a10 	vmov	r8, s0
 801419a:	460c      	mov	r4, r1
 801419c:	dc32      	bgt.n	8014204 <floor+0x84>
 801419e:	2e00      	cmp	r6, #0
 80141a0:	da14      	bge.n	80141cc <floor+0x4c>
 80141a2:	a333      	add	r3, pc, #204	; (adr r3, 8014270 <floor+0xf0>)
 80141a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a8:	f7ec f88a 	bl	80002c0 <__adddf3>
 80141ac:	2200      	movs	r2, #0
 80141ae:	2300      	movs	r3, #0
 80141b0:	f7ec fccc 	bl	8000b4c <__aeabi_dcmpgt>
 80141b4:	b138      	cbz	r0, 80141c6 <floor+0x46>
 80141b6:	2c00      	cmp	r4, #0
 80141b8:	da57      	bge.n	801426a <floor+0xea>
 80141ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80141be:	431d      	orrs	r5, r3
 80141c0:	d001      	beq.n	80141c6 <floor+0x46>
 80141c2:	4c2d      	ldr	r4, [pc, #180]	; (8014278 <floor+0xf8>)
 80141c4:	2500      	movs	r5, #0
 80141c6:	4621      	mov	r1, r4
 80141c8:	4628      	mov	r0, r5
 80141ca:	e025      	b.n	8014218 <floor+0x98>
 80141cc:	4f2b      	ldr	r7, [pc, #172]	; (801427c <floor+0xfc>)
 80141ce:	4137      	asrs	r7, r6
 80141d0:	ea01 0307 	and.w	r3, r1, r7
 80141d4:	4303      	orrs	r3, r0
 80141d6:	d01f      	beq.n	8014218 <floor+0x98>
 80141d8:	a325      	add	r3, pc, #148	; (adr r3, 8014270 <floor+0xf0>)
 80141da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141de:	f7ec f86f 	bl	80002c0 <__adddf3>
 80141e2:	2200      	movs	r2, #0
 80141e4:	2300      	movs	r3, #0
 80141e6:	f7ec fcb1 	bl	8000b4c <__aeabi_dcmpgt>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d0eb      	beq.n	80141c6 <floor+0x46>
 80141ee:	2c00      	cmp	r4, #0
 80141f0:	bfbe      	ittt	lt
 80141f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80141f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80141fa:	19a4      	addlt	r4, r4, r6
 80141fc:	ea24 0407 	bic.w	r4, r4, r7
 8014200:	2500      	movs	r5, #0
 8014202:	e7e0      	b.n	80141c6 <floor+0x46>
 8014204:	2e33      	cmp	r6, #51	; 0x33
 8014206:	dd0b      	ble.n	8014220 <floor+0xa0>
 8014208:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801420c:	d104      	bne.n	8014218 <floor+0x98>
 801420e:	ee10 2a10 	vmov	r2, s0
 8014212:	460b      	mov	r3, r1
 8014214:	f7ec f854 	bl	80002c0 <__adddf3>
 8014218:	ec41 0b10 	vmov	d0, r0, r1
 801421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014220:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014224:	f04f 33ff 	mov.w	r3, #4294967295
 8014228:	fa23 f707 	lsr.w	r7, r3, r7
 801422c:	4207      	tst	r7, r0
 801422e:	d0f3      	beq.n	8014218 <floor+0x98>
 8014230:	a30f      	add	r3, pc, #60	; (adr r3, 8014270 <floor+0xf0>)
 8014232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014236:	f7ec f843 	bl	80002c0 <__adddf3>
 801423a:	2200      	movs	r2, #0
 801423c:	2300      	movs	r3, #0
 801423e:	f7ec fc85 	bl	8000b4c <__aeabi_dcmpgt>
 8014242:	2800      	cmp	r0, #0
 8014244:	d0bf      	beq.n	80141c6 <floor+0x46>
 8014246:	2c00      	cmp	r4, #0
 8014248:	da02      	bge.n	8014250 <floor+0xd0>
 801424a:	2e14      	cmp	r6, #20
 801424c:	d103      	bne.n	8014256 <floor+0xd6>
 801424e:	3401      	adds	r4, #1
 8014250:	ea25 0507 	bic.w	r5, r5, r7
 8014254:	e7b7      	b.n	80141c6 <floor+0x46>
 8014256:	2301      	movs	r3, #1
 8014258:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801425c:	fa03 f606 	lsl.w	r6, r3, r6
 8014260:	4435      	add	r5, r6
 8014262:	4545      	cmp	r5, r8
 8014264:	bf38      	it	cc
 8014266:	18e4      	addcc	r4, r4, r3
 8014268:	e7f2      	b.n	8014250 <floor+0xd0>
 801426a:	2500      	movs	r5, #0
 801426c:	462c      	mov	r4, r5
 801426e:	e7aa      	b.n	80141c6 <floor+0x46>
 8014270:	8800759c 	.word	0x8800759c
 8014274:	7e37e43c 	.word	0x7e37e43c
 8014278:	bff00000 	.word	0xbff00000
 801427c:	000fffff 	.word	0x000fffff

08014280 <nan>:
 8014280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014288 <nan+0x8>
 8014284:	4770      	bx	lr
 8014286:	bf00      	nop
 8014288:	00000000 	.word	0x00000000
 801428c:	7ff80000 	.word	0x7ff80000

08014290 <scalbn>:
 8014290:	b570      	push	{r4, r5, r6, lr}
 8014292:	ec55 4b10 	vmov	r4, r5, d0
 8014296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801429a:	4606      	mov	r6, r0
 801429c:	462b      	mov	r3, r5
 801429e:	b99a      	cbnz	r2, 80142c8 <scalbn+0x38>
 80142a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80142a4:	4323      	orrs	r3, r4
 80142a6:	d036      	beq.n	8014316 <scalbn+0x86>
 80142a8:	4b39      	ldr	r3, [pc, #228]	; (8014390 <scalbn+0x100>)
 80142aa:	4629      	mov	r1, r5
 80142ac:	ee10 0a10 	vmov	r0, s0
 80142b0:	2200      	movs	r2, #0
 80142b2:	f7ec f9bb 	bl	800062c <__aeabi_dmul>
 80142b6:	4b37      	ldr	r3, [pc, #220]	; (8014394 <scalbn+0x104>)
 80142b8:	429e      	cmp	r6, r3
 80142ba:	4604      	mov	r4, r0
 80142bc:	460d      	mov	r5, r1
 80142be:	da10      	bge.n	80142e2 <scalbn+0x52>
 80142c0:	a32b      	add	r3, pc, #172	; (adr r3, 8014370 <scalbn+0xe0>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	e03a      	b.n	801433e <scalbn+0xae>
 80142c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80142cc:	428a      	cmp	r2, r1
 80142ce:	d10c      	bne.n	80142ea <scalbn+0x5a>
 80142d0:	ee10 2a10 	vmov	r2, s0
 80142d4:	4620      	mov	r0, r4
 80142d6:	4629      	mov	r1, r5
 80142d8:	f7eb fff2 	bl	80002c0 <__adddf3>
 80142dc:	4604      	mov	r4, r0
 80142de:	460d      	mov	r5, r1
 80142e0:	e019      	b.n	8014316 <scalbn+0x86>
 80142e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80142e6:	460b      	mov	r3, r1
 80142e8:	3a36      	subs	r2, #54	; 0x36
 80142ea:	4432      	add	r2, r6
 80142ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80142f0:	428a      	cmp	r2, r1
 80142f2:	dd08      	ble.n	8014306 <scalbn+0x76>
 80142f4:	2d00      	cmp	r5, #0
 80142f6:	a120      	add	r1, pc, #128	; (adr r1, 8014378 <scalbn+0xe8>)
 80142f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142fc:	da1c      	bge.n	8014338 <scalbn+0xa8>
 80142fe:	a120      	add	r1, pc, #128	; (adr r1, 8014380 <scalbn+0xf0>)
 8014300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014304:	e018      	b.n	8014338 <scalbn+0xa8>
 8014306:	2a00      	cmp	r2, #0
 8014308:	dd08      	ble.n	801431c <scalbn+0x8c>
 801430a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801430e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014312:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014316:	ec45 4b10 	vmov	d0, r4, r5
 801431a:	bd70      	pop	{r4, r5, r6, pc}
 801431c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014320:	da19      	bge.n	8014356 <scalbn+0xc6>
 8014322:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014326:	429e      	cmp	r6, r3
 8014328:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801432c:	dd0a      	ble.n	8014344 <scalbn+0xb4>
 801432e:	a112      	add	r1, pc, #72	; (adr r1, 8014378 <scalbn+0xe8>)
 8014330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d1e2      	bne.n	80142fe <scalbn+0x6e>
 8014338:	a30f      	add	r3, pc, #60	; (adr r3, 8014378 <scalbn+0xe8>)
 801433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433e:	f7ec f975 	bl	800062c <__aeabi_dmul>
 8014342:	e7cb      	b.n	80142dc <scalbn+0x4c>
 8014344:	a10a      	add	r1, pc, #40	; (adr r1, 8014370 <scalbn+0xe0>)
 8014346:	e9d1 0100 	ldrd	r0, r1, [r1]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d0b8      	beq.n	80142c0 <scalbn+0x30>
 801434e:	a10e      	add	r1, pc, #56	; (adr r1, 8014388 <scalbn+0xf8>)
 8014350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014354:	e7b4      	b.n	80142c0 <scalbn+0x30>
 8014356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801435a:	3236      	adds	r2, #54	; 0x36
 801435c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014360:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014364:	4620      	mov	r0, r4
 8014366:	4b0c      	ldr	r3, [pc, #48]	; (8014398 <scalbn+0x108>)
 8014368:	2200      	movs	r2, #0
 801436a:	e7e8      	b.n	801433e <scalbn+0xae>
 801436c:	f3af 8000 	nop.w
 8014370:	c2f8f359 	.word	0xc2f8f359
 8014374:	01a56e1f 	.word	0x01a56e1f
 8014378:	8800759c 	.word	0x8800759c
 801437c:	7e37e43c 	.word	0x7e37e43c
 8014380:	8800759c 	.word	0x8800759c
 8014384:	fe37e43c 	.word	0xfe37e43c
 8014388:	c2f8f359 	.word	0xc2f8f359
 801438c:	81a56e1f 	.word	0x81a56e1f
 8014390:	43500000 	.word	0x43500000
 8014394:	ffff3cb0 	.word	0xffff3cb0
 8014398:	3c900000 	.word	0x3c900000

0801439c <_close>:
 801439c:	4b02      	ldr	r3, [pc, #8]	; (80143a8 <_close+0xc>)
 801439e:	2258      	movs	r2, #88	; 0x58
 80143a0:	601a      	str	r2, [r3, #0]
 80143a2:	f04f 30ff 	mov.w	r0, #4294967295
 80143a6:	4770      	bx	lr
 80143a8:	20003a40 	.word	0x20003a40

080143ac <_fstat>:
 80143ac:	4b02      	ldr	r3, [pc, #8]	; (80143b8 <_fstat+0xc>)
 80143ae:	2258      	movs	r2, #88	; 0x58
 80143b0:	601a      	str	r2, [r3, #0]
 80143b2:	f04f 30ff 	mov.w	r0, #4294967295
 80143b6:	4770      	bx	lr
 80143b8:	20003a40 	.word	0x20003a40

080143bc <_getpid>:
 80143bc:	4b02      	ldr	r3, [pc, #8]	; (80143c8 <_getpid+0xc>)
 80143be:	2258      	movs	r2, #88	; 0x58
 80143c0:	601a      	str	r2, [r3, #0]
 80143c2:	f04f 30ff 	mov.w	r0, #4294967295
 80143c6:	4770      	bx	lr
 80143c8:	20003a40 	.word	0x20003a40

080143cc <_isatty>:
 80143cc:	4b02      	ldr	r3, [pc, #8]	; (80143d8 <_isatty+0xc>)
 80143ce:	2258      	movs	r2, #88	; 0x58
 80143d0:	601a      	str	r2, [r3, #0]
 80143d2:	2000      	movs	r0, #0
 80143d4:	4770      	bx	lr
 80143d6:	bf00      	nop
 80143d8:	20003a40 	.word	0x20003a40

080143dc <_kill>:
 80143dc:	4b02      	ldr	r3, [pc, #8]	; (80143e8 <_kill+0xc>)
 80143de:	2258      	movs	r2, #88	; 0x58
 80143e0:	601a      	str	r2, [r3, #0]
 80143e2:	f04f 30ff 	mov.w	r0, #4294967295
 80143e6:	4770      	bx	lr
 80143e8:	20003a40 	.word	0x20003a40

080143ec <_lseek>:
 80143ec:	4b02      	ldr	r3, [pc, #8]	; (80143f8 <_lseek+0xc>)
 80143ee:	2258      	movs	r2, #88	; 0x58
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	f04f 30ff 	mov.w	r0, #4294967295
 80143f6:	4770      	bx	lr
 80143f8:	20003a40 	.word	0x20003a40

080143fc <_read>:
 80143fc:	4b02      	ldr	r3, [pc, #8]	; (8014408 <_read+0xc>)
 80143fe:	2258      	movs	r2, #88	; 0x58
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	f04f 30ff 	mov.w	r0, #4294967295
 8014406:	4770      	bx	lr
 8014408:	20003a40 	.word	0x20003a40

0801440c <_sbrk>:
 801440c:	4a04      	ldr	r2, [pc, #16]	; (8014420 <_sbrk+0x14>)
 801440e:	6811      	ldr	r1, [r2, #0]
 8014410:	4603      	mov	r3, r0
 8014412:	b909      	cbnz	r1, 8014418 <_sbrk+0xc>
 8014414:	4903      	ldr	r1, [pc, #12]	; (8014424 <_sbrk+0x18>)
 8014416:	6011      	str	r1, [r2, #0]
 8014418:	6810      	ldr	r0, [r2, #0]
 801441a:	4403      	add	r3, r0
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	4770      	bx	lr
 8014420:	20003a48 	.word	0x20003a48
 8014424:	20003a50 	.word	0x20003a50

08014428 <_write>:
 8014428:	4b02      	ldr	r3, [pc, #8]	; (8014434 <_write+0xc>)
 801442a:	2258      	movs	r2, #88	; 0x58
 801442c:	601a      	str	r2, [r3, #0]
 801442e:	f04f 30ff 	mov.w	r0, #4294967295
 8014432:	4770      	bx	lr
 8014434:	20003a40 	.word	0x20003a40

08014438 <_exit>:
 8014438:	e7fe      	b.n	8014438 <_exit>
	...

0801443c <_init>:
 801443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801443e:	bf00      	nop
 8014440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014442:	bc08      	pop	{r3}
 8014444:	469e      	mov	lr, r3
 8014446:	4770      	bx	lr

08014448 <_fini>:
 8014448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801444a:	bf00      	nop
 801444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801444e:	bc08      	pop	{r3}
 8014450:	469e      	mov	lr, r3
 8014452:	4770      	bx	lr
