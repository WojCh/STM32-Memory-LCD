
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f778  08019aa0  08019aa0  00029aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049218  08049218  00060500  2**0
                  CONTENTS
  4 .ARM          00000008  08049218  08049218  00059218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08049220  08049220  00060500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08049220  08049220  00059220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049224  08049224  00059224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000500  20000000  08049228  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00060500  2**0
                  CONTENTS
 10 .bss          0000588c  20000500  20000500  00060500  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005d8c  20005d8c  00060500  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00060500  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b28b  00000000  00000000  00060530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000071e4  00000000  00000000  0008b7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  000929a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ec0  00000000  00000000  00094b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f0b6  00000000  00000000  000969f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033384  00000000  00000000  000c5aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef953  00000000  00000000  000f8e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e877d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9e0  00000000  00000000  001e87d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000500 	.word	0x20000500
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019a84 	.word	0x08019a84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000504 	.word	0x20000504
 80001ec:	08019a84 	.word	0x08019a84

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Mount_SD>:
}



void Mount_SD (const TCHAR* path)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b090      	sub	sp, #64	; 0x40
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	char str1[50] = {0};
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	222e      	movs	r2, #46	; 0x2e
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00f ff2b 	bl	8010ea8 <memset>
	fresult = f_mount(&fs, path, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <Mount_SD+0x6c>)
 8001058:	f00f fb0e 	bl	8010678 <f_mount>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <Mount_SD+0x70>)
 8001062:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <Mount_SD+0x70>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <Mount_SD+0x42>
		sprintf(&str1, "Error");
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <Mount_SD+0x74>)
 8001072:	4618      	mov	r0, r3
 8001074:	f011 f85e 	bl	8012134 <siprintf>
 8001078:	e005      	b.n	8001086 <Mount_SD+0x4e>
	} else{
		sprintf(&str1, "Ok!");
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	490c      	ldr	r1, [pc, #48]	; (80010b0 <Mount_SD+0x78>)
 8001080:	4618      	mov	r0, r3
 8001082:	f011 f857 	bl	8012134 <siprintf>
	}
		printf("Hello");
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <Mount_SD+0x7c>)
 8001088:	f011 f82c 	bl	80120e4 <iprintf>
		lcdPutStr(10, 40, str1, font_12_zekton);
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <Mount_SD+0x80>)
 8001092:	2128      	movs	r1, #40	; 0x28
 8001094:	200a      	movs	r0, #10
 8001096:	f001 fd01 	bl	8002a9c <lcdPutStr>
}
 800109a:	bf00      	nop
 800109c:	3740      	adds	r7, #64	; 0x40
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000051c 	.word	0x2000051c
 80010a8:	20002598 	.word	0x20002598
 80010ac:	08019aa0 	.word	0x08019aa0
 80010b0:	08019aa8 	.word	0x08019aa8
 80010b4:	08019aac 	.word	0x08019aac
 80010b8:	0801a8d4 	.word	0x0801a8d4

080010bc <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	2000      	movs	r0, #0
 80010ca:	f00f fad5 	bl	8010678 <f_mount>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <Unmount_SD+0x24>)
 80010d4:	701a      	strb	r2, [r3, #0]
//	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
//	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20002598 	.word	0x20002598

080010e4 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80010ec:	493b      	ldr	r1, [pc, #236]	; (80011dc <Create_File+0xf8>)
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f00f fd7c 	bl	8010bec <f_stat>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <Create_File+0xfc>)
 80010fa:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <Create_File+0xfc>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f00f feb1 	bl	8010e6c <malloc>
 800110a:	4603      	mov	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4934      	ldr	r1, [pc, #208]	; (80011e4 <Create_File+0x100>)
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f011 f80e 	bl	8012134 <siprintf>
//		Send_Uart(buf);
		free(buf);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f00f feaf 	bl	8010e7c <free>
	    return fresult;
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <Create_File+0xfc>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	e057      	b.n	80011d4 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001124:	220b      	movs	r2, #11
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	482f      	ldr	r0, [pc, #188]	; (80011e8 <Create_File+0x104>)
 800112a:	f00f faeb 	bl	8010704 <f_open>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <Create_File+0xfc>)
 8001134:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <Create_File+0xfc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d012      	beq.n	8001164 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f00f fe94 	bl	8010e6c <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <Create_File+0xfc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4926      	ldr	r1, [pc, #152]	; (80011ec <Create_File+0x108>)
 8001152:	6938      	ldr	r0, [r7, #16]
 8001154:	f010 ffee 	bl	8012134 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001158:	6938      	ldr	r0, [r7, #16]
 800115a:	f00f fe8f 	bl	8010e7c <free>
		    return fresult;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <Create_File+0xfc>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	e037      	b.n	80011d4 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f00f fe81 	bl	8010e6c <malloc>
 800116a:	4603      	mov	r3, r0
 800116c:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	491f      	ldr	r1, [pc, #124]	; (80011f0 <Create_File+0x10c>)
 8001172:	69f8      	ldr	r0, [r7, #28]
 8001174:	f010 ffde 	bl	8012134 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001178:	69f8      	ldr	r0, [r7, #28]
 800117a:	f00f fe7f 	bl	8010e7c <free>
		}

		fresult = f_close(&fil);
 800117e:	481a      	ldr	r0, [pc, #104]	; (80011e8 <Create_File+0x104>)
 8001180:	f00f fd0a 	bl	8010b98 <f_close>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <Create_File+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <Create_File+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d010      	beq.n	80011b6 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f00f fe69 	bl	8010e6c <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <Create_File+0xfc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4913      	ldr	r1, [pc, #76]	; (80011f4 <Create_File+0x110>)
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f010 ffc3 	bl	8012134 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f00f fe64 	bl	8010e7c <free>
 80011b4:	e00c      	b.n	80011d0 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f00f fe58 	bl	8010e6c <malloc>
 80011bc:	4603      	mov	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <Create_File+0x114>)
 80011c4:	69b8      	ldr	r0, [r7, #24]
 80011c6:	f010 ffb5 	bl	8012134 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011ca:	69b8      	ldr	r0, [r7, #24]
 80011cc:	f00f fe56 	bl	8010e7c <free>
		}
	}
    return fresult;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <Create_File+0xfc>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20002580 	.word	0x20002580
 80011e0:	20002598 	.word	0x20002598
 80011e4:	08019c60 	.word	0x08019c60
 80011e8:	20001550 	.word	0x20001550
 80011ec:	08019c98 	.word	0x08019c98
 80011f0:	08019cc0 	.word	0x08019cc0
 80011f4:	08019d00 	.word	0x08019d00
 80011f8:	08019c40 	.word	0x08019c40

080011fc <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800120a:	2332      	movs	r3, #50	; 0x32
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	22d0      	movs	r2, #208	; 0xd0
 800121a:	21ef      	movs	r1, #239	; 0xef
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <read_chip_id+0x3c>)
 800121e:	f007 fe03 	bl	8008e28 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	2b55      	cmp	r3, #85	; 0x55
 8001226:	d001      	beq.n	800122c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001228:	2301      	movs	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800122c:	79fb      	ldrb	r3, [r7, #7]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200026d0 	.word	0x200026d0

0800123c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001248:	2300      	movs	r3, #0
 800124a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d81a      	bhi.n	8001288 <set_oss+0x4c>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <set_oss+0x1c>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001271 	.word	0x08001271
 8001260:	08001279 	.word	0x08001279
 8001264:	08001281 	.word	0x08001281
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2205      	movs	r2, #5
 800126c:	705a      	strb	r2, [r3, #1]
			break;
 800126e:	e00f      	b.n	8001290 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2208      	movs	r2, #8
 8001274:	705a      	strb	r2, [r3, #1]
			break;
 8001276:	e00b      	b.n	8001290 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	220e      	movs	r2, #14
 800127c:	705a      	strb	r2, [r3, #1]
			break;
 800127e:	e007      	b.n	8001290 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	221a      	movs	r2, #26
 8001284:	705a      	strb	r2, [r3, #1]
			break;
 8001286:	e003      	b.n	8001290 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2208      	movs	r2, #8
 800128c:	705a      	strb	r2, [r3, #1]
			break;
 800128e:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	78fa      	ldrb	r2, [r7, #3]
 8001294:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	70fb      	strb	r3, [r7, #3]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80012a0:	2332      	movs	r3, #50	; 0x32
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	22f4      	movs	r2, #244	; 0xf4
 80012b2:	21ee      	movs	r1, #238	; 0xee
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <set_oss+0x88>)
 80012b6:	f007 fcbd 	bl	8008c34 <HAL_I2C_Mem_Write>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200026d0 	.word	0x200026d0

080012c8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 80012f6:	2332      	movs	r3, #50	; 0x32
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2316      	movs	r3, #22
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	22aa      	movs	r2, #170	; 0xaa
 8001308:	21ef      	movs	r1, #239	; 0xef
 800130a:	4827      	ldr	r0, [pc, #156]	; (80013a8 <read_calib_data+0xe0>)
 800130c:	f007 fd8c 	bl	8008e28 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001316:	e03c      	b.n	8001392 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3328      	adds	r3, #40	; 0x28
 8001320:	443b      	add	r3, r7
 8001322:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b219      	sxth	r1, r3
 800132a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132e:	3328      	adds	r3, #40	; 0x28
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001336:	b21a      	sxth	r2, r3
 8001338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4403      	add	r3, r0
 8001342:	430a      	orrs	r2, r1
 8001344:	b212      	sxth	r2, r2
 8001346:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2da      	uxtb	r2, r3
 8001360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	440b      	add	r3, r1
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001382:	2302      	movs	r3, #2
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800138c:	3301      	adds	r3, #1
 800138e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001396:	2b0b      	cmp	r3, #11
 8001398:	d9be      	bls.n	8001318 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800139a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200026d0 	.word	0x200026d0

080013ac <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00f fd74 	bl	8010ea8 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80013c0:	687c      	ldr	r4, [r7, #4]
 80013c2:	f7ff ff1b 	bl	80011fc <read_chip_id>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	687c      	ldr	r4, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff79 	bl	80012c8 <read_calib_data>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3340      	adds	r3, #64	; 0x40
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff2a 	bl	800123c <set_oss>
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}

080013f0 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 80013f6:	232e      	movs	r3, #46	; 0x2e
 80013f8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80013fa:	2332      	movs	r3, #50	; 0x32
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2301      	movs	r3, #1
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	22f4      	movs	r2, #244	; 0xf4
 800140a:	21ee      	movs	r1, #238	; 0xee
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <get_ut+0x50>)
 800140e:	f007 fc11 	bl	8008c34 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001412:	2005      	movs	r0, #5
 8001414:	f006 fef2 	bl	80081fc <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001418:	2332      	movs	r3, #50	; 0x32
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2302      	movs	r3, #2
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	22f6      	movs	r2, #246	; 0xf6
 8001428:	21ef      	movs	r1, #239	; 0xef
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <get_ut+0x50>)
 800142c:	f007 fcfc 	bl	8008e28 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	797a      	ldrb	r2, [r7, #5]
 8001436:	4313      	orrs	r3, r2
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200026d0 	.word	0x200026d0

08001444 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001464:	ee17 2a90 	vmov	r2, s15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	895b      	ldrh	r3, [r3, #10]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	8912      	ldrh	r2, [r2, #8]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	13db      	asrs	r3, r3, #15
 8001478:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001480:	02da      	lsls	r2, r3, #11
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001488:	4619      	mov	r1, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001492:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	441a      	add	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	3308      	adds	r3, #8
 80014a4:	111b      	asrs	r3, r3, #4
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80014fc <get_temp+0xb8>
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80014ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80014be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001500 <get_temp+0xbc>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d908      	bls.n	80014de <get_temp+0x9a>
 80014cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001504 <get_temp+0xc0>
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	db03      	blt.n	80014e6 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2203      	movs	r2, #3
 80014e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ee07 3a90 	vmov	s15, r3
}
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	3dcccccd 	.word	0x3dcccccd
 8001500:	c2200000 	.word	0xc2200000
 8001504:	42aa0000 	.word	0x42aa0000

08001508 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af04      	add	r7, sp, #16
 800150e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <get_up+0x7c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	813b      	strh	r3, [r7, #8]
 8001516:	2300      	movs	r3, #0
 8001518:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800151e:	2334      	movs	r3, #52	; 0x34
 8001520:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001522:	2332      	movs	r3, #50	; 0x32
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	2301      	movs	r3, #1
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	22f4      	movs	r2, #244	; 0xf4
 8001534:	21ee      	movs	r1, #238	; 0xee
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <get_up+0x80>)
 8001538:	f007 fb7c 	bl	8008c34 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 800153c:	797b      	ldrb	r3, [r7, #5]
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fe5c 	bl	80081fc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001544:	2332      	movs	r3, #50	; 0x32
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2303      	movs	r3, #3
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2301      	movs	r3, #1
 8001554:	22f6      	movs	r2, #246	; 0xf6
 8001556:	21ef      	movs	r1, #239	; 0xef
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <get_up+0x80>)
 800155a:	f007 fc65 	bl	8008e28 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800155e:	7a3b      	ldrb	r3, [r7, #8]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	4413      	add	r3, r2
 8001568:	7aba      	ldrb	r2, [r7, #10]
 800156a:	441a      	add	r2, r3
 800156c:	793b      	ldrb	r3, [r7, #4]
 800156e:	f1c3 0308 	rsb	r3, r3, #8
 8001572:	fa42 f303 	asr.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
	return up;
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08019e38 	.word	0x08019e38
 8001588:	200026d0 	.word	0x200026d0

0800158c <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 800158c:	b084      	sub	sp, #16
 800158e:	b480      	push	{r7}
 8001590:	b089      	sub	sp, #36	; 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001598:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80015a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80015aa:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80015ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80015b0:	461a      	mov	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fb03 f303 	mul.w	r3, r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da01      	bge.n	80015c0 <get_pressure+0x34>
 80015bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015c0:	131b      	asrs	r3, r3, #12
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da01      	bge.n	80015ce <get_pressure+0x42>
 80015ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80015ce:	12db      	asrs	r3, r3, #11
 80015d0:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80015d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015d6:	461a      	mov	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da01      	bge.n	80015e6 <get_pressure+0x5a>
 80015e2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80015e6:	12db      	asrs	r3, r3, #11
 80015e8:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 80015f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4413      	add	r3, r2
 80015fc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001600:	4093      	lsls	r3, r2
 8001602:	3302      	adds	r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	da00      	bge.n	800160a <get_pressure+0x7e>
 8001608:	3303      	adds	r3, #3
 800160a:	109b      	asrs	r3, r3, #2
 800160c:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800160e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001612:	461a      	mov	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	da02      	bge.n	8001624 <get_pressure+0x98>
 800161e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001622:	331f      	adds	r3, #31
 8001624:	135b      	asrs	r3, r3, #13
 8001626:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001628:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800162c:	461a      	mov	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fb03 f303 	mul.w	r3, r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	da01      	bge.n	800163c <get_pressure+0xb0>
 8001638:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800163c:	131b      	asrs	r3, r3, #12
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	da02      	bge.n	800164c <get_pressure+0xc0>
 8001646:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800164a:	33ff      	adds	r3, #255	; 0xff
 800164c:	141b      	asrs	r3, r3, #16
 800164e:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	3302      	adds	r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	da00      	bge.n	800165e <get_pressure+0xd2>
 800165c:	3303      	adds	r3, #3
 800165e:	109b      	asrs	r3, r3, #2
 8001660:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	0bdb      	lsrs	r3, r3, #15
 8001672:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001680:	4611      	mov	r1, r2
 8001682:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001686:	410a      	asrs	r2, r1
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db06      	blt.n	80016a2 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	005a      	lsls	r2, r3, #1
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e005      	b.n	80016ae <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <get_pressure+0x12a>
 80016b4:	33ff      	adds	r3, #255	; 0xff
 80016b6:	121b      	asrs	r3, r3, #8
 80016b8:	461a      	mov	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da00      	bge.n	80016c2 <get_pressure+0x136>
 80016c0:	33ff      	adds	r3, #255	; 0xff
 80016c2:	121b      	asrs	r3, r3, #8
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f640 32de 	movw	r2, #3038	; 0xbde
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da02      	bge.n	80016de <get_pressure+0x152>
 80016d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016dc:	33ff      	adds	r3, #255	; 0xff
 80016de:	141b      	asrs	r3, r3, #16
 80016e0:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <get_pressure+0x198>)
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da02      	bge.n	80016f4 <get_pressure+0x168>
 80016ee:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016f2:	33ff      	adds	r3, #255	; 0xff
 80016f4:	141b      	asrs	r3, r3, #16
 80016f6:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001702:	2b00      	cmp	r3, #0
 8001704:	da00      	bge.n	8001708 <get_pressure+0x17c>
 8001706:	330f      	adds	r3, #15
 8001708:	111b      	asrs	r3, r3, #4
 800170a:	461a      	mov	r2, r3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	61fb      	str	r3, [r7, #28]

	return p;
 8001712:	69fb      	ldr	r3, [r7, #28]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	b004      	add	sp, #16
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	ffffe343 	.word	0xffffe343

08001728 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <get_altitude+0xb8>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800174c:	ee16 0a90 	vmov	r0, s13
 8001750:	f7fe ff1a 	bl	8000588 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017d0 <get_altitude+0xa8>
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f015 fe76 	bl	8017450 <pow>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	491d      	ldr	r1, [pc, #116]	; (80017e4 <get_altitude+0xbc>)
 800176e:	f7fe fdab 	bl	80002c8 <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	a317      	add	r3, pc, #92	; (adr r3, 80017d8 <get_altitude+0xb0>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff5a 	bl	8000638 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fa4c 	bl	8000c28 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001794:	edd7 7a03 	vldr	s15, [r7, #12]
 8001798:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017e8 <get_altitude+0xc0>
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	d908      	bls.n	80017b8 <get_altitude+0x90>
 80017a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017ec <get_altitude+0xc4>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	db03      	blt.n	80017c0 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	ee07 3a90 	vmov	s15, r3
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	ccd9456c 	.word	0xccd9456c
 80017d4:	3fc85b95 	.word	0x3fc85b95
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40e5a540 	.word	0x40e5a540
 80017e0:	20000000 	.word	0x20000000
 80017e4:	3ff00000 	.word	0x3ff00000
 80017e8:	c3fa0000 	.word	0xc3fa0000
 80017ec:	460ca000 	.word	0x460ca000

080017f0 <get_slp>:
float get_slp (bmp_t * bmp)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	float slp = 0;
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feae 	bl	8000564 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <get_slp+0x80>)
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001874 <get_slp+0x84>
 8001816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800181e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001822:	ee17 0a90 	vmov	r0, s15
 8001826:	f7fe feaf 	bl	8000588 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001868 <get_slp+0x78>
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f015 fe0b 	bl	8017450 <pow>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f823 	bl	800088c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9eb 	bl	8000c28 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	60fb      	str	r3, [r7, #12]

	return slp;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	ee07 3a90 	vmov	s15, r3
}
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}
 8001866:	bf00      	nop
 8001868:	b851eb85 	.word	0xb851eb85
 800186c:	4015051e 	.word	0x4015051e
 8001870:	20000004 	.word	0x20000004
 8001874:	472d2a00 	.word	0x472d2a00

08001878 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b095      	sub	sp, #84	; 0x54
 800187c:	af0e      	add	r7, sp, #56	; 0x38
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001882:	f7ff fdb5 	bl	80013f0 <get_ut>
 8001886:	ee07 0a90 	vmov	s15, r0
 800188a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f7ff fdd5 	bl	8001444 <get_temp>
 800189a:	eef0 7a40 	vmov.f32	s15, s0
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80018a8:	f7ff fe2e 	bl	8001508 <get_up>
 80018ac:	4602      	mov	r2, r0
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 80018b2:	683e      	ldr	r6, [r7, #0]
 80018b4:	466d      	mov	r5, sp
 80018b6:	f106 0410 	add.w	r4, r6, #16
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	602b      	str	r3, [r5, #0]
 80018ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018ce:	f7ff fe5d 	bl	800158c <get_pressure>
 80018d2:	4602      	mov	r2, r0
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f7ff ff89 	bl	80017f0 <get_slp>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 80018e8:	6838      	ldr	r0, [r7, #0]
 80018ea:	f7ff ff1d 	bl	8001728 <get_altitude>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	617b      	str	r3, [r7, #20]
	return result;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	461c      	mov	r4, r3
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001928 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001934:	e083      	b.n	8001a3e <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	440b      	add	r3, r1
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4944      	ldr	r1, [pc, #272]	; (8001a54 <initButtons+0x12c>)
 8001944:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001948:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	440b      	add	r3, r1
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4940      	ldr	r1, [pc, #256]	; (8001a58 <initButtons+0x130>)
 8001958:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800195c:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	7993      	ldrb	r3, [r2, #6]
 800196a:	f36f 0300 	bfc	r3, #0, #1
 800196e:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	7993      	ldrb	r3, [r2, #6]
 800197c:	f36f 0341 	bfc	r3, #1, #1
 8001980:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2200      	movs	r2, #0
 80019c6:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2200      	movs	r2, #0
 80019e2:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	f67f af78 	bls.w	8001936 <initButtons+0xe>
	}
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000020 	.word	0x20000020
 8001a58:	20000008 	.word	0x20000008

08001a5c <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001a66:	e020      	b.n	8001aaa <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <resetButtonHandlers+0x64>)
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <resetButtonHandlers+0x64>)
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <resetButtonHandlers+0x64>)
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <resetButtonHandlers+0x64>)
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <resetButtonHandlers+0x64>)
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
		i++;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d9db      	bls.n	8001a68 <resetButtonHandlers+0xc>
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000002c 	.word	0x2000002c

08001ac4 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	889b      	ldrh	r3, [r3, #4]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f006 fef8 	bl	80088cc <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <scanButton>:

void scanButton(Button* btn){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	799b      	ldrb	r3, [r3, #6]
 8001afc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	b2d9      	uxtb	r1, r3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	7993      	ldrb	r3, [r2, #6]
 8001b10:	f361 0300 	bfi	r3, r1, #0, #1
 8001b14:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffd4 	bl	8001ac4 <readButton>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	b2d9      	uxtb	r1, r3
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	7993      	ldrb	r3, [r2, #6]
 8001b2c:	f361 0341 	bfi	r3, r1, #1, #1
 8001b30:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001b32:	7bba      	ldrb	r2, [r7, #14]
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d150      	bne.n	8001bdc <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d146      	bne.n	8001bce <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7a9b      	ldrb	r3, [r3, #10]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2000      	movs	r0, #0
 8001b5a:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a9b      	ldrb	r3, [r3, #10]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <scanButton+0x15c>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d32d      	bcc.n	8001bc6 <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7b5b      	ldrb	r3, [r3, #13]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d110      	bne.n	8001b94 <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2000      	movs	r0, #0
 8001b80:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7a5b      	ldrb	r3, [r3, #9]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a9b      	ldrb	r3, [r3, #10]
 8001b98:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <scanButton+0x15c>)
 8001b9a:	8852      	ldrh	r2, [r2, #2]
 8001b9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7adb      	ldrb	r3, [r3, #11]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001bcc:	e03a      	b.n	8001c44 <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	735a      	strb	r2, [r3, #13]
}
 8001bda:	e033      	b.n	8001c44 <scanButton+0x154>
		if(currStatus == 1){
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d11b      	bne.n	8001c1a <scanButton+0x12a>
			btn->shortContinuous = 0;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d126      	bne.n	8001c44 <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2000      	movs	r0, #0
 8001c04:	4798      	blx	r3
				btn->shortSingleOn++;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	79db      	ldrb	r3, [r3, #7]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	731a      	strb	r2, [r3, #12]
}
 8001c18:	e014      	b.n	8001c44 <scanButton+0x154>
			if(btn->releaseHandled == 0){
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7b9b      	ldrb	r3, [r3, #14]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d110      	bne.n	8001c44 <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2000      	movs	r0, #0
 8001c30:	4798      	blx	r3
				btn->shortSingleOff++;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7a1b      	ldrb	r3, [r3, #8]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	739a      	strb	r2, [r3, #14]
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000044 	.word	0x20000044

08001c50 <scanButtons>:

void scanButtons(Button* btns[6]){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001c5c:	e00a      	b.n	8001c74 <scanButtons+0x24>
		scanButton(btns[i]);
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff41 	bl	8001af0 <scanButton>
		i++;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d9f1      	bls.n	8001c5e <scanButtons+0xe>
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a55      	ldr	r2, [pc, #340]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <MX_GPIO_Init+0x1c8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	483b      	ldr	r0, [pc, #236]	; (8001e50 <MX_GPIO_Init+0x1cc>)
 8001d64:	f006 fdca 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d6e:	4839      	ldr	r0, [pc, #228]	; (8001e54 <MX_GPIO_Init+0x1d0>)
 8001d70:	f006 fdc4 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	4837      	ldr	r0, [pc, #220]	; (8001e58 <MX_GPIO_Init+0x1d4>)
 8001d7a:	f006 fdbf 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d84:	4835      	ldr	r0, [pc, #212]	; (8001e5c <MX_GPIO_Init+0x1d8>)
 8001d86:	f006 fdb9 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	482b      	ldr	r0, [pc, #172]	; (8001e50 <MX_GPIO_Init+0x1cc>)
 8001da2:	f006 fbe7 	bl	8008574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001da6:	f244 0381 	movw	r3, #16513	; 0x4081
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4825      	ldr	r0, [pc, #148]	; (8001e54 <MX_GPIO_Init+0x1d0>)
 8001dc0:	f006 fbd8 	bl	8008574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001dc4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001dc8:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001dca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4821      	ldr	r0, [pc, #132]	; (8001e60 <MX_GPIO_Init+0x1dc>)
 8001ddc:	f006 fbca 	bl	8008574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001de0:	2340      	movs	r3, #64	; 0x40
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <MX_GPIO_Init+0x1d4>)
 8001df8:	f006 fbbc 	bl	8008574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <MX_GPIO_Init+0x1d4>)
 8001e10:	f006 fbb0 	bl	8008574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x1d8>)
 8001e2e:	f006 fba1 	bl	8008574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2028      	movs	r0, #40	; 0x28
 8001e38:	f006 fadf 	bl	80083fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e3c:	2028      	movs	r0, #40	; 0x28
 8001e3e:	f006 faf8 	bl	8008432 <HAL_NVIC_EnableIRQ>

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	; 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40021000 	.word	0x40021000

08001e64 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b2f      	cmp	r3, #47	; 0x2f
 8001e76:	bf8c      	ite	hi
 8001e78:	2301      	movhi	r3, #1
 8001e7a:	2300      	movls	r3, #0
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b39      	cmp	r3, #57	; 0x39
 8001e84:	bf94      	ite	ls
 8001e86:	2301      	movls	r3, #1
 8001e88:	2300      	movhi	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <hexCharToInt+0x3a>
		msb = *value - 48;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b30      	subs	r3, #48	; 0x30
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e003      	b.n	8001ea6 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	3b37      	subs	r3, #55	; 0x37
 8001ea4:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3301      	adds	r3, #1
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb2:	bf8c      	ite	hi
 8001eb4:	2301      	movhi	r3, #1
 8001eb6:	2300      	movls	r3, #0
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b39      	cmp	r3, #57	; 0x39
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	3b30      	subs	r3, #48	; 0x30
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3b37      	subs	r3, #55	; 0x37
 8001ee6:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
	return(result)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
;}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001f10:	4619      	mov	r1, r3
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <getDataFromUart+0x20>)
 8001f14:	f00b f9fb 	bl	800d30e <HAL_UART_Receive_DMA>

}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20005c8c 	.word	0x20005c8c

08001f24 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f30:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f34:	6018      	str	r0, [r3, #0]
 8001f36:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f3a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8001f3e:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001f40:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f44:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f48:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8001f4c:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	3304      	adds	r3, #4
 8001f5a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f010 febb 	bl	8012cdc <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001f66:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f6a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <initGps+0x90>)
 8001f70:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 8001f74:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f78:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 8001f82:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f86:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001f90:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f44f 7319 	mov.w	r3, #612	; 0x264
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f00e ff75 	bl	8010e8c <memcpy>
}
 8001fa2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001fa6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	08001f01 	.word	0x08001f01

08001fb8 <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <strtoke+0x1a>
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <strtoke+0x60>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <strtoke+0x60>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <strtoke+0x26>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e017      	b.n	800200e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <strtoke+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <strtoke+0x60>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f010 fe89 	bl	8012d02 <strpbrk>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <strtoke+0x60>)
 8001ff4:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <strtoke+0x60>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <strtoke+0x54>
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <strtoke+0x60>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <strtoke+0x60>)
 8002006:	600a      	str	r2, [r1, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200026c8 	.word	0x200026c8

0800201c <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 800202c:	e009      	b.n	8002042 <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4053      	eors	r3, r2
 800203a:	73fb      	strb	r3, [r7, #15]
		i++;
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	3301      	adds	r3, #1
 8002040:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002042:	7bbb      	ldrb	r3, [r7, #14]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b2a      	cmp	r3, #42	; 0x2a
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2da      	uxtb	r2, r3
 8002054:	7bbb      	ldrb	r3, [r7, #14]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	440b      	add	r3, r1
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4013      	ands	r3, r2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1df      	bne.n	800202e <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	3301      	adds	r3, #1
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fef4 	bl	8001e64 <hexCharToInt>
 800207c:	4602      	mov	r2, r0
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	429a      	cmp	r2, r3
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <getMessage+0x68>)
 80020ae:	4413      	add	r3, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f010 fe3f 	bl	8012d36 <strstr>
 80020b8:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <getMessage+0x30>
 80020c0:	2300      	movs	r3, #0
 80020c2:	e016      	b.n	80020f2 <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <getMessage+0x6c>)
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f011 fc7c 	bl	80139c4 <strtok>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <getMessage+0x42>
 80020d2:	2300      	movs	r3, #0
 80020d4:	e00d      	b.n	80020f2 <getMessage+0x5e>
	if(validateChecksum(start)){
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ffa0 	bl	800201c <validateChecksum>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <getMessage+0x5c>
		return strcpy(destination,start);
 80020e2:	6979      	ldr	r1, [r7, #20]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f010 f8b6 	bl	8012256 <strcpy>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e000      	b.n	80020f2 <getMessage+0x5e>
	} else {
		return NULL;
 80020f0:	2300      	movs	r3, #0
	}
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0801b35c 	.word	0x0801b35c
 8002100:	08019e3c 	.word	0x08019e3c

08002104 <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800210a:	af00      	add	r7, sp, #0
 800210c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002110:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002114:	6018      	str	r0, [r3, #0]
 8002116:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800211a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800211e:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 8002120:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002124:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8002130:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002134:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1d19      	adds	r1, r3, #4
 800213c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002140:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002144:	4618      	mov	r0, r3
 8002146:	f010 fdc9 	bl	8012cdc <strncpy>
	dev->isReady = 1;
 800214a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800214e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 800215a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	2200      	movs	r2, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff95 	bl	8002094 <getMessage>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d113      	bne.n	8002198 <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 8002170:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002174:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <getLocation+0x90>)
 800217c:	461d      	mov	r5, r3
 800217e:	4614      	mov	r4, r2
 8002180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002182:	6028      	str	r0, [r5, #0]
 8002184:	6069      	str	r1, [r5, #4]
 8002186:	60aa      	str	r2, [r5, #8]
 8002188:	60eb      	str	r3, [r5, #12]
 800218a:	7823      	ldrb	r3, [r4, #0]
 800218c:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 800218e:	2300      	movs	r3, #0
 8002190:	e1ff      	b.n	8002592 <getLocation+0x48e>
 8002192:	bf00      	nop
 8002194:	08019e44 	.word	0x08019e44
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 8002198:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800219c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f107 020c 	add.w	r2, r7, #12
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f010 f854 	bl	8012256 <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	49dd      	ldr	r1, [pc, #884]	; (8002528 <getLocation+0x424>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff feff 	bl	8001fb8 <strtoke>
 80021ba:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 80021be:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80021c2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80021cc:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80021d0:	4618      	mov	r0, r3
 80021d2:	f010 f840 	bl	8012256 <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 80021d6:	49d4      	ldr	r1, [pc, #848]	; (8002528 <getLocation+0x424>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff feed 	bl	8001fb8 <strtoke>
 80021de:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 80021e2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80021e6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80021f0:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80021f4:	4618      	mov	r0, r3
 80021f6:	f010 f82e 	bl	8012256 <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 80021fa:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80021fe:	f00e fdf4 	bl	8010dea <atoi>
 8002202:	4603      	mov	r3, r0
 8002204:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 8002208:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800220c:	4ac7      	ldr	r2, [pc, #796]	; (800252c <getLocation+0x428>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0b5a      	lsrs	r2, r3, #13
 8002214:	4bc6      	ldr	r3, [pc, #792]	; (8002530 <getLocation+0x42c>)
 8002216:	fba3 1302 	umull	r1, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2164      	movs	r1, #100	; 0x64
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800222a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 8002234:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002238:	4abd      	ldr	r2, [pc, #756]	; (8002530 <getLocation+0x42c>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	095a      	lsrs	r2, r3, #5
 8002240:	4bbb      	ldr	r3, [pc, #748]	; (8002530 <getLocation+0x42c>)
 8002242:	fba3 1302 	umull	r1, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2164      	movs	r1, #100	; 0x64
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b2da      	uxtb	r2, r3
 8002252:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002256:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 8002260:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002264:	4bb2      	ldr	r3, [pc, #712]	; (8002530 <getLocation+0x42c>)
 8002266:	fba3 1302 	umull	r1, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2164      	movs	r1, #100	; 0x64
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800227a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 8002284:	49a8      	ldr	r1, [pc, #672]	; (8002528 <getLocation+0x424>)
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff fe96 	bl	8001fb8 <strtoke>
 800228c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 8002290:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002294:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800229e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00f ffd7 	bl	8012256 <strcpy>
	double latitude = atof(parsePointer);
 80022a8:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80022ac:	f00e fd9a 	bl	8010de4 <atof>
 80022b0:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <getLocation+0x430>)
 80022ba:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80022be:	f7fe fae5 	bl	800088c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fc8d 	bl	8000be8 <__aeabi_d2uiz>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80022d6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 80022e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80022e4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80022ee:	461a      	mov	r2, r3
 80022f0:	2364      	movs	r3, #100	; 0x64
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f934 	bl	8000564 <__aeabi_i2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002304:	f7fd ffe0 	bl	80002c8 <__aeabi_dsub>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002310:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 8002314:	6809      	ldr	r1, [r1, #0]
 8002316:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 800231a:	4983      	ldr	r1, [pc, #524]	; (8002528 <getLocation+0x424>)
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fe4b 	bl	8001fb8 <strtoke>
 8002322:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 8002326:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800232a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002334:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002338:	4618      	mov	r0, r3
 800233a:	f00f ff8c 	bl	8012256 <strcpy>
	position->n_s = *parsePointer;
 800233e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002348:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 8002352:	4975      	ldr	r1, [pc, #468]	; (8002528 <getLocation+0x424>)
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff fe2f 	bl	8001fb8 <strtoke>
 800235a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 800235e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002362:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800236c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002370:	4618      	mov	r0, r3
 8002372:	f00f ff70 	bl	8012256 <strcpy>
	double longitude = atof(parsePointer);
 8002376:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 800237a:	f00e fd33 	bl	8010de4 <atof>
 800237e:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <getLocation+0x430>)
 8002388:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800238c:	f7fe fa7e 	bl	800088c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fc26 	bl	8000be8 <__aeabi_d2uiz>
 800239c:	4603      	mov	r3, r0
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80023a4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 80023ae:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80023b2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80023bc:	461a      	mov	r2, r3
 80023be:	2364      	movs	r3, #100	; 0x64
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8cd 	bl	8000564 <__aeabi_i2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80023d2:	f7fd ff79 	bl	80002c8 <__aeabi_dsub>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80023de:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 80023e2:	6809      	ldr	r1, [r1, #0]
 80023e4:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 80023e8:	494f      	ldr	r1, [pc, #316]	; (8002528 <getLocation+0x424>)
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fde4 	bl	8001fb8 <strtoke>
 80023f0:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 80023f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80023f8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002402:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002406:	4618      	mov	r0, r3
 8002408:	f00f ff25 	bl	8012256 <strcpy>
	position->w_e = *parsePointer;
 800240c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002416:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 8002420:	4941      	ldr	r1, [pc, #260]	; (8002528 <getLocation+0x424>)
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fdc8 	bl	8001fb8 <strtoke>
 8002428:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 800242c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002430:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800243a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800243e:	4618      	mov	r0, r3
 8002440:	f00f ff09 	bl	8012256 <strcpy>
	if(*parsePointer=='0'){
 8002444:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b30      	cmp	r3, #48	; 0x30
 800244c:	d007      	beq.n	800245e <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 800244e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002452:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 800245e:	4932      	ldr	r1, [pc, #200]	; (8002528 <getLocation+0x424>)
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fda9 	bl	8001fb8 <strtoke>
 8002466:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 800246a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800246e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8002478:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800247c:	4618      	mov	r0, r3
 800247e:	f00f feea 	bl	8012256 <strcpy>
	position->satNum = atoi(parsePointer);
 8002482:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002486:	f00e fcb0 	bl	8010dea <atoi>
 800248a:	4603      	mov	r3, r0
 800248c:	b2da      	uxtb	r2, r3
 800248e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002492:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 800249c:	4922      	ldr	r1, [pc, #136]	; (8002528 <getLocation+0x424>)
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff fd8a 	bl	8001fb8 <strtoke>
 80024a4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 80024a8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80024ac:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 80024b6:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00f fecb 	bl	8012256 <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 80024c0:	4919      	ldr	r1, [pc, #100]	; (8002528 <getLocation+0x424>)
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7ff fd78 	bl	8001fb8 <strtoke>
 80024c8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 80024cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80024d0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80024da:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80024de:	4618      	mov	r0, r3
 80024e0:	f00f feb9 	bl	8012256 <strcpy>
	position->elevation = atof(parsePointer);
 80024e4:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80024e8:	f00e fc7c 	bl	8010de4 <atof>
 80024ec:	eeb0 7a40 	vmov.f32	s14, s0
 80024f0:	eef0 7a60 	vmov.f32	s15, s1
 80024f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80024f8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 8002502:	4909      	ldr	r1, [pc, #36]	; (8002528 <getLocation+0x424>)
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff fd57 	bl	8001fb8 <strtoke>
 800250a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 800250e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002512:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800251c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002520:	4618      	mov	r0, r3
 8002522:	f00f fe98 	bl	8012256 <strcpy>
 8002526:	e007      	b.n	8002538 <getLocation+0x434>
 8002528:	08019e40 	.word	0x08019e40
 800252c:	d1b71759 	.word	0xd1b71759
 8002530:	51eb851f 	.word	0x51eb851f
 8002534:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 8002538:	4918      	ldr	r1, [pc, #96]	; (800259c <getLocation+0x498>)
 800253a:	2000      	movs	r0, #0
 800253c:	f7ff fd3c 	bl	8001fb8 <strtoke>
 8002540:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 8002544:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002548:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8002552:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002556:	4618      	mov	r0, r3
 8002558:	f00f fe7d 	bl	8012256 <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 800255c:	490f      	ldr	r1, [pc, #60]	; (800259c <getLocation+0x498>)
 800255e:	2000      	movs	r0, #0
 8002560:	f7ff fd2a 	bl	8001fb8 <strtoke>
 8002564:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 8002568:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800256c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002576:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800257a:	4618      	mov	r0, r3
 800257c:	f00f fe6b 	bl	8012256 <strcpy>

	//	mark position as valid
	position->isValid = 1;
 8002580:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002584:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	08019e40 	.word	0x08019e40

080025a0 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	if(position>0){
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <prevPos+0x2c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <prevPos+0x1a>
		position--;
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <prevPos+0x2c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <prevPos+0x2c>)
 80025b6:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 80025b8:	e002      	b.n	80025c0 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <prevPos+0x2c>)
 80025bc:	2205      	movs	r2, #5
 80025be:	701a      	strb	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200026cc 	.word	0x200026cc

080025d0 <nextPos>:

void nextPos(void){
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <nextPos+0x2c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d806      	bhi.n	80025ea <nextPos+0x1a>
		position++;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <nextPos+0x2c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <nextPos+0x2c>)
 80025e6:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80025e8:	e002      	b.n	80025f0 <nextPos+0x20>
		position=0;
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <nextPos+0x2c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	200026cc 	.word	0x200026cc

08002600 <nextScreen>:

void nextScreen(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	nextPos();
 8002604:	f7ff ffe4 	bl	80025d0 <nextPos>
	applySelectedScreen();
 8002608:	f000 f82c 	bl	8002664 <applySelectedScreen>
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <prevScreen>:
void prevScreen(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	prevPos();
 8002614:	f7ff ffc4 	bl	80025a0 <prevPos>
	applySelectedScreen();
 8002618:	f000 f824 	bl	8002664 <applySelectedScreen>
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <resetPos>:
void resetPos(void){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	position=0;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <resetPos+0x14>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 800262a:	f000 f81b 	bl	8002664 <applySelectedScreen>
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200026cc 	.word	0x200026cc

08002638 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a05      	ldr	r2, [pc, #20]	; (800265c <guiApplyView+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <guiApplyView+0x28>)
 800264e:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002650:	f000 f830 	bl	80026b4 <selectScreen>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000013c 	.word	0x2000013c
 8002660:	20000138 	.word	0x20000138

08002664 <applySelectedScreen>:

void applySelectedScreen(void){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <applySelectedScreen+0x40>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <applySelectedScreen+0x44>)
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	3320      	adds	r3, #32
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <applySelectedScreen+0x48>)
 8002680:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <applySelectedScreen+0x40>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <applySelectedScreen+0x44>)
 800268a:	460b      	mov	r3, r1
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3324      	adds	r3, #36	; 0x24
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <applySelectedScreen+0x4c>)
 800269a:	6013      	str	r3, [r2, #0]
	selectScreen();
 800269c:	f000 f80a 	bl	80026b4 <selectScreen>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200026cc 	.word	0x200026cc
 80026a8:	20000048 	.word	0x20000048
 80026ac:	2000013c 	.word	0x2000013c
 80026b0:	20000138 	.word	0x20000138

080026b4 <selectScreen>:

void selectScreen(void){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 80026b8:	f7ff f9d0 	bl	8001a5c <resetButtonHandlers>
	isModuleSet = 0;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <selectScreen+0x1c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <selectScreen+0x20>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <selectScreen+0x24>)
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200026cd 	.word	0x200026cd
 80026d4:	20000138 	.word	0x20000138
 80026d8:	20000140 	.word	0x20000140

080026dc <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <showGui+0x30>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <showGui+0x18>
		moduleSetupPtr();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <showGui+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4798      	blx	r3
		isModuleSet = 1;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <showGui+0x30>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <showGui+0x38>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <showGui+0x26>
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <showGui+0x38>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4798      	blx	r3
	lcdRefresh();
 8002702:	f000 ff93 	bl	800362c <lcdRefresh>
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200026cd 	.word	0x200026cd
 8002710:	2000013c 	.word	0x2000013c
 8002714:	20000140 	.word	0x20000140

08002718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_I2C1_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <MX_I2C1_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_I2C1_Init+0x74>)
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <MX_I2C1_Init+0x7c>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_I2C1_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <MX_I2C1_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_I2C1_Init+0x74>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_I2C1_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C1_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <MX_I2C1_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_I2C1_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <MX_I2C1_Init+0x74>)
 8002756:	f006 f929 	bl	80089ac <HAL_I2C_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002760:	f001 fa02 	bl	8003b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002764:	2100      	movs	r1, #0
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <MX_I2C1_Init+0x74>)
 8002768:	f007 f8df 	bl	800992a <HAL_I2CEx_ConfigAnalogFilter>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002772:	f001 f9f9 	bl	8003b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002776:	2100      	movs	r1, #0
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <MX_I2C1_Init+0x74>)
 800277a:	f007 f912 	bl	80099a2 <HAL_I2CEx_ConfigDigitalFilter>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002784:	f001 f9f0 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200026d0 	.word	0x200026d0
 8002790:	40005400 	.word	0x40005400
 8002794:	000186a0 	.word	0x000186a0

08002798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_I2C_MspInit+0x84>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12c      	bne.n	8002814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027dc:	2312      	movs	r3, #18
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e8:	2304      	movs	r3, #4
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	480c      	ldr	r0, [pc, #48]	; (8002824 <HAL_I2C_MspInit+0x8c>)
 80027f4:	f005 febe 	bl	8008574 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_I2C_MspInit+0x88>)
 8002802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_I2C_MspInit+0x88>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	; 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40005400 	.word	0x40005400
 8002820:	40023800 	.word	0x40023800
 8002824:	40020400 	.word	0x40020400

08002828 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002832:	2307      	movs	r3, #7
 8002834:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002842:	e010      	b.n	8002866 <reverse_uint8+0x3e>
		result = result << 1;
 8002844:	7bbb      	ldrb	r3, [r7, #14]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002858:	7bba      	ldrb	r2, [r7, #14]
 800285a:	7b7b      	ldrb	r3, [r7, #13]
 800285c:	4313      	orrs	r3, r2
 800285e:	73bb      	strb	r3, [r7, #14]
		times--;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3b01      	subs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1eb      	bne.n	8002844 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 800286c:	7bbb      	ldrb	r3, [r7, #14]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002882:	2000      	movs	r0, #0
 8002884:	f000 f824 	bl	80028d0 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002888:	2300      	movs	r3, #0
 800288a:	71fb      	strb	r3, [r7, #7]
 800288c:	e014      	b.n	80028b8 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800288e:	2300      	movs	r3, #0
 8002890:	80bb      	strh	r3, [r7, #4]
 8002892:	e00b      	b.n	80028ac <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2232      	movs	r2, #50	; 0x32
 8002898:	fb03 f202 	mul.w	r2, r3, r2
 800289c:	88bb      	ldrh	r3, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <lcdClearBuffer+0x50>)
 80028a2:	21ff      	movs	r1, #255	; 0xff
 80028a4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	3301      	adds	r3, #1
 80028aa:	80bb      	strh	r3, [r7, #4]
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	2b31      	cmp	r3, #49	; 0x31
 80028b0:	d9f0      	bls.n	8002894 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	3301      	adds	r3, #1
 80028b6:	71fb      	strb	r3, [r7, #7]
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2bef      	cmp	r3, #239	; 0xef
 80028bc:	d9e7      	bls.n	800288e <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 f806 	bl	80028d0 <updateSetting>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20002728 	.word	0x20002728

080028d0 <updateSetting>:

void updateSetting(uint8_t state){
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <updateSetting+0x1c>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	7013      	strb	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	20000144 	.word	0x20000144

080028f0 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	80fb      	strh	r3, [r7, #6]
 80028fc:	460b      	mov	r3, r1
 80028fe:	717b      	strb	r3, [r7, #5]
 8002900:	4613      	mov	r3, r2
 8002902:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	795b      	ldrb	r3, [r3, #5]
 8002908:	793a      	ldrb	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d304      	bcc.n	8002918 <lcdPutChar+0x28>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	799b      	ldrb	r3, [r3, #6]
 8002912:	793a      	ldrb	r2, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d902      	bls.n	800291e <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	79db      	ldrb	r3, [r3, #7]
 800291c:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	b29b      	uxth	r3, r3
 800292e:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	885b      	ldrh	r3, [r3, #2]
 8002934:	461a      	mov	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	fb92 f3f3 	sdiv	r3, r2, r3
 800293e:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002940:	2300      	movs	r3, #0
 8002942:	75fb      	strb	r3, [r7, #23]
 8002944:	e09b      	b.n	8002a7e <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002946:	797a      	ldrb	r2, [r7, #5]
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	4413      	add	r3, r2
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4413      	add	r3, r2
 8002954:	461a      	mov	r2, r3
 8002956:	0091      	lsls	r1, r2, #2
 8002958:	461a      	mov	r2, r3
 800295a:	460b      	mov	r3, r1
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	b29b      	uxth	r3, r3
 8002966:	4413      	add	r3, r2
 8002968:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800296a:	793b      	ldrb	r3, [r7, #4]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	7952      	ldrb	r2, [r2, #5]
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	8852      	ldrh	r2, [r2, #2]
 8002976:	fb03 f202 	mul.w	r2, r3, r2
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	7cb9      	ldrb	r1, [r7, #18]
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	3308      	adds	r3, #8
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	7d3b      	ldrb	r3, [r7, #20]
 8002994:	fa42 f303 	asr.w	r3, r2, r3
 8002998:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800299a:	8a3b      	ldrh	r3, [r7, #16]
 800299c:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <lcdPutChar+0x1a8>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	b25a      	sxtb	r2, r3
 80029a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	4013      	ands	r3, r2
 80029ac:	b25a      	sxtb	r2, r3
 80029ae:	8a3b      	ldrh	r3, [r7, #16]
 80029b0:	b2d1      	uxtb	r1, r2
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <lcdPutChar+0x1a8>)
 80029b4:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	3308      	adds	r3, #8
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b25a      	sxtb	r2, r3
 80029c2:	7d3b      	ldrb	r3, [r7, #20]
 80029c4:	f1c3 0308 	rsb	r3, r3, #8
 80029c8:	21ff      	movs	r1, #255	; 0xff
 80029ca:	fa41 f303 	asr.w	r3, r1, r3
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80029d6:	2301      	movs	r3, #1
 80029d8:	757b      	strb	r3, [r7, #21]
 80029da:	e029      	b.n	8002a30 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80029dc:	7d7a      	ldrb	r2, [r7, #21]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	7a1b      	ldrb	r3, [r3, #8]
 80029e8:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80029ea:	8a3a      	ldrh	r2, [r7, #16]
 80029ec:	7d7b      	ldrb	r3, [r7, #21]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <lcdPutChar+0x1a8>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	b25a      	sxtb	r2, r3
 80029f6:	7db9      	ldrb	r1, [r7, #22]
 80029f8:	7d3b      	ldrb	r3, [r7, #20]
 80029fa:	f1c3 0308 	rsb	r3, r3, #8
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	b259      	sxtb	r1, r3
 8002a04:	7af8      	ldrb	r0, [r7, #11]
 8002a06:	7d3b      	ldrb	r3, [r7, #20]
 8002a08:	fa40 f303 	asr.w	r3, r0, r3
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	4013      	ands	r3, r2
 8002a18:	b259      	sxtb	r1, r3
 8002a1a:	8a3a      	ldrh	r2, [r7, #16]
 8002a1c:	7d7b      	ldrb	r3, [r7, #21]
 8002a1e:	4413      	add	r3, r2
 8002a20:	b2c9      	uxtb	r1, r1
 8002a22:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <lcdPutChar+0x1a8>)
 8002a24:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002a2a:	7d7b      	ldrb	r3, [r7, #21]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	757b      	strb	r3, [r7, #21]
 8002a30:	7d7a      	ldrb	r2, [r7, #21]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3307      	adds	r3, #7
 8002a38:	10db      	asrs	r3, r3, #3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	dbce      	blt.n	80029dc <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002a3e:	8a3a      	ldrh	r2, [r7, #16]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3307      	adds	r3, #7
 8002a46:	10db      	asrs	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <lcdPutChar+0x1a8>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	b25a      	sxtb	r2, r3
 8002a50:	7db9      	ldrb	r1, [r7, #22]
 8002a52:	7d3b      	ldrb	r3, [r7, #20]
 8002a54:	f1c3 0308 	rsb	r3, r3, #8
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4013      	ands	r3, r2
 8002a64:	b259      	sxtb	r1, r3
 8002a66:	8a3a      	ldrh	r2, [r7, #16]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	10db      	asrs	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	b2c9      	uxtb	r1, r1
 8002a74:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <lcdPutChar+0x1a8>)
 8002a76:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	7dfa      	ldrb	r2, [r7, #23]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f4ff af5e 	bcc.w	8002946 <lcdPutChar+0x56>
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20002728 	.word	0x20002728

08002a9c <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60ba      	str	r2, [r7, #8]
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	81fb      	strh	r3, [r7, #14]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e015      	b.n	8002ae0 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	fb12 f303 	smulbb	r3, r2, r3
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b298      	uxth	r0, r3
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	7b79      	ldrb	r1, [r7, #13]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f7ff ff0b 	bl	80028f0 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	3301      	adds	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
 8002ae0:	7dfc      	ldrb	r4, [r7, #23]
 8002ae2:	68b8      	ldr	r0, [r7, #8]
 8002ae4:	f7fd fb8e 	bl	8000204 <strlen>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	429c      	cmp	r4, r3
 8002aec:	d3e2      	bcc.n	8002ab4 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60ba      	str	r2, [r7, #8]
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4603      	mov	r3, r0
 8002b04:	81fb      	strh	r3, [r7, #14]
 8002b06:	460b      	mov	r3, r1
 8002b08:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b18:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 8002b1a:	7b7b      	ldrb	r3, [r7, #13]
 8002b1c:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002b22:	2300      	movs	r3, #0
 8002b24:	827b      	strh	r3, [r7, #18]
 8002b26:	e02d      	b.n	8002b84 <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8002b28:	8aba      	ldrh	r2, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dd06      	ble.n	8002b44 <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	785a      	ldrb	r2, [r3, #1]
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 8002b44:	8a7b      	ldrh	r3, [r7, #18]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b0a      	cmp	r3, #10
 8002b4e:	d107      	bne.n	8002b60 <lcdPutStrML+0x68>
			xPos = x;
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	785a      	ldrb	r2, [r3, #1]
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	75fb      	strb	r3, [r7, #23]
 8002b5e:	e00e      	b.n	8002b7e <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 8002b60:	8a7b      	ldrh	r3, [r7, #18]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	7df9      	ldrb	r1, [r7, #23]
 8002b6a:	8ab8      	ldrh	r0, [r7, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f7ff febf 	bl	80028f0 <lcdPutChar>
			xPos += font->font_Width;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	8abb      	ldrh	r3, [r7, #20]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002b7e:	8a7b      	ldrh	r3, [r7, #18]
 8002b80:	3301      	adds	r3, #1
 8002b82:	827b      	strh	r3, [r7, #18]
 8002b84:	8a7c      	ldrh	r4, [r7, #18]
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f7fd fb3c 	bl	8000204 <strlen>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	d3ca      	bcc.n	8002b28 <lcdPutStrML+0x30>
		}

	}
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd90      	pop	{r4, r7, pc}

08002b9c <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002b9c:	b490      	push	{r4, r7}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	80fb      	strh	r3, [r7, #6]
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80bb      	strh	r3, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	70fb      	strb	r3, [r7, #3]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 8002bcc:	88bb      	ldrh	r3, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e04e      	b.n	8002c70 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2232      	movs	r2, #50	; 0x32
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	7b7b      	ldrb	r3, [r7, #13]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <lcdVLine+0xe8>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002be4:	78bb      	ldrb	r3, [r7, #2]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d01e      	beq.n	8002c28 <lcdVLine+0x8c>
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	dc27      	bgt.n	8002c3e <lcdVLine+0xa2>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <lcdVLine+0x5c>
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d00b      	beq.n	8002c0e <lcdVLine+0x72>
 8002bf6:	e022      	b.n	8002c3e <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002bf8:	7b3b      	ldrb	r3, [r7, #12]
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	fa42 f303 	asr.w	r3, r2, r3
 8002c00:	b25a      	sxtb	r2, r3
 8002c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	73bb      	strb	r3, [r7, #14]
				break;
 8002c0c:	e024      	b.n	8002c58 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002c0e:	7b3b      	ldrb	r3, [r7, #12]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	fa42 f303 	asr.w	r3, r2, r3
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	b25a      	sxtb	r2, r3
 8002c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	73bb      	strb	r3, [r7, #14]
				break;
 8002c26:	e017      	b.n	8002c58 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002c28:	7b3b      	ldrb	r3, [r7, #12]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	fa42 f303 	asr.w	r3, r2, r3
 8002c30:	b25a      	sxtb	r2, r3
 8002c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c36:	4053      	eors	r3, r2
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	73bb      	strb	r3, [r7, #14]
				break;
 8002c3c:	e00c      	b.n	8002c58 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 8002c3e:	7b3b      	ldrb	r3, [r7, #12]
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	fa42 f303 	asr.w	r3, r2, r3
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	b25a      	sxtb	r2, r3
 8002c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	73bb      	strb	r3, [r7, #14]
				break;
 8002c56:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2232      	movs	r2, #50	; 0x32
 8002c5c:	fb03 f202 	mul.w	r2, r3, r2
 8002c60:	7b7b      	ldrb	r3, [r7, #13]
 8002c62:	4413      	add	r3, r2
 8002c64:	4907      	ldr	r1, [pc, #28]	; (8002c84 <lcdVLine+0xe8>)
 8002c66:	7bba      	ldrb	r2, [r7, #14]
 8002c68:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d9ac      	bls.n	8002bd2 <lcdVLine+0x36>
	}
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc90      	pop	{r4, r7}
 8002c82:	4770      	bx	lr
 8002c84:	20002728 	.word	0x20002728

08002c88 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 8002c88:	b490      	push	{r4, r7}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	80fb      	strh	r3, [r7, #6]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	80bb      	strh	r3, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 8002ca6:	23ff      	movs	r3, #255	; 0xff
 8002ca8:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8002caa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cae:	2b14      	cmp	r3, #20
 8002cb0:	f200 8208 	bhi.w	80030c4 <lcdHLine2+0x43c>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <lcdHLine2+0x34>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002d11 	.word	0x08002d11
 8002cc0:	08002d17 	.word	0x08002d17
 8002cc4:	08002d1d 	.word	0x08002d1d
 8002cc8:	08002d23 	.word	0x08002d23
 8002ccc:	08002d3b 	.word	0x08002d3b
 8002cd0:	08002d53 	.word	0x08002d53
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002db5 	.word	0x08002db5
 8002cdc:	08002df9 	.word	0x08002df9
 8002ce0:	08002e3d 	.word	0x08002e3d
 8002ce4:	08002e7b 	.word	0x08002e7b
 8002ce8:	08002ea1 	.word	0x08002ea1
 8002cec:	08002ecb 	.word	0x08002ecb
 8002cf0:	08002f01 	.word	0x08002f01
 8002cf4:	08002f19 	.word	0x08002f19
 8002cf8:	08002f3f 	.word	0x08002f3f
 8002cfc:	08002f75 	.word	0x08002f75
 8002d00:	08002fab 	.word	0x08002fab
 8002d04:	08002fed 	.word	0x08002fed
 8002d08:	08003047 	.word	0x08003047
 8002d0c:	08003083 	.word	0x08003083
		case 0:	// clear
			pattern = 0x00;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
			break;
 8002d14:	e1ea      	b.n	80030ec <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002d16:	23ff      	movs	r3, #255	; 0xff
 8002d18:	75fb      	strb	r3, [r7, #23]
			break;
 8002d1a:	e1e7      	b.n	80030ec <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002d1c:	2355      	movs	r3, #85	; 0x55
 8002d1e:	75fb      	strb	r3, [r7, #23]
			break;
 8002d20:	e1e4      	b.n	80030ec <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <lcdHLine2+0xac>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002d32:	e1db      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002d34:	23ff      	movs	r3, #255	; 0xff
 8002d36:	75fb      	strb	r3, [r7, #23]
			break;
 8002d38:	e1d8      	b.n	80030ec <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <lcdHLine2+0xc4>
 8002d46:	23aa      	movs	r3, #170	; 0xaa
 8002d48:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002d4a:	e1cf      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x55;
 8002d4c:	2355      	movs	r3, #85	; 0x55
 8002d4e:	75fb      	strb	r3, [r7, #23]
			break;
 8002d50:	e1cc      	b.n	80030ec <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <lcdHLine2+0xdc>
 8002d5e:	2388      	movs	r3, #136	; 0x88
 8002d60:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8002d62:	e1c3      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8002d64:	2322      	movs	r3, #34	; 0x22
 8002d66:	75fb      	strb	r3, [r7, #23]
			break;
 8002d68:	e1c0      	b.n	80030ec <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <lcdHLine2+0xf4>
 8002d76:	2388      	movs	r3, #136	; 0x88
 8002d78:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002d7a:	e1a6      	b.n	80030ca <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <lcdHLine2+0x106>
 8002d88:	2344      	movs	r3, #68	; 0x44
 8002d8a:	75fb      	strb	r3, [r7, #23]
			break;
 8002d8c:	e19d      	b.n	80030ca <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d102      	bne.n	8002da0 <lcdHLine2+0x118>
 8002d9a:	2322      	movs	r3, #34	; 0x22
 8002d9c:	75fb      	strb	r3, [r7, #23]
			break;
 8002d9e:	e194      	b.n	80030ca <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	f040 818e 	bne.w	80030ca <lcdHLine2+0x442>
 8002dae:	2311      	movs	r3, #17
 8002db0:	75fb      	strb	r3, [r7, #23]
			break;
 8002db2:	e18a      	b.n	80030ca <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <lcdHLine2+0x144>
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d102      	bne.n	8002dd2 <lcdHLine2+0x14a>
 8002dcc:	23aa      	movs	r3, #170	; 0xaa
 8002dce:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002dd0:	e17d      	b.n	80030ce <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <lcdHLine2+0x15c>
 8002dde:	2322      	movs	r3, #34	; 0x22
 8002de0:	75fb      	strb	r3, [r7, #23]
			break;
 8002de2:	e174      	b.n	80030ce <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	f040 816e 	bne.w	80030ce <lcdHLine2+0x446>
 8002df2:	2388      	movs	r3, #136	; 0x88
 8002df4:	75fb      	strb	r3, [r7, #23]
			break;
 8002df6:	e16a      	b.n	80030ce <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d005      	beq.n	8002e10 <lcdHLine2+0x188>
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d102      	bne.n	8002e16 <lcdHLine2+0x18e>
 8002e10:	2355      	movs	r3, #85	; 0x55
 8002e12:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002e14:	e15d      	b.n	80030d2 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <lcdHLine2+0x1a0>
 8002e22:	2388      	movs	r3, #136	; 0x88
 8002e24:	75fb      	strb	r3, [r7, #23]
			break;
 8002e26:	e154      	b.n	80030d2 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	f040 814e 	bne.w	80030d2 <lcdHLine2+0x44a>
 8002e36:	2322      	movs	r3, #34	; 0x22
 8002e38:	75fb      	strb	r3, [r7, #23]
			break;
 8002e3a:	e14a      	b.n	80030d2 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <lcdHLine2+0x1cc>
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d102      	bne.n	8002e5a <lcdHLine2+0x1d2>
 8002e54:	23cc      	movs	r3, #204	; 0xcc
 8002e56:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002e58:	e13d      	b.n	80030d6 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d006      	beq.n	8002e74 <lcdHLine2+0x1ec>
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	f040 8131 	bne.w	80030d6 <lcdHLine2+0x44e>
 8002e74:	2333      	movs	r3, #51	; 0x33
 8002e76:	75fb      	strb	r3, [r7, #23]
			break;
 8002e78:	e12d      	b.n	80030d6 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <lcdHLine2+0x204>
 8002e86:	2355      	movs	r3, #85	; 0x55
 8002e88:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8002e8a:	e126      	b.n	80030da <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8120 	beq.w	80030da <lcdHLine2+0x452>
 8002e9a:	23ff      	movs	r3, #255	; 0xff
 8002e9c:	75fb      	strb	r3, [r7, #23]
			break;
 8002e9e:	e11c      	b.n	80030da <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <lcdHLine2+0x22a>
 8002eac:	23cc      	movs	r3, #204	; 0xcc
 8002eae:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002eb0:	e11c      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <lcdHLine2+0x23c>
 8002ebe:	2344      	movs	r3, #68	; 0x44
 8002ec0:	75fb      	strb	r3, [r7, #23]
			break;
 8002ec2:	e113      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x00;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
			break;
 8002ec8:	e110      	b.n	80030ec <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <lcdHLine2+0x254>
 8002ed6:	23ee      	movs	r3, #238	; 0xee
 8002ed8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002eda:	e107      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d005      	beq.n	8002ef4 <lcdHLine2+0x26c>
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d102      	bne.n	8002efa <lcdHLine2+0x272>
 8002ef4:	2322      	movs	r3, #34	; 0x22
 8002ef6:	75fb      	strb	r3, [r7, #23]
			break;
 8002ef8:	e0f8      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]
			break;
 8002efe:	e0f5      	b.n	80030ec <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <lcdHLine2+0x28a>
 8002f0c:	23ff      	movs	r3, #255	; 0xff
 8002f0e:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002f10:	e0ec      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002f12:	2388      	movs	r3, #136	; 0x88
 8002f14:	75fb      	strb	r3, [r7, #23]
			break;
 8002f16:	e0e9      	b.n	80030ec <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <lcdHLine2+0x2a2>
 8002f24:	23aa      	movs	r3, #170	; 0xaa
 8002f26:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002f28:	e0d9      	b.n	80030de <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80d3 	beq.w	80030de <lcdHLine2+0x456>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
			break;
 8002f3c:	e0cf      	b.n	80030de <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <lcdHLine2+0x2ce>
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d102      	bne.n	8002f5c <lcdHLine2+0x2d4>
 8002f56:	23aa      	movs	r3, #170	; 0xaa
 8002f58:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002f5a:	e0c7      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <lcdHLine2+0x2e6>
 8002f68:	2344      	movs	r3, #68	; 0x44
 8002f6a:	75fb      	strb	r3, [r7, #23]
			break;
 8002f6c:	e0be      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
			break;
 8002f72:	e0bb      	b.n	80030ec <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <lcdHLine2+0x304>
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d102      	bne.n	8002f92 <lcdHLine2+0x30a>
 8002f8c:	23ee      	movs	r3, #238	; 0xee
 8002f8e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8002f90:	e0ac      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <lcdHLine2+0x31c>
 8002f9e:	23aa      	movs	r3, #170	; 0xaa
 8002fa0:	75fb      	strb	r3, [r7, #23]
			break;
 8002fa2:	e0a3      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x00;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
			break;
 8002fa8:	e0a0      	b.n	80030ec <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <lcdHLine2+0x33a>
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d102      	bne.n	8002fc8 <lcdHLine2+0x340>
 8002fc2:	2344      	movs	r3, #68	; 0x44
 8002fc4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002fc6:	e08c      	b.n	80030e2 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <lcdHLine2+0x352>
 8002fd4:	23aa      	movs	r3, #170	; 0xaa
 8002fd6:	75fb      	strb	r3, [r7, #23]
			break;
 8002fd8:	e083      	b.n	80030e2 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d17d      	bne.n	80030e2 <lcdHLine2+0x45a>
 8002fe6:	2311      	movs	r3, #17
 8002fe8:	75fb      	strb	r3, [r7, #23]
			break;
 8002fea:	e07a      	b.n	80030e2 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4baf      	ldr	r3, [pc, #700]	; (80032ac <lcdHLine2+0x624>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	0859      	lsrs	r1, r3, #1
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	440b      	add	r3, r1
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <lcdHLine2+0x382>
 8003004:	2355      	movs	r3, #85	; 0x55
 8003006:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8003008:	e06d      	b.n	80030e6 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4ba7      	ldr	r3, [pc, #668]	; (80032ac <lcdHLine2+0x624>)
 800300e:	fba3 1302 	umull	r1, r3, r3, r2
 8003012:	0859      	lsrs	r1, r3, #1
 8003014:	460b      	mov	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <lcdHLine2+0x3a0>
 8003022:	23aa      	movs	r3, #170	; 0xaa
 8003024:	75fb      	strb	r3, [r7, #23]
			break;
 8003026:	e05e      	b.n	80030e6 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	4ba0      	ldr	r3, [pc, #640]	; (80032ac <lcdHLine2+0x624>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	0859      	lsrs	r1, r3, #1
 8003032:	460b      	mov	r3, r1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	440b      	add	r3, r1
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d152      	bne.n	80030e6 <lcdHLine2+0x45e>
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
			break;
 8003044:	e04f      	b.n	80030e6 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <lcdHLine2+0x3d0>
 8003052:	2322      	movs	r3, #34	; 0x22
 8003054:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8003056:	e049      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <lcdHLine2+0x3e2>
 8003064:	2355      	movs	r3, #85	; 0x55
 8003066:	75fb      	strb	r3, [r7, #23]
			break;
 8003068:	e040      	b.n	80030ec <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d102      	bne.n	800307c <lcdHLine2+0x3f4>
 8003076:	2388      	movs	r3, #136	; 0x88
 8003078:	75fb      	strb	r3, [r7, #23]
			break;
 800307a:	e037      	b.n	80030ec <lcdHLine2+0x464>
			else pattern = 0x00;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
			break;
 8003080:	e034      	b.n	80030ec <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d005      	beq.n	800309a <lcdHLine2+0x412>
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d102      	bne.n	80030a0 <lcdHLine2+0x418>
 800309a:	2388      	movs	r3, #136	; 0x88
 800309c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 800309e:	e024      	b.n	80030ea <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <lcdHLine2+0x42a>
 80030ac:	2377      	movs	r3, #119	; 0x77
 80030ae:	75fb      	strb	r3, [r7, #23]
			break;
 80030b0:	e01b      	b.n	80030ea <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d115      	bne.n	80030ea <lcdHLine2+0x462>
 80030be:	23aa      	movs	r3, #170	; 0xaa
 80030c0:	75fb      	strb	r3, [r7, #23]
			break;
 80030c2:	e012      	b.n	80030ea <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
			break;
 80030c8:	e010      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030ca:	bf00      	nop
 80030cc:	e00e      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030ce:	bf00      	nop
 80030d0:	e00c      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030d2:	bf00      	nop
 80030d4:	e00a      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030d6:	bf00      	nop
 80030d8:	e008      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030da:	bf00      	nop
 80030dc:	e006      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030de:	bf00      	nop
 80030e0:	e004      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <lcdHLine2+0x464>
			break;
 80030ea:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	b29b      	uxth	r3, r3
 8003104:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8003106:	88bb      	ldrh	r3, [r7, #4]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	2232      	movs	r2, #50	; 0x32
 8003114:	fb03 f202 	mul.w	r2, r3, r2
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	4413      	add	r3, r2
 800311c:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <lcdHLine2+0x628>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2232      	movs	r2, #50	; 0x32
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	7b7b      	ldrb	r3, [r7, #13]
 800312c:	4413      	add	r3, r2
 800312e:	4a60      	ldr	r2, [pc, #384]	; (80032b0 <lcdHLine2+0x628>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8003134:	23ff      	movs	r3, #255	; 0xff
 8003136:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8003138:	7bbb      	ldrb	r3, [r7, #14]
 800313a:	f1c3 0208 	rsb	r2, r3, #8
 800313e:	88b9      	ldrh	r1, [r7, #4]
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	1acb      	subs	r3, r1, r3
 8003144:	3301      	adds	r3, #1
 8003146:	429a      	cmp	r2, r3
 8003148:	dd11      	ble.n	800316e <lcdHLine2+0x4e6>
 800314a:	88ba      	ldrh	r2, [r7, #4]
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	3301      	adds	r3, #1
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	fa42 f303 	asr.w	r3, r2, r3
 8003158:	43da      	mvns	r2, r3
 800315a:	7bbb      	ldrb	r3, [r7, #14]
 800315c:	fa42 f303 	asr.w	r3, r2, r3
 8003160:	b25a      	sxtb	r2, r3
 8003162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003166:	4013      	ands	r3, r2
 8003168:	b25b      	sxtb	r3, r3
 800316a:	753b      	strb	r3, [r7, #20]
 800316c:	e001      	b.n	8003172 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8003172:	78bb      	ldrb	r3, [r7, #2]
 8003174:	2b03      	cmp	r3, #3
 8003176:	f200 8130 	bhi.w	80033da <lcdHLine2+0x752>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <lcdHLine2+0x4f8>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	08003191 	.word	0x08003191
 8003184:	08003215 	.word	0x08003215
 8003188:	080032b5 	.word	0x080032b5
 800318c:	08003339 	.word	0x08003339
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	fa42 f303 	asr.w	r3, r2, r3
 8003198:	b25a      	sxtb	r2, r3
 800319a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800319e:	4013      	ands	r3, r2
 80031a0:	b25a      	sxtb	r2, r3
 80031a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80031ac:	7b3b      	ldrb	r3, [r7, #12]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	b25a      	sxtb	r2, r3
 80031ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031be:	4013      	ands	r3, r2
 80031c0:	b25a      	sxtb	r2, r3
 80031c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80031cc:	2301      	movs	r3, #1
 80031ce:	74fb      	strb	r3, [r7, #19]
 80031d0:	e019      	b.n	8003206 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	2232      	movs	r2, #50	; 0x32
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	441a      	add	r2, r3
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <lcdHLine2+0x628>)
 80031e4:	5cd1      	ldrb	r1, [r2, r3]
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	2232      	movs	r2, #50	; 0x32
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	441a      	add	r2, r3
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	4413      	add	r3, r2
 80031f6:	7dfa      	ldrb	r2, [r7, #23]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	b2d1      	uxtb	r1, r2
 80031fc:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <lcdHLine2+0x628>)
 80031fe:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	3301      	adds	r3, #1
 8003204:	74fb      	strb	r3, [r7, #19]
 8003206:	7cfa      	ldrb	r2, [r7, #19]
 8003208:	7b79      	ldrb	r1, [r7, #13]
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	1acb      	subs	r3, r1, r3
 800320e:	429a      	cmp	r2, r3
 8003210:	dbdf      	blt.n	80031d2 <lcdHLine2+0x54a>
			}
			break;
 8003212:	e0e2      	b.n	80033da <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	fa42 f303 	asr.w	r3, r2, r3
 800321c:	b25a      	sxtb	r2, r3
 800321e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003222:	4013      	ands	r3, r2
 8003224:	b25b      	sxtb	r3, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	b25a      	sxtb	r2, r3
 800322a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800322e:	4013      	ands	r3, r2
 8003230:	b25b      	sxtb	r3, r3
 8003232:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8003234:	7b3b      	ldrb	r3, [r7, #12]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	b25a      	sxtb	r2, r3
 8003242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003246:	4013      	ands	r3, r2
 8003248:	b25b      	sxtb	r3, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	b25a      	sxtb	r2, r3
 800324e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003252:	4013      	ands	r3, r2
 8003254:	b25b      	sxtb	r3, r3
 8003256:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003258:	2301      	movs	r3, #1
 800325a:	74bb      	strb	r3, [r7, #18]
 800325c:	e01e      	b.n	800329c <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	441a      	add	r2, r3
 800326a:	7cbb      	ldrb	r3, [r7, #18]
 800326c:	4413      	add	r3, r2
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <lcdHLine2+0x628>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	b25a      	sxtb	r2, r3
 8003274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003278:	43db      	mvns	r3, r3
 800327a:	b25b      	sxtb	r3, r3
 800327c:	4013      	ands	r3, r2
 800327e:	b259      	sxtb	r1, r3
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	2232      	movs	r2, #50	; 0x32
 8003284:	fb03 f202 	mul.w	r2, r3, r2
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	441a      	add	r2, r3
 800328c:	7cbb      	ldrb	r3, [r7, #18]
 800328e:	4413      	add	r3, r2
 8003290:	b2c9      	uxtb	r1, r1
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <lcdHLine2+0x628>)
 8003294:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003296:	7cbb      	ldrb	r3, [r7, #18]
 8003298:	3301      	adds	r3, #1
 800329a:	74bb      	strb	r3, [r7, #18]
 800329c:	7cba      	ldrb	r2, [r7, #18]
 800329e:	7b79      	ldrb	r1, [r7, #13]
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	1acb      	subs	r3, r1, r3
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dbda      	blt.n	800325e <lcdHLine2+0x5d6>
			}
			break;
 80032a8:	e097      	b.n	80033da <lcdHLine2+0x752>
 80032aa:	bf00      	nop
 80032ac:	aaaaaaab 	.word	0xaaaaaaab
 80032b0:	20002728 	.word	0x20002728
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 80032b4:	7bbb      	ldrb	r3, [r7, #14]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	fa42 f303 	asr.w	r3, r2, r3
 80032bc:	b25a      	sxtb	r2, r3
 80032be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80032c2:	4013      	ands	r3, r2
 80032c4:	b25a      	sxtb	r2, r3
 80032c6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032ca:	4053      	eors	r3, r2
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 80032d0:	7b3b      	ldrb	r3, [r7, #12]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	b25a      	sxtb	r2, r3
 80032de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e2:	4013      	ands	r3, r2
 80032e4:	b25a      	sxtb	r2, r3
 80032e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80032ea:	4053      	eors	r3, r2
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80032f0:	2301      	movs	r3, #1
 80032f2:	747b      	strb	r3, [r7, #17]
 80032f4:	e019      	b.n	800332a <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	fb03 f202 	mul.w	r2, r3, r2
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	441a      	add	r2, r3
 8003302:	7c7b      	ldrb	r3, [r7, #17]
 8003304:	4413      	add	r3, r2
 8003306:	4a42      	ldr	r2, [pc, #264]	; (8003410 <lcdHLine2+0x788>)
 8003308:	5cd1      	ldrb	r1, [r2, r3]
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	2232      	movs	r2, #50	; 0x32
 800330e:	fb03 f202 	mul.w	r2, r3, r2
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	441a      	add	r2, r3
 8003316:	7c7b      	ldrb	r3, [r7, #17]
 8003318:	4413      	add	r3, r2
 800331a:	7dfa      	ldrb	r2, [r7, #23]
 800331c:	404a      	eors	r2, r1
 800331e:	b2d1      	uxtb	r1, r2
 8003320:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <lcdHLine2+0x788>)
 8003322:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003324:	7c7b      	ldrb	r3, [r7, #17]
 8003326:	3301      	adds	r3, #1
 8003328:	747b      	strb	r3, [r7, #17]
 800332a:	7c7a      	ldrb	r2, [r7, #17]
 800332c:	7b79      	ldrb	r1, [r7, #13]
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	1acb      	subs	r3, r1, r3
 8003332:	429a      	cmp	r2, r3
 8003334:	dbdf      	blt.n	80032f6 <lcdHLine2+0x66e>
			}
			break;
 8003336:	e050      	b.n	80033da <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	fa42 f303 	asr.w	r3, r2, r3
 8003340:	b25a      	sxtb	r2, r3
 8003342:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003346:	4013      	ands	r3, r2
 8003348:	b25a      	sxtb	r2, r3
 800334a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800334e:	43db      	mvns	r3, r3
 8003350:	b259      	sxtb	r1, r3
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	f1c3 0308 	rsb	r3, r3, #8
 8003358:	20ff      	movs	r0, #255	; 0xff
 800335a:	fa00 f303 	lsl.w	r3, r0, r3
 800335e:	b25b      	sxtb	r3, r3
 8003360:	400b      	ands	r3, r1
 8003362:	b25b      	sxtb	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b25b      	sxtb	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 800336e:	7b3b      	ldrb	r3, [r7, #12]
 8003370:	f1c3 0307 	rsb	r3, r3, #7
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	b25a      	sxtb	r2, r3
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	4013      	ands	r3, r2
 8003382:	b25a      	sxtb	r2, r3
 8003384:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003388:	43db      	mvns	r3, r3
 800338a:	b259      	sxtb	r1, r3
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	20ff      	movs	r0, #255	; 0xff
 8003392:	fa40 f303 	asr.w	r3, r0, r3
 8003396:	b25b      	sxtb	r3, r3
 8003398:	400b      	ands	r3, r1
 800339a:	b25b      	sxtb	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80033a6:	2301      	movs	r3, #1
 80033a8:	743b      	strb	r3, [r7, #16]
 80033aa:	e00f      	b.n	80033cc <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	2232      	movs	r2, #50	; 0x32
 80033b0:	fb03 f202 	mul.w	r2, r3, r2
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	441a      	add	r2, r3
 80033b8:	7c3b      	ldrb	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	7dfa      	ldrb	r2, [r7, #23]
 80033be:	43d2      	mvns	r2, r2
 80033c0:	b2d1      	uxtb	r1, r2
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <lcdHLine2+0x788>)
 80033c4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80033c6:	7c3b      	ldrb	r3, [r7, #16]
 80033c8:	3301      	adds	r3, #1
 80033ca:	743b      	strb	r3, [r7, #16]
 80033cc:	7c3a      	ldrb	r2, [r7, #16]
 80033ce:	7b79      	ldrb	r1, [r7, #13]
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	1acb      	subs	r3, r1, r3
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbe9      	blt.n	80033ac <lcdHLine2+0x724>
			}
			break;
 80033d8:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	2232      	movs	r2, #50	; 0x32
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	4413      	add	r3, r2
 80033e6:	490a      	ldr	r1, [pc, #40]	; (8003410 <lcdHLine2+0x788>)
 80033e8:	7dba      	ldrb	r2, [r7, #22]
 80033ea:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 80033ec:	7b7a      	ldrb	r2, [r7, #13]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d908      	bls.n	8003406 <lcdHLine2+0x77e>
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2232      	movs	r2, #50	; 0x32
 80033f8:	fb03 f202 	mul.w	r2, r3, r2
 80033fc:	7b7b      	ldrb	r3, [r7, #13]
 80033fe:	4413      	add	r3, r2
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <lcdHLine2+0x788>)
 8003402:	7d7a      	ldrb	r2, [r7, #21]
 8003404:	54ca      	strb	r2, [r1, r3]
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bc90      	pop	{r4, r7}
 800340e:	4770      	bx	lr
 8003410:	20002728 	.word	0x20002728

08003414 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003414:	b490      	push	{r4, r7}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	4604      	mov	r4, r0
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	80fb      	strh	r3, [r7, #6]
 8003426:	4603      	mov	r3, r0
 8003428:	80bb      	strh	r3, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	70fb      	strb	r3, [r7, #3]
 800342e:	4613      	mov	r3, r2
 8003430:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	b29b      	uxth	r3, r3
 8003438:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	08db      	lsrs	r3, r3, #3
 8003448:	b29b      	uxth	r3, r3
 800344a:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 800344c:	88bb      	ldrh	r3, [r7, #4]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	2232      	movs	r2, #50	; 0x32
 800345a:	fb03 f202 	mul.w	r2, r3, r2
 800345e:	7c7b      	ldrb	r3, [r7, #17]
 8003460:	4413      	add	r3, r2
 8003462:	4a71      	ldr	r2, [pc, #452]	; (8003628 <lcdHLine+0x214>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	2232      	movs	r2, #50	; 0x32
 800346c:	fb03 f202 	mul.w	r2, r3, r2
 8003470:	7c7b      	ldrb	r3, [r7, #17]
 8003472:	441a      	add	r2, r3
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4413      	add	r3, r2
 8003478:	4a6b      	ldr	r2, [pc, #428]	; (8003628 <lcdHLine+0x214>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 800347e:	23ff      	movs	r3, #255	; 0xff
 8003480:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8003482:	7c3b      	ldrb	r3, [r7, #16]
 8003484:	f1c3 0208 	rsb	r2, r3, #8
 8003488:	88b9      	ldrh	r1, [r7, #4]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	1acb      	subs	r3, r1, r3
 800348e:	3301      	adds	r3, #1
 8003490:	429a      	cmp	r2, r3
 8003492:	dd09      	ble.n	80034a8 <lcdHLine+0x94>
 8003494:	88ba      	ldrh	r2, [r7, #4]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	3301      	adds	r3, #1
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	fa42 f303 	asr.w	r3, r2, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	757b      	strb	r3, [r7, #21]
	switch(mode){
 80034a8:	78bb      	ldrb	r3, [r7, #2]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d067      	beq.n	800357e <lcdHLine+0x16a>
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	f300 809e 	bgt.w	80035f0 <lcdHLine+0x1dc>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <lcdHLine+0xaa>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d02e      	beq.n	800351a <lcdHLine+0x106>
 80034bc:	e098      	b.n	80035f0 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 80034be:	7d7a      	ldrb	r2, [r7, #21]
 80034c0:	7c3b      	ldrb	r3, [r7, #16]
 80034c2:	fa42 f303 	asr.w	r3, r2, r3
 80034c6:	b25a      	sxtb	r2, r3
 80034c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	f1c3 0307 	rsb	r3, r3, #7
 80034d8:	22ff      	movs	r2, #255	; 0xff
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	b25a      	sxtb	r2, r3
 80034e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034ea:	2301      	movs	r3, #1
 80034ec:	753b      	strb	r3, [r7, #20]
 80034ee:	e00d      	b.n	800350c <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	2232      	movs	r2, #50	; 0x32
 80034f4:	fb03 f202 	mul.w	r2, r3, r2
 80034f8:	7c7b      	ldrb	r3, [r7, #17]
 80034fa:	441a      	add	r2, r3
 80034fc:	7d3b      	ldrb	r3, [r7, #20]
 80034fe:	4413      	add	r3, r2
 8003500:	4a49      	ldr	r2, [pc, #292]	; (8003628 <lcdHLine+0x214>)
 8003502:	21ff      	movs	r1, #255	; 0xff
 8003504:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003506:	7d3b      	ldrb	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	753b      	strb	r3, [r7, #20]
 800350c:	7d3a      	ldrb	r2, [r7, #20]
 800350e:	7bf9      	ldrb	r1, [r7, #15]
 8003510:	7c7b      	ldrb	r3, [r7, #17]
 8003512:	1acb      	subs	r3, r1, r3
 8003514:	429a      	cmp	r2, r3
 8003516:	dbeb      	blt.n	80034f0 <lcdHLine+0xdc>
		}
		break;
 8003518:	e06a      	b.n	80035f0 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 800351a:	7d7a      	ldrb	r2, [r7, #21]
 800351c:	7c3b      	ldrb	r3, [r7, #16]
 800351e:	fa42 f303 	asr.w	r3, r2, r3
 8003522:	b25b      	sxtb	r3, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	b25a      	sxtb	r2, r3
 8003528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800352c:	4013      	ands	r3, r2
 800352e:	b25b      	sxtb	r3, r3
 8003530:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003532:	7bbb      	ldrb	r3, [r7, #14]
 8003534:	f1c3 0307 	rsb	r3, r3, #7
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	b25b      	sxtb	r3, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	b25a      	sxtb	r2, r3
 8003544:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003548:	4013      	ands	r3, r2
 800354a:	b25b      	sxtb	r3, r3
 800354c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800354e:	2301      	movs	r3, #1
 8003550:	74fb      	strb	r3, [r7, #19]
 8003552:	e00d      	b.n	8003570 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	2232      	movs	r2, #50	; 0x32
 8003558:	fb03 f202 	mul.w	r2, r3, r2
 800355c:	7c7b      	ldrb	r3, [r7, #17]
 800355e:	441a      	add	r2, r3
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	4413      	add	r3, r2
 8003564:	4a30      	ldr	r2, [pc, #192]	; (8003628 <lcdHLine+0x214>)
 8003566:	2100      	movs	r1, #0
 8003568:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	3301      	adds	r3, #1
 800356e:	74fb      	strb	r3, [r7, #19]
 8003570:	7cfa      	ldrb	r2, [r7, #19]
 8003572:	7bf9      	ldrb	r1, [r7, #15]
 8003574:	7c7b      	ldrb	r3, [r7, #17]
 8003576:	1acb      	subs	r3, r1, r3
 8003578:	429a      	cmp	r2, r3
 800357a:	dbeb      	blt.n	8003554 <lcdHLine+0x140>
		}
		break;
 800357c:	e038      	b.n	80035f0 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 800357e:	7d7a      	ldrb	r2, [r7, #21]
 8003580:	7c3b      	ldrb	r3, [r7, #16]
 8003582:	fa42 f303 	asr.w	r3, r2, r3
 8003586:	b25a      	sxtb	r2, r3
 8003588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800358c:	4053      	eors	r3, r2
 800358e:	b25b      	sxtb	r3, r3
 8003590:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003592:	7bbb      	ldrb	r3, [r7, #14]
 8003594:	f1c3 0307 	rsb	r3, r3, #7
 8003598:	22ff      	movs	r2, #255	; 0xff
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	b25a      	sxtb	r2, r3
 80035a0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035a4:	4053      	eors	r3, r2
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80035aa:	2301      	movs	r3, #1
 80035ac:	74bb      	strb	r3, [r7, #18]
 80035ae:	e018      	b.n	80035e2 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	2232      	movs	r2, #50	; 0x32
 80035b4:	fb03 f202 	mul.w	r2, r3, r2
 80035b8:	7c7b      	ldrb	r3, [r7, #17]
 80035ba:	441a      	add	r2, r3
 80035bc:	7cbb      	ldrb	r3, [r7, #18]
 80035be:	4413      	add	r3, r2
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <lcdHLine+0x214>)
 80035c2:	5cd2      	ldrb	r2, [r2, r3]
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	2132      	movs	r1, #50	; 0x32
 80035c8:	fb03 f101 	mul.w	r1, r3, r1
 80035cc:	7c7b      	ldrb	r3, [r7, #17]
 80035ce:	4419      	add	r1, r3
 80035d0:	7cbb      	ldrb	r3, [r7, #18]
 80035d2:	440b      	add	r3, r1
 80035d4:	43d2      	mvns	r2, r2
 80035d6:	b2d1      	uxtb	r1, r2
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <lcdHLine+0x214>)
 80035da:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80035dc:	7cbb      	ldrb	r3, [r7, #18]
 80035de:	3301      	adds	r3, #1
 80035e0:	74bb      	strb	r3, [r7, #18]
 80035e2:	7cba      	ldrb	r2, [r7, #18]
 80035e4:	7bf9      	ldrb	r1, [r7, #15]
 80035e6:	7c7b      	ldrb	r3, [r7, #17]
 80035e8:	1acb      	subs	r3, r1, r3
 80035ea:	429a      	cmp	r2, r3
 80035ec:	dbe0      	blt.n	80035b0 <lcdHLine+0x19c>
		}
		break;
 80035ee:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	2232      	movs	r2, #50	; 0x32
 80035f4:	fb03 f202 	mul.w	r2, r3, r2
 80035f8:	7c7b      	ldrb	r3, [r7, #17]
 80035fa:	4413      	add	r3, r2
 80035fc:	490a      	ldr	r1, [pc, #40]	; (8003628 <lcdHLine+0x214>)
 80035fe:	7dfa      	ldrb	r2, [r7, #23]
 8003600:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	7c7b      	ldrb	r3, [r7, #17]
 8003606:	429a      	cmp	r2, r3
 8003608:	d908      	bls.n	800361c <lcdHLine+0x208>
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	2232      	movs	r2, #50	; 0x32
 800360e:	fb03 f202 	mul.w	r2, r3, r2
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	4413      	add	r3, r2
 8003616:	4904      	ldr	r1, [pc, #16]	; (8003628 <lcdHLine+0x214>)
 8003618:	7dba      	ldrb	r2, [r7, #22]
 800361a:	54ca      	strb	r2, [r1, r3]
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bc90      	pop	{r4, r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20002728 	.word	0x20002728

0800362c <lcdRefresh>:

void lcdRefresh(void){
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <lcdRefresh+0x7c>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d032      	beq.n	80036a0 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 800363a:	2201      	movs	r2, #1
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	481b      	ldr	r0, [pc, #108]	; (80036ac <lcdRefresh+0x80>)
 8003640:	f005 f95c 	bl	80088fc <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003644:	2301      	movs	r3, #1
 8003646:	71fb      	strb	r3, [r7, #7]
 8003648:	e01c      	b.n	8003684 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f8eb 	bl	8002828 <reverse_uint8>
 8003652:	4603      	mov	r3, r0
 8003654:	461a      	mov	r2, r3
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <lcdRefresh+0x84>)
 8003658:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 800365a:	2396      	movs	r3, #150	; 0x96
 800365c:	2202      	movs	r2, #2
 800365e:	4914      	ldr	r1, [pc, #80]	; (80036b0 <lcdRefresh+0x84>)
 8003660:	4814      	ldr	r0, [pc, #80]	; (80036b4 <lcdRefresh+0x88>)
 8003662:	f008 fb44 	bl	800bcee <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	3b01      	subs	r3, #1
 800366a:	2232      	movs	r2, #50	; 0x32
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <lcdRefresh+0x8c>)
 8003672:	1899      	adds	r1, r3, r2
 8003674:	2396      	movs	r3, #150	; 0x96
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	480e      	ldr	r0, [pc, #56]	; (80036b4 <lcdRefresh+0x88>)
 800367a:	f008 fb38 	bl	800bcee <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	3301      	adds	r3, #1
 8003682:	71fb      	strb	r3, [r7, #7]
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2bf1      	cmp	r3, #241	; 0xf1
 8003688:	d9df      	bls.n	800364a <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 800368a:	2396      	movs	r3, #150	; 0x96
 800368c:	2202      	movs	r2, #2
 800368e:	490b      	ldr	r1, [pc, #44]	; (80036bc <lcdRefresh+0x90>)
 8003690:	4808      	ldr	r0, [pc, #32]	; (80036b4 <lcdRefresh+0x88>)
 8003692:	f008 fb2c 	bl	800bcee <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003696:	2200      	movs	r2, #0
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	4804      	ldr	r0, [pc, #16]	; (80036ac <lcdRefresh+0x80>)
 800369c:	f005 f92e 	bl	80088fc <HAL_GPIO_WritePin>
	}
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000144 	.word	0x20000144
 80036ac:	40020000 	.word	0x40020000
 80036b0:	20000148 	.word	0x20000148
 80036b4:	20005ac4 	.word	0x20005ac4
 80036b8:	20002728 	.word	0x20002728
 80036bc:	20002724 	.word	0x20002724

080036c0 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	80fb      	strh	r3, [r7, #6]
 80036d2:	4603      	mov	r3, r0
 80036d4:	80bb      	strh	r3, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
 80036da:	4613      	mov	r3, r2
 80036dc:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e009      	b.n	80036f8 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 80036e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	88b9      	ldrh	r1, [r7, #4]
 80036ec:	88f8      	ldrh	r0, [r7, #6]
 80036ee:	f7ff fe91 	bl	8003414 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	3301      	adds	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	78bb      	ldrb	r3, [r7, #2]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d9f1      	bls.n	80036e4 <lcdRect+0x24>
	}
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}

0800370a <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 800370a:	b590      	push	{r4, r7, lr}
 800370c:	b087      	sub	sp, #28
 800370e:	af02      	add	r7, sp, #8
 8003710:	4604      	mov	r4, r0
 8003712:	4608      	mov	r0, r1
 8003714:	4611      	mov	r1, r2
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	80fb      	strh	r3, [r7, #6]
 800371c:	4603      	mov	r3, r0
 800371e:	80bb      	strh	r3, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	4613      	mov	r3, r2
 8003726:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	88bb      	ldrh	r3, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d046      	beq.n	80037be <lcdRect2+0xb4>
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	78bb      	ldrb	r3, [r7, #2]
 8003734:	429a      	cmp	r2, r3
 8003736:	d042      	beq.n	80037be <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e00d      	b.n	800375a <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 800373e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	88b9      	ldrh	r1, [r7, #4]
 8003746:	88f8      	ldrh	r0, [r7, #6]
 8003748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4623      	mov	r3, r4
 8003750:	f7ff fa9a 	bl	8002c88 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	3301      	adds	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	78bb      	ldrb	r3, [r7, #2]
 800375e:	429a      	cmp	r2, r3
 8003760:	d9ed      	bls.n	800373e <lcdRect2+0x34>
		}
		if(outline){
 8003762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d029      	beq.n	80037be <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 800376a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	88b9      	ldrh	r1, [r7, #4]
 8003772:	88f8      	ldrh	r0, [r7, #6]
 8003774:	2401      	movs	r4, #1
 8003776:	9400      	str	r4, [sp, #0]
 8003778:	f7ff fa86 	bl	8002c88 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 800377c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003780:	78ba      	ldrb	r2, [r7, #2]
 8003782:	88b9      	ldrh	r1, [r7, #4]
 8003784:	88f8      	ldrh	r0, [r7, #6]
 8003786:	2401      	movs	r4, #1
 8003788:	9400      	str	r4, [sp, #0]
 800378a:	f7ff fa7d 	bl	8002c88 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	b29b      	uxth	r3, r3
 8003792:	3301      	adds	r3, #1
 8003794:	b299      	uxth	r1, r3
 8003796:	78bb      	ldrb	r3, [r7, #2]
 8003798:	3b01      	subs	r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037a0:	88f8      	ldrh	r0, [r7, #6]
 80037a2:	f7ff f9fb 	bl	8002b9c <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	b299      	uxth	r1, r3
 80037ae:	78bb      	ldrb	r3, [r7, #2]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037b8:	88b8      	ldrh	r0, [r7, #4]
 80037ba:	f7ff f9ef 	bl	8002b9c <lcdVLine>
		}
	}
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}

080037c6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037d2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d013      	beq.n	8003806 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80037de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037e2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80037e6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80037ee:	e000      	b.n	80037f2 <ITM_SendChar+0x2c>
    {
      __NOP();
 80037f0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80037f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f9      	beq.n	80037f0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80037fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ffd1 	bl	80037c6 <ITM_SendChar>
	return(ch);
 8003824:	687b      	ldr	r3, [r7, #4]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003838:	f004 fc6e 	bl	8008118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800383c:	f000 f8a6 	bl	800398c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003840:	f7fe fa20 	bl	8001c84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003844:	f000 fed0 	bl	80045e8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003848:	f000 fa7e 	bl	8003d48 <MX_SPI1_Init>
  MX_TIM1_Init();
 800384c:	f000 fcfa 	bl	8004244 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003850:	f000 fd9a 	bl	8004388 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003854:	f7fe ff60 	bl	8002718 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003858:	f000 fdba 	bl	80043d0 <MX_TIM11_Init>
  MX_RTC_Init();
 800385c:	f000 f992 	bl	8003b84 <MX_RTC_Init>
  MX_TIM13_Init();
 8003860:	f000 fdda 	bl	8004418 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003864:	f000 f9e8 	bl	8003c38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003868:	f00a ff6a 	bl	800e740 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800386c:	f000 fee6 	bl	800463c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003870:	4834      	ldr	r0, [pc, #208]	; (8003944 <main+0x114>)
 8003872:	f008 fc43 	bl	800c0fc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003876:	4833      	ldr	r0, [pc, #204]	; (8003944 <main+0x114>)
 8003878:	f008 fc90 	bl	800c19c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800387c:	2100      	movs	r1, #0
 800387e:	4831      	ldr	r0, [pc, #196]	; (8003944 <main+0x114>)
 8003880:	f008 fd84 	bl	800c38c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003884:	4830      	ldr	r0, [pc, #192]	; (8003948 <main+0x118>)
 8003886:	f008 fc89 	bl	800c19c <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 800388a:	4830      	ldr	r0, [pc, #192]	; (800394c <main+0x11c>)
 800388c:	f7fe f84c 	bl	8001928 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003890:	482f      	ldr	r0, [pc, #188]	; (8003950 <main+0x120>)
 8003892:	f008 fc83 	bl	800c19c <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003896:	4c2f      	ldr	r4, [pc, #188]	; (8003954 <main+0x124>)
 8003898:	463b      	mov	r3, r7
 800389a:	492f      	ldr	r1, [pc, #188]	; (8003958 <main+0x128>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fb41 	bl	8001f24 <initGps>
 80038a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80038a6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80038aa:	4620      	mov	r0, r4
 80038ac:	4619      	mov	r1, r3
 80038ae:	f44f 7319 	mov.w	r3, #612	; 0x264
 80038b2:	461a      	mov	r2, r3
 80038b4:	f00d faea 	bl	8010e8c <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 80038b8:	4828      	ldr	r0, [pc, #160]	; (800395c <main+0x12c>)
 80038ba:	f7fd fd77 	bl	80013ac <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 80038be:	f240 118f 	movw	r1, #399	; 0x18f
 80038c2:	4827      	ldr	r0, [pc, #156]	; (8003960 <main+0x130>)
 80038c4:	f004 fae1 	bl	8007e8a <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 80038c8:	f240 128f 	movw	r2, #399	; 0x18f
 80038cc:	2102      	movs	r1, #2
 80038ce:	4825      	ldr	r0, [pc, #148]	; (8003964 <main+0x134>)
 80038d0:	f004 fa1e 	bl	8007d10 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80038d4:	2201      	movs	r2, #1
 80038d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038da:	4823      	ldr	r0, [pc, #140]	; (8003968 <main+0x138>)
 80038dc:	f005 f80e 	bl	80088fc <HAL_GPIO_WritePin>

	printf("Hello");
 80038e0:	4822      	ldr	r0, [pc, #136]	; (800396c <main+0x13c>)
 80038e2:	f00e fbff 	bl	80120e4 <iprintf>

  	Mount_SD("/");
 80038e6:	4822      	ldr	r0, [pc, #136]	; (8003970 <main+0x140>)
 80038e8:	f7fd fba6 	bl	8001038 <Mount_SD>
  	Create_File("FILE1.TXT");
 80038ec:	4821      	ldr	r0, [pc, #132]	; (8003974 <main+0x144>)
 80038ee:	f7fd fbf9 	bl	80010e4 <Create_File>
  	Create_File("FILE2.TXT");
 80038f2:	4821      	ldr	r0, [pc, #132]	; (8003978 <main+0x148>)
 80038f4:	f7fd fbf6 	bl	80010e4 <Create_File>
  	Unmount_SD("/");
 80038f8:	481d      	ldr	r0, [pc, #116]	; (8003970 <main+0x140>)
 80038fa:	f7fd fbdf 	bl	80010bc <Unmount_SD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80038fe:	f7fe ffbd 	bl	800287c <lcdClearBuffer>
  lcdRefresh();
 8003902:	f7ff fe93 	bl	800362c <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8003906:	4c1d      	ldr	r4, [pc, #116]	; (800397c <main+0x14c>)
 8003908:	463b      	mov	r3, r7
 800390a:	4914      	ldr	r1, [pc, #80]	; (800395c <main+0x12c>)
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd ffb3 	bl	8001878 <getBmpData>
 8003912:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003916:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800391a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800391c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003920:	2200      	movs	r2, #0
 8003922:	4917      	ldr	r1, [pc, #92]	; (8003980 <main+0x150>)
 8003924:	4817      	ldr	r0, [pc, #92]	; (8003984 <main+0x154>)
 8003926:	f006 ffe3 	bl	800a8f0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800392a:	2200      	movs	r2, #0
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <main+0x158>)
 800392e:	4815      	ldr	r0, [pc, #84]	; (8003984 <main+0x154>)
 8003930:	f007 f8c0 	bl	800aab4 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 8003934:	f7fe ffa2 	bl	800287c <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8003938:	f7fe fed0 	bl	80026dc <showGui>

	  lcdRefresh();
 800393c:	f7ff fe76 	bl	800362c <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 8003940:	e7e1      	b.n	8003906 <main+0xd6>
 8003942:	bf00      	nop
 8003944:	20005b28 	.word	0x20005b28
 8003948:	20005bb8 	.word	0x20005bb8
 800394c:	2000002c 	.word	0x2000002c
 8003950:	20005c00 	.word	0x20005c00
 8003954:	200057bc 	.word	0x200057bc
 8003958:	20005c8c 	.word	0x20005c8c
 800395c:	2000259c 	.word	0x2000259c
 8003960:	200057ac 	.word	0x200057ac
 8003964:	20005798 	.word	0x20005798
 8003968:	40020800 	.word	0x40020800
 800396c:	08019f10 	.word	0x08019f10
 8003970:	08019f18 	.word	0x08019f18
 8003974:	08019f1c 	.word	0x08019f1c
 8003978:	08019f28 	.word	0x08019f28
 800397c:	200025e0 	.word	0x200025e0
 8003980:	20005780 	.word	0x20005780
 8003984:	20005a20 	.word	0x20005a20
 8003988:	20005794 	.word	0x20005794

0800398c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b094      	sub	sp, #80	; 0x50
 8003990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003992:	f107 0320 	add.w	r3, r7, #32
 8003996:	2230      	movs	r2, #48	; 0x30
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f00d fa84 	bl	8010ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <SystemClock_Config+0xd0>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <SystemClock_Config+0xd0>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	6413      	str	r3, [r2, #64]	; 0x40
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <SystemClock_Config+0xd0>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039cc:	2300      	movs	r3, #0
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <SystemClock_Config+0xd4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <SystemClock_Config+0xd4>)
 80039d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <SystemClock_Config+0xd4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80039e8:	2305      	movs	r3, #5
 80039ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80039ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039f2:	2301      	movs	r3, #1
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039f6:	2302      	movs	r3, #2
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a00:	2304      	movs	r3, #4
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a04:	23a8      	movs	r3, #168	; 0xa8
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a0c:	2307      	movs	r3, #7
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a10:	f107 0320 	add.w	r3, r7, #32
 8003a14:	4618      	mov	r0, r3
 8003a16:	f006 f803 	bl	8009a20 <HAL_RCC_OscConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a20:	f000 f8a2 	bl	8003b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a24:	230f      	movs	r3, #15
 8003a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	2105      	movs	r1, #5
 8003a42:	4618      	mov	r0, r3
 8003a44:	f006 fa64 	bl	8009f10 <HAL_RCC_ClockConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003a4e:	f000 f88b 	bl	8003b68 <Error_Handler>
  }
}
 8003a52:	bf00      	nop
 8003a54:	3750      	adds	r7, #80	; 0x50
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000

08003a64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d108      	bne.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003a84:	f000 fab2 	bl	8003fec <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d102      	bne.n	8003a98 <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003a92:	4822      	ldr	r0, [pc, #136]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003a94:	f7fe f8dc 	bl	8001c50 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d131      	bne.n	8003b06 <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003aa4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x52>
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003aae:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003ab2:	481c      	ldr	r0, [pc, #112]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003ab4:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	481b      	ldr	r0, [pc, #108]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003aba:	f004 ff38 	bl	800892e <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003ac0:	7b1b      	ldrb	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad8:	ee17 1a90 	vmov	r1, s15
 8003adc:	4813      	ldr	r0, [pc, #76]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003ade:	f004 fa0a 	bl	8007ef6 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003af4:	7c1b      	ldrb	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003afa:	f107 030e 	add.w	r3, r7, #14
 8003afe:	4619      	mov	r1, r3
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003b02:	f004 f942 	bl	8007d8a <cbuf_ovw>

	}
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40014400 	.word	0x40014400
 8003b14:	20005b1c 	.word	0x20005b1c
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	2000002c 	.word	0x2000002c
 8003b20:	40001c00 	.word	0x40001c00
 8003b24:	200057bc 	.word	0x200057bc
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	200057ac 	.word	0x200057ac
 8003b30:	200025e0 	.word	0x200025e0
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	20005798 	.word	0x20005798

08003b3c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <HAL_UART_RxCpltCallback+0x24>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d103      	bne.n	8003b56 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <HAL_UART_RxCpltCallback+0x28>)
 8003b52:	f004 feec 	bl	800892e <HAL_GPIO_TogglePin>

	}
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40011400 	.word	0x40011400
 8003b64:	40020400 	.word	0x40020400

08003b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6c:	b672      	cpsid	i
}
 8003b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b76:	4802      	ldr	r0, [pc, #8]	; (8003b80 <Error_Handler+0x18>)
 8003b78:	f004 fec0 	bl	80088fc <HAL_GPIO_WritePin>
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <Error_Handler+0x14>
 8003b7e:	bf00      	nop
 8003b80:	40020400 	.word	0x40020400

08003b84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003b8a:	1d3b      	adds	r3, r7, #4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003b98:	2300      	movs	r3, #0
 8003b9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <MX_RTC_Init+0x58>)
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <MX_RTC_Init+0x5c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_RTC_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <MX_RTC_Init+0x58>)
 8003baa:	227f      	movs	r2, #127	; 0x7f
 8003bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <MX_RTC_Init+0x58>)
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <MX_RTC_Init+0x58>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <MX_RTC_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <MX_RTC_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <MX_RTC_Init+0x58>)
 8003bc8:	f006 fd82 	bl	800a6d0 <HAL_RTC_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003bd2:	f7ff ffc9 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20005a20 	.word	0x20005a20
 8003be0:	40002800 	.word	0x40002800

08003be4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	2230      	movs	r2, #48	; 0x30
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00d f957 	bl	8010ea8 <memset>
  if(rtcHandle->Instance==RTC)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_RTC_MspInit+0x4c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c04:	2320      	movs	r3, #32
 8003c06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4618      	mov	r0, r3
 8003c14:	f006 fb9c 	bl	800a350 <HAL_RCCEx_PeriphCLKConfig>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003c1e:	f7ff ffa3 	bl	8003b68 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_RTC_MspInit+0x50>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3738      	adds	r7, #56	; 0x38
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40002800 	.word	0x40002800
 8003c34:	42470e3c 	.word	0x42470e3c

08003c38 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <MX_SDIO_SD_Init+0x3c>)
 8003c40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <MX_SDIO_SD_Init+0x38>)
 8003c62:	2204      	movs	r2, #4
 8003c64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20005a40 	.word	0x20005a40
 8003c74:	40012c00 	.word	0x40012c00

08003c78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_SD_MspInit+0xc0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d14a      	bne.n	8003d30 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <HAL_SD_MspInit+0xc4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003cee:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003d00:	230c      	movs	r3, #12
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	4619      	mov	r1, r3
 8003d0a:	480d      	ldr	r0, [pc, #52]	; (8003d40 <HAL_SD_MspInit+0xc8>)
 8003d0c:	f004 fc32 	bl	8008574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d10:	2304      	movs	r3, #4
 8003d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003d20:	230c      	movs	r3, #12
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4806      	ldr	r0, [pc, #24]	; (8003d44 <HAL_SD_MspInit+0xcc>)
 8003d2c:	f004 fc22 	bl	8008574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003d30:	bf00      	nop
 8003d32:	3728      	adds	r7, #40	; 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020800 	.word	0x40020800
 8003d44:	40020c00 	.word	0x40020c00

08003d48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <MX_SPI1_Init+0x68>)
 8003d50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d94:	220a      	movs	r2, #10
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d98:	4804      	ldr	r0, [pc, #16]	; (8003dac <MX_SPI1_Init+0x64>)
 8003d9a:	f007 ff1f 	bl	800bbdc <HAL_SPI_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003da4:	f7ff fee0 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20005ac4 	.word	0x20005ac4
 8003db0:	40013000 	.word	0x40013000

08003db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_SPI_MspInit+0x84>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d12b      	bne.n	8003e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_SPI_MspInit+0x88>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003e0e:	23a0      	movs	r3, #160	; 0xa0
 8003e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e1e:	2305      	movs	r3, #5
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4619      	mov	r1, r3
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <HAL_SPI_MspInit+0x8c>)
 8003e2a:	f004 fba3 	bl	8008574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3728      	adds	r7, #40	; 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40013000 	.word	0x40013000
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e58:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_MspInit+0x4c>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e98:	e7fe      	b.n	8003e98 <NMI_Handler+0x4>

08003e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8003e9e:	f7ff fe63 	bl	8003b68 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x8>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee4:	f004 f96a 	bl	80081bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003ef2:	f008 fb13 	bl	800c51c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003ef6:	4803      	ldr	r0, [pc, #12]	; (8003f04 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003ef8:	f008 fb10 	bl	800c51c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20005b28 	.word	0x20005b28
 8003f04:	20005b70 	.word	0x20005b70

08003f08 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f0c:	4803      	ldr	r0, [pc, #12]	; (8003f1c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003f0e:	f008 fb05 	bl	800c51c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003f12:	4803      	ldr	r0, [pc, #12]	; (8003f20 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003f14:	f008 fb02 	bl	800c51c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20005b28 	.word	0x20005b28
 8003f20:	20005bb8 	.word	0x20005bb8

08003f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8003f28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f2c:	f004 fd1a 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003f30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f34:	f004 fd16 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003f38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f3c:	f004 fd12 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003f40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f44:	f004 fd0e 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f4c:	f004 fd0a 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003f50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f54:	f004 fd06 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003f62:	f008 fadb 	bl	800c51c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20005c00 	.word	0x20005c00

08003f70 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8003f74:	2228      	movs	r2, #40	; 0x28
 8003f76:	2100      	movs	r1, #0
 8003f78:	4804      	ldr	r0, [pc, #16]	; (8003f8c <clearTable+0x1c>)
 8003f7a:	f00c ff95 	bl	8010ea8 <memset>
	stwT.position = 0;
 8003f7e:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <clearTable+0x1c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000150 	.word	0x20000150

08003f90 <addItem>:
void addItem(stw_struct stwS){
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <addItem+0x38>)
 8003fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <addItem+0x38>)
 8003fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <addItem+0x38>)
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <addItem+0x38>)
 8003fb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000150 	.word	0x20000150

08003fcc <stwStart>:

void stwStart(void){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 8003fd0:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <stwStart+0x18>)
 8003fd2:	f008 f8e3 	bl	800c19c <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <stwStart+0x1c>)
 8003fd8:	78d3      	ldrb	r3, [r2, #3]
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	70d3      	strb	r3, [r2, #3]
}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20005b70 	.word	0x20005b70
 8003fe8:	20005b1c 	.word	0x20005b1c

08003fec <stwTick>:
void stwTick(void){
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <stwTick+0x28>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ffe:	4905      	ldr	r1, [pc, #20]	; (8004014 <stwTick+0x28>)
 8004000:	680b      	ldr	r3, [r1, #0]
 8004002:	f362 0317 	bfi	r3, r2, #0, #24
 8004006:	600b      	str	r3, [r1, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20005b1c 	.word	0x20005b1c

08004018 <stwStop>:
void stwStop(void){
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <stwStop+0x18>)
 800401e:	78d3      	ldrb	r3, [r2, #3]
 8004020:	f36f 0300 	bfc	r3, #0, #1
 8004024:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8004026:	4803      	ldr	r0, [pc, #12]	; (8004034 <stwStop+0x1c>)
 8004028:	f008 f928 	bl	800c27c <HAL_TIM_Base_Stop_IT>

}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20005b1c 	.word	0x20005b1c
 8004034:	20005b70 	.word	0x20005b70

08004038 <stwClear>:
void stwClear(void){
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <stwClear+0x20>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 8004044:	4a05      	ldr	r2, [pc, #20]	; (800405c <stwClear+0x24>)
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	f36f 0317 	bfc	r3, #0, #24
 800404c:	6013      	str	r3, [r2, #0]
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20005b70 	.word	0x20005b70
 800405c:	20005b1c 	.word	0x20005b1c

08004060 <stwSave>:
void stwSave(void){
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <stwSave+0x18>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <stwSave+0x1c>)
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8004070:	4610      	mov	r0, r2
 8004072:	4798      	blx	r3
}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000150 	.word	0x20000150
 800407c:	20005b1c 	.word	0x20005b1c

08004080 <getStw>:

uint16_t getStw(void){
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <getStw+0x20>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b29b      	uxth	r3, r3
 800408c:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <getStw+0x24>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	b29b      	uxth	r3, r3
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20005b70 	.word	0x20005b70
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
	return 1;
 80040ac:	2301      	movs	r3, #1
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_kill>:

int _kill(int pid, int sig)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040c2:	f00c fe97 	bl	8010df4 <__errno>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2216      	movs	r2, #22
 80040ca:	601a      	str	r2, [r3, #0]
	return -1;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <_exit>:

void _exit (int status)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffe7 	bl	80040b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040ea:	e7fe      	b.n	80040ea <_exit+0x12>

080040ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e00a      	b.n	8004114 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040fe:	f3af 8000 	nop.w
 8004102:	4601      	mov	r1, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60ba      	str	r2, [r7, #8]
 800410a:	b2ca      	uxtb	r2, r1
 800410c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	dbf0      	blt.n	80040fe <_read+0x12>
	}

return len;
 800411c:	687b      	ldr	r3, [r7, #4]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e009      	b.n	800414c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	60ba      	str	r2, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fb67 	bl	8003814 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3301      	adds	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	dbf1      	blt.n	8004138 <_write+0x12>
	}
	return len;
 8004154:	687b      	ldr	r3, [r7, #4]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_close>:

int _close(int file)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	return -1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004186:	605a      	str	r2, [r3, #4]
	return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_isatty>:

int _isatty(int file)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	return 1;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	return 0;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <_sbrk+0x50>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <_sbrk+0x16>
		heap_end = &end;
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <_sbrk+0x50>)
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <_sbrk+0x54>)
 80041dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <_sbrk+0x50>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <_sbrk+0x50>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4413      	add	r3, r2
 80041ec:	466a      	mov	r2, sp
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d907      	bls.n	8004202 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041f2:	f00c fdff 	bl	8010df4 <__errno>
 80041f6:	4603      	mov	r3, r0
 80041f8:	220c      	movs	r2, #12
 80041fa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	e006      	b.n	8004210 <_sbrk+0x48>
	}

	heap_end += incr;
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <_sbrk+0x50>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	4a03      	ldr	r2, [pc, #12]	; (8004218 <_sbrk+0x50>)
 800420c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20005b24 	.word	0x20005b24
 800421c:	20005d90 	.word	0x20005d90

08004220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <SystemInit+0x20>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	4a05      	ldr	r2, [pc, #20]	; (8004240 <SystemInit+0x20>)
 800422c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b096      	sub	sp, #88	; 0x58
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800424a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	611a      	str	r2, [r3, #16]
 8004272:	615a      	str	r2, [r3, #20]
 8004274:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2220      	movs	r2, #32
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f00c fe13 	bl	8010ea8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004284:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <MX_TIM1_Init+0x140>)
 8004286:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004288:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <MX_TIM1_Init+0x13c>)
 800428a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800428e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004290:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004296:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004298:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800429c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042aa:	4b35      	ldr	r3, [pc, #212]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042b0:	4833      	ldr	r0, [pc, #204]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042b2:	f007 ff23 	bl	800c0fc <HAL_TIM_Base_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80042bc:	f7ff fc54 	bl	8003b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042ca:	4619      	mov	r1, r3
 80042cc:	482c      	ldr	r0, [pc, #176]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042ce:	f008 faef 	bl	800c8b0 <HAL_TIM_ConfigClockSource>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80042d8:	f7ff fc46 	bl	8003b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042dc:	4828      	ldr	r0, [pc, #160]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042de:	f007 fffc 	bl	800c2da <HAL_TIM_PWM_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80042e8:	f7ff fc3e 	bl	8003b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042f8:	4619      	mov	r1, r3
 80042fa:	4821      	ldr	r0, [pc, #132]	; (8004380 <MX_TIM1_Init+0x13c>)
 80042fc:	f008 fed8 	bl	800d0b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004306:	f7ff fc2f 	bl	8003b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800430a:	2360      	movs	r3, #96	; 0x60
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800430e:	2302      	movs	r3, #2
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004316:	2300      	movs	r3, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432a:	2200      	movs	r2, #0
 800432c:	4619      	mov	r1, r3
 800432e:	4814      	ldr	r0, [pc, #80]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004330:	f008 f9fc 	bl	800c72c <HAL_TIM_PWM_ConfigChannel>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800433a:	f7ff fc15 	bl	8003b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004356:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4807      	ldr	r0, [pc, #28]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004362:	f008 ff21 	bl	800d1a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800436c:	f7ff fbfc 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004370:	4803      	ldr	r0, [pc, #12]	; (8004380 <MX_TIM1_Init+0x13c>)
 8004372:	f000 f8ff 	bl	8004574 <HAL_TIM_MspPostInit>

}
 8004376:	bf00      	nop
 8004378:	3758      	adds	r7, #88	; 0x58
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20005b28 	.word	0x20005b28
 8004384:	40010000 	.word	0x40010000

08004388 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <MX_TIM10_Init+0x40>)
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <MX_TIM10_Init+0x44>)
 8004390:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <MX_TIM10_Init+0x40>)
 8004394:	f244 129f 	movw	r2, #16799	; 0x419f
 8004398:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <MX_TIM10_Init+0x40>)
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <MX_TIM10_Init+0x40>)
 80043a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80043a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <MX_TIM10_Init+0x40>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <MX_TIM10_Init+0x40>)
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <MX_TIM10_Init+0x40>)
 80043b6:	f007 fea1 	bl	800c0fc <HAL_TIM_Base_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80043c0:	f7ff fbd2 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20005b70 	.word	0x20005b70
 80043cc:	40014400 	.word	0x40014400

080043d0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <MX_TIM11_Init+0x40>)
 80043d6:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <MX_TIM11_Init+0x44>)
 80043d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <MX_TIM11_Init+0x40>)
 80043dc:	f244 129f 	movw	r2, #16799	; 0x419f
 80043e0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <MX_TIM11_Init+0x40>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <MX_TIM11_Init+0x40>)
 80043ea:	2263      	movs	r2, #99	; 0x63
 80043ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <MX_TIM11_Init+0x40>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <MX_TIM11_Init+0x40>)
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80043fa:	4805      	ldr	r0, [pc, #20]	; (8004410 <MX_TIM11_Init+0x40>)
 80043fc:	f007 fe7e 	bl	800c0fc <HAL_TIM_Base_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004406:	f7ff fbaf 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20005bb8 	.word	0x20005bb8
 8004414:	40014800 	.word	0x40014800

08004418 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <MX_TIM13_Init+0x40>)
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <MX_TIM13_Init+0x44>)
 8004420:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <MX_TIM13_Init+0x40>)
 8004424:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004428:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <MX_TIM13_Init+0x40>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <MX_TIM13_Init+0x40>)
 8004432:	f242 720f 	movw	r2, #9999	; 0x270f
 8004436:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <MX_TIM13_Init+0x40>)
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <MX_TIM13_Init+0x40>)
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004444:	4804      	ldr	r0, [pc, #16]	; (8004458 <MX_TIM13_Init+0x40>)
 8004446:	f007 fe59 	bl	800c0fc <HAL_TIM_Base_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004450:	f7ff fb8a 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004454:	bf00      	nop
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20005c00 	.word	0x20005c00
 800445c:	40001c00 	.word	0x40001c00

08004460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <HAL_TIM_Base_MspInit+0x100>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11e      	bne.n	80044b0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800448e:	2200      	movs	r2, #0
 8004490:	2100      	movs	r1, #0
 8004492:	2019      	movs	r0, #25
 8004494:	f003 ffb1 	bl	80083fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004498:	2019      	movs	r0, #25
 800449a:	f003 ffca 	bl	8008432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800449e:	2200      	movs	r2, #0
 80044a0:	2100      	movs	r1, #0
 80044a2:	201a      	movs	r0, #26
 80044a4:	f003 ffa9 	bl	80083fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80044a8:	201a      	movs	r0, #26
 80044aa:	f003 ffc2 	bl	8008432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80044ae:	e052      	b.n	8004556 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <HAL_TIM_Base_MspInit+0x108>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d116      	bne.n	80044e8 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2100      	movs	r1, #0
 80044da:	2019      	movs	r0, #25
 80044dc:	f003 ff8d 	bl	80083fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044e0:	2019      	movs	r0, #25
 80044e2:	f003 ffa6 	bl	8008432 <HAL_NVIC_EnableIRQ>
}
 80044e6:	e036      	b.n	8004556 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1f      	ldr	r2, [pc, #124]	; (800456c <HAL_TIM_Base_MspInit+0x10c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d116      	bne.n	8004520 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6453      	str	r3, [r2, #68]	; 0x44
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	201a      	movs	r0, #26
 8004514:	f003 ff71 	bl	80083fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004518:	201a      	movs	r0, #26
 800451a:	f003 ff8a 	bl	8008432 <HAL_NVIC_EnableIRQ>
}
 800451e:	e01a      	b.n	8004556 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a12      	ldr	r2, [pc, #72]	; (8004570 <HAL_TIM_Base_MspInit+0x110>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d115      	bne.n	8004556 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 8004534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_TIM_Base_MspInit+0x104>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	202c      	movs	r0, #44	; 0x2c
 800454c:	f003 ff55 	bl	80083fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004550:	202c      	movs	r0, #44	; 0x2c
 8004552:	f003 ff6e 	bl	8008432 <HAL_NVIC_EnableIRQ>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40023800 	.word	0x40023800
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	40001c00 	.word	0x40001c00

08004574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <HAL_TIM_MspPostInit+0x68>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d11e      	bne.n	80045d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_TIM_MspPostInit+0x6c>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_TIM_MspPostInit+0x6c>)
 80045a0:	f043 0310 	orr.w	r3, r3, #16
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_TIM_MspPostInit+0x6c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045c4:	2301      	movs	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	4619      	mov	r1, r3
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <HAL_TIM_MspPostInit+0x70>)
 80045d0:	f003 ffd0 	bl	8008574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80045d4:	bf00      	nop
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40021000 	.word	0x40021000

080045e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <MX_USART3_UART_Init+0x50>)
 80045f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 80045f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 800460e:	220c      	movs	r2, #12
 8004610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 8004614:	2200      	movs	r2, #0
 8004616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800461e:	4805      	ldr	r0, [pc, #20]	; (8004634 <MX_USART3_UART_Init+0x4c>)
 8004620:	f008 fe28 	bl	800d274 <HAL_UART_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800462a:	f7ff fa9d 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20005c48 	.word	0x20005c48
 8004638:	40004800 	.word	0x40004800

0800463c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <MX_USART6_UART_Init+0x50>)
 8004644:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800464c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800464e:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004662:	220c      	movs	r2, #12
 8004664:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004668:	2200      	movs	r2, #0
 800466a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 800466e:	2200      	movs	r2, #0
 8004670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004672:	4805      	ldr	r0, [pc, #20]	; (8004688 <MX_USART6_UART_Init+0x4c>)
 8004674:	f008 fdfe 	bl	800d274 <HAL_UART_Init>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800467e:	f7ff fa73 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20005c8c 	.word	0x20005c8c
 800468c:	40011400 	.word	0x40011400

08004690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 031c 	add.w	r3, r7, #28
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a32      	ldr	r2, [pc, #200]	; (8004778 <HAL_UART_MspInit+0xe8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d12d      	bne.n	800470e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_UART_MspInit+0xec>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a30      	ldr	r2, [pc, #192]	; (800477c <HAL_UART_MspInit+0xec>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b2e      	ldr	r3, [pc, #184]	; (800477c <HAL_UART_MspInit+0xec>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_UART_MspInit+0xec>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_UART_MspInit+0xec>)
 80046d8:	f043 0308 	orr.w	r3, r3, #8
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_UART_MspInit+0xec>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80046ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	2303      	movs	r3, #3
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046fc:	2307      	movs	r3, #7
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004700:	f107 031c 	add.w	r3, r7, #28
 8004704:	4619      	mov	r1, r3
 8004706:	481e      	ldr	r0, [pc, #120]	; (8004780 <HAL_UART_MspInit+0xf0>)
 8004708:	f003 ff34 	bl	8008574 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800470c:	e030      	b.n	8004770 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_UART_MspInit+0xf4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d12b      	bne.n	8004770 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_UART_MspInit+0xec>)
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_UART_MspInit+0xec>)
 8004722:	f043 0320 	orr.w	r3, r3, #32
 8004726:	6453      	str	r3, [r2, #68]	; 0x44
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_UART_MspInit+0xec>)
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_UART_MspInit+0xec>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <HAL_UART_MspInit+0xec>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_UART_MspInit+0xec>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475c:	2303      	movs	r3, #3
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004760:	2308      	movs	r3, #8
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	4619      	mov	r1, r3
 800476a:	4807      	ldr	r0, [pc, #28]	; (8004788 <HAL_UART_MspInit+0xf8>)
 800476c:	f003 ff02 	bl	8008574 <HAL_GPIO_Init>
}
 8004770:	bf00      	nop
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40004800 	.word	0x40004800
 800477c:	40023800 	.word	0x40023800
 8004780:	40020c00 	.word	0x40020c00
 8004784:	40011400 	.word	0x40011400
 8004788:	40020800 	.word	0x40020800

0800478c <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <setDefaultClbcks+0x34>)
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <setDefaultClbcks+0x38>)
 8004794:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <setDefaultClbcks+0x3c>)
 8004798:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <setDefaultClbcks+0x40>)
 800479a:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <setDefaultClbcks+0x44>)
 800479e:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <setDefaultClbcks+0x48>)
 80047a0:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <setDefaultClbcks+0x4c>)
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <setDefaultClbcks+0x50>)
 80047a6:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <setDefaultClbcks+0x54>)
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <setDefaultClbcks+0x58>)
 80047ac:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 80047ae:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <setDefaultClbcks+0x5c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	611a      	str	r2, [r3, #16]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	200025f0 	.word	0x200025f0
 80047c4:	08002601 	.word	0x08002601
 80047c8:	20002638 	.word	0x20002638
 80047cc:	08002611 	.word	0x08002611
 80047d0:	20002614 	.word	0x20002614
 80047d4:	08004ccd 	.word	0x08004ccd
 80047d8:	200026a4 	.word	0x200026a4
 80047dc:	08004d11 	.word	0x08004d11
 80047e0:	2000265c 	.word	0x2000265c
 80047e4:	08004d5d 	.word	0x08004d5d
 80047e8:	20002680 	.word	0x20002680

080047ec <baroSetup>:

// function executed once on module load
void baroSetup(void){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80047f0:	f7ff ffcc 	bl	800478c <setDefaultClbcks>
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	b0b2      	sub	sp, #200	; 0xc8
 80047fe:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004800:	2100      	movs	r1, #0
 8004802:	488b      	ldr	r0, [pc, #556]	; (8004a30 <baroMain+0x238>)
 8004804:	f003 fb1f 	bl	8007e46 <cbuf_readn>
 8004808:	4603      	mov	r3, r0
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004810:	2100      	movs	r1, #0
 8004812:	4887      	ldr	r0, [pc, #540]	; (8004a30 <baroMain+0x238>)
 8004814:	f003 fb17 	bl	8007e46 <cbuf_readn>
 8004818:	4603      	mov	r3, r0
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8004820:	2100      	movs	r1, #0
 8004822:	4884      	ldr	r0, [pc, #528]	; (8004a34 <baroMain+0x23c>)
 8004824:	f003 fbb5 	bl	8007f92 <read_nth_ring_buffer>
 8004828:	4603      	mov	r3, r0
 800482a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 800482e:	2100      	movs	r1, #0
 8004830:	4880      	ldr	r0, [pc, #512]	; (8004a34 <baroMain+0x23c>)
 8004832:	f003 fbae 	bl	8007f92 <read_nth_ring_buffer>
 8004836:	4603      	mov	r3, r0
 8004838:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 800483c:	2300      	movs	r3, #0
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004840:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004844:	222e      	movs	r2, #46	; 0x2e
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f00c fb2d 	bl	8010ea8 <memset>
	char str3[50] = {0};
 800484e:	2300      	movs	r3, #0
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
 8004852:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004856:	222e      	movs	r2, #46	; 0x2e
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f00c fb24 	bl	8010ea8 <memset>
	char str4[50] = {0};
 8004860:	2300      	movs	r3, #0
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	f107 0308 	add.w	r3, r7, #8
 8004868:	222e      	movs	r2, #46	; 0x2e
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f00c fb1b 	bl	8010ea8 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8004872:	4b71      	ldr	r3, [pc, #452]	; (8004a38 <baroMain+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe86 	bl	8000588 <__aeabi_f2d>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004884:	496d      	ldr	r1, [pc, #436]	; (8004a3c <baroMain+0x244>)
 8004886:	f00d fc55 	bl	8012134 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 800488a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <baroMain+0x248>)
 8004890:	210e      	movs	r1, #14
 8004892:	200a      	movs	r0, #10
 8004894:	f7fe f902 	bl	8002a9c <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8004898:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <baroMain+0x240>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004a44 <baroMain+0x24c>
 80048a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048ac:	ee16 0a90 	vmov	r0, s13
 80048b0:	f7fb fe6a 	bl	8000588 <__aeabi_f2d>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80048bc:	4962      	ldr	r1, [pc, #392]	; (8004a48 <baroMain+0x250>)
 80048be:	f00d fc39 	bl	8012134 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 80048c2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80048c6:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <baroMain+0x248>)
 80048c8:	211e      	movs	r1, #30
 80048ca:	200a      	movs	r0, #10
 80048cc:	f7fe f8e6 	bl	8002a9c <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80048d0:	4b5e      	ldr	r3, [pc, #376]	; (8004a4c <baroMain+0x254>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d123      	bne.n	8004920 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	495d      	ldr	r1, [pc, #372]	; (8004a50 <baroMain+0x258>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f00d fc29 	bl	8012134 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 80048e2:	4b55      	ldr	r3, [pc, #340]	; (8004a38 <baroMain+0x240>)
 80048e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80048e8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004a44 <baroMain+0x24c>
 80048ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048f0:	ee16 0a90 	vmov	r0, s13
 80048f4:	f7fb fe48 	bl	8000588 <__aeabi_f2d>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004900:	4954      	ldr	r1, [pc, #336]	; (8004a54 <baroMain+0x25c>)
 8004902:	f00d fc17 	bl	8012134 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8004906:	4b54      	ldr	r3, [pc, #336]	; (8004a58 <baroMain+0x260>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fe3c 	bl	8000588 <__aeabi_f2d>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004918:	4950      	ldr	r1, [pc, #320]	; (8004a5c <baroMain+0x264>)
 800491a:	f00d fc0b 	bl	8012134 <siprintf>
 800491e:	e022      	b.n	8004966 <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	494f      	ldr	r1, [pc, #316]	; (8004a60 <baroMain+0x268>)
 8004924:	4618      	mov	r0, r3
 8004926:	f00d fc05 	bl	8012134 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 800492a:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <baroMain+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fb fe2a 	bl	8000588 <__aeabi_f2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800493c:	4949      	ldr	r1, [pc, #292]	; (8004a64 <baroMain+0x26c>)
 800493e:	f00d fbf9 	bl	8012134 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <baroMain+0x270>)
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004a44 <baroMain+0x24c>
 800494c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004950:	ee16 0a90 	vmov	r0, s13
 8004954:	f7fb fe18 	bl	8000588 <__aeabi_f2d>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004960:	4942      	ldr	r1, [pc, #264]	; (8004a6c <baroMain+0x274>)
 8004962:	f00d fbe7 	bl	8012134 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8004966:	1d3a      	adds	r2, r7, #4
 8004968:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <baroMain+0x248>)
 800496a:	2132      	movs	r1, #50	; 0x32
 800496c:	200a      	movs	r0, #10
 800496e:	f7fe f895 	bl	8002a9c <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8004972:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004976:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <baroMain+0x248>)
 8004978:	2142      	movs	r1, #66	; 0x42
 800497a:	200a      	movs	r0, #10
 800497c:	f7fe f88e 	bl	8002a9c <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8004980:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004984:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <baroMain+0x248>)
 8004986:	2152      	movs	r1, #82	; 0x52
 8004988:	200a      	movs	r0, #10
 800498a:	f7fe f887 	bl	8002a9c <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 800498e:	2300      	movs	r3, #0
 8004990:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004994:	e041      	b.n	8004a1a <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004996:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800499a:	4619      	mov	r1, r3
 800499c:	4824      	ldr	r0, [pc, #144]	; (8004a30 <baroMain+0x238>)
 800499e:	f003 fa52 	bl	8007e46 <cbuf_readn>
 80049a2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 80049a6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80049aa:	4619      	mov	r1, r3
 80049ac:	4821      	ldr	r0, [pc, #132]	; (8004a34 <baroMain+0x23c>)
 80049ae:	f003 faf0 	bl	8007f92 <read_nth_ring_buffer>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 80049b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d804      	bhi.n	80049d0 <baroMain+0x1d8>
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 80049d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80049da:	429a      	cmp	r2, r3
 80049dc:	d304      	bcc.n	80049e8 <baroMain+0x1f0>
 80049de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 80049e8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80049ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d303      	bcc.n	80049fc <baroMain+0x204>
 80049f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80049f8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 80049fc:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004a00:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d803      	bhi.n	8004a10 <baroMain+0x218>
 8004a08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004a0c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8004a10:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004a14:	3301      	adds	r3, #1
 8004a16:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <baroMain+0x23c>)
 8004a1c:	891b      	ldrh	r3, [r3, #8]
 8004a1e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3b7      	bcc.n	8004996 <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <baroMain+0x278>)
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8004a2e:	e0ba      	b.n	8004ba6 <baroMain+0x3ae>
 8004a30:	20005798 	.word	0x20005798
 8004a34:	200057ac 	.word	0x200057ac
 8004a38:	200025e0 	.word	0x200025e0
 8004a3c:	08019fec 	.word	0x08019fec
 8004a40:	0801b828 	.word	0x0801b828
 8004a44:	42c80000 	.word	0x42c80000
 8004a48:	0801a004 	.word	0x0801a004
 8004a4c:	20005cd0 	.word	0x20005cd0
 8004a50:	0801a020 	.word	0x0801a020
 8004a54:	0801a034 	.word	0x0801a034
 8004a58:	20000004 	.word	0x20000004
 8004a5c:	0801a058 	.word	0x0801a058
 8004a60:	0801a078 	.word	0x0801a078
 8004a64:	0801a08c 	.word	0x0801a08c
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	0801a0ac 	.word	0x0801a0ac
 8004a70:	2000018c 	.word	0x2000018c
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8004a74:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004a78:	4a8c      	ldr	r2, [pc, #560]	; (8004cac <baroMain+0x4b4>)
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	4a8c      	ldr	r2, [pc, #560]	; (8004cb0 <baroMain+0x4b8>)
 8004a80:	8912      	ldrh	r2, [r2, #8]
 8004a82:	fb03 f202 	mul.w	r2, r3, r2
 8004a86:	4b8b      	ldr	r3, [pc, #556]	; (8004cb4 <baroMain+0x4bc>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4b87      	ldr	r3, [pc, #540]	; (8004cac <baroMain+0x4b4>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	1acb      	subs	r3, r1, r3
 8004a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004a9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4883      	ldr	r0, [pc, #524]	; (8004cb0 <baroMain+0x4b8>)
 8004aa2:	f003 f9d0 	bl	8007e46 <cbuf_readn>
 8004aa6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8004aaa:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8004aae:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004ab2:	1c5c      	adds	r4, r3, #1
 8004ab4:	4b80      	ldr	r3, [pc, #512]	; (8004cb8 <baroMain+0x4c0>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	461d      	mov	r5, r3
 8004aba:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <baroMain+0x4c0>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b7e      	ldr	r3, [pc, #504]	; (8004cbc <baroMain+0x4c4>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004aca:	8812      	ldrh	r2, [r2, #0]
 8004acc:	4611      	mov	r1, r2
 8004ace:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8004ad2:	1a8a      	subs	r2, r1, r2
 8004ad4:	fb03 f202 	mul.w	r2, r3, r2
 8004ad8:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8004adc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ae0:	1acb      	subs	r3, r1, r3
 8004ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ae6:	1aea      	subs	r2, r5, r3
 8004ae8:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <baroMain+0x4c0>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	4619      	mov	r1, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	2302      	movs	r3, #2
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	2301      	movs	r3, #1
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	460b      	mov	r3, r1
 8004afc:	4621      	mov	r1, r4
 8004afe:	f7fe fe04 	bl	800370a <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8004b02:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 8004b06:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004b0a:	1c5e      	adds	r6, r3, #1
 8004b0c:	4b6a      	ldr	r3, [pc, #424]	; (8004cb8 <baroMain+0x4c0>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4698      	mov	r8, r3
 8004b12:	4b69      	ldr	r3, [pc, #420]	; (8004cb8 <baroMain+0x4c0>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <baroMain+0x4c4>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	1ad4      	subs	r4, r2, r3
 8004b1e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b22:	4619      	mov	r1, r3
 8004b24:	4866      	ldr	r0, [pc, #408]	; (8004cc0 <baroMain+0x4c8>)
 8004b26:	f003 fa34 	bl	8007f92 <read_nth_ring_buffer>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	fb03 f204 	mul.w	r2, r3, r4
 8004b36:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8004b3a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004b3e:	1acb      	subs	r3, r1, r3
 8004b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b44:	eba8 0203 	sub.w	r2, r8, r3
 8004b48:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <baroMain+0x4c0>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	230e      	movs	r3, #14
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2301      	movs	r3, #1
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f7fe fdd3 	bl	800370a <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8004b64:	4b51      	ldr	r3, [pc, #324]	; (8004cac <baroMain+0x4b4>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	4b52      	ldr	r3, [pc, #328]	; (8004cb4 <baroMain+0x4bc>)
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <baroMain+0x4c4>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	2302      	movs	r3, #2
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f7fe f884 	bl	8002c88 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8004b80:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <baroMain+0x4b4>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	4b4b      	ldr	r3, [pc, #300]	; (8004cb4 <baroMain+0x4bc>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4b4a      	ldr	r3, [pc, #296]	; (8004cb8 <baroMain+0x4c0>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2301      	movs	r3, #1
 8004b98:	f7fe f876 	bl	8002c88 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8004b9c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8004ba6:	4b43      	ldr	r3, [pc, #268]	; (8004cb4 <baroMain+0x4bc>)
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	f4ff af60 	bcc.w	8004a74 <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8004bb4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bc8:	ee16 0a90 	vmov	r0, s13
 8004bcc:	f7fb fcdc 	bl	8000588 <__aeabi_f2d>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	1d38      	adds	r0, r7, #4
 8004bd6:	493b      	ldr	r1, [pc, #236]	; (8004cc4 <baroMain+0x4cc>)
 8004bd8:	f00d faac 	bl	8012134 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 8004bdc:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <baroMain+0x4c4>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	3b06      	subs	r3, #6
 8004be2:	b2d9      	uxtb	r1, r3
 8004be4:	1d3a      	adds	r2, r7, #4
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <baroMain+0x4d0>)
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7fd ff57 	bl	8002a9c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 8004bee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c02:	ee16 0a90 	vmov	r0, s13
 8004c06:	f7fb fcbf 	bl	8000588 <__aeabi_f2d>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1d38      	adds	r0, r7, #4
 8004c10:	492c      	ldr	r1, [pc, #176]	; (8004cc4 <baroMain+0x4cc>)
 8004c12:	f00d fa8f 	bl	8012134 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <baroMain+0x4c0>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	3b06      	subs	r3, #6
 8004c1c:	b2d9      	uxtb	r1, r3
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <baroMain+0x4d0>)
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7fd ff3a 	bl	8002a9c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8004c28:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c3c:	ee16 0a90 	vmov	r0, s13
 8004c40:	f7fb fca2 	bl	8000588 <__aeabi_f2d>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	1d38      	adds	r0, r7, #4
 8004c4a:	491e      	ldr	r1, [pc, #120]	; (8004cc4 <baroMain+0x4cc>)
 8004c4c:	f00d fa72 	bl	8012134 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <baroMain+0x4c4>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	3b06      	subs	r3, #6
 8004c56:	b2d9      	uxtb	r1, r3
 8004c58:	1d3a      	adds	r2, r7, #4
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <baroMain+0x4d0>)
 8004c5c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004c60:	f7fd ff1c 	bl	8002a9c <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 8004c64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c78:	ee16 0a90 	vmov	r0, s13
 8004c7c:	f7fb fc84 	bl	8000588 <__aeabi_f2d>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	1d38      	adds	r0, r7, #4
 8004c86:	490f      	ldr	r1, [pc, #60]	; (8004cc4 <baroMain+0x4cc>)
 8004c88:	f00d fa54 	bl	8012134 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <baroMain+0x4c0>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b06      	subs	r3, #6
 8004c92:	b2d9      	uxtb	r1, r3
 8004c94:	1d3a      	adds	r2, r7, #4
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <baroMain+0x4d0>)
 8004c98:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004c9c:	f7fd fefe 	bl	8002a9c <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8004ca0:	bf00      	nop
 8004ca2:	37b8      	adds	r7, #184	; 0xb8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004caa:	bf00      	nop
 8004cac:	2000018c 	.word	0x2000018c
 8004cb0:	20005798 	.word	0x20005798
 8004cb4:	2000018e 	.word	0x2000018e
 8004cb8:	20000190 	.word	0x20000190
 8004cbc:	20000191 	.word	0x20000191
 8004cc0:	200057ac 	.word	0x200057ac
 8004cc4:	0801a0cc 	.word	0x0801a0cc
 8004cc8:	0801b3ac 	.word	0x0801b3ac

08004ccc <changeBaroMode>:

void changeBaroMode(void){
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <changeBaroMode+0x34>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <changeBaroMode+0x38>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <changeBaroMode+0x3c>)
 8004cde:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <changeBaroMode+0x34>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 8004ce6:	e006      	b.n	8004cf6 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <changeBaroMode+0x38>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <changeBaroMode+0x40>)
 8004cee:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <changeBaroMode+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20005cd0 	.word	0x20005cd0
 8004d04:	200025e0 	.word	0x200025e0
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	20000004 	.word	0x20000004

08004d10 <addBaro>:
void addBaro(void){
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <addBaro+0x40>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <addBaro+0x22>
			fixedAltitude += 1;
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <addBaro+0x44>)
 8004d1e:	edd3 7a00 	vldr	s15, [r3]
 8004d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <addBaro+0x44>)
 8004d2c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8004d30:	e009      	b.n	8004d46 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <addBaro+0x48>)
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <addBaro+0x48>)
 8004d42:	edc3 7a00 	vstr	s15, [r3]
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20005cd0 	.word	0x20005cd0
 8004d54:	20000004 	.word	0x20000004
 8004d58:	20000000 	.word	0x20000000

08004d5c <remBaro>:
void remBaro(void){
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <remBaro+0x40>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <remBaro+0x22>
			fixedAltitude -= 1;
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <remBaro+0x44>)
 8004d6a:	edd3 7a00 	vldr	s15, [r3]
 8004d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <remBaro+0x44>)
 8004d78:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8004d7c:	e009      	b.n	8004d92 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <remBaro+0x48>)
 8004d80:	edd3 7a00 	vldr	s15, [r3]
 8004d84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <remBaro+0x48>)
 8004d8e:	edc3 7a00 	vstr	s15, [r3]
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20005cd0 	.word	0x20005cd0
 8004da0:	20000004 	.word	0x20000004
 8004da4:	20000000 	.word	0x20000000

08004da8 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8004db0:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <setupCntxMenu+0x1c>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20005cd4 	.word	0x20005cd4

08004dc8 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8004dcc:	f000 f87e 	bl	8004ecc <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <cntxSelect+0x1c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <cntxSelect+0x20>)
 8004dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	4798      	blx	r3
}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20005cd2 	.word	0x20005cd2
 8004de8:	200001e8 	.word	0x200001e8

08004dec <nextItem>:

void nextItem(void){
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <nextItem+0x34>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <nextItem+0x38>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	da06      	bge.n	8004e0e <nextItem+0x22>
		cntxPosition++;
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <nextItem+0x34>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <nextItem+0x34>)
 8004e0a:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8004e0c:	e002      	b.n	8004e14 <nextItem+0x28>
		cntxPosition = 0;
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <nextItem+0x34>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20005cd2 	.word	0x20005cd2
 8004e24:	20000192 	.word	0x20000192

08004e28 <prevItem>:
void prevItem(void){
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <prevItem+0x30>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d006      	beq.n	8004e42 <prevItem+0x1a>
		cntxPosition--;
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <prevItem+0x30>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <prevItem+0x30>)
 8004e3e:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8004e40:	e005      	b.n	8004e4e <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <prevItem+0x34>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <prevItem+0x30>)
 8004e4c:	701a      	strb	r2, [r3, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20005cd2 	.word	0x20005cd2
 8004e5c:	20000192 	.word	0x20000192

08004e60 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <setDefaultClbcks+0x34>)
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <setDefaultClbcks+0x38>)
 8004e68:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <setDefaultClbcks+0x3c>)
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <setDefaultClbcks+0x40>)
 8004e6e:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <setDefaultClbcks+0x3c>)
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <setDefaultClbcks+0x40>)
 8004e74:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <setDefaultClbcks+0x44>)
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <setDefaultClbcks+0x48>)
 8004e7a:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <setDefaultClbcks+0x4c>)
 8004e7e:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <setDefaultClbcks+0x50>)
 8004e80:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <setDefaultClbcks+0x4c>)
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <setDefaultClbcks+0x50>)
 8004e86:	61da      	str	r2, [r3, #28]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200026a4 	.word	0x200026a4
 8004e98:	08004ecd 	.word	0x08004ecd
 8004e9c:	20002638 	.word	0x20002638
 8004ea0:	08004e29 	.word	0x08004e29
 8004ea4:	20002614 	.word	0x20002614
 8004ea8:	08004dc9 	.word	0x08004dc9
 8004eac:	200025f0 	.word	0x200025f0
 8004eb0:	08004ded 	.word	0x08004ded

08004eb4 <showCntxMenu>:

void showCntxMenu(void){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8004eb8:	f7ff ffd2 	bl	8004e60 <setDefaultClbcks>
	isCntxOpen = 1;
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <showCntxMenu+0x14>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20005cd1 	.word	0x20005cd1

08004ecc <hideCntxMenu>:
void hideCntxMenu(void){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8004ed0:	f7fc fdc4 	bl	8001a5c <resetButtonHandlers>
	(*prevClbcks)();
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <hideCntxMenu+0x18>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4798      	blx	r3
	isCntxOpen = 0;
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <hideCntxMenu+0x1c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20005cd4 	.word	0x20005cd4
 8004ee8:	20005cd1 	.word	0x20005cd1

08004eec <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <enableCntxMenu+0xdc>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d062      	beq.n	8004fc0 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 8004efa:	230e      	movs	r3, #14
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <enableCntxMenu+0xe0>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	330a      	adds	r3, #10
 8004f08:	2200      	movs	r2, #0
 8004f0a:	9200      	str	r2, [sp, #0]
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	21c8      	movs	r1, #200	; 0xc8
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fe fbd5 	bl	80036c0 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 8004f16:	2301      	movs	r3, #1
 8004f18:	2206      	movs	r2, #6
 8004f1a:	21c8      	movs	r1, #200	; 0xc8
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f7fe fa79 	bl	8003414 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 8004f22:	230e      	movs	r3, #14
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <enableCntxMenu+0xe0>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	f103 020a 	add.w	r2, r3, #10
 8004f32:	2301      	movs	r3, #1
 8004f34:	21c8      	movs	r1, #200	; 0xc8
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fe fa6c 	bl	8003414 <lcdHLine>
//		create list
		char item[30] = {0};
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	1d3b      	adds	r3, r7, #4
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	615a      	str	r2, [r3, #20]
 8004f50:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 8004f52:	2300      	movs	r3, #0
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e018      	b.n	8004f8a <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 8004f58:	7ffb      	ldrb	r3, [r7, #31]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <enableCntxMenu+0xe4>)
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	461a      	mov	r2, r3
 8004f62:	463b      	mov	r3, r7
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f00d f8e4 	bl	8012134 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 8004f6c:	220e      	movs	r2, #14
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
 8004f70:	fb13 f302 	smulbb	r3, r3, r2
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	330a      	adds	r3, #10
 8004f78:	b2d9      	uxtb	r1, r3
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <enableCntxMenu+0xe8>)
 8004f7e:	2005      	movs	r0, #5
 8004f80:	f7fd fd8c 	bl	8002a9c <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 8004f84:	7ffb      	ldrb	r3, [r7, #31]
 8004f86:	3301      	adds	r3, #1
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <enableCntxMenu+0xe0>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	7ffa      	ldrb	r2, [r7, #31]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d3e1      	bcc.n	8004f58 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 8004f94:	230e      	movs	r3, #14
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <enableCntxMenu+0xec>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	230e      	movs	r3, #14
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <enableCntxMenu+0xec>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	9100      	str	r1, [sp, #0]
 8004fb8:	21c8      	movs	r1, #200	; 0xc8
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f7fe fb80 	bl	80036c0 <lcdRect>

	}
}
 8004fc0:	bf00      	nop
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20005cd1 	.word	0x20005cd1
 8004fcc:	20000192 	.word	0x20000192
 8004fd0:	200001e8 	.word	0x200001e8
 8004fd4:	0801c2b0 	.word	0x0801c2b0
 8004fd8:	20005cd2 	.word	0x20005cd2

08004fdc <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	pageNum++;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <nextPg+0x1c>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <nextPg+0x1c>)
 8004fea:	701a      	strb	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20005cd8 	.word	0x20005cd8

08004ffc <prevPg>:
void prevPg(void){
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	pageNum--;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <prevPg+0x1c>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <prevPg+0x1c>)
 800500a:	701a      	strb	r2, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20005cd8 	.word	0x20005cd8

0800501c <syncTime>:
void syncTime(void){
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
	if(location.isValid){
 8005020:	4b15      	ldr	r3, [pc, #84]	; (8005078 <syncTime+0x5c>)
 8005022:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8005026:	2b00      	cmp	r3, #0
 8005028:	d023      	beq.n	8005072 <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <syncTime+0x5c>)
 800502c:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <syncTime+0x60>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	4413      	add	r3, r2
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <syncTime+0x64>)
 800503c:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 800503e:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <syncTime+0x5c>)
 8005040:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <syncTime+0x64>)
 8005046:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <syncTime+0x5c>)
 800504a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <syncTime+0x64>)
 8005050:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <syncTime+0x64>)
 8005054:	2200      	movs	r2, #0
 8005056:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <syncTime+0x64>)
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800505e:	2200      	movs	r2, #0
 8005060:	4907      	ldr	r1, [pc, #28]	; (8005080 <syncTime+0x64>)
 8005062:	4808      	ldr	r0, [pc, #32]	; (8005084 <syncTime+0x68>)
 8005064:	f005 fbaa 	bl	800a7bc <HAL_RTC_SetTime>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <syncTime+0x56>
		{
		Error_Handler();
 800506e:	f7fe fd7b 	bl	8003b68 <Error_Handler>
		}
	}
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20005608 	.word	0x20005608
 800507c:	2000014c 	.word	0x2000014c
 8005080:	20005780 	.word	0x20005780
 8005084:	20005a20 	.word	0x20005a20

08005088 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <setDefaultClbcks+0x2c>)
 800508e:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <setDefaultClbcks+0x30>)
 8005090:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <setDefaultClbcks+0x34>)
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <setDefaultClbcks+0x38>)
 8005096:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <setDefaultClbcks+0x3c>)
 800509a:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <setDefaultClbcks+0x40>)
 800509c:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <setDefaultClbcks+0x44>)
 80050a0:	4a0b      	ldr	r2, [pc, #44]	; (80050d0 <setDefaultClbcks+0x48>)
 80050a2:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <setDefaultClbcks+0x4c>)
 80050a6:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <setDefaultClbcks+0x50>)
 80050a8:	611a      	str	r2, [r3, #16]
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	200025f0 	.word	0x200025f0
 80050b8:	08002601 	.word	0x08002601
 80050bc:	20002638 	.word	0x20002638
 80050c0:	08002611 	.word	0x08002611
 80050c4:	2000265c 	.word	0x2000265c
 80050c8:	08004fdd 	.word	0x08004fdd
 80050cc:	200026a4 	.word	0x200026a4
 80050d0:	08004ffd 	.word	0x08004ffd
 80050d4:	20002680 	.word	0x20002680
 80050d8:	0800501d 	.word	0x0800501d

080050dc <gpsSetup>:

void gpsSetup(void){
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80050e0:	f7ff ffd2 	bl	8005088 <setDefaultClbcks>

}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <gpsMain>:

void gpsMain(void){
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80050ee:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80050f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050fa:	222f      	movs	r2, #47	; 0x2f
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f00b fed2 	bl	8010ea8 <memset>

	switch(pageNum){
 8005104:	4bb2      	ldr	r3, [pc, #712]	; (80053d0 <gpsMain+0x2e8>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <gpsMain+0x2c>
 800510c:	2b01      	cmp	r3, #1
 800510e:	f000 80e7 	beq.w	80052e0 <gpsMain+0x1f8>
 8005112:	e13e      	b.n	8005392 <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 800511a:	49ae      	ldr	r1, [pc, #696]	; (80053d4 <gpsMain+0x2ec>)
 800511c:	48ae      	ldr	r0, [pc, #696]	; (80053d8 <gpsMain+0x2f0>)
 800511e:	f7fc fff1 	bl	8002104 <getLocation>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 8005128:	4baa      	ldr	r3, [pc, #680]	; (80053d4 <gpsMain+0x2ec>)
 800512a:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 800512e:	4ba9      	ldr	r3, [pc, #676]	; (80053d4 <gpsMain+0x2ec>)
 8005130:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8005134:	4013      	ands	r3, r2
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8095 	beq.w	8005268 <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 800513e:	4ba5      	ldr	r3, [pc, #660]	; (80053d4 <gpsMain+0x2ec>)
 8005140:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005144:	461a      	mov	r2, r3
 8005146:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800514a:	49a4      	ldr	r1, [pc, #656]	; (80053dc <gpsMain+0x2f4>)
 800514c:	4618      	mov	r0, r3
 800514e:	f00c fff1 	bl	8012134 <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 8005152:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005156:	4ba2      	ldr	r3, [pc, #648]	; (80053e0 <gpsMain+0x2f8>)
 8005158:	21dc      	movs	r1, #220	; 0xdc
 800515a:	20c8      	movs	r0, #200	; 0xc8
 800515c:	f7fd fc9e 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8005160:	4b9c      	ldr	r3, [pc, #624]	; (80053d4 <gpsMain+0x2ec>)
 8005162:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005166:	461a      	mov	r2, r3
 8005168:	4b9a      	ldr	r3, [pc, #616]	; (80053d4 <gpsMain+0x2ec>)
 800516a:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800516e:	4619      	mov	r1, r3
 8005170:	4b98      	ldr	r3, [pc, #608]	; (80053d4 <gpsMain+0x2ec>)
 8005172:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005176:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	460b      	mov	r3, r1
 800517e:	4999      	ldr	r1, [pc, #612]	; (80053e4 <gpsMain+0x2fc>)
 8005180:	f00c ffd8 	bl	8012134 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8005184:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005188:	4b97      	ldr	r3, [pc, #604]	; (80053e8 <gpsMain+0x300>)
 800518a:	2100      	movs	r1, #0
 800518c:	2000      	movs	r0, #0
 800518e:	f7fd fc85 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005192:	4b96      	ldr	r3, [pc, #600]	; (80053ec <gpsMain+0x304>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	4b94      	ldr	r3, [pc, #592]	; (80053ec <gpsMain+0x304>)
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	4619      	mov	r1, r3
 800519e:	4b93      	ldr	r3, [pc, #588]	; (80053ec <gpsMain+0x304>)
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	460b      	mov	r3, r1
 80051aa:	4991      	ldr	r1, [pc, #580]	; (80053f0 <gpsMain+0x308>)
 80051ac:	f00c ffc2 	bl	8012134 <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 80051b0:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80051b4:	4b8c      	ldr	r3, [pc, #560]	; (80053e8 <gpsMain+0x300>)
 80051b6:	2100      	movs	r1, #0
 80051b8:	20dc      	movs	r0, #220	; 0xdc
 80051ba:	f7fd fc6f 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 80051be:	4b8d      	ldr	r3, [pc, #564]	; (80053f4 <gpsMain+0x30c>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80051c6:	498c      	ldr	r1, [pc, #560]	; (80053f8 <gpsMain+0x310>)
 80051c8:	4618      	mov	r0, r3
 80051ca:	f00c ffb3 	bl	8012134 <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 80051ce:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80051d2:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <gpsMain+0x300>)
 80051d4:	2114      	movs	r1, #20
 80051d6:	20dc      	movs	r0, #220	; 0xdc
 80051d8:	f7fd fc60 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 80051dc:	4b7d      	ldr	r3, [pc, #500]	; (80053d4 <gpsMain+0x2ec>)
 80051de:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80051e2:	4619      	mov	r1, r3
 80051e4:	4b7b      	ldr	r3, [pc, #492]	; (80053d4 <gpsMain+0x2ec>)
 80051e6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80051ea:	461c      	mov	r4, r3
 80051ec:	4b79      	ldr	r3, [pc, #484]	; (80053d4 <gpsMain+0x2ec>)
 80051ee:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80051f2:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80051f6:	e9cd 2300 	strd	r2, r3, [sp]
 80051fa:	4623      	mov	r3, r4
 80051fc:	460a      	mov	r2, r1
 80051fe:	497f      	ldr	r1, [pc, #508]	; (80053fc <gpsMain+0x314>)
 8005200:	f00c ff98 	bl	8012134 <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 8005204:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005208:	4b7d      	ldr	r3, [pc, #500]	; (8005400 <gpsMain+0x318>)
 800520a:	2132      	movs	r1, #50	; 0x32
 800520c:	2000      	movs	r0, #0
 800520e:	f7fd fc45 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 8005212:	4b70      	ldr	r3, [pc, #448]	; (80053d4 <gpsMain+0x2ec>)
 8005214:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8005218:	4619      	mov	r1, r3
 800521a:	4b6e      	ldr	r3, [pc, #440]	; (80053d4 <gpsMain+0x2ec>)
 800521c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005220:	461c      	mov	r4, r3
 8005222:	4b6c      	ldr	r3, [pc, #432]	; (80053d4 <gpsMain+0x2ec>)
 8005224:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8005228:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800522c:	e9cd 2300 	strd	r2, r3, [sp]
 8005230:	4623      	mov	r3, r4
 8005232:	460a      	mov	r2, r1
 8005234:	4971      	ldr	r1, [pc, #452]	; (80053fc <gpsMain+0x314>)
 8005236:	f00c ff7d 	bl	8012134 <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 800523a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800523e:	4b70      	ldr	r3, [pc, #448]	; (8005400 <gpsMain+0x318>)
 8005240:	216e      	movs	r1, #110	; 0x6e
 8005242:	2000      	movs	r0, #0
 8005244:	f7fd fc2a 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 8005248:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <gpsMain+0x2ec>)
 800524a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800524e:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005252:	496c      	ldr	r1, [pc, #432]	; (8005404 <gpsMain+0x31c>)
 8005254:	f00c ff6e 	bl	8012134 <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 8005258:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800525c:	4b6a      	ldr	r3, [pc, #424]	; (8005408 <gpsMain+0x320>)
 800525e:	21aa      	movs	r1, #170	; 0xaa
 8005260:	2014      	movs	r0, #20
 8005262:	f7fd fc1b 	bl	8002a9c <lcdPutStr>
 8005266:	e029      	b.n	80052bc <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8005268:	4b5a      	ldr	r3, [pc, #360]	; (80053d4 <gpsMain+0x2ec>)
 800526a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800526e:	461a      	mov	r2, r3
 8005270:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005274:	4965      	ldr	r1, [pc, #404]	; (800540c <gpsMain+0x324>)
 8005276:	4618      	mov	r0, r3
 8005278:	f00c ff5c 	bl	8012134 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 800527c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005280:	4b59      	ldr	r3, [pc, #356]	; (80053e8 <gpsMain+0x300>)
 8005282:	2100      	movs	r1, #0
 8005284:	2000      	movs	r0, #0
 8005286:	f7fd fc09 	bl	8002a9c <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 800528a:	4b52      	ldr	r3, [pc, #328]	; (80053d4 <gpsMain+0x2ec>)
 800528c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005290:	461a      	mov	r2, r3
 8005292:	4b50      	ldr	r3, [pc, #320]	; (80053d4 <gpsMain+0x2ec>)
 8005294:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8005298:	4619      	mov	r1, r3
 800529a:	4b4e      	ldr	r3, [pc, #312]	; (80053d4 <gpsMain+0x2ec>)
 800529c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80052a0:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	460b      	mov	r3, r1
 80052a8:	4959      	ldr	r1, [pc, #356]	; (8005410 <gpsMain+0x328>)
 80052aa:	f00c ff43 	bl	8012134 <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 80052ae:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <gpsMain+0x300>)
 80052b4:	211e      	movs	r1, #30
 80052b6:	2000      	movs	r0, #0
 80052b8:	f7fd fbf0 	bl	8002a9c <lcdPutStr>
		}
		if(locUpdated){
 80052bc:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d07f      	beq.n	80053c4 <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 80052c4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80052c8:	4952      	ldr	r1, [pc, #328]	; (8005414 <gpsMain+0x32c>)
 80052ca:	4618      	mov	r0, r3
 80052cc:	f00c ff32 	bl	8012134 <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 80052d0:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80052d4:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <gpsMain+0x2f8>)
 80052d6:	21dc      	movs	r1, #220	; 0xdc
 80052d8:	2000      	movs	r0, #0
 80052da:	f7fd fbdf 	bl	8002a9c <lcdPutStr>
		}
		break;
 80052de:	e071      	b.n	80053c4 <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 80052e0:	493c      	ldr	r1, [pc, #240]	; (80053d4 <gpsMain+0x2ec>)
 80052e2:	483d      	ldr	r0, [pc, #244]	; (80053d8 <gpsMain+0x2f0>)
 80052e4:	f7fc ff0e 	bl	8002104 <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 80052e8:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <gpsMain+0x2f8>)
 80052ea:	4a3a      	ldr	r2, [pc, #232]	; (80053d4 <gpsMain+0x2ec>)
 80052ec:	2119      	movs	r1, #25
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7fd fbd4 	bl	8002a9c <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 80052f4:	4b3a      	ldr	r3, [pc, #232]	; (80053e0 <gpsMain+0x2f8>)
 80052f6:	4a48      	ldr	r2, [pc, #288]	; (8005418 <gpsMain+0x330>)
 80052f8:	2128      	movs	r1, #40	; 0x28
 80052fa:	2000      	movs	r0, #0
 80052fc:	f7fd fbce 	bl	8002a9c <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 8005300:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <gpsMain+0x2f8>)
 8005302:	4a46      	ldr	r2, [pc, #280]	; (800541c <gpsMain+0x334>)
 8005304:	2137      	movs	r1, #55	; 0x37
 8005306:	2000      	movs	r0, #0
 8005308:	f7fd fbc8 	bl	8002a9c <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <gpsMain+0x2f8>)
 800530e:	4a44      	ldr	r2, [pc, #272]	; (8005420 <gpsMain+0x338>)
 8005310:	2146      	movs	r1, #70	; 0x46
 8005312:	2000      	movs	r0, #0
 8005314:	f7fd fbc2 	bl	8002a9c <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 8005318:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <gpsMain+0x2f8>)
 800531a:	4a42      	ldr	r2, [pc, #264]	; (8005424 <gpsMain+0x33c>)
 800531c:	2155      	movs	r1, #85	; 0x55
 800531e:	2000      	movs	r0, #0
 8005320:	f7fd fbbc 	bl	8002a9c <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 8005324:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <gpsMain+0x2f8>)
 8005326:	4a40      	ldr	r2, [pc, #256]	; (8005428 <gpsMain+0x340>)
 8005328:	2164      	movs	r1, #100	; 0x64
 800532a:	2000      	movs	r0, #0
 800532c:	f7fd fbb6 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <gpsMain+0x2f8>)
 8005332:	4a3e      	ldr	r2, [pc, #248]	; (800542c <gpsMain+0x344>)
 8005334:	2119      	movs	r1, #25
 8005336:	2064      	movs	r0, #100	; 0x64
 8005338:	f7fd fbb0 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 800533c:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <gpsMain+0x2f8>)
 800533e:	4a3c      	ldr	r2, [pc, #240]	; (8005430 <gpsMain+0x348>)
 8005340:	2128      	movs	r1, #40	; 0x28
 8005342:	2064      	movs	r0, #100	; 0x64
 8005344:	f7fd fbaa 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <gpsMain+0x2f8>)
 800534a:	4a3a      	ldr	r2, [pc, #232]	; (8005434 <gpsMain+0x34c>)
 800534c:	2137      	movs	r1, #55	; 0x37
 800534e:	2064      	movs	r0, #100	; 0x64
 8005350:	f7fd fba4 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <gpsMain+0x2f8>)
 8005356:	4a38      	ldr	r2, [pc, #224]	; (8005438 <gpsMain+0x350>)
 8005358:	2146      	movs	r1, #70	; 0x46
 800535a:	2064      	movs	r0, #100	; 0x64
 800535c:	f7fd fb9e 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8005360:	4b1f      	ldr	r3, [pc, #124]	; (80053e0 <gpsMain+0x2f8>)
 8005362:	4a36      	ldr	r2, [pc, #216]	; (800543c <gpsMain+0x354>)
 8005364:	2155      	movs	r1, #85	; 0x55
 8005366:	2064      	movs	r0, #100	; 0x64
 8005368:	f7fd fb98 	bl	8002a9c <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 800536c:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <gpsMain+0x2f8>)
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <gpsMain+0x358>)
 8005370:	2164      	movs	r1, #100	; 0x64
 8005372:	2064      	movs	r0, #100	; 0x64
 8005374:	f7fd fb92 	bl	8002a9c <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8005378:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <gpsMain+0x2f8>)
 800537a:	4a32      	ldr	r2, [pc, #200]	; (8005444 <gpsMain+0x35c>)
 800537c:	2119      	movs	r1, #25
 800537e:	20c8      	movs	r0, #200	; 0xc8
 8005380:	f7fd fb8c 	bl	8002a9c <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <gpsMain+0x2f8>)
 8005386:	4a30      	ldr	r2, [pc, #192]	; (8005448 <gpsMain+0x360>)
 8005388:	2128      	movs	r1, #40	; 0x28
 800538a:	20c8      	movs	r0, #200	; 0xc8
 800538c:	f7fd fb86 	bl	8002a9c <lcdPutStr>
		break;
 8005390:	e019      	b.n	80053c6 <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 8005392:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005396:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	3304      	adds	r3, #4
 80053a0:	f240 2255 	movw	r2, #597	; 0x255
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f00b fd7e 	bl	8010ea8 <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 80053ac:	463b      	mov	r3, r7
 80053ae:	4927      	ldr	r1, [pc, #156]	; (800544c <gpsMain+0x364>)
 80053b0:	4618      	mov	r0, r3
 80053b2:	f00c ff50 	bl	8012256 <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 80053b6:	463a      	mov	r2, r7
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <gpsMain+0x2f8>)
 80053ba:	2100      	movs	r1, #0
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fd fb9b 	bl	8002af8 <lcdPutStrML>
		break;
 80053c2:	e000      	b.n	80053c6 <gpsMain+0x2de>
		break;
 80053c4:	bf00      	nop





}
 80053c6:	bf00      	nop
 80053c8:	f507 7725 	add.w	r7, r7, #660	; 0x294
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}
 80053d0:	20005cd8 	.word	0x20005cd8
 80053d4:	20005608 	.word	0x20005608
 80053d8:	200057bc 	.word	0x200057bc
 80053dc:	0801a18c 	.word	0x0801a18c
 80053e0:	0801cd38 	.word	0x0801cd38
 80053e4:	0801a1a4 	.word	0x0801a1a4
 80053e8:	0801d1b4 	.word	0x0801d1b4
 80053ec:	20005780 	.word	0x20005780
 80053f0:	0801a1b8 	.word	0x0801a1b8
 80053f4:	2000014c 	.word	0x2000014c
 80053f8:	0801a1cc 	.word	0x0801a1cc
 80053fc:	0801a1d4 	.word	0x0801a1d4
 8005400:	080205e4 	.word	0x080205e4
 8005404:	0801a1e0 	.word	0x0801a1e0
 8005408:	0801e77c 	.word	0x0801e77c
 800540c:	0801a1ec 	.word	0x0801a1ec
 8005410:	0801a204 	.word	0x0801a204
 8005414:	0801a220 	.word	0x0801a220
 8005418:	2000565e 	.word	0x2000565e
 800541c:	2000566d 	.word	0x2000566d
 8005420:	2000567c 	.word	0x2000567c
 8005424:	2000568b 	.word	0x2000568b
 8005428:	2000569a 	.word	0x2000569a
 800542c:	200056a9 	.word	0x200056a9
 8005430:	200056b8 	.word	0x200056b8
 8005434:	200056c7 	.word	0x200056c7
 8005438:	200056d6 	.word	0x200056d6
 800543c:	200056e5 	.word	0x200056e5
 8005440:	200056f4 	.word	0x200056f4
 8005444:	20005703 	.word	0x20005703
 8005448:	20005712 	.word	0x20005712
 800544c:	200057c0 	.word	0x200057c0

08005450 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <setDefaultClbcks+0x1c>)
 8005456:	4a06      	ldr	r2, [pc, #24]	; (8005470 <setDefaultClbcks+0x20>)
 8005458:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <setDefaultClbcks+0x24>)
 800545c:	4a06      	ldr	r2, [pc, #24]	; (8005478 <setDefaultClbcks+0x28>)
 800545e:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	200025f0 	.word	0x200025f0
 8005470:	08002601 	.word	0x08002601
 8005474:	20002638 	.word	0x20002638
 8005478:	08002611 	.word	0x08002611

0800547c <localSetup>:
void localSetup(void){
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005480:	f7ff ffe6 	bl	8005450 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <localSetup+0x50>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <localSetup+0x54>)
 800548c:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <localSetup+0x50>)
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	461a      	mov	r2, r3
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <localSetup+0x54>)
 8005496:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <localSetup+0x50>)
 800549a:	789b      	ldrb	r3, [r3, #2]
 800549c:	461a      	mov	r2, r3
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <localSetup+0x54>)
 80054a0:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <localSetup+0x58>)
 80054a4:	789b      	ldrb	r3, [r3, #2]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <localSetup+0x54>)
 80054aa:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <localSetup+0x58>)
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4a07      	ldr	r2, [pc, #28]	; (80054d0 <localSetup+0x54>)
 80054b4:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <localSetup+0x58>)
 80054b8:	78db      	ldrb	r3, [r3, #3]
 80054ba:	3364      	adds	r3, #100	; 0x64
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <localSetup+0x54>)
 80054be:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 80054c0:	4803      	ldr	r0, [pc, #12]	; (80054d0 <localSetup+0x54>)
 80054c2:	f00b fdd1 	bl	8011068 <mktime>
}
 80054c6:	bf00      	nop
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20005780 	.word	0x20005780
 80054d0:	20005cdc 	.word	0x20005cdc
 80054d4:	20005794 	.word	0x20005794

080054d8 <localMain>:


void localMain(void){
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b0c6      	sub	sp, #280	; 0x118
 80054de:	af02      	add	r7, sp, #8
	testTime.tm_hour = RtcTime.Hours;
 80054e0:	4bdb      	ldr	r3, [pc, #876]	; (8005850 <localMain+0x378>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	4bdb      	ldr	r3, [pc, #876]	; (8005854 <localMain+0x37c>)
 80054e8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80054ea:	4bd9      	ldr	r3, [pc, #868]	; (8005850 <localMain+0x378>)
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	461a      	mov	r2, r3
 80054f0:	4bd8      	ldr	r3, [pc, #864]	; (8005854 <localMain+0x37c>)
 80054f2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80054f4:	4bd6      	ldr	r3, [pc, #856]	; (8005850 <localMain+0x378>)
 80054f6:	789b      	ldrb	r3, [r3, #2]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4bd6      	ldr	r3, [pc, #856]	; (8005854 <localMain+0x37c>)
 80054fc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80054fe:	4bd6      	ldr	r3, [pc, #856]	; (8005858 <localMain+0x380>)
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	461a      	mov	r2, r3
 8005504:	4bd3      	ldr	r3, [pc, #844]	; (8005854 <localMain+0x37c>)
 8005506:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8005508:	4bd3      	ldr	r3, [pc, #844]	; (8005858 <localMain+0x380>)
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	3b01      	subs	r3, #1
 800550e:	4ad1      	ldr	r2, [pc, #836]	; (8005854 <localMain+0x37c>)
 8005510:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8005512:	4bd1      	ldr	r3, [pc, #836]	; (8005858 <localMain+0x380>)
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	3364      	adds	r3, #100	; 0x64
 8005518:	4ace      	ldr	r2, [pc, #824]	; (8005854 <localMain+0x37c>)
 800551a:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 800551c:	48cd      	ldr	r0, [pc, #820]	; (8005854 <localMain+0x37c>)
 800551e:	f00b fda3 	bl	8011068 <mktime>

	char textBuffer[50] = {0};
 8005522:	2300      	movs	r3, #0
 8005524:	667b      	str	r3, [r7, #100]	; 0x64
 8005526:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800552a:	222e      	movs	r2, #46	; 0x2e
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f00b fcba 	bl	8010ea8 <memset>
	char textBuffer2[50] = {0};
 8005534:	2300      	movs	r3, #0
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
 8005538:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800553c:	222e      	movs	r2, #46	; 0x2e
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f00b fcb1 	bl	8010ea8 <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8005546:	4bc3      	ldr	r3, [pc, #780]	; (8005854 <localMain+0x37c>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	1d9a      	adds	r2, r3, #6
 800554c:	4bc3      	ldr	r3, [pc, #780]	; (800585c <localMain+0x384>)
 800554e:	fb83 1302 	smull	r1, r3, r3, r2
 8005552:	4413      	add	r3, r2
 8005554:	1099      	asrs	r1, r3, #2
 8005556:	17d3      	asrs	r3, r2, #31
 8005558:	1ac9      	subs	r1, r1, r3
 800555a:	460b      	mov	r3, r1
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	1a5b      	subs	r3, r3, r1
 8005560:	1ad1      	subs	r1, r2, r3
 8005562:	b2cb      	uxtb	r3, r1
 8005564:	3301      	adds	r3, #1
 8005566:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 800556a:	4bba      	ldr	r3, [pc, #744]	; (8005854 <localMain+0x37c>)
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f103 0208 	add.w	r2, r3, #8
 8005572:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	4ab8      	ldr	r2, [pc, #736]	; (800585c <localMain+0x384>)
 800557a:	fb82 1203 	smull	r1, r2, r2, r3
 800557e:	441a      	add	r2, r3
 8005580:	1092      	asrs	r2, r2, #2
 8005582:	17db      	asrs	r3, r3, #31
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 800558a:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 800558e:	4bb1      	ldr	r3, [pc, #708]	; (8005854 <localMain+0x37c>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005598:	49b1      	ldr	r1, [pc, #708]	; (8005860 <localMain+0x388>)
 800559a:	f00c fdcb 	bl	8012134 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 800559e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80055a2:	4bb0      	ldr	r3, [pc, #704]	; (8005864 <localMain+0x38c>)
 80055a4:	210a      	movs	r1, #10
 80055a6:	200a      	movs	r0, #10
 80055a8:	f7fd fa78 	bl	8002a9c <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 80055ac:	48a9      	ldr	r0, [pc, #676]	; (8005854 <localMain+0x37c>)
 80055ae:	f00b fbb3 	bl	8010d18 <asctime>
 80055b2:	4602      	mov	r2, r0
 80055b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f00c fdba 	bl	8012134 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 80055c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80055c4:	4ba8      	ldr	r3, [pc, #672]	; (8005868 <localMain+0x390>)
 80055c6:	210a      	movs	r1, #10
 80055c8:	20aa      	movs	r0, #170	; 0xaa
 80055ca:	f7fd fa67 	bl	8002a9c <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 80055ce:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80055d2:	4ba0      	ldr	r3, [pc, #640]	; (8005854 <localMain+0x37c>)
 80055d4:	4aa5      	ldr	r2, [pc, #660]	; (800586c <localMain+0x394>)
 80055d6:	2128      	movs	r1, #40	; 0x28
 80055d8:	f00d fb7e 	bl	8012cd8 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 80055dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80055e0:	4ba1      	ldr	r3, [pc, #644]	; (8005868 <localMain+0x390>)
 80055e2:	2116      	movs	r1, #22
 80055e4:	20aa      	movs	r0, #170	; 0xaa
 80055e6:	f7fd fa59 	bl	8002a9c <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 80055ea:	4b9a      	ldr	r3, [pc, #616]	; (8005854 <localMain+0x37c>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
	uint8_t mmin = testTime.tm_min;
 80055f2:	4b98      	ldr	r3, [pc, #608]	; (8005854 <localMain+0x37c>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
	uint8_t ssec = testTime.tm_sec;
 80055fa:	4b96      	ldr	r3, [pc, #600]	; (8005854 <localMain+0x37c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
//	int GLOBAL_timezone = 2;		// [h] east+ west-
	int dayOfTheYear = testTime.tm_yday+1;
 8005602:	4b94      	ldr	r3, [pc, #592]	; (8005854 <localMain+0x37c>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-GLOBAL_timezone-12)/24);
 800560c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	f897 10f5 	ldrb.w	r1, [r7, #245]	; 0xf5
 8005616:	4b96      	ldr	r3, [pc, #600]	; (8005870 <localMain+0x398>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	1acb      	subs	r3, r1, r3
 800561c:	3b0c      	subs	r3, #12
 800561e:	4995      	ldr	r1, [pc, #596]	; (8005874 <localMain+0x39c>)
 8005620:	fb81 0103 	smull	r0, r1, r1, r3
 8005624:	1089      	asrs	r1, r1, #2
 8005626:	17db      	asrs	r3, r3, #31
 8005628:	1acb      	subs	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa ff99 	bl	8000564 <__aeabi_i2d>
 8005632:	a371      	add	r3, pc, #452	; (adr r3, 80057f8 <localMain+0x320>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fffe 	bl	8000638 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	f7fb faf0 	bl	8000c28 <__aeabi_d2f>
 8005648:	4603      	mov	r3, r0
 800564a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 800564e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005652:	f7fa ff99 	bl	8000588 <__aeabi_f2d>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	ec43 2b10 	vmov	d0, r2, r3
 800565e:	f011 fde3 	bl	8017228 <cos>
 8005662:	ec51 0b10 	vmov	r0, r1, d0
 8005666:	a366      	add	r3, pc, #408	; (adr r3, 8005800 <localMain+0x328>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ffe4 	bl	8000638 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	a363      	add	r3, pc, #396	; (adr r3, 8005808 <localMain+0x330>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa fe25 	bl	80002cc <__adddf3>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4614      	mov	r4, r2
 8005688:	461d      	mov	r5, r3
 800568a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800568e:	f7fa ff7b 	bl	8000588 <__aeabi_f2d>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	ec43 2b10 	vmov	d0, r2, r3
 800569a:	f011 fe19 	bl	80172d0 <sin>
 800569e:	ec51 0b10 	vmov	r0, r1, d0
 80056a2:	a35b      	add	r3, pc, #364	; (adr r3, 8005810 <localMain+0x338>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa ffc6 	bl	8000638 <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fe08 	bl	80002c8 <__aeabi_dsub>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4614      	mov	r4, r2
 80056be:	461d      	mov	r5, r3
 80056c0:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80056c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056c8:	ee17 0a90 	vmov	r0, s15
 80056cc:	f7fa ff5c 	bl	8000588 <__aeabi_f2d>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	ec43 2b10 	vmov	d0, r2, r3
 80056d8:	f011 fda6 	bl	8017228 <cos>
 80056dc:	ec51 0b10 	vmov	r0, r1, d0
 80056e0:	a34d      	add	r3, pc, #308	; (adr r3, 8005818 <localMain+0x340>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa ffa7 	bl	8000638 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa fde9 	bl	80002c8 <__aeabi_dsub>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4614      	mov	r4, r2
 80056fc:	461d      	mov	r5, r3
 80056fe:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005702:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005706:	ee17 0a90 	vmov	r0, s15
 800570a:	f7fa ff3d 	bl	8000588 <__aeabi_f2d>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b10 	vmov	d0, r2, r3
 8005716:	f011 fddb 	bl	80172d0 <sin>
 800571a:	ec51 0b10 	vmov	r0, r1, d0
 800571e:	a340      	add	r3, pc, #256	; (adr r3, 8005820 <localMain+0x348>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa ff88 	bl	8000638 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa fdca 	bl	80002c8 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	a33a      	add	r3, pc, #232	; (adr r3, 8005828 <localMain+0x350>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fa ff79 	bl	8000638 <__aeabi_dmul>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	f7fb fa6b 	bl	8000c28 <__aeabi_d2f>
 8005752:	4603      	mov	r3, r0
 8005754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8005758:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800575c:	f7fa ff14 	bl	8000588 <__aeabi_f2d>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	ec43 2b10 	vmov	d0, r2, r3
 8005768:	f011 fd5e 	bl	8017228 <cos>
 800576c:	ec51 0b10 	vmov	r0, r1, d0
 8005770:	a32f      	add	r3, pc, #188	; (adr r3, 8005830 <localMain+0x358>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa ff5f 	bl	8000638 <__aeabi_dmul>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	a12e      	add	r1, pc, #184	; (adr r1, 8005838 <localMain+0x360>)
 8005780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005784:	f7fa fda0 	bl	80002c8 <__aeabi_dsub>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4614      	mov	r4, r2
 800578e:	461d      	mov	r5, r3
 8005790:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005794:	f7fa fef8 	bl	8000588 <__aeabi_f2d>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	ec43 2b10 	vmov	d0, r2, r3
 80057a0:	f011 fd96 	bl	80172d0 <sin>
 80057a4:	ec51 0b10 	vmov	r0, r1, d0
 80057a8:	a325      	add	r3, pc, #148	; (adr r3, 8005840 <localMain+0x368>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff43 	bl	8000638 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fa fd87 	bl	80002cc <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4614      	mov	r4, r2
 80057c4:	461d      	mov	r5, r3
 80057c6:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80057ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057ce:	ee17 0a90 	vmov	r0, s15
 80057d2:	f7fa fed9 	bl	8000588 <__aeabi_f2d>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	ec43 2b10 	vmov	d0, r2, r3
 80057de:	f011 fd23 	bl	8017228 <cos>
 80057e2:	ec51 0b10 	vmov	r0, r1, d0
 80057e6:	a318      	add	r3, pc, #96	; (adr r3, 8005848 <localMain+0x370>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa ff24 	bl	8000638 <__aeabi_dmul>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4620      	mov	r0, r4
 80057f6:	e03f      	b.n	8005878 <localMain+0x3a0>
 80057f8:	d4b3ac9a 	.word	0xd4b3ac9a
 80057fc:	3f91a099 	.word	0x3f91a099
 8005800:	ba2be059 	.word	0xba2be059
 8005804:	3f5e9af5 	.word	0x3f5e9af5
 8005808:	30553261 	.word	0x30553261
 800580c:	3f13a92a 	.word	0x3f13a92a
 8005810:	83e8576d 	.word	0x83e8576d
 8005814:	3fa06c65 	.word	0x3fa06c65
 8005818:	183f91e6 	.word	0x183f91e6
 800581c:	3f8dee78 	.word	0x3f8dee78
 8005820:	fe260b2d 	.word	0xfe260b2d
 8005824:	3fa4ea28 	.word	0x3fa4ea28
 8005828:	8f5c28f6 	.word	0x8f5c28f6
 800582c:	406ca5c2 	.word	0x406ca5c2
 8005830:	8051c9f7 	.word	0x8051c9f7
 8005834:	3fd99828 	.word	0x3fd99828
 8005838:	7c0f4517 	.word	0x7c0f4517
 800583c:	3f7c560c 	.word	0x3f7c560c
 8005840:	dd50a88f 	.word	0xdd50a88f
 8005844:	3fb1fc5c 	.word	0x3fb1fc5c
 8005848:	cfc829d0 	.word	0xcfc829d0
 800584c:	3f7bae46 	.word	0x3f7bae46
 8005850:	20005780 	.word	0x20005780
 8005854:	20005cdc 	.word	0x20005cdc
 8005858:	20005794 	.word	0x20005794
 800585c:	92492493 	.word	0x92492493
 8005860:	0801a2f0 	.word	0x0801a2f0
 8005864:	080260a8 	.word	0x080260a8
 8005868:	08025c2c 	.word	0x08025c2c
 800586c:	0801a300 	.word	0x0801a300
 8005870:	2000014c 	.word	0x2000014c
 8005874:	2aaaaaab 	.word	0x2aaaaaab
 8005878:	4629      	mov	r1, r5
 800587a:	f7fa fd25 	bl	80002c8 <__aeabi_dsub>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4614      	mov	r4, r2
 8005884:	461d      	mov	r5, r3
 8005886:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800588a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800588e:	ee17 0a90 	vmov	r0, s15
 8005892:	f7fa fe79 	bl	8000588 <__aeabi_f2d>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	ec43 2b10 	vmov	d0, r2, r3
 800589e:	f011 fd17 	bl	80172d0 <sin>
 80058a2:	ec51 0b10 	vmov	r0, r1, d0
 80058a6:	a35c      	add	r3, pc, #368	; (adr r3, 8005a18 <localMain+0x540>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fec4 	bl	8000638 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fd08 	bl	80002cc <__adddf3>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4614      	mov	r4, r2
 80058c2:	461d      	mov	r5, r3
 80058c4:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80058c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80058cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058d0:	ee17 0a90 	vmov	r0, s15
 80058d4:	f7fa fe58 	bl	8000588 <__aeabi_f2d>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	ec43 2b10 	vmov	d0, r2, r3
 80058e0:	f011 fca2 	bl	8017228 <cos>
 80058e4:	ec51 0b10 	vmov	r0, r1, d0
 80058e8:	a34d      	add	r3, pc, #308	; (adr r3, 8005a20 <localMain+0x548>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fea3 	bl	8000638 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fa fce5 	bl	80002c8 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4614      	mov	r4, r2
 8005904:	461d      	mov	r5, r3
 8005906:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800590a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800590e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005912:	ee17 0a90 	vmov	r0, s15
 8005916:	f7fa fe37 	bl	8000588 <__aeabi_f2d>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	ec43 2b10 	vmov	d0, r2, r3
 8005922:	f011 fcd5 	bl	80172d0 <sin>
 8005926:	ec51 0b10 	vmov	r0, r1, d0
 800592a:	a33f      	add	r3, pc, #252	; (adr r3, 8005a28 <localMain+0x550>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa fe82 	bl	8000638 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4620      	mov	r0, r4
 800593a:	4629      	mov	r1, r5
 800593c:	f7fa fcc6 	bl	80002cc <__adddf3>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f7fb f96e 	bl	8000c28 <__aeabi_d2f>
 800594c:	4603      	mov	r3, r0
 800594e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 8005952:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <localMain+0x538>)
 8005954:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8005958:	2b00      	cmp	r3, #0
 800595a:	d069      	beq.n	8005a30 <localMain+0x558>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 800595c:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <localMain+0x538>)
 800595e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005962:	4618      	mov	r0, r3
 8005964:	f7fa fdee 	bl	8000544 <__aeabi_ui2d>
 8005968:	4604      	mov	r4, r0
 800596a:	460d      	mov	r5, r1
 800596c:	4b28      	ldr	r3, [pc, #160]	; (8005a10 <localMain+0x538>)
 800596e:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <localMain+0x53c>)
 8005978:	f7fa ff88 	bl	800088c <__aeabi_ddiv>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4620      	mov	r0, r4
 8005982:	4629      	mov	r1, r5
 8005984:	f7fa fca2 	bl	80002cc <__adddf3>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 8005990:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <localMain+0x538>)
 8005992:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005996:	4618      	mov	r0, r3
 8005998:	f7fa fdd4 	bl	8000544 <__aeabi_ui2d>
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <localMain+0x538>)
 80059a2:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <localMain+0x53c>)
 80059ac:	f7fa ff6e 	bl	800088c <__aeabi_ddiv>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4620      	mov	r0, r4
 80059b6:	4629      	mov	r1, r5
 80059b8:	f7fa fc88 	bl	80002cc <__adddf3>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		if(location.n_s == 'S') longitude = longitude*(-1);
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <localMain+0x538>)
 80059c6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80059ca:	2b53      	cmp	r3, #83	; 0x53
 80059cc:	d10b      	bne.n	80059e6 <localMain+0x50e>
 80059ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	ed97 7b02 	vldr	d7, [r7, #8]
 80059e2:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
		if(location.w_e == 'W') latitude = latitude*(-1);
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <localMain+0x538>)
 80059e8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80059ec:	2b57      	cmp	r3, #87	; 0x57
 80059ee:	d147      	bne.n	8005a80 <localMain+0x5a8>
 80059f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	ed97 7b00 	vldr	d7, [r7]
 8005a04:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
 8005a08:	e03a      	b.n	8005a80 <localMain+0x5a8>
 8005a0a:	bf00      	nop
 8005a0c:	f3af 8000 	nop.w
 8005a10:	20005608 	.word	0x20005608
 8005a14:	404e0000 	.word	0x404e0000
 8005a18:	ab324852 	.word	0xab324852
 8005a1c:	3f4db877 	.word	0x3f4db877
 8005a20:	d9839475 	.word	0xd9839475
 8005a24:	3f661804 	.word	0x3f661804
 8005a28:	e646f156 	.word	0xe646f156
 8005a2c:	3f583f91 	.word	0x3f583f91
	} else {
		longitude = 17; 	// [deg]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	4be0      	ldr	r3, [pc, #896]	; (8005db8 <localMain+0x8e0>)
 8005a36:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		latitude = 51;	// [deg]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	4bdf      	ldr	r3, [pc, #892]	; (8005dbc <localMain+0x8e4>)
 8005a40:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		if(longitude>=0) location.n_s = 'N';
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8005a50:	f7fb f878 	bl	8000b44 <__aeabi_dcmpge>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <localMain+0x58a>
 8005a5a:	4bd9      	ldr	r3, [pc, #868]	; (8005dc0 <localMain+0x8e8>)
 8005a5c:	224e      	movs	r2, #78	; 0x4e
 8005a5e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005a6e:	f7fb f869 	bl	8000b44 <__aeabi_dcmpge>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <localMain+0x5a8>
 8005a78:	4bd1      	ldr	r3, [pc, #836]	; (8005dc0 <localMain+0x8e8>)
 8005a7a:	2245      	movs	r2, #69	; 0x45
 8005a7c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	sprintf(&textBuffer, "%c %.3f ", location.n_s, latitude);
 8005a80:	4bcf      	ldr	r3, [pc, #828]	; (8005dc0 <localMain+0x8e8>)
 8005a82:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8005a86:	4619      	mov	r1, r3
 8005a88:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005a8c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005a90:	e9cd 2300 	strd	r2, r3, [sp]
 8005a94:	460a      	mov	r2, r1
 8005a96:	49cb      	ldr	r1, [pc, #812]	; (8005dc4 <localMain+0x8ec>)
 8005a98:	f00c fb4c 	bl	8012134 <siprintf>
	lcdPutStr(170, 34, textBuffer, smallestFont);
 8005a9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005aa0:	4bc9      	ldr	r3, [pc, #804]	; (8005dc8 <localMain+0x8f0>)
 8005aa2:	2122      	movs	r1, #34	; 0x22
 8005aa4:	20aa      	movs	r0, #170	; 0xaa
 8005aa6:	f7fc fff9 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "%c %.3f", location.w_e, longitude);
 8005aaa:	4bc5      	ldr	r3, [pc, #788]	; (8005dc0 <localMain+0x8e8>)
 8005aac:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005ab6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8005aba:	e9cd 2300 	strd	r2, r3, [sp]
 8005abe:	460a      	mov	r2, r1
 8005ac0:	49c2      	ldr	r1, [pc, #776]	; (8005dcc <localMain+0x8f4>)
 8005ac2:	f00c fb37 	bl	8012134 <siprintf>
	lcdPutStr(170, 46, textBuffer, smallestFont);
 8005ac6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005aca:	4bbf      	ldr	r3, [pc, #764]	; (8005dc8 <localMain+0x8f0>)
 8005acc:	212e      	movs	r1, #46	; 0x2e
 8005ace:	20aa      	movs	r0, #170	; 0xaa
 8005ad0:	f7fc ffe4 	bl	8002a9c <lcdPutStr>

	float time_off = eqtime+4*longitude-60*GLOBAL_timezone; // time offset [min]
 8005ad4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005ad8:	f7fa fd56 	bl	8000588 <__aeabi_f2d>
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	4bba      	ldr	r3, [pc, #744]	; (8005dd0 <localMain+0x8f8>)
 8005ae6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8005aea:	f7fa fda5 	bl	8000638 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa fbe9 	bl	80002cc <__adddf3>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	461d      	mov	r5, r3
 8005b02:	4bb4      	ldr	r3, [pc, #720]	; (8005dd4 <localMain+0x8fc>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fa fd28 	bl	8000564 <__aeabi_i2d>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7fa fbd4 	bl	80002c8 <__aeabi_dsub>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	f7fb f87e 	bl	8000c28 <__aeabi_d2f>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 8005b32:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8005b44:	4413      	add	r3, r2
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b4e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5a:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 8005dd8 <localMain+0x900>
 8005b5e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b66:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6e:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8005b72:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8005b76:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b7e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8005ddc <localMain+0x904>
 8005b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b86:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8005b8a:	a389      	add	r3, pc, #548	; (adr r3, 8005db0 <localMain+0x8d8>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005b94:	f7fa fd50 	bl	8000638 <__aeabi_dmul>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	4b8e      	ldr	r3, [pc, #568]	; (8005de0 <localMain+0x908>)
 8005ba6:	f7fa fe71 	bl	800088c <__aeabi_ddiv>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	ec43 2b17 	vmov	d7, r2, r3
 8005bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8005bb6:	eef0 0a67 	vmov.f32	s1, s15
 8005bba:	f011 fb89 	bl	80172d0 <sin>
 8005bbe:	ec55 4b10 	vmov	r4, r5, d0
 8005bc2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005bc6:	f7fa fcdf 	bl	8000588 <__aeabi_f2d>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	ec43 2b10 	vmov	d0, r2, r3
 8005bd2:	f011 fb7d 	bl	80172d0 <sin>
 8005bd6:	ec53 2b10 	vmov	r2, r3, d0
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fd2b 	bl	8000638 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4614      	mov	r4, r2
 8005be8:	461d      	mov	r5, r3
 8005bea:	a371      	add	r3, pc, #452	; (adr r3, 8005db0 <localMain+0x8d8>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005bf4:	f7fa fd20 	bl	8000638 <__aeabi_dmul>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	4b76      	ldr	r3, [pc, #472]	; (8005de0 <localMain+0x908>)
 8005c06:	f7fa fe41 	bl	800088c <__aeabi_ddiv>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	ec43 2b17 	vmov	d7, r2, r3
 8005c12:	eeb0 0a47 	vmov.f32	s0, s14
 8005c16:	eef0 0a67 	vmov.f32	s1, s15
 8005c1a:	f011 fb05 	bl	8017228 <cos>
 8005c1e:	ec59 8b10 	vmov	r8, r9, d0
 8005c22:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005c26:	f7fa fcaf 	bl	8000588 <__aeabi_f2d>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	ec43 2b10 	vmov	d0, r2, r3
 8005c32:	f011 faf9 	bl	8017228 <cos>
 8005c36:	ec53 2b10 	vmov	r2, r3, d0
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fcfb 	bl	8000638 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4690      	mov	r8, r2
 8005c48:	4699      	mov	r9, r3
 8005c4a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005c4e:	f7fa fc9b 	bl	8000588 <__aeabi_f2d>
 8005c52:	a357      	add	r3, pc, #348	; (adr r3, 8005db0 <localMain+0x8d8>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f7fa fcee 	bl	8000638 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <localMain+0x908>)
 8005c6a:	f7fa fe0f 	bl	800088c <__aeabi_ddiv>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	ec43 2b17 	vmov	d7, r2, r3
 8005c76:	eeb0 0a47 	vmov.f32	s0, s14
 8005c7a:	eef0 0a67 	vmov.f32	s1, s15
 8005c7e:	f011 fad3 	bl	8017228 <cos>
 8005c82:	ec53 2b10 	vmov	r2, r3, d0
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa fcd5 	bl	8000638 <__aeabi_dmul>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fb19 	bl	80002cc <__adddf3>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7fa ffc1 	bl	8000c28 <__aeabi_d2f>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float phi = acos(cosphi);
 8005cac:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005cb0:	f7fa fc6a 	bl	8000588 <__aeabi_f2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	ec43 2b10 	vmov	d0, r2, r3
 8005cbc:	f011 fb94 	bl	80173e8 <acos>
 8005cc0:	ec53 2b10 	vmov	r2, r3, d0
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f7fa ffae 	bl	8000c28 <__aeabi_d2f>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float sinphi = sqrt(1-cosphi*cosphi);
 8005cd2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8005cd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce2:	ee17 0a90 	vmov	r0, s15
 8005ce6:	f7fa fc4f 	bl	8000588 <__aeabi_f2d>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	ec43 2b10 	vmov	d0, r2, r3
 8005cf2:	f011 fc1d 	bl	8017530 <sqrt>
 8005cf6:	ec53 2b10 	vmov	r2, r3, d0
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f7fa ff93 	bl	8000c28 <__aeabi_d2f>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8005d08:	a329      	add	r3, pc, #164	; (adr r3, 8005db0 <localMain+0x8d8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005d12:	f7fa fc91 	bl	8000638 <__aeabi_dmul>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <localMain+0x908>)
 8005d24:	f7fa fdb2 	bl	800088c <__aeabi_ddiv>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	ec43 2b17 	vmov	d7, r2, r3
 8005d30:	eeb0 0a47 	vmov.f32	s0, s14
 8005d34:	eef0 0a67 	vmov.f32	s1, s15
 8005d38:	f011 faca 	bl	80172d0 <sin>
 8005d3c:	ec55 4b10 	vmov	r4, r5, d0
 8005d40:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005d44:	f7fa fc20 	bl	8000588 <__aeabi_f2d>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fc72 	bl	8000638 <__aeabi_dmul>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005d60:	f7fa fc12 	bl	8000588 <__aeabi_f2d>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	ec43 2b10 	vmov	d0, r2, r3
 8005d6c:	f011 fab0 	bl	80172d0 <sin>
 8005d70:	ec53 2b10 	vmov	r2, r3, d0
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa faa6 	bl	80002c8 <__aeabi_dsub>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4692      	mov	sl, r2
 8005d82:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005d86:	a30a      	add	r3, pc, #40	; (adr r3, 8005db0 <localMain+0x8d8>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005d90:	f7fa fc52 	bl	8000638 <__aeabi_dmul>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <localMain+0x908>)
 8005da2:	f7fa fd73 	bl	800088c <__aeabi_ddiv>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	ec43 2b17 	vmov	d7, r2, r3
 8005dae:	e019      	b.n	8005de4 <localMain+0x90c>
 8005db0:	54442d18 	.word	0x54442d18
 8005db4:	400921fb 	.word	0x400921fb
 8005db8:	40310000 	.word	0x40310000
 8005dbc:	40498000 	.word	0x40498000
 8005dc0:	20005608 	.word	0x20005608
 8005dc4:	0801a314 	.word	0x0801a314
 8005dc8:	08025c2c 	.word	0x08025c2c
 8005dcc:	0801a320 	.word	0x0801a320
 8005dd0:	40100000 	.word	0x40100000
 8005dd4:	2000014c 	.word	0x2000014c
 8005dd8:	42700000 	.word	0x42700000
 8005ddc:	43340000 	.word	0x43340000
 8005de0:	40668000 	.word	0x40668000
 8005de4:	eeb0 0a47 	vmov.f32	s0, s14
 8005de8:	eef0 0a67 	vmov.f32	s1, s15
 8005dec:	f011 fa1c 	bl	8017228 <cos>
 8005df0:	ec55 4b10 	vmov	r4, r5, d0
 8005df4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005df8:	f7fa fbc6 	bl	8000588 <__aeabi_f2d>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7fa fc18 	bl	8000638 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	4659      	mov	r1, fp
 8005e10:	f7fa fd3c 	bl	800088c <__aeabi_ddiv>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	ec43 2b17 	vmov	d7, r2, r3
 8005e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8005e20:	eef0 0a67 	vmov.f32	s1, s15
 8005e24:	f011 fae0 	bl	80173e8 <acos>
 8005e28:	ec53 2b10 	vmov	r2, r3, d0
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	f7fa fefa 	bl	8000c28 <__aeabi_d2f>
 8005e34:	4603      	mov	r3, r0
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef1 7a67 	vneg.f32	s15, s15
 8005e3e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8005e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e4a:	4ae7      	ldr	r2, [pc, #924]	; (80061e8 <localMain+0xd10>)
 8005e4c:	461c      	mov	r4, r3
 8005e4e:	4615      	mov	r5, r2
 8005e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8005e5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	4bdf      	ldr	r3, [pc, #892]	; (80061ec <localMain+0xd14>)
 8005e6e:	f7fa fa2d 	bl	80002cc <__adddf3>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4610      	mov	r0, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	a3d9      	add	r3, pc, #868	; (adr r3, 80061e0 <localMain+0xd08>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa fbda 	bl	8000638 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	4bd7      	ldr	r3, [pc, #860]	; (80061f0 <localMain+0xd18>)
 8005e92:	f7fa fcfb 	bl	800088c <__aeabi_ddiv>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8005e9e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8005ea2:	f011 f9c1 	bl	8017228 <cos>
 8005ea6:	ec55 4b10 	vmov	r4, r5, d0
 8005eaa:	a3cd      	add	r3, pc, #820	; (adr r3, 80061e0 <localMain+0xd08>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005eb4:	f7fa fbc0 	bl	8000638 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	4bca      	ldr	r3, [pc, #808]	; (80061f0 <localMain+0xd18>)
 8005ec6:	f7fa fce1 	bl	800088c <__aeabi_ddiv>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	ec43 2b17 	vmov	d7, r2, r3
 8005ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ed6:	eef0 0a67 	vmov.f32	s1, s15
 8005eda:	f011 f9a5 	bl	8017228 <cos>
 8005ede:	ec59 8b10 	vmov	r8, r9, d0
 8005ee2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005ee6:	f7fa fb4f 	bl	8000588 <__aeabi_f2d>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	ec43 2b10 	vmov	d0, r2, r3
 8005ef2:	f011 f999 	bl	8017228 <cos>
 8005ef6:	ec53 2b10 	vmov	r2, r3, d0
 8005efa:	4640      	mov	r0, r8
 8005efc:	4649      	mov	r1, r9
 8005efe:	f7fa fb9b 	bl	8000638 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa fcbf 	bl	800088c <__aeabi_ddiv>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4614      	mov	r4, r2
 8005f14:	461d      	mov	r5, r3
 8005f16:	a3b2      	add	r3, pc, #712	; (adr r3, 80061e0 <localMain+0xd08>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005f20:	f7fa fb8a 	bl	8000638 <__aeabi_dmul>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	4baf      	ldr	r3, [pc, #700]	; (80061f0 <localMain+0xd18>)
 8005f32:	f7fa fcab 	bl	800088c <__aeabi_ddiv>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	ec43 2b17 	vmov	d7, r2, r3
 8005f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8005f42:	eef0 0a67 	vmov.f32	s1, s15
 8005f46:	f011 fa1b 	bl	8017380 <tan>
 8005f4a:	ec59 8b10 	vmov	r8, r9, d0
 8005f4e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005f52:	f7fa fb19 	bl	8000588 <__aeabi_f2d>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	ec43 2b10 	vmov	d0, r2, r3
 8005f5e:	f011 fa0f 	bl	8017380 <tan>
 8005f62:	ec53 2b10 	vmov	r2, r3, d0
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f7fa fb65 	bl	8000638 <__aeabi_dmul>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4620      	mov	r0, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa f9a7 	bl	80002c8 <__aeabi_dsub>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	ec43 2b17 	vmov	d7, r2, r3
 8005f82:	eeb0 0a47 	vmov.f32	s0, s14
 8005f86:	eef0 0a67 	vmov.f32	s1, s15
 8005f8a:	f011 fa2d 	bl	80173e8 <acos>
 8005f8e:	ec53 2b10 	vmov	r2, r3, d0
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7fa fe47 	bl	8000c28 <__aeabi_d2f>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*GLOBAL_timezone;
 8005fa0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005fa4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80061f4 <localMain+0xd1c>
 8005fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fac:	ee17 0a90 	vmov	r0, s15
 8005fb0:	f7fa faea 	bl	8000588 <__aeabi_f2d>
 8005fb4:	a38a      	add	r3, pc, #552	; (adr r3, 80061e0 <localMain+0xd08>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa fc67 	bl	800088c <__aeabi_ddiv>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8005fca:	f7fa f97f 	bl	80002cc <__adddf3>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	4b87      	ldr	r3, [pc, #540]	; (80061f8 <localMain+0xd20>)
 8005fdc:	f7fa fb2c 	bl	8000638 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	4984      	ldr	r1, [pc, #528]	; (80061fc <localMain+0xd24>)
 8005fea:	f7fa f96d 	bl	80002c8 <__aeabi_dsub>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4614      	mov	r4, r2
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005ffa:	f7fa fac5 	bl	8000588 <__aeabi_f2d>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa f95f 	bl	80002c8 <__aeabi_dsub>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4614      	mov	r4, r2
 8006010:	461d      	mov	r5, r3
 8006012:	4b7b      	ldr	r3, [pc, #492]	; (8006200 <localMain+0xd28>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4618      	mov	r0, r3
 8006020:	f7fa faa0 	bl	8000564 <__aeabi_i2d>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4620      	mov	r0, r4
 800602a:	4629      	mov	r1, r5
 800602c:	f7fa f94e 	bl	80002cc <__adddf3>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4610      	mov	r0, r2
 8006036:	4619      	mov	r1, r3
 8006038:	f7fa fdae 	bl	8000b98 <__aeabi_d2iz>
 800603c:	4603      	mov	r3, r0
 800603e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*GLOBAL_timezone;
 8006042:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006046:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80061f4 <localMain+0xd1c>
 800604a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800604e:	ee17 0a90 	vmov	r0, s15
 8006052:	f7fa fa99 	bl	8000588 <__aeabi_f2d>
 8006056:	a362      	add	r3, pc, #392	; (adr r3, 80061e0 <localMain+0xd08>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa fc16 	bl	800088c <__aeabi_ddiv>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8006068:	f7fa f92e 	bl	80002c8 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4610      	mov	r0, r2
 8006072:	4619      	mov	r1, r3
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	4b5f      	ldr	r3, [pc, #380]	; (80061f8 <localMain+0xd20>)
 800607a:	f7fa fadd 	bl	8000638 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	495d      	ldr	r1, [pc, #372]	; (80061fc <localMain+0xd24>)
 8006088:	f7fa f91e 	bl	80002c8 <__aeabi_dsub>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8006098:	f7fa fa76 	bl	8000588 <__aeabi_f2d>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa f910 	bl	80002c8 <__aeabi_dsub>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <localMain+0xd28>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fa fa51 	bl	8000564 <__aeabi_i2d>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa f8ff 	bl	80002cc <__adddf3>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	f7fa fd5f 	bl	8000b98 <__aeabi_d2iz>
 80060da:	4603      	mov	r3, r0
 80060dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int noon = 720-4*longitude-eqtime+60*GLOBAL_timezone;
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <localMain+0xd20>)
 80060e6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80060ea:	f7fa faa5 	bl	8000638 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	4941      	ldr	r1, [pc, #260]	; (80061fc <localMain+0xd24>)
 80060f8:	f7fa f8e6 	bl	80002c8 <__aeabi_dsub>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4614      	mov	r4, r2
 8006102:	461d      	mov	r5, r3
 8006104:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8006108:	f7fa fa3e 	bl	8000588 <__aeabi_f2d>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4620      	mov	r0, r4
 8006112:	4629      	mov	r1, r5
 8006114:	f7fa f8d8 	bl	80002c8 <__aeabi_dsub>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4614      	mov	r4, r2
 800611e:	461d      	mov	r5, r3
 8006120:	4b37      	ldr	r3, [pc, #220]	; (8006200 <localMain+0xd28>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa19 	bl	8000564 <__aeabi_i2d>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa f8c7 	bl	80002cc <__adddf3>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f7fa fd27 	bl	8000b98 <__aeabi_d2iz>
 800614a:	4603      	mov	r3, r0
 800614c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8006150:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <localMain+0xd2c>)
 8006156:	fb82 1203 	smull	r1, r2, r2, r3
 800615a:	441a      	add	r2, r3
 800615c:	1152      	asrs	r2, r2, #5
 800615e:	17db      	asrs	r3, r3, #31
 8006160:	1ad4      	subs	r4, r2, r3
 8006162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <localMain+0xd2c>)
 8006168:	fb83 1302 	smull	r1, r3, r3, r2
 800616c:	4413      	add	r3, r2
 800616e:	1159      	asrs	r1, r3, #5
 8006170:	17d3      	asrs	r3, r2, #31
 8006172:	1ac9      	subs	r1, r1, r3
 8006174:	460b      	mov	r3, r1
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	1a5b      	subs	r3, r3, r1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	1ad1      	subs	r1, r2, r3
 800617e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006182:	460b      	mov	r3, r1
 8006184:	4622      	mov	r2, r4
 8006186:	4920      	ldr	r1, [pc, #128]	; (8006208 <localMain+0xd30>)
 8006188:	f00b ffd4 	bl	8012134 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 800618c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006190:	4b1e      	ldr	r3, [pc, #120]	; (800620c <localMain+0xd34>)
 8006192:	211c      	movs	r1, #28
 8006194:	200a      	movs	r0, #10
 8006196:	f7fc fc81 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 800619a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800619e:	4a19      	ldr	r2, [pc, #100]	; (8006204 <localMain+0xd2c>)
 80061a0:	fb82 1203 	smull	r1, r2, r2, r3
 80061a4:	441a      	add	r2, r3
 80061a6:	1152      	asrs	r2, r2, #5
 80061a8:	17db      	asrs	r3, r3, #31
 80061aa:	1ad4      	subs	r4, r2, r3
 80061ac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061b0:	4b14      	ldr	r3, [pc, #80]	; (8006204 <localMain+0xd2c>)
 80061b2:	fb83 1302 	smull	r1, r3, r3, r2
 80061b6:	4413      	add	r3, r2
 80061b8:	1159      	asrs	r1, r3, #5
 80061ba:	17d3      	asrs	r3, r2, #31
 80061bc:	1ac9      	subs	r1, r1, r3
 80061be:	460b      	mov	r3, r1
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	1a5b      	subs	r3, r3, r1
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	1ad1      	subs	r1, r2, r3
 80061c8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80061cc:	460b      	mov	r3, r1
 80061ce:	4622      	mov	r2, r4
 80061d0:	490f      	ldr	r1, [pc, #60]	; (8006210 <localMain+0xd38>)
 80061d2:	f00b ffaf 	bl	8012134 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 80061d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80061da:	e01b      	b.n	8006214 <localMain+0xd3c>
 80061dc:	f3af 8000 	nop.w
 80061e0:	54442d18 	.word	0x54442d18
 80061e4:	400921fb 	.word	0x400921fb
 80061e8:	0801a3f0 	.word	0x0801a3f0
 80061ec:	40568000 	.word	0x40568000
 80061f0:	40668000 	.word	0x40668000
 80061f4:	43340000 	.word	0x43340000
 80061f8:	40100000 	.word	0x40100000
 80061fc:	40868000 	.word	0x40868000
 8006200:	2000014c 	.word	0x2000014c
 8006204:	88888889 	.word	0x88888889
 8006208:	0801a328 	.word	0x0801a328
 800620c:	08026b30 	.word	0x08026b30
 8006210:	0801a33c 	.word	0x0801a33c
 8006214:	4b38      	ldr	r3, [pc, #224]	; (80062f8 <localMain+0xe20>)
 8006216:	212c      	movs	r1, #44	; 0x2c
 8006218:	200a      	movs	r0, #10
 800621a:	f7fc fc3f 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 800621e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006222:	4a36      	ldr	r2, [pc, #216]	; (80062fc <localMain+0xe24>)
 8006224:	fb82 1203 	smull	r1, r2, r2, r3
 8006228:	441a      	add	r2, r3
 800622a:	1152      	asrs	r2, r2, #5
 800622c:	17db      	asrs	r3, r3, #31
 800622e:	1ad4      	subs	r4, r2, r3
 8006230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006234:	4b31      	ldr	r3, [pc, #196]	; (80062fc <localMain+0xe24>)
 8006236:	fb83 1302 	smull	r1, r3, r3, r2
 800623a:	4413      	add	r3, r2
 800623c:	1159      	asrs	r1, r3, #5
 800623e:	17d3      	asrs	r3, r2, #31
 8006240:	1ac9      	subs	r1, r1, r3
 8006242:	460b      	mov	r3, r1
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	1a5b      	subs	r3, r3, r1
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	1ad1      	subs	r1, r2, r3
 800624c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006250:	460b      	mov	r3, r1
 8006252:	4622      	mov	r2, r4
 8006254:	492a      	ldr	r1, [pc, #168]	; (8006300 <localMain+0xe28>)
 8006256:	f00b ff6d 	bl	8012134 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 800625a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800625e:	4b26      	ldr	r3, [pc, #152]	; (80062f8 <localMain+0xe20>)
 8006260:	213c      	movs	r1, #60	; 0x3c
 8006262:	200a      	movs	r0, #10
 8006264:	f7fc fc1a 	bl	8002a9c <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8006268:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800626c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800630c <localMain+0xe34>
 8006270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006274:	ee17 0a90 	vmov	r0, s15
 8006278:	f7fa f986 	bl	8000588 <__aeabi_f2d>
 800627c:	a31c      	add	r3, pc, #112	; (adr r3, 80062f0 <localMain+0xe18>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7fa fb03 	bl	800088c <__aeabi_ddiv>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	491d      	ldr	r1, [pc, #116]	; (8006304 <localMain+0xe2c>)
 8006290:	f7fa f81a 	bl	80002c8 <__aeabi_dsub>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800629c:	491a      	ldr	r1, [pc, #104]	; (8006308 <localMain+0xe30>)
 800629e:	f00b ff49 	bl	8012134 <siprintf>
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 80062a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <localMain+0xe20>)
 80062a8:	2150      	movs	r1, #80	; 0x50
 80062aa:	200a      	movs	r0, #10
 80062ac:	f7fc fbf6 	bl	8002a9c <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 80062b0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80062b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062bc:	d528      	bpl.n	8006310 <localMain+0xe38>
 80062be:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80062c2:	eef1 7a67 	vneg.f32	s15, s15
 80062c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800630c <localMain+0xe34>
 80062ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ce:	ee17 0a90 	vmov	r0, s15
 80062d2:	f7fa f959 	bl	8000588 <__aeabi_f2d>
 80062d6:	a306      	add	r3, pc, #24	; (adr r3, 80062f0 <localMain+0xe18>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa fad6 	bl	800088c <__aeabi_ddiv>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 80062e8:	e02e      	b.n	8006348 <localMain+0xe70>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	54442d18 	.word	0x54442d18
 80062f4:	400921fb 	.word	0x400921fb
 80062f8:	08026b30 	.word	0x08026b30
 80062fc:	88888889 	.word	0x88888889
 8006300:	0801a34c 	.word	0x0801a34c
 8006304:	40568000 	.word	0x40568000
 8006308:	0801a360 	.word	0x0801a360
 800630c:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8006310:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006314:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800630c <localMain+0xe34>
 8006318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800631c:	ee17 0a90 	vmov	r0, s15
 8006320:	f7fa f932 	bl	8000588 <__aeabi_f2d>
 8006324:	a3db      	add	r3, pc, #876	; (adr r3, 8006694 <localMain+0x11bc>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7fa faaf 	bl	800088c <__aeabi_ddiv>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	4bcb      	ldr	r3, [pc, #812]	; (8006668 <localMain+0x1190>)
 800633c:	f7f9 ffc6 	bl	80002cc <__adddf3>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8006348:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800634c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006350:	49c6      	ldr	r1, [pc, #792]	; (800666c <localMain+0x1194>)
 8006352:	f00b feef 	bl	8012134 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 8006356:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800635a:	4bc5      	ldr	r3, [pc, #788]	; (8006670 <localMain+0x1198>)
 800635c:	2160      	movs	r1, #96	; 0x60
 800635e:	200a      	movs	r0, #10
 8006360:	f7fc fb9c 	bl	8002a9c <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8006364:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	461a      	mov	r2, r3
 8006372:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8006376:	4413      	add	r3, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f7fa f8f3 	bl	8000564 <__aeabi_i2d>
 800637e:	4604      	mov	r4, r0
 8006380:	460d      	mov	r5, r1
 8006382:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8006386:	4618      	mov	r0, r3
 8006388:	f7fa f8dc 	bl	8000544 <__aeabi_ui2d>
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	4bb8      	ldr	r3, [pc, #736]	; (8006674 <localMain+0x119c>)
 8006392:	f7fa fa7b 	bl	800088c <__aeabi_ddiv>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7f9 ff95 	bl	80002cc <__adddf3>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4614      	mov	r4, r2
 80063a8:	461d      	mov	r5, r3
 80063aa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80063ae:	f7fa f8d9 	bl	8000564 <__aeabi_i2d>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7f9 ff85 	bl	80002c8 <__aeabi_dsub>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	4bab      	ldr	r3, [pc, #684]	; (8006678 <localMain+0x11a0>)
 80063cc:	f7fa f934 	bl	8000638 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa f8be 	bl	8000564 <__aeabi_i2d>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa fa4c 	bl	800088c <__aeabi_ddiv>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 80063fc:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006400:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006404:	499d      	ldr	r1, [pc, #628]	; (800667c <localMain+0x11a4>)
 8006406:	f00b fe95 	bl	8012134 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 800640a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800640e:	4b98      	ldr	r3, [pc, #608]	; (8006670 <localMain+0x1198>)
 8006410:	2174      	movs	r1, #116	; 0x74
 8006412:	200a      	movs	r0, #10
 8006414:	f7fc fb42 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8006418:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800641c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	4a97      	ldr	r2, [pc, #604]	; (8006680 <localMain+0x11a8>)
 8006424:	fb82 1203 	smull	r1, r2, r2, r3
 8006428:	441a      	add	r2, r3
 800642a:	1152      	asrs	r2, r2, #5
 800642c:	17db      	asrs	r3, r3, #31
 800642e:	1ad4      	subs	r4, r2, r3
 8006430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	4b91      	ldr	r3, [pc, #580]	; (8006680 <localMain+0x11a8>)
 800643c:	fb83 1302 	smull	r1, r3, r3, r2
 8006440:	4413      	add	r3, r2
 8006442:	1159      	asrs	r1, r3, #5
 8006444:	17d3      	asrs	r3, r2, #31
 8006446:	1ac9      	subs	r1, r1, r3
 8006448:	460b      	mov	r3, r1
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a5b      	subs	r3, r3, r1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	1ad1      	subs	r1, r2, r3
 8006452:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006456:	460b      	mov	r3, r1
 8006458:	4622      	mov	r2, r4
 800645a:	498a      	ldr	r1, [pc, #552]	; (8006684 <localMain+0x11ac>)
 800645c:	f00b fe6a 	bl	8012134 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8006460:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006464:	4b82      	ldr	r3, [pc, #520]	; (8006670 <localMain+0x1198>)
 8006466:	2184      	movs	r1, #132	; 0x84
 8006468:	200a      	movs	r0, #10
 800646a:	f7fc fb17 	bl	8002a9c <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 800646e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006472:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	4a83      	ldr	r2, [pc, #524]	; (8006688 <localMain+0x11b0>)
 800647c:	fb82 1203 	smull	r1, r2, r2, r3
 8006480:	441a      	add	r2, r3
 8006482:	1292      	asrs	r2, r2, #10
 8006484:	17db      	asrs	r3, r3, #31
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	330a      	adds	r3, #10
 800648c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8006490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006494:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8006498:	fb02 f303 	mul.w	r3, r2, r3
 800649c:	4a7a      	ldr	r2, [pc, #488]	; (8006688 <localMain+0x11b0>)
 800649e:	fb82 1203 	smull	r1, r2, r2, r3
 80064a2:	441a      	add	r2, r3
 80064a4:	1292      	asrs	r2, r2, #10
 80064a6:	17db      	asrs	r3, r3, #31
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	330a      	adds	r3, #10
 80064ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 80064b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064b6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	4a72      	ldr	r2, [pc, #456]	; (8006688 <localMain+0x11b0>)
 80064c0:	fb82 1203 	smull	r1, r2, r2, r3
 80064c4:	441a      	add	r2, r3
 80064c6:	1292      	asrs	r2, r2, #10
 80064c8:	17db      	asrs	r3, r3, #31
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	330a      	adds	r3, #10
 80064d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 80064d4:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 80064d8:	4613      	mov	r3, r2
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	461a      	mov	r2, r3
 80064e2:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80064e6:	4413      	add	r3, r2
 80064e8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	4a65      	ldr	r2, [pc, #404]	; (8006688 <localMain+0x11b0>)
 80064f2:	fb82 1203 	smull	r1, r2, r2, r3
 80064f6:	441a      	add	r2, r3
 80064f8:	1292      	asrs	r2, r2, #10
 80064fa:	17db      	asrs	r3, r3, #31
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	b29b      	uxth	r3, r3
 8006500:	330a      	adds	r3, #10
 8006502:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	lcdHLine(10,399-10,165,1);
 8006506:	2301      	movs	r3, #1
 8006508:	22a5      	movs	r2, #165	; 0xa5
 800650a:	f240 1185 	movw	r1, #389	; 0x185
 800650e:	200a      	movs	r0, #10
 8006510:	f7fc ff80 	bl	8003414 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 8006514:	2301      	movs	r3, #1
 8006516:	22a7      	movs	r2, #167	; 0xa7
 8006518:	21a3      	movs	r1, #163	; 0xa3
 800651a:	200a      	movs	r0, #10
 800651c:	f7fc fb3e 	bl	8002b9c <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8006520:	2301      	movs	r3, #1
 8006522:	22a7      	movs	r2, #167	; 0xa7
 8006524:	21a3      	movs	r1, #163	; 0xa3
 8006526:	f240 1085 	movw	r0, #389	; 0x185
 800652a:	f7fc fb37 	bl	8002b9c <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 800652e:	f8b7 009e 	ldrh.w	r0, [r7, #158]	; 0x9e
 8006532:	2302      	movs	r3, #2
 8006534:	22aa      	movs	r2, #170	; 0xaa
 8006536:	21a0      	movs	r1, #160	; 0xa0
 8006538:	f7fc fb30 	bl	8002b9c <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 800653c:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8006540:	2302      	movs	r3, #2
 8006542:	22aa      	movs	r2, #170	; 0xaa
 8006544:	21a0      	movs	r1, #160	; 0xa0
 8006546:	f7fc fb29 	bl	8002b9c <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 800654a:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 800654e:	2302      	movs	r3, #2
 8006550:	22aa      	movs	r2, #170	; 0xaa
 8006552:	21a0      	movs	r1, #160	; 0xa0
 8006554:	f7fc fb22 	bl	8002b9c <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8006558:	f8b7 0098 	ldrh.w	r0, [r7, #152]	; 0x98
 800655c:	2302      	movs	r3, #2
 800655e:	22af      	movs	r2, #175	; 0xaf
 8006560:	219b      	movs	r1, #155	; 0x9b
 8006562:	f7fc fb1b 	bl	8002b9c <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8006566:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800656a:	4a45      	ldr	r2, [pc, #276]	; (8006680 <localMain+0x11a8>)
 800656c:	fb82 1203 	smull	r1, r2, r2, r3
 8006570:	441a      	add	r2, r3
 8006572:	1152      	asrs	r2, r2, #5
 8006574:	17db      	asrs	r3, r3, #31
 8006576:	1ad4      	subs	r4, r2, r3
 8006578:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800657c:	4b40      	ldr	r3, [pc, #256]	; (8006680 <localMain+0x11a8>)
 800657e:	fb83 1302 	smull	r1, r3, r3, r2
 8006582:	4413      	add	r3, r2
 8006584:	1159      	asrs	r1, r3, #5
 8006586:	17d3      	asrs	r3, r2, #31
 8006588:	1ac9      	subs	r1, r1, r3
 800658a:	460b      	mov	r3, r1
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	1a5b      	subs	r3, r3, r1
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	1ad1      	subs	r1, r2, r3
 8006594:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006598:	460b      	mov	r3, r1
 800659a:	4622      	mov	r2, r4
 800659c:	493b      	ldr	r1, [pc, #236]	; (800668c <localMain+0x11b4>)
 800659e:	f00b fdc9 	bl	8012134 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 80065a2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80065a6:	3b13      	subs	r3, #19
 80065a8:	b298      	uxth	r0, r3
 80065aa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80065ae:	4b38      	ldr	r3, [pc, #224]	; (8006690 <localMain+0x11b8>)
 80065b0:	21aa      	movs	r1, #170	; 0xaa
 80065b2:	f7fc fa73 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 80065b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065ba:	4a31      	ldr	r2, [pc, #196]	; (8006680 <localMain+0x11a8>)
 80065bc:	fb82 1203 	smull	r1, r2, r2, r3
 80065c0:	441a      	add	r2, r3
 80065c2:	1152      	asrs	r2, r2, #5
 80065c4:	17db      	asrs	r3, r3, #31
 80065c6:	1ad4      	subs	r4, r2, r3
 80065c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065cc:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <localMain+0x11a8>)
 80065ce:	fb83 1302 	smull	r1, r3, r3, r2
 80065d2:	4413      	add	r3, r2
 80065d4:	1159      	asrs	r1, r3, #5
 80065d6:	17d3      	asrs	r3, r2, #31
 80065d8:	1ac9      	subs	r1, r1, r3
 80065da:	460b      	mov	r3, r1
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	1a5b      	subs	r3, r3, r1
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	1ad1      	subs	r1, r2, r3
 80065e4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80065e8:	460b      	mov	r3, r1
 80065ea:	4622      	mov	r2, r4
 80065ec:	4927      	ldr	r1, [pc, #156]	; (800668c <localMain+0x11b4>)
 80065ee:	f00b fda1 	bl	8012134 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 80065f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80065f6:	3b13      	subs	r3, #19
 80065f8:	b298      	uxth	r0, r3
 80065fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <localMain+0x11b8>)
 8006600:	21aa      	movs	r1, #170	; 0xaa
 8006602:	f7fc fa4b 	bl	8002a9c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8006606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800660a:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <localMain+0x11a8>)
 800660c:	fb82 1203 	smull	r1, r2, r2, r3
 8006610:	441a      	add	r2, r3
 8006612:	1152      	asrs	r2, r2, #5
 8006614:	17db      	asrs	r3, r3, #31
 8006616:	1ad4      	subs	r4, r2, r3
 8006618:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800661c:	4b18      	ldr	r3, [pc, #96]	; (8006680 <localMain+0x11a8>)
 800661e:	fb83 1302 	smull	r1, r3, r3, r2
 8006622:	4413      	add	r3, r2
 8006624:	1159      	asrs	r1, r3, #5
 8006626:	17d3      	asrs	r3, r2, #31
 8006628:	1ac9      	subs	r1, r1, r3
 800662a:	460b      	mov	r3, r1
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	1ad1      	subs	r1, r2, r3
 8006634:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006638:	460b      	mov	r3, r1
 800663a:	4622      	mov	r2, r4
 800663c:	4913      	ldr	r1, [pc, #76]	; (800668c <localMain+0x11b4>)
 800663e:	f00b fd79 	bl	8012134 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8006642:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006646:	3b13      	subs	r3, #19
 8006648:	b298      	uxth	r0, r3
 800664a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800664e:	4b10      	ldr	r3, [pc, #64]	; (8006690 <localMain+0x11b8>)
 8006650:	21aa      	movs	r1, #170	; 0xaa
 8006652:	f7fc fa23 	bl	8002a9c <lcdPutStr>
}
 8006656:	bf00      	nop
 8006658:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800665c:	46bd      	mov	sp, r7
 800665e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006662:	bf00      	nop
 8006664:	f3af 8000 	nop.w
 8006668:	40768000 	.word	0x40768000
 800666c:	0801a384 	.word	0x0801a384
 8006670:	08026b30 	.word	0x08026b30
 8006674:	404e0000 	.word	0x404e0000
 8006678:	40590000 	.word	0x40590000
 800667c:	0801a3a4 	.word	0x0801a3a4
 8006680:	88888889 	.word	0x88888889
 8006684:	0801a3c4 	.word	0x0801a3c4
 8006688:	b60b60b7 	.word	0xb60b60b7
 800668c:	0801a3e0 	.word	0x0801a3e0
 8006690:	08025c2c 	.word	0x08025c2c
 8006694:	54442d18 	.word	0x54442d18
 8006698:	400921fb 	.word	0x400921fb

0800669c <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prevPage+0x30>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <prevPage+0x1a>
		currentPage--;
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <prevPage+0x30>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <prevPage+0x30>)
 80066b2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80066b4:	e005      	b.n	80066c2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <prevPage+0x34>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <prevPage+0x30>)
 80066c0:	701a      	strb	r2, [r3, #0]
}
 80066c2:	bf00      	nop
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	20005d00 	.word	0x20005d00
 80066d0:	20000193 	.word	0x20000193

080066d4 <nextPage>:
void nextPage(void){
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <nextPage+0x34>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <nextPage+0x38>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	429a      	cmp	r2, r3
 80066e6:	da06      	bge.n	80066f6 <nextPage+0x22>
		currentPage++;
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <nextPage+0x34>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <nextPage+0x34>)
 80066f2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 80066f4:	e002      	b.n	80066fc <nextPage+0x28>
		currentPage=0;
 80066f6:	4b04      	ldr	r3, [pc, #16]	; (8006708 <nextPage+0x34>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20005d00 	.word	0x20005d00
 800670c:	20000193 	.word	0x20000193

08006710 <showPage1>:

void showPage1(void){
 8006710:	b580      	push	{r7, lr}
 8006712:	b092      	sub	sp, #72	; 0x48
 8006714:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8006716:	2300      	movs	r3, #0
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	609a      	str	r2, [r3, #8]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	611a      	str	r2, [r3, #16]
 800672a:	615a      	str	r2, [r3, #20]
 800672c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 800672e:	2300      	movs	r3, #0
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	611a      	str	r2, [r3, #16]
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006744:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <showPage1+0x94>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	4b16      	ldr	r3, [pc, #88]	; (80067a4 <showPage1+0x94>)
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	4619      	mov	r1, r3
 8006750:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <showPage1+0x94>)
 8006752:	789b      	ldrb	r3, [r3, #2]
 8006754:	4638      	mov	r0, r7
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	460b      	mov	r3, r1
 800675a:	4913      	ldr	r1, [pc, #76]	; (80067a8 <showPage1+0x98>)
 800675c:	f00b fcea 	bl	8012134 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8006760:	463a      	mov	r2, r7
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <showPage1+0x9c>)
 8006764:	210b      	movs	r1, #11
 8006766:	200e      	movs	r0, #14
 8006768:	f7fc f998 	bl	8002a9c <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 800676c:	2301      	movs	r3, #1
 800676e:	2227      	movs	r2, #39	; 0x27
 8006770:	2106      	movs	r1, #6
 8006772:	2001      	movs	r0, #1
 8006774:	f7fc fa12 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8006778:	2301      	movs	r3, #1
 800677a:	2228      	movs	r2, #40	; 0x28
 800677c:	2105      	movs	r1, #5
 800677e:	2002      	movs	r0, #2
 8006780:	f7fc fa0c 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8006784:	2301      	movs	r3, #1
 8006786:	2228      	movs	r2, #40	; 0x28
 8006788:	2105      	movs	r1, #5
 800678a:	2003      	movs	r0, #3
 800678c:	f7fc fa06 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8006790:	2301      	movs	r3, #1
 8006792:	2227      	movs	r2, #39	; 0x27
 8006794:	2106      	movs	r1, #6
 8006796:	2004      	movs	r0, #4
 8006798:	f7fc fa00 	bl	8002b9c <lcdVLine>
}
 800679c:	bf00      	nop
 800679e:	3740      	adds	r7, #64	; 0x40
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20005780 	.word	0x20005780
 80067a8:	0801a4c8 	.word	0x0801a4c8
 80067ac:	0802c0b0 	.word	0x0802c0b0

080067b0 <showPage2>:
void showPage2(void){
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80067b6:	2300      	movs	r3, #0
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	611a      	str	r2, [r3, #16]
 80067c8:	615a      	str	r2, [r3, #20]
 80067ca:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 80067cc:	463b      	mov	r3, r7
 80067ce:	4913      	ldr	r1, [pc, #76]	; (800681c <showPage2+0x6c>)
 80067d0:	4618      	mov	r0, r3
 80067d2:	f00b fcaf 	bl	8012134 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 80067d6:	463a      	mov	r2, r7
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <showPage2+0x70>)
 80067da:	2132      	movs	r1, #50	; 0x32
 80067dc:	200e      	movs	r0, #14
 80067de:	f7fc f95d 	bl	8002a9c <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 80067e2:	2301      	movs	r3, #1
 80067e4:	224e      	movs	r2, #78	; 0x4e
 80067e6:	212d      	movs	r1, #45	; 0x2d
 80067e8:	2001      	movs	r0, #1
 80067ea:	f7fc f9d7 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80067ee:	2301      	movs	r3, #1
 80067f0:	224f      	movs	r2, #79	; 0x4f
 80067f2:	212c      	movs	r1, #44	; 0x2c
 80067f4:	2002      	movs	r0, #2
 80067f6:	f7fc f9d1 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 80067fa:	2301      	movs	r3, #1
 80067fc:	224f      	movs	r2, #79	; 0x4f
 80067fe:	212c      	movs	r1, #44	; 0x2c
 8006800:	2003      	movs	r0, #3
 8006802:	f7fc f9cb 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8006806:	2301      	movs	r3, #1
 8006808:	224e      	movs	r2, #78	; 0x4e
 800680a:	212d      	movs	r1, #45	; 0x2d
 800680c:	2004      	movs	r0, #4
 800680e:	f7fc f9c5 	bl	8002b9c <lcdVLine>
}
 8006812:	bf00      	nop
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	0801a4d8 	.word	0x0801a4d8
 8006820:	0802c0b0 	.word	0x0802c0b0

08006824 <showPage3>:
void showPage3(void){
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800682a:	2300      	movs	r3, #0
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	1d3b      	adds	r3, r7, #4
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	60da      	str	r2, [r3, #12]
 800683a:	611a      	str	r2, [r3, #16]
 800683c:	615a      	str	r2, [r3, #20]
 800683e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8006840:	463b      	mov	r3, r7
 8006842:	4913      	ldr	r1, [pc, #76]	; (8006890 <showPage3+0x6c>)
 8006844:	4618      	mov	r0, r3
 8006846:	f00b fc75 	bl	8012134 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800684a:	463a      	mov	r2, r7
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <showPage3+0x70>)
 800684e:	2100      	movs	r1, #0
 8006850:	2000      	movs	r0, #0
 8006852:	f7fc f923 	bl	8002a9c <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8006856:	2301      	movs	r3, #1
 8006858:	2275      	movs	r2, #117	; 0x75
 800685a:	2154      	movs	r1, #84	; 0x54
 800685c:	2001      	movs	r0, #1
 800685e:	f7fc f99d 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8006862:	2301      	movs	r3, #1
 8006864:	2276      	movs	r2, #118	; 0x76
 8006866:	2153      	movs	r1, #83	; 0x53
 8006868:	2002      	movs	r0, #2
 800686a:	f7fc f997 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 800686e:	2301      	movs	r3, #1
 8006870:	2276      	movs	r2, #118	; 0x76
 8006872:	2153      	movs	r1, #83	; 0x53
 8006874:	2003      	movs	r0, #3
 8006876:	f7fc f991 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 800687a:	2301      	movs	r3, #1
 800687c:	2275      	movs	r2, #117	; 0x75
 800687e:	2154      	movs	r1, #84	; 0x54
 8006880:	2004      	movs	r0, #4
 8006882:	f7fc f98b 	bl	8002b9c <lcdVLine>
}
 8006886:	bf00      	nop
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	0801a4dc 	.word	0x0801a4dc
 8006894:	0802c0b0 	.word	0x0802c0b0

08006898 <showPage4>:
void showPage4(void){
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800689e:	2300      	movs	r3, #0
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	609a      	str	r2, [r3, #8]
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	611a      	str	r2, [r3, #16]
 80068b0:	615a      	str	r2, [r3, #20]
 80068b2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 80068b4:	463b      	mov	r3, r7
 80068b6:	4913      	ldr	r1, [pc, #76]	; (8006904 <showPage4+0x6c>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f00b fc3b 	bl	8012134 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80068be:	463a      	mov	r2, r7
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <showPage4+0x70>)
 80068c2:	2100      	movs	r1, #0
 80068c4:	2000      	movs	r0, #0
 80068c6:	f7fc f8e9 	bl	8002a9c <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80068ca:	2301      	movs	r3, #1
 80068cc:	229c      	movs	r2, #156	; 0x9c
 80068ce:	217b      	movs	r1, #123	; 0x7b
 80068d0:	2001      	movs	r0, #1
 80068d2:	f7fc f963 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80068d6:	2301      	movs	r3, #1
 80068d8:	229d      	movs	r2, #157	; 0x9d
 80068da:	217a      	movs	r1, #122	; 0x7a
 80068dc:	2002      	movs	r0, #2
 80068de:	f7fc f95d 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80068e2:	2301      	movs	r3, #1
 80068e4:	229d      	movs	r2, #157	; 0x9d
 80068e6:	217a      	movs	r1, #122	; 0x7a
 80068e8:	2003      	movs	r0, #3
 80068ea:	f7fc f957 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80068ee:	2301      	movs	r3, #1
 80068f0:	229c      	movs	r2, #156	; 0x9c
 80068f2:	217b      	movs	r1, #123	; 0x7b
 80068f4:	2004      	movs	r0, #4
 80068f6:	f7fc f951 	bl	8002b9c <lcdVLine>
}
 80068fa:	bf00      	nop
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	0801a4e8 	.word	0x0801a4e8
 8006908:	0802c0b0 	.word	0x0802c0b0

0800690c <showPage5>:
void showPage5(void){
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006912:	2300      	movs	r3, #0
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	611a      	str	r2, [r3, #16]
 8006924:	615a      	str	r2, [r3, #20]
 8006926:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8006928:	463b      	mov	r3, r7
 800692a:	4925      	ldr	r1, [pc, #148]	; (80069c0 <showPage5+0xb4>)
 800692c:	4618      	mov	r0, r3
 800692e:	f00b fc01 	bl	8012134 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8006932:	463a      	mov	r2, r7
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <showPage5+0xb8>)
 8006936:	2100      	movs	r1, #0
 8006938:	200a      	movs	r0, #10
 800693a:	f7fc f8af 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 800693e:	463a      	mov	r2, r7
 8006940:	4b21      	ldr	r3, [pc, #132]	; (80069c8 <showPage5+0xbc>)
 8006942:	210f      	movs	r1, #15
 8006944:	200a      	movs	r0, #10
 8006946:	f7fc f8a9 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 800694a:	463a      	mov	r2, r7
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <showPage5+0xc0>)
 800694e:	2132      	movs	r1, #50	; 0x32
 8006950:	200a      	movs	r0, #10
 8006952:	f7fc f8a3 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8006956:	463a      	mov	r2, r7
 8006958:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <showPage5+0xc4>)
 800695a:	213c      	movs	r1, #60	; 0x3c
 800695c:	200a      	movs	r0, #10
 800695e:	f7fc f89d 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 8006962:	463a      	mov	r2, r7
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <showPage5+0xc8>)
 8006966:	215a      	movs	r1, #90	; 0x5a
 8006968:	200a      	movs	r0, #10
 800696a:	f7fc f897 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 800696e:	463a      	mov	r2, r7
 8006970:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <showPage5+0xcc>)
 8006972:	2178      	movs	r1, #120	; 0x78
 8006974:	200a      	movs	r0, #10
 8006976:	f7fc f891 	bl	8002a9c <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 800697a:	463a      	mov	r2, r7
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <showPage5+0xd0>)
 800697e:	2196      	movs	r1, #150	; 0x96
 8006980:	200a      	movs	r0, #10
 8006982:	f7fc f88b 	bl	8002a9c <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8006986:	2301      	movs	r3, #1
 8006988:	22c3      	movs	r2, #195	; 0xc3
 800698a:	21a2      	movs	r1, #162	; 0xa2
 800698c:	2001      	movs	r0, #1
 800698e:	f7fc f905 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8006992:	2301      	movs	r3, #1
 8006994:	22c4      	movs	r2, #196	; 0xc4
 8006996:	21a1      	movs	r1, #161	; 0xa1
 8006998:	2002      	movs	r0, #2
 800699a:	f7fc f8ff 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 800699e:	2301      	movs	r3, #1
 80069a0:	22c4      	movs	r2, #196	; 0xc4
 80069a2:	21a1      	movs	r1, #161	; 0xa1
 80069a4:	2003      	movs	r0, #3
 80069a6:	f7fc f8f9 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80069aa:	2301      	movs	r3, #1
 80069ac:	22c3      	movs	r2, #195	; 0xc3
 80069ae:	21a2      	movs	r1, #162	; 0xa2
 80069b0:	2004      	movs	r0, #4
 80069b2:	f7fc f8f3 	bl	8002b9c <lcdVLine>
}
 80069b6:	bf00      	nop
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	0801a4f4 	.word	0x0801a4f4
 80069c4:	08029fa0 	.word	0x08029fa0
 80069c8:	0802aae8 	.word	0x0802aae8
 80069cc:	080275b8 	.word	0x080275b8
 80069d0:	08027a34 	.word	0x08027a34
 80069d4:	08028a90 	.word	0x08028a90
 80069d8:	08029518 	.word	0x08029518
 80069dc:	0802c0b0 	.word	0x0802c0b0

080069e0 <showPage6>:
void showPage6(void){
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 80069e6:	2301      	movs	r3, #1
 80069e8:	22ea      	movs	r2, #234	; 0xea
 80069ea:	21c9      	movs	r1, #201	; 0xc9
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7fc f8d5 	bl	8002b9c <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 80069f2:	2301      	movs	r3, #1
 80069f4:	22eb      	movs	r2, #235	; 0xeb
 80069f6:	21c8      	movs	r1, #200	; 0xc8
 80069f8:	2002      	movs	r0, #2
 80069fa:	f7fc f8cf 	bl	8002b9c <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 80069fe:	2301      	movs	r3, #1
 8006a00:	22eb      	movs	r2, #235	; 0xeb
 8006a02:	21c8      	movs	r1, #200	; 0xc8
 8006a04:	2003      	movs	r0, #3
 8006a06:	f7fc f8c9 	bl	8002b9c <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	22ea      	movs	r2, #234	; 0xea
 8006a0e:	21c9      	movs	r1, #201	; 0xc9
 8006a10:	2004      	movs	r0, #4
 8006a12:	f7fc f8c3 	bl	8002b9c <lcdVLine>
		lcdRect(0,399,25,80,1);
 8006a16:	2301      	movs	r3, #1
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	2350      	movs	r3, #80	; 0x50
 8006a1c:	2219      	movs	r2, #25
 8006a1e:	f240 118f 	movw	r1, #399	; 0x18f
 8006a22:	2000      	movs	r0, #0
 8006a24:	f7fc fe4c 	bl	80036c0 <lcdRect>
		lcdRect(0,399,120,180,1);
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	23b4      	movs	r3, #180	; 0xb4
 8006a2e:	2278      	movs	r2, #120	; 0x78
 8006a30:	f240 118f 	movw	r1, #399	; 0x18f
 8006a34:	2000      	movs	r0, #0
 8006a36:	f7fc fe43 	bl	80036c0 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	2303      	movs	r3, #3
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2332      	movs	r3, #50	; 0x32
 8006a48:	220a      	movs	r2, #10
 8006a4a:	2132      	movs	r1, #50	; 0x32
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	f7fc fe5c 	bl	800370a <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8006a52:	2301      	movs	r3, #1
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	2301      	movs	r3, #1
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	2332      	movs	r3, #50	; 0x32
 8006a60:	220a      	movs	r2, #10
 8006a62:	2164      	movs	r1, #100	; 0x64
 8006a64:	203c      	movs	r0, #60	; 0x3c
 8006a66:	f7fc fe50 	bl	800370a <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	2302      	movs	r3, #2
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	2303      	movs	r3, #3
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2332      	movs	r3, #50	; 0x32
 8006a78:	220a      	movs	r2, #10
 8006a7a:	2196      	movs	r1, #150	; 0x96
 8006a7c:	206e      	movs	r0, #110	; 0x6e
 8006a7e:	f7fc fe44 	bl	800370a <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8006a82:	2301      	movs	r3, #1
 8006a84:	9302      	str	r3, [sp, #8]
 8006a86:	2303      	movs	r3, #3
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2332      	movs	r3, #50	; 0x32
 8006a90:	220a      	movs	r2, #10
 8006a92:	21c8      	movs	r1, #200	; 0xc8
 8006a94:	20a0      	movs	r0, #160	; 0xa0
 8006a96:	f7fc fe38 	bl	800370a <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	2332      	movs	r3, #50	; 0x32
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	21fa      	movs	r1, #250	; 0xfa
 8006aac:	20d2      	movs	r0, #210	; 0xd2
 8006aae:	f7fc fe2c 	bl	800370a <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	2305      	movs	r3, #5
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	2303      	movs	r3, #3
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	2332      	movs	r3, #50	; 0x32
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006ac6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006aca:	f7fc fe1e 	bl	800370a <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8006ace:	2301      	movs	r3, #1
 8006ad0:	9302      	str	r3, [sp, #8]
 8006ad2:	2306      	movs	r3, #6
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2332      	movs	r3, #50	; 0x32
 8006adc:	220a      	movs	r2, #10
 8006ade:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006ae2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8006ae6:	f7fc fe10 	bl	800370a <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8006aea:	2301      	movs	r3, #1
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	2307      	movs	r3, #7
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	2303      	movs	r3, #3
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	2364      	movs	r3, #100	; 0x64
 8006af8:	223c      	movs	r2, #60	; 0x3c
 8006afa:	2132      	movs	r1, #50	; 0x32
 8006afc:	200a      	movs	r0, #10
 8006afe:	f7fc fe04 	bl	800370a <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8006b02:	2301      	movs	r3, #1
 8006b04:	9302      	str	r3, [sp, #8]
 8006b06:	2308      	movs	r3, #8
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	2364      	movs	r3, #100	; 0x64
 8006b10:	223c      	movs	r2, #60	; 0x3c
 8006b12:	2164      	movs	r1, #100	; 0x64
 8006b14:	203c      	movs	r0, #60	; 0x3c
 8006b16:	f7fc fdf8 	bl	800370a <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	9302      	str	r3, [sp, #8]
 8006b1e:	2309      	movs	r3, #9
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	2303      	movs	r3, #3
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	2364      	movs	r3, #100	; 0x64
 8006b28:	223c      	movs	r2, #60	; 0x3c
 8006b2a:	2196      	movs	r1, #150	; 0x96
 8006b2c:	206e      	movs	r0, #110	; 0x6e
 8006b2e:	f7fc fdec 	bl	800370a <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8006b32:	2301      	movs	r3, #1
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	230a      	movs	r3, #10
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	2364      	movs	r3, #100	; 0x64
 8006b40:	223c      	movs	r2, #60	; 0x3c
 8006b42:	21c8      	movs	r1, #200	; 0xc8
 8006b44:	20a0      	movs	r0, #160	; 0xa0
 8006b46:	f7fc fde0 	bl	800370a <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	230b      	movs	r3, #11
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	2303      	movs	r3, #3
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	2364      	movs	r3, #100	; 0x64
 8006b58:	223c      	movs	r2, #60	; 0x3c
 8006b5a:	21fa      	movs	r1, #250	; 0xfa
 8006b5c:	20d2      	movs	r0, #210	; 0xd2
 8006b5e:	f7fc fdd4 	bl	800370a <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8006b62:	2301      	movs	r3, #1
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	230c      	movs	r3, #12
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2364      	movs	r3, #100	; 0x64
 8006b70:	223c      	movs	r2, #60	; 0x3c
 8006b72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006b76:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006b7a:	f7fc fdc6 	bl	800370a <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8006b7e:	2301      	movs	r3, #1
 8006b80:	9302      	str	r3, [sp, #8]
 8006b82:	230d      	movs	r3, #13
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	2303      	movs	r3, #3
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	2364      	movs	r3, #100	; 0x64
 8006b8c:	223c      	movs	r2, #60	; 0x3c
 8006b8e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006b92:	f44f 709b 	mov.w	r0, #310	; 0x136
 8006b96:	f7fc fdb8 	bl	800370a <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	9302      	str	r3, [sp, #8]
 8006b9e:	230e      	movs	r3, #14
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2396      	movs	r3, #150	; 0x96
 8006ba8:	226e      	movs	r2, #110	; 0x6e
 8006baa:	2132      	movs	r1, #50	; 0x32
 8006bac:	200a      	movs	r0, #10
 8006bae:	f7fc fdac 	bl	800370a <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	9302      	str	r3, [sp, #8]
 8006bb6:	230f      	movs	r3, #15
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	2303      	movs	r3, #3
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	2396      	movs	r3, #150	; 0x96
 8006bc0:	226e      	movs	r2, #110	; 0x6e
 8006bc2:	2164      	movs	r1, #100	; 0x64
 8006bc4:	203c      	movs	r0, #60	; 0x3c
 8006bc6:	f7fc fda0 	bl	800370a <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8006bca:	2301      	movs	r3, #1
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	2310      	movs	r3, #16
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	2396      	movs	r3, #150	; 0x96
 8006bd8:	226e      	movs	r2, #110	; 0x6e
 8006bda:	2196      	movs	r1, #150	; 0x96
 8006bdc:	206e      	movs	r0, #110	; 0x6e
 8006bde:	f7fc fd94 	bl	800370a <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8006be2:	2301      	movs	r3, #1
 8006be4:	9302      	str	r3, [sp, #8]
 8006be6:	2311      	movs	r3, #17
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	2303      	movs	r3, #3
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	2396      	movs	r3, #150	; 0x96
 8006bf0:	226e      	movs	r2, #110	; 0x6e
 8006bf2:	21c8      	movs	r1, #200	; 0xc8
 8006bf4:	20a0      	movs	r0, #160	; 0xa0
 8006bf6:	f7fc fd88 	bl	800370a <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	2312      	movs	r3, #18
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2303      	movs	r3, #3
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2396      	movs	r3, #150	; 0x96
 8006c08:	226e      	movs	r2, #110	; 0x6e
 8006c0a:	21fa      	movs	r1, #250	; 0xfa
 8006c0c:	20d2      	movs	r0, #210	; 0xd2
 8006c0e:	f7fc fd7c 	bl	800370a <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8006c12:	2301      	movs	r3, #1
 8006c14:	9302      	str	r3, [sp, #8]
 8006c16:	2313      	movs	r3, #19
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2396      	movs	r3, #150	; 0x96
 8006c20:	226e      	movs	r2, #110	; 0x6e
 8006c22:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006c26:	f44f 7082 	mov.w	r0, #260	; 0x104
 8006c2a:	f7fc fd6e 	bl	800370a <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8006c2e:	2301      	movs	r3, #1
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	2314      	movs	r3, #20
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	2303      	movs	r3, #3
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2396      	movs	r3, #150	; 0x96
 8006c3c:	226e      	movs	r2, #110	; 0x6e
 8006c3e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006c42:	f44f 709b 	mov.w	r0, #310	; 0x136
 8006c46:	f7fc fd60 	bl	800370a <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	23c8      	movs	r3, #200	; 0xc8
 8006c54:	22a0      	movs	r2, #160	; 0xa0
 8006c56:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006c5a:	200a      	movs	r0, #10
 8006c5c:	f7fc fd55 	bl	800370a <lcdRect2>
}
 8006c60:	bf00      	nop
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <showPage>:

void showPage(uint8_t pageNum){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d821      	bhi.n	8006cbc <showPage+0x54>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <showPage+0x18>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	08006c9f 	.word	0x08006c9f
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cab 	.word	0x08006cab
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006cb7 	.word	0x08006cb7
	case 0:
		showPage1();
 8006c98:	f7ff fd3a 	bl	8006710 <showPage1>
		break;
 8006c9c:	e00e      	b.n	8006cbc <showPage+0x54>
	case 1:
		showPage2();
 8006c9e:	f7ff fd87 	bl	80067b0 <showPage2>
		break;
 8006ca2:	e00b      	b.n	8006cbc <showPage+0x54>
	case 2:
		showPage3();
 8006ca4:	f7ff fdbe 	bl	8006824 <showPage3>
		break;
 8006ca8:	e008      	b.n	8006cbc <showPage+0x54>
	case 3:
		showPage4();
 8006caa:	f7ff fdf5 	bl	8006898 <showPage4>
		break;
 8006cae:	e005      	b.n	8006cbc <showPage+0x54>
	case 4:
		showPage5();
 8006cb0:	f7ff fe2c 	bl	800690c <showPage5>
		break;
 8006cb4:	e002      	b.n	8006cbc <showPage+0x54>
	case 5:
		showPage6();
 8006cb6:	f7ff fe93 	bl	80069e0 <showPage6>
		break;
 8006cba:	bf00      	nop
	}
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <setDefaultClbcks+0x28>)
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <setDefaultClbcks+0x2c>)
 8006ccc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <setDefaultClbcks+0x30>)
 8006cd0:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <setDefaultClbcks+0x34>)
 8006cd2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <setDefaultClbcks+0x38>)
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <setDefaultClbcks+0x3c>)
 8006cd8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8006cda:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <setDefaultClbcks+0x40>)
 8006cdc:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <setDefaultClbcks+0x44>)
 8006cde:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8006ce0:	bf00      	nop
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	200025f0 	.word	0x200025f0
 8006cf0:	08002601 	.word	0x08002601
 8006cf4:	20002638 	.word	0x20002638
 8006cf8:	08002611 	.word	0x08002611
 8006cfc:	200026a4 	.word	0x200026a4
 8006d00:	0800669d 	.word	0x0800669d
 8006d04:	2000265c 	.word	0x2000265c
 8006d08:	080066d5 	.word	0x080066d5

08006d0c <settingsSetup>:


void settingsSetup(void){
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006d10:	f7ff ffd8 	bl	8006cc4 <setDefaultClbcks>
}
 8006d14:	bf00      	nop
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <settingsMain>:

void settingsMain(void){
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8006d1e:	2300      	movs	r3, #0
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	1d3b      	adds	r3, r7, #4
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	611a      	str	r2, [r3, #16]
 8006d30:	615a      	str	r2, [r3, #20]
 8006d32:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <settingsMain+0x30>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff ff95 	bl	8006c68 <showPage>

}
 8006d3e:	bf00      	nop
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20005d00 	.word	0x20005d00

08006d4c <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	stwStart();
 8006d50:	f7fd f93c 	bl	8003fcc <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8006d54:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <startStopwatch+0x18>)
 8006d56:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <startStopwatch+0x1c>)
 8006d58:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <startStopwatch+0x20>)
 8006d5c:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <startStopwatch+0x24>)
 8006d5e:	611a      	str	r2, [r3, #16]
}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20002614 	.word	0x20002614
 8006d68:	08006d75 	.word	0x08006d75
 8006d6c:	20002680 	.word	0x20002680
 8006d70:	08006db5 	.word	0x08006db5

08006d74 <stopStopwatch>:
void stopStopwatch(){
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
	stwStop();
 8006d78:	f7fd f94e 	bl	8004018 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <stopStopwatch+0x18>)
 8006d7e:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <stopStopwatch+0x1c>)
 8006d80:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8006d82:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <stopStopwatch+0x20>)
 8006d84:	4a04      	ldr	r2, [pc, #16]	; (8006d98 <stopStopwatch+0x24>)
 8006d86:	611a      	str	r2, [r3, #16]
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20002614 	.word	0x20002614
 8006d90:	08006d4d 	.word	0x08006d4d
 8006d94:	20002680 	.word	0x20002680
 8006d98:	08006d9d 	.word	0x08006d9d

08006d9c <resetStopwatch>:
void resetStopwatch(){
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
	stwClear();
 8006da0:	f7fd f94a 	bl	8004038 <stwClear>
	stwT.clear();
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <resetStopwatch+0x14>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4798      	blx	r3
}
 8006daa:	bf00      	nop
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000150 	.word	0x20000150

08006db4 <saveStopwatch>:
void saveStopwatch(){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
	stwSave();
 8006db8:	f7fd f952 	bl	8004060 <stwSave>
}
 8006dbc:	bf00      	nop
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <setDefaultClbcks+0x48>)
 8006dc6:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <setDefaultClbcks+0x4c>)
 8006dc8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <setDefaultClbcks+0x50>)
 8006dcc:	4a11      	ldr	r2, [pc, #68]	; (8006e14 <setDefaultClbcks+0x54>)
 8006dce:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006dd0:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <setDefaultClbcks+0x58>)
 8006dd2:	4a12      	ldr	r2, [pc, #72]	; (8006e1c <setDefaultClbcks+0x5c>)
 8006dd4:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <setDefaultClbcks+0x60>)
 8006dd8:	78db      	ldrb	r3, [r3, #3]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <setDefaultClbcks+0x64>)
 8006de6:	4a10      	ldr	r2, [pc, #64]	; (8006e28 <setDefaultClbcks+0x68>)
 8006de8:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <setDefaultClbcks+0x6c>)
 8006dec:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <setDefaultClbcks+0x70>)
 8006dee:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8006df0:	e005      	b.n	8006dfe <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <setDefaultClbcks+0x64>)
 8006df4:	4a0f      	ldr	r2, [pc, #60]	; (8006e34 <setDefaultClbcks+0x74>)
 8006df6:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <setDefaultClbcks+0x6c>)
 8006dfa:	4a0f      	ldr	r2, [pc, #60]	; (8006e38 <setDefaultClbcks+0x78>)
 8006dfc:	611a      	str	r2, [r3, #16]
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	200026a4 	.word	0x200026a4
 8006e0c:	08002621 	.word	0x08002621
 8006e10:	200025f0 	.word	0x200025f0
 8006e14:	08002601 	.word	0x08002601
 8006e18:	20002638 	.word	0x20002638
 8006e1c:	08002611 	.word	0x08002611
 8006e20:	20005b1c 	.word	0x20005b1c
 8006e24:	20002614 	.word	0x20002614
 8006e28:	08006d75 	.word	0x08006d75
 8006e2c:	20002680 	.word	0x20002680
 8006e30:	08006db5 	.word	0x08006db5
 8006e34:	08006d4d 	.word	0x08006d4d
 8006e38:	08006d9d 	.word	0x08006d9d

08006e3c <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	099b      	lsrs	r3, r3, #6
 8006e48:	4a22      	ldr	r2, [pc, #136]	; (8006ed4 <convertTicks+0x98>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	0993      	lsrs	r3, r2, #6
 8006e58:	491e      	ldr	r1, [pc, #120]	; (8006ed4 <convertTicks+0x98>)
 8006e5a:	fba1 1303 	umull	r1, r3, r1, r3
 8006e5e:	089b      	lsrs	r3, r3, #2
 8006e60:	491d      	ldr	r1, [pc, #116]	; (8006ed8 <convertTicks+0x9c>)
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	4a1c      	ldr	r2, [pc, #112]	; (8006edc <convertTicks+0xa0>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	4b19      	ldr	r3, [pc, #100]	; (8006edc <convertTicks+0xa0>)
 8006e78:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7c:	09db      	lsrs	r3, r3, #7
 8006e7e:	f241 7170 	movw	r1, #6000	; 0x1770
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <convertTicks+0xa4>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <convertTicks+0xa4>)
 8006e98:	fba3 1302 	umull	r1, r3, r3, r2
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	2164      	movs	r1, #100	; 0x64
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	7b3a      	ldrb	r2, [r7, #12]
 8006eb2:	f362 0307 	bfi	r3, r2, #0, #8
 8006eb6:	7b7a      	ldrb	r2, [r7, #13]
 8006eb8:	f362 230f 	bfi	r3, r2, #8, #8
 8006ebc:	7bba      	ldrb	r2, [r7, #14]
 8006ebe:	f362 4317 	bfi	r3, r2, #16, #8
 8006ec2:	7bfa      	ldrb	r2, [r7, #15]
 8006ec4:	f362 631f 	bfi	r3, r2, #24, #8
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	002e9a77 	.word	0x002e9a77
 8006ed8:	00057e40 	.word	0x00057e40
 8006edc:	057619f1 	.word	0x057619f1
 8006ee0:	51eb851f 	.word	0x51eb851f

08006ee4 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8006eee:	793b      	ldrb	r3, [r7, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	797b      	ldrb	r3, [r7, #5]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	79bb      	ldrb	r3, [r7, #6]
 8006ef8:	79fa      	ldrb	r2, [r7, #7]
 8006efa:	9201      	str	r2, [sp, #4]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4603      	mov	r3, r0
 8006f00:	460a      	mov	r2, r1
 8006f02:	4904      	ldr	r1, [pc, #16]	; (8006f14 <stwString+0x30>)
 8006f04:	6838      	ldr	r0, [r7, #0]
 8006f06:	f00b f915 	bl	8012134 <siprintf>
	return str;
 8006f0a:	683b      	ldr	r3, [r7, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	0801a5bc 	.word	0x0801a5bc

08006f18 <updateStopwatch>:
void updateStopwatch(void){
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 8006f1c:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <updateStopwatch+0x90>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006f24:	4a21      	ldr	r2, [pc, #132]	; (8006fac <updateStopwatch+0x94>)
 8006f26:	fb82 1203 	smull	r1, r2, r2, r3
 8006f2a:	441a      	add	r2, r3
 8006f2c:	12d2      	asrs	r2, r2, #11
 8006f2e:	17db      	asrs	r3, r3, #31
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <updateStopwatch+0x98>)
 8006f36:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <updateStopwatch+0x90>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <updateStopwatch+0x94>)
 8006f44:	fb83 1302 	smull	r1, r3, r3, r2
 8006f48:	4413      	add	r3, r2
 8006f4a:	12d9      	asrs	r1, r3, #11
 8006f4c:	17d3      	asrs	r3, r2, #31
 8006f4e:	1acb      	subs	r3, r1, r3
 8006f50:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <updateStopwatch+0x9c>)
 8006f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8006f60:	441a      	add	r2, r3
 8006f62:	1152      	asrs	r2, r2, #5
 8006f64:	17db      	asrs	r3, r3, #31
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <updateStopwatch+0x98>)
 8006f6c:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <updateStopwatch+0x90>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006f76:	461a      	mov	r2, r3
 8006f78:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <updateStopwatch+0x9c>)
 8006f7a:	fb83 1302 	smull	r1, r3, r3, r2
 8006f7e:	4413      	add	r3, r2
 8006f80:	1159      	asrs	r1, r3, #5
 8006f82:	17d3      	asrs	r3, r2, #31
 8006f84:	1ac9      	subs	r1, r1, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a5b      	subs	r3, r3, r1
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	1ad1      	subs	r1, r2, r3
 8006f90:	b2ca      	uxtb	r2, r1
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <updateStopwatch+0x98>)
 8006f94:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 8006f96:	f7fd f873 	bl	8004080 <getStw>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <updateStopwatch+0x98>)
 8006fa0:	70da      	strb	r2, [r3, #3]
}
 8006fa2:	bf00      	nop
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20005b1c 	.word	0x20005b1c
 8006fac:	91a2b3c5 	.word	0x91a2b3c5
 8006fb0:	20005d04 	.word	0x20005d04
 8006fb4:	88888889 	.word	0x88888889

08006fb8 <stwSetup>:

void stwSetup(void){
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006fbc:	f7ff ff00 	bl	8006dc0 <setDefaultClbcks>
}
 8006fc0:	bf00      	nop
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b0a1      	sub	sp, #132	; 0x84
 8006fc8:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 8006fca:	2300      	movs	r3, #0
 8006fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8006fd4:	4b9a      	ldr	r3, [pc, #616]	; (8007240 <stwMain+0x27c>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b99      	ldr	r3, [pc, #612]	; (8007240 <stwMain+0x27c>)
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8006fe2:	4998      	ldr	r1, [pc, #608]	; (8007244 <stwMain+0x280>)
 8006fe4:	f00b f8a6 	bl	8012134 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8006fe8:	2314      	movs	r3, #20
 8006fea:	b29c      	uxth	r4, r3
 8006fec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7f9 f907 	bl	8000204 <strlen>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	fb14 f303 	smulbb	r3, r4, r3
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007004:	b298      	uxth	r0, r3
 8007006:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800700a:	4b8f      	ldr	r3, [pc, #572]	; (8007248 <stwMain+0x284>)
 800700c:	210a      	movs	r1, #10
 800700e:	f7fb fd45 	bl	8002a9c <lcdPutStr>

	updateStopwatch();
 8007012:	f7ff ff81 	bl	8006f18 <updateStopwatch>

	char tempStr3[30] = {0};
 8007016:	2300      	movs	r3, #0
 8007018:	643b      	str	r3, [r7, #64]	; 0x40
 800701a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	609a      	str	r2, [r3, #8]
 8007026:	60da      	str	r2, [r3, #12]
 8007028:	611a      	str	r2, [r3, #16]
 800702a:	615a      	str	r2, [r3, #20]
 800702c:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr3, "%d", (uint16_t)getStw());
 800702e:	f7fd f827 	bl	8004080 <getStw>
 8007032:	4603      	mov	r3, r0
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800703c:	4983      	ldr	r1, [pc, #524]	; (800724c <stwMain+0x288>)
 800703e:	4618      	mov	r0, r3
 8007040:	f00b f878 	bl	8012134 <siprintf>
	lcdPutStr(0, 0, tempStr3, font_12_zekton);
 8007044:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007048:	4b81      	ldr	r3, [pc, #516]	; (8007250 <stwMain+0x28c>)
 800704a:	2100      	movs	r1, #0
 800704c:	2000      	movs	r0, #0
 800704e:	f7fb fd25 	bl	8002a9c <lcdPutStr>
	char tempStr4[30] = {0};
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	609a      	str	r2, [r3, #8]
 8007062:	60da      	str	r2, [r3, #12]
 8007064:	611a      	str	r2, [r3, #16]
 8007066:	615a      	str	r2, [r3, #20]
 8007068:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr4, "%d", stwS.cnt);
 800706a:	4b7a      	ldr	r3, [pc, #488]	; (8007254 <stwMain+0x290>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007072:	461a      	mov	r2, r3
 8007074:	f107 0320 	add.w	r3, r7, #32
 8007078:	4974      	ldr	r1, [pc, #464]	; (800724c <stwMain+0x288>)
 800707a:	4618      	mov	r0, r3
 800707c:	f00b f85a 	bl	8012134 <siprintf>
	lcdPutStr(0, 20, tempStr4, font_12_zekton);
 8007080:	f107 0220 	add.w	r2, r7, #32
 8007084:	4b72      	ldr	r3, [pc, #456]	; (8007250 <stwMain+0x28c>)
 8007086:	2114      	movs	r1, #20
 8007088:	2000      	movs	r0, #0
 800708a:	f7fb fd07 	bl	8002a9c <lcdPutStr>

	char tempStr2[30] = {0};
 800708e:	2300      	movs	r3, #0
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	60da      	str	r2, [r3, #12]
 800709e:	611a      	str	r2, [r3, #16]
 80070a0:	615a      	str	r2, [r3, #20]
 80070a2:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 80070a4:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <stwMain+0x294>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <stwMain+0xf8>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 80070ac:	4b6a      	ldr	r3, [pc, #424]	; (8007258 <stwMain+0x294>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	463b      	mov	r3, r7
 80070b4:	4969      	ldr	r1, [pc, #420]	; (800725c <stwMain+0x298>)
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00b f83c 	bl	8012134 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 80070bc:	463a      	mov	r2, r7
 80070be:	4b62      	ldr	r3, [pc, #392]	; (8007248 <stwMain+0x284>)
 80070c0:	215f      	movs	r1, #95	; 0x5f
 80070c2:	2014      	movs	r0, #20
 80070c4:	f7fb fcea 	bl	8002a9c <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 80070c8:	4b63      	ldr	r3, [pc, #396]	; (8007258 <stwMain+0x294>)
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b62      	ldr	r3, [pc, #392]	; (8007258 <stwMain+0x294>)
 80070d0:	789b      	ldrb	r3, [r3, #2]
 80070d2:	4619      	mov	r1, r3
 80070d4:	4b60      	ldr	r3, [pc, #384]	; (8007258 <stwMain+0x294>)
 80070d6:	78db      	ldrb	r3, [r3, #3]
 80070d8:	4638      	mov	r0, r7
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	460b      	mov	r3, r1
 80070de:	4960      	ldr	r1, [pc, #384]	; (8007260 <stwMain+0x29c>)
 80070e0:	f00b f828 	bl	8012134 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 80070e4:	2322      	movs	r3, #34	; 0x22
 80070e6:	b29c      	uxth	r4, r3
 80070e8:	463b      	mov	r3, r7
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7f9 f88a 	bl	8000204 <strlen>
 80070f0:	4603      	mov	r3, r0
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	fb14 f303 	smulbb	r3, r4, r3
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 80070fe:	b298      	uxth	r0, r3
 8007100:	463a      	mov	r2, r7
 8007102:	4b58      	ldr	r3, [pc, #352]	; (8007264 <stwMain+0x2a0>)
 8007104:	214c      	movs	r1, #76	; 0x4c
 8007106:	f7fb fcc9 	bl	8002a9c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 800710a:	2300      	movs	r3, #0
 800710c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007110:	e08b      	b.n	800722a <stwMain+0x266>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8007112:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007116:	4a54      	ldr	r2, [pc, #336]	; (8007268 <stwMain+0x2a4>)
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d07f      	beq.n	8007220 <stwMain+0x25c>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8007120:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	463b      	mov	r3, r7
 8007128:	4950      	ldr	r1, [pc, #320]	; (800726c <stwMain+0x2a8>)
 800712a:	4618      	mov	r0, r3
 800712c:	f00b f802 	bl	8012134 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8007130:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	b2db      	uxtb	r3, r3
 8007138:	3b7e      	subs	r3, #126	; 0x7e
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	463a      	mov	r2, r7
 800713e:	4b44      	ldr	r3, [pc, #272]	; (8007250 <stwMain+0x28c>)
 8007140:	2000      	movs	r0, #0
 8007142:	f7fb fcab 	bl	8002a9c <lcdPutStr>
			if(i>0){
 8007146:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800714a:	2b00      	cmp	r3, #0
 800714c:	d022      	beq.n	8007194 <stwMain+0x1d0>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 800714e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	b2db      	uxtb	r3, r3
 8007156:	3b7e      	subs	r3, #126	; 0x7e
 8007158:	b2dc      	uxtb	r4, r3
 800715a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800715e:	4a42      	ldr	r2, [pc, #264]	; (8007268 <stwMain+0x2a4>)
 8007160:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007164:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007168:	3b01      	subs	r3, #1
 800716a:	493f      	ldr	r1, [pc, #252]	; (8007268 <stwMain+0x2a4>)
 800716c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fe62 	bl	8006e3c <convertTicks>
 8007178:	4603      	mov	r3, r0
 800717a:	66bb      	str	r3, [r7, #104]	; 0x68
 800717c:	463b      	mov	r3, r7
 800717e:	4619      	mov	r1, r3
 8007180:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007182:	f7ff feaf 	bl	8006ee4 <stwString>
 8007186:	4602      	mov	r2, r0
 8007188:	4b31      	ldr	r3, [pc, #196]	; (8007250 <stwMain+0x28c>)
 800718a:	4621      	mov	r1, r4
 800718c:	2037      	movs	r0, #55	; 0x37
 800718e:	f7fb fc85 	bl	8002a9c <lcdPutStr>
 8007192:	e01a      	b.n	80071ca <stwMain+0x206>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8007194:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	b2db      	uxtb	r3, r3
 800719c:	3b7e      	subs	r3, #126	; 0x7e
 800719e:	b2dc      	uxtb	r4, r3
 80071a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071a4:	4a30      	ldr	r2, [pc, #192]	; (8007268 <stwMain+0x2a4>)
 80071a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fe46 	bl	8006e3c <convertTicks>
 80071b0:	4603      	mov	r3, r0
 80071b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071b4:	463b      	mov	r3, r7
 80071b6:	4619      	mov	r1, r3
 80071b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071ba:	f7ff fe93 	bl	8006ee4 <stwString>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b23      	ldr	r3, [pc, #140]	; (8007250 <stwMain+0x28c>)
 80071c2:	4621      	mov	r1, r4
 80071c4:	2037      	movs	r0, #55	; 0x37
 80071c6:	f7fb fc69 	bl	8002a9c <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 80071ca:	463b      	mov	r3, r7
 80071cc:	4928      	ldr	r1, [pc, #160]	; (8007270 <stwMain+0x2ac>)
 80071ce:	4618      	mov	r0, r3
 80071d0:	f00a ffb0 	bl	8012134 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 80071d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	3b7e      	subs	r3, #126	; 0x7e
 80071de:	b2d9      	uxtb	r1, r3
 80071e0:	463a      	mov	r2, r7
 80071e2:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <stwMain+0x28c>)
 80071e4:	20a5      	movs	r0, #165	; 0xa5
 80071e6:	f7fb fc59 	bl	8002a9c <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 80071ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	3b7e      	subs	r3, #126	; 0x7e
 80071f4:	b2dc      	uxtb	r4, r3
 80071f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80071fa:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <stwMain+0x2a4>)
 80071fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fe1b 	bl	8006e3c <convertTicks>
 8007206:	4603      	mov	r3, r0
 8007208:	673b      	str	r3, [r7, #112]	; 0x70
 800720a:	463b      	mov	r3, r7
 800720c:	4619      	mov	r1, r3
 800720e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007210:	f7ff fe68 	bl	8006ee4 <stwString>
 8007214:	4602      	mov	r2, r0
 8007216:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <stwMain+0x28c>)
 8007218:	4621      	mov	r1, r4
 800721a:	20e1      	movs	r0, #225	; 0xe1
 800721c:	f7fb fc3e 	bl	8002a9c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8007220:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007224:	3301      	adds	r3, #1
 8007226:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800722a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800722e:	2b06      	cmp	r3, #6
 8007230:	f67f af6f 	bls.w	8007112 <stwMain+0x14e>
		}
	}
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	377c      	adds	r7, #124	; 0x7c
 800723a:	46bd      	mov	sp, r7
 800723c:	bd90      	pop	{r4, r7, pc}
 800723e:	bf00      	nop
 8007240:	20005780 	.word	0x20005780
 8007244:	0801a5d0 	.word	0x0801a5d0
 8007248:	0802e9a0 	.word	0x0802e9a0
 800724c:	0801a5dc 	.word	0x0801a5dc
 8007250:	0802df18 	.word	0x0802df18
 8007254:	20005b1c 	.word	0x20005b1c
 8007258:	20005d04 	.word	0x20005d04
 800725c:	0801a5e0 	.word	0x0801a5e0
 8007260:	0801a5e8 	.word	0x0801a5e8
 8007264:	08030808 	.word	0x08030808
 8007268:	20000150 	.word	0x20000150
 800726c:	0801a5f8 	.word	0x0801a5f8
 8007270:	0801a600 	.word	0x0801a600

08007274 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <setDefaultClbcks+0x20>)
 800727a:	4a07      	ldr	r2, [pc, #28]	; (8007298 <setDefaultClbcks+0x24>)
 800727c:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <setDefaultClbcks+0x28>)
 8007280:	4a07      	ldr	r2, [pc, #28]	; (80072a0 <setDefaultClbcks+0x2c>)
 8007282:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <setDefaultClbcks+0x30>)
 8007286:	4a08      	ldr	r2, [pc, #32]	; (80072a8 <setDefaultClbcks+0x34>)
 8007288:	611a      	str	r2, [r3, #16]
}
 800728a:	bf00      	nop
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20002680 	.word	0x20002680
 8007298:	08004eb5 	.word	0x08004eb5
 800729c:	200025f0 	.word	0x200025f0
 80072a0:	08002601 	.word	0x08002601
 80072a4:	20002638 	.word	0x20002638
 80072a8:	08002611 	.word	0x08002611

080072ac <setTimeAction>:

static void setTimeAction(void){
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 80072b0:	4802      	ldr	r0, [pc, #8]	; (80072bc <setTimeAction+0x10>)
 80072b2:	f7fb f9c1 	bl	8002638 <guiApplyView>
}
 80072b6:	bf00      	nop
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000298 	.word	0x20000298

080072c0 <setDateAction>:
static void setDateAction(void){
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 80072c4:	4802      	ldr	r0, [pc, #8]	; (80072d0 <setDateAction+0x10>)
 80072c6:	f7fb f9b7 	bl	8002638 <guiApplyView>
}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000264 	.word	0x20000264

080072d4 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80072d8:	f7ff ffcc 	bl	8007274 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 80072dc:	4802      	ldr	r0, [pc, #8]	; (80072e8 <faceSetup+0x14>)
 80072de:	f7fd fd63 	bl	8004da8 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	08007275 	.word	0x08007275

080072ec <faceMain>:

void faceMain(void){
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b0b1      	sub	sp, #196	; 0xc4
 80072f0:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	611a      	str	r2, [r3, #16]
 8007308:	615a      	str	r2, [r3, #20]
 800730a:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 800730c:	4b83      	ldr	r3, [pc, #524]	; (800751c <faceMain+0x230>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7f9 f939 	bl	8000588 <__aeabi_f2d>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800731e:	4980      	ldr	r1, [pc, #512]	; (8007520 <faceMain+0x234>)
 8007320:	f00a ff08 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8007324:	2314      	movs	r3, #20
 8007326:	b29c      	uxth	r4, r3
 8007328:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800732c:	4618      	mov	r0, r3
 800732e:	f7f8 ff69 	bl	8000204 <strlen>
 8007332:	4603      	mov	r3, r0
 8007334:	f1c3 030d 	rsb	r3, r3, #13
 8007338:	b29b      	uxth	r3, r3
 800733a:	fb14 f303 	smulbb	r3, r4, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	3323      	adds	r3, #35	; 0x23
 8007342:	b298      	uxth	r0, r3
 8007344:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8007348:	4b76      	ldr	r3, [pc, #472]	; (8007524 <faceMain+0x238>)
 800734a:	210e      	movs	r1, #14
 800734c:	f7fb fba6 	bl	8002a9c <lcdPutStr>
	char baroStr[30] = {0};
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007356:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	609a      	str	r2, [r3, #8]
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	611a      	str	r2, [r3, #16]
 8007366:	615a      	str	r2, [r3, #20]
 8007368:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 800736a:	4b6c      	ldr	r3, [pc, #432]	; (800751c <faceMain+0x230>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007528 <faceMain+0x23c>
 800737a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800737e:	ee16 0a90 	vmov	r0, s13
 8007382:	f7f9 f901 	bl	8000588 <__aeabi_f2d>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800738e:	4967      	ldr	r1, [pc, #412]	; (800752c <faceMain+0x240>)
 8007390:	f00a fed0 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8007394:	2314      	movs	r3, #20
 8007396:	b29c      	uxth	r4, r3
 8007398:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800739c:	4618      	mov	r0, r3
 800739e:	f7f8 ff31 	bl	8000204 <strlen>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f1c3 030d 	rsb	r3, r3, #13
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	fb14 f303 	smulbb	r3, r4, r3
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3323      	adds	r3, #35	; 0x23
 80073b2:	b298      	uxth	r0, r3
 80073b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80073b8:	4b5a      	ldr	r3, [pc, #360]	; (8007524 <faceMain+0x238>)
 80073ba:	212a      	movs	r1, #42	; 0x2a
 80073bc:	f7fb fb6e 	bl	8002a9c <lcdPutStr>

	char fracStr[30] = {0};
 80073c0:	2300      	movs	r3, #0
 80073c2:	663b      	str	r3, [r7, #96]	; 0x60
 80073c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	615a      	str	r2, [r3, #20]
 80073d6:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80073d8:	2300      	movs	r3, #0
 80073da:	643b      	str	r3, [r7, #64]	; 0x40
 80073dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	609a      	str	r2, [r3, #8]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	611a      	str	r2, [r3, #16]
 80073ec:	615a      	str	r2, [r3, #20]
 80073ee:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80073f0:	2300      	movs	r3, #0
 80073f2:	623b      	str	r3, [r7, #32]
 80073f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	611a      	str	r2, [r3, #16]
 8007404:	615a      	str	r2, [r3, #20]
 8007406:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8007408:	4b49      	ldr	r3, [pc, #292]	; (8007530 <faceMain+0x244>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007412:	4948      	ldr	r1, [pc, #288]	; (8007534 <faceMain+0x248>)
 8007414:	4618      	mov	r0, r3
 8007416:	f00a fe8d 	bl	8012134 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800741a:	4b45      	ldr	r3, [pc, #276]	; (8007530 <faceMain+0x244>)
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	461a      	mov	r2, r3
 8007420:	f107 0320 	add.w	r3, r7, #32
 8007424:	4943      	ldr	r1, [pc, #268]	; (8007534 <faceMain+0x248>)
 8007426:	4618      	mov	r0, r3
 8007428:	f00a fe84 	bl	8012134 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 800742c:	4b40      	ldr	r3, [pc, #256]	; (8007530 <faceMain+0x244>)
 800742e:	789b      	ldrb	r3, [r3, #2]
 8007430:	461a      	mov	r2, r3
 8007432:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007436:	493f      	ldr	r1, [pc, #252]	; (8007534 <faceMain+0x248>)
 8007438:	4618      	mov	r0, r3
 800743a:	f00a fe7b 	bl	8012134 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800743e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007442:	4b3d      	ldr	r3, [pc, #244]	; (8007538 <faceMain+0x24c>)
 8007444:	214c      	movs	r1, #76	; 0x4c
 8007446:	2014      	movs	r0, #20
 8007448:	f7fb fb28 	bl	8002a9c <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 800744c:	f107 0220 	add.w	r2, r7, #32
 8007450:	4b39      	ldr	r3, [pc, #228]	; (8007538 <faceMain+0x24c>)
 8007452:	214c      	movs	r1, #76	; 0x4c
 8007454:	20aa      	movs	r0, #170	; 0xaa
 8007456:	f7fb fb21 	bl	8002a9c <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 800745a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <faceMain+0x250>)
 8007460:	214c      	movs	r1, #76	; 0x4c
 8007462:	f240 103b 	movw	r0, #315	; 0x13b
 8007466:	f7fb fb19 	bl	8002a9c <lcdPutStr>

	char buffString[30] = {0};
 800746a:	2300      	movs	r3, #0
 800746c:	603b      	str	r3, [r7, #0]
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	609a      	str	r2, [r3, #8]
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	611a      	str	r2, [r3, #16]
 800747c:	615a      	str	r2, [r3, #20]
 800747e:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8007480:	463b      	mov	r3, r7
 8007482:	492f      	ldr	r1, [pc, #188]	; (8007540 <faceMain+0x254>)
 8007484:	4618      	mov	r0, r3
 8007486:	f00a fe55 	bl	8012134 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <faceMain+0x258>)
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	461a      	mov	r2, r3
 8007490:	4b2d      	ldr	r3, [pc, #180]	; (8007548 <faceMain+0x25c>)
 8007492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007496:	4b2b      	ldr	r3, [pc, #172]	; (8007544 <faceMain+0x258>)
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800749e:	4638      	mov	r0, r7
 80074a0:	492a      	ldr	r1, [pc, #168]	; (800754c <faceMain+0x260>)
 80074a2:	f00a fe47 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80074a6:	2314      	movs	r3, #20
 80074a8:	b29c      	uxth	r4, r3
 80074aa:	463b      	mov	r3, r7
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7f8 fea9 	bl	8000204 <strlen>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f1c3 030d 	rsb	r3, r3, #13
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	fb14 f303 	smulbb	r3, r4, r3
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3323      	adds	r3, #35	; 0x23
 80074c2:	b298      	uxth	r0, r3
 80074c4:	463a      	mov	r2, r7
 80074c6:	4b17      	ldr	r3, [pc, #92]	; (8007524 <faceMain+0x238>)
 80074c8:	21ae      	movs	r1, #174	; 0xae
 80074ca:	f7fb fae7 	bl	8002a9c <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80074ce:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <faceMain+0x258>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b1e      	ldr	r3, [pc, #120]	; (8007550 <faceMain+0x264>)
 80074d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074da:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <faceMain+0x258>)
 80074dc:	789b      	ldrb	r3, [r3, #2]
 80074de:	4638      	mov	r0, r7
 80074e0:	491a      	ldr	r1, [pc, #104]	; (800754c <faceMain+0x260>)
 80074e2:	f00a fe27 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80074e6:	2314      	movs	r3, #20
 80074e8:	b29c      	uxth	r4, r3
 80074ea:	463b      	mov	r3, r7
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7f8 fe89 	bl	8000204 <strlen>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f1c3 030d 	rsb	r3, r3, #13
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	fb14 f303 	smulbb	r3, r4, r3
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3323      	adds	r3, #35	; 0x23
 8007502:	b298      	uxth	r0, r3
 8007504:	463a      	mov	r2, r7
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <faceMain+0x238>)
 8007508:	21ca      	movs	r1, #202	; 0xca
 800750a:	f7fb fac7 	bl	8002a9c <lcdPutStr>

	enableCntxMenu();
 800750e:	f7fd fced 	bl	8004eec <enableCntxMenu>
}
 8007512:	bf00      	nop
 8007514:	37c4      	adds	r7, #196	; 0xc4
 8007516:	46bd      	mov	sp, r7
 8007518:	bd90      	pop	{r4, r7, pc}
 800751a:	bf00      	nop
 800751c:	200025e0 	.word	0x200025e0
 8007520:	0801a6c0 	.word	0x0801a6c0
 8007524:	08035e50 	.word	0x08035e50
 8007528:	42c80000 	.word	0x42c80000
 800752c:	0801a6c8 	.word	0x0801a6c8
 8007530:	20005780 	.word	0x20005780
 8007534:	0801a6d4 	.word	0x0801a6d4
 8007538:	0803d300 	.word	0x0803d300
 800753c:	08037cb8 	.word	0x08037cb8
 8007540:	0801a6dc 	.word	0x0801a6dc
 8007544:	20005794 	.word	0x20005794
 8007548:	200001b4 	.word	0x200001b4
 800754c:	0801a6ec 	.word	0x0801a6ec
 8007550:	20000194 	.word	0x20000194

08007554 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8007558:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <setDefaultClbcks+0x34>)
 800755a:	4a0c      	ldr	r2, [pc, #48]	; (800758c <setDefaultClbcks+0x38>)
 800755c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <setDefaultClbcks+0x3c>)
 8007560:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <setDefaultClbcks+0x40>)
 8007562:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <setDefaultClbcks+0x44>)
 8007566:	4a0d      	ldr	r2, [pc, #52]	; (800759c <setDefaultClbcks+0x48>)
 8007568:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <setDefaultClbcks+0x4c>)
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <setDefaultClbcks+0x50>)
 800756e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <setDefaultClbcks+0x54>)
 8007572:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <setDefaultClbcks+0x58>)
 8007574:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <setDefaultClbcks+0x5c>)
 8007578:	4a0e      	ldr	r2, [pc, #56]	; (80075b4 <setDefaultClbcks+0x60>)
 800757a:	611a      	str	r2, [r3, #16]
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	200026a4 	.word	0x200026a4
 800758c:	080078c5 	.word	0x080078c5
 8007590:	20002680 	.word	0x20002680
 8007594:	08007785 	.word	0x08007785
 8007598:	2000265c 	.word	0x2000265c
 800759c:	080078d1 	.word	0x080078d1
 80075a0:	200025f0 	.word	0x200025f0
 80075a4:	0800783d 	.word	0x0800783d
 80075a8:	20002614 	.word	0x20002614
 80075ac:	08007755 	.word	0x08007755
 80075b0:	20002638 	.word	0x20002638
 80075b4:	080077b5 	.word	0x080077b5

080075b8 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80075bc:	f7ff ffca 	bl	8007554 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <dateInputSetup+0x24>)
 80075c2:	789a      	ldrb	r2, [r3, #2]
 80075c4:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <dateInputSetup+0x28>)
 80075c6:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <dateInputSetup+0x24>)
 80075ca:	785a      	ldrb	r2, [r3, #1]
 80075cc:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <dateInputSetup+0x28>)
 80075ce:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <dateInputSetup+0x24>)
 80075d2:	78da      	ldrb	r2, [r3, #3]
 80075d4:	4b02      	ldr	r3, [pc, #8]	; (80075e0 <dateInputSetup+0x28>)
 80075d6:	709a      	strb	r2, [r3, #2]
}
 80075d8:	bf00      	nop
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20005794 	.word	0x20005794
 80075e0:	20005d0c 	.word	0x20005d0c

080075e4 <dateInputMain>:

void dateInputMain(void){
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 80075ea:	2300      	movs	r3, #0
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	1d3b      	adds	r3, r7, #4
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	611a      	str	r2, [r3, #16]
 80075fc:	615a      	str	r2, [r3, #20]
 80075fe:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8007600:	463b      	mov	r3, r7
 8007602:	494a      	ldr	r1, [pc, #296]	; (800772c <dateInputMain+0x148>)
 8007604:	4618      	mov	r0, r3
 8007606:	f00a fd95 	bl	8012134 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 800760a:	4b49      	ldr	r3, [pc, #292]	; (8007730 <dateInputMain+0x14c>)
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	461a      	mov	r2, r3
 8007610:	4b48      	ldr	r3, [pc, #288]	; (8007734 <dateInputMain+0x150>)
 8007612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007616:	4b46      	ldr	r3, [pc, #280]	; (8007730 <dateInputMain+0x14c>)
 8007618:	789b      	ldrb	r3, [r3, #2]
 800761a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800761e:	4638      	mov	r0, r7
 8007620:	4945      	ldr	r1, [pc, #276]	; (8007738 <dateInputMain+0x154>)
 8007622:	f00a fd87 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8007626:	2314      	movs	r3, #20
 8007628:	b29c      	uxth	r4, r3
 800762a:	463b      	mov	r3, r7
 800762c:	4618      	mov	r0, r3
 800762e:	f7f8 fde9 	bl	8000204 <strlen>
 8007632:	4603      	mov	r3, r0
 8007634:	f1c3 030d 	rsb	r3, r3, #13
 8007638:	b29b      	uxth	r3, r3
 800763a:	fb14 f303 	smulbb	r3, r4, r3
 800763e:	b29b      	uxth	r3, r3
 8007640:	3323      	adds	r3, #35	; 0x23
 8007642:	b298      	uxth	r0, r3
 8007644:	463a      	mov	r2, r7
 8007646:	4b3d      	ldr	r3, [pc, #244]	; (800773c <dateInputMain+0x158>)
 8007648:	21ae      	movs	r1, #174	; 0xae
 800764a:	f7fb fa27 	bl	8002a9c <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 800764e:	4b38      	ldr	r3, [pc, #224]	; (8007730 <dateInputMain+0x14c>)
 8007650:	7818      	ldrb	r0, [r3, #0]
 8007652:	4b37      	ldr	r3, [pc, #220]	; (8007730 <dateInputMain+0x14c>)
 8007654:	7859      	ldrb	r1, [r3, #1]
 8007656:	4b36      	ldr	r3, [pc, #216]	; (8007730 <dateInputMain+0x14c>)
 8007658:	789b      	ldrb	r3, [r3, #2]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f000 fcb6 	bl	8007fd4 <zellerCongruence>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <dateInputMain+0x15c>)
 800766e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007672:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <dateInputMain+0x14c>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	4638      	mov	r0, r7
 8007678:	492f      	ldr	r1, [pc, #188]	; (8007738 <dateInputMain+0x154>)
 800767a:	f00a fd5b 	bl	8012134 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800767e:	2314      	movs	r3, #20
 8007680:	b29c      	uxth	r4, r3
 8007682:	463b      	mov	r3, r7
 8007684:	4618      	mov	r0, r3
 8007686:	f7f8 fdbd 	bl	8000204 <strlen>
 800768a:	4603      	mov	r3, r0
 800768c:	f1c3 030d 	rsb	r3, r3, #13
 8007690:	b29b      	uxth	r3, r3
 8007692:	fb14 f303 	smulbb	r3, r4, r3
 8007696:	b29b      	uxth	r3, r3
 8007698:	3323      	adds	r3, #35	; 0x23
 800769a:	b298      	uxth	r0, r3
 800769c:	463a      	mov	r2, r7
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <dateInputMain+0x158>)
 80076a0:	21ca      	movs	r1, #202	; 0xca
 80076a2:	f7fb f9fb 	bl	8002a9c <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <dateInputMain+0x160>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	4b26      	ldr	r3, [pc, #152]	; (8007748 <dateInputMain+0x164>)
 80076ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076b2:	4618      	mov	r0, r3
 80076b4:	4b23      	ldr	r3, [pc, #140]	; (8007744 <dateInputMain+0x160>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	4b23      	ldr	r3, [pc, #140]	; (8007748 <dateInputMain+0x164>)
 80076bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b20      	ldr	r3, [pc, #128]	; (8007744 <dateInputMain+0x160>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	4b20      	ldr	r3, [pc, #128]	; (800774c <dateInputMain+0x168>)
 80076ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80076ce:	18d1      	adds	r1, r2, r3
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <dateInputMain+0x160>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <dateInputMain+0x16c>)
 80076d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076dc:	461a      	mov	r2, r3
 80076de:	2301      	movs	r3, #1
 80076e0:	f7fb fe98 	bl	8003414 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <dateInputMain+0x160>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b17      	ldr	r3, [pc, #92]	; (8007748 <dateInputMain+0x164>)
 80076ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076f0:	4618      	mov	r0, r3
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <dateInputMain+0x160>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <dateInputMain+0x164>)
 80076fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076fe:	461a      	mov	r2, r3
 8007700:	4b10      	ldr	r3, [pc, #64]	; (8007744 <dateInputMain+0x160>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <dateInputMain+0x168>)
 8007708:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800770c:	18d1      	adds	r1, r2, r3
 800770e:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <dateInputMain+0x160>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <dateInputMain+0x16c>)
 8007716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	2301      	movs	r3, #1
 800771e:	f7fb fe79 	bl	8003414 <lcdHLine>
}
 8007722:	bf00      	nop
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}
 800772a:	bf00      	nop
 800772c:	0801a7ac 	.word	0x0801a7ac
 8007730:	20005d0c 	.word	0x20005d0c
 8007734:	20000218 	.word	0x20000218
 8007738:	0801a7bc 	.word	0x0801a7bc
 800773c:	0803f288 	.word	0x0803f288
 8007740:	200001f8 	.word	0x200001f8
 8007744:	20005d08 	.word	0x20005d08
 8007748:	2000024c 	.word	0x2000024c
 800774c:	2000025c 	.word	0x2000025c
 8007750:	20000254 	.word	0x20000254

08007754 <cursorNext>:

static void cursorNext(void){
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8007758:	4b09      	ldr	r3, [pc, #36]	; (8007780 <cursorNext+0x2c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d806      	bhi.n	800776e <cursorNext+0x1a>
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <cursorNext+0x2c>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <cursorNext+0x2c>)
 800776a:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 800776c:	e002      	b.n	8007774 <cursorNext+0x20>
	else curPosition = 0;
 800776e:	4b04      	ldr	r3, [pc, #16]	; (8007780 <cursorNext+0x2c>)
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	20005d08 	.word	0x20005d08

08007784 <cursorPrev>:
static void cursorPrev(void){
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <cursorPrev+0x2c>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <cursorPrev+0x1a>
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <cursorPrev+0x2c>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	3b01      	subs	r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <cursorPrev+0x2c>)
 800779a:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 800779c:	e002      	b.n	80077a4 <cursorPrev+0x20>
	else curPosition = 2;
 800779e:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <cursorPrev+0x2c>)
 80077a0:	2202      	movs	r2, #2
 80077a2:	701a      	strb	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20005d08 	.word	0x20005d08

080077b4 <increment>:
static void increment(void){
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
	switch(curPosition){
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <increment+0x80>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d024      	beq.n	800780a <increment+0x56>
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	dc31      	bgt.n	8007828 <increment+0x74>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <increment+0x1a>
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d00f      	beq.n	80077ec <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 80077cc:	e02c      	b.n	8007828 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 80077ce:	4b1a      	ldr	r3, [pc, #104]	; (8007838 <increment+0x84>)
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b0b      	cmp	r3, #11
 80077d4:	d806      	bhi.n	80077e4 <increment+0x30>
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <increment+0x84>)
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	3301      	adds	r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <increment+0x84>)
 80077e0:	705a      	strb	r2, [r3, #1]
			break;
 80077e2:	e021      	b.n	8007828 <increment+0x74>
			else valDatePos[1] = 1;
 80077e4:	4b14      	ldr	r3, [pc, #80]	; (8007838 <increment+0x84>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
			break;
 80077ea:	e01d      	b.n	8007828 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <increment+0x84>)
 80077ee:	789b      	ldrb	r3, [r3, #2]
 80077f0:	2b63      	cmp	r3, #99	; 0x63
 80077f2:	d806      	bhi.n	8007802 <increment+0x4e>
 80077f4:	4b10      	ldr	r3, [pc, #64]	; (8007838 <increment+0x84>)
 80077f6:	789b      	ldrb	r3, [r3, #2]
 80077f8:	3301      	adds	r3, #1
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <increment+0x84>)
 80077fe:	709a      	strb	r2, [r3, #2]
			break;
 8007800:	e012      	b.n	8007828 <increment+0x74>
			else valDatePos[2] = 0;
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <increment+0x84>)
 8007804:	2200      	movs	r2, #0
 8007806:	709a      	strb	r2, [r3, #2]
			break;
 8007808:	e00e      	b.n	8007828 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <increment+0x84>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b1e      	cmp	r3, #30
 8007810:	d806      	bhi.n	8007820 <increment+0x6c>
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <increment+0x84>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <increment+0x84>)
 800781c:	701a      	strb	r2, [r3, #0]
			break;
 800781e:	e002      	b.n	8007826 <increment+0x72>
			else valDatePos[0] = 1;
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <increment+0x84>)
 8007822:	2201      	movs	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
			break;
 8007826:	bf00      	nop
}
 8007828:	bf00      	nop
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20005d08 	.word	0x20005d08
 8007838:	20005d0c 	.word	0x20005d0c

0800783c <decrement>:
static void decrement(void){
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007840:	4b1e      	ldr	r3, [pc, #120]	; (80078bc <decrement+0x80>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d024      	beq.n	8007892 <decrement+0x56>
 8007848:	2b02      	cmp	r3, #2
 800784a:	dc31      	bgt.n	80078b0 <decrement+0x74>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <decrement+0x1a>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d00f      	beq.n	8007874 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8007854:	e02c      	b.n	80078b0 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <decrement+0x84>)
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d006      	beq.n	800786c <decrement+0x30>
 800785e:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <decrement+0x84>)
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	3b01      	subs	r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <decrement+0x84>)
 8007868:	705a      	strb	r2, [r3, #1]
				break;
 800786a:	e021      	b.n	80078b0 <decrement+0x74>
				else valDatePos[1] = 12;
 800786c:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <decrement+0x84>)
 800786e:	220c      	movs	r2, #12
 8007870:	705a      	strb	r2, [r3, #1]
				break;
 8007872:	e01d      	b.n	80078b0 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <decrement+0x84>)
 8007876:	789b      	ldrb	r3, [r3, #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d006      	beq.n	800788a <decrement+0x4e>
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <decrement+0x84>)
 800787e:	789b      	ldrb	r3, [r3, #2]
 8007880:	3b01      	subs	r3, #1
 8007882:	b2da      	uxtb	r2, r3
 8007884:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <decrement+0x84>)
 8007886:	709a      	strb	r2, [r3, #2]
				break;
 8007888:	e012      	b.n	80078b0 <decrement+0x74>
				else valDatePos[2] = 100;
 800788a:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <decrement+0x84>)
 800788c:	2264      	movs	r2, #100	; 0x64
 800788e:	709a      	strb	r2, [r3, #2]
				break;
 8007890:	e00e      	b.n	80078b0 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <decrement+0x84>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d906      	bls.n	80078a8 <decrement+0x6c>
 800789a:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <decrement+0x84>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	3b01      	subs	r3, #1
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <decrement+0x84>)
 80078a4:	701a      	strb	r2, [r3, #0]
				break;
 80078a6:	e002      	b.n	80078ae <decrement+0x72>
				else valDatePos[0] = 31;
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <decrement+0x84>)
 80078aa:	221f      	movs	r2, #31
 80078ac:	701a      	strb	r2, [r3, #0]
				break;
 80078ae:	bf00      	nop
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20005d08 	.word	0x20005d08
 80078c0:	20005d0c 	.word	0x20005d0c

080078c4 <exitScr>:
static void exitScr(void){
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80078c8:	f7fa fecc 	bl	8002664 <applySelectedScreen>
}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <accept>:
static void accept(void){
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 80078d4:	4b15      	ldr	r3, [pc, #84]	; (800792c <accept+0x5c>)
 80078d6:	785a      	ldrb	r2, [r3, #1]
 80078d8:	4b15      	ldr	r3, [pc, #84]	; (8007930 <accept+0x60>)
 80078da:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 80078dc:	4b13      	ldr	r3, [pc, #76]	; (800792c <accept+0x5c>)
 80078de:	781a      	ldrb	r2, [r3, #0]
 80078e0:	4b13      	ldr	r3, [pc, #76]	; (8007930 <accept+0x60>)
 80078e2:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 80078e4:	4b11      	ldr	r3, [pc, #68]	; (800792c <accept+0x5c>)
 80078e6:	789a      	ldrb	r2, [r3, #2]
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <accept+0x60>)
 80078ea:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <accept+0x5c>)
 80078ee:	7818      	ldrb	r0, [r3, #0]
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <accept+0x5c>)
 80078f2:	7859      	ldrb	r1, [r3, #1]
 80078f4:	4b0d      	ldr	r3, [pc, #52]	; (800792c <accept+0x5c>)
 80078f6:	789b      	ldrb	r3, [r3, #2]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	f000 fb67 	bl	8007fd4 <zellerCongruence>
 8007906:	4603      	mov	r3, r0
 8007908:	461a      	mov	r2, r3
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <accept+0x60>)
 800790c:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800790e:	2200      	movs	r2, #0
 8007910:	4907      	ldr	r1, [pc, #28]	; (8007930 <accept+0x60>)
 8007912:	4808      	ldr	r0, [pc, #32]	; (8007934 <accept+0x64>)
 8007914:	f003 f84a 	bl	800a9ac <HAL_RTC_SetDate>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <accept+0x52>
	{
	Error_Handler();
 800791e:	f7fc f923 	bl	8003b68 <Error_Handler>
	}
	exitScr();
 8007922:	f7ff ffcf 	bl	80078c4 <exitScr>
}
 8007926:	bf00      	nop
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20005d0c 	.word	0x20005d0c
 8007930:	20005794 	.word	0x20005794
 8007934:	20005a20 	.word	0x20005a20

08007938 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <setDefaultClbcks+0x34>)
 800793e:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <setDefaultClbcks+0x38>)
 8007940:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <setDefaultClbcks+0x3c>)
 8007944:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <setDefaultClbcks+0x40>)
 8007946:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <setDefaultClbcks+0x44>)
 800794a:	4a0d      	ldr	r2, [pc, #52]	; (8007980 <setDefaultClbcks+0x48>)
 800794c:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <setDefaultClbcks+0x4c>)
 8007950:	4a0d      	ldr	r2, [pc, #52]	; (8007988 <setDefaultClbcks+0x50>)
 8007952:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <setDefaultClbcks+0x54>)
 8007956:	4a0e      	ldr	r2, [pc, #56]	; (8007990 <setDefaultClbcks+0x58>)
 8007958:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800795a:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <setDefaultClbcks+0x5c>)
 800795c:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <setDefaultClbcks+0x60>)
 800795e:	611a      	str	r2, [r3, #16]
}
 8007960:	bf00      	nop
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	200026a4 	.word	0x200026a4
 8007970:	08007cbd 	.word	0x08007cbd
 8007974:	20002680 	.word	0x20002680
 8007978:	08007b01 	.word	0x08007b01
 800797c:	2000265c 	.word	0x2000265c
 8007980:	08007cc9 	.word	0x08007cc9
 8007984:	200025f0 	.word	0x200025f0
 8007988:	08007bed 	.word	0x08007bed
 800798c:	20002614 	.word	0x20002614
 8007990:	08007ad1 	.word	0x08007ad1
 8007994:	20002638 	.word	0x20002638
 8007998:	08007b31 	.word	0x08007b31

0800799c <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80079a0:	f7ff ffca 	bl	8007938 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <timeInputSetup+0x24>)
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <timeInputSetup+0x28>)
 80079aa:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <timeInputSetup+0x24>)
 80079ae:	785a      	ldrb	r2, [r3, #1]
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <timeInputSetup+0x28>)
 80079b2:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <timeInputSetup+0x24>)
 80079b6:	789a      	ldrb	r2, [r3, #2]
 80079b8:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <timeInputSetup+0x28>)
 80079ba:	709a      	strb	r2, [r3, #2]
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20005780 	.word	0x20005780
 80079c4:	20005d10 	.word	0x20005d10

080079c8 <timeInputMain>:

void timeInputMain(void){
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 80079ce:	2300      	movs	r3, #0
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	1d3b      	adds	r3, r7, #4
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	609a      	str	r2, [r3, #8]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	611a      	str	r2, [r3, #16]
 80079e0:	615a      	str	r2, [r3, #20]
 80079e2:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 80079e4:	4b33      	ldr	r3, [pc, #204]	; (8007ab4 <timeInputMain+0xec>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	463b      	mov	r3, r7
 80079ec:	4932      	ldr	r1, [pc, #200]	; (8007ab8 <timeInputMain+0xf0>)
 80079ee:	4618      	mov	r0, r3
 80079f0:	f00a fba0 	bl	8012134 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 80079f4:	463a      	mov	r2, r7
 80079f6:	4b31      	ldr	r3, [pc, #196]	; (8007abc <timeInputMain+0xf4>)
 80079f8:	214c      	movs	r1, #76	; 0x4c
 80079fa:	2014      	movs	r0, #20
 80079fc:	f7fb f84e 	bl	8002a9c <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8007a00:	4b2c      	ldr	r3, [pc, #176]	; (8007ab4 <timeInputMain+0xec>)
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	461a      	mov	r2, r3
 8007a06:	463b      	mov	r3, r7
 8007a08:	492b      	ldr	r1, [pc, #172]	; (8007ab8 <timeInputMain+0xf0>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f00a fb92 	bl	8012134 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8007a10:	463a      	mov	r2, r7
 8007a12:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <timeInputMain+0xf4>)
 8007a14:	214c      	movs	r1, #76	; 0x4c
 8007a16:	20aa      	movs	r0, #170	; 0xaa
 8007a18:	f7fb f840 	bl	8002a9c <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <timeInputMain+0xf8>)
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	461a      	mov	r2, r3
 8007a22:	463b      	mov	r3, r7
 8007a24:	4924      	ldr	r1, [pc, #144]	; (8007ab8 <timeInputMain+0xf0>)
 8007a26:	4618      	mov	r0, r3
 8007a28:	f00a fb84 	bl	8012134 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4b25      	ldr	r3, [pc, #148]	; (8007ac4 <timeInputMain+0xfc>)
 8007a30:	214c      	movs	r1, #76	; 0x4c
 8007a32:	f240 103b 	movw	r0, #315	; 0x13b
 8007a36:	f7fb f831 	bl	8002a9c <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8007a3a:	4b23      	ldr	r3, [pc, #140]	; (8007ac8 <timeInputMain+0x100>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4b22      	ldr	r3, [pc, #136]	; (8007acc <timeInputMain+0x104>)
 8007a42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a46:	4618      	mov	r0, r3
 8007a48:	4b1f      	ldr	r3, [pc, #124]	; (8007ac8 <timeInputMain+0x100>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b1f      	ldr	r3, [pc, #124]	; (8007acc <timeInputMain+0x104>)
 8007a50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007a58:	2301      	movs	r3, #1
 8007a5a:	22af      	movs	r2, #175	; 0xaf
 8007a5c:	f7fb fcda 	bl	8003414 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8007a60:	4b19      	ldr	r3, [pc, #100]	; (8007ac8 <timeInputMain+0x100>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b19      	ldr	r3, [pc, #100]	; (8007acc <timeInputMain+0x104>)
 8007a68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <timeInputMain+0x100>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b15      	ldr	r3, [pc, #84]	; (8007acc <timeInputMain+0x104>)
 8007a76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007a7e:	2301      	movs	r3, #1
 8007a80:	22b0      	movs	r2, #176	; 0xb0
 8007a82:	f7fb fcc7 	bl	8003414 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <timeInputMain+0x100>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <timeInputMain+0x104>)
 8007a8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a92:	4618      	mov	r0, r3
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <timeInputMain+0x100>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <timeInputMain+0x104>)
 8007a9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007aa0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	22b1      	movs	r2, #177	; 0xb1
 8007aa8:	f7fb fcb4 	bl	8003414 <lcdHLine>
}
 8007aac:	bf00      	nop
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20005d10 	.word	0x20005d10
 8007ab8:	0801a87c 	.word	0x0801a87c
 8007abc:	08046738 	.word	0x08046738
 8007ac0:	20005780 	.word	0x20005780
 8007ac4:	080410f0 	.word	0x080410f0
 8007ac8:	20005d0f 	.word	0x20005d0f
 8007acc:	2000028c 	.word	0x2000028c

08007ad0 <cursorNext>:

static void cursorNext(void){
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 8007ad4:	4b09      	ldr	r3, [pc, #36]	; (8007afc <cursorNext+0x2c>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d806      	bhi.n	8007aea <cursorNext+0x1a>
 8007adc:	4b07      	ldr	r3, [pc, #28]	; (8007afc <cursorNext+0x2c>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <cursorNext+0x2c>)
 8007ae6:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8007ae8:	e002      	b.n	8007af0 <cursorNext+0x20>
	else curPosition = 0;
 8007aea:	4b04      	ldr	r3, [pc, #16]	; (8007afc <cursorNext+0x2c>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
}
 8007af0:	bf00      	nop
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20005d0f 	.word	0x20005d0f

08007b00 <cursorPrev>:
static void cursorPrev(void){
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8007b04:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <cursorPrev+0x2c>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d006      	beq.n	8007b1a <cursorPrev+0x1a>
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <cursorPrev+0x2c>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <cursorPrev+0x2c>)
 8007b16:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8007b18:	e002      	b.n	8007b20 <cursorPrev+0x20>
	else curPosition = 4;
 8007b1a:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <cursorPrev+0x2c>)
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	701a      	strb	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20005d0f 	.word	0x20005d0f

08007b30 <increment>:
static void increment(void){
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <increment+0xb4>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d84d      	bhi.n	8007bd8 <increment+0xa8>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <increment+0x14>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b59 	.word	0x08007b59
 8007b48:	08007b77 	.word	0x08007b77
 8007b4c:	08007b95 	.word	0x08007b95
 8007b50:	08007bb3 	.word	0x08007bb3
 8007b54:	08007bd1 	.word	0x08007bd1
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8007b58:	4b23      	ldr	r3, [pc, #140]	; (8007be8 <increment+0xb8>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d806      	bhi.n	8007b6e <increment+0x3e>
 8007b60:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <increment+0xb8>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	330a      	adds	r3, #10
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	4b1f      	ldr	r3, [pc, #124]	; (8007be8 <increment+0xb8>)
 8007b6a:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8007b6c:	e034      	b.n	8007bd8 <increment+0xa8>
			else valTimePos[0] = 20;
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <increment+0xb8>)
 8007b70:	2214      	movs	r2, #20
 8007b72:	701a      	strb	r2, [r3, #0]
			break;
 8007b74:	e030      	b.n	8007bd8 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <increment+0xb8>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b17      	cmp	r3, #23
 8007b7c:	d806      	bhi.n	8007b8c <increment+0x5c>
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <increment+0xb8>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <increment+0xb8>)
 8007b88:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8007b8a:	e025      	b.n	8007bd8 <increment+0xa8>
			else valTimePos[0] = 0;
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <increment+0xb8>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
			break;
 8007b92:	e021      	b.n	8007bd8 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <increment+0xb8>)
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d806      	bhi.n	8007baa <increment+0x7a>
 8007b9c:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <increment+0xb8>)
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	330a      	adds	r3, #10
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <increment+0xb8>)
 8007ba6:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8007ba8:	e016      	b.n	8007bd8 <increment+0xa8>
			else valTimePos[1] = 0;
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <increment+0xb8>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	705a      	strb	r2, [r3, #1]
			break;
 8007bb0:	e012      	b.n	8007bd8 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <increment+0xb8>)
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8007bb8:	d806      	bhi.n	8007bc8 <increment+0x98>
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <increment+0xb8>)
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <increment+0xb8>)
 8007bc4:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8007bc6:	e007      	b.n	8007bd8 <increment+0xa8>
			else valTimePos[1] = 0;
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <increment+0xb8>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	705a      	strb	r2, [r3, #1]
			break;
 8007bce:	e003      	b.n	8007bd8 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <increment+0xb8>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	709a      	strb	r2, [r3, #2]
			break;
 8007bd6:	bf00      	nop
	}
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20005d0f 	.word	0x20005d0f
 8007be8:	20005d10 	.word	0x20005d10

08007bec <decrement>:
static void decrement(void){
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007bf0:	4b2e      	ldr	r3, [pc, #184]	; (8007cac <decrement+0xc0>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d857      	bhi.n	8007ca8 <decrement+0xbc>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <decrement+0x14>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c15 	.word	0x08007c15
 8007c04:	08007c33 	.word	0x08007c33
 8007c08:	08007c51 	.word	0x08007c51
 8007c0c:	08007c6f 	.word	0x08007c6f
 8007c10:	08007c8d 	.word	0x08007c8d
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <decrement+0xc4>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b09      	cmp	r3, #9
 8007c1a:	d906      	bls.n	8007c2a <decrement+0x3e>
 8007c1c:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <decrement+0xc4>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	3b0a      	subs	r3, #10
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <decrement+0xc4>)
 8007c26:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8007c28:	e03e      	b.n	8007ca8 <decrement+0xbc>
				else valTimePos[0] = 0;
 8007c2a:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <decrement+0xc4>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
				break;
 8007c30:	e03a      	b.n	8007ca8 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8007c32:	4b1f      	ldr	r3, [pc, #124]	; (8007cb0 <decrement+0xc4>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <decrement+0x5c>
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <decrement+0xc4>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <decrement+0xc4>)
 8007c44:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8007c46:	e02f      	b.n	8007ca8 <decrement+0xbc>
				else valTimePos[0] = 23;
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <decrement+0xc4>)
 8007c4a:	2217      	movs	r2, #23
 8007c4c:	701a      	strb	r2, [r3, #0]
				break;
 8007c4e:	e02b      	b.n	8007ca8 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8007c50:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <decrement+0xc4>)
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	d906      	bls.n	8007c66 <decrement+0x7a>
 8007c58:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <decrement+0xc4>)
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	3b0a      	subs	r3, #10
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <decrement+0xc4>)
 8007c62:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8007c64:	e020      	b.n	8007ca8 <decrement+0xbc>
				else valTimePos[1] = 0;
 8007c66:	4b12      	ldr	r3, [pc, #72]	; (8007cb0 <decrement+0xc4>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
				break;
 8007c6c:	e01c      	b.n	8007ca8 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <decrement+0xc4>)
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <decrement+0x98>
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <decrement+0xc4>)
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <decrement+0xc4>)
 8007c80:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8007c82:	e011      	b.n	8007ca8 <decrement+0xbc>
				else valTimePos[1] = 59;
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <decrement+0xc4>)
 8007c86:	223b      	movs	r2, #59	; 0x3b
 8007c88:	705a      	strb	r2, [r3, #1]
				break;
 8007c8a:	e00d      	b.n	8007ca8 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <decrement+0xc8>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8007c92:	2200      	movs	r2, #0
 8007c94:	4907      	ldr	r1, [pc, #28]	; (8007cb4 <decrement+0xc8>)
 8007c96:	4808      	ldr	r0, [pc, #32]	; (8007cb8 <decrement+0xcc>)
 8007c98:	f002 fd90 	bl	800a7bc <HAL_RTC_SetTime>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <decrement+0xba>
					{
						Error_Handler();
 8007ca2:	f7fb ff61 	bl	8003b68 <Error_Handler>
					}
				break;
 8007ca6:	bf00      	nop
		}
}
 8007ca8:	bf00      	nop
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20005d0f 	.word	0x20005d0f
 8007cb0:	20005d10 	.word	0x20005d10
 8007cb4:	20005780 	.word	0x20005780
 8007cb8:	20005a20 	.word	0x20005a20

08007cbc <exitScr>:
static void exitScr(void){
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8007cc0:	f7fa fcd0 	bl	8002664 <applySelectedScreen>
}
 8007cc4:	bf00      	nop
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <accept>:
static void accept(void){
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <accept+0x3c>)
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <accept+0x40>)
 8007cd2:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <accept+0x3c>)
 8007cd6:	785a      	ldrb	r2, [r3, #1]
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <accept+0x40>)
 8007cda:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <accept+0x40>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <accept+0x40>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4907      	ldr	r1, [pc, #28]	; (8007d08 <accept+0x40>)
 8007cec:	4807      	ldr	r0, [pc, #28]	; (8007d0c <accept+0x44>)
 8007cee:	f002 fd65 	bl	800a7bc <HAL_RTC_SetTime>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <accept+0x34>
	{
	Error_Handler();
 8007cf8:	f7fb ff36 	bl	8003b68 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 8007cfc:	f7ff ffde 	bl	8007cbc <exitScr>
}
 8007d00:	bf00      	nop
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20005d10 	.word	0x20005d10
 8007d08:	20005780 	.word	0x20005780
 8007d0c:	20005a20 	.word	0x20005a20

08007d10 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	895b      	ldrh	r3, [r3, #10]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	4618      	mov	r0, r3
 8007d38:	f009 f898 	bl	8010e6c <malloc>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	741a      	strb	r2, [r3, #16]
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	891a      	ldrh	r2, [r3, #8]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	895b      	ldrh	r3, [r3, #10]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	bf0c      	ite	eq
 8007d78:	2301      	moveq	r3, #1
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ffe5 	bl	8007d64 <cbuf_isFull>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02a      	beq.n	8007df6 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	88db      	ldrh	r3, [r3, #6]
 8007da8:	4619      	mov	r1, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	18d0      	adds	r0, r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	f009 f866 	bl	8010e8c <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	8952      	ldrh	r2, [r2, #10]
 8007dca:	fb93 f1f2 	sdiv	r1, r3, r2
 8007dce:	fb01 f202 	mul.w	r2, r1, r2
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	889b      	ldrh	r3, [r3, #4]
 8007dde:	3301      	adds	r3, #1
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	8952      	ldrh	r2, [r2, #10]
 8007de4:	fb93 f1f2 	sdiv	r1, r3, r2
 8007de8:	fb01 f202 	mul.w	r2, r1, r2
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 8007df4:	e023      	b.n	8007e3e <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	18d0      	adds	r0, r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	f009 f83b 	bl	8010e8c <memcpy>
		b->elemNum++;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	88db      	ldrh	r3, [r3, #6]
 8007e26:	3301      	adds	r3, #1
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	8952      	ldrh	r2, [r2, #10]
 8007e2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e30:	fb01 f202 	mul.w	r2, r1, r2
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	80da      	strh	r2, [r3, #6]
		return 1;
 8007e3c:	2301      	movs	r3, #1
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	889a      	ldrh	r2, [r3, #4]
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	4413      	add	r3, r2
 8007e5a:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	895a      	ldrh	r2, [r3, #10]
 8007e60:	887b      	ldrh	r3, [r7, #2]
 8007e62:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e66:	fb01 f202 	mul.w	r2, r1, r2
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	887b      	ldrh	r3, [r7, #2]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	68c9      	ldr	r1, [r1, #12]
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	895b      	ldrh	r3, [r3, #10]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f008 ffe2 	bl	8010e6c <malloc>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	731a      	strb	r2, [r3, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	891a      	ldrh	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	895b      	ldrh	r3, [r3, #10]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ffe5 	bl	8007ed0 <ring_buffer_full>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	88db      	ldrh	r3, [r3, #6]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	88db      	ldrh	r3, [r3, #6]
 8007f20:	3301      	adds	r3, #1
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	8952      	ldrh	r2, [r2, #10]
 8007f26:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f2a:	fb01 f202 	mul.w	r2, r1, r2
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	8952      	ldrh	r2, [r2, #10]
 8007f40:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f44:	fb01 f202 	mul.w	r2, r1, r2
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8007f50:	e01b      	b.n	8007f8a <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	891b      	ldrh	r3, [r3, #8]
 8007f66:	3301      	adds	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	3301      	adds	r3, #1
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	8952      	ldrh	r2, [r2, #10]
 8007f78:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f7c:	fb01 f202 	mul.w	r2, r1, r2
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	80da      	strh	r2, [r3, #6]
		return 1;
 8007f88:	2301      	movs	r3, #1
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	889a      	ldrh	r2, [r3, #4]
 8007fa2:	887b      	ldrh	r3, [r7, #2]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	895a      	ldrh	r2, [r3, #10]
 8007fac:	887b      	ldrh	r3, [r7, #2]
 8007fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fb2:	fb01 f202 	mul.w	r2, r1, r2
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	887b      	ldrh	r3, [r7, #2]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	681b      	ldr	r3, [r3, #0]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
	...

08007fd4 <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	71bb      	strb	r3, [r7, #6]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8007fe6:	79bb      	ldrb	r3, [r7, #6]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d104      	bne.n	8007ff6 <zellerCongruence+0x22>
	        month = 13;
 8007fec:	230d      	movs	r3, #13
 8007fee:	71bb      	strb	r3, [r7, #6]
	        year--;
 8007ff0:	88bb      	ldrh	r3, [r7, #4]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8007ff6:	79bb      	ldrb	r3, [r7, #6]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d104      	bne.n	8008006 <zellerCongruence+0x32>
	        month = 14;
 8007ffc:	230e      	movs	r3, #14
 8007ffe:	71bb      	strb	r3, [r7, #6]
	        year--;
 8008000:	88bb      	ldrh	r3, [r7, #4]
 8008002:	3b01      	subs	r3, #1
 8008004:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800800a:	79bb      	ldrb	r3, [r7, #6]
 800800c:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800800e:	88bb      	ldrh	r3, [r7, #4]
 8008010:	4a29      	ldr	r2, [pc, #164]	; (80080b8 <zellerCongruence+0xe4>)
 8008012:	fba2 1203 	umull	r1, r2, r2, r3
 8008016:	0952      	lsrs	r2, r2, #5
 8008018:	2164      	movs	r1, #100	; 0x64
 800801a:	fb01 f202 	mul.w	r2, r1, r2
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	b29b      	uxth	r3, r3
 8008022:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8008024:	88bb      	ldrh	r3, [r7, #4]
 8008026:	4a24      	ldr	r2, [pc, #144]	; (80080b8 <zellerCongruence+0xe4>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	b29b      	uxth	r3, r3
 8008030:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008032:	7bf9      	ldrb	r1, [r7, #15]
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	4613      	mov	r3, r2
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <zellerCongruence+0xe8>)
 8008044:	fb82 0203 	smull	r0, r2, r2, r3
 8008048:	1052      	asrs	r2, r2, #1
 800804a:	17db      	asrs	r3, r3, #31
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	18ca      	adds	r2, r1, r3
 8008050:	7b7b      	ldrb	r3, [r7, #13]
 8008052:	4413      	add	r3, r2
 8008054:	7b7a      	ldrb	r2, [r7, #13]
 8008056:	0892      	lsrs	r2, r2, #2
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 800805c:	7b3a      	ldrb	r2, [r7, #12]
 800805e:	0892      	lsrs	r2, r2, #2
 8008060:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008062:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8008064:	7b3a      	ldrb	r2, [r7, #12]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800806c:	440b      	add	r3, r1
 800806e:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <zellerCongruence+0xec>)
 8008074:	fb83 1302 	smull	r1, r3, r3, r2
 8008078:	4413      	add	r3, r2
 800807a:	1099      	asrs	r1, r3, #2
 800807c:	17d3      	asrs	r3, r2, #31
 800807e:	1ac9      	subs	r1, r1, r3
 8008080:	460b      	mov	r3, r1
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	1a5b      	subs	r3, r3, r1
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	1d5a      	adds	r2, r3, #5
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <zellerCongruence+0xec>)
 8008090:	fb83 1302 	smull	r1, r3, r3, r2
 8008094:	4413      	add	r3, r2
 8008096:	1099      	asrs	r1, r3, #2
 8008098:	17d3      	asrs	r3, r2, #31
 800809a:	1ac9      	subs	r1, r1, r3
 800809c:	460b      	mov	r3, r1
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a5b      	subs	r3, r3, r1
 80080a2:	1ad1      	subs	r1, r2, r3
 80080a4:	b2cb      	uxtb	r3, r1
 80080a6:	3301      	adds	r3, #1
 80080a8:	b2db      	uxtb	r3, r3
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	51eb851f 	.word	0x51eb851f
 80080bc:	66666667 	.word	0x66666667
 80080c0:	92492493 	.word	0x92492493

080080c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80080c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80080c8:	480d      	ldr	r0, [pc, #52]	; (8008100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80080ca:	490e      	ldr	r1, [pc, #56]	; (8008104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80080cc:	4a0e      	ldr	r2, [pc, #56]	; (8008108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80080ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080d0:	e002      	b.n	80080d8 <LoopCopyDataInit>

080080d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080d6:	3304      	adds	r3, #4

080080d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080dc:	d3f9      	bcc.n	80080d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080de:	4a0b      	ldr	r2, [pc, #44]	; (800810c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80080e0:	4c0b      	ldr	r4, [pc, #44]	; (8008110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80080e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080e4:	e001      	b.n	80080ea <LoopFillZerobss>

080080e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080e8:	3204      	adds	r2, #4

080080ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080ec:	d3fb      	bcc.n	80080e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80080ee:	f7fc f897 	bl	8004220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080f2:	f008 fe97 	bl	8010e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080f6:	f7fb fb9b 	bl	8003830 <main>
  bx  lr    
 80080fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80080fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008104:	20000500 	.word	0x20000500
  ldr r2, =_sidata
 8008108:	08049228 	.word	0x08049228
  ldr r2, =_sbss
 800810c:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 8008110:	20005d8c 	.word	0x20005d8c

08008114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008114:	e7fe      	b.n	8008114 <ADC_IRQHandler>
	...

08008118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <HAL_Init+0x40>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <HAL_Init+0x40>)
 8008122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_Init+0x40>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <HAL_Init+0x40>)
 800812e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_Init+0x40>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a07      	ldr	r2, [pc, #28]	; (8008158 <HAL_Init+0x40>)
 800813a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008140:	2003      	movs	r0, #3
 8008142:	f000 f94f 	bl	80083e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008146:	2000      	movs	r0, #0
 8008148:	f000 f808 	bl	800815c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800814c:	f7fb fe7a 	bl	8003e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40023c00 	.word	0x40023c00

0800815c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008164:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <HAL_InitTick+0x54>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <HAL_InitTick+0x58>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	4619      	mov	r1, r3
 800816e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008172:	fbb3 f3f1 	udiv	r3, r3, r1
 8008176:	fbb2 f3f3 	udiv	r3, r2, r3
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f967 	bl	800844e <HAL_SYSTICK_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e00e      	b.n	80081a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b0f      	cmp	r3, #15
 800818e:	d80a      	bhi.n	80081a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008190:	2200      	movs	r2, #0
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	f000 f92f 	bl	80083fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800819c:	4a06      	ldr	r2, [pc, #24]	; (80081b8 <HAL_InitTick+0x5c>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000188 	.word	0x20000188
 80081b4:	200002c4 	.word	0x200002c4
 80081b8:	200002c0 	.word	0x200002c0

080081bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <HAL_IncTick+0x20>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <HAL_IncTick+0x24>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4413      	add	r3, r2
 80081cc:	4a04      	ldr	r2, [pc, #16]	; (80081e0 <HAL_IncTick+0x24>)
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	200002c4 	.word	0x200002c4
 80081e0:	20005d14 	.word	0x20005d14

080081e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return uwTick;
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <HAL_GetTick+0x14>)
 80081ea:	681b      	ldr	r3, [r3, #0]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20005d14 	.word	0x20005d14

080081fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008204:	f7ff ffee 	bl	80081e4 <HAL_GetTick>
 8008208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d005      	beq.n	8008222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008216:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_Delay+0x44>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008222:	bf00      	nop
 8008224:	f7ff ffde 	bl	80081e4 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	429a      	cmp	r2, r3
 8008232:	d8f7      	bhi.n	8008224 <HAL_Delay+0x28>
  {
  }
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200002c4 	.word	0x200002c4

08008244 <__NVIC_SetPriorityGrouping>:
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <__NVIC_SetPriorityGrouping+0x44>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008260:	4013      	ands	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800826c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008276:	4a04      	ldr	r2, [pc, #16]	; (8008288 <__NVIC_SetPriorityGrouping+0x44>)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	60d3      	str	r3, [r2, #12]
}
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	e000ed00 	.word	0xe000ed00

0800828c <__NVIC_GetPriorityGrouping>:
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f003 0307 	and.w	r3, r3, #7
}
 800829a:	4618      	mov	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <__NVIC_EnableIRQ>:
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	db0b      	blt.n	80082d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	f003 021f 	and.w	r2, r3, #31
 80082c0:	4907      	ldr	r1, [pc, #28]	; (80082e0 <__NVIC_EnableIRQ+0x38>)
 80082c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	2001      	movs	r0, #1
 80082ca:	fa00 f202 	lsl.w	r2, r0, r2
 80082ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	e000e100 	.word	0xe000e100

080082e4 <__NVIC_SetPriority>:
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	db0a      	blt.n	800830e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	490c      	ldr	r1, [pc, #48]	; (8008330 <__NVIC_SetPriority+0x4c>)
 80082fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008302:	0112      	lsls	r2, r2, #4
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	440b      	add	r3, r1
 8008308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800830c:	e00a      	b.n	8008324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	4908      	ldr	r1, [pc, #32]	; (8008334 <__NVIC_SetPriority+0x50>)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	3b04      	subs	r3, #4
 800831c:	0112      	lsls	r2, r2, #4
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	440b      	add	r3, r1
 8008322:	761a      	strb	r2, [r3, #24]
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	e000e100 	.word	0xe000e100
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <NVIC_EncodePriority>:
{
 8008338:	b480      	push	{r7}
 800833a:	b089      	sub	sp, #36	; 0x24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f1c3 0307 	rsb	r3, r3, #7
 8008352:	2b04      	cmp	r3, #4
 8008354:	bf28      	it	cs
 8008356:	2304      	movcs	r3, #4
 8008358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	3304      	adds	r3, #4
 800835e:	2b06      	cmp	r3, #6
 8008360:	d902      	bls.n	8008368 <NVIC_EncodePriority+0x30>
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3b03      	subs	r3, #3
 8008366:	e000      	b.n	800836a <NVIC_EncodePriority+0x32>
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800836c:	f04f 32ff 	mov.w	r2, #4294967295
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43da      	mvns	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	401a      	ands	r2, r3
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008380:	f04f 31ff 	mov.w	r1, #4294967295
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	43d9      	mvns	r1, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008390:	4313      	orrs	r3, r2
}
 8008392:	4618      	mov	r0, r3
 8008394:	3724      	adds	r7, #36	; 0x24
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <SysTick_Config>:
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083b0:	d301      	bcc.n	80083b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80083b2:	2301      	movs	r3, #1
 80083b4:	e00f      	b.n	80083d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083b6:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <SysTick_Config+0x40>)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083be:	210f      	movs	r1, #15
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	f7ff ff8e 	bl	80082e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <SysTick_Config+0x40>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <SysTick_Config+0x40>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	e000e010 	.word	0xe000e010

080083e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ff29 	bl	8008244 <__NVIC_SetPriorityGrouping>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	4603      	mov	r3, r0
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800840c:	f7ff ff3e 	bl	800828c <__NVIC_GetPriorityGrouping>
 8008410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f7ff ff8e 	bl	8008338 <NVIC_EncodePriority>
 800841c:	4602      	mov	r2, r0
 800841e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff ff5d 	bl	80082e4 <__NVIC_SetPriority>
}
 800842a:	bf00      	nop
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800843c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff ff31 	bl	80082a8 <__NVIC_EnableIRQ>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ffa2 	bl	80083a0 <SysTick_Config>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_DMA_Start_IT+0x26>
 8008488:	2302      	movs	r3, #2
 800848a:	e040      	b.n	800850e <HAL_DMA_Start_IT+0xa8>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d12f      	bne.n	8008500 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f82e 	bl	8008516 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084be:	223f      	movs	r2, #63	; 0x3f
 80084c0:	409a      	lsls	r2, r3
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0216 	orr.w	r2, r2, #22
 80084d4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0201 	orr.w	r2, r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e005      	b.n	800850c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008508:	2302      	movs	r3, #2
 800850a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008532:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d108      	bne.n	8008556 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008554:	e007      	b.n	8008566 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	60da      	str	r2, [r3, #12]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
	...

08008574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008574:	b480      	push	{r7}
 8008576:	b089      	sub	sp, #36	; 0x24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800858a:	2300      	movs	r3, #0
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	e177      	b.n	8008880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008590:	2201      	movs	r2, #1
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4013      	ands	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	f040 8166 	bne.w	800887a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d005      	beq.n	80085c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d130      	bne.n	8008628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	2203      	movs	r2, #3
 80085d2:	fa02 f303 	lsl.w	r3, r2, r3
 80085d6:	43db      	mvns	r3, r3
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	4013      	ands	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085fc:	2201      	movs	r2, #1
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	43db      	mvns	r3, r3
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	4013      	ands	r3, r2
 800860a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	f003 0201 	and.w	r2, r3, #1
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	4313      	orrs	r3, r2
 8008620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	2b03      	cmp	r3, #3
 8008632:	d017      	beq.n	8008664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	2203      	movs	r2, #3
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	43db      	mvns	r3, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	4013      	ands	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	4313      	orrs	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d123      	bne.n	80086b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	08da      	lsrs	r2, r3, #3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3208      	adds	r2, #8
 8008678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	220f      	movs	r2, #15
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	43db      	mvns	r3, r3
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4013      	ands	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	08da      	lsrs	r2, r3, #3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3208      	adds	r2, #8
 80086b2:	69b9      	ldr	r1, [r7, #24]
 80086b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	2203      	movs	r2, #3
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	43db      	mvns	r3, r3
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4013      	ands	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f003 0203 	and.w	r2, r3, #3
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80c0 	beq.w	800887a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	4b66      	ldr	r3, [pc, #408]	; (8008898 <HAL_GPIO_Init+0x324>)
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	4a65      	ldr	r2, [pc, #404]	; (8008898 <HAL_GPIO_Init+0x324>)
 8008704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008708:	6453      	str	r3, [r2, #68]	; 0x44
 800870a:	4b63      	ldr	r3, [pc, #396]	; (8008898 <HAL_GPIO_Init+0x324>)
 800870c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008716:	4a61      	ldr	r2, [pc, #388]	; (800889c <HAL_GPIO_Init+0x328>)
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	089b      	lsrs	r3, r3, #2
 800871c:	3302      	adds	r3, #2
 800871e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	220f      	movs	r2, #15
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a58      	ldr	r2, [pc, #352]	; (80088a0 <HAL_GPIO_Init+0x32c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d037      	beq.n	80087b2 <HAL_GPIO_Init+0x23e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a57      	ldr	r2, [pc, #348]	; (80088a4 <HAL_GPIO_Init+0x330>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d031      	beq.n	80087ae <HAL_GPIO_Init+0x23a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a56      	ldr	r2, [pc, #344]	; (80088a8 <HAL_GPIO_Init+0x334>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d02b      	beq.n	80087aa <HAL_GPIO_Init+0x236>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a55      	ldr	r2, [pc, #340]	; (80088ac <HAL_GPIO_Init+0x338>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d025      	beq.n	80087a6 <HAL_GPIO_Init+0x232>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a54      	ldr	r2, [pc, #336]	; (80088b0 <HAL_GPIO_Init+0x33c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01f      	beq.n	80087a2 <HAL_GPIO_Init+0x22e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a53      	ldr	r2, [pc, #332]	; (80088b4 <HAL_GPIO_Init+0x340>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d019      	beq.n	800879e <HAL_GPIO_Init+0x22a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a52      	ldr	r2, [pc, #328]	; (80088b8 <HAL_GPIO_Init+0x344>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_GPIO_Init+0x226>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a51      	ldr	r2, [pc, #324]	; (80088bc <HAL_GPIO_Init+0x348>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00d      	beq.n	8008796 <HAL_GPIO_Init+0x222>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a50      	ldr	r2, [pc, #320]	; (80088c0 <HAL_GPIO_Init+0x34c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <HAL_GPIO_Init+0x21e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a4f      	ldr	r2, [pc, #316]	; (80088c4 <HAL_GPIO_Init+0x350>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_GPIO_Init+0x21a>
 800878a:	2309      	movs	r3, #9
 800878c:	e012      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 800878e:	230a      	movs	r3, #10
 8008790:	e010      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 8008792:	2308      	movs	r3, #8
 8008794:	e00e      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 8008796:	2307      	movs	r3, #7
 8008798:	e00c      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 800879a:	2306      	movs	r3, #6
 800879c:	e00a      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 800879e:	2305      	movs	r3, #5
 80087a0:	e008      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 80087a2:	2304      	movs	r3, #4
 80087a4:	e006      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 80087a6:	2303      	movs	r3, #3
 80087a8:	e004      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e002      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <HAL_GPIO_Init+0x240>
 80087b2:	2300      	movs	r3, #0
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	f002 0203 	and.w	r2, r2, #3
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	4093      	lsls	r3, r2
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087c4:	4935      	ldr	r1, [pc, #212]	; (800889c <HAL_GPIO_Init+0x328>)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	089b      	lsrs	r3, r3, #2
 80087ca:	3302      	adds	r3, #2
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087d2:	4b3d      	ldr	r3, [pc, #244]	; (80088c8 <HAL_GPIO_Init+0x354>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	43db      	mvns	r3, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4013      	ands	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087f6:	4a34      	ldr	r2, [pc, #208]	; (80088c8 <HAL_GPIO_Init+0x354>)
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80087fc:	4b32      	ldr	r3, [pc, #200]	; (80088c8 <HAL_GPIO_Init+0x354>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	43db      	mvns	r3, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4013      	ands	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008820:	4a29      	ldr	r2, [pc, #164]	; (80088c8 <HAL_GPIO_Init+0x354>)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008826:	4b28      	ldr	r3, [pc, #160]	; (80088c8 <HAL_GPIO_Init+0x354>)
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	43db      	mvns	r3, r3
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	4013      	ands	r3, r2
 8008834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800884a:	4a1f      	ldr	r2, [pc, #124]	; (80088c8 <HAL_GPIO_Init+0x354>)
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_GPIO_Init+0x354>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	43db      	mvns	r3, r3
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	4013      	ands	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008874:	4a14      	ldr	r2, [pc, #80]	; (80088c8 <HAL_GPIO_Init+0x354>)
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	3301      	adds	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2b0f      	cmp	r3, #15
 8008884:	f67f ae84 	bls.w	8008590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	3724      	adds	r7, #36	; 0x24
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40023800 	.word	0x40023800
 800889c:	40013800 	.word	0x40013800
 80088a0:	40020000 	.word	0x40020000
 80088a4:	40020400 	.word	0x40020400
 80088a8:	40020800 	.word	0x40020800
 80088ac:	40020c00 	.word	0x40020c00
 80088b0:	40021000 	.word	0x40021000
 80088b4:	40021400 	.word	0x40021400
 80088b8:	40021800 	.word	0x40021800
 80088bc:	40021c00 	.word	0x40021c00
 80088c0:	40022000 	.word	0x40022000
 80088c4:	40022400 	.word	0x40022400
 80088c8:	40013c00 	.word	0x40013c00

080088cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	887b      	ldrh	r3, [r7, #2]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e001      	b.n	80088ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	807b      	strh	r3, [r7, #2]
 8008908:	4613      	mov	r3, r2
 800890a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800890c:	787b      	ldrb	r3, [r7, #1]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008912:	887a      	ldrh	r2, [r7, #2]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008918:	e003      	b.n	8008922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800891a:	887b      	ldrh	r3, [r7, #2]
 800891c:	041a      	lsls	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	619a      	str	r2, [r3, #24]
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4013      	ands	r3, r2
 8008946:	041a      	lsls	r2, r3, #16
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	43d9      	mvns	r1, r3
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	400b      	ands	r3, r1
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	619a      	str	r2, [r3, #24]
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800896e:	4b08      	ldr	r3, [pc, #32]	; (8008990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008970:	695a      	ldr	r2, [r3, #20]
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	4013      	ands	r3, r2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800897a:	4a05      	ldr	r2, [pc, #20]	; (8008990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800897c:	88fb      	ldrh	r3, [r7, #6]
 800897e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 f806 	bl	8008994 <HAL_GPIO_EXTI_Callback>
  }
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40013c00 	.word	0x40013c00

08008994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e12b      	b.n	8008c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f9 fee0 	bl	8002798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a10:	f001 fc76 	bl	800a300 <HAL_RCC_GetPCLK1Freq>
 8008a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4a81      	ldr	r2, [pc, #516]	; (8008c20 <HAL_I2C_Init+0x274>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d807      	bhi.n	8008a30 <HAL_I2C_Init+0x84>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a80      	ldr	r2, [pc, #512]	; (8008c24 <HAL_I2C_Init+0x278>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bf94      	ite	ls
 8008a28:	2301      	movls	r3, #1
 8008a2a:	2300      	movhi	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	e006      	b.n	8008a3e <HAL_I2C_Init+0x92>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a7d      	ldr	r2, [pc, #500]	; (8008c28 <HAL_I2C_Init+0x27c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bf94      	ite	ls
 8008a38:	2301      	movls	r3, #1
 8008a3a:	2300      	movhi	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0e7      	b.n	8008c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a78      	ldr	r2, [pc, #480]	; (8008c2c <HAL_I2C_Init+0x280>)
 8008a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4e:	0c9b      	lsrs	r3, r3, #18
 8008a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4a6a      	ldr	r2, [pc, #424]	; (8008c20 <HAL_I2C_Init+0x274>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d802      	bhi.n	8008a80 <HAL_I2C_Init+0xd4>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	e009      	b.n	8008a94 <HAL_I2C_Init+0xe8>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	4a69      	ldr	r2, [pc, #420]	; (8008c30 <HAL_I2C_Init+0x284>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	099b      	lsrs	r3, r3, #6
 8008a92:	3301      	adds	r3, #1
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	495c      	ldr	r1, [pc, #368]	; (8008c20 <HAL_I2C_Init+0x274>)
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	d819      	bhi.n	8008ae8 <HAL_I2C_Init+0x13c>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1e59      	subs	r1, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ac2:	1c59      	adds	r1, r3, #1
 8008ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ac8:	400b      	ands	r3, r1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <HAL_I2C_Init+0x138>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1e59      	subs	r1, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008adc:	3301      	adds	r3, #1
 8008ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ae2:	e051      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	e04f      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d111      	bne.n	8008b14 <HAL_I2C_Init+0x168>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1e58      	subs	r0, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	440b      	add	r3, r1
 8008afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b02:	3301      	adds	r3, #1
 8008b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2301      	moveq	r3, #1
 8008b0e:	2300      	movne	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e012      	b.n	8008b3a <HAL_I2C_Init+0x18e>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	1e58      	subs	r0, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6859      	ldr	r1, [r3, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	0099      	lsls	r1, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_I2C_Init+0x196>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e022      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10e      	bne.n	8008b68 <HAL_I2C_Init+0x1bc>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1e58      	subs	r0, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	440b      	add	r3, r1
 8008b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b66:	e00f      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1e58      	subs	r0, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6859      	ldr	r1, [r3, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	0099      	lsls	r1, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	6809      	ldr	r1, [r1, #0]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6911      	ldr	r1, [r2, #16]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	68d2      	ldr	r2, [r2, #12]
 8008bc2:	4311      	orrs	r1, r2
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0201 	orr.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	000186a0 	.word	0x000186a0
 8008c24:	001e847f 	.word	0x001e847f
 8008c28:	003d08ff 	.word	0x003d08ff
 8008c2c:	431bde83 	.word	0x431bde83
 8008c30:	10624dd3 	.word	0x10624dd3

08008c34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	817b      	strh	r3, [r7, #10]
 8008c46:	460b      	mov	r3, r1
 8008c48:	813b      	strh	r3, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c4e:	f7ff fac9 	bl	80081e4 <HAL_GetTick>
 8008c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	f040 80d9 	bne.w	8008e14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2319      	movs	r3, #25
 8008c68:	2201      	movs	r2, #1
 8008c6a:	496d      	ldr	r1, [pc, #436]	; (8008e20 <HAL_I2C_Mem_Write+0x1ec>)
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fc7f 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e0cc      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_I2C_Mem_Write+0x56>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e0c5      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d007      	beq.n	8008cb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2221      	movs	r2, #33	; 0x21
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4a4d      	ldr	r2, [pc, #308]	; (8008e24 <HAL_I2C_Mem_Write+0x1f0>)
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cf2:	88f8      	ldrh	r0, [r7, #6]
 8008cf4:	893a      	ldrh	r2, [r7, #8]
 8008cf6:	8979      	ldrh	r1, [r7, #10]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 fab6 	bl	8009274 <I2C_RequestMemoryWrite>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d052      	beq.n	8008db4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e081      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fd00 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d107      	bne.n	8008d3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e06b      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d11b      	bne.n	8008db4 <HAL_I2C_Mem_Write+0x180>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d017      	beq.n	8008db4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1aa      	bne.n	8008d12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fcec 	bl	800979e <I2C_WaitOnBTFFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00d      	beq.n	8008de8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d107      	bne.n	8008de4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e016      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e000      	b.n	8008e16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008e14:	2302      	movs	r3, #2
  }
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	00100002 	.word	0x00100002
 8008e24:	ffff0000 	.word	0xffff0000

08008e28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	4608      	mov	r0, r1
 8008e32:	4611      	mov	r1, r2
 8008e34:	461a      	mov	r2, r3
 8008e36:	4603      	mov	r3, r0
 8008e38:	817b      	strh	r3, [r7, #10]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	813b      	strh	r3, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e42:	f7ff f9cf 	bl	80081e4 <HAL_GetTick>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	f040 8208 	bne.w	8009266 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	2319      	movs	r3, #25
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	497b      	ldr	r1, [pc, #492]	; (800904c <HAL_I2C_Mem_Read+0x224>)
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fb85 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e1fb      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <HAL_I2C_Mem_Read+0x56>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e1f4      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d007      	beq.n	8008ea4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0201 	orr.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2222      	movs	r2, #34	; 0x22
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a5b      	ldr	r2, [pc, #364]	; (8009050 <HAL_I2C_Mem_Read+0x228>)
 8008ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ee6:	88f8      	ldrh	r0, [r7, #6]
 8008ee8:	893a      	ldrh	r2, [r7, #8]
 8008eea:	8979      	ldrh	r1, [r7, #10]
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fa52 	bl	80093a0 <I2C_RequestMemoryRead>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e1b0      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d113      	bne.n	8008f36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f0e:	2300      	movs	r3, #0
 8008f10:	623b      	str	r3, [r7, #32]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	623b      	str	r3, [r7, #32]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	623b      	str	r3, [r7, #32]
 8008f22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	e184      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d11b      	bne.n	8008f76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	e164      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d11b      	bne.n	8008fb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	e144      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008fcc:	e138      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	f200 80f1 	bhi.w	80091ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d123      	bne.n	8009028 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fc1b 	bl	8009820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e139      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	b2d2      	uxtb	r2, r2
 8009000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901c:	b29b      	uxth	r3, r3
 800901e:	3b01      	subs	r3, #1
 8009020:	b29a      	uxth	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009026:	e10b      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902c:	2b02      	cmp	r3, #2
 800902e:	d14e      	bne.n	80090ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	2200      	movs	r2, #0
 8009038:	4906      	ldr	r1, [pc, #24]	; (8009054 <HAL_I2C_Mem_Read+0x22c>)
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fa98 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e10e      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
 800904a:	bf00      	nop
 800904c:	00100002 	.word	0x00100002
 8009050:	ffff0000 	.word	0xffff0000
 8009054:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009084:	3b01      	subs	r3, #1
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009090:	b29b      	uxth	r3, r3
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090cc:	e0b8      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	2200      	movs	r2, #0
 80090d6:	4966      	ldr	r1, [pc, #408]	; (8009270 <HAL_I2C_Mem_Read+0x448>)
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fa49 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0bf      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	2200      	movs	r2, #0
 8009132:	494f      	ldr	r1, [pc, #316]	; (8009270 <HAL_I2C_Mem_Read+0x448>)
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fa1b 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e091      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091b8:	e042      	b.n	8009240 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fb2e 	bl	8009820 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e04c      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b04      	cmp	r3, #4
 800920c:	d118      	bne.n	8009240 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f aec2 	bne.w	8008fce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	e000      	b.n	8009268 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009266:	2302      	movs	r3, #2
  }
}
 8009268:	4618      	mov	r0, r3
 800926a:	3728      	adds	r7, #40	; 0x28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	00010004 	.word	0x00010004

08009274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	461a      	mov	r2, r3
 8009282:	4603      	mov	r3, r0
 8009284:	817b      	strh	r3, [r7, #10]
 8009286:	460b      	mov	r3, r1
 8009288:	813b      	strh	r3, [r7, #8]
 800928a:	4613      	mov	r3, r2
 800928c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800929c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 f960 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c4:	d103      	bne.n	80092ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e05f      	b.n	8009392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092d2:	897b      	ldrh	r3, [r7, #10]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80092e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	6a3a      	ldr	r2, [r7, #32]
 80092e6:	492d      	ldr	r1, [pc, #180]	; (800939c <I2C_RequestMemoryWrite+0x128>)
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f998 	bl	800961e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e04c      	b.n	8009392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092f8:	2300      	movs	r3, #0
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	617b      	str	r3, [r7, #20]
 800930c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800930e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009310:	6a39      	ldr	r1, [r7, #32]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 fa02 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	2b04      	cmp	r3, #4
 8009324:	d107      	bne.n	8009336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e02b      	b.n	8009392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800933a:	88fb      	ldrh	r3, [r7, #6]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d105      	bne.n	800934c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009340:	893b      	ldrh	r3, [r7, #8]
 8009342:	b2da      	uxtb	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	e021      	b.n	8009390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	b29b      	uxth	r3, r3
 8009352:	b2da      	uxtb	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935c:	6a39      	ldr	r1, [r7, #32]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 f9dc 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	2b04      	cmp	r3, #4
 8009370:	d107      	bne.n	8009382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e005      	b.n	8009392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009386:	893b      	ldrh	r3, [r7, #8]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	00010002 	.word	0x00010002

080093a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	4608      	mov	r0, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	461a      	mov	r2, r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	817b      	strh	r3, [r7, #10]
 80093b2:	460b      	mov	r3, r1
 80093b4:	813b      	strh	r3, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f8c2 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009400:	d103      	bne.n	800940a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e0aa      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800940e:	897b      	ldrh	r3, [r7, #10]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800941c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	6a3a      	ldr	r2, [r7, #32]
 8009422:	4952      	ldr	r1, [pc, #328]	; (800956c <I2C_RequestMemoryRead+0x1cc>)
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f8fa 	bl	800961e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e097      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800944a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944c:	6a39      	ldr	r1, [r7, #32]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f964 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b04      	cmp	r3, #4
 8009460:	d107      	bne.n	8009472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e076      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d105      	bne.n	8009488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800947c:	893b      	ldrh	r3, [r7, #8]
 800947e:	b2da      	uxtb	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	611a      	str	r2, [r3, #16]
 8009486:	e021      	b.n	80094cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009488:	893b      	ldrh	r3, [r7, #8]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009498:	6a39      	ldr	r1, [r7, #32]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f93e 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d107      	bne.n	80094be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e050      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094c2:	893b      	ldrh	r3, [r7, #8]
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ce:	6a39      	ldr	r1, [r7, #32]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f923 	bl	800971c <I2C_WaitOnTXEFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00d      	beq.n	80094f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d107      	bne.n	80094f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e035      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2200      	movs	r2, #0
 8009510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f82b 	bl	8009570 <I2C_WaitOnFlagUntilTimeout>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00d      	beq.n	800953c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952e:	d103      	bne.n	8009538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e013      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800953c:	897b      	ldrh	r3, [r7, #10]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	6a3a      	ldr	r2, [r7, #32]
 8009550:	4906      	ldr	r1, [pc, #24]	; (800956c <I2C_RequestMemoryRead+0x1cc>)
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f863 	bl	800961e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	00010002 	.word	0x00010002

08009570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	4613      	mov	r3, r2
 800957e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009580:	e025      	b.n	80095ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d021      	beq.n	80095ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800958a:	f7fe fe2b 	bl	80081e4 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d302      	bcc.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d116      	bne.n	80095ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e023      	b.n	8009616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d10d      	bne.n	80095f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	43da      	mvns	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bf0c      	ite	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	2300      	movne	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	e00c      	b.n	800960e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	43da      	mvns	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	4013      	ands	r3, r2
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	bf0c      	ite	eq
 8009606:	2301      	moveq	r3, #1
 8009608:	2300      	movne	r3, #0
 800960a:	b2db      	uxtb	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	429a      	cmp	r2, r3
 8009612:	d0b6      	beq.n	8009582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800962c:	e051      	b.n	80096d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800963c:	d123      	bne.n	8009686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800964c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f043 0204 	orr.w	r2, r3, #4
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e046      	b.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d021      	beq.n	80096d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968e:	f7fe fda9 	bl	80081e4 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d116      	bne.n	80096d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f043 0220 	orr.w	r2, r3, #32
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e020      	b.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	0c1b      	lsrs	r3, r3, #16
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d10c      	bne.n	80096f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	43da      	mvns	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4013      	ands	r3, r2
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bf14      	ite	ne
 80096ee:	2301      	movne	r3, #1
 80096f0:	2300      	moveq	r3, #0
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	e00b      	b.n	800970e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	43da      	mvns	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4013      	ands	r3, r2
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf14      	ite	ne
 8009708:	2301      	movne	r3, #1
 800970a:	2300      	moveq	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d18d      	bne.n	800962e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009728:	e02d      	b.n	8009786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 f8ce 	bl	80098cc <I2C_IsAcknowledgeFailed>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e02d      	b.n	8009796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d021      	beq.n	8009786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009742:	f7fe fd4f 	bl	80081e4 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	429a      	cmp	r2, r3
 8009750:	d302      	bcc.n	8009758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d116      	bne.n	8009786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	f043 0220 	orr.w	r2, r3, #32
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e007      	b.n	8009796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009790:	2b80      	cmp	r3, #128	; 0x80
 8009792:	d1ca      	bne.n	800972a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097aa:	e02d      	b.n	8009808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f88d 	bl	80098cc <I2C_IsAcknowledgeFailed>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e02d      	b.n	8009818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d021      	beq.n	8009808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c4:	f7fe fd0e 	bl	80081e4 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d302      	bcc.n	80097da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d116      	bne.n	8009808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	f043 0220 	orr.w	r2, r3, #32
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e007      	b.n	8009818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b04      	cmp	r3, #4
 8009814:	d1ca      	bne.n	80097ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800982c:	e042      	b.n	80098b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b10      	cmp	r3, #16
 800983a:	d119      	bne.n	8009870 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f06f 0210 	mvn.w	r2, #16
 8009844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e029      	b.n	80098c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009870:	f7fe fcb8 	bl	80081e4 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	429a      	cmp	r2, r3
 800987e:	d302      	bcc.n	8009886 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d116      	bne.n	80098b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	f043 0220 	orr.w	r2, r3, #32
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e007      	b.n	80098c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098be:	2b40      	cmp	r3, #64	; 0x40
 80098c0:	d1b5      	bne.n	800982e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e2:	d11b      	bne.n	800991c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	f043 0204 	orr.w	r2, r3, #4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e000      	b.n	800991e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b20      	cmp	r3, #32
 800993e:	d129      	bne.n	8009994 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2224      	movs	r2, #36	; 0x24
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0201 	bic.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0210 	bic.w	r2, r2, #16
 8009966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	430a      	orrs	r2, r1
 8009976:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	e000      	b.n	8009996 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009994:	2302      	movs	r3, #2
  }
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d12a      	bne.n	8009a12 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2224      	movs	r2, #36	; 0x24
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0201 	bic.w	r2, r2, #1
 80099d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80099dc:	89fb      	ldrh	r3, [r7, #14]
 80099de:	f023 030f 	bic.w	r3, r3, #15
 80099e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	89fa      	ldrh	r2, [r7, #14]
 80099f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0201 	orr.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e267      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d075      	beq.n	8009b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a3e:	4b88      	ldr	r3, [pc, #544]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 030c 	and.w	r3, r3, #12
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d00c      	beq.n	8009a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a4a:	4b85      	ldr	r3, [pc, #532]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d112      	bne.n	8009a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a56:	4b82      	ldr	r3, [pc, #520]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a62:	d10b      	bne.n	8009a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a64:	4b7e      	ldr	r3, [pc, #504]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d05b      	beq.n	8009b28 <HAL_RCC_OscConfig+0x108>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d157      	bne.n	8009b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e242      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a84:	d106      	bne.n	8009a94 <HAL_RCC_OscConfig+0x74>
 8009a86:	4b76      	ldr	r3, [pc, #472]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a75      	ldr	r2, [pc, #468]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	e01d      	b.n	8009ad0 <HAL_RCC_OscConfig+0xb0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a9c:	d10c      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x98>
 8009a9e:	4b70      	ldr	r3, [pc, #448]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a6f      	ldr	r2, [pc, #444]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	4b6d      	ldr	r3, [pc, #436]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a6c      	ldr	r2, [pc, #432]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	e00b      	b.n	8009ad0 <HAL_RCC_OscConfig+0xb0>
 8009ab8:	4b69      	ldr	r3, [pc, #420]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a68      	ldr	r2, [pc, #416]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b66      	ldr	r3, [pc, #408]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a65      	ldr	r2, [pc, #404]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d013      	beq.n	8009b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ad8:	f7fe fb84 	bl	80081e4 <HAL_GetTick>
 8009adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ade:	e008      	b.n	8009af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ae0:	f7fe fb80 	bl	80081e4 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b64      	cmp	r3, #100	; 0x64
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e207      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009af2:	4b5b      	ldr	r3, [pc, #364]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0f0      	beq.n	8009ae0 <HAL_RCC_OscConfig+0xc0>
 8009afe:	e014      	b.n	8009b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b00:	f7fe fb70 	bl	80081e4 <HAL_GetTick>
 8009b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b08:	f7fe fb6c 	bl	80081e4 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b64      	cmp	r3, #100	; 0x64
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e1f3      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b1a:	4b51      	ldr	r3, [pc, #324]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f0      	bne.n	8009b08 <HAL_RCC_OscConfig+0xe8>
 8009b26:	e000      	b.n	8009b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d063      	beq.n	8009bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b36:	4b4a      	ldr	r3, [pc, #296]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f003 030c 	and.w	r3, r3, #12
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b42:	4b47      	ldr	r3, [pc, #284]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b4a:	2b08      	cmp	r3, #8
 8009b4c:	d11c      	bne.n	8009b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b4e:	4b44      	ldr	r3, [pc, #272]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d116      	bne.n	8009b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b5a:	4b41      	ldr	r3, [pc, #260]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <HAL_RCC_OscConfig+0x152>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d001      	beq.n	8009b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e1c7      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b72:	4b3b      	ldr	r3, [pc, #236]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	4937      	ldr	r1, [pc, #220]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b86:	e03a      	b.n	8009bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d020      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b90:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <HAL_RCC_OscConfig+0x244>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b96:	f7fe fb25 	bl	80081e4 <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b9c:	e008      	b.n	8009bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b9e:	f7fe fb21 	bl	80081e4 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d901      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e1a8      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bb0:	4b2b      	ldr	r3, [pc, #172]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0f0      	beq.n	8009b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bbc:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	4925      	ldr	r1, [pc, #148]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	600b      	str	r3, [r1, #0]
 8009bd0:	e015      	b.n	8009bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bd2:	4b24      	ldr	r3, [pc, #144]	; (8009c64 <HAL_RCC_OscConfig+0x244>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd8:	f7fe fb04 	bl	80081e4 <HAL_GetTick>
 8009bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bde:	e008      	b.n	8009bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009be0:	f7fe fb00 	bl	80081e4 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d901      	bls.n	8009bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e187      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bf2:	4b1b      	ldr	r3, [pc, #108]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f0      	bne.n	8009be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0308 	and.w	r3, r3, #8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d036      	beq.n	8009c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d016      	beq.n	8009c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c12:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <HAL_RCC_OscConfig+0x248>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c18:	f7fe fae4 	bl	80081e4 <HAL_GetTick>
 8009c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c20:	f7fe fae0 	bl	80081e4 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e167      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c32:	4b0b      	ldr	r3, [pc, #44]	; (8009c60 <HAL_RCC_OscConfig+0x240>)
 8009c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0f0      	beq.n	8009c20 <HAL_RCC_OscConfig+0x200>
 8009c3e:	e01b      	b.n	8009c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c40:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <HAL_RCC_OscConfig+0x248>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c46:	f7fe facd 	bl	80081e4 <HAL_GetTick>
 8009c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c4c:	e00e      	b.n	8009c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c4e:	f7fe fac9 	bl	80081e4 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d907      	bls.n	8009c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e150      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
 8009c60:	40023800 	.word	0x40023800
 8009c64:	42470000 	.word	0x42470000
 8009c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c6c:	4b88      	ldr	r3, [pc, #544]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1ea      	bne.n	8009c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8097 	beq.w	8009db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c8a:	4b81      	ldr	r3, [pc, #516]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10f      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	4b7d      	ldr	r3, [pc, #500]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	4a7c      	ldr	r2, [pc, #496]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8009ca6:	4b7a      	ldr	r3, [pc, #488]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cae:	60bb      	str	r3, [r7, #8]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cb6:	4b77      	ldr	r3, [pc, #476]	; (8009e94 <HAL_RCC_OscConfig+0x474>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d118      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cc2:	4b74      	ldr	r3, [pc, #464]	; (8009e94 <HAL_RCC_OscConfig+0x474>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a73      	ldr	r2, [pc, #460]	; (8009e94 <HAL_RCC_OscConfig+0x474>)
 8009cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cce:	f7fe fa89 	bl	80081e4 <HAL_GetTick>
 8009cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cd4:	e008      	b.n	8009ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cd6:	f7fe fa85 	bl	80081e4 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d901      	bls.n	8009ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e10c      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ce8:	4b6a      	ldr	r3, [pc, #424]	; (8009e94 <HAL_RCC_OscConfig+0x474>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0f0      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d106      	bne.n	8009d0a <HAL_RCC_OscConfig+0x2ea>
 8009cfc:	4b64      	ldr	r3, [pc, #400]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	4a63      	ldr	r2, [pc, #396]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	6713      	str	r3, [r2, #112]	; 0x70
 8009d08:	e01c      	b.n	8009d44 <HAL_RCC_OscConfig+0x324>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d10c      	bne.n	8009d2c <HAL_RCC_OscConfig+0x30c>
 8009d12:	4b5f      	ldr	r3, [pc, #380]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	4a5e      	ldr	r2, [pc, #376]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d18:	f043 0304 	orr.w	r3, r3, #4
 8009d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1e:	4b5c      	ldr	r3, [pc, #368]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d22:	4a5b      	ldr	r2, [pc, #364]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	6713      	str	r3, [r2, #112]	; 0x70
 8009d2a:	e00b      	b.n	8009d44 <HAL_RCC_OscConfig+0x324>
 8009d2c:	4b58      	ldr	r3, [pc, #352]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	4a57      	ldr	r2, [pc, #348]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d32:	f023 0301 	bic.w	r3, r3, #1
 8009d36:	6713      	str	r3, [r2, #112]	; 0x70
 8009d38:	4b55      	ldr	r3, [pc, #340]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	4a54      	ldr	r2, [pc, #336]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d3e:	f023 0304 	bic.w	r3, r3, #4
 8009d42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d015      	beq.n	8009d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d4c:	f7fe fa4a 	bl	80081e4 <HAL_GetTick>
 8009d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d52:	e00a      	b.n	8009d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d54:	f7fe fa46 	bl	80081e4 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e0cb      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d6a:	4b49      	ldr	r3, [pc, #292]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0ee      	beq.n	8009d54 <HAL_RCC_OscConfig+0x334>
 8009d76:	e014      	b.n	8009da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d78:	f7fe fa34 	bl	80081e4 <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d7e:	e00a      	b.n	8009d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d80:	f7fe fa30 	bl	80081e4 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e0b5      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d96:	4b3e      	ldr	r3, [pc, #248]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1ee      	bne.n	8009d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d105      	bne.n	8009db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009da8:	4b39      	ldr	r3, [pc, #228]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	4a38      	ldr	r2, [pc, #224]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80a1 	beq.w	8009f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009dbe:	4b34      	ldr	r3, [pc, #208]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 030c 	and.w	r3, r3, #12
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d05c      	beq.n	8009e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d141      	bne.n	8009e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dd2:	4b31      	ldr	r3, [pc, #196]	; (8009e98 <HAL_RCC_OscConfig+0x478>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dd8:	f7fe fa04 	bl	80081e4 <HAL_GetTick>
 8009ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009de0:	f7fe fa00 	bl	80081e4 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e087      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009df2:	4b27      	ldr	r3, [pc, #156]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f0      	bne.n	8009de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69da      	ldr	r2, [r3, #28]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	019b      	lsls	r3, r3, #6
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	085b      	lsrs	r3, r3, #1
 8009e16:	3b01      	subs	r3, #1
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	061b      	lsls	r3, r3, #24
 8009e22:	491b      	ldr	r1, [pc, #108]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e28:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <HAL_RCC_OscConfig+0x478>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e2e:	f7fe f9d9 	bl	80081e4 <HAL_GetTick>
 8009e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e34:	e008      	b.n	8009e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e36:	f7fe f9d5 	bl	80081e4 <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e05c      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e48:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0f0      	beq.n	8009e36 <HAL_RCC_OscConfig+0x416>
 8009e54:	e054      	b.n	8009f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <HAL_RCC_OscConfig+0x478>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e5c:	f7fe f9c2 	bl	80081e4 <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e64:	f7fe f9be 	bl	80081e4 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e045      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e76:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <HAL_RCC_OscConfig+0x470>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x444>
 8009e82:	e03d      	b.n	8009f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d107      	bne.n	8009e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e038      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
 8009e90:	40023800 	.word	0x40023800
 8009e94:	40007000 	.word	0x40007000
 8009e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	; (8009f0c <HAL_RCC_OscConfig+0x4ec>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d028      	beq.n	8009efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d121      	bne.n	8009efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d11a      	bne.n	8009efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d111      	bne.n	8009efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d107      	bne.n	8009efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d001      	beq.n	8009f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	40023800 	.word	0x40023800

08009f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e0cc      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f24:	4b68      	ldr	r3, [pc, #416]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d90c      	bls.n	8009f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f32:	4b65      	ldr	r3, [pc, #404]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f3a:	4b63      	ldr	r3, [pc, #396]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d001      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e0b8      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d020      	beq.n	8009f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f64:	4b59      	ldr	r3, [pc, #356]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	4a58      	ldr	r2, [pc, #352]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0308 	and.w	r3, r3, #8
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f7c:	4b53      	ldr	r3, [pc, #332]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	4a52      	ldr	r2, [pc, #328]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f88:	4b50      	ldr	r3, [pc, #320]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	494d      	ldr	r1, [pc, #308]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d044      	beq.n	800a030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d107      	bne.n	8009fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fae:	4b47      	ldr	r3, [pc, #284]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d119      	bne.n	8009fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e07f      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d003      	beq.n	8009fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d107      	bne.n	8009fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fce:	4b3f      	ldr	r3, [pc, #252]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e06f      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fde:	4b3b      	ldr	r3, [pc, #236]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e067      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fee:	4b37      	ldr	r3, [pc, #220]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f023 0203 	bic.w	r2, r3, #3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	4934      	ldr	r1, [pc, #208]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a000:	f7fe f8f0 	bl	80081e4 <HAL_GetTick>
 800a004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a006:	e00a      	b.n	800a01e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a008:	f7fe f8ec 	bl	80081e4 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	f241 3288 	movw	r2, #5000	; 0x1388
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e04f      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a01e:	4b2b      	ldr	r3, [pc, #172]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 020c 	and.w	r2, r3, #12
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d1eb      	bne.n	800a008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a030:	4b25      	ldr	r3, [pc, #148]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d20c      	bcs.n	800a058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b22      	ldr	r3, [pc, #136]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a046:	4b20      	ldr	r3, [pc, #128]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 030f 	and.w	r3, r3, #15
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d001      	beq.n	800a058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e032      	b.n	800a0be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d008      	beq.n	800a076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a064:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4916      	ldr	r1, [pc, #88]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a072:	4313      	orrs	r3, r2
 800a074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0308 	and.w	r3, r3, #8
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a082:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	490e      	ldr	r1, [pc, #56]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a092:	4313      	orrs	r3, r2
 800a094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a096:	f000 f821 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <HAL_RCC_ClockConfig+0x1bc>)
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	f003 030f 	and.w	r3, r3, #15
 800a0a6:	490a      	ldr	r1, [pc, #40]	; (800a0d0 <HAL_RCC_ClockConfig+0x1c0>)
 800a0a8:	5ccb      	ldrb	r3, [r1, r3]
 800a0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ae:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <HAL_RCC_ClockConfig+0x1c4>)
 800a0b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0b2:	4b09      	ldr	r3, [pc, #36]	; (800a0d8 <HAL_RCC_ClockConfig+0x1c8>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe f850 	bl	800815c <HAL_InitTick>

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	40023c00 	.word	0x40023c00
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	0801b394 	.word	0x0801b394
 800a0d4:	20000188 	.word	0x20000188
 800a0d8:	200002c0 	.word	0x200002c0

0800a0dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e0:	b094      	sub	sp, #80	; 0x50
 800a0e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0f4:	4b79      	ldr	r3, [pc, #484]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f003 030c 	and.w	r3, r3, #12
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d00d      	beq.n	800a11c <HAL_RCC_GetSysClockFreq+0x40>
 800a100:	2b08      	cmp	r3, #8
 800a102:	f200 80e1 	bhi.w	800a2c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <HAL_RCC_GetSysClockFreq+0x34>
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d003      	beq.n	800a116 <HAL_RCC_GetSysClockFreq+0x3a>
 800a10e:	e0db      	b.n	800a2c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a110:	4b73      	ldr	r3, [pc, #460]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a112:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a114:	e0db      	b.n	800a2ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a116:	4b73      	ldr	r3, [pc, #460]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a11a:	e0d8      	b.n	800a2ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a11c:	4b6f      	ldr	r3, [pc, #444]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a124:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a126:	4b6d      	ldr	r3, [pc, #436]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d063      	beq.n	800a1fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a132:	4b6a      	ldr	r3, [pc, #424]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	2200      	movs	r2, #0
 800a13a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a13c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a144:	633b      	str	r3, [r7, #48]	; 0x30
 800a146:	2300      	movs	r3, #0
 800a148:	637b      	str	r3, [r7, #52]	; 0x34
 800a14a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f04f 0100 	mov.w	r1, #0
 800a15a:	0159      	lsls	r1, r3, #5
 800a15c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a160:	0150      	lsls	r0, r2, #5
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4621      	mov	r1, r4
 800a168:	1a51      	subs	r1, r2, r1
 800a16a:	6139      	str	r1, [r7, #16]
 800a16c:	4629      	mov	r1, r5
 800a16e:	eb63 0301 	sbc.w	r3, r3, r1
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a180:	4659      	mov	r1, fp
 800a182:	018b      	lsls	r3, r1, #6
 800a184:	4651      	mov	r1, sl
 800a186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a18a:	4651      	mov	r1, sl
 800a18c:	018a      	lsls	r2, r1, #6
 800a18e:	4651      	mov	r1, sl
 800a190:	ebb2 0801 	subs.w	r8, r2, r1
 800a194:	4659      	mov	r1, fp
 800a196:	eb63 0901 	sbc.w	r9, r3, r1
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1ae:	4690      	mov	r8, r2
 800a1b0:	4699      	mov	r9, r3
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	eb18 0303 	adds.w	r3, r8, r3
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	eb49 0303 	adc.w	r3, r9, r3
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	f04f 0200 	mov.w	r2, #0
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	024b      	lsls	r3, r1, #9
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a1d8:	4621      	mov	r1, r4
 800a1da:	024a      	lsls	r2, r1, #9
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1ec:	f7f6 fd6c 	bl	8000cc8 <__aeabi_uldivmod>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1f8:	e058      	b.n	800a2ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1fa:	4b38      	ldr	r3, [pc, #224]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	099b      	lsrs	r3, r3, #6
 800a200:	2200      	movs	r2, #0
 800a202:	4618      	mov	r0, r3
 800a204:	4611      	mov	r1, r2
 800a206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a20a:	623b      	str	r3, [r7, #32]
 800a20c:	2300      	movs	r3, #0
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
 800a210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a214:	4642      	mov	r2, r8
 800a216:	464b      	mov	r3, r9
 800a218:	f04f 0000 	mov.w	r0, #0
 800a21c:	f04f 0100 	mov.w	r1, #0
 800a220:	0159      	lsls	r1, r3, #5
 800a222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a226:	0150      	lsls	r0, r2, #5
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4641      	mov	r1, r8
 800a22e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a232:	4649      	mov	r1, r9
 800a234:	eb63 0b01 	sbc.w	fp, r3, r1
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a24c:	ebb2 040a 	subs.w	r4, r2, sl
 800a250:	eb63 050b 	sbc.w	r5, r3, fp
 800a254:	f04f 0200 	mov.w	r2, #0
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	00eb      	lsls	r3, r5, #3
 800a25e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a262:	00e2      	lsls	r2, r4, #3
 800a264:	4614      	mov	r4, r2
 800a266:	461d      	mov	r5, r3
 800a268:	4643      	mov	r3, r8
 800a26a:	18e3      	adds	r3, r4, r3
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	464b      	mov	r3, r9
 800a270:	eb45 0303 	adc.w	r3, r5, r3
 800a274:	607b      	str	r3, [r7, #4]
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a282:	4629      	mov	r1, r5
 800a284:	028b      	lsls	r3, r1, #10
 800a286:	4621      	mov	r1, r4
 800a288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a28c:	4621      	mov	r1, r4
 800a28e:	028a      	lsls	r2, r1, #10
 800a290:	4610      	mov	r0, r2
 800a292:	4619      	mov	r1, r3
 800a294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a296:	2200      	movs	r2, #0
 800a298:	61bb      	str	r3, [r7, #24]
 800a29a:	61fa      	str	r2, [r7, #28]
 800a29c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2a0:	f7f6 fd12 	bl	8000cc8 <__aeabi_uldivmod>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <HAL_RCC_GetSysClockFreq+0x200>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	0c1b      	lsrs	r3, r3, #16
 800a2b2:	f003 0303 	and.w	r3, r3, #3
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a2bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2c6:	e002      	b.n	800a2ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2c8:	4b05      	ldr	r3, [pc, #20]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a2ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3750      	adds	r7, #80	; 0x50
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2da:	bf00      	nop
 800a2dc:	40023800 	.word	0x40023800
 800a2e0:	00f42400 	.word	0x00f42400
 800a2e4:	007a1200 	.word	0x007a1200

0800a2e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2ec:	4b03      	ldr	r3, [pc, #12]	; (800a2fc <HAL_RCC_GetHCLKFreq+0x14>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000188 	.word	0x20000188

0800a300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a304:	f7ff fff0 	bl	800a2e8 <HAL_RCC_GetHCLKFreq>
 800a308:	4602      	mov	r2, r0
 800a30a:	4b05      	ldr	r3, [pc, #20]	; (800a320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	0a9b      	lsrs	r3, r3, #10
 800a310:	f003 0307 	and.w	r3, r3, #7
 800a314:	4903      	ldr	r1, [pc, #12]	; (800a324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a316:	5ccb      	ldrb	r3, [r1, r3]
 800a318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40023800 	.word	0x40023800
 800a324:	0801b3a4 	.word	0x0801b3a4

0800a328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a32c:	f7ff ffdc 	bl	800a2e8 <HAL_RCC_GetHCLKFreq>
 800a330:	4602      	mov	r2, r0
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	0b5b      	lsrs	r3, r3, #13
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	4903      	ldr	r1, [pc, #12]	; (800a34c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a33e:	5ccb      	ldrb	r3, [r1, r3]
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a344:	4618      	mov	r0, r3
 800a346:	bd80      	pop	{r7, pc}
 800a348:	40023800 	.word	0x40023800
 800a34c:	0801b3a4 	.word	0x0801b3a4

0800a350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a374:	2b00      	cmp	r3, #0
 800a376:	d105      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a380:	2b00      	cmp	r3, #0
 800a382:	d075      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a384:	4b91      	ldr	r3, [pc, #580]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a38a:	f7fd ff2b 	bl	80081e4 <HAL_GetTick>
 800a38e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a390:	e008      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a392:	f7fd ff27 	bl	80081e4 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d901      	bls.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e189      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3a4:	4b8a      	ldr	r3, [pc, #552]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f0      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d009      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	019a      	lsls	r2, r3, #6
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	071b      	lsls	r3, r3, #28
 800a3c8:	4981      	ldr	r1, [pc, #516]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01f      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a3dc:	4b7c      	ldr	r3, [pc, #496]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e2:	0f1b      	lsrs	r3, r3, #28
 800a3e4:	f003 0307 	and.w	r3, r3, #7
 800a3e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	019a      	lsls	r2, r3, #6
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	061b      	lsls	r3, r3, #24
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	071b      	lsls	r3, r3, #28
 800a3fc:	4974      	ldr	r1, [pc, #464]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a404:	4b72      	ldr	r3, [pc, #456]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a40a:	f023 021f 	bic.w	r2, r3, #31
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	3b01      	subs	r3, #1
 800a414:	496e      	ldr	r1, [pc, #440]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a416:	4313      	orrs	r3, r2
 800a418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00d      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	019a      	lsls	r2, r3, #6
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	061b      	lsls	r3, r3, #24
 800a434:	431a      	orrs	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	071b      	lsls	r3, r3, #28
 800a43c:	4964      	ldr	r1, [pc, #400]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a444:	4b61      	ldr	r3, [pc, #388]	; (800a5cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a446:	2201      	movs	r2, #1
 800a448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a44a:	f7fd fecb 	bl	80081e4 <HAL_GetTick>
 800a44e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a450:	e008      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a452:	f7fd fec7 	bl	80081e4 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e129      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a464:	4b5a      	ldr	r3, [pc, #360]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f0      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d105      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a484:	2b00      	cmp	r3, #0
 800a486:	d079      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a488:	4b52      	ldr	r3, [pc, #328]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a48e:	f7fd fea9 	bl	80081e4 <HAL_GetTick>
 800a492:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a494:	e008      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a496:	f7fd fea5 	bl	80081e4 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e107      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4a8:	4b49      	ldr	r3, [pc, #292]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b4:	d0ef      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d020      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4c2:	4b43      	ldr	r3, [pc, #268]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c8:	0f1b      	lsrs	r3, r3, #28
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	019a      	lsls	r2, r3, #6
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	061b      	lsls	r3, r3, #24
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	071b      	lsls	r3, r3, #28
 800a4e2:	493b      	ldr	r1, [pc, #236]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a4ea:	4b39      	ldr	r3, [pc, #228]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	4934      	ldr	r1, [pc, #208]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01e      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a510:	4b2f      	ldr	r3, [pc, #188]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	0e1b      	lsrs	r3, r3, #24
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	019a      	lsls	r2, r3, #6
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	061b      	lsls	r3, r3, #24
 800a528:	431a      	orrs	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	071b      	lsls	r3, r3, #28
 800a530:	4927      	ldr	r1, [pc, #156]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a532:	4313      	orrs	r3, r2
 800a534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a538:	4b25      	ldr	r3, [pc, #148]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a53a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	4922      	ldr	r1, [pc, #136]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a550:	2201      	movs	r2, #1
 800a552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a554:	f7fd fe46 	bl	80081e4 <HAL_GetTick>
 800a558:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a55a:	e008      	b.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a55c:	f7fd fe42 	bl	80081e4 <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d901      	bls.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e0a4      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a56e:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a57a:	d1ef      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 808b 	beq.w	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	4b10      	ldr	r3, [pc, #64]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	4a0f      	ldr	r2, [pc, #60]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a598:	6413      	str	r3, [r2, #64]	; 0x40
 800a59a:	4b0d      	ldr	r3, [pc, #52]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a0b      	ldr	r2, [pc, #44]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a5ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5b2:	f7fd fe17 	bl	80081e4 <HAL_GetTick>
 800a5b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5b8:	e010      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a5ba:	f7fd fe13 	bl	80081e4 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d909      	bls.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e075      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a5cc:	42470068 	.word	0x42470068
 800a5d0:	40023800 	.word	0x40023800
 800a5d4:	42470070 	.word	0x42470070
 800a5d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5dc:	4b38      	ldr	r3, [pc, #224]	; (800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0e8      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a5e8:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d02f      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	429a      	cmp	r2, r3
 800a604:	d028      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a606:	4b2f      	ldr	r3, [pc, #188]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a60e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a610:	4b2d      	ldr	r3, [pc, #180]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a612:	2201      	movs	r2, #1
 800a614:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a616:	4b2c      	ldr	r3, [pc, #176]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a61c:	4a29      	ldr	r2, [pc, #164]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a622:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d114      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a62e:	f7fd fdd9 	bl	80081e4 <HAL_GetTick>
 800a632:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a634:	e00a      	b.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a636:	f7fd fdd5 	bl	80081e4 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	f241 3288 	movw	r2, #5000	; 0x1388
 800a644:	4293      	cmp	r3, r2
 800a646:	d901      	bls.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e035      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a64c:	4b1d      	ldr	r3, [pc, #116]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0ee      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a664:	d10d      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a672:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a67a:	4912      	ldr	r1, [pc, #72]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	608b      	str	r3, [r1, #8]
 800a680:	e005      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a682:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4a0f      	ldr	r2, [pc, #60]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a688:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a68c:	6093      	str	r3, [r2, #8]
 800a68e:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a69a:	490a      	ldr	r1, [pc, #40]	; (800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a6b2:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a6b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40007000 	.word	0x40007000
 800a6c4:	40023800 	.word	0x40023800
 800a6c8:	42470e40 	.word	0x42470e40
 800a6cc:	424711e0 	.word	0x424711e0

0800a6d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e066      	b.n	800a7b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	7f5b      	ldrb	r3, [r3, #29]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d105      	bne.n	800a6fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7f9 fa74 	bl	8003be4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2202      	movs	r2, #2
 800a700:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	22ca      	movs	r2, #202	; 0xca
 800a708:	625a      	str	r2, [r3, #36]	; 0x24
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2253      	movs	r2, #83	; 0x53
 800a710:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa45 	bl	800aba2 <RTC_EnterInitMode>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d12c      	bne.n	800a77c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a734:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6899      	ldr	r1, [r3, #8]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	68d2      	ldr	r2, [r2, #12]
 800a75c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6919      	ldr	r1, [r3, #16]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	041a      	lsls	r2, r3, #16
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa4c 	bl	800ac10 <RTC_ExitInitMode>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d113      	bne.n	800a7aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a790:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699a      	ldr	r2, [r3, #24]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	22ff      	movs	r2, #255	; 0xff
 800a7b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	7f1b      	ldrb	r3, [r3, #28]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_RTC_SetTime+0x1c>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e087      	b.n	800a8e8 <HAL_RTC_SetTime+0x12c>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d126      	bne.n	800a838 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fa29 	bl	800ac5a <RTC_ByteToBcd2>
 800a808:	4603      	mov	r3, r0
 800a80a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fa22 	bl	800ac5a <RTC_ByteToBcd2>
 800a816:	4603      	mov	r3, r0
 800a818:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a81a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	789b      	ldrb	r3, [r3, #2]
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fa1a 	bl	800ac5a <RTC_ByteToBcd2>
 800a826:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a828:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	78db      	ldrb	r3, [r3, #3]
 800a830:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	e018      	b.n	800a86a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2200      	movs	r2, #0
 800a84a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a858:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a85e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	78db      	ldrb	r3, [r3, #3]
 800a864:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a866:	4313      	orrs	r3, r2
 800a868:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	22ca      	movs	r2, #202	; 0xca
 800a870:	625a      	str	r2, [r3, #36]	; 0x24
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2253      	movs	r2, #83	; 0x53
 800a878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 f991 	bl	800aba2 <RTC_EnterInitMode>
 800a880:	4603      	mov	r3, r0
 800a882:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a884:	7cfb      	ldrb	r3, [r7, #19]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d120      	bne.n	800a8cc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a894:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a898:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6899      	ldr	r1, [r3, #8]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	68da      	ldr	r2, [r3, #12]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f9a4 	bl	800ac10 <RTC_ExitInitMode>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a8cc:	7cfb      	ldrb	r3, [r7, #19]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	22ff      	movs	r2, #255	; 0xff
 800a8de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	771a      	strb	r2, [r3, #28]

  return status;
 800a8e6:	7cfb      	ldrb	r3, [r7, #19]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd90      	pop	{r4, r7, pc}

0800a8f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a922:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a926:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	0c1b      	lsrs	r3, r3, #16
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a932:	b2da      	uxtb	r2, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	0a1b      	lsrs	r3, r3, #8
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a942:	b2da      	uxtb	r2, r3
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a950:	b2da      	uxtb	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	0d9b      	lsrs	r3, r3, #22
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	b2da      	uxtb	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d11a      	bne.n	800a9a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f98f 	bl	800ac94 <RTC_Bcd2ToByte>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f986 	bl	800ac94 <RTC_Bcd2ToByte>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	789b      	ldrb	r3, [r3, #2]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f97d 	bl	800ac94 <RTC_Bcd2ToByte>
 800a99a:	4603      	mov	r3, r0
 800a99c:	461a      	mov	r2, r3
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	7f1b      	ldrb	r3, [r3, #28]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d101      	bne.n	800a9c8 <HAL_RTC_SetDate+0x1c>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e071      	b.n	800aaac <HAL_RTC_SetDate+0x100>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10e      	bne.n	800a9f8 <HAL_RTC_SetDate+0x4c>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	785b      	ldrb	r3, [r3, #1]
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d008      	beq.n	800a9f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	f023 0310 	bic.w	r3, r3, #16
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	330a      	adds	r3, #10
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d11c      	bne.n	800aa38 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	78db      	ldrb	r3, [r3, #3]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f929 	bl	800ac5a <RTC_ByteToBcd2>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 f922 	bl	800ac5a <RTC_ByteToBcd2>
 800aa16:	4603      	mov	r3, r0
 800aa18:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa1a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	789b      	ldrb	r3, [r3, #2]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 f91a 	bl	800ac5a <RTC_ByteToBcd2>
 800aa26:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa28:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e00e      	b.n	800aa56 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	78db      	ldrb	r3, [r3, #3]
 800aa3c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa44:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa4a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	22ca      	movs	r2, #202	; 0xca
 800aa5c:	625a      	str	r2, [r3, #36]	; 0x24
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2253      	movs	r2, #83	; 0x53
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f89b 	bl	800aba2 <RTC_EnterInitMode>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800aa70:	7cfb      	ldrb	r3, [r7, #19]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10c      	bne.n	800aa90 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f8c2 	bl	800ac10 <RTC_ExitInitMode>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800aa90:	7cfb      	ldrb	r3, [r7, #19]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	22ff      	movs	r2, #255	; 0xff
 800aaa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	771a      	strb	r2, [r3, #28]

  return status;
 800aaaa:	7cfb      	ldrb	r3, [r7, #19]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd90      	pop	{r4, r7, pc}

0800aab4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aace:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aad2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	0a1b      	lsrs	r3, r3, #8
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 031f 	and.w	r3, r3, #31
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	0b5b      	lsrs	r3, r3, #13
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d11a      	bne.n	800ab48 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	78db      	ldrb	r3, [r3, #3]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 f8bc 	bl	800ac94 <RTC_Bcd2ToByte>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f8b3 	bl	800ac94 <RTC_Bcd2ToByte>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	789b      	ldrb	r3, [r3, #2]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f8aa 	bl	800ac94 <RTC_Bcd2ToByte>
 800ab40:	4603      	mov	r3, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ab6c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab6e:	f7fd fb39 	bl	80081e4 <HAL_GetTick>
 800ab72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ab74:	e009      	b.n	800ab8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ab76:	f7fd fb35 	bl	80081e4 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab84:	d901      	bls.n	800ab8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e007      	b.n	800ab9a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0ee      	beq.n	800ab76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d122      	bne.n	800ac06 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800abce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800abd0:	f7fd fb08 	bl	80081e4 <HAL_GetTick>
 800abd4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800abd6:	e00c      	b.n	800abf2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800abd8:	f7fd fb04 	bl	80081e4 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abe6:	d904      	bls.n	800abf2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2204      	movs	r2, #4
 800abec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <RTC_EnterInitMode+0x64>
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d1e8      	bne.n	800abd8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff ff89 	bl	800ab52 <HAL_RTC_WaitForSynchro>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2204      	movs	r2, #4
 800ac4a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	4603      	mov	r3, r0
 800ac62:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800ac68:	e005      	b.n	800ac76 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	3b0a      	subs	r3, #10
 800ac74:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	2b09      	cmp	r3, #9
 800ac7a:	d8f6      	bhi.n	800ac6a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	b2db      	uxtb	r3, r3
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	091b      	lsrs	r3, r3, #4
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	4413      	add	r3, r2
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	4413      	add	r3, r2
 800acbe:	b2db      	uxtb	r3, r3
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e022      	b.n	800ad24 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d105      	bne.n	800acf6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7f8 ffc1 	bl	8003c78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2203      	movs	r2, #3
 800acfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f814 	bl	800ad2c <HAL_SD_InitCard>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e00a      	b.n	800ad24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad2c:	b5b0      	push	{r4, r5, r7, lr}
 800ad2e:	b08e      	sub	sp, #56	; 0x38
 800ad30:	af04      	add	r7, sp, #16
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ad48:	2376      	movs	r3, #118	; 0x76
 800ad4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681d      	ldr	r5, [r3, #0]
 800ad50:	466c      	mov	r4, sp
 800ad52:	f107 0314 	add.w	r3, r7, #20
 800ad56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad5e:	f107 0308 	add.w	r3, r7, #8
 800ad62:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad64:	4628      	mov	r0, r5
 800ad66:	f002 ffb9 	bl	800dcdc <SDIO_Init>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ad70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e04f      	b.n	800ae1c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ad7c:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <HAL_SD_InitCard+0xf8>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f002 fff1 	bl	800dd6e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ad8c:	4b25      	ldr	r3, [pc, #148]	; (800ae24 <HAL_SD_InitCard+0xf8>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800ad92:	2002      	movs	r0, #2
 800ad94:	f7fd fa32 	bl	80081fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fe69 	bl	800ba70 <SD_PowerON>
 800ad9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e02e      	b.n	800ae1c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fd88 	bl	800b8d4 <SD_InitCard>
 800adc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e01b      	b.n	800ae1c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800adec:	4618      	mov	r0, r3
 800adee:	f003 f850 	bl	800de92 <SDMMC_CmdBlockLength>
 800adf2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a0a      	ldr	r2, [pc, #40]	; (800ae28 <HAL_SD_InitCard+0xfc>)
 800ae00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3728      	adds	r7, #40	; 0x28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bdb0      	pop	{r4, r5, r7, pc}
 800ae24:	422580a0 	.word	0x422580a0
 800ae28:	004005ff 	.word	0x004005ff

0800ae2c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b092      	sub	sp, #72	; 0x48
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae3a:	f7fd f9d3 	bl	80081e4 <HAL_GetTick>
 800ae3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d107      	bne.n	800ae5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e1bd      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	f040 81b0 	bne.w	800b1cc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	441a      	add	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d907      	bls.n	800ae90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae84:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e1a4      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2203      	movs	r2, #3
 800ae94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d002      	beq.n	800aeae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	025b      	lsls	r3, r3, #9
 800aeac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	025b      	lsls	r3, r3, #9
 800aeb8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aeba:	2390      	movs	r3, #144	; 0x90
 800aebc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aebe:	2302      	movs	r3, #2
 800aec0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f107 0214 	add.w	r2, r7, #20
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f002 ffb0 	bl	800de3a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d90a      	bls.n	800aef6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2202      	movs	r2, #2
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aeec:	4618      	mov	r0, r3
 800aeee:	f003 f814 	bl	800df1a <SDMMC_CmdReadMultiBlock>
 800aef2:	6478      	str	r0, [r7, #68]	; 0x44
 800aef4:	e009      	b.n	800af0a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af02:	4618      	mov	r0, r3
 800af04:	f002 ffe7 	bl	800ded6 <SDMMC_CmdReadSingleBlock>
 800af08:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800af0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d012      	beq.n	800af36 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a7a      	ldr	r2, [pc, #488]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800af16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1e:	431a      	orrs	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e151      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800af3a:	e061      	b.n	800b000 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d03c      	beq.n	800afc4 <HAL_SD_ReadBlocks+0x198>
 800af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d039      	beq.n	800afc4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800af50:	2300      	movs	r3, #0
 800af52:	643b      	str	r3, [r7, #64]	; 0x40
 800af54:	e033      	b.n	800afbe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 fee9 	bl	800dd32 <SDIO_ReadFIFO>
 800af60:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	b2da      	uxtb	r2, r3
 800af66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	3301      	adds	r3, #1
 800af6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af72:	3b01      	subs	r3, #1
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	0a1b      	lsrs	r3, r3, #8
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af82:	3301      	adds	r3, #1
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af88:	3b01      	subs	r3, #1
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	0c1b      	lsrs	r3, r3, #16
 800af90:	b2da      	uxtb	r2, r3
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	3301      	adds	r3, #1
 800af9a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	3b01      	subs	r3, #1
 800afa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	0e1b      	lsrs	r3, r3, #24
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afaa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800afac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afae:	3301      	adds	r3, #1
 800afb0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800afb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb4:	3b01      	subs	r3, #1
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800afb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afba:	3301      	adds	r3, #1
 800afbc:	643b      	str	r3, [r7, #64]	; 0x40
 800afbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc0:	2b07      	cmp	r3, #7
 800afc2:	d9c8      	bls.n	800af56 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800afc4:	f7fd f90e 	bl	80081e4 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d902      	bls.n	800afda <HAL_SD_ReadBlocks+0x1ae>
 800afd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d112      	bne.n	800b000 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a48      	ldr	r2, [pc, #288]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e0ec      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b006:	f240 332a 	movw	r3, #810	; 0x32a
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d095      	beq.n	800af3c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d022      	beq.n	800b064 <HAL_SD_ReadBlocks+0x238>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d91f      	bls.n	800b064 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d01b      	beq.n	800b064 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	f002 ffd9 	bl	800dfe8 <SDMMC_CmdStopTransfer>
 800b036:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d012      	beq.n	800b064 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a2f      	ldr	r2, [pc, #188]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800b044:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e0ba      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d012      	beq.n	800b098 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a22      	ldr	r2, [pc, #136]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800b078:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	f043 0208 	orr.w	r2, r3, #8
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e0a0      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d012      	beq.n	800b0cc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a15      	ldr	r2, [pc, #84]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b2:	f043 0202 	orr.w	r2, r3, #2
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e086      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d063      	beq.n	800b1a2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a08      	ldr	r2, [pc, #32]	; (800b100 <HAL_SD_ReadBlocks+0x2d4>)
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	f043 0220 	orr.w	r2, r3, #32
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e06c      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
 800b100:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 fe12 	bl	800dd32 <SDIO_ReadFIFO>
 800b10e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	b2da      	uxtb	r2, r3
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11a:	3301      	adds	r3, #1
 800b11c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b120:	3b01      	subs	r3, #1
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	3301      	adds	r3, #1
 800b132:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b136:	3b01      	subs	r3, #1
 800b138:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	0c1b      	lsrs	r3, r3, #16
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b146:	3301      	adds	r3, #1
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14c:	3b01      	subs	r3, #1
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	0e1b      	lsrs	r3, r3, #24
 800b154:	b2da      	uxtb	r2, r3
 800b156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b158:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	3301      	adds	r3, #1
 800b15e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	3b01      	subs	r3, #1
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b166:	f7fd f83d 	bl	80081e4 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b172:	429a      	cmp	r2, r3
 800b174:	d902      	bls.n	800b17c <HAL_SD_ReadBlocks+0x350>
 800b176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d112      	bne.n	800b1a2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a18      	ldr	r2, [pc, #96]	; (800b1e4 <HAL_SD_ReadBlocks+0x3b8>)
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e01b      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <HAL_SD_ReadBlocks+0x38a>
 800b1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1a6      	bne.n	800b104 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e006      	b.n	800b1da <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
  }
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3748      	adds	r7, #72	; 0x48
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	004005ff 	.word	0x004005ff

0800b1e8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b092      	sub	sp, #72	; 0x48
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b1f6:	f7fc fff5 	bl	80081e4 <HAL_GetTick>
 800b1fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d107      	bne.n	800b21a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e166      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b01      	cmp	r3, #1
 800b224:	f040 8159 	bne.w	800b4da <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b22e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	441a      	add	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b238:	429a      	cmp	r2, r3
 800b23a:	d907      	bls.n	800b24c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e14d      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2203      	movs	r2, #3
 800b250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2200      	movs	r2, #0
 800b25a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b260:	2b01      	cmp	r3, #1
 800b262:	d002      	beq.n	800b26a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	025b      	lsls	r3, r3, #9
 800b268:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b26a:	f04f 33ff 	mov.w	r3, #4294967295
 800b26e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	025b      	lsls	r3, r3, #9
 800b274:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b276:	2390      	movs	r3, #144	; 0x90
 800b278:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b27a:	2300      	movs	r3, #0
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b27e:	2300      	movs	r3, #0
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b282:	2301      	movs	r3, #1
 800b284:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f107 0218 	add.w	r2, r7, #24
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f002 fdd2 	bl	800de3a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d90a      	bls.n	800b2b2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f002 fe7a 	bl	800dfa2 <SDMMC_CmdWriteMultiBlock>
 800b2ae:	6478      	str	r0, [r7, #68]	; 0x44
 800b2b0:	e009      	b.n	800b2c6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2210      	movs	r2, #16
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f002 fe4d 	bl	800df5e <SDMMC_CmdWriteSingleBlock>
 800b2c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a87      	ldr	r2, [pc, #540]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b2d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e0fa      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b2f6:	e065      	b.n	800b3c4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d040      	beq.n	800b388 <HAL_SD_WriteBlocks+0x1a0>
 800b306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d03d      	beq.n	800b388 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b30c:	2300      	movs	r3, #0
 800b30e:	643b      	str	r3, [r7, #64]	; 0x40
 800b310:	e037      	b.n	800b382 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	3301      	adds	r3, #1
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b320:	3b01      	subs	r3, #1
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	021a      	lsls	r2, r3, #8
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b332:	3301      	adds	r3, #1
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b338:	3b01      	subs	r3, #1
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	041a      	lsls	r2, r3, #16
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	4313      	orrs	r3, r2
 800b346:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34a:	3301      	adds	r3, #1
 800b34c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b350:	3b01      	subs	r3, #1
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	061a      	lsls	r2, r3, #24
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	3301      	adds	r3, #1
 800b364:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b368:	3b01      	subs	r3, #1
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f107 0214 	add.w	r2, r7, #20
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f002 fce8 	bl	800dd4c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37e:	3301      	adds	r3, #1
 800b380:	643b      	str	r3, [r7, #64]	; 0x40
 800b382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b384:	2b07      	cmp	r3, #7
 800b386:	d9c4      	bls.n	800b312 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b388:	f7fc ff2c 	bl	80081e4 <HAL_GetTick>
 800b38c:	4602      	mov	r2, r0
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b394:	429a      	cmp	r2, r3
 800b396:	d902      	bls.n	800b39e <HAL_SD_WriteBlocks+0x1b6>
 800b398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d112      	bne.n	800b3c4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a53      	ldr	r2, [pc, #332]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e091      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ca:	f240 331a 	movw	r3, #794	; 0x31a
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d091      	beq.n	800b2f8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d022      	beq.n	800b428 <HAL_SD_WriteBlocks+0x240>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d91f      	bls.n	800b428 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d01b      	beq.n	800b428 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f002 fdf7 	bl	800dfe8 <SDMMC_CmdStopTransfer>
 800b3fa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d012      	beq.n	800b428 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a3a      	ldr	r2, [pc, #232]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b408:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b410:	431a      	orrs	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e05f      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42e:	f003 0308 	and.w	r3, r3, #8
 800b432:	2b00      	cmp	r3, #0
 800b434:	d012      	beq.n	800b45c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a2d      	ldr	r2, [pc, #180]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	f043 0208 	orr.w	r2, r3, #8
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e045      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b462:	f003 0302 	and.w	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d012      	beq.n	800b490 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a20      	ldr	r2, [pc, #128]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b476:	f043 0202 	orr.w	r2, r3, #2
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e02b      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d012      	beq.n	800b4c4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <HAL_SD_WriteBlocks+0x308>)
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	f043 0210 	orr.w	r2, r3, #16
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e011      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e006      	b.n	800b4e8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
  }
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3748      	adds	r7, #72	; 0x48
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	004005ff 	.word	0x004005ff

0800b4f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b502:	0f9b      	lsrs	r3, r3, #30
 800b504:	b2da      	uxtb	r2, r3
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b50e:	0e9b      	lsrs	r3, r3, #26
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	b2da      	uxtb	r2, r3
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b520:	0e1b      	lsrs	r3, r3, #24
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 0303 	and.w	r3, r3, #3
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b532:	0c1b      	lsrs	r3, r3, #16
 800b534:	b2da      	uxtb	r2, r3
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	b2da      	uxtb	r2, r3
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b554:	0d1b      	lsrs	r3, r3, #20
 800b556:	b29a      	uxth	r2, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b560:	0c1b      	lsrs	r3, r3, #16
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 030f 	and.w	r3, r3, #15
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b572:	0bdb      	lsrs	r3, r3, #15
 800b574:	b2db      	uxtb	r3, r3
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b584:	0b9b      	lsrs	r3, r3, #14
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b596:	0b5b      	lsrs	r3, r3, #13
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a8:	0b1b      	lsrs	r3, r3, #12
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d163      	bne.n	800b68c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5c8:	009a      	lsls	r2, r3, #2
 800b5ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b5d4:	0f92      	lsrs	r2, r2, #30
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e0:	0edb      	lsrs	r3, r3, #27
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f2:	0e1b      	lsrs	r3, r3, #24
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b604:	0d5b      	lsrs	r3, r3, #21
 800b606:	b2db      	uxtb	r3, r3
 800b608:	f003 0307 	and.w	r3, r3, #7
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b616:	0c9b      	lsrs	r3, r3, #18
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 0307 	and.w	r3, r3, #7
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b628:	0bdb      	lsrs	r3, r3, #15
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	b2da      	uxtb	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	7e1b      	ldrb	r3, [r3, #24]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	3302      	adds	r3, #2
 800b64c:	2201      	movs	r2, #1
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b656:	fb03 f202 	mul.w	r2, r3, r2
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	7a1b      	ldrb	r3, [r3, #8]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 030f 	and.w	r3, r3, #15
 800b668:	2201      	movs	r2, #1
 800b66a:	409a      	lsls	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b678:	0a52      	lsrs	r2, r2, #9
 800b67a:	fb03 f202 	mul.w	r2, r3, r2
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b688:	661a      	str	r2, [r3, #96]	; 0x60
 800b68a:	e031      	b.n	800b6f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b690:	2b01      	cmp	r3, #1
 800b692:	d11d      	bne.n	800b6d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b698:	041b      	lsls	r3, r3, #16
 800b69a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a2:	0c1b      	lsrs	r3, r3, #16
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	029a      	lsls	r2, r3, #10
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	661a      	str	r2, [r3, #96]	; 0x60
 800b6ce:	e00f      	b.n	800b6f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a58      	ldr	r2, [pc, #352]	; (800b838 <HAL_SD_GetCardCSD+0x344>)
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e09d      	b.n	800b82c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f4:	0b9b      	lsrs	r3, r3, #14
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b706:	09db      	lsrs	r3, r3, #7
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b728:	0fdb      	lsrs	r3, r3, #31
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b734:	0f5b      	lsrs	r3, r3, #29
 800b736:	b2db      	uxtb	r3, r3
 800b738:	f003 0303 	and.w	r3, r3, #3
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b746:	0e9b      	lsrs	r3, r3, #26
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	f003 0307 	and.w	r3, r3, #7
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b758:	0d9b      	lsrs	r3, r3, #22
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	b2da      	uxtb	r2, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	0d5b      	lsrs	r3, r3, #21
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	b2da      	uxtb	r2, r3
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	0c1b      	lsrs	r3, r3, #16
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79a:	0bdb      	lsrs	r3, r3, #15
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ae:	0b9b      	lsrs	r3, r3, #14
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c2:	0b5b      	lsrs	r3, r3, #13
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d6:	0b1b      	lsrs	r3, r3, #12
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ea:	0a9b      	lsrs	r3, r3, #10
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fe:	0a1b      	lsrs	r3, r3, #8
 800b800:	b2db      	uxtb	r3, r3
 800b802:	f003 0303 	and.w	r3, r3, #3
 800b806:	b2da      	uxtb	r2, r3
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	b2db      	uxtb	r3, r3
 800b816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	004005ff 	.word	0x004005ff

0800b83c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f970 	bl	800bb8c <SD_SendStatus>
 800b8ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d005      	beq.n	800b8c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	0a5b      	lsrs	r3, r3, #9
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b8ca:	693b      	ldr	r3, [r7, #16]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b8d4:	b5b0      	push	{r4, r5, r7, lr}
 800b8d6:	b094      	sub	sp, #80	; 0x50
 800b8d8:	af04      	add	r7, sp, #16
 800b8da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f002 fa50 	bl	800dd8a <SDIO_GetPowerState>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b8f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b8f4:	e0b8      	b.n	800ba68 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d02f      	beq.n	800b95e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f002 fc37 	bl	800e176 <SDMMC_CmdSendCID>
 800b908:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <SD_InitCard+0x40>
    {
      return errorstate;
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	e0a9      	b.n	800ba68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2100      	movs	r1, #0
 800b91a:	4618      	mov	r0, r3
 800b91c:	f002 fa7a 	bl	800de14 <SDIO_GetResponse>
 800b920:	4602      	mov	r2, r0
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2104      	movs	r1, #4
 800b92c:	4618      	mov	r0, r3
 800b92e:	f002 fa71 	bl	800de14 <SDIO_GetResponse>
 800b932:	4602      	mov	r2, r0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2108      	movs	r1, #8
 800b93e:	4618      	mov	r0, r3
 800b940:	f002 fa68 	bl	800de14 <SDIO_GetResponse>
 800b944:	4602      	mov	r2, r0
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	210c      	movs	r1, #12
 800b950:	4618      	mov	r0, r3
 800b952:	f002 fa5f 	bl	800de14 <SDIO_GetResponse>
 800b956:	4602      	mov	r2, r0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	2b03      	cmp	r3, #3
 800b964:	d00d      	beq.n	800b982 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f107 020e 	add.w	r2, r7, #14
 800b96e:	4611      	mov	r1, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f002 fc3d 	bl	800e1f0 <SDMMC_CmdSetRelAdd>
 800b976:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <SD_InitCard+0xae>
    {
      return errorstate;
 800b97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b980:	e072      	b.n	800ba68 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b986:	2b03      	cmp	r3, #3
 800b988:	d036      	beq.n	800b9f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b98a:	89fb      	ldrh	r3, [r7, #14]
 800b98c:	461a      	mov	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99a:	041b      	lsls	r3, r3, #16
 800b99c:	4619      	mov	r1, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	f002 fc07 	bl	800e1b2 <SDMMC_CmdSendCSD>
 800b9a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ae:	e05b      	b.n	800ba68 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f002 fa2c 	bl	800de14 <SDIO_GetResponse>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2104      	movs	r1, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f002 fa23 	bl	800de14 <SDIO_GetResponse>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2108      	movs	r1, #8
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f002 fa1a 	bl	800de14 <SDIO_GetResponse>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	210c      	movs	r1, #12
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f002 fa11 	bl	800de14 <SDIO_GetResponse>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2104      	movs	r1, #4
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f002 fa08 	bl	800de14 <SDIO_GetResponse>
 800ba04:	4603      	mov	r3, r0
 800ba06:	0d1a      	lsrs	r2, r3, #20
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ba0c:	f107 0310 	add.w	r3, r7, #16
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fd6e 	bl	800b4f4 <HAL_SD_GetCardCSD>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba22:	e021      	b.n	800ba68 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6819      	ldr	r1, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2c:	041b      	lsls	r3, r3, #16
 800ba2e:	2200      	movs	r2, #0
 800ba30:	461c      	mov	r4, r3
 800ba32:	4615      	mov	r5, r2
 800ba34:	4622      	mov	r2, r4
 800ba36:	462b      	mov	r3, r5
 800ba38:	4608      	mov	r0, r1
 800ba3a:	f002 faf7 	bl	800e02c <SDMMC_CmdSelDesel>
 800ba3e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <SD_InitCard+0x176>
  {
    return errorstate;
 800ba46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba48:	e00e      	b.n	800ba68 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681d      	ldr	r5, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	466c      	mov	r4, sp
 800ba52:	f103 0210 	add.w	r2, r3, #16
 800ba56:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba60:	4628      	mov	r0, r5
 800ba62:	f002 f93b 	bl	800dcdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3740      	adds	r7, #64	; 0x40
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bdb0      	pop	{r4, r5, r7, pc}

0800ba70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f002 faf2 	bl	800e072 <SDMMC_CmdGoIdleState>
 800ba8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	e072      	b.n	800bb80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f002 fb05 	bl	800e0ae <SDMMC_CmdOperCond>
 800baa4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00d      	beq.n	800bac8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f002 fadb 	bl	800e072 <SDMMC_CmdGoIdleState>
 800babc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <SD_PowerON+0x5e>
    {
      return errorstate;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	e05b      	b.n	800bb80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d137      	bne.n	800bb46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f002 fb05 	bl	800e0ec <SDMMC_CmdAppCommand>
 800bae2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d02d      	beq.n	800bb46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800baee:	e047      	b.n	800bb80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f002 faf8 	bl	800e0ec <SDMMC_CmdAppCommand>
 800bafc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <SD_PowerON+0x98>
    {
      return errorstate;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	e03b      	b.n	800bb80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	491e      	ldr	r1, [pc, #120]	; (800bb88 <SD_PowerON+0x118>)
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f002 fb0e 	bl	800e130 <SDMMC_CmdAppOperCommand>
 800bb14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb20:	e02e      	b.n	800bb80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f002 f973 	bl	800de14 <SDIO_GetResponse>
 800bb2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	0fdb      	lsrs	r3, r3, #31
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <SD_PowerON+0xcc>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e000      	b.n	800bb3e <SD_PowerON+0xce>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	613b      	str	r3, [r7, #16]

    count++;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	3301      	adds	r3, #1
 800bb44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d802      	bhi.n	800bb56 <SD_PowerON+0xe6>
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0cc      	beq.n	800baf0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d902      	bls.n	800bb66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bb60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb64:	e00c      	b.n	800bb80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	645a      	str	r2, [r3, #68]	; 0x44
 800bb76:	e002      	b.n	800bb7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	c1100000 	.word	0xc1100000

0800bb8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bb9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bba0:	e018      	b.n	800bbd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbaa:	041b      	lsls	r3, r3, #16
 800bbac:	4619      	mov	r1, r3
 800bbae:	4610      	mov	r0, r2
 800bbb0:	f002 fb3f 	bl	800e232 <SDMMC_CmdSendStatus>
 800bbb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	e009      	b.n	800bbd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 f924 	bl	800de14 <SDIO_GetResponse>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e07b      	b.n	800bce6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d108      	bne.n	800bc08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbfe:	d009      	beq.n	800bc14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	61da      	str	r2, [r3, #28]
 800bc06:	e005      	b.n	800bc14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7f8 f8c0 	bl	8003db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bc5c:	431a      	orrs	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	f003 0302 	and.w	r3, r3, #2
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc84:	431a      	orrs	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc98:	ea42 0103 	orr.w	r1, r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	430a      	orrs	r2, r1
 800bcaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	0c1b      	lsrs	r3, r3, #16
 800bcb2:	f003 0104 	and.w	r1, r3, #4
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcba:	f003 0210 	and.w	r2, r3, #16
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69da      	ldr	r2, [r3, #28]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b088      	sub	sp, #32
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	603b      	str	r3, [r7, #0]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d101      	bne.n	800bd10 <HAL_SPI_Transmit+0x22>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e126      	b.n	800bf5e <HAL_SPI_Transmit+0x270>
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd18:	f7fc fa64 	bl	80081e4 <HAL_GetTick>
 800bd1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bd1e:	88fb      	ldrh	r3, [r7, #6]
 800bd20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d002      	beq.n	800bd34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bd2e:	2302      	movs	r3, #2
 800bd30:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd32:	e10b      	b.n	800bf4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <HAL_SPI_Transmit+0x52>
 800bd3a:	88fb      	ldrh	r3, [r7, #6]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd44:	e102      	b.n	800bf4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2203      	movs	r2, #3
 800bd4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	88fa      	ldrh	r2, [r7, #6]
 800bd5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	88fa      	ldrh	r2, [r7, #6]
 800bd64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd8c:	d10f      	bne.n	800bdae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb8:	2b40      	cmp	r3, #64	; 0x40
 800bdba:	d007      	beq.n	800bdcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd4:	d14b      	bne.n	800be6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <HAL_SPI_Transmit+0xf6>
 800bdde:	8afb      	ldrh	r3, [r7, #22]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d13e      	bne.n	800be62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	881a      	ldrh	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf4:	1c9a      	adds	r2, r3, #2
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	3b01      	subs	r3, #1
 800be02:	b29a      	uxth	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800be08:	e02b      	b.n	800be62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f003 0302 	and.w	r3, r3, #2
 800be14:	2b02      	cmp	r3, #2
 800be16:	d112      	bne.n	800be3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1c:	881a      	ldrh	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be28:	1c9a      	adds	r2, r3, #2
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be32:	b29b      	uxth	r3, r3
 800be34:	3b01      	subs	r3, #1
 800be36:	b29a      	uxth	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	86da      	strh	r2, [r3, #54]	; 0x36
 800be3c:	e011      	b.n	800be62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be3e:	f7fc f9d1 	bl	80081e4 <HAL_GetTick>
 800be42:	4602      	mov	r2, r0
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d803      	bhi.n	800be56 <HAL_SPI_Transmit+0x168>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be54:	d102      	bne.n	800be5c <HAL_SPI_Transmit+0x16e>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d102      	bne.n	800be62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be60:	e074      	b.n	800bf4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be66:	b29b      	uxth	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1ce      	bne.n	800be0a <HAL_SPI_Transmit+0x11c>
 800be6c:	e04c      	b.n	800bf08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <HAL_SPI_Transmit+0x18e>
 800be76:	8afb      	ldrh	r3, [r7, #22]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d140      	bne.n	800befe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	330c      	adds	r3, #12
 800be86:	7812      	ldrb	r2, [r2, #0]
 800be88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bea2:	e02c      	b.n	800befe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d113      	bne.n	800beda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	330c      	adds	r3, #12
 800bebc:	7812      	ldrb	r2, [r2, #0]
 800bebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bece:	b29b      	uxth	r3, r3
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	86da      	strh	r2, [r3, #54]	; 0x36
 800bed8:	e011      	b.n	800befe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beda:	f7fc f983 	bl	80081e4 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d803      	bhi.n	800bef2 <HAL_SPI_Transmit+0x204>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef0:	d102      	bne.n	800bef8 <HAL_SPI_Transmit+0x20a>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800befc:	e026      	b.n	800bf4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1cd      	bne.n	800bea4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f8b3 	bl	800c078 <SPI_EndRxTxTransaction>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10a      	bne.n	800bf3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	613b      	str	r3, [r7, #16]
 800bf3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	77fb      	strb	r3, [r7, #31]
 800bf48:	e000      	b.n	800bf4c <HAL_SPI_Transmit+0x25e>
  }

error:
 800bf4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3720      	adds	r7, #32
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	4613      	mov	r3, r2
 800bf76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bf78:	f7fc f934 	bl	80081e4 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	1a9b      	subs	r3, r3, r2
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	4413      	add	r3, r2
 800bf86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bf88:	f7fc f92c 	bl	80081e4 <HAL_GetTick>
 800bf8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bf8e:	4b39      	ldr	r3, [pc, #228]	; (800c074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	015b      	lsls	r3, r3, #5
 800bf94:	0d1b      	lsrs	r3, r3, #20
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	fb02 f303 	mul.w	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf9e:	e054      	b.n	800c04a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa6:	d050      	beq.n	800c04a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bfa8:	f7fc f91c 	bl	80081e4 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d902      	bls.n	800bfbe <SPI_WaitFlagStateUntilTimeout+0x56>
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d13d      	bne.n	800c03a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bfcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfd6:	d111      	bne.n	800bffc <SPI_WaitFlagStateUntilTimeout+0x94>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfe0:	d004      	beq.n	800bfec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfea:	d107      	bne.n	800bffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c004:	d10f      	bne.n	800c026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e017      	b.n	800c06a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c040:	2300      	movs	r3, #0
 800c042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	3b01      	subs	r3, #1
 800c048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	689a      	ldr	r2, [r3, #8]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	4013      	ands	r3, r2
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	429a      	cmp	r2, r3
 800c058:	bf0c      	ite	eq
 800c05a:	2301      	moveq	r3, #1
 800c05c:	2300      	movne	r3, #0
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	461a      	mov	r2, r3
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	429a      	cmp	r2, r3
 800c066:	d19b      	bne.n	800bfa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000188 	.word	0x20000188

0800c078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c084:	4b1b      	ldr	r3, [pc, #108]	; (800c0f4 <SPI_EndRxTxTransaction+0x7c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1b      	ldr	r2, [pc, #108]	; (800c0f8 <SPI_EndRxTxTransaction+0x80>)
 800c08a:	fba2 2303 	umull	r2, r3, r2, r3
 800c08e:	0d5b      	lsrs	r3, r3, #21
 800c090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c094:	fb02 f303 	mul.w	r3, r2, r3
 800c098:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0a2:	d112      	bne.n	800c0ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2180      	movs	r1, #128	; 0x80
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff ff5a 	bl	800bf68 <SPI_WaitFlagStateUntilTimeout>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d016      	beq.n	800c0e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0be:	f043 0220 	orr.w	r2, r3, #32
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e00f      	b.n	800c0ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e0:	2b80      	cmp	r3, #128	; 0x80
 800c0e2:	d0f2      	beq.n	800c0ca <SPI_EndRxTxTransaction+0x52>
 800c0e4:	e000      	b.n	800c0e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800c0e6:	bf00      	nop
  }

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000188 	.word	0x20000188
 800c0f8:	165e9f81 	.word	0x165e9f81

0800c0fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e041      	b.n	800c192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7f8 f99c 	bl	8004460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f000 fca8 	bl	800ca90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d001      	beq.n	800c1b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e04e      	b.n	800c252 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0201 	orr.w	r2, r2, #1
 800c1ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a23      	ldr	r2, [pc, #140]	; (800c260 <HAL_TIM_Base_Start_IT+0xc4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d022      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1de:	d01d      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	; (800c264 <HAL_TIM_Base_Start_IT+0xc8>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d018      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a1e      	ldr	r2, [pc, #120]	; (800c268 <HAL_TIM_Base_Start_IT+0xcc>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d013      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a1c      	ldr	r2, [pc, #112]	; (800c26c <HAL_TIM_Base_Start_IT+0xd0>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d00e      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a1b      	ldr	r2, [pc, #108]	; (800c270 <HAL_TIM_Base_Start_IT+0xd4>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d009      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a19      	ldr	r2, [pc, #100]	; (800c274 <HAL_TIM_Base_Start_IT+0xd8>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d004      	beq.n	800c21c <HAL_TIM_Base_Start_IT+0x80>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a18      	ldr	r2, [pc, #96]	; (800c278 <HAL_TIM_Base_Start_IT+0xdc>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d111      	bne.n	800c240 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b06      	cmp	r3, #6
 800c22c:	d010      	beq.n	800c250 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0201 	orr.w	r2, r2, #1
 800c23c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c23e:	e007      	b.n	800c250 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f042 0201 	orr.w	r2, r2, #1
 800c24e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	40010000 	.word	0x40010000
 800c264:	40000400 	.word	0x40000400
 800c268:	40000800 	.word	0x40000800
 800c26c:	40000c00 	.word	0x40000c00
 800c270:	40010400 	.word	0x40010400
 800c274:	40014000 	.word	0x40014000
 800c278:	40001800 	.word	0x40001800

0800c27c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68da      	ldr	r2, [r3, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0201 	bic.w	r2, r2, #1
 800c292:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6a1a      	ldr	r2, [r3, #32]
 800c29a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c29e:	4013      	ands	r3, r2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10f      	bne.n	800c2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6a1a      	ldr	r2, [r3, #32]
 800c2aa:	f240 4344 	movw	r3, #1092	; 0x444
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d107      	bne.n	800c2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e041      	b.n	800c370 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f839 	bl	800c378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2202      	movs	r2, #2
 800c30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	3304      	adds	r3, #4
 800c316:	4619      	mov	r1, r3
 800c318:	4610      	mov	r0, r2
 800c31a:	f000 fbb9 	bl	800ca90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d109      	bne.n	800c3b0 <HAL_TIM_PWM_Start+0x24>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	bf14      	ite	ne
 800c3a8:	2301      	movne	r3, #1
 800c3aa:	2300      	moveq	r3, #0
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	e022      	b.n	800c3f6 <HAL_TIM_PWM_Start+0x6a>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d109      	bne.n	800c3ca <HAL_TIM_PWM_Start+0x3e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	bf14      	ite	ne
 800c3c2:	2301      	movne	r3, #1
 800c3c4:	2300      	moveq	r3, #0
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	e015      	b.n	800c3f6 <HAL_TIM_PWM_Start+0x6a>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d109      	bne.n	800c3e4 <HAL_TIM_PWM_Start+0x58>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	e008      	b.n	800c3f6 <HAL_TIM_PWM_Start+0x6a>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	bf14      	ite	ne
 800c3f0:	2301      	movne	r3, #1
 800c3f2:	2300      	moveq	r3, #0
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e07c      	b.n	800c4f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_TIM_PWM_Start+0x82>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c40c:	e013      	b.n	800c436 <HAL_TIM_PWM_Start+0xaa>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b04      	cmp	r3, #4
 800c412:	d104      	bne.n	800c41e <HAL_TIM_PWM_Start+0x92>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c41c:	e00b      	b.n	800c436 <HAL_TIM_PWM_Start+0xaa>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b08      	cmp	r3, #8
 800c422:	d104      	bne.n	800c42e <HAL_TIM_PWM_Start+0xa2>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c42c:	e003      	b.n	800c436 <HAL_TIM_PWM_Start+0xaa>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2202      	movs	r2, #2
 800c432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2201      	movs	r2, #1
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fe10 	bl	800d064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a2d      	ldr	r2, [pc, #180]	; (800c500 <HAL_TIM_PWM_Start+0x174>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d004      	beq.n	800c458 <HAL_TIM_PWM_Start+0xcc>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a2c      	ldr	r2, [pc, #176]	; (800c504 <HAL_TIM_PWM_Start+0x178>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d101      	bne.n	800c45c <HAL_TIM_PWM_Start+0xd0>
 800c458:	2301      	movs	r3, #1
 800c45a:	e000      	b.n	800c45e <HAL_TIM_PWM_Start+0xd2>
 800c45c:	2300      	movs	r3, #0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d007      	beq.n	800c472 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a22      	ldr	r2, [pc, #136]	; (800c500 <HAL_TIM_PWM_Start+0x174>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d022      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c484:	d01d      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a1f      	ldr	r2, [pc, #124]	; (800c508 <HAL_TIM_PWM_Start+0x17c>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d018      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a1d      	ldr	r2, [pc, #116]	; (800c50c <HAL_TIM_PWM_Start+0x180>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d013      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a1c      	ldr	r2, [pc, #112]	; (800c510 <HAL_TIM_PWM_Start+0x184>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d00e      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a16      	ldr	r2, [pc, #88]	; (800c504 <HAL_TIM_PWM_Start+0x178>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d009      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a18      	ldr	r2, [pc, #96]	; (800c514 <HAL_TIM_PWM_Start+0x188>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d004      	beq.n	800c4c2 <HAL_TIM_PWM_Start+0x136>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a16      	ldr	r2, [pc, #88]	; (800c518 <HAL_TIM_PWM_Start+0x18c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d111      	bne.n	800c4e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f003 0307 	and.w	r3, r3, #7
 800c4cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b06      	cmp	r3, #6
 800c4d2:	d010      	beq.n	800c4f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f042 0201 	orr.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e4:	e007      	b.n	800c4f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	40010000 	.word	0x40010000
 800c504:	40010400 	.word	0x40010400
 800c508:	40000400 	.word	0x40000400
 800c50c:	40000800 	.word	0x40000800
 800c510:	40000c00 	.word	0x40000c00
 800c514:	40014000 	.word	0x40014000
 800c518:	40001800 	.word	0x40001800

0800c51c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d122      	bne.n	800c578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d11b      	bne.n	800c578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f06f 0202 	mvn.w	r2, #2
 800c548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	f003 0303 	and.w	r3, r3, #3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d003      	beq.n	800c566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fa77 	bl	800ca52 <HAL_TIM_IC_CaptureCallback>
 800c564:	e005      	b.n	800c572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa69 	bl	800ca3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa7a 	bl	800ca66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	f003 0304 	and.w	r3, r3, #4
 800c582:	2b04      	cmp	r3, #4
 800c584:	d122      	bne.n	800c5cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b04      	cmp	r3, #4
 800c592:	d11b      	bne.n	800c5cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f06f 0204 	mvn.w	r2, #4
 800c59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fa4d 	bl	800ca52 <HAL_TIM_IC_CaptureCallback>
 800c5b8:	e005      	b.n	800c5c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fa3f 	bl	800ca3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa50 	bl	800ca66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	f003 0308 	and.w	r3, r3, #8
 800c5d6:	2b08      	cmp	r3, #8
 800c5d8:	d122      	bne.n	800c620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	f003 0308 	and.w	r3, r3, #8
 800c5e4:	2b08      	cmp	r3, #8
 800c5e6:	d11b      	bne.n	800c620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f06f 0208 	mvn.w	r2, #8
 800c5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2204      	movs	r2, #4
 800c5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa23 	bl	800ca52 <HAL_TIM_IC_CaptureCallback>
 800c60c:	e005      	b.n	800c61a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa15 	bl	800ca3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fa26 	bl	800ca66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	f003 0310 	and.w	r3, r3, #16
 800c62a:	2b10      	cmp	r3, #16
 800c62c:	d122      	bne.n	800c674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	f003 0310 	and.w	r3, r3, #16
 800c638:	2b10      	cmp	r3, #16
 800c63a:	d11b      	bne.n	800c674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f06f 0210 	mvn.w	r2, #16
 800c644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2208      	movs	r2, #8
 800c64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f9f9 	bl	800ca52 <HAL_TIM_IC_CaptureCallback>
 800c660:	e005      	b.n	800c66e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9eb 	bl	800ca3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f9fc 	bl	800ca66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d10e      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d107      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f06f 0201 	mvn.w	r2, #1
 800c698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f7 f9e2 	bl	8003a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6aa:	2b80      	cmp	r3, #128	; 0x80
 800c6ac:	d10e      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6b8:	2b80      	cmp	r3, #128	; 0x80
 800c6ba:	d107      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fdca 	bl	800d260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	d10e      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e4:	2b40      	cmp	r3, #64	; 0x40
 800c6e6:	d107      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9c1 	bl	800ca7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	f003 0320 	and.w	r3, r3, #32
 800c702:	2b20      	cmp	r3, #32
 800c704:	d10e      	bne.n	800c724 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f003 0320 	and.w	r3, r3, #32
 800c710:	2b20      	cmp	r3, #32
 800c712:	d107      	bne.n	800c724 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f06f 0220 	mvn.w	r2, #32
 800c71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fd94 	bl	800d24c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c746:	2302      	movs	r3, #2
 800c748:	e0ae      	b.n	800c8a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b0c      	cmp	r3, #12
 800c756:	f200 809f 	bhi.w	800c898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c75a:	a201      	add	r2, pc, #4	; (adr r2, 800c760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c760:	0800c795 	.word	0x0800c795
 800c764:	0800c899 	.word	0x0800c899
 800c768:	0800c899 	.word	0x0800c899
 800c76c:	0800c899 	.word	0x0800c899
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c899 	.word	0x0800c899
 800c778:	0800c899 	.word	0x0800c899
 800c77c:	0800c899 	.word	0x0800c899
 800c780:	0800c817 	.word	0x0800c817
 800c784:	0800c899 	.word	0x0800c899
 800c788:	0800c899 	.word	0x0800c899
 800c78c:	0800c899 	.word	0x0800c899
 800c790:	0800c857 	.word	0x0800c857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 fa18 	bl	800cbd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	699a      	ldr	r2, [r3, #24]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0208 	orr.w	r2, r2, #8
 800c7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0204 	bic.w	r2, r2, #4
 800c7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6999      	ldr	r1, [r3, #24]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	619a      	str	r2, [r3, #24]
      break;
 800c7d2:	e064      	b.n	800c89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fa68 	bl	800ccb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	699a      	ldr	r2, [r3, #24]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6999      	ldr	r1, [r3, #24]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	021a      	lsls	r2, r3, #8
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	619a      	str	r2, [r3, #24]
      break;
 800c814:	e043      	b.n	800c89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 fabd 	bl	800cd9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69da      	ldr	r2, [r3, #28]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f042 0208 	orr.w	r2, r2, #8
 800c830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 0204 	bic.w	r2, r2, #4
 800c840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69d9      	ldr	r1, [r3, #28]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	691a      	ldr	r2, [r3, #16]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	61da      	str	r2, [r3, #28]
      break;
 800c854:	e023      	b.n	800c89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 fb11 	bl	800ce84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	69da      	ldr	r2, [r3, #28]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69da      	ldr	r2, [r3, #28]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69d9      	ldr	r1, [r3, #28]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	021a      	lsls	r2, r3, #8
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	430a      	orrs	r2, r1
 800c894:	61da      	str	r2, [r3, #28]
      break;
 800c896:	e002      	b.n	800c89e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	75fb      	strb	r3, [r7, #23]
      break;
 800c89c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d101      	bne.n	800c8cc <HAL_TIM_ConfigClockSource+0x1c>
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	e0b4      	b.n	800ca36 <HAL_TIM_ConfigClockSource+0x186>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c8ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c904:	d03e      	beq.n	800c984 <HAL_TIM_ConfigClockSource+0xd4>
 800c906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c90a:	f200 8087 	bhi.w	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c912:	f000 8086 	beq.w	800ca22 <HAL_TIM_ConfigClockSource+0x172>
 800c916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c91a:	d87f      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c91c:	2b70      	cmp	r3, #112	; 0x70
 800c91e:	d01a      	beq.n	800c956 <HAL_TIM_ConfigClockSource+0xa6>
 800c920:	2b70      	cmp	r3, #112	; 0x70
 800c922:	d87b      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c924:	2b60      	cmp	r3, #96	; 0x60
 800c926:	d050      	beq.n	800c9ca <HAL_TIM_ConfigClockSource+0x11a>
 800c928:	2b60      	cmp	r3, #96	; 0x60
 800c92a:	d877      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c92c:	2b50      	cmp	r3, #80	; 0x50
 800c92e:	d03c      	beq.n	800c9aa <HAL_TIM_ConfigClockSource+0xfa>
 800c930:	2b50      	cmp	r3, #80	; 0x50
 800c932:	d873      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c934:	2b40      	cmp	r3, #64	; 0x40
 800c936:	d058      	beq.n	800c9ea <HAL_TIM_ConfigClockSource+0x13a>
 800c938:	2b40      	cmp	r3, #64	; 0x40
 800c93a:	d86f      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c93c:	2b30      	cmp	r3, #48	; 0x30
 800c93e:	d064      	beq.n	800ca0a <HAL_TIM_ConfigClockSource+0x15a>
 800c940:	2b30      	cmp	r3, #48	; 0x30
 800c942:	d86b      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c944:	2b20      	cmp	r3, #32
 800c946:	d060      	beq.n	800ca0a <HAL_TIM_ConfigClockSource+0x15a>
 800c948:	2b20      	cmp	r3, #32
 800c94a:	d867      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d05c      	beq.n	800ca0a <HAL_TIM_ConfigClockSource+0x15a>
 800c950:	2b10      	cmp	r3, #16
 800c952:	d05a      	beq.n	800ca0a <HAL_TIM_ConfigClockSource+0x15a>
 800c954:	e062      	b.n	800ca1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	6899      	ldr	r1, [r3, #8]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f000 fb5d 	bl	800d024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	609a      	str	r2, [r3, #8]
      break;
 800c982:	e04f      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	6899      	ldr	r1, [r3, #8]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	f000 fb46 	bl	800d024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689a      	ldr	r2, [r3, #8]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9a6:	609a      	str	r2, [r3, #8]
      break;
 800c9a8:	e03c      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	6859      	ldr	r1, [r3, #4]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	f000 faba 	bl	800cf30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2150      	movs	r1, #80	; 0x50
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 fb13 	bl	800cfee <TIM_ITRx_SetConfig>
      break;
 800c9c8:	e02c      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	6859      	ldr	r1, [r3, #4]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f000 fad9 	bl	800cf8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2160      	movs	r1, #96	; 0x60
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 fb03 	bl	800cfee <TIM_ITRx_SetConfig>
      break;
 800c9e8:	e01c      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6859      	ldr	r1, [r3, #4]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f000 fa9a 	bl	800cf30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2140      	movs	r1, #64	; 0x40
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 faf3 	bl	800cfee <TIM_ITRx_SetConfig>
      break;
 800ca08:	e00c      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4619      	mov	r1, r3
 800ca14:	4610      	mov	r0, r2
 800ca16:	f000 faea 	bl	800cfee <TIM_ITRx_SetConfig>
      break;
 800ca1a:	e003      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca20:	e000      	b.n	800ca24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b083      	sub	sp, #12
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b083      	sub	sp, #12
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca82:	bf00      	nop
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
	...

0800ca90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a40      	ldr	r2, [pc, #256]	; (800cba4 <TIM_Base_SetConfig+0x114>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d013      	beq.n	800cad0 <TIM_Base_SetConfig+0x40>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caae:	d00f      	beq.n	800cad0 <TIM_Base_SetConfig+0x40>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a3d      	ldr	r2, [pc, #244]	; (800cba8 <TIM_Base_SetConfig+0x118>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d00b      	beq.n	800cad0 <TIM_Base_SetConfig+0x40>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a3c      	ldr	r2, [pc, #240]	; (800cbac <TIM_Base_SetConfig+0x11c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d007      	beq.n	800cad0 <TIM_Base_SetConfig+0x40>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a3b      	ldr	r2, [pc, #236]	; (800cbb0 <TIM_Base_SetConfig+0x120>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d003      	beq.n	800cad0 <TIM_Base_SetConfig+0x40>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a3a      	ldr	r2, [pc, #232]	; (800cbb4 <TIM_Base_SetConfig+0x124>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d108      	bne.n	800cae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a2f      	ldr	r2, [pc, #188]	; (800cba4 <TIM_Base_SetConfig+0x114>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d02b      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caf0:	d027      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a2c      	ldr	r2, [pc, #176]	; (800cba8 <TIM_Base_SetConfig+0x118>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d023      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a2b      	ldr	r2, [pc, #172]	; (800cbac <TIM_Base_SetConfig+0x11c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d01f      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a2a      	ldr	r2, [pc, #168]	; (800cbb0 <TIM_Base_SetConfig+0x120>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d01b      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a29      	ldr	r2, [pc, #164]	; (800cbb4 <TIM_Base_SetConfig+0x124>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d017      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a28      	ldr	r2, [pc, #160]	; (800cbb8 <TIM_Base_SetConfig+0x128>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d013      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a27      	ldr	r2, [pc, #156]	; (800cbbc <TIM_Base_SetConfig+0x12c>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d00f      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a26      	ldr	r2, [pc, #152]	; (800cbc0 <TIM_Base_SetConfig+0x130>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d00b      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a25      	ldr	r2, [pc, #148]	; (800cbc4 <TIM_Base_SetConfig+0x134>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d007      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a24      	ldr	r2, [pc, #144]	; (800cbc8 <TIM_Base_SetConfig+0x138>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d003      	beq.n	800cb42 <TIM_Base_SetConfig+0xb2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a23      	ldr	r2, [pc, #140]	; (800cbcc <TIM_Base_SetConfig+0x13c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d108      	bne.n	800cb54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a0a      	ldr	r2, [pc, #40]	; (800cba4 <TIM_Base_SetConfig+0x114>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_Base_SetConfig+0xf8>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a0c      	ldr	r2, [pc, #48]	; (800cbb4 <TIM_Base_SetConfig+0x124>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d103      	bne.n	800cb90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	615a      	str	r2, [r3, #20]
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	40010000 	.word	0x40010000
 800cba8:	40000400 	.word	0x40000400
 800cbac:	40000800 	.word	0x40000800
 800cbb0:	40000c00 	.word	0x40000c00
 800cbb4:	40010400 	.word	0x40010400
 800cbb8:	40014000 	.word	0x40014000
 800cbbc:	40014400 	.word	0x40014400
 800cbc0:	40014800 	.word	0x40014800
 800cbc4:	40001800 	.word	0x40001800
 800cbc8:	40001c00 	.word	0x40001c00
 800cbcc:	40002000 	.word	0x40002000

0800cbd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	f023 0201 	bic.w	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f023 0303 	bic.w	r3, r3, #3
 800cc06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f023 0302 	bic.w	r3, r3, #2
 800cc18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a20      	ldr	r2, [pc, #128]	; (800cca8 <TIM_OC1_SetConfig+0xd8>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d003      	beq.n	800cc34 <TIM_OC1_SetConfig+0x64>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a1f      	ldr	r2, [pc, #124]	; (800ccac <TIM_OC1_SetConfig+0xdc>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d10c      	bne.n	800cc4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f023 0308 	bic.w	r3, r3, #8
 800cc3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	697a      	ldr	r2, [r7, #20]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f023 0304 	bic.w	r3, r3, #4
 800cc4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a15      	ldr	r2, [pc, #84]	; (800cca8 <TIM_OC1_SetConfig+0xd8>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d003      	beq.n	800cc5e <TIM_OC1_SetConfig+0x8e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a14      	ldr	r2, [pc, #80]	; (800ccac <TIM_OC1_SetConfig+0xdc>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d111      	bne.n	800cc82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	693a      	ldr	r2, [r7, #16]
 800cc86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	621a      	str	r2, [r3, #32]
}
 800cc9c:	bf00      	nop
 800cc9e:	371c      	adds	r7, #28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40010400 	.word	0x40010400

0800ccb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b087      	sub	sp, #28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	f023 0210 	bic.w	r2, r3, #16
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f023 0320 	bic.w	r3, r3, #32
 800ccfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	011b      	lsls	r3, r3, #4
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a22      	ldr	r2, [pc, #136]	; (800cd94 <TIM_OC2_SetConfig+0xe4>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d003      	beq.n	800cd18 <TIM_OC2_SetConfig+0x68>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a21      	ldr	r2, [pc, #132]	; (800cd98 <TIM_OC2_SetConfig+0xe8>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d10d      	bne.n	800cd34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	011b      	lsls	r3, r3, #4
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a17      	ldr	r2, [pc, #92]	; (800cd94 <TIM_OC2_SetConfig+0xe4>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d003      	beq.n	800cd44 <TIM_OC2_SetConfig+0x94>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a16      	ldr	r2, [pc, #88]	; (800cd98 <TIM_OC2_SetConfig+0xe8>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d113      	bne.n	800cd6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	621a      	str	r2, [r3, #32]
}
 800cd86:	bf00      	nop
 800cd88:	371c      	adds	r7, #28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40010400 	.word	0x40010400

0800cd9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	69db      	ldr	r3, [r3, #28]
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0303 	bic.w	r3, r3, #3
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cde4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	021b      	lsls	r3, r3, #8
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a21      	ldr	r2, [pc, #132]	; (800ce7c <TIM_OC3_SetConfig+0xe0>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d003      	beq.n	800ce02 <TIM_OC3_SetConfig+0x66>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a20      	ldr	r2, [pc, #128]	; (800ce80 <TIM_OC3_SetConfig+0xe4>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d10d      	bne.n	800ce1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	697a      	ldr	r2, [r7, #20]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a16      	ldr	r2, [pc, #88]	; (800ce7c <TIM_OC3_SetConfig+0xe0>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d003      	beq.n	800ce2e <TIM_OC3_SetConfig+0x92>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a15      	ldr	r2, [pc, #84]	; (800ce80 <TIM_OC3_SetConfig+0xe4>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d113      	bne.n	800ce56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	011b      	lsls	r3, r3, #4
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	621a      	str	r2, [r3, #32]
}
 800ce70:	bf00      	nop
 800ce72:	371c      	adds	r7, #28
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40010400 	.word	0x40010400

0800ce84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	021b      	lsls	r3, r3, #8
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	031b      	lsls	r3, r3, #12
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a12      	ldr	r2, [pc, #72]	; (800cf28 <TIM_OC4_SetConfig+0xa4>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d003      	beq.n	800ceec <TIM_OC4_SetConfig+0x68>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a11      	ldr	r2, [pc, #68]	; (800cf2c <TIM_OC4_SetConfig+0xa8>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d109      	bne.n	800cf00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	019b      	lsls	r3, r3, #6
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	621a      	str	r2, [r3, #32]
}
 800cf1a:	bf00      	nop
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	40010000 	.word	0x40010000
 800cf2c:	40010400 	.word	0x40010400

0800cf30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	f023 0201 	bic.w	r2, r3, #1
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	011b      	lsls	r3, r3, #4
 800cf60:	693a      	ldr	r2, [r7, #16]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f023 030a 	bic.w	r3, r3, #10
 800cf6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	621a      	str	r2, [r3, #32]
}
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	b087      	sub	sp, #28
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	f023 0210 	bic.w	r2, r3, #16
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	031b      	lsls	r3, r3, #12
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	621a      	str	r2, [r3, #32]
}
 800cfe2:	bf00      	nop
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b085      	sub	sp, #20
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	f043 0307 	orr.w	r3, r3, #7
 800d010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	609a      	str	r2, [r3, #8]
}
 800d018:	bf00      	nop
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d024:	b480      	push	{r7}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
 800d030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d03e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	021a      	lsls	r2, r3, #8
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	431a      	orrs	r2, r3
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	697a      	ldr	r2, [r7, #20]
 800d04e:	4313      	orrs	r3, r2
 800d050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	609a      	str	r2, [r3, #8]
}
 800d058:	bf00      	nop
 800d05a:	371c      	adds	r7, #28
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	f003 031f 	and.w	r3, r3, #31
 800d076:	2201      	movs	r2, #1
 800d078:	fa02 f303 	lsl.w	r3, r2, r3
 800d07c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6a1a      	ldr	r2, [r3, #32]
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	43db      	mvns	r3, r3
 800d086:	401a      	ands	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a1a      	ldr	r2, [r3, #32]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	f003 031f 	and.w	r3, r3, #31
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	fa01 f303 	lsl.w	r3, r1, r3
 800d09c:	431a      	orrs	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	621a      	str	r2, [r3, #32]
}
 800d0a2:	bf00      	nop
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
	...

0800d0b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d101      	bne.n	800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	e05a      	b.n	800d17e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a21      	ldr	r2, [pc, #132]	; (800d18c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d022      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d114:	d01d      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a1d      	ldr	r2, [pc, #116]	; (800d190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d018      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a1b      	ldr	r2, [pc, #108]	; (800d194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d013      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a1a      	ldr	r2, [pc, #104]	; (800d198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d00e      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a18      	ldr	r2, [pc, #96]	; (800d19c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d009      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a17      	ldr	r2, [pc, #92]	; (800d1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d004      	beq.n	800d152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a15      	ldr	r2, [pc, #84]	; (800d1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d10c      	bne.n	800d16c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	4313      	orrs	r3, r2
 800d162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	40010000 	.word	0x40010000
 800d190:	40000400 	.word	0x40000400
 800d194:	40000800 	.word	0x40000800
 800d198:	40000c00 	.word	0x40000c00
 800d19c:	40010400 	.word	0x40010400
 800d1a0:	40014000 	.word	0x40014000
 800d1a4:	40001800 	.word	0x40001800

0800d1a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	e03d      	b.n	800d240 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4313      	orrs	r3, r2
 800d202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e03f      	b.n	800d306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7f7 f9f8 	bl	8004690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2224      	movs	r2, #36	; 0x24
 800d2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68da      	ldr	r2, [r3, #12]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fa9b 	bl	800d7f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	691a      	ldr	r2, [r3, #16]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	695a      	ldr	r2, [r3, #20]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68da      	ldr	r2, [r3, #12]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2220      	movs	r2, #32
 800d2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	4613      	mov	r3, r2
 800d31a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b20      	cmp	r3, #32
 800d326:	d11d      	bne.n	800d364 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <HAL_UART_Receive_DMA+0x26>
 800d32e:	88fb      	ldrh	r3, [r7, #6]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e016      	b.n	800d366 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d101      	bne.n	800d346 <HAL_UART_Receive_DMA+0x38>
 800d342:	2302      	movs	r3, #2
 800d344:	e00f      	b.n	800d366 <HAL_UART_Receive_DMA+0x58>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d354:	88fb      	ldrh	r3, [r7, #6]
 800d356:	461a      	mov	r2, r3
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f920 	bl	800d5a0 <UART_Start_Receive_DMA>
 800d360:	4603      	mov	r3, r0
 800d362:	e000      	b.n	800d366 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d364:	2302      	movs	r3, #2
  }
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	460b      	mov	r3, r1
 800d3a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d3a2:	bf00      	nop
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b09c      	sub	sp, #112	; 0x70
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d172      	bne.n	800d4b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	330c      	adds	r3, #12
 800d3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3da:	e853 3f00 	ldrex	r3, [r3]
 800d3de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800d3f2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3f8:	e841 2300 	strex	r3, r2, [r1]
 800d3fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e5      	bne.n	800d3d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3314      	adds	r3, #20
 800d40a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40e:	e853 3f00 	ldrex	r3, [r3]
 800d412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d416:	f023 0301 	bic.w	r3, r3, #1
 800d41a:	667b      	str	r3, [r7, #100]	; 0x64
 800d41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3314      	adds	r3, #20
 800d422:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d424:	647a      	str	r2, [r7, #68]	; 0x44
 800d426:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d428:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d42c:	e841 2300 	strex	r3, r2, [r1]
 800d430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1e5      	bne.n	800d404 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3314      	adds	r3, #20
 800d43e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	e853 3f00 	ldrex	r3, [r3]
 800d446:	623b      	str	r3, [r7, #32]
   return(result);
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d44e:	663b      	str	r3, [r7, #96]	; 0x60
 800d450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3314      	adds	r3, #20
 800d456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d458:	633a      	str	r2, [r7, #48]	; 0x30
 800d45a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e5      	bne.n	800d438 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46e:	2220      	movs	r2, #32
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d119      	bne.n	800d4b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	330c      	adds	r3, #12
 800d482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	e853 3f00 	ldrex	r3, [r3]
 800d48a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f023 0310 	bic.w	r3, r3, #16
 800d492:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	330c      	adds	r3, #12
 800d49a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d49c:	61fa      	str	r2, [r7, #28]
 800d49e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a0:	69b9      	ldr	r1, [r7, #24]
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	e841 2300 	strex	r3, r2, [r1]
 800d4a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e5      	bne.n	800d47c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d106      	bne.n	800d4c6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d4bc:	4619      	mov	r1, r3
 800d4be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4c0:	f7ff ff69 	bl	800d396 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4c4:	e002      	b.n	800d4cc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d4c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4c8:	f7f6 fb38 	bl	8003b3c <HAL_UART_RxCpltCallback>
}
 800d4cc:	bf00      	nop
 800d4ce:	3770      	adds	r7, #112	; 0x70
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d108      	bne.n	800d4fc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff ff4e 	bl	800d396 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4fa:	e002      	b.n	800d502 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7ff ff36 	bl	800d36e <HAL_UART_RxHalfCpltCallback>
}
 800d502:	bf00      	nop
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d526:	2b80      	cmp	r3, #128	; 0x80
 800d528:	bf0c      	ite	eq
 800d52a:	2301      	moveq	r3, #1
 800d52c:	2300      	movne	r3, #0
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b21      	cmp	r3, #33	; 0x21
 800d53c:	d108      	bne.n	800d550 <UART_DMAError+0x46>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d005      	beq.n	800d550 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2200      	movs	r2, #0
 800d548:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d54a:	68b8      	ldr	r0, [r7, #8]
 800d54c:	f000 f8c6 	bl	800d6dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d55a:	2b40      	cmp	r3, #64	; 0x40
 800d55c:	bf0c      	ite	eq
 800d55e:	2301      	moveq	r3, #1
 800d560:	2300      	movne	r3, #0
 800d562:	b2db      	uxtb	r3, r3
 800d564:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b22      	cmp	r3, #34	; 0x22
 800d570:	d108      	bne.n	800d584 <UART_DMAError+0x7a>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2200      	movs	r2, #0
 800d57c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d57e:	68b8      	ldr	r0, [r7, #8]
 800d580:	f000 f8d4 	bl	800d72c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d588:	f043 0210 	orr.w	r2, r3, #16
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d590:	68b8      	ldr	r0, [r7, #8]
 800d592:	f7ff fef6 	bl	800d382 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d596:	bf00      	nop
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
	...

0800d5a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b098      	sub	sp, #96	; 0x60
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	88fa      	ldrh	r2, [r7, #6]
 800d5b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2222      	movs	r2, #34	; 0x22
 800d5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	4a40      	ldr	r2, [pc, #256]	; (800d6d0 <UART_Start_Receive_DMA+0x130>)
 800d5ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	4a3f      	ldr	r2, [pc, #252]	; (800d6d4 <UART_Start_Receive_DMA+0x134>)
 800d5d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	4a3e      	ldr	r2, [pc, #248]	; (800d6d8 <UART_Start_Receive_DMA+0x138>)
 800d5de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d5e8:	f107 0308 	add.w	r3, r7, #8
 800d5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	88fb      	ldrh	r3, [r7, #6]
 800d600:	f7fa ff31 	bl	8008466 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d604:	2300      	movs	r3, #0
 800d606:	613b      	str	r3, [r7, #16]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	613b      	str	r3, [r7, #16]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d019      	beq.n	800d65e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	330c      	adds	r3, #12
 800d630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d634:	e853 3f00 	ldrex	r3, [r3]
 800d638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d640:	65bb      	str	r3, [r7, #88]	; 0x58
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	330c      	adds	r3, #12
 800d648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d64a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d64c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1e5      	bne.n	800d62a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3314      	adds	r3, #20
 800d664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	e853 3f00 	ldrex	r3, [r3]
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	f043 0301 	orr.w	r3, r3, #1
 800d674:	657b      	str	r3, [r7, #84]	; 0x54
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3314      	adds	r3, #20
 800d67c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d67e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d682:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d686:	e841 2300 	strex	r3, r2, [r1]
 800d68a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e5      	bne.n	800d65e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3314      	adds	r3, #20
 800d698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	e853 3f00 	ldrex	r3, [r3]
 800d6a0:	617b      	str	r3, [r7, #20]
   return(result);
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6a8:	653b      	str	r3, [r7, #80]	; 0x50
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	3314      	adds	r3, #20
 800d6b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6b2:	627a      	str	r2, [r7, #36]	; 0x24
 800d6b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b6:	6a39      	ldr	r1, [r7, #32]
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ba:	e841 2300 	strex	r3, r2, [r1]
 800d6be:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1e5      	bne.n	800d692 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3760      	adds	r7, #96	; 0x60
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	0800d3af 	.word	0x0800d3af
 800d6d4:	0800d4d5 	.word	0x0800d4d5
 800d6d8:	0800d50b 	.word	0x0800d50b

0800d6dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b089      	sub	sp, #36	; 0x24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	330c      	adds	r3, #12
 800d6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	e853 3f00 	ldrex	r3, [r3]
 800d6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d6fa:	61fb      	str	r3, [r7, #28]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	330c      	adds	r3, #12
 800d702:	69fa      	ldr	r2, [r7, #28]
 800d704:	61ba      	str	r2, [r7, #24]
 800d706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d708:	6979      	ldr	r1, [r7, #20]
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	e841 2300 	strex	r3, r2, [r1]
 800d710:	613b      	str	r3, [r7, #16]
   return(result);
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e5      	bne.n	800d6e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2220      	movs	r2, #32
 800d71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d720:	bf00      	nop
 800d722:	3724      	adds	r7, #36	; 0x24
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b095      	sub	sp, #84	; 0x54
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	330c      	adds	r3, #12
 800d73a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	e853 3f00 	ldrex	r3, [r3]
 800d742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d74a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	330c      	adds	r3, #12
 800d752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d754:	643a      	str	r2, [r7, #64]	; 0x40
 800d756:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d75a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d75c:	e841 2300 	strex	r3, r2, [r1]
 800d760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e5      	bne.n	800d734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3314      	adds	r3, #20
 800d76e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	e853 3f00 	ldrex	r3, [r3]
 800d776:	61fb      	str	r3, [r7, #28]
   return(result);
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	f023 0301 	bic.w	r3, r3, #1
 800d77e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3314      	adds	r3, #20
 800d786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d78a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d790:	e841 2300 	strex	r3, r2, [r1]
 800d794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1e5      	bne.n	800d768 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d119      	bne.n	800d7d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	e853 3f00 	ldrex	r3, [r3]
 800d7b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	f023 0310 	bic.w	r3, r3, #16
 800d7ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	330c      	adds	r3, #12
 800d7c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7c4:	61ba      	str	r2, [r7, #24]
 800d7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c8:	6979      	ldr	r1, [r7, #20]
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	e841 2300 	strex	r3, r2, [r1]
 800d7d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1e5      	bne.n	800d7a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2220      	movs	r2, #32
 800d7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d7e6:	bf00      	nop
 800d7e8:	3754      	adds	r7, #84	; 0x54
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7f8:	b0c0      	sub	sp, #256	; 0x100
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d810:	68d9      	ldr	r1, [r3, #12]
 800d812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	ea40 0301 	orr.w	r3, r0, r1
 800d81c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	431a      	orrs	r2, r3
 800d834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d84c:	f021 010c 	bic.w	r1, r1, #12
 800d850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d85a:	430b      	orrs	r3, r1
 800d85c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d86e:	6999      	ldr	r1, [r3, #24]
 800d870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	ea40 0301 	orr.w	r3, r0, r1
 800d87a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b8f      	ldr	r3, [pc, #572]	; (800dac0 <UART_SetConfig+0x2cc>)
 800d884:	429a      	cmp	r2, r3
 800d886:	d005      	beq.n	800d894 <UART_SetConfig+0xa0>
 800d888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	4b8d      	ldr	r3, [pc, #564]	; (800dac4 <UART_SetConfig+0x2d0>)
 800d890:	429a      	cmp	r2, r3
 800d892:	d104      	bne.n	800d89e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d894:	f7fc fd48 	bl	800a328 <HAL_RCC_GetPCLK2Freq>
 800d898:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d89c:	e003      	b.n	800d8a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d89e:	f7fc fd2f 	bl	800a300 <HAL_RCC_GetPCLK1Freq>
 800d8a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8b0:	f040 810c 	bne.w	800dacc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d8b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d8be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d8c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	1891      	adds	r1, r2, r2
 800d8cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800d8ce:	415b      	adcs	r3, r3
 800d8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	eb12 0801 	adds.w	r8, r2, r1
 800d8dc:	4629      	mov	r1, r5
 800d8de:	eb43 0901 	adc.w	r9, r3, r1
 800d8e2:	f04f 0200 	mov.w	r2, #0
 800d8e6:	f04f 0300 	mov.w	r3, #0
 800d8ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8f6:	4690      	mov	r8, r2
 800d8f8:	4699      	mov	r9, r3
 800d8fa:	4623      	mov	r3, r4
 800d8fc:	eb18 0303 	adds.w	r3, r8, r3
 800d900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d904:	462b      	mov	r3, r5
 800d906:	eb49 0303 	adc.w	r3, r9, r3
 800d90a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d91a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d91e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d922:	460b      	mov	r3, r1
 800d924:	18db      	adds	r3, r3, r3
 800d926:	653b      	str	r3, [r7, #80]	; 0x50
 800d928:	4613      	mov	r3, r2
 800d92a:	eb42 0303 	adc.w	r3, r2, r3
 800d92e:	657b      	str	r3, [r7, #84]	; 0x54
 800d930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d938:	f7f3 f9c6 	bl	8000cc8 <__aeabi_uldivmod>
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	4b61      	ldr	r3, [pc, #388]	; (800dac8 <UART_SetConfig+0x2d4>)
 800d942:	fba3 2302 	umull	r2, r3, r3, r2
 800d946:	095b      	lsrs	r3, r3, #5
 800d948:	011c      	lsls	r4, r3, #4
 800d94a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d94e:	2200      	movs	r2, #0
 800d950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d95c:	4642      	mov	r2, r8
 800d95e:	464b      	mov	r3, r9
 800d960:	1891      	adds	r1, r2, r2
 800d962:	64b9      	str	r1, [r7, #72]	; 0x48
 800d964:	415b      	adcs	r3, r3
 800d966:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d96c:	4641      	mov	r1, r8
 800d96e:	eb12 0a01 	adds.w	sl, r2, r1
 800d972:	4649      	mov	r1, r9
 800d974:	eb43 0b01 	adc.w	fp, r3, r1
 800d978:	f04f 0200 	mov.w	r2, #0
 800d97c:	f04f 0300 	mov.w	r3, #0
 800d980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d98c:	4692      	mov	sl, r2
 800d98e:	469b      	mov	fp, r3
 800d990:	4643      	mov	r3, r8
 800d992:	eb1a 0303 	adds.w	r3, sl, r3
 800d996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d99a:	464b      	mov	r3, r9
 800d99c:	eb4b 0303 	adc.w	r3, fp, r3
 800d9a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d9b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d9b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	18db      	adds	r3, r3, r3
 800d9bc:	643b      	str	r3, [r7, #64]	; 0x40
 800d9be:	4613      	mov	r3, r2
 800d9c0:	eb42 0303 	adc.w	r3, r2, r3
 800d9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d9ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d9ce:	f7f3 f97b 	bl	8000cc8 <__aeabi_uldivmod>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	4b3b      	ldr	r3, [pc, #236]	; (800dac8 <UART_SetConfig+0x2d4>)
 800d9da:	fba3 2301 	umull	r2, r3, r3, r1
 800d9de:	095b      	lsrs	r3, r3, #5
 800d9e0:	2264      	movs	r2, #100	; 0x64
 800d9e2:	fb02 f303 	mul.w	r3, r2, r3
 800d9e6:	1acb      	subs	r3, r1, r3
 800d9e8:	00db      	lsls	r3, r3, #3
 800d9ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d9ee:	4b36      	ldr	r3, [pc, #216]	; (800dac8 <UART_SetConfig+0x2d4>)
 800d9f0:	fba3 2302 	umull	r2, r3, r3, r2
 800d9f4:	095b      	lsrs	r3, r3, #5
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9fc:	441c      	add	r4, r3
 800d9fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da02:	2200      	movs	r2, #0
 800da04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800da0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800da10:	4642      	mov	r2, r8
 800da12:	464b      	mov	r3, r9
 800da14:	1891      	adds	r1, r2, r2
 800da16:	63b9      	str	r1, [r7, #56]	; 0x38
 800da18:	415b      	adcs	r3, r3
 800da1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800da20:	4641      	mov	r1, r8
 800da22:	1851      	adds	r1, r2, r1
 800da24:	6339      	str	r1, [r7, #48]	; 0x30
 800da26:	4649      	mov	r1, r9
 800da28:	414b      	adcs	r3, r1
 800da2a:	637b      	str	r3, [r7, #52]	; 0x34
 800da2c:	f04f 0200 	mov.w	r2, #0
 800da30:	f04f 0300 	mov.w	r3, #0
 800da34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800da38:	4659      	mov	r1, fp
 800da3a:	00cb      	lsls	r3, r1, #3
 800da3c:	4651      	mov	r1, sl
 800da3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da42:	4651      	mov	r1, sl
 800da44:	00ca      	lsls	r2, r1, #3
 800da46:	4610      	mov	r0, r2
 800da48:	4619      	mov	r1, r3
 800da4a:	4603      	mov	r3, r0
 800da4c:	4642      	mov	r2, r8
 800da4e:	189b      	adds	r3, r3, r2
 800da50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da54:	464b      	mov	r3, r9
 800da56:	460a      	mov	r2, r1
 800da58:	eb42 0303 	adc.w	r3, r2, r3
 800da5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800da70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800da74:	460b      	mov	r3, r1
 800da76:	18db      	adds	r3, r3, r3
 800da78:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7a:	4613      	mov	r3, r2
 800da7c:	eb42 0303 	adc.w	r3, r2, r3
 800da80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800da8a:	f7f3 f91d 	bl	8000cc8 <__aeabi_uldivmod>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4b0d      	ldr	r3, [pc, #52]	; (800dac8 <UART_SetConfig+0x2d4>)
 800da94:	fba3 1302 	umull	r1, r3, r3, r2
 800da98:	095b      	lsrs	r3, r3, #5
 800da9a:	2164      	movs	r1, #100	; 0x64
 800da9c:	fb01 f303 	mul.w	r3, r1, r3
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	3332      	adds	r3, #50	; 0x32
 800daa6:	4a08      	ldr	r2, [pc, #32]	; (800dac8 <UART_SetConfig+0x2d4>)
 800daa8:	fba2 2303 	umull	r2, r3, r2, r3
 800daac:	095b      	lsrs	r3, r3, #5
 800daae:	f003 0207 	and.w	r2, r3, #7
 800dab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4422      	add	r2, r4
 800daba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dabc:	e105      	b.n	800dcca <UART_SetConfig+0x4d6>
 800dabe:	bf00      	nop
 800dac0:	40011000 	.word	0x40011000
 800dac4:	40011400 	.word	0x40011400
 800dac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dacc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dad0:	2200      	movs	r2, #0
 800dad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dad6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dade:	4642      	mov	r2, r8
 800dae0:	464b      	mov	r3, r9
 800dae2:	1891      	adds	r1, r2, r2
 800dae4:	6239      	str	r1, [r7, #32]
 800dae6:	415b      	adcs	r3, r3
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
 800daea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800daee:	4641      	mov	r1, r8
 800daf0:	1854      	adds	r4, r2, r1
 800daf2:	4649      	mov	r1, r9
 800daf4:	eb43 0501 	adc.w	r5, r3, r1
 800daf8:	f04f 0200 	mov.w	r2, #0
 800dafc:	f04f 0300 	mov.w	r3, #0
 800db00:	00eb      	lsls	r3, r5, #3
 800db02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db06:	00e2      	lsls	r2, r4, #3
 800db08:	4614      	mov	r4, r2
 800db0a:	461d      	mov	r5, r3
 800db0c:	4643      	mov	r3, r8
 800db0e:	18e3      	adds	r3, r4, r3
 800db10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db14:	464b      	mov	r3, r9
 800db16:	eb45 0303 	adc.w	r3, r5, r3
 800db1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800db1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800db2e:	f04f 0200 	mov.w	r2, #0
 800db32:	f04f 0300 	mov.w	r3, #0
 800db36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800db3a:	4629      	mov	r1, r5
 800db3c:	008b      	lsls	r3, r1, #2
 800db3e:	4621      	mov	r1, r4
 800db40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db44:	4621      	mov	r1, r4
 800db46:	008a      	lsls	r2, r1, #2
 800db48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800db4c:	f7f3 f8bc 	bl	8000cc8 <__aeabi_uldivmod>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4b60      	ldr	r3, [pc, #384]	; (800dcd8 <UART_SetConfig+0x4e4>)
 800db56:	fba3 2302 	umull	r2, r3, r3, r2
 800db5a:	095b      	lsrs	r3, r3, #5
 800db5c:	011c      	lsls	r4, r3, #4
 800db5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db62:	2200      	movs	r2, #0
 800db64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800db6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800db70:	4642      	mov	r2, r8
 800db72:	464b      	mov	r3, r9
 800db74:	1891      	adds	r1, r2, r2
 800db76:	61b9      	str	r1, [r7, #24]
 800db78:	415b      	adcs	r3, r3
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db80:	4641      	mov	r1, r8
 800db82:	1851      	adds	r1, r2, r1
 800db84:	6139      	str	r1, [r7, #16]
 800db86:	4649      	mov	r1, r9
 800db88:	414b      	adcs	r3, r1
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	f04f 0300 	mov.w	r3, #0
 800db94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800db98:	4659      	mov	r1, fp
 800db9a:	00cb      	lsls	r3, r1, #3
 800db9c:	4651      	mov	r1, sl
 800db9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dba2:	4651      	mov	r1, sl
 800dba4:	00ca      	lsls	r2, r1, #3
 800dba6:	4610      	mov	r0, r2
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4603      	mov	r3, r0
 800dbac:	4642      	mov	r2, r8
 800dbae:	189b      	adds	r3, r3, r2
 800dbb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dbb4:	464b      	mov	r3, r9
 800dbb6:	460a      	mov	r2, r1
 800dbb8:	eb42 0303 	adc.w	r3, r2, r3
 800dbbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800dbca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dbcc:	f04f 0200 	mov.w	r2, #0
 800dbd0:	f04f 0300 	mov.w	r3, #0
 800dbd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dbd8:	4649      	mov	r1, r9
 800dbda:	008b      	lsls	r3, r1, #2
 800dbdc:	4641      	mov	r1, r8
 800dbde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbe2:	4641      	mov	r1, r8
 800dbe4:	008a      	lsls	r2, r1, #2
 800dbe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dbea:	f7f3 f86d 	bl	8000cc8 <__aeabi_uldivmod>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4b39      	ldr	r3, [pc, #228]	; (800dcd8 <UART_SetConfig+0x4e4>)
 800dbf4:	fba3 1302 	umull	r1, r3, r3, r2
 800dbf8:	095b      	lsrs	r3, r3, #5
 800dbfa:	2164      	movs	r1, #100	; 0x64
 800dbfc:	fb01 f303 	mul.w	r3, r1, r3
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	011b      	lsls	r3, r3, #4
 800dc04:	3332      	adds	r3, #50	; 0x32
 800dc06:	4a34      	ldr	r2, [pc, #208]	; (800dcd8 <UART_SetConfig+0x4e4>)
 800dc08:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0c:	095b      	lsrs	r3, r3, #5
 800dc0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc12:	441c      	add	r4, r3
 800dc14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc18:	2200      	movs	r2, #0
 800dc1a:	673b      	str	r3, [r7, #112]	; 0x70
 800dc1c:	677a      	str	r2, [r7, #116]	; 0x74
 800dc1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dc22:	4642      	mov	r2, r8
 800dc24:	464b      	mov	r3, r9
 800dc26:	1891      	adds	r1, r2, r2
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	415b      	adcs	r3, r3
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc32:	4641      	mov	r1, r8
 800dc34:	1851      	adds	r1, r2, r1
 800dc36:	6039      	str	r1, [r7, #0]
 800dc38:	4649      	mov	r1, r9
 800dc3a:	414b      	adcs	r3, r1
 800dc3c:	607b      	str	r3, [r7, #4]
 800dc3e:	f04f 0200 	mov.w	r2, #0
 800dc42:	f04f 0300 	mov.w	r3, #0
 800dc46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dc4a:	4659      	mov	r1, fp
 800dc4c:	00cb      	lsls	r3, r1, #3
 800dc4e:	4651      	mov	r1, sl
 800dc50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc54:	4651      	mov	r1, sl
 800dc56:	00ca      	lsls	r2, r1, #3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	4642      	mov	r2, r8
 800dc60:	189b      	adds	r3, r3, r2
 800dc62:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc64:	464b      	mov	r3, r9
 800dc66:	460a      	mov	r2, r1
 800dc68:	eb42 0303 	adc.w	r3, r2, r3
 800dc6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	663b      	str	r3, [r7, #96]	; 0x60
 800dc78:	667a      	str	r2, [r7, #100]	; 0x64
 800dc7a:	f04f 0200 	mov.w	r2, #0
 800dc7e:	f04f 0300 	mov.w	r3, #0
 800dc82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dc86:	4649      	mov	r1, r9
 800dc88:	008b      	lsls	r3, r1, #2
 800dc8a:	4641      	mov	r1, r8
 800dc8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc90:	4641      	mov	r1, r8
 800dc92:	008a      	lsls	r2, r1, #2
 800dc94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dc98:	f7f3 f816 	bl	8000cc8 <__aeabi_uldivmod>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <UART_SetConfig+0x4e4>)
 800dca2:	fba3 1302 	umull	r1, r3, r3, r2
 800dca6:	095b      	lsrs	r3, r3, #5
 800dca8:	2164      	movs	r1, #100	; 0x64
 800dcaa:	fb01 f303 	mul.w	r3, r1, r3
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	011b      	lsls	r3, r3, #4
 800dcb2:	3332      	adds	r3, #50	; 0x32
 800dcb4:	4a08      	ldr	r2, [pc, #32]	; (800dcd8 <UART_SetConfig+0x4e4>)
 800dcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcba:	095b      	lsrs	r3, r3, #5
 800dcbc:	f003 020f 	and.w	r2, r3, #15
 800dcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4422      	add	r2, r4
 800dcc8:	609a      	str	r2, [r3, #8]
}
 800dcca:	bf00      	nop
 800dccc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcd6:	bf00      	nop
 800dcd8:	51eb851f 	.word	0x51eb851f

0800dcdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dcdc:	b084      	sub	sp, #16
 800dcde:	b480      	push	{r7}
 800dce0:	b085      	sub	sp, #20
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	f107 001c 	add.w	r0, r7, #28
 800dcea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dcf2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dcf6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dcfa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dcfe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dd02:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dd06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dd16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	b004      	add	sp, #16
 800dd30:	4770      	bx	lr

0800dd32 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	370c      	adds	r7, #12
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800dd6e:	b480      	push	{r7}
 800dd70:	b083      	sub	sp, #12
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2203      	movs	r2, #3
 800dd7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 0303 	and.w	r3, r3, #3
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dda6:	b480      	push	{r7}
 800dda8:	b085      	sub	sp, #20
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddc4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ddca:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ddd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dde0:	f023 030f 	bic.w	r3, r3, #15
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	b2db      	uxtb	r3, r3
}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3314      	adds	r3, #20
 800de22:	461a      	mov	r2, r3
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	4413      	add	r3, r2
 800de28:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
}  
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b085      	sub	sp, #20
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de60:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800de66:	431a      	orrs	r2, r3
                       Data->DPSM);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800de6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	4313      	orrs	r3, r2
 800de72:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de78:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	431a      	orrs	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800de84:	2300      	movs	r3, #0

}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b088      	sub	sp, #32
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dea0:	2310      	movs	r3, #16
 800dea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dea4:	2340      	movs	r3, #64	; 0x40
 800dea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800deb2:	f107 0308 	add.w	r3, r7, #8
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff ff74 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800debe:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec2:	2110      	movs	r1, #16
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 f9d7 	bl	800e278 <SDMMC_GetCmdResp1>
 800deca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800decc:	69fb      	ldr	r3, [r7, #28]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b088      	sub	sp, #32
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dee4:	2311      	movs	r3, #17
 800dee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800deec:	2300      	movs	r3, #0
 800deee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800def0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7ff ff52 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800df02:	f241 3288 	movw	r2, #5000	; 0x1388
 800df06:	2111      	movs	r1, #17
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f9b5 	bl	800e278 <SDMMC_GetCmdResp1>
 800df0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df10:	69fb      	ldr	r3, [r7, #28]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3720      	adds	r7, #32
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b088      	sub	sp, #32
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df28:	2312      	movs	r3, #18
 800df2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df2c:	2340      	movs	r3, #64	; 0x40
 800df2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df30:	2300      	movs	r3, #0
 800df32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f7ff ff30 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800df46:	f241 3288 	movw	r2, #5000	; 0x1388
 800df4a:	2112      	movs	r1, #18
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f993 	bl	800e278 <SDMMC_GetCmdResp1>
 800df52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df54:	69fb      	ldr	r3, [r7, #28]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3720      	adds	r7, #32
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b088      	sub	sp, #32
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800df6c:	2318      	movs	r3, #24
 800df6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df70:	2340      	movs	r3, #64	; 0x40
 800df72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df74:	2300      	movs	r3, #0
 800df76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df7e:	f107 0308 	add.w	r3, r7, #8
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7ff ff0e 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800df8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df8e:	2118      	movs	r1, #24
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f971 	bl	800e278 <SDMMC_GetCmdResp1>
 800df96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df98:	69fb      	ldr	r3, [r7, #28]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3720      	adds	r7, #32
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b088      	sub	sp, #32
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dfb0:	2319      	movs	r3, #25
 800dfb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfb4:	2340      	movs	r3, #64	; 0x40
 800dfb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfc2:	f107 0308 	add.w	r3, r7, #8
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff feec 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dfce:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd2:	2119      	movs	r1, #25
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f94f 	bl	800e278 <SDMMC_GetCmdResp1>
 800dfda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfdc:	69fb      	ldr	r3, [r7, #28]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3720      	adds	r7, #32
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
	...

0800dfe8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b088      	sub	sp, #32
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dff4:	230c      	movs	r3, #12
 800dff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dff8:	2340      	movs	r3, #64	; 0x40
 800dffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e004:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e006:	f107 0308 	add.w	r3, r7, #8
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff feca 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e012:	4a05      	ldr	r2, [pc, #20]	; (800e028 <SDMMC_CmdStopTransfer+0x40>)
 800e014:	210c      	movs	r1, #12
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f92e 	bl	800e278 <SDMMC_GetCmdResp1>
 800e01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	05f5e100 	.word	0x05f5e100

0800e02c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	; 0x28
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e03c:	2307      	movs	r3, #7
 800e03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e040:	2340      	movs	r3, #64	; 0x40
 800e042:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e044:	2300      	movs	r3, #0
 800e046:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e04e:	f107 0310 	add.w	r3, r7, #16
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7ff fea6 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e05a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e05e:	2107      	movs	r1, #7
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f000 f909 	bl	800e278 <SDMMC_GetCmdResp1>
 800e066:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3728      	adds	r7, #40	; 0x28
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b088      	sub	sp, #32
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e07e:	2300      	movs	r3, #0
 800e080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e082:	2300      	movs	r3, #0
 800e084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e086:	2300      	movs	r3, #0
 800e088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e08e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e090:	f107 0308 	add.w	r3, r7, #8
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff fe85 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 fb23 	bl	800e6e8 <SDMMC_GetCmdError>
 800e0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b088      	sub	sp, #32
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e0b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e0ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e0bc:	2308      	movs	r3, #8
 800e0be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0c0:	2340      	movs	r3, #64	; 0x40
 800e0c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0ce:	f107 0308 	add.w	r3, r7, #8
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff fe66 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fab6 	bl	800e64c <SDMMC_GetCmdResp7>
 800e0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e0fa:	2337      	movs	r3, #55	; 0x37
 800e0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0fe:	2340      	movs	r3, #64	; 0x40
 800e100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e10a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e10c:	f107 0308 	add.w	r3, r7, #8
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff fe47 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e118:	f241 3288 	movw	r2, #5000	; 0x1388
 800e11c:	2137      	movs	r1, #55	; 0x37
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f8aa 	bl	800e278 <SDMMC_GetCmdResp1>
 800e124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e126:	69fb      	ldr	r3, [r7, #28]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e146:	2329      	movs	r3, #41	; 0x29
 800e148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e14a:	2340      	movs	r3, #64	; 0x40
 800e14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e14e:	2300      	movs	r3, #0
 800e150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e156:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e158:	f107 0308 	add.w	r3, r7, #8
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fe21 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f9bd 	bl	800e4e4 <SDMMC_GetCmdResp3>
 800e16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e16c:	69fb      	ldr	r3, [r7, #28]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b088      	sub	sp, #32
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e17e:	2300      	movs	r3, #0
 800e180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e182:	2302      	movs	r3, #2
 800e184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e186:	23c0      	movs	r3, #192	; 0xc0
 800e188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e192:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e194:	f107 0308 	add.w	r3, r7, #8
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff fe03 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 f957 	bl	800e454 <SDMMC_GetCmdResp2>
 800e1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3720      	adds	r7, #32
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b088      	sub	sp, #32
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
 800e1ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e1c0:	2309      	movs	r3, #9
 800e1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e1c4:	23c0      	movs	r3, #192	; 0xc0
 800e1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1d2:	f107 0308 	add.w	r3, r7, #8
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff fde4 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f938 	bl	800e454 <SDMMC_GetCmdResp2>
 800e1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3720      	adds	r7, #32
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e1fe:	2303      	movs	r3, #3
 800e200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e202:	2340      	movs	r3, #64	; 0x40
 800e204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e206:	2300      	movs	r3, #0
 800e208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e20e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e210:	f107 0308 	add.w	r3, r7, #8
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff fdc5 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	2103      	movs	r1, #3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 f99d 	bl	800e560 <SDMMC_GetCmdResp6>
 800e226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e228:	69fb      	ldr	r3, [r7, #28]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3720      	adds	r7, #32
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b088      	sub	sp, #32
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e240:	230d      	movs	r3, #13
 800e242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e244:	2340      	movs	r3, #64	; 0x40
 800e246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e248:	2300      	movs	r3, #0
 800e24a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e24c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e250:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e252:	f107 0308 	add.w	r3, r7, #8
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff fda4 	bl	800dda6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e262:	210d      	movs	r1, #13
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 f807 	bl	800e278 <SDMMC_GetCmdResp1>
 800e26a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e26c:	69fb      	ldr	r3, [r7, #28]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3720      	adds	r7, #32
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	460b      	mov	r3, r1
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e286:	4b70      	ldr	r3, [pc, #448]	; (800e448 <SDMMC_GetCmdResp1+0x1d0>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a70      	ldr	r2, [pc, #448]	; (800e44c <SDMMC_GetCmdResp1+0x1d4>)
 800e28c:	fba2 2303 	umull	r2, r3, r2, r3
 800e290:	0a5a      	lsrs	r2, r3, #9
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	fb02 f303 	mul.w	r3, r2, r3
 800e298:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	1e5a      	subs	r2, r3, #1
 800e29e:	61fa      	str	r2, [r7, #28]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d102      	bne.n	800e2aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2a8:	e0c9      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0ef      	beq.n	800e29a <SDMMC_GetCmdResp1+0x22>
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1ea      	bne.n	800e29a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c8:	f003 0304 	and.w	r3, r3, #4
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d004      	beq.n	800e2da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2204      	movs	r2, #4
 800e2d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2d6:	2304      	movs	r3, #4
 800e2d8:	e0b1      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d004      	beq.n	800e2f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e0a6      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	22c5      	movs	r2, #197	; 0xc5
 800e2f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7ff fd7f 	bl	800ddfa <SDIO_GetCommandResponse>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	461a      	mov	r2, r3
 800e300:	7afb      	ldrb	r3, [r7, #11]
 800e302:	4293      	cmp	r3, r2
 800e304:	d001      	beq.n	800e30a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e306:	2301      	movs	r3, #1
 800e308:	e099      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e30a:	2100      	movs	r1, #0
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f7ff fd81 	bl	800de14 <SDIO_GetResponse>
 800e312:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e314:	697a      	ldr	r2, [r7, #20]
 800e316:	4b4e      	ldr	r3, [pc, #312]	; (800e450 <SDMMC_GetCmdResp1+0x1d8>)
 800e318:	4013      	ands	r3, r2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d101      	bne.n	800e322 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e31e:	2300      	movs	r3, #0
 800e320:	e08d      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	da02      	bge.n	800e32e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e32c:	e087      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e338:	2340      	movs	r3, #64	; 0x40
 800e33a:	e080      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e346:	2380      	movs	r3, #128	; 0x80
 800e348:	e079      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e358:	e071      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e364:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e368:	e069      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e378:	e061      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e388:	e059      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e398:	e051      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3a8:	e049      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e3b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3b8:	e041      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e3c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3c8:	e039      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e3d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e3d8:	e031      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e3e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e3e8:	e029      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e3f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e3f8:	e021      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e404:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e408:	e019      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e414:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e418:	e011      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e424:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e428:	e009      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f003 0308 	and.w	r3, r3, #8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e434:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e438:	e001      	b.n	800e43e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e43a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20000188 	.word	0x20000188
 800e44c:	10624dd3 	.word	0x10624dd3
 800e450:	fdffe008 	.word	0xfdffe008

0800e454 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e45c:	4b1f      	ldr	r3, [pc, #124]	; (800e4dc <SDMMC_GetCmdResp2+0x88>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a1f      	ldr	r2, [pc, #124]	; (800e4e0 <SDMMC_GetCmdResp2+0x8c>)
 800e462:	fba2 2303 	umull	r2, r3, r2, r3
 800e466:	0a5b      	lsrs	r3, r3, #9
 800e468:	f241 3288 	movw	r2, #5000	; 0x1388
 800e46c:	fb02 f303 	mul.w	r3, r2, r3
 800e470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	1e5a      	subs	r2, r3, #1
 800e476:	60fa      	str	r2, [r7, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d102      	bne.n	800e482 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e47c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e480:	e026      	b.n	800e4d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0ef      	beq.n	800e472 <SDMMC_GetCmdResp2+0x1e>
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1ea      	bne.n	800e472 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a0:	f003 0304 	and.w	r3, r3, #4
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2204      	movs	r2, #4
 800e4ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4ae:	2304      	movs	r3, #4
 800e4b0:	e00e      	b.n	800e4d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d004      	beq.n	800e4c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e003      	b.n	800e4d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	22c5      	movs	r2, #197	; 0xc5
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	20000188 	.word	0x20000188
 800e4e0:	10624dd3 	.word	0x10624dd3

0800e4e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4ec:	4b1a      	ldr	r3, [pc, #104]	; (800e558 <SDMMC_GetCmdResp3+0x74>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a1a      	ldr	r2, [pc, #104]	; (800e55c <SDMMC_GetCmdResp3+0x78>)
 800e4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f6:	0a5b      	lsrs	r3, r3, #9
 800e4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4fc:	fb02 f303 	mul.w	r3, r2, r3
 800e500:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	1e5a      	subs	r2, r3, #1
 800e506:	60fa      	str	r2, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d102      	bne.n	800e512 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e50c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e510:	e01b      	b.n	800e54a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e516:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0ef      	beq.n	800e502 <SDMMC_GetCmdResp3+0x1e>
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1ea      	bne.n	800e502 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e530:	f003 0304 	and.w	r3, r3, #4
 800e534:	2b00      	cmp	r3, #0
 800e536:	d004      	beq.n	800e542 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2204      	movs	r2, #4
 800e53c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e53e:	2304      	movs	r3, #4
 800e540:	e003      	b.n	800e54a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	22c5      	movs	r2, #197	; 0xc5
 800e546:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	20000188 	.word	0x20000188
 800e55c:	10624dd3 	.word	0x10624dd3

0800e560 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	460b      	mov	r3, r1
 800e56a:	607a      	str	r2, [r7, #4]
 800e56c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e56e:	4b35      	ldr	r3, [pc, #212]	; (800e644 <SDMMC_GetCmdResp6+0xe4>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a35      	ldr	r2, [pc, #212]	; (800e648 <SDMMC_GetCmdResp6+0xe8>)
 800e574:	fba2 2303 	umull	r2, r3, r2, r3
 800e578:	0a5b      	lsrs	r3, r3, #9
 800e57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e57e:	fb02 f303 	mul.w	r3, r2, r3
 800e582:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	1e5a      	subs	r2, r3, #1
 800e588:	61fa      	str	r2, [r7, #28]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d102      	bne.n	800e594 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e58e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e592:	e052      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e598:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d0ef      	beq.n	800e584 <SDMMC_GetCmdResp6+0x24>
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1ea      	bne.n	800e584 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b2:	f003 0304 	and.w	r3, r3, #4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d004      	beq.n	800e5c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2204      	movs	r2, #4
 800e5be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	e03a      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d004      	beq.n	800e5da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e02f      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff fc0d 	bl	800ddfa <SDIO_GetCommandResponse>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d001      	beq.n	800e5ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e025      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	22c5      	movs	r2, #197	; 0xc5
 800e5f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f7ff fc0c 	bl	800de14 <SDIO_GetResponse>
 800e5fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	0c1b      	lsrs	r3, r3, #16
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e612:	2300      	movs	r3, #0
 800e614:	e011      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e624:	e009      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d002      	beq.n	800e636 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e634:	e001      	b.n	800e63a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20000188 	.word	0x20000188
 800e648:	10624dd3 	.word	0x10624dd3

0800e64c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e654:	4b22      	ldr	r3, [pc, #136]	; (800e6e0 <SDMMC_GetCmdResp7+0x94>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a22      	ldr	r2, [pc, #136]	; (800e6e4 <SDMMC_GetCmdResp7+0x98>)
 800e65a:	fba2 2303 	umull	r2, r3, r2, r3
 800e65e:	0a5b      	lsrs	r3, r3, #9
 800e660:	f241 3288 	movw	r2, #5000	; 0x1388
 800e664:	fb02 f303 	mul.w	r3, r2, r3
 800e668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	1e5a      	subs	r2, r3, #1
 800e66e:	60fa      	str	r2, [r7, #12]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e678:	e02c      	b.n	800e6d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0ef      	beq.n	800e66a <SDMMC_GetCmdResp7+0x1e>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1ea      	bne.n	800e66a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2204      	movs	r2, #4
 800e6a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	e014      	b.n	800e6d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ae:	f003 0301 	and.w	r3, r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e009      	b.n	800e6d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2240      	movs	r2, #64	; 0x40
 800e6d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e6d2:	2300      	movs	r3, #0
  
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3714      	adds	r7, #20
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	20000188 	.word	0x20000188
 800e6e4:	10624dd3 	.word	0x10624dd3

0800e6e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6f0:	4b11      	ldr	r3, [pc, #68]	; (800e738 <SDMMC_GetCmdError+0x50>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a11      	ldr	r2, [pc, #68]	; (800e73c <SDMMC_GetCmdError+0x54>)
 800e6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6fa:	0a5b      	lsrs	r3, r3, #9
 800e6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e700:	fb02 f303 	mul.w	r3, r2, r3
 800e704:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	1e5a      	subs	r2, r3, #1
 800e70a:	60fa      	str	r2, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e714:	e009      	b.n	800e72a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0f1      	beq.n	800e706 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	22c5      	movs	r2, #197	; 0xc5
 800e726:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	20000188 	.word	0x20000188
 800e73c:	10624dd3 	.word	0x10624dd3

0800e740 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e744:	4904      	ldr	r1, [pc, #16]	; (800e758 <MX_FATFS_Init+0x18>)
 800e746:	4805      	ldr	r0, [pc, #20]	; (800e75c <MX_FATFS_Init+0x1c>)
 800e748:	f002 fad6 	bl	8010cf8 <FATFS_LinkDriver>
 800e74c:	4603      	mov	r3, r0
 800e74e:	461a      	mov	r2, r3
 800e750:	4b03      	ldr	r3, [pc, #12]	; (800e760 <MX_FATFS_Init+0x20>)
 800e752:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e754:	bf00      	nop
 800e756:	bd80      	pop	{r7, pc}
 800e758:	20005d1c 	.word	0x20005d1c
 800e75c:	08048630 	.word	0x08048630
 800e760:	20005d18 	.word	0x20005d18

0800e764 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e768:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e77a:	2300      	movs	r3, #0
 800e77c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e77e:	f000 f86b 	bl	800e858 <BSP_SD_IsDetected>
 800e782:	4603      	mov	r3, r0
 800e784:	2b01      	cmp	r3, #1
 800e786:	d001      	beq.n	800e78c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e788:	2301      	movs	r3, #1
 800e78a:	e005      	b.n	800e798 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e78c:	4804      	ldr	r0, [pc, #16]	; (800e7a0 <BSP_SD_Init+0x2c>)
 800e78e:	f7fc fa9d 	bl	800accc <HAL_SD_Init>
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e796:	79fb      	ldrb	r3, [r7, #7]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20005a40 	.word	0x20005a40

0800e7a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af02      	add	r7, sp, #8
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	4806      	ldr	r0, [pc, #24]	; (800e7dc <BSP_SD_ReadBlocks+0x38>)
 800e7c2:	f7fc fb33 	bl	800ae2c <HAL_SD_ReadBlocks>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	20005a40 	.word	0x20005a40

0800e7e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b088      	sub	sp, #32
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	68f9      	ldr	r1, [r7, #12]
 800e7fc:	4806      	ldr	r0, [pc, #24]	; (800e818 <BSP_SD_WriteBlocks+0x38>)
 800e7fe:	f7fc fcf3 	bl	800b1e8 <HAL_SD_WriteBlocks>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e808:	2301      	movs	r3, #1
 800e80a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20005a40 	.word	0x20005a40

0800e81c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e820:	4805      	ldr	r0, [pc, #20]	; (800e838 <BSP_SD_GetCardState+0x1c>)
 800e822:	f7fd f837 	bl	800b894 <HAL_SD_GetCardState>
 800e826:	4603      	mov	r3, r0
 800e828:	2b04      	cmp	r3, #4
 800e82a:	bf14      	ite	ne
 800e82c:	2301      	movne	r3, #1
 800e82e:	2300      	moveq	r3, #0
 800e830:	b2db      	uxtb	r3, r3
}
 800e832:	4618      	mov	r0, r3
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20005a40 	.word	0x20005a40

0800e83c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e844:	6879      	ldr	r1, [r7, #4]
 800e846:	4803      	ldr	r0, [pc, #12]	; (800e854 <BSP_SD_GetCardInfo+0x18>)
 800e848:	f7fc fff8 	bl	800b83c <HAL_SD_GetCardInfo>
}
 800e84c:	bf00      	nop
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	20005a40 	.word	0x20005a40

0800e858 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e85e:	2301      	movs	r3, #1
 800e860:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	b2db      	uxtb	r3, r3
}
 800e866:	4618      	mov	r0, r3
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
	...

0800e874 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e87e:	4b0b      	ldr	r3, [pc, #44]	; (800e8ac <SD_CheckStatus+0x38>)
 800e880:	2201      	movs	r2, #1
 800e882:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e884:	f7ff ffca 	bl	800e81c <BSP_SD_GetCardState>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d107      	bne.n	800e89e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e88e:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <SD_CheckStatus+0x38>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f023 0301 	bic.w	r3, r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <SD_CheckStatus+0x38>)
 800e89c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e89e:	4b03      	ldr	r3, [pc, #12]	; (800e8ac <SD_CheckStatus+0x38>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	b2db      	uxtb	r3, r3
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	200002c5 	.word	0x200002c5

0800e8b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e8ba:	4b0b      	ldr	r3, [pc, #44]	; (800e8e8 <SD_initialize+0x38>)
 800e8bc:	2201      	movs	r2, #1
 800e8be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e8c0:	f7ff ff58 	bl	800e774 <BSP_SD_Init>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d107      	bne.n	800e8da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff ffd1 	bl	800e874 <SD_CheckStatus>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	4b04      	ldr	r3, [pc, #16]	; (800e8e8 <SD_initialize+0x38>)
 800e8d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e8da:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <SD_initialize+0x38>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	b2db      	uxtb	r3, r3
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	200002c5 	.word	0x200002c5

0800e8ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff ffbb 	bl	800e874 <SD_CheckStatus>
 800e8fe:	4603      	mov	r3, r0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e91c:	f04f 33ff 	mov.w	r3, #4294967295
 800e920:	683a      	ldr	r2, [r7, #0]
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	68b8      	ldr	r0, [r7, #8]
 800e926:	f7ff ff3d 	bl	800e7a4 <BSP_SD_ReadBlocks>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d107      	bne.n	800e940 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e930:	bf00      	nop
 800e932:	f7ff ff73 	bl	800e81c <BSP_SD_GetCardState>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1fa      	bne.n	800e932 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b086      	sub	sp, #24
 800e94e:	af00      	add	r7, sp, #0
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
 800e954:	603b      	str	r3, [r7, #0]
 800e956:	4603      	mov	r3, r0
 800e958:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e95e:	f04f 33ff 	mov.w	r3, #4294967295
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	6879      	ldr	r1, [r7, #4]
 800e966:	68b8      	ldr	r0, [r7, #8]
 800e968:	f7ff ff3a 	bl	800e7e0 <BSP_SD_WriteBlocks>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d107      	bne.n	800e982 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e972:	bf00      	nop
 800e974:	f7ff ff52 	bl	800e81c <BSP_SD_GetCardState>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1fa      	bne.n	800e974 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e97e:	2300      	movs	r3, #0
 800e980:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e982:	7dfb      	ldrb	r3, [r7, #23]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08c      	sub	sp, #48	; 0x30
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	603a      	str	r2, [r7, #0]
 800e996:	71fb      	strb	r3, [r7, #7]
 800e998:	460b      	mov	r3, r1
 800e99a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e9a2:	4b25      	ldr	r3, [pc, #148]	; (800ea38 <SD_ioctl+0xac>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	f003 0301 	and.w	r3, r3, #1
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d001      	beq.n	800e9b4 <SD_ioctl+0x28>
 800e9b0:	2303      	movs	r3, #3
 800e9b2:	e03c      	b.n	800ea2e <SD_ioctl+0xa2>

  switch (cmd)
 800e9b4:	79bb      	ldrb	r3, [r7, #6]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d834      	bhi.n	800ea24 <SD_ioctl+0x98>
 800e9ba:	a201      	add	r2, pc, #4	; (adr r2, 800e9c0 <SD_ioctl+0x34>)
 800e9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c0:	0800e9d1 	.word	0x0800e9d1
 800e9c4:	0800e9d9 	.word	0x0800e9d9
 800e9c8:	0800e9f1 	.word	0x0800e9f1
 800e9cc:	0800ea0b 	.word	0x0800ea0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9d6:	e028      	b.n	800ea2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e9d8:	f107 030c 	add.w	r3, r7, #12
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff ff2d 	bl	800e83c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e9ee:	e01c      	b.n	800ea2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e9f0:	f107 030c 	add.w	r3, r7, #12
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7ff ff21 	bl	800e83c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea08:	e00f      	b.n	800ea2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea0a:	f107 030c 	add.w	r3, r7, #12
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7ff ff14 	bl	800e83c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	0a5a      	lsrs	r2, r3, #9
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea22:	e002      	b.n	800ea2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ea24:	2304      	movs	r3, #4
 800ea26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ea2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3730      	adds	r7, #48	; 0x30
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	200002c5 	.word	0x200002c5

0800ea3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea46:	79fb      	ldrb	r3, [r7, #7]
 800ea48:	4a08      	ldr	r2, [pc, #32]	; (800ea6c <disk_status+0x30>)
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	79fa      	ldrb	r2, [r7, #7]
 800ea54:	4905      	ldr	r1, [pc, #20]	; (800ea6c <disk_status+0x30>)
 800ea56:	440a      	add	r2, r1
 800ea58:	7a12      	ldrb	r2, [r2, #8]
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	4798      	blx	r3
 800ea5e:	4603      	mov	r3, r0
 800ea60:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ea62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20005d48 	.word	0x20005d48

0800ea70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	4a0d      	ldr	r2, [pc, #52]	; (800eab8 <disk_initialize+0x48>)
 800ea82:	5cd3      	ldrb	r3, [r2, r3]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d111      	bne.n	800eaac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ea88:	79fb      	ldrb	r3, [r7, #7]
 800ea8a:	4a0b      	ldr	r2, [pc, #44]	; (800eab8 <disk_initialize+0x48>)
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ea90:	79fb      	ldrb	r3, [r7, #7]
 800ea92:	4a09      	ldr	r2, [pc, #36]	; (800eab8 <disk_initialize+0x48>)
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	79fa      	ldrb	r2, [r7, #7]
 800ea9e:	4906      	ldr	r1, [pc, #24]	; (800eab8 <disk_initialize+0x48>)
 800eaa0:	440a      	add	r2, r1
 800eaa2:	7a12      	ldrb	r2, [r2, #8]
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	4798      	blx	r3
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20005d48 	.word	0x20005d48

0800eabc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b087      	sub	sp, #28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60b9      	str	r1, [r7, #8]
 800eac4:	607a      	str	r2, [r7, #4]
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	4a0a      	ldr	r2, [pc, #40]	; (800eaf8 <disk_read+0x3c>)
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4413      	add	r3, r2
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	689c      	ldr	r4, [r3, #8]
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
 800eada:	4a07      	ldr	r2, [pc, #28]	; (800eaf8 <disk_read+0x3c>)
 800eadc:	4413      	add	r3, r2
 800eade:	7a18      	ldrb	r0, [r3, #8]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	47a0      	blx	r4
 800eae8:	4603      	mov	r3, r0
 800eaea:	75fb      	strb	r3, [r7, #23]
  return res;
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	371c      	adds	r7, #28
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd90      	pop	{r4, r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20005d48 	.word	0x20005d48

0800eafc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60b9      	str	r1, [r7, #8]
 800eb04:	607a      	str	r2, [r7, #4]
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	4a0a      	ldr	r2, [pc, #40]	; (800eb38 <disk_write+0x3c>)
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	68dc      	ldr	r4, [r3, #12]
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
 800eb1a:	4a07      	ldr	r2, [pc, #28]	; (800eb38 <disk_write+0x3c>)
 800eb1c:	4413      	add	r3, r2
 800eb1e:	7a18      	ldrb	r0, [r3, #8]
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	68b9      	ldr	r1, [r7, #8]
 800eb26:	47a0      	blx	r4
 800eb28:	4603      	mov	r3, r0
 800eb2a:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd90      	pop	{r4, r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20005d48 	.word	0x20005d48

0800eb3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	603a      	str	r2, [r7, #0]
 800eb46:	71fb      	strb	r3, [r7, #7]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	4a09      	ldr	r2, [pc, #36]	; (800eb74 <disk_ioctl+0x38>)
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	79fa      	ldrb	r2, [r7, #7]
 800eb5a:	4906      	ldr	r1, [pc, #24]	; (800eb74 <disk_ioctl+0x38>)
 800eb5c:	440a      	add	r2, r1
 800eb5e:	7a10      	ldrb	r0, [r2, #8]
 800eb60:	79b9      	ldrb	r1, [r7, #6]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4798      	blx	r3
 800eb66:	4603      	mov	r3, r0
 800eb68:	73fb      	strb	r3, [r7, #15]
  return res;
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20005d48 	.word	0x20005d48

0800eb78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3301      	adds	r3, #1
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eb88:	89fb      	ldrh	r3, [r7, #14]
 800eb8a:	021b      	lsls	r3, r3, #8
 800eb8c:	b21a      	sxth	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	b21b      	sxth	r3, r3
 800eb94:	4313      	orrs	r3, r2
 800eb96:	b21b      	sxth	r3, r3
 800eb98:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eb9a:	89fb      	ldrh	r3, [r7, #14]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	021b      	lsls	r3, r3, #8
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	3202      	adds	r2, #2
 800ebc0:	7812      	ldrb	r2, [r2, #0]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	021b      	lsls	r3, r3, #8
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	3201      	adds	r2, #1
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	021b      	lsls	r3, r3, #8
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	7812      	ldrb	r2, [r2, #0]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
	return rv;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	887a      	ldrh	r2, [r7, #2]
 800ec02:	b2d2      	uxtb	r2, r2
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	887b      	ldrh	r3, [r7, #2]
 800ec08:	0a1b      	lsrs	r3, r3, #8
 800ec0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	607a      	str	r2, [r7, #4]
 800ec12:	887a      	ldrh	r2, [r7, #2]
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	701a      	strb	r2, [r3, #0]
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	701a      	strb	r2, [r3, #0]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	0a1b      	lsrs	r3, r3, #8
 800ec3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	b2d2      	uxtb	r2, r2
 800ec4a:	701a      	strb	r2, [r3, #0]
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	0a1b      	lsrs	r3, r3, #8
 800ec50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	b2d2      	uxtb	r2, r2
 800ec5c:	701a      	strb	r2, [r3, #0]
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	0a1b      	lsrs	r3, r3, #8
 800ec62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	607a      	str	r2, [r7, #4]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	b2d2      	uxtb	r2, r2
 800ec6e:	701a      	strb	r2, [r3, #0]
}
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ec7c:	b480      	push	{r7}
 800ec7e:	b087      	sub	sp, #28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00d      	beq.n	800ecb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ec96:	693a      	ldr	r2, [r7, #16]
 800ec98:	1c53      	adds	r3, r2, #1
 800ec9a:	613b      	str	r3, [r7, #16]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	1c59      	adds	r1, r3, #1
 800eca0:	6179      	str	r1, [r7, #20]
 800eca2:	7812      	ldrb	r2, [r2, #0]
 800eca4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	607b      	str	r3, [r7, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1f1      	bne.n	800ec96 <mem_cpy+0x1a>
	}
}
 800ecb2:	bf00      	nop
 800ecb4:	371c      	adds	r7, #28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ecbe:	b480      	push	{r7}
 800ecc0:	b087      	sub	sp, #28
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	60f8      	str	r0, [r7, #12]
 800ecc6:	60b9      	str	r1, [r7, #8]
 800ecc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	617a      	str	r2, [r7, #20]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	b2d2      	uxtb	r2, r2
 800ecd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	607b      	str	r3, [r7, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1f3      	bne.n	800ecce <mem_set+0x10>
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ecf4:	b480      	push	{r7}
 800ecf6:	b089      	sub	sp, #36	; 0x24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	61fb      	str	r3, [r7, #28]
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	1c5a      	adds	r2, r3, #1
 800ed10:	61fa      	str	r2, [r7, #28]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	4619      	mov	r1, r3
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	61ba      	str	r2, [r7, #24]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	1acb      	subs	r3, r1, r3
 800ed20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	607b      	str	r3, [r7, #4]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <mem_cmp+0x40>
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d0eb      	beq.n	800ed0c <mem_cmp+0x18>

	return r;
 800ed34:	697b      	ldr	r3, [r7, #20]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3724      	adds	r7, #36	; 0x24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ed42:	b480      	push	{r7}
 800ed44:	b083      	sub	sp, #12
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ed4c:	e002      	b.n	800ed54 <chk_chr+0x12>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3301      	adds	r3, #1
 800ed52:	607b      	str	r3, [r7, #4]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d005      	beq.n	800ed68 <chk_chr+0x26>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	461a      	mov	r2, r3
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d1f2      	bne.n	800ed4e <chk_chr+0xc>
	return *str;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ed82:	2300      	movs	r3, #0
 800ed84:	60bb      	str	r3, [r7, #8]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	60fb      	str	r3, [r7, #12]
 800ed8a:	e029      	b.n	800ede0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ed8c:	4a27      	ldr	r2, [pc, #156]	; (800ee2c <chk_lock+0xb4>)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	011b      	lsls	r3, r3, #4
 800ed92:	4413      	add	r3, r2
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d01d      	beq.n	800edd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed9a:	4a24      	ldr	r2, [pc, #144]	; (800ee2c <chk_lock+0xb4>)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	011b      	lsls	r3, r3, #4
 800eda0:	4413      	add	r3, r2
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d116      	bne.n	800edda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800edac:	4a1f      	ldr	r2, [pc, #124]	; (800ee2c <chk_lock+0xb4>)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	011b      	lsls	r3, r3, #4
 800edb2:	4413      	add	r3, r2
 800edb4:	3304      	adds	r3, #4
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d10c      	bne.n	800edda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800edc0:	4a1a      	ldr	r2, [pc, #104]	; (800ee2c <chk_lock+0xb4>)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	011b      	lsls	r3, r3, #4
 800edc6:	4413      	add	r3, r2
 800edc8:	3308      	adds	r3, #8
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d102      	bne.n	800edda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800edd4:	e007      	b.n	800ede6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800edd6:	2301      	movs	r3, #1
 800edd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3301      	adds	r3, #1
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d9d2      	bls.n	800ed8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d109      	bne.n	800ee00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d102      	bne.n	800edf8 <chk_lock+0x80>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d101      	bne.n	800edfc <chk_lock+0x84>
 800edf8:	2300      	movs	r3, #0
 800edfa:	e010      	b.n	800ee1e <chk_lock+0xa6>
 800edfc:	2312      	movs	r3, #18
 800edfe:	e00e      	b.n	800ee1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d108      	bne.n	800ee18 <chk_lock+0xa0>
 800ee06:	4a09      	ldr	r2, [pc, #36]	; (800ee2c <chk_lock+0xb4>)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	011b      	lsls	r3, r3, #4
 800ee0c:	4413      	add	r3, r2
 800ee0e:	330c      	adds	r3, #12
 800ee10:	881b      	ldrh	r3, [r3, #0]
 800ee12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee16:	d101      	bne.n	800ee1c <chk_lock+0xa4>
 800ee18:	2310      	movs	r3, #16
 800ee1a:	e000      	b.n	800ee1e <chk_lock+0xa6>
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	20005d28 	.word	0x20005d28

0800ee30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ee36:	2300      	movs	r3, #0
 800ee38:	607b      	str	r3, [r7, #4]
 800ee3a:	e002      	b.n	800ee42 <enq_lock+0x12>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	607b      	str	r3, [r7, #4]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d806      	bhi.n	800ee56 <enq_lock+0x26>
 800ee48:	4a09      	ldr	r2, [pc, #36]	; (800ee70 <enq_lock+0x40>)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	011b      	lsls	r3, r3, #4
 800ee4e:	4413      	add	r3, r2
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1f2      	bne.n	800ee3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	bf14      	ite	ne
 800ee5c:	2301      	movne	r3, #1
 800ee5e:	2300      	moveq	r3, #0
 800ee60:	b2db      	uxtb	r3, r3
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	370c      	adds	r7, #12
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	20005d28 	.word	0x20005d28

0800ee74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	e01f      	b.n	800eec4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ee84:	4a41      	ldr	r2, [pc, #260]	; (800ef8c <inc_lock+0x118>)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	011b      	lsls	r3, r3, #4
 800ee8a:	4413      	add	r3, r2
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d113      	bne.n	800eebe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ee96:	4a3d      	ldr	r2, [pc, #244]	; (800ef8c <inc_lock+0x118>)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	4413      	add	r3, r2
 800ee9e:	3304      	adds	r3, #4
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d109      	bne.n	800eebe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eeaa:	4a38      	ldr	r2, [pc, #224]	; (800ef8c <inc_lock+0x118>)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	011b      	lsls	r3, r3, #4
 800eeb0:	4413      	add	r3, r2
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d006      	beq.n	800eecc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3301      	adds	r3, #1
 800eec2:	60fb      	str	r3, [r7, #12]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d9dc      	bls.n	800ee84 <inc_lock+0x10>
 800eeca:	e000      	b.n	800eece <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eecc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d132      	bne.n	800ef3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eed4:	2300      	movs	r3, #0
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	e002      	b.n	800eee0 <inc_lock+0x6c>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3301      	adds	r3, #1
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d806      	bhi.n	800eef4 <inc_lock+0x80>
 800eee6:	4a29      	ldr	r2, [pc, #164]	; (800ef8c <inc_lock+0x118>)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	4413      	add	r3, r2
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1f2      	bne.n	800eeda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d101      	bne.n	800eefe <inc_lock+0x8a>
 800eefa:	2300      	movs	r3, #0
 800eefc:	e040      	b.n	800ef80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	4922      	ldr	r1, [pc, #136]	; (800ef8c <inc_lock+0x118>)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	440b      	add	r3, r1
 800ef0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689a      	ldr	r2, [r3, #8]
 800ef10:	491e      	ldr	r1, [pc, #120]	; (800ef8c <inc_lock+0x118>)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	011b      	lsls	r3, r3, #4
 800ef16:	440b      	add	r3, r1
 800ef18:	3304      	adds	r3, #4
 800ef1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	695a      	ldr	r2, [r3, #20]
 800ef20:	491a      	ldr	r1, [pc, #104]	; (800ef8c <inc_lock+0x118>)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	011b      	lsls	r3, r3, #4
 800ef26:	440b      	add	r3, r1
 800ef28:	3308      	adds	r3, #8
 800ef2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ef2c:	4a17      	ldr	r2, [pc, #92]	; (800ef8c <inc_lock+0x118>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	4413      	add	r3, r2
 800ef34:	330c      	adds	r3, #12
 800ef36:	2200      	movs	r2, #0
 800ef38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <inc_lock+0xe0>
 800ef40:	4a12      	ldr	r2, [pc, #72]	; (800ef8c <inc_lock+0x118>)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	011b      	lsls	r3, r3, #4
 800ef46:	4413      	add	r3, r2
 800ef48:	330c      	adds	r3, #12
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <inc_lock+0xe0>
 800ef50:	2300      	movs	r3, #0
 800ef52:	e015      	b.n	800ef80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d108      	bne.n	800ef6c <inc_lock+0xf8>
 800ef5a:	4a0c      	ldr	r2, [pc, #48]	; (800ef8c <inc_lock+0x118>)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	4413      	add	r3, r2
 800ef62:	330c      	adds	r3, #12
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	3301      	adds	r3, #1
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	e001      	b.n	800ef70 <inc_lock+0xfc>
 800ef6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef70:	4906      	ldr	r1, [pc, #24]	; (800ef8c <inc_lock+0x118>)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	440b      	add	r3, r1
 800ef78:	330c      	adds	r3, #12
 800ef7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	3301      	adds	r3, #1
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3714      	adds	r7, #20
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	20005d28 	.word	0x20005d28

0800ef90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	607b      	str	r3, [r7, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d825      	bhi.n	800eff0 <dec_lock+0x60>
		n = Files[i].ctr;
 800efa4:	4a17      	ldr	r2, [pc, #92]	; (800f004 <dec_lock+0x74>)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	011b      	lsls	r3, r3, #4
 800efaa:	4413      	add	r3, r2
 800efac:	330c      	adds	r3, #12
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800efb2:	89fb      	ldrh	r3, [r7, #14]
 800efb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efb8:	d101      	bne.n	800efbe <dec_lock+0x2e>
 800efba:	2300      	movs	r3, #0
 800efbc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800efbe:	89fb      	ldrh	r3, [r7, #14]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <dec_lock+0x3a>
 800efc4:	89fb      	ldrh	r3, [r7, #14]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800efca:	4a0e      	ldr	r2, [pc, #56]	; (800f004 <dec_lock+0x74>)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	011b      	lsls	r3, r3, #4
 800efd0:	4413      	add	r3, r2
 800efd2:	330c      	adds	r3, #12
 800efd4:	89fa      	ldrh	r2, [r7, #14]
 800efd6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800efd8:	89fb      	ldrh	r3, [r7, #14]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d105      	bne.n	800efea <dec_lock+0x5a>
 800efde:	4a09      	ldr	r2, [pc, #36]	; (800f004 <dec_lock+0x74>)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	011b      	lsls	r3, r3, #4
 800efe4:	4413      	add	r3, r2
 800efe6:	2200      	movs	r2, #0
 800efe8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	737b      	strb	r3, [r7, #13]
 800efee:	e001      	b.n	800eff4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eff0:	2302      	movs	r3, #2
 800eff2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eff4:	7b7b      	ldrb	r3, [r7, #13]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop
 800f004:	20005d28 	.word	0x20005d28

0800f008 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f010:	2300      	movs	r3, #0
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e010      	b.n	800f038 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f016:	4a0d      	ldr	r2, [pc, #52]	; (800f04c <clear_lock+0x44>)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	011b      	lsls	r3, r3, #4
 800f01c:	4413      	add	r3, r2
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	429a      	cmp	r2, r3
 800f024:	d105      	bne.n	800f032 <clear_lock+0x2a>
 800f026:	4a09      	ldr	r2, [pc, #36]	; (800f04c <clear_lock+0x44>)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	011b      	lsls	r3, r3, #4
 800f02c:	4413      	add	r3, r2
 800f02e:	2200      	movs	r2, #0
 800f030:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3301      	adds	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d9eb      	bls.n	800f016 <clear_lock+0xe>
	}
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	20005d28 	.word	0x20005d28

0800f050 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	78db      	ldrb	r3, [r3, #3]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d034      	beq.n	800f0ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f068:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	7858      	ldrb	r0, [r3, #1]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f074:	2301      	movs	r3, #1
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	f7ff fd40 	bl	800eafc <disk_write>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d002      	beq.n	800f088 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f082:	2301      	movs	r3, #1
 800f084:	73fb      	strb	r3, [r7, #15]
 800f086:	e022      	b.n	800f0ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	697a      	ldr	r2, [r7, #20]
 800f094:	1ad2      	subs	r2, r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	69db      	ldr	r3, [r3, #28]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d217      	bcs.n	800f0ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	789b      	ldrb	r3, [r3, #2]
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	e010      	b.n	800f0c8 <sync_window+0x78>
					wsect += fs->fsize;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	7858      	ldrb	r0, [r3, #1]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	f7ff fd1d 	bl	800eafc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	613b      	str	r3, [r7, #16]
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d8eb      	bhi.n	800f0a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3718      	adds	r7, #24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ea:	683a      	ldr	r2, [r7, #0]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d01b      	beq.n	800f128 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7ff ffad 	bl	800f050 <sync_window>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d113      	bne.n	800f128 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	7858      	ldrb	r0, [r3, #1]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f10a:	2301      	movs	r3, #1
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	f7ff fcd5 	bl	800eabc <disk_read>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d004      	beq.n	800f122 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f11e:	2301      	movs	r3, #1
 800f120:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f128:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
	...

0800f134 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7ff ff87 	bl	800f050 <sync_window>
 800f142:	4603      	mov	r3, r0
 800f144:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f146:	7bfb      	ldrb	r3, [r7, #15]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d159      	bne.n	800f200 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b03      	cmp	r3, #3
 800f152:	d149      	bne.n	800f1e8 <sync_fs+0xb4>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	791b      	ldrb	r3, [r3, #4]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d145      	bne.n	800f1e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	899b      	ldrh	r3, [r3, #12]
 800f166:	461a      	mov	r2, r3
 800f168:	2100      	movs	r1, #0
 800f16a:	f7ff fda8 	bl	800ecbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	3334      	adds	r3, #52	; 0x34
 800f172:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f176:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff fd37 	bl	800ebee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3334      	adds	r3, #52	; 0x34
 800f184:	4921      	ldr	r1, [pc, #132]	; (800f20c <sync_fs+0xd8>)
 800f186:	4618      	mov	r0, r3
 800f188:	f7ff fd4c 	bl	800ec24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3334      	adds	r3, #52	; 0x34
 800f190:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f194:	491e      	ldr	r1, [pc, #120]	; (800f210 <sync_fs+0xdc>)
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff fd44 	bl	800ec24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3334      	adds	r3, #52	; 0x34
 800f1a0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	f7ff fd3a 	bl	800ec24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3334      	adds	r3, #52	; 0x34
 800f1b4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	4619      	mov	r1, r3
 800f1be:	4610      	mov	r0, r2
 800f1c0:	f7ff fd30 	bl	800ec24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a1b      	ldr	r3, [r3, #32]
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	7858      	ldrb	r0, [r3, #1]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1dc:	2301      	movs	r3, #1
 800f1de:	f7ff fc8d 	bl	800eafc <disk_write>
			fs->fsi_flag = 0;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	785b      	ldrb	r3, [r3, #1]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff fca3 	bl	800eb3c <disk_ioctl>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <sync_fs+0xcc>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f200:	7bfb      	ldrb	r3, [r7, #15]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	41615252 	.word	0x41615252
 800f210:	61417272 	.word	0x61417272

0800f214 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	3b02      	subs	r3, #2
 800f222:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	3b02      	subs	r3, #2
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d301      	bcc.n	800f234 <clust2sect+0x20>
 800f230:	2300      	movs	r3, #0
 800f232:	e008      	b.n	800f246 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	895b      	ldrh	r3, [r3, #10]
 800f238:	461a      	mov	r2, r3
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	fb03 f202 	mul.w	r2, r3, r2
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f244:	4413      	add	r3, r2
}
 800f246:	4618      	mov	r0, r3
 800f248:	370c      	adds	r7, #12
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b086      	sub	sp, #24
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d904      	bls.n	800f272 <get_fat+0x20>
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	699b      	ldr	r3, [r3, #24]
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d302      	bcc.n	800f278 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f272:	2301      	movs	r3, #1
 800f274:	617b      	str	r3, [r7, #20]
 800f276:	e0bb      	b.n	800f3f0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f278:	f04f 33ff 	mov.w	r3, #4294967295
 800f27c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b03      	cmp	r3, #3
 800f284:	f000 8083 	beq.w	800f38e <get_fat+0x13c>
 800f288:	2b03      	cmp	r3, #3
 800f28a:	f300 80a7 	bgt.w	800f3dc <get_fat+0x18a>
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d002      	beq.n	800f298 <get_fat+0x46>
 800f292:	2b02      	cmp	r3, #2
 800f294:	d056      	beq.n	800f344 <get_fat+0xf2>
 800f296:	e0a1      	b.n	800f3dc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	085b      	lsrs	r3, r3, #1
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	899b      	ldrh	r3, [r3, #12]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2b6:	4413      	add	r3, r2
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f7ff ff0c 	bl	800f0d8 <move_window>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f040 808d 	bne.w	800f3e2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	60fa      	str	r2, [r7, #12]
 800f2ce:	693a      	ldr	r2, [r7, #16]
 800f2d0:	8992      	ldrh	r2, [r2, #12]
 800f2d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2d6:	fb01 f202 	mul.w	r2, r1, r2
 800f2da:	1a9b      	subs	r3, r3, r2
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	4413      	add	r3, r2
 800f2e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	899b      	ldrh	r3, [r3, #12]
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	6938      	ldr	r0, [r7, #16]
 800f2fc:	f7ff feec 	bl	800f0d8 <move_window>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d16f      	bne.n	800f3e6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	899b      	ldrh	r3, [r3, #12]
 800f30a:	461a      	mov	r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f312:	fb01 f202 	mul.w	r2, r1, r2
 800f316:	1a9b      	subs	r3, r3, r2
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	4413      	add	r3, r2
 800f31c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f320:	021b      	lsls	r3, r3, #8
 800f322:	461a      	mov	r2, r3
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	4313      	orrs	r3, r2
 800f328:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	f003 0301 	and.w	r3, r3, #1
 800f330:	2b00      	cmp	r3, #0
 800f332:	d002      	beq.n	800f33a <get_fat+0xe8>
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	091b      	lsrs	r3, r3, #4
 800f338:	e002      	b.n	800f340 <get_fat+0xee>
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f340:	617b      	str	r3, [r7, #20]
			break;
 800f342:	e055      	b.n	800f3f0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	899b      	ldrh	r3, [r3, #12]
 800f34c:	085b      	lsrs	r3, r3, #1
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4619      	mov	r1, r3
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	fbb3 f3f1 	udiv	r3, r3, r1
 800f358:	4413      	add	r3, r2
 800f35a:	4619      	mov	r1, r3
 800f35c:	6938      	ldr	r0, [r7, #16]
 800f35e:	f7ff febb 	bl	800f0d8 <move_window>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d140      	bne.n	800f3ea <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	005b      	lsls	r3, r3, #1
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	8992      	ldrh	r2, [r2, #12]
 800f376:	fbb3 f0f2 	udiv	r0, r3, r2
 800f37a:	fb00 f202 	mul.w	r2, r0, r2
 800f37e:	1a9b      	subs	r3, r3, r2
 800f380:	440b      	add	r3, r1
 800f382:	4618      	mov	r0, r3
 800f384:	f7ff fbf8 	bl	800eb78 <ld_word>
 800f388:	4603      	mov	r3, r0
 800f38a:	617b      	str	r3, [r7, #20]
			break;
 800f38c:	e030      	b.n	800f3f0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	899b      	ldrh	r3, [r3, #12]
 800f396:	089b      	lsrs	r3, r3, #2
 800f398:	b29b      	uxth	r3, r3
 800f39a:	4619      	mov	r1, r3
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6938      	ldr	r0, [r7, #16]
 800f3a8:	f7ff fe96 	bl	800f0d8 <move_window>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d11d      	bne.n	800f3ee <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	8992      	ldrh	r2, [r2, #12]
 800f3c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3c4:	fb00 f202 	mul.w	r2, r0, r2
 800f3c8:	1a9b      	subs	r3, r3, r2
 800f3ca:	440b      	add	r3, r1
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fbeb 	bl	800eba8 <ld_dword>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f3d8:	617b      	str	r3, [r7, #20]
			break;
 800f3da:	e009      	b.n	800f3f0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f3dc:	2301      	movs	r3, #1
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e006      	b.n	800f3f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3e2:	bf00      	nop
 800f3e4:	e004      	b.n	800f3f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f3e6:	bf00      	nop
 800f3e8:	e002      	b.n	800f3f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3ea:	bf00      	nop
 800f3ec:	e000      	b.n	800f3f0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3ee:	bf00      	nop
		}
	}

	return val;
 800f3f0:	697b      	ldr	r3, [r7, #20]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f3fa:	b590      	push	{r4, r7, lr}
 800f3fc:	b089      	sub	sp, #36	; 0x24
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f406:	2302      	movs	r3, #2
 800f408:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	f240 8102 	bls.w	800f616 <put_fat+0x21c>
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	699b      	ldr	r3, [r3, #24]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	429a      	cmp	r2, r3
 800f41a:	f080 80fc 	bcs.w	800f616 <put_fat+0x21c>
		switch (fs->fs_type) {
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2b03      	cmp	r3, #3
 800f424:	f000 80b6 	beq.w	800f594 <put_fat+0x19a>
 800f428:	2b03      	cmp	r3, #3
 800f42a:	f300 80fd 	bgt.w	800f628 <put_fat+0x22e>
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d003      	beq.n	800f43a <put_fat+0x40>
 800f432:	2b02      	cmp	r3, #2
 800f434:	f000 8083 	beq.w	800f53e <put_fat+0x144>
 800f438:	e0f6      	b.n	800f628 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	61bb      	str	r3, [r7, #24]
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	085b      	lsrs	r3, r3, #1
 800f442:	69ba      	ldr	r2, [r7, #24]
 800f444:	4413      	add	r3, r2
 800f446:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	899b      	ldrh	r3, [r3, #12]
 800f450:	4619      	mov	r1, r3
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	fbb3 f3f1 	udiv	r3, r3, r1
 800f458:	4413      	add	r3, r2
 800f45a:	4619      	mov	r1, r3
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff fe3b 	bl	800f0d8 <move_window>
 800f462:	4603      	mov	r3, r0
 800f464:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f466:	7ffb      	ldrb	r3, [r7, #31]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f040 80d6 	bne.w	800f61a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	61ba      	str	r2, [r7, #24]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	8992      	ldrh	r2, [r2, #12]
 800f47e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f482:	fb00 f202 	mul.w	r2, r0, r2
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	440b      	add	r3, r1
 800f48a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00d      	beq.n	800f4b2 <put_fat+0xb8>
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	b25b      	sxtb	r3, r3
 800f49c:	f003 030f 	and.w	r3, r3, #15
 800f4a0:	b25a      	sxtb	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	011b      	lsls	r3, r3, #4
 800f4a8:	b25b      	sxtb	r3, r3
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	b25b      	sxtb	r3, r3
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	e001      	b.n	800f4b6 <put_fat+0xbc>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	697a      	ldr	r2, [r7, #20]
 800f4b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	899b      	ldrh	r3, [r3, #12]
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f4d0:	4413      	add	r3, r2
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7ff fdff 	bl	800f0d8 <move_window>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4de:	7ffb      	ldrb	r3, [r7, #31]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 809c 	bne.w	800f61e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	899b      	ldrh	r3, [r3, #12]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4f8:	fb00 f202 	mul.w	r2, r0, r2
 800f4fc:	1a9b      	subs	r3, r3, r2
 800f4fe:	440b      	add	r3, r1
 800f500:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <put_fat+0x11a>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	091b      	lsrs	r3, r3, #4
 800f510:	b2db      	uxtb	r3, r3
 800f512:	e00e      	b.n	800f532 <put_fat+0x138>
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	b25b      	sxtb	r3, r3
 800f51a:	f023 030f 	bic.w	r3, r3, #15
 800f51e:	b25a      	sxtb	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	0a1b      	lsrs	r3, r3, #8
 800f524:	b25b      	sxtb	r3, r3
 800f526:	f003 030f 	and.w	r3, r3, #15
 800f52a:	b25b      	sxtb	r3, r3
 800f52c:	4313      	orrs	r3, r2
 800f52e:	b25b      	sxtb	r3, r3
 800f530:	b2db      	uxtb	r3, r3
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2201      	movs	r2, #1
 800f53a:	70da      	strb	r2, [r3, #3]
			break;
 800f53c:	e074      	b.n	800f628 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	899b      	ldrh	r3, [r3, #12]
 800f546:	085b      	lsrs	r3, r3, #1
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4619      	mov	r1, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f552:	4413      	add	r3, r2
 800f554:	4619      	mov	r1, r3
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f7ff fdbe 	bl	800f0d8 <move_window>
 800f55c:	4603      	mov	r3, r0
 800f55e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f560:	7ffb      	ldrb	r3, [r7, #31]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d15d      	bne.n	800f622 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	8992      	ldrh	r2, [r2, #12]
 800f574:	fbb3 f0f2 	udiv	r0, r3, r2
 800f578:	fb00 f202 	mul.w	r2, r0, r2
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	440b      	add	r3, r1
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	b292      	uxth	r2, r2
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff fb31 	bl	800ebee <st_word>
			fs->wflag = 1;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2201      	movs	r2, #1
 800f590:	70da      	strb	r2, [r3, #3]
			break;
 800f592:	e049      	b.n	800f628 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	899b      	ldrh	r3, [r3, #12]
 800f59c:	089b      	lsrs	r3, r3, #2
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5a8:	4413      	add	r3, r2
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f7ff fd93 	bl	800f0d8 <move_window>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5b6:	7ffb      	ldrb	r3, [r7, #31]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d134      	bne.n	800f626 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	8992      	ldrh	r2, [r2, #12]
 800f5d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5d4:	fb00 f202 	mul.w	r2, r0, r2
 800f5d8:	1a9b      	subs	r3, r3, r2
 800f5da:	440b      	add	r3, r1
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff fae3 	bl	800eba8 <ld_dword>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f5e8:	4323      	orrs	r3, r4
 800f5ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	8992      	ldrh	r2, [r2, #12]
 800f5fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5fe:	fb00 f202 	mul.w	r2, r0, r2
 800f602:	1a9b      	subs	r3, r3, r2
 800f604:	440b      	add	r3, r1
 800f606:	6879      	ldr	r1, [r7, #4]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fb0b 	bl	800ec24 <st_dword>
			fs->wflag = 1;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2201      	movs	r2, #1
 800f612:	70da      	strb	r2, [r3, #3]
			break;
 800f614:	e008      	b.n	800f628 <put_fat+0x22e>
		}
	}
 800f616:	bf00      	nop
 800f618:	e006      	b.n	800f628 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f61a:	bf00      	nop
 800f61c:	e004      	b.n	800f628 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f61e:	bf00      	nop
 800f620:	e002      	b.n	800f628 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f622:	bf00      	nop
 800f624:	e000      	b.n	800f628 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f626:	bf00      	nop
	return res;
 800f628:	7ffb      	ldrb	r3, [r7, #31]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3724      	adds	r7, #36	; 0x24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd90      	pop	{r4, r7, pc}

0800f632 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b088      	sub	sp, #32
 800f636:	af00      	add	r7, sp, #0
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
 800f63c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d904      	bls.n	800f658 <remove_chain+0x26>
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	429a      	cmp	r2, r3
 800f656:	d301      	bcc.n	800f65c <remove_chain+0x2a>
 800f658:	2302      	movs	r3, #2
 800f65a:	e04b      	b.n	800f6f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d00c      	beq.n	800f67c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f662:	f04f 32ff 	mov.w	r2, #4294967295
 800f666:	6879      	ldr	r1, [r7, #4]
 800f668:	69b8      	ldr	r0, [r7, #24]
 800f66a:	f7ff fec6 	bl	800f3fa <put_fat>
 800f66e:	4603      	mov	r3, r0
 800f670:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f672:	7ffb      	ldrb	r3, [r7, #31]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <remove_chain+0x4a>
 800f678:	7ffb      	ldrb	r3, [r7, #31]
 800f67a:	e03b      	b.n	800f6f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f67c:	68b9      	ldr	r1, [r7, #8]
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff fde7 	bl	800f252 <get_fat>
 800f684:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d031      	beq.n	800f6f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d101      	bne.n	800f696 <remove_chain+0x64>
 800f692:	2302      	movs	r3, #2
 800f694:	e02e      	b.n	800f6f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69c:	d101      	bne.n	800f6a2 <remove_chain+0x70>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e028      	b.n	800f6f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	68b9      	ldr	r1, [r7, #8]
 800f6a6:	69b8      	ldr	r0, [r7, #24]
 800f6a8:	f7ff fea7 	bl	800f3fa <put_fat>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f6b0:	7ffb      	ldrb	r3, [r7, #31]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <remove_chain+0x88>
 800f6b6:	7ffb      	ldrb	r3, [r7, #31]
 800f6b8:	e01c      	b.n	800f6f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	695a      	ldr	r2, [r3, #20]
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	699b      	ldr	r3, [r3, #24]
 800f6c2:	3b02      	subs	r3, #2
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d20b      	bcs.n	800f6e0 <remove_chain+0xae>
			fs->free_clst++;
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	695b      	ldr	r3, [r3, #20]
 800f6cc:	1c5a      	adds	r2, r3, #1
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	791b      	ldrb	r3, [r3, #4]
 800f6d6:	f043 0301 	orr.w	r3, r3, #1
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	699b      	ldr	r3, [r3, #24]
 800f6e8:	68ba      	ldr	r2, [r7, #8]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d3c6      	bcc.n	800f67c <remove_chain+0x4a>
 800f6ee:	e000      	b.n	800f6f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f6f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3720      	adds	r7, #32
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b088      	sub	sp, #32
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d10d      	bne.n	800f72e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d004      	beq.n	800f728 <create_chain+0x2c>
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	69ba      	ldr	r2, [r7, #24]
 800f724:	429a      	cmp	r2, r3
 800f726:	d31b      	bcc.n	800f760 <create_chain+0x64>
 800f728:	2301      	movs	r3, #1
 800f72a:	61bb      	str	r3, [r7, #24]
 800f72c:	e018      	b.n	800f760 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff fd8e 	bl	800f252 <get_fat>
 800f736:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d801      	bhi.n	800f742 <create_chain+0x46>
 800f73e:	2301      	movs	r3, #1
 800f740:	e070      	b.n	800f824 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f748:	d101      	bne.n	800f74e <create_chain+0x52>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	e06a      	b.n	800f824 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	429a      	cmp	r2, r3
 800f756:	d201      	bcs.n	800f75c <create_chain+0x60>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	e063      	b.n	800f824 <create_chain+0x128>
		scl = clst;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	3301      	adds	r3, #1
 800f768:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	69fa      	ldr	r2, [r7, #28]
 800f770:	429a      	cmp	r2, r3
 800f772:	d307      	bcc.n	800f784 <create_chain+0x88>
				ncl = 2;
 800f774:	2302      	movs	r3, #2
 800f776:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f778:	69fa      	ldr	r2, [r7, #28]
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d901      	bls.n	800f784 <create_chain+0x88>
 800f780:	2300      	movs	r3, #0
 800f782:	e04f      	b.n	800f824 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f784:	69f9      	ldr	r1, [r7, #28]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff fd63 	bl	800f252 <get_fat>
 800f78c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00e      	beq.n	800f7b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d003      	beq.n	800f7a2 <create_chain+0xa6>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a0:	d101      	bne.n	800f7a6 <create_chain+0xaa>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	e03e      	b.n	800f824 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f7a6:	69fa      	ldr	r2, [r7, #28]
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d1da      	bne.n	800f764 <create_chain+0x68>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	e038      	b.n	800f824 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f7b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b8:	69f9      	ldr	r1, [r7, #28]
 800f7ba:	6938      	ldr	r0, [r7, #16]
 800f7bc:	f7ff fe1d 	bl	800f3fa <put_fat>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f7c4:	7dfb      	ldrb	r3, [r7, #23]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d109      	bne.n	800f7de <create_chain+0xe2>
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d006      	beq.n	800f7de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f7d0:	69fa      	ldr	r2, [r7, #28]
 800f7d2:	6839      	ldr	r1, [r7, #0]
 800f7d4:	6938      	ldr	r0, [r7, #16]
 800f7d6:	f7ff fe10 	bl	800f3fa <put_fat>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d116      	bne.n	800f812 <create_chain+0x116>
		fs->last_clst = ncl;
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	69fa      	ldr	r2, [r7, #28]
 800f7e8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	695a      	ldr	r2, [r3, #20]
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	3b02      	subs	r3, #2
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d804      	bhi.n	800f802 <create_chain+0x106>
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	695b      	ldr	r3, [r3, #20]
 800f7fc:	1e5a      	subs	r2, r3, #1
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	791b      	ldrb	r3, [r3, #4]
 800f806:	f043 0301 	orr.w	r3, r3, #1
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	711a      	strb	r2, [r3, #4]
 800f810:	e007      	b.n	800f822 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d102      	bne.n	800f81e <create_chain+0x122>
 800f818:	f04f 33ff 	mov.w	r3, #4294967295
 800f81c:	e000      	b.n	800f820 <create_chain+0x124>
 800f81e:	2301      	movs	r3, #1
 800f820:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f822:	69fb      	ldr	r3, [r7, #28]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3720      	adds	r7, #32
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f842:	d204      	bcs.n	800f84e <dir_sdi+0x22>
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	f003 031f 	and.w	r3, r3, #31
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f84e:	2302      	movs	r3, #2
 800f850:	e071      	b.n	800f936 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d106      	bne.n	800f872 <dir_sdi+0x46>
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d902      	bls.n	800f872 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f870:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10c      	bne.n	800f892 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	095b      	lsrs	r3, r3, #5
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	8912      	ldrh	r2, [r2, #8]
 800f880:	4293      	cmp	r3, r2
 800f882:	d301      	bcc.n	800f888 <dir_sdi+0x5c>
 800f884:	2302      	movs	r3, #2
 800f886:	e056      	b.n	800f936 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	61da      	str	r2, [r3, #28]
 800f890:	e02d      	b.n	800f8ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	895b      	ldrh	r3, [r3, #10]
 800f896:	461a      	mov	r2, r3
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	899b      	ldrh	r3, [r3, #12]
 800f89c:	fb02 f303 	mul.w	r3, r2, r3
 800f8a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f8a2:	e019      	b.n	800f8d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6979      	ldr	r1, [r7, #20]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7ff fcd2 	bl	800f252 <get_fat>
 800f8ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b6:	d101      	bne.n	800f8bc <dir_sdi+0x90>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e03c      	b.n	800f936 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d904      	bls.n	800f8cc <dir_sdi+0xa0>
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d301      	bcc.n	800f8d0 <dir_sdi+0xa4>
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	e032      	b.n	800f936 <dir_sdi+0x10a>
			ofs -= csz;
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d2e1      	bcs.n	800f8a4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f8e0:	6979      	ldr	r1, [r7, #20]
 800f8e2:	6938      	ldr	r0, [r7, #16]
 800f8e4:	f7ff fc96 	bl	800f214 <clust2sect>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	697a      	ldr	r2, [r7, #20]
 800f8f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <dir_sdi+0xd4>
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	e01a      	b.n	800f936 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	69da      	ldr	r2, [r3, #28]
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	899b      	ldrh	r3, [r3, #12]
 800f908:	4619      	mov	r1, r3
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f910:	441a      	add	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	899b      	ldrh	r3, [r3, #12]
 800f920:	461a      	mov	r2, r3
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	fbb3 f0f2 	udiv	r0, r3, r2
 800f928:	fb00 f202 	mul.w	r2, r0, r2
 800f92c:	1a9b      	subs	r3, r3, r2
 800f92e:	18ca      	adds	r2, r1, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b086      	sub	sp, #24
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	3320      	adds	r3, #32
 800f954:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d003      	beq.n	800f966 <dir_next+0x28>
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f964:	d301      	bcc.n	800f96a <dir_next+0x2c>
 800f966:	2304      	movs	r3, #4
 800f968:	e0bb      	b.n	800fae2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	899b      	ldrh	r3, [r3, #12]
 800f96e:	461a      	mov	r2, r3
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	fbb3 f1f2 	udiv	r1, r3, r2
 800f976:	fb01 f202 	mul.w	r2, r1, r2
 800f97a:	1a9b      	subs	r3, r3, r2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f040 809d 	bne.w	800fabc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	699b      	ldr	r3, [r3, #24]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10b      	bne.n	800f9ac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	095b      	lsrs	r3, r3, #5
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	8912      	ldrh	r2, [r2, #8]
 800f99c:	4293      	cmp	r3, r2
 800f99e:	f0c0 808d 	bcc.w	800fabc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	61da      	str	r2, [r3, #28]
 800f9a8:	2304      	movs	r3, #4
 800f9aa:	e09a      	b.n	800fae2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	899b      	ldrh	r3, [r3, #12]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	8952      	ldrh	r2, [r2, #10]
 800f9bc:	3a01      	subs	r2, #1
 800f9be:	4013      	ands	r3, r2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d17b      	bne.n	800fabc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	699b      	ldr	r3, [r3, #24]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	f7ff fc40 	bl	800f252 <get_fat>
 800f9d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d801      	bhi.n	800f9de <dir_next+0xa0>
 800f9da:	2302      	movs	r3, #2
 800f9dc:	e081      	b.n	800fae2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e4:	d101      	bne.n	800f9ea <dir_next+0xac>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e07b      	b.n	800fae2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	699b      	ldr	r3, [r3, #24]
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d359      	bcc.n	800faa8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d104      	bne.n	800fa04 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	61da      	str	r2, [r3, #28]
 800fa00:	2304      	movs	r3, #4
 800fa02:	e06e      	b.n	800fae2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7ff fe75 	bl	800f6fc <create_chain>
 800fa12:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <dir_next+0xe0>
 800fa1a:	2307      	movs	r3, #7
 800fa1c:	e061      	b.n	800fae2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d101      	bne.n	800fa28 <dir_next+0xea>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e05c      	b.n	800fae2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2e:	d101      	bne.n	800fa34 <dir_next+0xf6>
 800fa30:	2301      	movs	r3, #1
 800fa32:	e056      	b.n	800fae2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff fb0b 	bl	800f050 <sync_window>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <dir_next+0x106>
 800fa40:	2301      	movs	r3, #1
 800fa42:	e04e      	b.n	800fae2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	2100      	movs	r1, #0
 800fa52:	f7ff f934 	bl	800ecbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa56:	2300      	movs	r3, #0
 800fa58:	613b      	str	r3, [r7, #16]
 800fa5a:	6979      	ldr	r1, [r7, #20]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff fbd9 	bl	800f214 <clust2sect>
 800fa62:	4602      	mov	r2, r0
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	631a      	str	r2, [r3, #48]	; 0x30
 800fa68:	e012      	b.n	800fa90 <dir_next+0x152>
						fs->wflag = 1;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	f7ff faed 	bl	800f050 <sync_window>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <dir_next+0x142>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e030      	b.n	800fae2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	3301      	adds	r3, #1
 800fa84:	613b      	str	r3, [r7, #16]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	631a      	str	r2, [r3, #48]	; 0x30
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	895b      	ldrh	r3, [r3, #10]
 800fa94:	461a      	mov	r2, r3
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d3e6      	bcc.n	800fa6a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	1ad2      	subs	r2, r2, r3
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800faae:	6979      	ldr	r1, [r7, #20]
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff fbaf 	bl	800f214 <clust2sect>
 800fab6:	4602      	mov	r2, r0
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	899b      	ldrh	r3, [r3, #12]
 800facc:	461a      	mov	r2, r3
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fad4:	fb00 f202 	mul.w	r2, r0, r2
 800fad8:	1a9b      	subs	r3, r3, r2
 800fada:	18ca      	adds	r2, r1, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b086      	sub	sp, #24
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fafa:	2100      	movs	r1, #0
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff fe95 	bl	800f82c <dir_sdi>
 800fb02:	4603      	mov	r3, r0
 800fb04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb06:	7dfb      	ldrb	r3, [r7, #23]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d12b      	bne.n	800fb64 <dir_alloc+0x7a>
		n = 0;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	69db      	ldr	r3, [r3, #28]
 800fb14:	4619      	mov	r1, r3
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7ff fade 	bl	800f0d8 <move_window>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d11d      	bne.n	800fb62 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a1b      	ldr	r3, [r3, #32]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2be5      	cmp	r3, #229	; 0xe5
 800fb2e:	d004      	beq.n	800fb3a <dir_alloc+0x50>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a1b      	ldr	r3, [r3, #32]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d107      	bne.n	800fb4a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	613b      	str	r3, [r7, #16]
 800fb40:	693a      	ldr	r2, [r7, #16]
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d102      	bne.n	800fb4e <dir_alloc+0x64>
 800fb48:	e00c      	b.n	800fb64 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fb4e:	2101      	movs	r1, #1
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff fef4 	bl	800f93e <dir_next>
 800fb56:	4603      	mov	r3, r0
 800fb58:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d0d7      	beq.n	800fb10 <dir_alloc+0x26>
 800fb60:	e000      	b.n	800fb64 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fb62:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	2b04      	cmp	r3, #4
 800fb68:	d101      	bne.n	800fb6e <dir_alloc+0x84>
 800fb6a:	2307      	movs	r3, #7
 800fb6c:	75fb      	strb	r3, [r7, #23]
	return res;
 800fb6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	331a      	adds	r3, #26
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fe fff6 	bl	800eb78 <ld_word>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	d109      	bne.n	800fbac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	3314      	adds	r3, #20
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe ffeb 	bl	800eb78 <ld_word>
 800fba2:	4603      	mov	r3, r0
 800fba4:	041b      	lsls	r3, r3, #16
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fbac:	68fb      	ldr	r3, [r7, #12]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b084      	sub	sp, #16
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	60f8      	str	r0, [r7, #12]
 800fbbe:	60b9      	str	r1, [r7, #8]
 800fbc0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	331a      	adds	r3, #26
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	b292      	uxth	r2, r2
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff f80e 	bl	800ebee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d109      	bne.n	800fbee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	f103 0214 	add.w	r2, r3, #20
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	0c1b      	lsrs	r3, r3, #16
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7ff f800 	bl	800ebee <st_word>
	}
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b086      	sub	sp, #24
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fc04:	2100      	movs	r1, #0
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff fe10 	bl	800f82c <dir_sdi>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fc10:	7dfb      	ldrb	r3, [r7, #23]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d001      	beq.n	800fc1a <dir_find+0x24>
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
 800fc18:	e03e      	b.n	800fc98 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6938      	ldr	r0, [r7, #16]
 800fc22:	f7ff fa59 	bl	800f0d8 <move_window>
 800fc26:	4603      	mov	r3, r0
 800fc28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fc2a:	7dfb      	ldrb	r3, [r7, #23]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d12f      	bne.n	800fc90 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a1b      	ldr	r3, [r3, #32]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d102      	bne.n	800fc44 <dir_find+0x4e>
 800fc3e:	2304      	movs	r3, #4
 800fc40:	75fb      	strb	r3, [r7, #23]
 800fc42:	e028      	b.n	800fc96 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a1b      	ldr	r3, [r3, #32]
 800fc48:	330b      	adds	r3, #11
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	330b      	adds	r3, #11
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	f003 0308 	and.w	r3, r3, #8
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d10a      	bne.n	800fc7c <dir_find+0x86>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a18      	ldr	r0, [r3, #32]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	3324      	adds	r3, #36	; 0x24
 800fc6e:	220b      	movs	r2, #11
 800fc70:	4619      	mov	r1, r3
 800fc72:	f7ff f83f 	bl	800ecf4 <mem_cmp>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00b      	beq.n	800fc94 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7ff fe5d 	bl	800f93e <dir_next>
 800fc84:	4603      	mov	r3, r0
 800fc86:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fc88:	7dfb      	ldrb	r3, [r7, #23]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d0c5      	beq.n	800fc1a <dir_find+0x24>
 800fc8e:	e002      	b.n	800fc96 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fc90:	bf00      	nop
 800fc92:	e000      	b.n	800fc96 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fc94:	bf00      	nop

	return res;
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fcae:	2101      	movs	r1, #1
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff ff1a 	bl	800faea <dir_alloc>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fcba:	7bfb      	ldrb	r3, [r7, #15]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d11c      	bne.n	800fcfa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	69db      	ldr	r3, [r3, #28]
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	68b8      	ldr	r0, [r7, #8]
 800fcc8:	f7ff fa06 	bl	800f0d8 <move_window>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d111      	bne.n	800fcfa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	2100      	movs	r1, #0
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe ffed 	bl	800ecbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6a18      	ldr	r0, [r3, #32]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3324      	adds	r3, #36	; 0x24
 800fcec:	220b      	movs	r2, #11
 800fcee:	4619      	mov	r1, r3
 800fcf0:	f7fe ffc4 	bl	800ec7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	2200      	movs	r2, #0
 800fd12:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	69db      	ldr	r3, [r3, #28]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d04e      	beq.n	800fdba <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	613b      	str	r3, [r7, #16]
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fd24:	e021      	b.n	800fd6a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a1a      	ldr	r2, [r3, #32]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	1c59      	adds	r1, r3, #1
 800fd2e:	6179      	str	r1, [r7, #20]
 800fd30:	4413      	add	r3, r2
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	2b20      	cmp	r3, #32
 800fd3a:	d100      	bne.n	800fd3e <get_fileinfo+0x3a>
 800fd3c:	e015      	b.n	800fd6a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
 800fd40:	2b05      	cmp	r3, #5
 800fd42:	d101      	bne.n	800fd48 <get_fileinfo+0x44>
 800fd44:	23e5      	movs	r3, #229	; 0xe5
 800fd46:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2b09      	cmp	r3, #9
 800fd4c:	d106      	bne.n	800fd5c <get_fileinfo+0x58>
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	1c5a      	adds	r2, r3, #1
 800fd52:	613a      	str	r2, [r7, #16]
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	4413      	add	r3, r2
 800fd58:	222e      	movs	r2, #46	; 0x2e
 800fd5a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	613a      	str	r2, [r7, #16]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	4413      	add	r3, r2
 800fd66:	7bfa      	ldrb	r2, [r7, #15]
 800fd68:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	2b0a      	cmp	r3, #10
 800fd6e:	d9da      	bls.n	800fd26 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	4413      	add	r3, r2
 800fd76:	3309      	adds	r3, #9
 800fd78:	2200      	movs	r2, #0
 800fd7a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6a1b      	ldr	r3, [r3, #32]
 800fd80:	7ada      	ldrb	r2, [r3, #11]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6a1b      	ldr	r3, [r3, #32]
 800fd8a:	331c      	adds	r3, #28
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fe ff0b 	bl	800eba8 <ld_dword>
 800fd92:	4602      	mov	r2, r0
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a1b      	ldr	r3, [r3, #32]
 800fd9c:	3316      	adds	r3, #22
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fe ff02 	bl	800eba8 <ld_dword>
 800fda4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	80da      	strh	r2, [r3, #6]
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	0c1b      	lsrs	r3, r3, #16
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	809a      	strh	r2, [r3, #4]
 800fdb8:	e000      	b.n	800fdbc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fdba:	bf00      	nop
}
 800fdbc:	3718      	adds	r7, #24
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b088      	sub	sp, #32
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	60fb      	str	r3, [r7, #12]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3324      	adds	r3, #36	; 0x24
 800fdd8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fdda:	220b      	movs	r2, #11
 800fddc:	2120      	movs	r1, #32
 800fdde:	68b8      	ldr	r0, [r7, #8]
 800fde0:	f7fe ff6d 	bl	800ecbe <mem_set>
	si = i = 0; ni = 8;
 800fde4:	2300      	movs	r3, #0
 800fde6:	613b      	str	r3, [r7, #16]
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	61fb      	str	r3, [r7, #28]
 800fdec:	2308      	movs	r3, #8
 800fdee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	1c5a      	adds	r2, r3, #1
 800fdf4:	61fa      	str	r2, [r7, #28]
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fdfe:	7efb      	ldrb	r3, [r7, #27]
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d94e      	bls.n	800fea2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fe04:	7efb      	ldrb	r3, [r7, #27]
 800fe06:	2b2f      	cmp	r3, #47	; 0x2f
 800fe08:	d006      	beq.n	800fe18 <create_name+0x54>
 800fe0a:	7efb      	ldrb	r3, [r7, #27]
 800fe0c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe0e:	d110      	bne.n	800fe32 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fe10:	e002      	b.n	800fe18 <create_name+0x54>
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	3301      	adds	r3, #1
 800fe16:	61fb      	str	r3, [r7, #28]
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	2b2f      	cmp	r3, #47	; 0x2f
 800fe22:	d0f6      	beq.n	800fe12 <create_name+0x4e>
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	4413      	add	r3, r2
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe2e:	d0f0      	beq.n	800fe12 <create_name+0x4e>
			break;
 800fe30:	e038      	b.n	800fea4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fe32:	7efb      	ldrb	r3, [r7, #27]
 800fe34:	2b2e      	cmp	r3, #46	; 0x2e
 800fe36:	d003      	beq.n	800fe40 <create_name+0x7c>
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d30c      	bcc.n	800fe5a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2b0b      	cmp	r3, #11
 800fe44:	d002      	beq.n	800fe4c <create_name+0x88>
 800fe46:	7efb      	ldrb	r3, [r7, #27]
 800fe48:	2b2e      	cmp	r3, #46	; 0x2e
 800fe4a:	d001      	beq.n	800fe50 <create_name+0x8c>
 800fe4c:	2306      	movs	r3, #6
 800fe4e:	e044      	b.n	800feda <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fe50:	2308      	movs	r3, #8
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	230b      	movs	r3, #11
 800fe56:	617b      	str	r3, [r7, #20]
			continue;
 800fe58:	e022      	b.n	800fea0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fe5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	da04      	bge.n	800fe6c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fe62:	7efb      	ldrb	r3, [r7, #27]
 800fe64:	3b80      	subs	r3, #128	; 0x80
 800fe66:	4a1f      	ldr	r2, [pc, #124]	; (800fee4 <create_name+0x120>)
 800fe68:	5cd3      	ldrb	r3, [r2, r3]
 800fe6a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fe6c:	7efb      	ldrb	r3, [r7, #27]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	481d      	ldr	r0, [pc, #116]	; (800fee8 <create_name+0x124>)
 800fe72:	f7fe ff66 	bl	800ed42 <chk_chr>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <create_name+0xbc>
 800fe7c:	2306      	movs	r3, #6
 800fe7e:	e02c      	b.n	800feda <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fe80:	7efb      	ldrb	r3, [r7, #27]
 800fe82:	2b60      	cmp	r3, #96	; 0x60
 800fe84:	d905      	bls.n	800fe92 <create_name+0xce>
 800fe86:	7efb      	ldrb	r3, [r7, #27]
 800fe88:	2b7a      	cmp	r3, #122	; 0x7a
 800fe8a:	d802      	bhi.n	800fe92 <create_name+0xce>
 800fe8c:	7efb      	ldrb	r3, [r7, #27]
 800fe8e:	3b20      	subs	r3, #32
 800fe90:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	613a      	str	r2, [r7, #16]
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	7efa      	ldrb	r2, [r7, #27]
 800fe9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fea0:	e7a6      	b.n	800fdf0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fea2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	441a      	add	r2, r3
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <create_name+0xf4>
 800feb4:	2306      	movs	r3, #6
 800feb6:	e010      	b.n	800feda <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	2be5      	cmp	r3, #229	; 0xe5
 800febe:	d102      	bne.n	800fec6 <create_name+0x102>
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2205      	movs	r2, #5
 800fec4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fec6:	7efb      	ldrb	r3, [r7, #27]
 800fec8:	2b20      	cmp	r3, #32
 800feca:	d801      	bhi.n	800fed0 <create_name+0x10c>
 800fecc:	2204      	movs	r2, #4
 800fece:	e000      	b.n	800fed2 <create_name+0x10e>
 800fed0:	2200      	movs	r2, #0
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	330b      	adds	r3, #11
 800fed6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fed8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3720      	adds	r7, #32
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	08048644 	.word	0x08048644
 800fee8:	0801a884 	.word	0x0801a884

0800feec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b086      	sub	sp, #24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff00:	e002      	b.n	800ff08 <follow_path+0x1c>
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	3301      	adds	r3, #1
 800ff06:	603b      	str	r3, [r7, #0]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	2b2f      	cmp	r3, #47	; 0x2f
 800ff0e:	d0f8      	beq.n	800ff02 <follow_path+0x16>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b5c      	cmp	r3, #92	; 0x5c
 800ff16:	d0f4      	beq.n	800ff02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b1f      	cmp	r3, #31
 800ff24:	d80a      	bhi.n	800ff3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2280      	movs	r2, #128	; 0x80
 800ff2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ff2e:	2100      	movs	r1, #0
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff fc7b 	bl	800f82c <dir_sdi>
 800ff36:	4603      	mov	r3, r0
 800ff38:	75fb      	strb	r3, [r7, #23]
 800ff3a:	e048      	b.n	800ffce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff3c:	463b      	mov	r3, r7
 800ff3e:	4619      	mov	r1, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff ff3f 	bl	800fdc4 <create_name>
 800ff46:	4603      	mov	r3, r0
 800ff48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d139      	bne.n	800ffc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff fe50 	bl	800fbf6 <dir_find>
 800ff56:	4603      	mov	r3, r0
 800ff58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ff62:	7dfb      	ldrb	r3, [r7, #23]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00a      	beq.n	800ff7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
 800ff6a:	2b04      	cmp	r3, #4
 800ff6c:	d12c      	bne.n	800ffc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ff6e:	7afb      	ldrb	r3, [r7, #11]
 800ff70:	f003 0304 	and.w	r3, r3, #4
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d127      	bne.n	800ffc8 <follow_path+0xdc>
 800ff78:	2305      	movs	r3, #5
 800ff7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ff7c:	e024      	b.n	800ffc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff7e:	7afb      	ldrb	r3, [r7, #11]
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d121      	bne.n	800ffcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	799b      	ldrb	r3, [r3, #6]
 800ff8c:	f003 0310 	and.w	r3, r3, #16
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ff94:	2305      	movs	r3, #5
 800ff96:	75fb      	strb	r3, [r7, #23]
 800ff98:	e019      	b.n	800ffce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	695b      	ldr	r3, [r3, #20]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	8992      	ldrh	r2, [r2, #12]
 800ffa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffac:	fb00 f202 	mul.w	r2, r0, r2
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	440b      	add	r3, r1
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff fdde 	bl	800fb78 <ld_clust>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffc2:	e7bb      	b.n	800ff3c <follow_path+0x50>
			if (res != FR_OK) break;
 800ffc4:	bf00      	nop
 800ffc6:	e002      	b.n	800ffce <follow_path+0xe2>
				break;
 800ffc8:	bf00      	nop
 800ffca:	e000      	b.n	800ffce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ffcc:	bf00      	nop
			}
		}
	}

	return res;
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b087      	sub	sp, #28
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d031      	beq.n	8010052 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	617b      	str	r3, [r7, #20]
 800fff4:	e002      	b.n	800fffc <get_ldnumber+0x24>
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	3301      	adds	r3, #1
 800fffa:	617b      	str	r3, [r7, #20]
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	2b20      	cmp	r3, #32
 8010002:	d903      	bls.n	801000c <get_ldnumber+0x34>
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b3a      	cmp	r3, #58	; 0x3a
 801000a:	d1f4      	bne.n	800fff6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	2b3a      	cmp	r3, #58	; 0x3a
 8010012:	d11c      	bne.n	801004e <get_ldnumber+0x76>
			tp = *path;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	60fa      	str	r2, [r7, #12]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	3b30      	subs	r3, #48	; 0x30
 8010024:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	2b09      	cmp	r3, #9
 801002a:	d80e      	bhi.n	801004a <get_ldnumber+0x72>
 801002c:	68fa      	ldr	r2, [r7, #12]
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	429a      	cmp	r2, r3
 8010032:	d10a      	bne.n	801004a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d107      	bne.n	801004a <get_ldnumber+0x72>
					vol = (int)i;
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	3301      	adds	r3, #1
 8010042:	617b      	str	r3, [r7, #20]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	e002      	b.n	8010054 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801004e:	2300      	movs	r3, #0
 8010050:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010052:	693b      	ldr	r3, [r7, #16]
}
 8010054:	4618      	mov	r0, r3
 8010056:	371c      	adds	r7, #28
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	70da      	strb	r2, [r3, #3]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f04f 32ff 	mov.w	r2, #4294967295
 8010076:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010078:	6839      	ldr	r1, [r7, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7ff f82c 	bl	800f0d8 <move_window>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <check_fs+0x2a>
 8010086:	2304      	movs	r3, #4
 8010088:	e038      	b.n	80100fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	3334      	adds	r3, #52	; 0x34
 801008e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fd70 	bl	800eb78 <ld_word>
 8010098:	4603      	mov	r3, r0
 801009a:	461a      	mov	r2, r3
 801009c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d001      	beq.n	80100a8 <check_fs+0x48>
 80100a4:	2303      	movs	r3, #3
 80100a6:	e029      	b.n	80100fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100ae:	2be9      	cmp	r3, #233	; 0xe9
 80100b0:	d009      	beq.n	80100c6 <check_fs+0x66>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100b8:	2beb      	cmp	r3, #235	; 0xeb
 80100ba:	d11e      	bne.n	80100fa <check_fs+0x9a>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80100c2:	2b90      	cmp	r3, #144	; 0x90
 80100c4:	d119      	bne.n	80100fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3334      	adds	r3, #52	; 0x34
 80100ca:	3336      	adds	r3, #54	; 0x36
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe fd6b 	bl	800eba8 <ld_dword>
 80100d2:	4603      	mov	r3, r0
 80100d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80100d8:	4a0a      	ldr	r2, [pc, #40]	; (8010104 <check_fs+0xa4>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d101      	bne.n	80100e2 <check_fs+0x82>
 80100de:	2300      	movs	r3, #0
 80100e0:	e00c      	b.n	80100fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3334      	adds	r3, #52	; 0x34
 80100e6:	3352      	adds	r3, #82	; 0x52
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe fd5d 	bl	800eba8 <ld_dword>
 80100ee:	4603      	mov	r3, r0
 80100f0:	4a05      	ldr	r2, [pc, #20]	; (8010108 <check_fs+0xa8>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d101      	bne.n	80100fa <check_fs+0x9a>
 80100f6:	2300      	movs	r3, #0
 80100f8:	e000      	b.n	80100fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80100fa:	2302      	movs	r3, #2
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	00544146 	.word	0x00544146
 8010108:	33544146 	.word	0x33544146

0801010c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b096      	sub	sp, #88	; 0x58
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	4613      	mov	r3, r2
 8010118:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f7ff ff59 	bl	800ffd8 <get_ldnumber>
 8010126:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801012a:	2b00      	cmp	r3, #0
 801012c:	da01      	bge.n	8010132 <find_volume+0x26>
 801012e:	230b      	movs	r3, #11
 8010130:	e262      	b.n	80105f8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010132:	4a9f      	ldr	r2, [pc, #636]	; (80103b0 <find_volume+0x2a4>)
 8010134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801013a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801013c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013e:	2b00      	cmp	r3, #0
 8010140:	d101      	bne.n	8010146 <find_volume+0x3a>
 8010142:	230c      	movs	r3, #12
 8010144:	e258      	b.n	80105f8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801014a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	f023 0301 	bic.w	r3, r3, #1
 8010152:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d01a      	beq.n	8010192 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	785b      	ldrb	r3, [r3, #1]
 8010160:	4618      	mov	r0, r3
 8010162:	f7fe fc6b 	bl	800ea3c <disk_status>
 8010166:	4603      	mov	r3, r0
 8010168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801016c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010170:	f003 0301 	and.w	r3, r3, #1
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10c      	bne.n	8010192 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d007      	beq.n	801018e <find_volume+0x82>
 801017e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010182:	f003 0304 	and.w	r3, r3, #4
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801018a:	230a      	movs	r3, #10
 801018c:	e234      	b.n	80105f8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 801018e:	2300      	movs	r3, #0
 8010190:	e232      	b.n	80105f8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019a:	b2da      	uxtb	r2, r3
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	785b      	ldrb	r3, [r3, #1]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fe fc63 	bl	800ea70 <disk_initialize>
 80101aa:	4603      	mov	r3, r0
 80101ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80101b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80101bc:	2303      	movs	r3, #3
 80101be:	e21b      	b.n	80105f8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80101c0:	79fb      	ldrb	r3, [r7, #7]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d007      	beq.n	80101d6 <find_volume+0xca>
 80101c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101ca:	f003 0304 	and.w	r3, r3, #4
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80101d2:	230a      	movs	r3, #10
 80101d4:	e210      	b.n	80105f8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80101d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d8:	7858      	ldrb	r0, [r3, #1]
 80101da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101dc:	330c      	adds	r3, #12
 80101de:	461a      	mov	r2, r3
 80101e0:	2102      	movs	r1, #2
 80101e2:	f7fe fcab 	bl	800eb3c <disk_ioctl>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <find_volume+0xe4>
 80101ec:	2301      	movs	r3, #1
 80101ee:	e203      	b.n	80105f8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	899b      	ldrh	r3, [r3, #12]
 80101f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101f8:	d80d      	bhi.n	8010216 <find_volume+0x10a>
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010202:	d308      	bcc.n	8010216 <find_volume+0x10a>
 8010204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010206:	899b      	ldrh	r3, [r3, #12]
 8010208:	461a      	mov	r2, r3
 801020a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020c:	899b      	ldrh	r3, [r3, #12]
 801020e:	3b01      	subs	r3, #1
 8010210:	4013      	ands	r3, r2
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <find_volume+0x10e>
 8010216:	2301      	movs	r3, #1
 8010218:	e1ee      	b.n	80105f8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801021e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010222:	f7ff ff1d 	bl	8010060 <check_fs>
 8010226:	4603      	mov	r3, r0
 8010228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801022c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010230:	2b02      	cmp	r3, #2
 8010232:	d149      	bne.n	80102c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010234:	2300      	movs	r3, #0
 8010236:	643b      	str	r3, [r7, #64]	; 0x40
 8010238:	e01e      	b.n	8010278 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801023a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010242:	011b      	lsls	r3, r3, #4
 8010244:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010248:	4413      	add	r3, r2
 801024a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024e:	3304      	adds	r3, #4
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d006      	beq.n	8010264 <find_volume+0x158>
 8010256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010258:	3308      	adds	r3, #8
 801025a:	4618      	mov	r0, r3
 801025c:	f7fe fca4 	bl	800eba8 <ld_dword>
 8010260:	4602      	mov	r2, r0
 8010262:	e000      	b.n	8010266 <find_volume+0x15a>
 8010264:	2200      	movs	r2, #0
 8010266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	3358      	adds	r3, #88	; 0x58
 801026c:	443b      	add	r3, r7
 801026e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010274:	3301      	adds	r3, #1
 8010276:	643b      	str	r3, [r7, #64]	; 0x40
 8010278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801027a:	2b03      	cmp	r3, #3
 801027c:	d9dd      	bls.n	801023a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801027e:	2300      	movs	r3, #0
 8010280:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010284:	2b00      	cmp	r3, #0
 8010286:	d002      	beq.n	801028e <find_volume+0x182>
 8010288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801028a:	3b01      	subs	r3, #1
 801028c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801028e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	3358      	adds	r3, #88	; 0x58
 8010294:	443b      	add	r3, r7
 8010296:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801029a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801029c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d005      	beq.n	80102ae <find_volume+0x1a2>
 80102a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102a6:	f7ff fedb 	bl	8010060 <check_fs>
 80102aa:	4603      	mov	r3, r0
 80102ac:	e000      	b.n	80102b0 <find_volume+0x1a4>
 80102ae:	2303      	movs	r3, #3
 80102b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80102b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d905      	bls.n	80102c8 <find_volume+0x1bc>
 80102bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102be:	3301      	adds	r3, #1
 80102c0:	643b      	str	r3, [r7, #64]	; 0x40
 80102c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d9e2      	bls.n	801028e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102cc:	2b04      	cmp	r3, #4
 80102ce:	d101      	bne.n	80102d4 <find_volume+0x1c8>
 80102d0:	2301      	movs	r3, #1
 80102d2:	e191      	b.n	80105f8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d901      	bls.n	80102e0 <find_volume+0x1d4>
 80102dc:	230d      	movs	r3, #13
 80102de:	e18b      	b.n	80105f8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	3334      	adds	r3, #52	; 0x34
 80102e4:	330b      	adds	r3, #11
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fc46 	bl	800eb78 <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	899b      	ldrh	r3, [r3, #12]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d001      	beq.n	80102fc <find_volume+0x1f0>
 80102f8:	230d      	movs	r3, #13
 80102fa:	e17d      	b.n	80105f8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80102fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fe:	3334      	adds	r3, #52	; 0x34
 8010300:	3316      	adds	r3, #22
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe fc38 	bl	800eb78 <ld_word>
 8010308:	4603      	mov	r3, r0
 801030a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801030c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <find_volume+0x214>
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	3334      	adds	r3, #52	; 0x34
 8010316:	3324      	adds	r3, #36	; 0x24
 8010318:	4618      	mov	r0, r3
 801031a:	f7fe fc45 	bl	800eba8 <ld_dword>
 801031e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010324:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010332:	789b      	ldrb	r3, [r3, #2]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d005      	beq.n	8010344 <find_volume+0x238>
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	789b      	ldrb	r3, [r3, #2]
 801033c:	2b02      	cmp	r3, #2
 801033e:	d001      	beq.n	8010344 <find_volume+0x238>
 8010340:	230d      	movs	r3, #13
 8010342:	e159      	b.n	80105f8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010346:	789b      	ldrb	r3, [r3, #2]
 8010348:	461a      	mov	r2, r3
 801034a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801034c:	fb02 f303 	mul.w	r3, r2, r3
 8010350:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010358:	b29a      	uxth	r2, r3
 801035a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	895b      	ldrh	r3, [r3, #10]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d008      	beq.n	8010378 <find_volume+0x26c>
 8010366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010368:	895b      	ldrh	r3, [r3, #10]
 801036a:	461a      	mov	r2, r3
 801036c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036e:	895b      	ldrh	r3, [r3, #10]
 8010370:	3b01      	subs	r3, #1
 8010372:	4013      	ands	r3, r2
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <find_volume+0x270>
 8010378:	230d      	movs	r3, #13
 801037a:	e13d      	b.n	80105f8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037e:	3334      	adds	r3, #52	; 0x34
 8010380:	3311      	adds	r3, #17
 8010382:	4618      	mov	r0, r3
 8010384:	f7fe fbf8 	bl	800eb78 <ld_word>
 8010388:	4603      	mov	r3, r0
 801038a:	461a      	mov	r2, r3
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	891b      	ldrh	r3, [r3, #8]
 8010394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010396:	8992      	ldrh	r2, [r2, #12]
 8010398:	0952      	lsrs	r2, r2, #5
 801039a:	b292      	uxth	r2, r2
 801039c:	fbb3 f1f2 	udiv	r1, r3, r2
 80103a0:	fb01 f202 	mul.w	r2, r1, r2
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d003      	beq.n	80103b4 <find_volume+0x2a8>
 80103ac:	230d      	movs	r3, #13
 80103ae:	e123      	b.n	80105f8 <find_volume+0x4ec>
 80103b0:	20005d20 	.word	0x20005d20

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	3334      	adds	r3, #52	; 0x34
 80103b8:	3313      	adds	r3, #19
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe fbdc 	bl	800eb78 <ld_word>
 80103c0:	4603      	mov	r3, r0
 80103c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80103c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d106      	bne.n	80103d8 <find_volume+0x2cc>
 80103ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103cc:	3334      	adds	r3, #52	; 0x34
 80103ce:	3320      	adds	r3, #32
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fe fbe9 	bl	800eba8 <ld_dword>
 80103d6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80103d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103da:	3334      	adds	r3, #52	; 0x34
 80103dc:	330e      	adds	r3, #14
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe fbca 	bl	800eb78 <ld_word>
 80103e4:	4603      	mov	r3, r0
 80103e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80103e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d101      	bne.n	80103f2 <find_volume+0x2e6>
 80103ee:	230d      	movs	r3, #13
 80103f0:	e102      	b.n	80105f8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80103f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f6:	4413      	add	r3, r2
 80103f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103fa:	8911      	ldrh	r1, [r2, #8]
 80103fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103fe:	8992      	ldrh	r2, [r2, #12]
 8010400:	0952      	lsrs	r2, r2, #5
 8010402:	b292      	uxth	r2, r2
 8010404:	fbb1 f2f2 	udiv	r2, r1, r2
 8010408:	b292      	uxth	r2, r2
 801040a:	4413      	add	r3, r2
 801040c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801040e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	429a      	cmp	r2, r3
 8010414:	d201      	bcs.n	801041a <find_volume+0x30e>
 8010416:	230d      	movs	r3, #13
 8010418:	e0ee      	b.n	80105f8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801041a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010422:	8952      	ldrh	r2, [r2, #10]
 8010424:	fbb3 f3f2 	udiv	r3, r3, r2
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <find_volume+0x328>
 8010430:	230d      	movs	r3, #13
 8010432:	e0e1      	b.n	80105f8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8010434:	2303      	movs	r3, #3
 8010436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010440:	4293      	cmp	r3, r2
 8010442:	d802      	bhi.n	801044a <find_volume+0x33e>
 8010444:	2302      	movs	r3, #2
 8010446:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010450:	4293      	cmp	r3, r2
 8010452:	d802      	bhi.n	801045a <find_volume+0x34e>
 8010454:	2301      	movs	r3, #1
 8010456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	1c9a      	adds	r2, r3, #2
 801045e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010460:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010466:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010468:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801046a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801046c:	441a      	add	r2, r3
 801046e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010470:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010476:	441a      	add	r2, r3
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801047c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010480:	2b03      	cmp	r3, #3
 8010482:	d11e      	bne.n	80104c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010486:	3334      	adds	r3, #52	; 0x34
 8010488:	332a      	adds	r3, #42	; 0x2a
 801048a:	4618      	mov	r0, r3
 801048c:	f7fe fb74 	bl	800eb78 <ld_word>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d001      	beq.n	801049a <find_volume+0x38e>
 8010496:	230d      	movs	r3, #13
 8010498:	e0ae      	b.n	80105f8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	891b      	ldrh	r3, [r3, #8]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d001      	beq.n	80104a6 <find_volume+0x39a>
 80104a2:	230d      	movs	r3, #13
 80104a4:	e0a8      	b.n	80105f8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	3334      	adds	r3, #52	; 0x34
 80104aa:	332c      	adds	r3, #44	; 0x2c
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7fe fb7b 	bl	800eba8 <ld_dword>
 80104b2:	4602      	mov	r2, r0
 80104b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	647b      	str	r3, [r7, #68]	; 0x44
 80104c0:	e01f      	b.n	8010502 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80104c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c4:	891b      	ldrh	r3, [r3, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <find_volume+0x3c2>
 80104ca:	230d      	movs	r3, #13
 80104cc:	e094      	b.n	80105f8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80104ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104d4:	441a      	add	r2, r3
 80104d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80104da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d103      	bne.n	80104ea <find_volume+0x3de>
 80104e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	e00a      	b.n	8010500 <find_volume+0x3f4>
 80104ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ec:	699a      	ldr	r2, [r3, #24]
 80104ee:	4613      	mov	r3, r2
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	4413      	add	r3, r2
 80104f4:	085a      	lsrs	r2, r3, #1
 80104f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f8:	699b      	ldr	r3, [r3, #24]
 80104fa:	f003 0301 	and.w	r3, r3, #1
 80104fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010500:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	69da      	ldr	r2, [r3, #28]
 8010506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010508:	899b      	ldrh	r3, [r3, #12]
 801050a:	4619      	mov	r1, r3
 801050c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801050e:	440b      	add	r3, r1
 8010510:	3b01      	subs	r3, #1
 8010512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010514:	8989      	ldrh	r1, [r1, #12]
 8010516:	fbb3 f3f1 	udiv	r3, r3, r1
 801051a:	429a      	cmp	r2, r3
 801051c:	d201      	bcs.n	8010522 <find_volume+0x416>
 801051e:	230d      	movs	r3, #13
 8010520:	e06a      	b.n	80105f8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	f04f 32ff 	mov.w	r2, #4294967295
 8010528:	615a      	str	r2, [r3, #20]
 801052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052c:	695a      	ldr	r2, [r3, #20]
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	2280      	movs	r2, #128	; 0x80
 8010536:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801053c:	2b03      	cmp	r3, #3
 801053e:	d149      	bne.n	80105d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	3334      	adds	r3, #52	; 0x34
 8010544:	3330      	adds	r3, #48	; 0x30
 8010546:	4618      	mov	r0, r3
 8010548:	f7fe fb16 	bl	800eb78 <ld_word>
 801054c:	4603      	mov	r3, r0
 801054e:	2b01      	cmp	r3, #1
 8010550:	d140      	bne.n	80105d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010554:	3301      	adds	r3, #1
 8010556:	4619      	mov	r1, r3
 8010558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801055a:	f7fe fdbd 	bl	800f0d8 <move_window>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d137      	bne.n	80105d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010566:	2200      	movs	r2, #0
 8010568:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056c:	3334      	adds	r3, #52	; 0x34
 801056e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe fb00 	bl	800eb78 <ld_word>
 8010578:	4603      	mov	r3, r0
 801057a:	461a      	mov	r2, r3
 801057c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010580:	429a      	cmp	r2, r3
 8010582:	d127      	bne.n	80105d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	3334      	adds	r3, #52	; 0x34
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe fb0d 	bl	800eba8 <ld_dword>
 801058e:	4603      	mov	r3, r0
 8010590:	4a1b      	ldr	r2, [pc, #108]	; (8010600 <find_volume+0x4f4>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d11e      	bne.n	80105d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	3334      	adds	r3, #52	; 0x34
 801059a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fe fb02 	bl	800eba8 <ld_dword>
 80105a4:	4603      	mov	r3, r0
 80105a6:	4a17      	ldr	r2, [pc, #92]	; (8010604 <find_volume+0x4f8>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d113      	bne.n	80105d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80105ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ae:	3334      	adds	r3, #52	; 0x34
 80105b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe faf7 	bl	800eba8 <ld_dword>
 80105ba:	4602      	mov	r2, r0
 80105bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105be:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80105c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c2:	3334      	adds	r3, #52	; 0x34
 80105c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe faed 	bl	800eba8 <ld_dword>
 80105ce:	4602      	mov	r2, r0
 80105d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80105da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80105dc:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <find_volume+0x4fc>)
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	3301      	adds	r3, #1
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	4b08      	ldr	r3, [pc, #32]	; (8010608 <find_volume+0x4fc>)
 80105e6:	801a      	strh	r2, [r3, #0]
 80105e8:	4b07      	ldr	r3, [pc, #28]	; (8010608 <find_volume+0x4fc>)
 80105ea:	881a      	ldrh	r2, [r3, #0]
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80105f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105f2:	f7fe fd09 	bl	800f008 <clear_lock>
#endif
	return FR_OK;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3758      	adds	r7, #88	; 0x58
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	41615252 	.word	0x41615252
 8010604:	61417272 	.word	0x61417272
 8010608:	20005d24 	.word	0x20005d24

0801060c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010616:	2309      	movs	r3, #9
 8010618:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d01c      	beq.n	801065a <validate+0x4e>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d018      	beq.n	801065a <validate+0x4e>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d013      	beq.n	801065a <validate+0x4e>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	889a      	ldrh	r2, [r3, #4]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	88db      	ldrh	r3, [r3, #6]
 801063c:	429a      	cmp	r2, r3
 801063e:	d10c      	bne.n	801065a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	4618      	mov	r0, r3
 8010648:	f7fe f9f8 	bl	800ea3c <disk_status>
 801064c:	4603      	mov	r3, r0
 801064e:	f003 0301 	and.w	r3, r3, #1
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <validate+0x4e>
			res = FR_OK;
 8010656:	2300      	movs	r3, #0
 8010658:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d102      	bne.n	8010666 <validate+0x5a>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	e000      	b.n	8010668 <validate+0x5c>
 8010666:	2300      	movs	r3, #0
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	6013      	str	r3, [r2, #0]
	return res;
 801066c:	7bfb      	ldrb	r3, [r7, #15]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	4613      	mov	r3, r2
 8010684:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801068a:	f107 0310 	add.w	r3, r7, #16
 801068e:	4618      	mov	r0, r3
 8010690:	f7ff fca2 	bl	800ffd8 <get_ldnumber>
 8010694:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	2b00      	cmp	r3, #0
 801069a:	da01      	bge.n	80106a0 <f_mount+0x28>
 801069c:	230b      	movs	r3, #11
 801069e:	e02b      	b.n	80106f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80106a0:	4a17      	ldr	r2, [pc, #92]	; (8010700 <f_mount+0x88>)
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d005      	beq.n	80106bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80106b0:	69b8      	ldr	r0, [r7, #24]
 80106b2:	f7fe fca9 	bl	800f008 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	2200      	movs	r2, #0
 80106ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d002      	beq.n	80106c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2200      	movs	r2, #0
 80106c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	490d      	ldr	r1, [pc, #52]	; (8010700 <f_mount+0x88>)
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <f_mount+0x66>
 80106d8:	79fb      	ldrb	r3, [r7, #7]
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d001      	beq.n	80106e2 <f_mount+0x6a>
 80106de:	2300      	movs	r3, #0
 80106e0:	e00a      	b.n	80106f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80106e2:	f107 010c 	add.w	r1, r7, #12
 80106e6:	f107 0308 	add.w	r3, r7, #8
 80106ea:	2200      	movs	r2, #0
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff fd0d 	bl	801010c <find_volume>
 80106f2:	4603      	mov	r3, r0
 80106f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3720      	adds	r7, #32
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	20005d20 	.word	0x20005d20

08010704 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b098      	sub	sp, #96	; 0x60
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	4613      	mov	r3, r2
 8010710:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d101      	bne.n	801071c <f_open+0x18>
 8010718:	2309      	movs	r3, #9
 801071a:	e1bb      	b.n	8010a94 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010722:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010724:	79fa      	ldrb	r2, [r7, #7]
 8010726:	f107 0110 	add.w	r1, r7, #16
 801072a:	f107 0308 	add.w	r3, r7, #8
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff fcec 	bl	801010c <find_volume>
 8010734:	4603      	mov	r3, r0
 8010736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801073a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801073e:	2b00      	cmp	r3, #0
 8010740:	f040 819f 	bne.w	8010a82 <f_open+0x37e>
		dj.obj.fs = fs;
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	f107 0314 	add.w	r3, r7, #20
 801074e:	4611      	mov	r1, r2
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff fbcb 	bl	800feec <follow_path>
 8010756:	4603      	mov	r3, r0
 8010758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801075c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010760:	2b00      	cmp	r3, #0
 8010762:	d11a      	bne.n	801079a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010764:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010768:	b25b      	sxtb	r3, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	da03      	bge.n	8010776 <f_open+0x72>
				res = FR_INVALID_NAME;
 801076e:	2306      	movs	r3, #6
 8010770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010774:	e011      	b.n	801079a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010776:	79fb      	ldrb	r3, [r7, #7]
 8010778:	f023 0301 	bic.w	r3, r3, #1
 801077c:	2b00      	cmp	r3, #0
 801077e:	bf14      	ite	ne
 8010780:	2301      	movne	r3, #1
 8010782:	2300      	moveq	r3, #0
 8010784:	b2db      	uxtb	r3, r3
 8010786:	461a      	mov	r2, r3
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	4611      	mov	r1, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe faf2 	bl	800ed78 <chk_lock>
 8010794:	4603      	mov	r3, r0
 8010796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	f003 031c 	and.w	r3, r3, #28
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d07f      	beq.n	80108a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80107a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d017      	beq.n	80107dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80107ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107b0:	2b04      	cmp	r3, #4
 80107b2:	d10e      	bne.n	80107d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80107b4:	f7fe fb3c 	bl	800ee30 <enq_lock>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d006      	beq.n	80107cc <f_open+0xc8>
 80107be:	f107 0314 	add.w	r3, r7, #20
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff fa6c 	bl	800fca0 <dir_register>
 80107c8:	4603      	mov	r3, r0
 80107ca:	e000      	b.n	80107ce <f_open+0xca>
 80107cc:	2312      	movs	r3, #18
 80107ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	f043 0308 	orr.w	r3, r3, #8
 80107d8:	71fb      	strb	r3, [r7, #7]
 80107da:	e010      	b.n	80107fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80107dc:	7ebb      	ldrb	r3, [r7, #26]
 80107de:	f003 0311 	and.w	r3, r3, #17
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d003      	beq.n	80107ee <f_open+0xea>
					res = FR_DENIED;
 80107e6:	2307      	movs	r3, #7
 80107e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107ec:	e007      	b.n	80107fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	f003 0304 	and.w	r3, r3, #4
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d002      	beq.n	80107fe <f_open+0xfa>
 80107f8:	2308      	movs	r3, #8
 80107fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80107fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010802:	2b00      	cmp	r3, #0
 8010804:	d168      	bne.n	80108d8 <f_open+0x1d4>
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	f003 0308 	and.w	r3, r3, #8
 801080c:	2b00      	cmp	r3, #0
 801080e:	d063      	beq.n	80108d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010810:	f7fd ffa8 	bl	800e764 <get_fattime>
 8010814:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010818:	330e      	adds	r3, #14
 801081a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe fa01 	bl	800ec24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010824:	3316      	adds	r3, #22
 8010826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe f9fb 	bl	800ec24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010830:	330b      	adds	r3, #11
 8010832:	2220      	movs	r2, #32
 8010834:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801083a:	4611      	mov	r1, r2
 801083c:	4618      	mov	r0, r3
 801083e:	f7ff f99b 	bl	800fb78 <ld_clust>
 8010842:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010848:	2200      	movs	r2, #0
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff f9b3 	bl	800fbb6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010852:	331c      	adds	r3, #28
 8010854:	2100      	movs	r1, #0
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe f9e4 	bl	800ec24 <st_dword>
					fs->wflag = 1;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	2201      	movs	r2, #1
 8010860:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010864:	2b00      	cmp	r3, #0
 8010866:	d037      	beq.n	80108d8 <f_open+0x1d4>
						dw = fs->winsect;
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801086e:	f107 0314 	add.w	r3, r7, #20
 8010872:	2200      	movs	r2, #0
 8010874:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010876:	4618      	mov	r0, r3
 8010878:	f7fe fedb 	bl	800f632 <remove_chain>
 801087c:	4603      	mov	r3, r0
 801087e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010886:	2b00      	cmp	r3, #0
 8010888:	d126      	bne.n	80108d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe fc22 	bl	800f0d8 <move_window>
 8010894:	4603      	mov	r3, r0
 8010896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801089e:	3a01      	subs	r2, #1
 80108a0:	611a      	str	r2, [r3, #16]
 80108a2:	e019      	b.n	80108d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80108a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d115      	bne.n	80108d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80108ac:	7ebb      	ldrb	r3, [r7, #26]
 80108ae:	f003 0310 	and.w	r3, r3, #16
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <f_open+0x1ba>
					res = FR_NO_FILE;
 80108b6:	2304      	movs	r3, #4
 80108b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80108bc:	e00c      	b.n	80108d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80108be:	79fb      	ldrb	r3, [r7, #7]
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d007      	beq.n	80108d8 <f_open+0x1d4>
 80108c8:	7ebb      	ldrb	r3, [r7, #26]
 80108ca:	f003 0301 	and.w	r3, r3, #1
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d002      	beq.n	80108d8 <f_open+0x1d4>
						res = FR_DENIED;
 80108d2:	2307      	movs	r3, #7
 80108d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80108d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d128      	bne.n	8010932 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80108e0:	79fb      	ldrb	r3, [r7, #7]
 80108e2:	f003 0308 	and.w	r3, r3, #8
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d003      	beq.n	80108f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80108ea:	79fb      	ldrb	r3, [r7, #7]
 80108ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80108fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010900:	79fb      	ldrb	r3, [r7, #7]
 8010902:	f023 0301 	bic.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	bf14      	ite	ne
 801090a:	2301      	movne	r3, #1
 801090c:	2300      	moveq	r3, #0
 801090e:	b2db      	uxtb	r3, r3
 8010910:	461a      	mov	r2, r3
 8010912:	f107 0314 	add.w	r3, r7, #20
 8010916:	4611      	mov	r1, r2
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe faab 	bl	800ee74 <inc_lock>
 801091e:	4602      	mov	r2, r0
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d102      	bne.n	8010932 <f_open+0x22e>
 801092c:	2302      	movs	r3, #2
 801092e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010936:	2b00      	cmp	r3, #0
 8010938:	f040 80a3 	bne.w	8010a82 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010940:	4611      	mov	r1, r2
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff f918 	bl	800fb78 <ld_clust>
 8010948:	4602      	mov	r2, r0
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801094e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010950:	331c      	adds	r3, #28
 8010952:	4618      	mov	r0, r3
 8010954:	f7fe f928 	bl	800eba8 <ld_dword>
 8010958:	4602      	mov	r2, r0
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010964:	693a      	ldr	r2, [r7, #16]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	88da      	ldrh	r2, [r3, #6]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	79fa      	ldrb	r2, [r7, #7]
 8010976:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2200      	movs	r2, #0
 801097c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2200      	movs	r2, #0
 8010988:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	3330      	adds	r3, #48	; 0x30
 801098e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010992:	2100      	movs	r1, #0
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe f992 	bl	800ecbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801099a:	79fb      	ldrb	r3, [r7, #7]
 801099c:	f003 0320 	and.w	r3, r3, #32
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d06e      	beq.n	8010a82 <f_open+0x37e>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d06a      	beq.n	8010a82 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	68da      	ldr	r2, [r3, #12]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	895b      	ldrh	r3, [r3, #10]
 80109b8:	461a      	mov	r2, r3
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	899b      	ldrh	r3, [r3, #12]
 80109be:	fb02 f303 	mul.w	r3, r2, r3
 80109c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	657b      	str	r3, [r7, #84]	; 0x54
 80109d0:	e016      	b.n	8010a00 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fe fc3b 	bl	800f252 <get_fat>
 80109dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80109de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d802      	bhi.n	80109ea <f_open+0x2e6>
 80109e4:	2302      	movs	r3, #2
 80109e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f0:	d102      	bne.n	80109f8 <f_open+0x2f4>
 80109f2:	2301      	movs	r3, #1
 80109f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	657b      	str	r3, [r7, #84]	; 0x54
 8010a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d103      	bne.n	8010a10 <f_open+0x30c>
 8010a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d8e0      	bhi.n	80109d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d131      	bne.n	8010a82 <f_open+0x37e>
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	899b      	ldrh	r3, [r3, #12]
 8010a22:	461a      	mov	r2, r3
 8010a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a26:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a2a:	fb01 f202 	mul.w	r2, r1, r2
 8010a2e:	1a9b      	subs	r3, r3, r2
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d026      	beq.n	8010a82 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fe fbeb 	bl	800f214 <clust2sect>
 8010a3e:	6478      	str	r0, [r7, #68]	; 0x44
 8010a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d103      	bne.n	8010a4e <f_open+0x34a>
						res = FR_INT_ERR;
 8010a46:	2302      	movs	r3, #2
 8010a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a4c:	e019      	b.n	8010a82 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	899b      	ldrh	r3, [r3, #12]
 8010a52:	461a      	mov	r2, r3
 8010a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5c:	441a      	add	r2, r3
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	7858      	ldrb	r0, [r3, #1]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6a1a      	ldr	r2, [r3, #32]
 8010a70:	2301      	movs	r3, #1
 8010a72:	f7fe f823 	bl	800eabc <disk_read>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d002      	beq.n	8010a82 <f_open+0x37e>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <f_open+0x38c>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3760      	adds	r7, #96	; 0x60
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b086      	sub	sp, #24
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f107 0208 	add.w	r2, r7, #8
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff fdad 	bl	801060c <validate>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d168      	bne.n	8010b8e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	7d1b      	ldrb	r3, [r3, #20]
 8010ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d062      	beq.n	8010b8e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	7d1b      	ldrb	r3, [r3, #20]
 8010acc:	b25b      	sxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	da15      	bge.n	8010afe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	7858      	ldrb	r0, [r3, #1]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6a1a      	ldr	r2, [r3, #32]
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	f7fe f80b 	bl	800eafc <disk_write>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d001      	beq.n	8010af0 <f_sync+0x54>
 8010aec:	2301      	movs	r3, #1
 8010aee:	e04f      	b.n	8010b90 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	7d1b      	ldrb	r3, [r3, #20]
 8010af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010af8:	b2da      	uxtb	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010afe:	f7fd fe31 	bl	800e764 <get_fattime>
 8010b02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f7fe fae3 	bl	800f0d8 <move_window>
 8010b12:	4603      	mov	r3, r0
 8010b14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d138      	bne.n	8010b8e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	330b      	adds	r3, #11
 8010b26:	781a      	ldrb	r2, [r3, #0]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	330b      	adds	r3, #11
 8010b2c:	f042 0220 	orr.w	r2, r2, #32
 8010b30:	b2d2      	uxtb	r2, r2
 8010b32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6818      	ldr	r0, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	68f9      	ldr	r1, [r7, #12]
 8010b40:	f7ff f839 	bl	800fbb6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f103 021c 	add.w	r2, r3, #28
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	4619      	mov	r1, r3
 8010b50:	4610      	mov	r0, r2
 8010b52:	f7fe f867 	bl	800ec24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3316      	adds	r3, #22
 8010b5a:	6939      	ldr	r1, [r7, #16]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fe f861 	bl	800ec24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	3312      	adds	r3, #18
 8010b66:	2100      	movs	r1, #0
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fe f840 	bl	800ebee <st_word>
					fs->wflag = 1;
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2201      	movs	r2, #1
 8010b72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fe fadc 	bl	800f134 <sync_fs>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	7d1b      	ldrb	r3, [r3, #20]
 8010b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3718      	adds	r7, #24
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff ff7b 	bl	8010a9c <f_sync>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d118      	bne.n	8010be2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f107 0208 	add.w	r2, r7, #8
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fd27 	bl	801060c <validate>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010bc2:	7bfb      	ldrb	r3, [r7, #15]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d10c      	bne.n	8010be2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	691b      	ldr	r3, [r3, #16]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe f9df 	bl	800ef90 <dec_lock>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b090      	sub	sp, #64	; 0x40
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010bf6:	f107 010c 	add.w	r1, r7, #12
 8010bfa:	1d3b      	adds	r3, r7, #4
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fa84 	bl	801010c <find_volume>
 8010c04:	4603      	mov	r3, r0
 8010c06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d11f      	bne.n	8010c52 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	f107 030c 	add.w	r3, r7, #12
 8010c18:	4611      	mov	r1, r2
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7ff f966 	bl	800feec <follow_path>
 8010c20:	4603      	mov	r3, r0
 8010c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8010c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d111      	bne.n	8010c52 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010c2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010c32:	b25b      	sxtb	r3, r3
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da03      	bge.n	8010c40 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8010c38:	2306      	movs	r3, #6
 8010c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010c3e:	e008      	b.n	8010c52 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d005      	beq.n	8010c52 <f_stat+0x66>
 8010c46:	f107 030c 	add.w	r3, r7, #12
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7ff f859 	bl	800fd04 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3740      	adds	r7, #64	; 0x40
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
	...

08010c60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b087      	sub	sp, #28
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c76:	4b1f      	ldr	r3, [pc, #124]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010c78:	7a5b      	ldrb	r3, [r3, #9]
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d131      	bne.n	8010ce4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c80:	4b1c      	ldr	r3, [pc, #112]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010c82:	7a5b      	ldrb	r3, [r3, #9]
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	461a      	mov	r2, r3
 8010c88:	4b1a      	ldr	r3, [pc, #104]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c8e:	4b19      	ldr	r3, [pc, #100]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010c90:	7a5b      	ldrb	r3, [r3, #9]
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	4a17      	ldr	r2, [pc, #92]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c9e:	4b15      	ldr	r3, [pc, #84]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010ca0:	7a5b      	ldrb	r3, [r3, #9]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	4b13      	ldr	r3, [pc, #76]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010ca8:	4413      	add	r3, r2
 8010caa:	79fa      	ldrb	r2, [r7, #7]
 8010cac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010cae:	4b11      	ldr	r3, [pc, #68]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010cb0:	7a5b      	ldrb	r3, [r3, #9]
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	b2d1      	uxtb	r1, r2
 8010cb8:	4a0e      	ldr	r2, [pc, #56]	; (8010cf4 <FATFS_LinkDriverEx+0x94>)
 8010cba:	7251      	strb	r1, [r2, #9]
 8010cbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010cbe:	7dbb      	ldrb	r3, [r7, #22]
 8010cc0:	3330      	adds	r3, #48	; 0x30
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	223a      	movs	r2, #58	; 0x3a
 8010cce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	3302      	adds	r3, #2
 8010cd4:	222f      	movs	r2, #47	; 0x2f
 8010cd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	3303      	adds	r3, #3
 8010cdc:	2200      	movs	r2, #0
 8010cde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	371c      	adds	r7, #28
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	20005d48 	.word	0x20005d48

08010cf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d02:	2200      	movs	r2, #0
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7ff ffaa 	bl	8010c60 <FATFS_LinkDriverEx>
 8010d0c:	4603      	mov	r3, r0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
	...

08010d18 <asctime>:
 8010d18:	4b0d      	ldr	r3, [pc, #52]	; (8010d50 <asctime+0x38>)
 8010d1a:	b570      	push	{r4, r5, r6, lr}
 8010d1c:	681d      	ldr	r5, [r3, #0]
 8010d1e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8010d20:	4604      	mov	r4, r0
 8010d22:	b976      	cbnz	r6, 8010d42 <asctime+0x2a>
 8010d24:	201a      	movs	r0, #26
 8010d26:	f000 f8a1 	bl	8010e6c <malloc>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	6428      	str	r0, [r5, #64]	; 0x40
 8010d2e:	b920      	cbnz	r0, 8010d3a <asctime+0x22>
 8010d30:	4b08      	ldr	r3, [pc, #32]	; (8010d54 <asctime+0x3c>)
 8010d32:	4809      	ldr	r0, [pc, #36]	; (8010d58 <asctime+0x40>)
 8010d34:	2137      	movs	r1, #55	; 0x37
 8010d36:	f000 f837 	bl	8010da8 <__assert_func>
 8010d3a:	221a      	movs	r2, #26
 8010d3c:	4631      	mov	r1, r6
 8010d3e:	f000 f8b3 	bl	8010ea8 <memset>
 8010d42:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8010d44:	4620      	mov	r0, r4
 8010d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d4a:	f000 b807 	b.w	8010d5c <asctime_r>
 8010d4e:	bf00      	nop
 8010d50:	200002c8 	.word	0x200002c8
 8010d54:	080486c4 	.word	0x080486c4
 8010d58:	080486db 	.word	0x080486db

08010d5c <asctime_r>:
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	460c      	mov	r4, r1
 8010d60:	6941      	ldr	r1, [r0, #20]
 8010d62:	6903      	ldr	r3, [r0, #16]
 8010d64:	6982      	ldr	r2, [r0, #24]
 8010d66:	b086      	sub	sp, #24
 8010d68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8010d6c:	9104      	str	r1, [sp, #16]
 8010d6e:	6801      	ldr	r1, [r0, #0]
 8010d70:	9103      	str	r1, [sp, #12]
 8010d72:	6841      	ldr	r1, [r0, #4]
 8010d74:	9102      	str	r1, [sp, #8]
 8010d76:	6881      	ldr	r1, [r0, #8]
 8010d78:	9101      	str	r1, [sp, #4]
 8010d7a:	68c1      	ldr	r1, [r0, #12]
 8010d7c:	9100      	str	r1, [sp, #0]
 8010d7e:	4907      	ldr	r1, [pc, #28]	; (8010d9c <asctime_r+0x40>)
 8010d80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d84:	440b      	add	r3, r1
 8010d86:	4906      	ldr	r1, [pc, #24]	; (8010da0 <asctime_r+0x44>)
 8010d88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010d8c:	440a      	add	r2, r1
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4904      	ldr	r1, [pc, #16]	; (8010da4 <asctime_r+0x48>)
 8010d92:	f001 f9cf 	bl	8012134 <siprintf>
 8010d96:	4620      	mov	r0, r4
 8010d98:	b006      	add	sp, #24
 8010d9a:	bd10      	pop	{r4, pc}
 8010d9c:	0804876c 	.word	0x0804876c
 8010da0:	08048757 	.word	0x08048757
 8010da4:	08048737 	.word	0x08048737

08010da8 <__assert_func>:
 8010da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010daa:	4614      	mov	r4, r2
 8010dac:	461a      	mov	r2, r3
 8010dae:	4b09      	ldr	r3, [pc, #36]	; (8010dd4 <__assert_func+0x2c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	4605      	mov	r5, r0
 8010db4:	68d8      	ldr	r0, [r3, #12]
 8010db6:	b14c      	cbz	r4, 8010dcc <__assert_func+0x24>
 8010db8:	4b07      	ldr	r3, [pc, #28]	; (8010dd8 <__assert_func+0x30>)
 8010dba:	9100      	str	r1, [sp, #0]
 8010dbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010dc0:	4906      	ldr	r1, [pc, #24]	; (8010ddc <__assert_func+0x34>)
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	f000 f81c 	bl	8010e00 <fiprintf>
 8010dc8:	f003 fa72 	bl	80142b0 <abort>
 8010dcc:	4b04      	ldr	r3, [pc, #16]	; (8010de0 <__assert_func+0x38>)
 8010dce:	461c      	mov	r4, r3
 8010dd0:	e7f3      	b.n	8010dba <__assert_func+0x12>
 8010dd2:	bf00      	nop
 8010dd4:	200002c8 	.word	0x200002c8
 8010dd8:	08048790 	.word	0x08048790
 8010ddc:	0804879d 	.word	0x0804879d
 8010de0:	08048756 	.word	0x08048756

08010de4 <atof>:
 8010de4:	2100      	movs	r1, #0
 8010de6:	f002 bde1 	b.w	80139ac <strtod>

08010dea <atoi>:
 8010dea:	220a      	movs	r2, #10
 8010dec:	2100      	movs	r1, #0
 8010dee:	f002 bec9 	b.w	8013b84 <strtol>
	...

08010df4 <__errno>:
 8010df4:	4b01      	ldr	r3, [pc, #4]	; (8010dfc <__errno+0x8>)
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	200002c8 	.word	0x200002c8

08010e00 <fiprintf>:
 8010e00:	b40e      	push	{r1, r2, r3}
 8010e02:	b503      	push	{r0, r1, lr}
 8010e04:	4601      	mov	r1, r0
 8010e06:	ab03      	add	r3, sp, #12
 8010e08:	4805      	ldr	r0, [pc, #20]	; (8010e20 <fiprintf+0x20>)
 8010e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0e:	6800      	ldr	r0, [r0, #0]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	f000 fbcd 	bl	80115b0 <_vfiprintf_r>
 8010e16:	b002      	add	sp, #8
 8010e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e1c:	b003      	add	sp, #12
 8010e1e:	4770      	bx	lr
 8010e20:	200002c8 	.word	0x200002c8

08010e24 <__libc_init_array>:
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	4d0d      	ldr	r5, [pc, #52]	; (8010e5c <__libc_init_array+0x38>)
 8010e28:	4c0d      	ldr	r4, [pc, #52]	; (8010e60 <__libc_init_array+0x3c>)
 8010e2a:	1b64      	subs	r4, r4, r5
 8010e2c:	10a4      	asrs	r4, r4, #2
 8010e2e:	2600      	movs	r6, #0
 8010e30:	42a6      	cmp	r6, r4
 8010e32:	d109      	bne.n	8010e48 <__libc_init_array+0x24>
 8010e34:	4d0b      	ldr	r5, [pc, #44]	; (8010e64 <__libc_init_array+0x40>)
 8010e36:	4c0c      	ldr	r4, [pc, #48]	; (8010e68 <__libc_init_array+0x44>)
 8010e38:	f008 fe24 	bl	8019a84 <_init>
 8010e3c:	1b64      	subs	r4, r4, r5
 8010e3e:	10a4      	asrs	r4, r4, #2
 8010e40:	2600      	movs	r6, #0
 8010e42:	42a6      	cmp	r6, r4
 8010e44:	d105      	bne.n	8010e52 <__libc_init_array+0x2e>
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e4c:	4798      	blx	r3
 8010e4e:	3601      	adds	r6, #1
 8010e50:	e7ee      	b.n	8010e30 <__libc_init_array+0xc>
 8010e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e56:	4798      	blx	r3
 8010e58:	3601      	adds	r6, #1
 8010e5a:	e7f2      	b.n	8010e42 <__libc_init_array+0x1e>
 8010e5c:	08049220 	.word	0x08049220
 8010e60:	08049220 	.word	0x08049220
 8010e64:	08049220 	.word	0x08049220
 8010e68:	08049224 	.word	0x08049224

08010e6c <malloc>:
 8010e6c:	4b02      	ldr	r3, [pc, #8]	; (8010e78 <malloc+0xc>)
 8010e6e:	4601      	mov	r1, r0
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	f000 baff 	b.w	8011474 <_malloc_r>
 8010e76:	bf00      	nop
 8010e78:	200002c8 	.word	0x200002c8

08010e7c <free>:
 8010e7c:	4b02      	ldr	r3, [pc, #8]	; (8010e88 <free+0xc>)
 8010e7e:	4601      	mov	r1, r0
 8010e80:	6818      	ldr	r0, [r3, #0]
 8010e82:	f000 ba8b 	b.w	801139c <_free_r>
 8010e86:	bf00      	nop
 8010e88:	200002c8 	.word	0x200002c8

08010e8c <memcpy>:
 8010e8c:	440a      	add	r2, r1
 8010e8e:	4291      	cmp	r1, r2
 8010e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e94:	d100      	bne.n	8010e98 <memcpy+0xc>
 8010e96:	4770      	bx	lr
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ea2:	4291      	cmp	r1, r2
 8010ea4:	d1f9      	bne.n	8010e9a <memcpy+0xe>
 8010ea6:	bd10      	pop	{r4, pc}

08010ea8 <memset>:
 8010ea8:	4402      	add	r2, r0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d100      	bne.n	8010eb2 <memset+0xa>
 8010eb0:	4770      	bx	lr
 8010eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8010eb6:	e7f9      	b.n	8010eac <memset+0x4>

08010eb8 <validate_structure>:
 8010eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eba:	6801      	ldr	r1, [r0, #0]
 8010ebc:	293b      	cmp	r1, #59	; 0x3b
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	d911      	bls.n	8010ee6 <validate_structure+0x2e>
 8010ec2:	223c      	movs	r2, #60	; 0x3c
 8010ec4:	4668      	mov	r0, sp
 8010ec6:	f003 fa0f 	bl	80142e8 <div>
 8010eca:	9a01      	ldr	r2, [sp, #4]
 8010ecc:	6863      	ldr	r3, [r4, #4]
 8010ece:	9900      	ldr	r1, [sp, #0]
 8010ed0:	2a00      	cmp	r2, #0
 8010ed2:	440b      	add	r3, r1
 8010ed4:	6063      	str	r3, [r4, #4]
 8010ed6:	bfbb      	ittet	lt
 8010ed8:	323c      	addlt	r2, #60	; 0x3c
 8010eda:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010ede:	6022      	strge	r2, [r4, #0]
 8010ee0:	6022      	strlt	r2, [r4, #0]
 8010ee2:	bfb8      	it	lt
 8010ee4:	6063      	strlt	r3, [r4, #4]
 8010ee6:	6861      	ldr	r1, [r4, #4]
 8010ee8:	293b      	cmp	r1, #59	; 0x3b
 8010eea:	d911      	bls.n	8010f10 <validate_structure+0x58>
 8010eec:	223c      	movs	r2, #60	; 0x3c
 8010eee:	4668      	mov	r0, sp
 8010ef0:	f003 f9fa 	bl	80142e8 <div>
 8010ef4:	9a01      	ldr	r2, [sp, #4]
 8010ef6:	68a3      	ldr	r3, [r4, #8]
 8010ef8:	9900      	ldr	r1, [sp, #0]
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	440b      	add	r3, r1
 8010efe:	60a3      	str	r3, [r4, #8]
 8010f00:	bfbb      	ittet	lt
 8010f02:	323c      	addlt	r2, #60	; 0x3c
 8010f04:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010f08:	6062      	strge	r2, [r4, #4]
 8010f0a:	6062      	strlt	r2, [r4, #4]
 8010f0c:	bfb8      	it	lt
 8010f0e:	60a3      	strlt	r3, [r4, #8]
 8010f10:	68a1      	ldr	r1, [r4, #8]
 8010f12:	2917      	cmp	r1, #23
 8010f14:	d911      	bls.n	8010f3a <validate_structure+0x82>
 8010f16:	2218      	movs	r2, #24
 8010f18:	4668      	mov	r0, sp
 8010f1a:	f003 f9e5 	bl	80142e8 <div>
 8010f1e:	9a01      	ldr	r2, [sp, #4]
 8010f20:	68e3      	ldr	r3, [r4, #12]
 8010f22:	9900      	ldr	r1, [sp, #0]
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	440b      	add	r3, r1
 8010f28:	60e3      	str	r3, [r4, #12]
 8010f2a:	bfbb      	ittet	lt
 8010f2c:	3218      	addlt	r2, #24
 8010f2e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010f32:	60a2      	strge	r2, [r4, #8]
 8010f34:	60a2      	strlt	r2, [r4, #8]
 8010f36:	bfb8      	it	lt
 8010f38:	60e3      	strlt	r3, [r4, #12]
 8010f3a:	6921      	ldr	r1, [r4, #16]
 8010f3c:	290b      	cmp	r1, #11
 8010f3e:	d911      	bls.n	8010f64 <validate_structure+0xac>
 8010f40:	220c      	movs	r2, #12
 8010f42:	4668      	mov	r0, sp
 8010f44:	f003 f9d0 	bl	80142e8 <div>
 8010f48:	9a01      	ldr	r2, [sp, #4]
 8010f4a:	6963      	ldr	r3, [r4, #20]
 8010f4c:	9900      	ldr	r1, [sp, #0]
 8010f4e:	2a00      	cmp	r2, #0
 8010f50:	440b      	add	r3, r1
 8010f52:	6163      	str	r3, [r4, #20]
 8010f54:	bfbb      	ittet	lt
 8010f56:	320c      	addlt	r2, #12
 8010f58:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8010f5c:	6122      	strge	r2, [r4, #16]
 8010f5e:	6122      	strlt	r2, [r4, #16]
 8010f60:	bfb8      	it	lt
 8010f62:	6163      	strlt	r3, [r4, #20]
 8010f64:	6963      	ldr	r3, [r4, #20]
 8010f66:	0798      	lsls	r0, r3, #30
 8010f68:	d120      	bne.n	8010fac <validate_structure+0xf4>
 8010f6a:	2164      	movs	r1, #100	; 0x64
 8010f6c:	fb93 f2f1 	sdiv	r2, r3, r1
 8010f70:	fb01 3212 	mls	r2, r1, r2, r3
 8010f74:	b9e2      	cbnz	r2, 8010fb0 <validate_structure+0xf8>
 8010f76:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8010f7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f82:	fb02 3311 	mls	r3, r2, r1, r3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	bf14      	ite	ne
 8010f8a:	231c      	movne	r3, #28
 8010f8c:	231d      	moveq	r3, #29
 8010f8e:	68e2      	ldr	r2, [r4, #12]
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	dc0f      	bgt.n	8010fb4 <validate_structure+0xfc>
 8010f94:	4f33      	ldr	r7, [pc, #204]	; (8011064 <validate_structure+0x1ac>)
 8010f96:	260b      	movs	r6, #11
 8010f98:	2064      	movs	r0, #100	; 0x64
 8010f9a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010f9e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010fa2:	f1bc 0f00 	cmp.w	ip, #0
 8010fa6:	dd31      	ble.n	801100c <validate_structure+0x154>
 8010fa8:	b003      	add	sp, #12
 8010faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fac:	231c      	movs	r3, #28
 8010fae:	e7ee      	b.n	8010f8e <validate_structure+0xd6>
 8010fb0:	231d      	movs	r3, #29
 8010fb2:	e7ec      	b.n	8010f8e <validate_structure+0xd6>
 8010fb4:	4e2b      	ldr	r6, [pc, #172]	; (8011064 <validate_structure+0x1ac>)
 8010fb6:	2700      	movs	r7, #0
 8010fb8:	2064      	movs	r0, #100	; 0x64
 8010fba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8010fbe:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8010fc2:	2a01      	cmp	r2, #1
 8010fc4:	bf14      	ite	ne
 8010fc6:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8010fca:	469c      	moveq	ip, r3
 8010fcc:	4561      	cmp	r1, ip
 8010fce:	ddeb      	ble.n	8010fa8 <validate_structure+0xf0>
 8010fd0:	3201      	adds	r2, #1
 8010fd2:	eba1 010c 	sub.w	r1, r1, ip
 8010fd6:	2a0c      	cmp	r2, #12
 8010fd8:	60e1      	str	r1, [r4, #12]
 8010fda:	6122      	str	r2, [r4, #16]
 8010fdc:	d1ef      	bne.n	8010fbe <validate_structure+0x106>
 8010fde:	6963      	ldr	r3, [r4, #20]
 8010fe0:	1c5a      	adds	r2, r3, #1
 8010fe2:	0791      	lsls	r1, r2, #30
 8010fe4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8010fe8:	d137      	bne.n	801105a <validate_structure+0x1a2>
 8010fea:	fb92 f1f0 	sdiv	r1, r2, r0
 8010fee:	fb00 2211 	mls	r2, r0, r1, r2
 8010ff2:	2a00      	cmp	r2, #0
 8010ff4:	d133      	bne.n	801105e <validate_structure+0x1a6>
 8010ff6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8010ffa:	fb93 f2f5 	sdiv	r2, r3, r5
 8010ffe:	fb05 3312 	mls	r3, r5, r2, r3
 8011002:	2b00      	cmp	r3, #0
 8011004:	bf14      	ite	ne
 8011006:	231c      	movne	r3, #28
 8011008:	231d      	moveq	r3, #29
 801100a:	e7d8      	b.n	8010fbe <validate_structure+0x106>
 801100c:	6921      	ldr	r1, [r4, #16]
 801100e:	3901      	subs	r1, #1
 8011010:	6121      	str	r1, [r4, #16]
 8011012:	3101      	adds	r1, #1
 8011014:	d114      	bne.n	8011040 <validate_structure+0x188>
 8011016:	6963      	ldr	r3, [r4, #20]
 8011018:	1e5a      	subs	r2, r3, #1
 801101a:	0791      	lsls	r1, r2, #30
 801101c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8011020:	d117      	bne.n	8011052 <validate_structure+0x19a>
 8011022:	fb92 f1f0 	sdiv	r1, r2, r0
 8011026:	fb00 2211 	mls	r2, r0, r1, r2
 801102a:	b9a2      	cbnz	r2, 8011056 <validate_structure+0x19e>
 801102c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011030:	fb93 f2f5 	sdiv	r2, r3, r5
 8011034:	fb05 3312 	mls	r3, r5, r2, r3
 8011038:	2b00      	cmp	r3, #0
 801103a:	bf14      	ite	ne
 801103c:	231c      	movne	r3, #28
 801103e:	231d      	moveq	r3, #29
 8011040:	6922      	ldr	r2, [r4, #16]
 8011042:	2a01      	cmp	r2, #1
 8011044:	bf14      	ite	ne
 8011046:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801104a:	461a      	moveq	r2, r3
 801104c:	4462      	add	r2, ip
 801104e:	60e2      	str	r2, [r4, #12]
 8011050:	e7a5      	b.n	8010f9e <validate_structure+0xe6>
 8011052:	231c      	movs	r3, #28
 8011054:	e7f4      	b.n	8011040 <validate_structure+0x188>
 8011056:	231d      	movs	r3, #29
 8011058:	e7f2      	b.n	8011040 <validate_structure+0x188>
 801105a:	231c      	movs	r3, #28
 801105c:	e7af      	b.n	8010fbe <validate_structure+0x106>
 801105e:	231d      	movs	r3, #29
 8011060:	e7ad      	b.n	8010fbe <validate_structure+0x106>
 8011062:	bf00      	nop
 8011064:	080487d0 	.word	0x080487d0

08011068 <mktime>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b085      	sub	sp, #20
 801106e:	4607      	mov	r7, r0
 8011070:	f004 fd32 	bl	8015ad8 <__gettzinfo>
 8011074:	4681      	mov	r9, r0
 8011076:	4638      	mov	r0, r7
 8011078:	f7ff ff1e 	bl	8010eb8 <validate_structure>
 801107c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8011080:	233c      	movs	r3, #60	; 0x3c
 8011082:	fb03 4400 	mla	r4, r3, r0, r4
 8011086:	68b8      	ldr	r0, [r7, #8]
 8011088:	4abc      	ldr	r2, [pc, #752]	; (801137c <mktime+0x314>)
 801108a:	697e      	ldr	r6, [r7, #20]
 801108c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011090:	fb03 4400 	mla	r4, r3, r0, r4
 8011094:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8011098:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801109c:	3d01      	subs	r5, #1
 801109e:	2b01      	cmp	r3, #1
 80110a0:	4415      	add	r5, r2
 80110a2:	dd11      	ble.n	80110c8 <mktime+0x60>
 80110a4:	07b1      	lsls	r1, r6, #30
 80110a6:	d10f      	bne.n	80110c8 <mktime+0x60>
 80110a8:	2264      	movs	r2, #100	; 0x64
 80110aa:	fb96 f3f2 	sdiv	r3, r6, r2
 80110ae:	fb02 6313 	mls	r3, r2, r3, r6
 80110b2:	b943      	cbnz	r3, 80110c6 <mktime+0x5e>
 80110b4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80110b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80110bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80110c0:	fb02 3311 	mls	r3, r2, r1, r3
 80110c4:	b903      	cbnz	r3, 80110c8 <mktime+0x60>
 80110c6:	3501      	adds	r5, #1
 80110c8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80110cc:	3310      	adds	r3, #16
 80110ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 80110d2:	4293      	cmp	r3, r2
 80110d4:	61fd      	str	r5, [r7, #28]
 80110d6:	f200 815d 	bhi.w	8011394 <mktime+0x32c>
 80110da:	2e46      	cmp	r6, #70	; 0x46
 80110dc:	dd71      	ble.n	80111c2 <mktime+0x15a>
 80110de:	2346      	movs	r3, #70	; 0x46
 80110e0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80110e4:	2164      	movs	r1, #100	; 0x64
 80110e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80110ea:	079a      	lsls	r2, r3, #30
 80110ec:	d163      	bne.n	80111b6 <mktime+0x14e>
 80110ee:	fb93 f2f1 	sdiv	r2, r3, r1
 80110f2:	fb01 3212 	mls	r2, r1, r2, r3
 80110f6:	2a00      	cmp	r2, #0
 80110f8:	d160      	bne.n	80111bc <mktime+0x154>
 80110fa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80110fe:	fb92 fef0 	sdiv	lr, r2, r0
 8011102:	fb00 221e 	mls	r2, r0, lr, r2
 8011106:	2a00      	cmp	r2, #0
 8011108:	bf14      	ite	ne
 801110a:	4662      	movne	r2, ip
 801110c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011110:	3301      	adds	r3, #1
 8011112:	429e      	cmp	r6, r3
 8011114:	4415      	add	r5, r2
 8011116:	d1e8      	bne.n	80110ea <mktime+0x82>
 8011118:	4b99      	ldr	r3, [pc, #612]	; (8011380 <mktime+0x318>)
 801111a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801111e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8011122:	f002 fe61 	bl	8013de8 <__tz_lock>
 8011126:	f002 fe6b 	bl	8013e00 <_tzset_unlocked>
 801112a:	4b96      	ldr	r3, [pc, #600]	; (8011384 <mktime+0x31c>)
 801112c:	f8d3 b000 	ldr.w	fp, [r3]
 8011130:	f1bb 0f00 	cmp.w	fp, #0
 8011134:	d039      	beq.n	80111aa <mktime+0x142>
 8011136:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801113a:	6978      	ldr	r0, [r7, #20]
 801113c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011140:	f1bb 0f01 	cmp.w	fp, #1
 8011144:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011148:	46da      	mov	sl, fp
 801114a:	bfa8      	it	ge
 801114c:	f04f 0a01 	movge.w	sl, #1
 8011150:	4283      	cmp	r3, r0
 8011152:	d178      	bne.n	8011246 <mktime+0x1de>
 8011154:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8011158:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 801115c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8011160:	1a5b      	subs	r3, r3, r1
 8011162:	9302      	str	r3, [sp, #8]
 8011164:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8011168:	9303      	str	r3, [sp, #12]
 801116a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801116e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8011172:	9301      	str	r3, [sp, #4]
 8011174:	ebb3 0c02 	subs.w	ip, r3, r2
 8011178:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 801117c:	4564      	cmp	r4, ip
 801117e:	eb78 0300 	sbcs.w	r3, r8, r0
 8011182:	da66      	bge.n	8011252 <mktime+0x1ea>
 8011184:	f8d9 3000 	ldr.w	r3, [r9]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d06f      	beq.n	801126c <mktime+0x204>
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	429c      	cmp	r4, r3
 8011190:	9b03      	ldr	r3, [sp, #12]
 8011192:	eb78 0303 	sbcs.w	r3, r8, r3
 8011196:	db03      	blt.n	80111a0 <mktime+0x138>
 8011198:	4564      	cmp	r4, ip
 801119a:	eb78 0300 	sbcs.w	r3, r8, r0
 801119e:	db6b      	blt.n	8011278 <mktime+0x210>
 80111a0:	f1bb 0f00 	cmp.w	fp, #0
 80111a4:	f04f 0b00 	mov.w	fp, #0
 80111a8:	da6b      	bge.n	8011282 <mktime+0x21a>
 80111aa:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80111ae:	190c      	adds	r4, r1, r4
 80111b0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80111b4:	e0a9      	b.n	801130a <mktime+0x2a2>
 80111b6:	f240 126d 	movw	r2, #365	; 0x16d
 80111ba:	e7a9      	b.n	8011110 <mktime+0xa8>
 80111bc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80111c0:	e7a6      	b.n	8011110 <mktime+0xa8>
 80111c2:	d0a9      	beq.n	8011118 <mktime+0xb0>
 80111c4:	2345      	movs	r3, #69	; 0x45
 80111c6:	f240 1c6d 	movw	ip, #365	; 0x16d
 80111ca:	2164      	movs	r1, #100	; 0x64
 80111cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80111d0:	e012      	b.n	80111f8 <mktime+0x190>
 80111d2:	bb62      	cbnz	r2, 801122e <mktime+0x1c6>
 80111d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80111d8:	fb01 3212 	mls	r2, r1, r2, r3
 80111dc:	bb52      	cbnz	r2, 8011234 <mktime+0x1cc>
 80111de:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80111e2:	fb92 fef0 	sdiv	lr, r2, r0
 80111e6:	fb00 221e 	mls	r2, r0, lr, r2
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	bf14      	ite	ne
 80111ee:	4662      	movne	r2, ip
 80111f0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80111f4:	1aad      	subs	r5, r5, r2
 80111f6:	3b01      	subs	r3, #1
 80111f8:	429e      	cmp	r6, r3
 80111fa:	f003 0203 	and.w	r2, r3, #3
 80111fe:	dbe8      	blt.n	80111d2 <mktime+0x16a>
 8011200:	b9da      	cbnz	r2, 801123a <mktime+0x1d2>
 8011202:	2264      	movs	r2, #100	; 0x64
 8011204:	fb96 f3f2 	sdiv	r3, r6, r2
 8011208:	fb02 6313 	mls	r3, r2, r3, r6
 801120c:	b9c3      	cbnz	r3, 8011240 <mktime+0x1d8>
 801120e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8011212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011216:	fb93 f1f2 	sdiv	r1, r3, r2
 801121a:	fb02 3311 	mls	r3, r2, r1, r3
 801121e:	2b00      	cmp	r3, #0
 8011220:	f240 136d 	movw	r3, #365	; 0x16d
 8011224:	bf08      	it	eq
 8011226:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801122a:	1aed      	subs	r5, r5, r3
 801122c:	e774      	b.n	8011118 <mktime+0xb0>
 801122e:	f240 126d 	movw	r2, #365	; 0x16d
 8011232:	e7df      	b.n	80111f4 <mktime+0x18c>
 8011234:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011238:	e7dc      	b.n	80111f4 <mktime+0x18c>
 801123a:	f240 136d 	movw	r3, #365	; 0x16d
 801123e:	e7f4      	b.n	801122a <mktime+0x1c2>
 8011240:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011244:	e7f1      	b.n	801122a <mktime+0x1c2>
 8011246:	f002 fd25 	bl	8013c94 <__tzcalc_limits>
 801124a:	2800      	cmp	r0, #0
 801124c:	d182      	bne.n	8011154 <mktime+0xec>
 801124e:	46d3      	mov	fp, sl
 8011250:	e050      	b.n	80112f4 <mktime+0x28c>
 8011252:	9b01      	ldr	r3, [sp, #4]
 8011254:	1a5b      	subs	r3, r3, r1
 8011256:	9301      	str	r3, [sp, #4]
 8011258:	ea4f 73e1 	mov.w	r3, r1, asr #31
 801125c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8011260:	9b01      	ldr	r3, [sp, #4]
 8011262:	429c      	cmp	r4, r3
 8011264:	eb78 030e 	sbcs.w	r3, r8, lr
 8011268:	dbf1      	blt.n	801124e <mktime+0x1e6>
 801126a:	e78b      	b.n	8011184 <mktime+0x11c>
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	429c      	cmp	r4, r3
 8011270:	9b03      	ldr	r3, [sp, #12]
 8011272:	eb78 0303 	sbcs.w	r3, r8, r3
 8011276:	db8f      	blt.n	8011198 <mktime+0x130>
 8011278:	f1bb 0f00 	cmp.w	fp, #0
 801127c:	db3e      	blt.n	80112fc <mktime+0x294>
 801127e:	f04f 0b01 	mov.w	fp, #1
 8011282:	ea8a 0a0b 	eor.w	sl, sl, fp
 8011286:	f1ba 0f01 	cmp.w	sl, #1
 801128a:	d133      	bne.n	80112f4 <mktime+0x28c>
 801128c:	f1bb 0f00 	cmp.w	fp, #0
 8011290:	d04e      	beq.n	8011330 <mktime+0x2c8>
 8011292:	1a52      	subs	r2, r2, r1
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801129a:	4413      	add	r3, r2
 801129c:	1914      	adds	r4, r2, r4
 801129e:	603b      	str	r3, [r7, #0]
 80112a0:	4638      	mov	r0, r7
 80112a2:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80112a6:	f7ff fe07 	bl	8010eb8 <validate_structure>
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	ebb2 020a 	subs.w	r2, r2, sl
 80112b0:	d020      	beq.n	80112f4 <mktime+0x28c>
 80112b2:	2a01      	cmp	r2, #1
 80112b4:	dc3e      	bgt.n	8011334 <mktime+0x2cc>
 80112b6:	1c90      	adds	r0, r2, #2
 80112b8:	bfd8      	it	le
 80112ba:	2201      	movle	r2, #1
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	18d3      	adds	r3, r2, r3
 80112c0:	4415      	add	r5, r2
 80112c2:	d540      	bpl.n	8011346 <mktime+0x2de>
 80112c4:	1e73      	subs	r3, r6, #1
 80112c6:	0799      	lsls	r1, r3, #30
 80112c8:	d137      	bne.n	801133a <mktime+0x2d2>
 80112ca:	2264      	movs	r2, #100	; 0x64
 80112cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80112d0:	fb02 3311 	mls	r3, r2, r1, r3
 80112d4:	bba3      	cbnz	r3, 8011340 <mktime+0x2d8>
 80112d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80112da:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80112de:	fb96 f2f3 	sdiv	r2, r6, r3
 80112e2:	fb03 6612 	mls	r6, r3, r2, r6
 80112e6:	2e00      	cmp	r6, #0
 80112e8:	f240 136d 	movw	r3, #365	; 0x16d
 80112ec:	bf18      	it	ne
 80112ee:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80112f2:	61fb      	str	r3, [r7, #28]
 80112f4:	f1bb 0f01 	cmp.w	fp, #1
 80112f8:	f47f af57 	bne.w	80111aa <mktime+0x142>
 80112fc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8011300:	190c      	adds	r4, r1, r4
 8011302:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8011306:	f04f 0b01 	mov.w	fp, #1
 801130a:	f002 fd73 	bl	8013df4 <__tz_unlock>
 801130e:	3504      	adds	r5, #4
 8011310:	2307      	movs	r3, #7
 8011312:	fb95 f3f3 	sdiv	r3, r5, r3
 8011316:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801131a:	1aed      	subs	r5, r5, r3
 801131c:	bf48      	it	mi
 801131e:	3507      	addmi	r5, #7
 8011320:	f8c7 b020 	str.w	fp, [r7, #32]
 8011324:	61bd      	str	r5, [r7, #24]
 8011326:	4620      	mov	r0, r4
 8011328:	4641      	mov	r1, r8
 801132a:	b005      	add	sp, #20
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	1a8a      	subs	r2, r1, r2
 8011332:	e7af      	b.n	8011294 <mktime+0x22c>
 8011334:	f04f 32ff 	mov.w	r2, #4294967295
 8011338:	e7c0      	b.n	80112bc <mktime+0x254>
 801133a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801133e:	e7d8      	b.n	80112f2 <mktime+0x28a>
 8011340:	f240 136d 	movw	r3, #365	; 0x16d
 8011344:	e7d5      	b.n	80112f2 <mktime+0x28a>
 8011346:	07b2      	lsls	r2, r6, #30
 8011348:	d11e      	bne.n	8011388 <mktime+0x320>
 801134a:	2164      	movs	r1, #100	; 0x64
 801134c:	fb96 f2f1 	sdiv	r2, r6, r1
 8011350:	fb01 6212 	mls	r2, r1, r2, r6
 8011354:	b9da      	cbnz	r2, 801138e <mktime+0x326>
 8011356:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801135a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801135e:	fb96 f1f2 	sdiv	r1, r6, r2
 8011362:	fb02 6611 	mls	r6, r2, r1, r6
 8011366:	2e00      	cmp	r6, #0
 8011368:	f240 126d 	movw	r2, #365	; 0x16d
 801136c:	bf08      	it	eq
 801136e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011372:	4293      	cmp	r3, r2
 8011374:	bfa8      	it	ge
 8011376:	1a9b      	subge	r3, r3, r2
 8011378:	e7bb      	b.n	80112f2 <mktime+0x28a>
 801137a:	bf00      	nop
 801137c:	08048800 	.word	0x08048800
 8011380:	00015180 	.word	0x00015180
 8011384:	20005d78 	.word	0x20005d78
 8011388:	f240 126d 	movw	r2, #365	; 0x16d
 801138c:	e7f1      	b.n	8011372 <mktime+0x30a>
 801138e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011392:	e7ee      	b.n	8011372 <mktime+0x30a>
 8011394:	f04f 34ff 	mov.w	r4, #4294967295
 8011398:	46a0      	mov	r8, r4
 801139a:	e7c4      	b.n	8011326 <mktime+0x2be>

0801139c <_free_r>:
 801139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801139e:	2900      	cmp	r1, #0
 80113a0:	d044      	beq.n	801142c <_free_r+0x90>
 80113a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113a6:	9001      	str	r0, [sp, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f1a1 0404 	sub.w	r4, r1, #4
 80113ae:	bfb8      	it	lt
 80113b0:	18e4      	addlt	r4, r4, r3
 80113b2:	f004 fc47 	bl	8015c44 <__malloc_lock>
 80113b6:	4a1e      	ldr	r2, [pc, #120]	; (8011430 <_free_r+0x94>)
 80113b8:	9801      	ldr	r0, [sp, #4]
 80113ba:	6813      	ldr	r3, [r2, #0]
 80113bc:	b933      	cbnz	r3, 80113cc <_free_r+0x30>
 80113be:	6063      	str	r3, [r4, #4]
 80113c0:	6014      	str	r4, [r2, #0]
 80113c2:	b003      	add	sp, #12
 80113c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113c8:	f004 bc42 	b.w	8015c50 <__malloc_unlock>
 80113cc:	42a3      	cmp	r3, r4
 80113ce:	d908      	bls.n	80113e2 <_free_r+0x46>
 80113d0:	6825      	ldr	r5, [r4, #0]
 80113d2:	1961      	adds	r1, r4, r5
 80113d4:	428b      	cmp	r3, r1
 80113d6:	bf01      	itttt	eq
 80113d8:	6819      	ldreq	r1, [r3, #0]
 80113da:	685b      	ldreq	r3, [r3, #4]
 80113dc:	1949      	addeq	r1, r1, r5
 80113de:	6021      	streq	r1, [r4, #0]
 80113e0:	e7ed      	b.n	80113be <_free_r+0x22>
 80113e2:	461a      	mov	r2, r3
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	b10b      	cbz	r3, 80113ec <_free_r+0x50>
 80113e8:	42a3      	cmp	r3, r4
 80113ea:	d9fa      	bls.n	80113e2 <_free_r+0x46>
 80113ec:	6811      	ldr	r1, [r2, #0]
 80113ee:	1855      	adds	r5, r2, r1
 80113f0:	42a5      	cmp	r5, r4
 80113f2:	d10b      	bne.n	801140c <_free_r+0x70>
 80113f4:	6824      	ldr	r4, [r4, #0]
 80113f6:	4421      	add	r1, r4
 80113f8:	1854      	adds	r4, r2, r1
 80113fa:	42a3      	cmp	r3, r4
 80113fc:	6011      	str	r1, [r2, #0]
 80113fe:	d1e0      	bne.n	80113c2 <_free_r+0x26>
 8011400:	681c      	ldr	r4, [r3, #0]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	6053      	str	r3, [r2, #4]
 8011406:	4421      	add	r1, r4
 8011408:	6011      	str	r1, [r2, #0]
 801140a:	e7da      	b.n	80113c2 <_free_r+0x26>
 801140c:	d902      	bls.n	8011414 <_free_r+0x78>
 801140e:	230c      	movs	r3, #12
 8011410:	6003      	str	r3, [r0, #0]
 8011412:	e7d6      	b.n	80113c2 <_free_r+0x26>
 8011414:	6825      	ldr	r5, [r4, #0]
 8011416:	1961      	adds	r1, r4, r5
 8011418:	428b      	cmp	r3, r1
 801141a:	bf04      	itt	eq
 801141c:	6819      	ldreq	r1, [r3, #0]
 801141e:	685b      	ldreq	r3, [r3, #4]
 8011420:	6063      	str	r3, [r4, #4]
 8011422:	bf04      	itt	eq
 8011424:	1949      	addeq	r1, r1, r5
 8011426:	6021      	streq	r1, [r4, #0]
 8011428:	6054      	str	r4, [r2, #4]
 801142a:	e7ca      	b.n	80113c2 <_free_r+0x26>
 801142c:	b003      	add	sp, #12
 801142e:	bd30      	pop	{r4, r5, pc}
 8011430:	20005d54 	.word	0x20005d54

08011434 <sbrk_aligned>:
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	4e0e      	ldr	r6, [pc, #56]	; (8011470 <sbrk_aligned+0x3c>)
 8011438:	460c      	mov	r4, r1
 801143a:	6831      	ldr	r1, [r6, #0]
 801143c:	4605      	mov	r5, r0
 801143e:	b911      	cbnz	r1, 8011446 <sbrk_aligned+0x12>
 8011440:	f000 fe68 	bl	8012114 <_sbrk_r>
 8011444:	6030      	str	r0, [r6, #0]
 8011446:	4621      	mov	r1, r4
 8011448:	4628      	mov	r0, r5
 801144a:	f000 fe63 	bl	8012114 <_sbrk_r>
 801144e:	1c43      	adds	r3, r0, #1
 8011450:	d00a      	beq.n	8011468 <sbrk_aligned+0x34>
 8011452:	1cc4      	adds	r4, r0, #3
 8011454:	f024 0403 	bic.w	r4, r4, #3
 8011458:	42a0      	cmp	r0, r4
 801145a:	d007      	beq.n	801146c <sbrk_aligned+0x38>
 801145c:	1a21      	subs	r1, r4, r0
 801145e:	4628      	mov	r0, r5
 8011460:	f000 fe58 	bl	8012114 <_sbrk_r>
 8011464:	3001      	adds	r0, #1
 8011466:	d101      	bne.n	801146c <sbrk_aligned+0x38>
 8011468:	f04f 34ff 	mov.w	r4, #4294967295
 801146c:	4620      	mov	r0, r4
 801146e:	bd70      	pop	{r4, r5, r6, pc}
 8011470:	20005d58 	.word	0x20005d58

08011474 <_malloc_r>:
 8011474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011478:	1ccd      	adds	r5, r1, #3
 801147a:	f025 0503 	bic.w	r5, r5, #3
 801147e:	3508      	adds	r5, #8
 8011480:	2d0c      	cmp	r5, #12
 8011482:	bf38      	it	cc
 8011484:	250c      	movcc	r5, #12
 8011486:	2d00      	cmp	r5, #0
 8011488:	4607      	mov	r7, r0
 801148a:	db01      	blt.n	8011490 <_malloc_r+0x1c>
 801148c:	42a9      	cmp	r1, r5
 801148e:	d905      	bls.n	801149c <_malloc_r+0x28>
 8011490:	230c      	movs	r3, #12
 8011492:	603b      	str	r3, [r7, #0]
 8011494:	2600      	movs	r6, #0
 8011496:	4630      	mov	r0, r6
 8011498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149c:	4e2e      	ldr	r6, [pc, #184]	; (8011558 <_malloc_r+0xe4>)
 801149e:	f004 fbd1 	bl	8015c44 <__malloc_lock>
 80114a2:	6833      	ldr	r3, [r6, #0]
 80114a4:	461c      	mov	r4, r3
 80114a6:	bb34      	cbnz	r4, 80114f6 <_malloc_r+0x82>
 80114a8:	4629      	mov	r1, r5
 80114aa:	4638      	mov	r0, r7
 80114ac:	f7ff ffc2 	bl	8011434 <sbrk_aligned>
 80114b0:	1c43      	adds	r3, r0, #1
 80114b2:	4604      	mov	r4, r0
 80114b4:	d14d      	bne.n	8011552 <_malloc_r+0xde>
 80114b6:	6834      	ldr	r4, [r6, #0]
 80114b8:	4626      	mov	r6, r4
 80114ba:	2e00      	cmp	r6, #0
 80114bc:	d140      	bne.n	8011540 <_malloc_r+0xcc>
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	4631      	mov	r1, r6
 80114c2:	4638      	mov	r0, r7
 80114c4:	eb04 0803 	add.w	r8, r4, r3
 80114c8:	f000 fe24 	bl	8012114 <_sbrk_r>
 80114cc:	4580      	cmp	r8, r0
 80114ce:	d13a      	bne.n	8011546 <_malloc_r+0xd2>
 80114d0:	6821      	ldr	r1, [r4, #0]
 80114d2:	3503      	adds	r5, #3
 80114d4:	1a6d      	subs	r5, r5, r1
 80114d6:	f025 0503 	bic.w	r5, r5, #3
 80114da:	3508      	adds	r5, #8
 80114dc:	2d0c      	cmp	r5, #12
 80114de:	bf38      	it	cc
 80114e0:	250c      	movcc	r5, #12
 80114e2:	4629      	mov	r1, r5
 80114e4:	4638      	mov	r0, r7
 80114e6:	f7ff ffa5 	bl	8011434 <sbrk_aligned>
 80114ea:	3001      	adds	r0, #1
 80114ec:	d02b      	beq.n	8011546 <_malloc_r+0xd2>
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	442b      	add	r3, r5
 80114f2:	6023      	str	r3, [r4, #0]
 80114f4:	e00e      	b.n	8011514 <_malloc_r+0xa0>
 80114f6:	6822      	ldr	r2, [r4, #0]
 80114f8:	1b52      	subs	r2, r2, r5
 80114fa:	d41e      	bmi.n	801153a <_malloc_r+0xc6>
 80114fc:	2a0b      	cmp	r2, #11
 80114fe:	d916      	bls.n	801152e <_malloc_r+0xba>
 8011500:	1961      	adds	r1, r4, r5
 8011502:	42a3      	cmp	r3, r4
 8011504:	6025      	str	r5, [r4, #0]
 8011506:	bf18      	it	ne
 8011508:	6059      	strne	r1, [r3, #4]
 801150a:	6863      	ldr	r3, [r4, #4]
 801150c:	bf08      	it	eq
 801150e:	6031      	streq	r1, [r6, #0]
 8011510:	5162      	str	r2, [r4, r5]
 8011512:	604b      	str	r3, [r1, #4]
 8011514:	4638      	mov	r0, r7
 8011516:	f104 060b 	add.w	r6, r4, #11
 801151a:	f004 fb99 	bl	8015c50 <__malloc_unlock>
 801151e:	f026 0607 	bic.w	r6, r6, #7
 8011522:	1d23      	adds	r3, r4, #4
 8011524:	1af2      	subs	r2, r6, r3
 8011526:	d0b6      	beq.n	8011496 <_malloc_r+0x22>
 8011528:	1b9b      	subs	r3, r3, r6
 801152a:	50a3      	str	r3, [r4, r2]
 801152c:	e7b3      	b.n	8011496 <_malloc_r+0x22>
 801152e:	6862      	ldr	r2, [r4, #4]
 8011530:	42a3      	cmp	r3, r4
 8011532:	bf0c      	ite	eq
 8011534:	6032      	streq	r2, [r6, #0]
 8011536:	605a      	strne	r2, [r3, #4]
 8011538:	e7ec      	b.n	8011514 <_malloc_r+0xa0>
 801153a:	4623      	mov	r3, r4
 801153c:	6864      	ldr	r4, [r4, #4]
 801153e:	e7b2      	b.n	80114a6 <_malloc_r+0x32>
 8011540:	4634      	mov	r4, r6
 8011542:	6876      	ldr	r6, [r6, #4]
 8011544:	e7b9      	b.n	80114ba <_malloc_r+0x46>
 8011546:	230c      	movs	r3, #12
 8011548:	603b      	str	r3, [r7, #0]
 801154a:	4638      	mov	r0, r7
 801154c:	f004 fb80 	bl	8015c50 <__malloc_unlock>
 8011550:	e7a1      	b.n	8011496 <_malloc_r+0x22>
 8011552:	6025      	str	r5, [r4, #0]
 8011554:	e7de      	b.n	8011514 <_malloc_r+0xa0>
 8011556:	bf00      	nop
 8011558:	20005d54 	.word	0x20005d54

0801155c <__sfputc_r>:
 801155c:	6893      	ldr	r3, [r2, #8]
 801155e:	3b01      	subs	r3, #1
 8011560:	2b00      	cmp	r3, #0
 8011562:	b410      	push	{r4}
 8011564:	6093      	str	r3, [r2, #8]
 8011566:	da08      	bge.n	801157a <__sfputc_r+0x1e>
 8011568:	6994      	ldr	r4, [r2, #24]
 801156a:	42a3      	cmp	r3, r4
 801156c:	db01      	blt.n	8011572 <__sfputc_r+0x16>
 801156e:	290a      	cmp	r1, #10
 8011570:	d103      	bne.n	801157a <__sfputc_r+0x1e>
 8011572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011576:	f002 bdc9 	b.w	801410c <__swbuf_r>
 801157a:	6813      	ldr	r3, [r2, #0]
 801157c:	1c58      	adds	r0, r3, #1
 801157e:	6010      	str	r0, [r2, #0]
 8011580:	7019      	strb	r1, [r3, #0]
 8011582:	4608      	mov	r0, r1
 8011584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011588:	4770      	bx	lr

0801158a <__sfputs_r>:
 801158a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158c:	4606      	mov	r6, r0
 801158e:	460f      	mov	r7, r1
 8011590:	4614      	mov	r4, r2
 8011592:	18d5      	adds	r5, r2, r3
 8011594:	42ac      	cmp	r4, r5
 8011596:	d101      	bne.n	801159c <__sfputs_r+0x12>
 8011598:	2000      	movs	r0, #0
 801159a:	e007      	b.n	80115ac <__sfputs_r+0x22>
 801159c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115a0:	463a      	mov	r2, r7
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7ff ffda 	bl	801155c <__sfputc_r>
 80115a8:	1c43      	adds	r3, r0, #1
 80115aa:	d1f3      	bne.n	8011594 <__sfputs_r+0xa>
 80115ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115b0 <_vfiprintf_r>:
 80115b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b4:	460d      	mov	r5, r1
 80115b6:	b09d      	sub	sp, #116	; 0x74
 80115b8:	4614      	mov	r4, r2
 80115ba:	4698      	mov	r8, r3
 80115bc:	4606      	mov	r6, r0
 80115be:	b118      	cbz	r0, 80115c8 <_vfiprintf_r+0x18>
 80115c0:	6983      	ldr	r3, [r0, #24]
 80115c2:	b90b      	cbnz	r3, 80115c8 <_vfiprintf_r+0x18>
 80115c4:	f003 fe38 	bl	8015238 <__sinit>
 80115c8:	4b89      	ldr	r3, [pc, #548]	; (80117f0 <_vfiprintf_r+0x240>)
 80115ca:	429d      	cmp	r5, r3
 80115cc:	d11b      	bne.n	8011606 <_vfiprintf_r+0x56>
 80115ce:	6875      	ldr	r5, [r6, #4]
 80115d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115d2:	07d9      	lsls	r1, r3, #31
 80115d4:	d405      	bmi.n	80115e2 <_vfiprintf_r+0x32>
 80115d6:	89ab      	ldrh	r3, [r5, #12]
 80115d8:	059a      	lsls	r2, r3, #22
 80115da:	d402      	bmi.n	80115e2 <_vfiprintf_r+0x32>
 80115dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115de:	f004 fa89 	bl	8015af4 <__retarget_lock_acquire_recursive>
 80115e2:	89ab      	ldrh	r3, [r5, #12]
 80115e4:	071b      	lsls	r3, r3, #28
 80115e6:	d501      	bpl.n	80115ec <_vfiprintf_r+0x3c>
 80115e8:	692b      	ldr	r3, [r5, #16]
 80115ea:	b9eb      	cbnz	r3, 8011628 <_vfiprintf_r+0x78>
 80115ec:	4629      	mov	r1, r5
 80115ee:	4630      	mov	r0, r6
 80115f0:	f002 fdf0 	bl	80141d4 <__swsetup_r>
 80115f4:	b1c0      	cbz	r0, 8011628 <_vfiprintf_r+0x78>
 80115f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115f8:	07dc      	lsls	r4, r3, #31
 80115fa:	d50e      	bpl.n	801161a <_vfiprintf_r+0x6a>
 80115fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011600:	b01d      	add	sp, #116	; 0x74
 8011602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011606:	4b7b      	ldr	r3, [pc, #492]	; (80117f4 <_vfiprintf_r+0x244>)
 8011608:	429d      	cmp	r5, r3
 801160a:	d101      	bne.n	8011610 <_vfiprintf_r+0x60>
 801160c:	68b5      	ldr	r5, [r6, #8]
 801160e:	e7df      	b.n	80115d0 <_vfiprintf_r+0x20>
 8011610:	4b79      	ldr	r3, [pc, #484]	; (80117f8 <_vfiprintf_r+0x248>)
 8011612:	429d      	cmp	r5, r3
 8011614:	bf08      	it	eq
 8011616:	68f5      	ldreq	r5, [r6, #12]
 8011618:	e7da      	b.n	80115d0 <_vfiprintf_r+0x20>
 801161a:	89ab      	ldrh	r3, [r5, #12]
 801161c:	0598      	lsls	r0, r3, #22
 801161e:	d4ed      	bmi.n	80115fc <_vfiprintf_r+0x4c>
 8011620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011622:	f004 fa69 	bl	8015af8 <__retarget_lock_release_recursive>
 8011626:	e7e9      	b.n	80115fc <_vfiprintf_r+0x4c>
 8011628:	2300      	movs	r3, #0
 801162a:	9309      	str	r3, [sp, #36]	; 0x24
 801162c:	2320      	movs	r3, #32
 801162e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011632:	f8cd 800c 	str.w	r8, [sp, #12]
 8011636:	2330      	movs	r3, #48	; 0x30
 8011638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80117fc <_vfiprintf_r+0x24c>
 801163c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011640:	f04f 0901 	mov.w	r9, #1
 8011644:	4623      	mov	r3, r4
 8011646:	469a      	mov	sl, r3
 8011648:	f813 2b01 	ldrb.w	r2, [r3], #1
 801164c:	b10a      	cbz	r2, 8011652 <_vfiprintf_r+0xa2>
 801164e:	2a25      	cmp	r2, #37	; 0x25
 8011650:	d1f9      	bne.n	8011646 <_vfiprintf_r+0x96>
 8011652:	ebba 0b04 	subs.w	fp, sl, r4
 8011656:	d00b      	beq.n	8011670 <_vfiprintf_r+0xc0>
 8011658:	465b      	mov	r3, fp
 801165a:	4622      	mov	r2, r4
 801165c:	4629      	mov	r1, r5
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff ff93 	bl	801158a <__sfputs_r>
 8011664:	3001      	adds	r0, #1
 8011666:	f000 80aa 	beq.w	80117be <_vfiprintf_r+0x20e>
 801166a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801166c:	445a      	add	r2, fp
 801166e:	9209      	str	r2, [sp, #36]	; 0x24
 8011670:	f89a 3000 	ldrb.w	r3, [sl]
 8011674:	2b00      	cmp	r3, #0
 8011676:	f000 80a2 	beq.w	80117be <_vfiprintf_r+0x20e>
 801167a:	2300      	movs	r3, #0
 801167c:	f04f 32ff 	mov.w	r2, #4294967295
 8011680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011684:	f10a 0a01 	add.w	sl, sl, #1
 8011688:	9304      	str	r3, [sp, #16]
 801168a:	9307      	str	r3, [sp, #28]
 801168c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011690:	931a      	str	r3, [sp, #104]	; 0x68
 8011692:	4654      	mov	r4, sl
 8011694:	2205      	movs	r2, #5
 8011696:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169a:	4858      	ldr	r0, [pc, #352]	; (80117fc <_vfiprintf_r+0x24c>)
 801169c:	f7ee fdc0 	bl	8000220 <memchr>
 80116a0:	9a04      	ldr	r2, [sp, #16]
 80116a2:	b9d8      	cbnz	r0, 80116dc <_vfiprintf_r+0x12c>
 80116a4:	06d1      	lsls	r1, r2, #27
 80116a6:	bf44      	itt	mi
 80116a8:	2320      	movmi	r3, #32
 80116aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116ae:	0713      	lsls	r3, r2, #28
 80116b0:	bf44      	itt	mi
 80116b2:	232b      	movmi	r3, #43	; 0x2b
 80116b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116b8:	f89a 3000 	ldrb.w	r3, [sl]
 80116bc:	2b2a      	cmp	r3, #42	; 0x2a
 80116be:	d015      	beq.n	80116ec <_vfiprintf_r+0x13c>
 80116c0:	9a07      	ldr	r2, [sp, #28]
 80116c2:	4654      	mov	r4, sl
 80116c4:	2000      	movs	r0, #0
 80116c6:	f04f 0c0a 	mov.w	ip, #10
 80116ca:	4621      	mov	r1, r4
 80116cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116d0:	3b30      	subs	r3, #48	; 0x30
 80116d2:	2b09      	cmp	r3, #9
 80116d4:	d94e      	bls.n	8011774 <_vfiprintf_r+0x1c4>
 80116d6:	b1b0      	cbz	r0, 8011706 <_vfiprintf_r+0x156>
 80116d8:	9207      	str	r2, [sp, #28]
 80116da:	e014      	b.n	8011706 <_vfiprintf_r+0x156>
 80116dc:	eba0 0308 	sub.w	r3, r0, r8
 80116e0:	fa09 f303 	lsl.w	r3, r9, r3
 80116e4:	4313      	orrs	r3, r2
 80116e6:	9304      	str	r3, [sp, #16]
 80116e8:	46a2      	mov	sl, r4
 80116ea:	e7d2      	b.n	8011692 <_vfiprintf_r+0xe2>
 80116ec:	9b03      	ldr	r3, [sp, #12]
 80116ee:	1d19      	adds	r1, r3, #4
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	9103      	str	r1, [sp, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	bfbb      	ittet	lt
 80116f8:	425b      	neglt	r3, r3
 80116fa:	f042 0202 	orrlt.w	r2, r2, #2
 80116fe:	9307      	strge	r3, [sp, #28]
 8011700:	9307      	strlt	r3, [sp, #28]
 8011702:	bfb8      	it	lt
 8011704:	9204      	strlt	r2, [sp, #16]
 8011706:	7823      	ldrb	r3, [r4, #0]
 8011708:	2b2e      	cmp	r3, #46	; 0x2e
 801170a:	d10c      	bne.n	8011726 <_vfiprintf_r+0x176>
 801170c:	7863      	ldrb	r3, [r4, #1]
 801170e:	2b2a      	cmp	r3, #42	; 0x2a
 8011710:	d135      	bne.n	801177e <_vfiprintf_r+0x1ce>
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	9203      	str	r2, [sp, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	bfb8      	it	lt
 801171e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011722:	3402      	adds	r4, #2
 8011724:	9305      	str	r3, [sp, #20]
 8011726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801180c <_vfiprintf_r+0x25c>
 801172a:	7821      	ldrb	r1, [r4, #0]
 801172c:	2203      	movs	r2, #3
 801172e:	4650      	mov	r0, sl
 8011730:	f7ee fd76 	bl	8000220 <memchr>
 8011734:	b140      	cbz	r0, 8011748 <_vfiprintf_r+0x198>
 8011736:	2340      	movs	r3, #64	; 0x40
 8011738:	eba0 000a 	sub.w	r0, r0, sl
 801173c:	fa03 f000 	lsl.w	r0, r3, r0
 8011740:	9b04      	ldr	r3, [sp, #16]
 8011742:	4303      	orrs	r3, r0
 8011744:	3401      	adds	r4, #1
 8011746:	9304      	str	r3, [sp, #16]
 8011748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801174c:	482c      	ldr	r0, [pc, #176]	; (8011800 <_vfiprintf_r+0x250>)
 801174e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011752:	2206      	movs	r2, #6
 8011754:	f7ee fd64 	bl	8000220 <memchr>
 8011758:	2800      	cmp	r0, #0
 801175a:	d03f      	beq.n	80117dc <_vfiprintf_r+0x22c>
 801175c:	4b29      	ldr	r3, [pc, #164]	; (8011804 <_vfiprintf_r+0x254>)
 801175e:	bb1b      	cbnz	r3, 80117a8 <_vfiprintf_r+0x1f8>
 8011760:	9b03      	ldr	r3, [sp, #12]
 8011762:	3307      	adds	r3, #7
 8011764:	f023 0307 	bic.w	r3, r3, #7
 8011768:	3308      	adds	r3, #8
 801176a:	9303      	str	r3, [sp, #12]
 801176c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801176e:	443b      	add	r3, r7
 8011770:	9309      	str	r3, [sp, #36]	; 0x24
 8011772:	e767      	b.n	8011644 <_vfiprintf_r+0x94>
 8011774:	fb0c 3202 	mla	r2, ip, r2, r3
 8011778:	460c      	mov	r4, r1
 801177a:	2001      	movs	r0, #1
 801177c:	e7a5      	b.n	80116ca <_vfiprintf_r+0x11a>
 801177e:	2300      	movs	r3, #0
 8011780:	3401      	adds	r4, #1
 8011782:	9305      	str	r3, [sp, #20]
 8011784:	4619      	mov	r1, r3
 8011786:	f04f 0c0a 	mov.w	ip, #10
 801178a:	4620      	mov	r0, r4
 801178c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011790:	3a30      	subs	r2, #48	; 0x30
 8011792:	2a09      	cmp	r2, #9
 8011794:	d903      	bls.n	801179e <_vfiprintf_r+0x1ee>
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0c5      	beq.n	8011726 <_vfiprintf_r+0x176>
 801179a:	9105      	str	r1, [sp, #20]
 801179c:	e7c3      	b.n	8011726 <_vfiprintf_r+0x176>
 801179e:	fb0c 2101 	mla	r1, ip, r1, r2
 80117a2:	4604      	mov	r4, r0
 80117a4:	2301      	movs	r3, #1
 80117a6:	e7f0      	b.n	801178a <_vfiprintf_r+0x1da>
 80117a8:	ab03      	add	r3, sp, #12
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	462a      	mov	r2, r5
 80117ae:	4b16      	ldr	r3, [pc, #88]	; (8011808 <_vfiprintf_r+0x258>)
 80117b0:	a904      	add	r1, sp, #16
 80117b2:	4630      	mov	r0, r6
 80117b4:	f000 f8cc 	bl	8011950 <_printf_float>
 80117b8:	4607      	mov	r7, r0
 80117ba:	1c78      	adds	r0, r7, #1
 80117bc:	d1d6      	bne.n	801176c <_vfiprintf_r+0x1bc>
 80117be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117c0:	07d9      	lsls	r1, r3, #31
 80117c2:	d405      	bmi.n	80117d0 <_vfiprintf_r+0x220>
 80117c4:	89ab      	ldrh	r3, [r5, #12]
 80117c6:	059a      	lsls	r2, r3, #22
 80117c8:	d402      	bmi.n	80117d0 <_vfiprintf_r+0x220>
 80117ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117cc:	f004 f994 	bl	8015af8 <__retarget_lock_release_recursive>
 80117d0:	89ab      	ldrh	r3, [r5, #12]
 80117d2:	065b      	lsls	r3, r3, #25
 80117d4:	f53f af12 	bmi.w	80115fc <_vfiprintf_r+0x4c>
 80117d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117da:	e711      	b.n	8011600 <_vfiprintf_r+0x50>
 80117dc:	ab03      	add	r3, sp, #12
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	462a      	mov	r2, r5
 80117e2:	4b09      	ldr	r3, [pc, #36]	; (8011808 <_vfiprintf_r+0x258>)
 80117e4:	a904      	add	r1, sp, #16
 80117e6:	4630      	mov	r0, r6
 80117e8:	f000 fb56 	bl	8011e98 <_printf_i>
 80117ec:	e7e4      	b.n	80117b8 <_vfiprintf_r+0x208>
 80117ee:	bf00      	nop
 80117f0:	08048d7c 	.word	0x08048d7c
 80117f4:	08048d9c 	.word	0x08048d9c
 80117f8:	08048d5c 	.word	0x08048d5c
 80117fc:	08048830 	.word	0x08048830
 8011800:	0804883a 	.word	0x0804883a
 8011804:	08011951 	.word	0x08011951
 8011808:	0801158b 	.word	0x0801158b
 801180c:	08048836 	.word	0x08048836

08011810 <__cvt>:
 8011810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011814:	ec55 4b10 	vmov	r4, r5, d0
 8011818:	2d00      	cmp	r5, #0
 801181a:	460e      	mov	r6, r1
 801181c:	4619      	mov	r1, r3
 801181e:	462b      	mov	r3, r5
 8011820:	bfbb      	ittet	lt
 8011822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011826:	461d      	movlt	r5, r3
 8011828:	2300      	movge	r3, #0
 801182a:	232d      	movlt	r3, #45	; 0x2d
 801182c:	700b      	strb	r3, [r1, #0]
 801182e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011834:	4691      	mov	r9, r2
 8011836:	f023 0820 	bic.w	r8, r3, #32
 801183a:	bfbc      	itt	lt
 801183c:	4622      	movlt	r2, r4
 801183e:	4614      	movlt	r4, r2
 8011840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011844:	d005      	beq.n	8011852 <__cvt+0x42>
 8011846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801184a:	d100      	bne.n	801184e <__cvt+0x3e>
 801184c:	3601      	adds	r6, #1
 801184e:	2102      	movs	r1, #2
 8011850:	e000      	b.n	8011854 <__cvt+0x44>
 8011852:	2103      	movs	r1, #3
 8011854:	ab03      	add	r3, sp, #12
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	ab02      	add	r3, sp, #8
 801185a:	9300      	str	r3, [sp, #0]
 801185c:	ec45 4b10 	vmov	d0, r4, r5
 8011860:	4653      	mov	r3, sl
 8011862:	4632      	mov	r2, r6
 8011864:	f002 fde0 	bl	8014428 <_dtoa_r>
 8011868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801186c:	4607      	mov	r7, r0
 801186e:	d102      	bne.n	8011876 <__cvt+0x66>
 8011870:	f019 0f01 	tst.w	r9, #1
 8011874:	d022      	beq.n	80118bc <__cvt+0xac>
 8011876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801187a:	eb07 0906 	add.w	r9, r7, r6
 801187e:	d110      	bne.n	80118a2 <__cvt+0x92>
 8011880:	783b      	ldrb	r3, [r7, #0]
 8011882:	2b30      	cmp	r3, #48	; 0x30
 8011884:	d10a      	bne.n	801189c <__cvt+0x8c>
 8011886:	2200      	movs	r2, #0
 8011888:	2300      	movs	r3, #0
 801188a:	4620      	mov	r0, r4
 801188c:	4629      	mov	r1, r5
 801188e:	f7ef f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8011892:	b918      	cbnz	r0, 801189c <__cvt+0x8c>
 8011894:	f1c6 0601 	rsb	r6, r6, #1
 8011898:	f8ca 6000 	str.w	r6, [sl]
 801189c:	f8da 3000 	ldr.w	r3, [sl]
 80118a0:	4499      	add	r9, r3
 80118a2:	2200      	movs	r2, #0
 80118a4:	2300      	movs	r3, #0
 80118a6:	4620      	mov	r0, r4
 80118a8:	4629      	mov	r1, r5
 80118aa:	f7ef f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80118ae:	b108      	cbz	r0, 80118b4 <__cvt+0xa4>
 80118b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80118b4:	2230      	movs	r2, #48	; 0x30
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	454b      	cmp	r3, r9
 80118ba:	d307      	bcc.n	80118cc <__cvt+0xbc>
 80118bc:	9b03      	ldr	r3, [sp, #12]
 80118be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118c0:	1bdb      	subs	r3, r3, r7
 80118c2:	4638      	mov	r0, r7
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	b004      	add	sp, #16
 80118c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118cc:	1c59      	adds	r1, r3, #1
 80118ce:	9103      	str	r1, [sp, #12]
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	e7f0      	b.n	80118b6 <__cvt+0xa6>

080118d4 <__exponent>:
 80118d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118d6:	4603      	mov	r3, r0
 80118d8:	2900      	cmp	r1, #0
 80118da:	bfb8      	it	lt
 80118dc:	4249      	neglt	r1, r1
 80118de:	f803 2b02 	strb.w	r2, [r3], #2
 80118e2:	bfb4      	ite	lt
 80118e4:	222d      	movlt	r2, #45	; 0x2d
 80118e6:	222b      	movge	r2, #43	; 0x2b
 80118e8:	2909      	cmp	r1, #9
 80118ea:	7042      	strb	r2, [r0, #1]
 80118ec:	dd2a      	ble.n	8011944 <__exponent+0x70>
 80118ee:	f10d 0407 	add.w	r4, sp, #7
 80118f2:	46a4      	mov	ip, r4
 80118f4:	270a      	movs	r7, #10
 80118f6:	46a6      	mov	lr, r4
 80118f8:	460a      	mov	r2, r1
 80118fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80118fe:	fb07 1516 	mls	r5, r7, r6, r1
 8011902:	3530      	adds	r5, #48	; 0x30
 8011904:	2a63      	cmp	r2, #99	; 0x63
 8011906:	f104 34ff 	add.w	r4, r4, #4294967295
 801190a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801190e:	4631      	mov	r1, r6
 8011910:	dcf1      	bgt.n	80118f6 <__exponent+0x22>
 8011912:	3130      	adds	r1, #48	; 0x30
 8011914:	f1ae 0502 	sub.w	r5, lr, #2
 8011918:	f804 1c01 	strb.w	r1, [r4, #-1]
 801191c:	1c44      	adds	r4, r0, #1
 801191e:	4629      	mov	r1, r5
 8011920:	4561      	cmp	r1, ip
 8011922:	d30a      	bcc.n	801193a <__exponent+0x66>
 8011924:	f10d 0209 	add.w	r2, sp, #9
 8011928:	eba2 020e 	sub.w	r2, r2, lr
 801192c:	4565      	cmp	r5, ip
 801192e:	bf88      	it	hi
 8011930:	2200      	movhi	r2, #0
 8011932:	4413      	add	r3, r2
 8011934:	1a18      	subs	r0, r3, r0
 8011936:	b003      	add	sp, #12
 8011938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801193a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801193e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011942:	e7ed      	b.n	8011920 <__exponent+0x4c>
 8011944:	2330      	movs	r3, #48	; 0x30
 8011946:	3130      	adds	r1, #48	; 0x30
 8011948:	7083      	strb	r3, [r0, #2]
 801194a:	70c1      	strb	r1, [r0, #3]
 801194c:	1d03      	adds	r3, r0, #4
 801194e:	e7f1      	b.n	8011934 <__exponent+0x60>

08011950 <_printf_float>:
 8011950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	ed2d 8b02 	vpush	{d8}
 8011958:	b08d      	sub	sp, #52	; 0x34
 801195a:	460c      	mov	r4, r1
 801195c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011960:	4616      	mov	r6, r2
 8011962:	461f      	mov	r7, r3
 8011964:	4605      	mov	r5, r0
 8011966:	f004 f8bf 	bl	8015ae8 <_localeconv_r>
 801196a:	f8d0 a000 	ldr.w	sl, [r0]
 801196e:	4650      	mov	r0, sl
 8011970:	f7ee fc48 	bl	8000204 <strlen>
 8011974:	2300      	movs	r3, #0
 8011976:	930a      	str	r3, [sp, #40]	; 0x28
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	9305      	str	r3, [sp, #20]
 801197c:	f8d8 3000 	ldr.w	r3, [r8]
 8011980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011984:	3307      	adds	r3, #7
 8011986:	f023 0307 	bic.w	r3, r3, #7
 801198a:	f103 0208 	add.w	r2, r3, #8
 801198e:	f8c8 2000 	str.w	r2, [r8]
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801199a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801199e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80119a2:	9307      	str	r3, [sp, #28]
 80119a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80119a8:	ee08 0a10 	vmov	s16, r0
 80119ac:	4b9f      	ldr	r3, [pc, #636]	; (8011c2c <_printf_float+0x2dc>)
 80119ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119b2:	f04f 32ff 	mov.w	r2, #4294967295
 80119b6:	f7ef f8d9 	bl	8000b6c <__aeabi_dcmpun>
 80119ba:	bb88      	cbnz	r0, 8011a20 <_printf_float+0xd0>
 80119bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119c0:	4b9a      	ldr	r3, [pc, #616]	; (8011c2c <_printf_float+0x2dc>)
 80119c2:	f04f 32ff 	mov.w	r2, #4294967295
 80119c6:	f7ef f8b3 	bl	8000b30 <__aeabi_dcmple>
 80119ca:	bb48      	cbnz	r0, 8011a20 <_printf_float+0xd0>
 80119cc:	2200      	movs	r2, #0
 80119ce:	2300      	movs	r3, #0
 80119d0:	4640      	mov	r0, r8
 80119d2:	4649      	mov	r1, r9
 80119d4:	f7ef f8a2 	bl	8000b1c <__aeabi_dcmplt>
 80119d8:	b110      	cbz	r0, 80119e0 <_printf_float+0x90>
 80119da:	232d      	movs	r3, #45	; 0x2d
 80119dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119e0:	4b93      	ldr	r3, [pc, #588]	; (8011c30 <_printf_float+0x2e0>)
 80119e2:	4894      	ldr	r0, [pc, #592]	; (8011c34 <_printf_float+0x2e4>)
 80119e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80119e8:	bf94      	ite	ls
 80119ea:	4698      	movls	r8, r3
 80119ec:	4680      	movhi	r8, r0
 80119ee:	2303      	movs	r3, #3
 80119f0:	6123      	str	r3, [r4, #16]
 80119f2:	9b05      	ldr	r3, [sp, #20]
 80119f4:	f023 0204 	bic.w	r2, r3, #4
 80119f8:	6022      	str	r2, [r4, #0]
 80119fa:	f04f 0900 	mov.w	r9, #0
 80119fe:	9700      	str	r7, [sp, #0]
 8011a00:	4633      	mov	r3, r6
 8011a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a04:	4621      	mov	r1, r4
 8011a06:	4628      	mov	r0, r5
 8011a08:	f000 f9d8 	bl	8011dbc <_printf_common>
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	f040 8090 	bne.w	8011b32 <_printf_float+0x1e2>
 8011a12:	f04f 30ff 	mov.w	r0, #4294967295
 8011a16:	b00d      	add	sp, #52	; 0x34
 8011a18:	ecbd 8b02 	vpop	{d8}
 8011a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a20:	4642      	mov	r2, r8
 8011a22:	464b      	mov	r3, r9
 8011a24:	4640      	mov	r0, r8
 8011a26:	4649      	mov	r1, r9
 8011a28:	f7ef f8a0 	bl	8000b6c <__aeabi_dcmpun>
 8011a2c:	b140      	cbz	r0, 8011a40 <_printf_float+0xf0>
 8011a2e:	464b      	mov	r3, r9
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	bfbc      	itt	lt
 8011a34:	232d      	movlt	r3, #45	; 0x2d
 8011a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011a3a:	487f      	ldr	r0, [pc, #508]	; (8011c38 <_printf_float+0x2e8>)
 8011a3c:	4b7f      	ldr	r3, [pc, #508]	; (8011c3c <_printf_float+0x2ec>)
 8011a3e:	e7d1      	b.n	80119e4 <_printf_float+0x94>
 8011a40:	6863      	ldr	r3, [r4, #4]
 8011a42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011a46:	9206      	str	r2, [sp, #24]
 8011a48:	1c5a      	adds	r2, r3, #1
 8011a4a:	d13f      	bne.n	8011acc <_printf_float+0x17c>
 8011a4c:	2306      	movs	r3, #6
 8011a4e:	6063      	str	r3, [r4, #4]
 8011a50:	9b05      	ldr	r3, [sp, #20]
 8011a52:	6861      	ldr	r1, [r4, #4]
 8011a54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011a58:	2300      	movs	r3, #0
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	ab0a      	add	r3, sp, #40	; 0x28
 8011a5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a62:	ab09      	add	r3, sp, #36	; 0x24
 8011a64:	ec49 8b10 	vmov	d0, r8, r9
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	6022      	str	r2, [r4, #0]
 8011a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff fecd 	bl	8011810 <__cvt>
 8011a76:	9b06      	ldr	r3, [sp, #24]
 8011a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a7a:	2b47      	cmp	r3, #71	; 0x47
 8011a7c:	4680      	mov	r8, r0
 8011a7e:	d108      	bne.n	8011a92 <_printf_float+0x142>
 8011a80:	1cc8      	adds	r0, r1, #3
 8011a82:	db02      	blt.n	8011a8a <_printf_float+0x13a>
 8011a84:	6863      	ldr	r3, [r4, #4]
 8011a86:	4299      	cmp	r1, r3
 8011a88:	dd41      	ble.n	8011b0e <_printf_float+0x1be>
 8011a8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8011a92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a96:	d820      	bhi.n	8011ada <_printf_float+0x18a>
 8011a98:	3901      	subs	r1, #1
 8011a9a:	465a      	mov	r2, fp
 8011a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8011aa2:	f7ff ff17 	bl	80118d4 <__exponent>
 8011aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011aa8:	1813      	adds	r3, r2, r0
 8011aaa:	2a01      	cmp	r2, #1
 8011aac:	4681      	mov	r9, r0
 8011aae:	6123      	str	r3, [r4, #16]
 8011ab0:	dc02      	bgt.n	8011ab8 <_printf_float+0x168>
 8011ab2:	6822      	ldr	r2, [r4, #0]
 8011ab4:	07d2      	lsls	r2, r2, #31
 8011ab6:	d501      	bpl.n	8011abc <_printf_float+0x16c>
 8011ab8:	3301      	adds	r3, #1
 8011aba:	6123      	str	r3, [r4, #16]
 8011abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d09c      	beq.n	80119fe <_printf_float+0xae>
 8011ac4:	232d      	movs	r3, #45	; 0x2d
 8011ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aca:	e798      	b.n	80119fe <_printf_float+0xae>
 8011acc:	9a06      	ldr	r2, [sp, #24]
 8011ace:	2a47      	cmp	r2, #71	; 0x47
 8011ad0:	d1be      	bne.n	8011a50 <_printf_float+0x100>
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d1bc      	bne.n	8011a50 <_printf_float+0x100>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	e7b9      	b.n	8011a4e <_printf_float+0xfe>
 8011ada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011ade:	d118      	bne.n	8011b12 <_printf_float+0x1c2>
 8011ae0:	2900      	cmp	r1, #0
 8011ae2:	6863      	ldr	r3, [r4, #4]
 8011ae4:	dd0b      	ble.n	8011afe <_printf_float+0x1ae>
 8011ae6:	6121      	str	r1, [r4, #16]
 8011ae8:	b913      	cbnz	r3, 8011af0 <_printf_float+0x1a0>
 8011aea:	6822      	ldr	r2, [r4, #0]
 8011aec:	07d0      	lsls	r0, r2, #31
 8011aee:	d502      	bpl.n	8011af6 <_printf_float+0x1a6>
 8011af0:	3301      	adds	r3, #1
 8011af2:	440b      	add	r3, r1
 8011af4:	6123      	str	r3, [r4, #16]
 8011af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011af8:	f04f 0900 	mov.w	r9, #0
 8011afc:	e7de      	b.n	8011abc <_printf_float+0x16c>
 8011afe:	b913      	cbnz	r3, 8011b06 <_printf_float+0x1b6>
 8011b00:	6822      	ldr	r2, [r4, #0]
 8011b02:	07d2      	lsls	r2, r2, #31
 8011b04:	d501      	bpl.n	8011b0a <_printf_float+0x1ba>
 8011b06:	3302      	adds	r3, #2
 8011b08:	e7f4      	b.n	8011af4 <_printf_float+0x1a4>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e7f2      	b.n	8011af4 <_printf_float+0x1a4>
 8011b0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b14:	4299      	cmp	r1, r3
 8011b16:	db05      	blt.n	8011b24 <_printf_float+0x1d4>
 8011b18:	6823      	ldr	r3, [r4, #0]
 8011b1a:	6121      	str	r1, [r4, #16]
 8011b1c:	07d8      	lsls	r0, r3, #31
 8011b1e:	d5ea      	bpl.n	8011af6 <_printf_float+0x1a6>
 8011b20:	1c4b      	adds	r3, r1, #1
 8011b22:	e7e7      	b.n	8011af4 <_printf_float+0x1a4>
 8011b24:	2900      	cmp	r1, #0
 8011b26:	bfd4      	ite	le
 8011b28:	f1c1 0202 	rsble	r2, r1, #2
 8011b2c:	2201      	movgt	r2, #1
 8011b2e:	4413      	add	r3, r2
 8011b30:	e7e0      	b.n	8011af4 <_printf_float+0x1a4>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	055a      	lsls	r2, r3, #21
 8011b36:	d407      	bmi.n	8011b48 <_printf_float+0x1f8>
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	4642      	mov	r2, r8
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	4628      	mov	r0, r5
 8011b40:	47b8      	blx	r7
 8011b42:	3001      	adds	r0, #1
 8011b44:	d12c      	bne.n	8011ba0 <_printf_float+0x250>
 8011b46:	e764      	b.n	8011a12 <_printf_float+0xc2>
 8011b48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b4c:	f240 80e0 	bls.w	8011d10 <_printf_float+0x3c0>
 8011b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b54:	2200      	movs	r2, #0
 8011b56:	2300      	movs	r3, #0
 8011b58:	f7ee ffd6 	bl	8000b08 <__aeabi_dcmpeq>
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d034      	beq.n	8011bca <_printf_float+0x27a>
 8011b60:	4a37      	ldr	r2, [pc, #220]	; (8011c40 <_printf_float+0x2f0>)
 8011b62:	2301      	movs	r3, #1
 8011b64:	4631      	mov	r1, r6
 8011b66:	4628      	mov	r0, r5
 8011b68:	47b8      	blx	r7
 8011b6a:	3001      	adds	r0, #1
 8011b6c:	f43f af51 	beq.w	8011a12 <_printf_float+0xc2>
 8011b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b74:	429a      	cmp	r2, r3
 8011b76:	db02      	blt.n	8011b7e <_printf_float+0x22e>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	07d8      	lsls	r0, r3, #31
 8011b7c:	d510      	bpl.n	8011ba0 <_printf_float+0x250>
 8011b7e:	ee18 3a10 	vmov	r3, s16
 8011b82:	4652      	mov	r2, sl
 8011b84:	4631      	mov	r1, r6
 8011b86:	4628      	mov	r0, r5
 8011b88:	47b8      	blx	r7
 8011b8a:	3001      	adds	r0, #1
 8011b8c:	f43f af41 	beq.w	8011a12 <_printf_float+0xc2>
 8011b90:	f04f 0800 	mov.w	r8, #0
 8011b94:	f104 091a 	add.w	r9, r4, #26
 8011b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b9a:	3b01      	subs	r3, #1
 8011b9c:	4543      	cmp	r3, r8
 8011b9e:	dc09      	bgt.n	8011bb4 <_printf_float+0x264>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	079b      	lsls	r3, r3, #30
 8011ba4:	f100 8105 	bmi.w	8011db2 <_printf_float+0x462>
 8011ba8:	68e0      	ldr	r0, [r4, #12]
 8011baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bac:	4298      	cmp	r0, r3
 8011bae:	bfb8      	it	lt
 8011bb0:	4618      	movlt	r0, r3
 8011bb2:	e730      	b.n	8011a16 <_printf_float+0xc6>
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	464a      	mov	r2, r9
 8011bb8:	4631      	mov	r1, r6
 8011bba:	4628      	mov	r0, r5
 8011bbc:	47b8      	blx	r7
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	f43f af27 	beq.w	8011a12 <_printf_float+0xc2>
 8011bc4:	f108 0801 	add.w	r8, r8, #1
 8011bc8:	e7e6      	b.n	8011b98 <_printf_float+0x248>
 8011bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	dc39      	bgt.n	8011c44 <_printf_float+0x2f4>
 8011bd0:	4a1b      	ldr	r2, [pc, #108]	; (8011c40 <_printf_float+0x2f0>)
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4631      	mov	r1, r6
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	47b8      	blx	r7
 8011bda:	3001      	adds	r0, #1
 8011bdc:	f43f af19 	beq.w	8011a12 <_printf_float+0xc2>
 8011be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011be4:	4313      	orrs	r3, r2
 8011be6:	d102      	bne.n	8011bee <_printf_float+0x29e>
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	07d9      	lsls	r1, r3, #31
 8011bec:	d5d8      	bpl.n	8011ba0 <_printf_float+0x250>
 8011bee:	ee18 3a10 	vmov	r3, s16
 8011bf2:	4652      	mov	r2, sl
 8011bf4:	4631      	mov	r1, r6
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	47b8      	blx	r7
 8011bfa:	3001      	adds	r0, #1
 8011bfc:	f43f af09 	beq.w	8011a12 <_printf_float+0xc2>
 8011c00:	f04f 0900 	mov.w	r9, #0
 8011c04:	f104 0a1a 	add.w	sl, r4, #26
 8011c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c0a:	425b      	negs	r3, r3
 8011c0c:	454b      	cmp	r3, r9
 8011c0e:	dc01      	bgt.n	8011c14 <_printf_float+0x2c4>
 8011c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c12:	e792      	b.n	8011b3a <_printf_float+0x1ea>
 8011c14:	2301      	movs	r3, #1
 8011c16:	4652      	mov	r2, sl
 8011c18:	4631      	mov	r1, r6
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	47b8      	blx	r7
 8011c1e:	3001      	adds	r0, #1
 8011c20:	f43f aef7 	beq.w	8011a12 <_printf_float+0xc2>
 8011c24:	f109 0901 	add.w	r9, r9, #1
 8011c28:	e7ee      	b.n	8011c08 <_printf_float+0x2b8>
 8011c2a:	bf00      	nop
 8011c2c:	7fefffff 	.word	0x7fefffff
 8011c30:	08048841 	.word	0x08048841
 8011c34:	08048845 	.word	0x08048845
 8011c38:	0804884d 	.word	0x0804884d
 8011c3c:	08048849 	.word	0x08048849
 8011c40:	08048ff8 	.word	0x08048ff8
 8011c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	bfa8      	it	ge
 8011c4c:	461a      	movge	r2, r3
 8011c4e:	2a00      	cmp	r2, #0
 8011c50:	4691      	mov	r9, r2
 8011c52:	dc37      	bgt.n	8011cc4 <_printf_float+0x374>
 8011c54:	f04f 0b00 	mov.w	fp, #0
 8011c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c5c:	f104 021a 	add.w	r2, r4, #26
 8011c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c62:	9305      	str	r3, [sp, #20]
 8011c64:	eba3 0309 	sub.w	r3, r3, r9
 8011c68:	455b      	cmp	r3, fp
 8011c6a:	dc33      	bgt.n	8011cd4 <_printf_float+0x384>
 8011c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c70:	429a      	cmp	r2, r3
 8011c72:	db3b      	blt.n	8011cec <_printf_float+0x39c>
 8011c74:	6823      	ldr	r3, [r4, #0]
 8011c76:	07da      	lsls	r2, r3, #31
 8011c78:	d438      	bmi.n	8011cec <_printf_float+0x39c>
 8011c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c7c:	9a05      	ldr	r2, [sp, #20]
 8011c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c80:	1a9a      	subs	r2, r3, r2
 8011c82:	eba3 0901 	sub.w	r9, r3, r1
 8011c86:	4591      	cmp	r9, r2
 8011c88:	bfa8      	it	ge
 8011c8a:	4691      	movge	r9, r2
 8011c8c:	f1b9 0f00 	cmp.w	r9, #0
 8011c90:	dc35      	bgt.n	8011cfe <_printf_float+0x3ae>
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c9a:	f104 0a1a 	add.w	sl, r4, #26
 8011c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ca2:	1a9b      	subs	r3, r3, r2
 8011ca4:	eba3 0309 	sub.w	r3, r3, r9
 8011ca8:	4543      	cmp	r3, r8
 8011caa:	f77f af79 	ble.w	8011ba0 <_printf_float+0x250>
 8011cae:	2301      	movs	r3, #1
 8011cb0:	4652      	mov	r2, sl
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	47b8      	blx	r7
 8011cb8:	3001      	adds	r0, #1
 8011cba:	f43f aeaa 	beq.w	8011a12 <_printf_float+0xc2>
 8011cbe:	f108 0801 	add.w	r8, r8, #1
 8011cc2:	e7ec      	b.n	8011c9e <_printf_float+0x34e>
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	4631      	mov	r1, r6
 8011cc8:	4642      	mov	r2, r8
 8011cca:	4628      	mov	r0, r5
 8011ccc:	47b8      	blx	r7
 8011cce:	3001      	adds	r0, #1
 8011cd0:	d1c0      	bne.n	8011c54 <_printf_float+0x304>
 8011cd2:	e69e      	b.n	8011a12 <_printf_float+0xc2>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	4631      	mov	r1, r6
 8011cd8:	4628      	mov	r0, r5
 8011cda:	9205      	str	r2, [sp, #20]
 8011cdc:	47b8      	blx	r7
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f43f ae97 	beq.w	8011a12 <_printf_float+0xc2>
 8011ce4:	9a05      	ldr	r2, [sp, #20]
 8011ce6:	f10b 0b01 	add.w	fp, fp, #1
 8011cea:	e7b9      	b.n	8011c60 <_printf_float+0x310>
 8011cec:	ee18 3a10 	vmov	r3, s16
 8011cf0:	4652      	mov	r2, sl
 8011cf2:	4631      	mov	r1, r6
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	47b8      	blx	r7
 8011cf8:	3001      	adds	r0, #1
 8011cfa:	d1be      	bne.n	8011c7a <_printf_float+0x32a>
 8011cfc:	e689      	b.n	8011a12 <_printf_float+0xc2>
 8011cfe:	9a05      	ldr	r2, [sp, #20]
 8011d00:	464b      	mov	r3, r9
 8011d02:	4442      	add	r2, r8
 8011d04:	4631      	mov	r1, r6
 8011d06:	4628      	mov	r0, r5
 8011d08:	47b8      	blx	r7
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	d1c1      	bne.n	8011c92 <_printf_float+0x342>
 8011d0e:	e680      	b.n	8011a12 <_printf_float+0xc2>
 8011d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d12:	2a01      	cmp	r2, #1
 8011d14:	dc01      	bgt.n	8011d1a <_printf_float+0x3ca>
 8011d16:	07db      	lsls	r3, r3, #31
 8011d18:	d538      	bpl.n	8011d8c <_printf_float+0x43c>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	4642      	mov	r2, r8
 8011d1e:	4631      	mov	r1, r6
 8011d20:	4628      	mov	r0, r5
 8011d22:	47b8      	blx	r7
 8011d24:	3001      	adds	r0, #1
 8011d26:	f43f ae74 	beq.w	8011a12 <_printf_float+0xc2>
 8011d2a:	ee18 3a10 	vmov	r3, s16
 8011d2e:	4652      	mov	r2, sl
 8011d30:	4631      	mov	r1, r6
 8011d32:	4628      	mov	r0, r5
 8011d34:	47b8      	blx	r7
 8011d36:	3001      	adds	r0, #1
 8011d38:	f43f ae6b 	beq.w	8011a12 <_printf_float+0xc2>
 8011d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d40:	2200      	movs	r2, #0
 8011d42:	2300      	movs	r3, #0
 8011d44:	f7ee fee0 	bl	8000b08 <__aeabi_dcmpeq>
 8011d48:	b9d8      	cbnz	r0, 8011d82 <_printf_float+0x432>
 8011d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d4c:	f108 0201 	add.w	r2, r8, #1
 8011d50:	3b01      	subs	r3, #1
 8011d52:	4631      	mov	r1, r6
 8011d54:	4628      	mov	r0, r5
 8011d56:	47b8      	blx	r7
 8011d58:	3001      	adds	r0, #1
 8011d5a:	d10e      	bne.n	8011d7a <_printf_float+0x42a>
 8011d5c:	e659      	b.n	8011a12 <_printf_float+0xc2>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	4652      	mov	r2, sl
 8011d62:	4631      	mov	r1, r6
 8011d64:	4628      	mov	r0, r5
 8011d66:	47b8      	blx	r7
 8011d68:	3001      	adds	r0, #1
 8011d6a:	f43f ae52 	beq.w	8011a12 <_printf_float+0xc2>
 8011d6e:	f108 0801 	add.w	r8, r8, #1
 8011d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d74:	3b01      	subs	r3, #1
 8011d76:	4543      	cmp	r3, r8
 8011d78:	dcf1      	bgt.n	8011d5e <_printf_float+0x40e>
 8011d7a:	464b      	mov	r3, r9
 8011d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d80:	e6dc      	b.n	8011b3c <_printf_float+0x1ec>
 8011d82:	f04f 0800 	mov.w	r8, #0
 8011d86:	f104 0a1a 	add.w	sl, r4, #26
 8011d8a:	e7f2      	b.n	8011d72 <_printf_float+0x422>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	4642      	mov	r2, r8
 8011d90:	e7df      	b.n	8011d52 <_printf_float+0x402>
 8011d92:	2301      	movs	r3, #1
 8011d94:	464a      	mov	r2, r9
 8011d96:	4631      	mov	r1, r6
 8011d98:	4628      	mov	r0, r5
 8011d9a:	47b8      	blx	r7
 8011d9c:	3001      	adds	r0, #1
 8011d9e:	f43f ae38 	beq.w	8011a12 <_printf_float+0xc2>
 8011da2:	f108 0801 	add.w	r8, r8, #1
 8011da6:	68e3      	ldr	r3, [r4, #12]
 8011da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011daa:	1a5b      	subs	r3, r3, r1
 8011dac:	4543      	cmp	r3, r8
 8011dae:	dcf0      	bgt.n	8011d92 <_printf_float+0x442>
 8011db0:	e6fa      	b.n	8011ba8 <_printf_float+0x258>
 8011db2:	f04f 0800 	mov.w	r8, #0
 8011db6:	f104 0919 	add.w	r9, r4, #25
 8011dba:	e7f4      	b.n	8011da6 <_printf_float+0x456>

08011dbc <_printf_common>:
 8011dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc0:	4616      	mov	r6, r2
 8011dc2:	4699      	mov	r9, r3
 8011dc4:	688a      	ldr	r2, [r1, #8]
 8011dc6:	690b      	ldr	r3, [r1, #16]
 8011dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	bfb8      	it	lt
 8011dd0:	4613      	movlt	r3, r2
 8011dd2:	6033      	str	r3, [r6, #0]
 8011dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011dd8:	4607      	mov	r7, r0
 8011dda:	460c      	mov	r4, r1
 8011ddc:	b10a      	cbz	r2, 8011de2 <_printf_common+0x26>
 8011dde:	3301      	adds	r3, #1
 8011de0:	6033      	str	r3, [r6, #0]
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	0699      	lsls	r1, r3, #26
 8011de6:	bf42      	ittt	mi
 8011de8:	6833      	ldrmi	r3, [r6, #0]
 8011dea:	3302      	addmi	r3, #2
 8011dec:	6033      	strmi	r3, [r6, #0]
 8011dee:	6825      	ldr	r5, [r4, #0]
 8011df0:	f015 0506 	ands.w	r5, r5, #6
 8011df4:	d106      	bne.n	8011e04 <_printf_common+0x48>
 8011df6:	f104 0a19 	add.w	sl, r4, #25
 8011dfa:	68e3      	ldr	r3, [r4, #12]
 8011dfc:	6832      	ldr	r2, [r6, #0]
 8011dfe:	1a9b      	subs	r3, r3, r2
 8011e00:	42ab      	cmp	r3, r5
 8011e02:	dc26      	bgt.n	8011e52 <_printf_common+0x96>
 8011e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e08:	1e13      	subs	r3, r2, #0
 8011e0a:	6822      	ldr	r2, [r4, #0]
 8011e0c:	bf18      	it	ne
 8011e0e:	2301      	movne	r3, #1
 8011e10:	0692      	lsls	r2, r2, #26
 8011e12:	d42b      	bmi.n	8011e6c <_printf_common+0xb0>
 8011e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e18:	4649      	mov	r1, r9
 8011e1a:	4638      	mov	r0, r7
 8011e1c:	47c0      	blx	r8
 8011e1e:	3001      	adds	r0, #1
 8011e20:	d01e      	beq.n	8011e60 <_printf_common+0xa4>
 8011e22:	6823      	ldr	r3, [r4, #0]
 8011e24:	68e5      	ldr	r5, [r4, #12]
 8011e26:	6832      	ldr	r2, [r6, #0]
 8011e28:	f003 0306 	and.w	r3, r3, #6
 8011e2c:	2b04      	cmp	r3, #4
 8011e2e:	bf08      	it	eq
 8011e30:	1aad      	subeq	r5, r5, r2
 8011e32:	68a3      	ldr	r3, [r4, #8]
 8011e34:	6922      	ldr	r2, [r4, #16]
 8011e36:	bf0c      	ite	eq
 8011e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e3c:	2500      	movne	r5, #0
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	bfc4      	itt	gt
 8011e42:	1a9b      	subgt	r3, r3, r2
 8011e44:	18ed      	addgt	r5, r5, r3
 8011e46:	2600      	movs	r6, #0
 8011e48:	341a      	adds	r4, #26
 8011e4a:	42b5      	cmp	r5, r6
 8011e4c:	d11a      	bne.n	8011e84 <_printf_common+0xc8>
 8011e4e:	2000      	movs	r0, #0
 8011e50:	e008      	b.n	8011e64 <_printf_common+0xa8>
 8011e52:	2301      	movs	r3, #1
 8011e54:	4652      	mov	r2, sl
 8011e56:	4649      	mov	r1, r9
 8011e58:	4638      	mov	r0, r7
 8011e5a:	47c0      	blx	r8
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	d103      	bne.n	8011e68 <_printf_common+0xac>
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e68:	3501      	adds	r5, #1
 8011e6a:	e7c6      	b.n	8011dfa <_printf_common+0x3e>
 8011e6c:	18e1      	adds	r1, r4, r3
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	2030      	movs	r0, #48	; 0x30
 8011e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e76:	4422      	add	r2, r4
 8011e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e80:	3302      	adds	r3, #2
 8011e82:	e7c7      	b.n	8011e14 <_printf_common+0x58>
 8011e84:	2301      	movs	r3, #1
 8011e86:	4622      	mov	r2, r4
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c0      	blx	r8
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d0e6      	beq.n	8011e60 <_printf_common+0xa4>
 8011e92:	3601      	adds	r6, #1
 8011e94:	e7d9      	b.n	8011e4a <_printf_common+0x8e>
	...

08011e98 <_printf_i>:
 8011e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e9c:	7e0f      	ldrb	r7, [r1, #24]
 8011e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ea0:	2f78      	cmp	r7, #120	; 0x78
 8011ea2:	4691      	mov	r9, r2
 8011ea4:	4680      	mov	r8, r0
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	469a      	mov	sl, r3
 8011eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011eae:	d807      	bhi.n	8011ec0 <_printf_i+0x28>
 8011eb0:	2f62      	cmp	r7, #98	; 0x62
 8011eb2:	d80a      	bhi.n	8011eca <_printf_i+0x32>
 8011eb4:	2f00      	cmp	r7, #0
 8011eb6:	f000 80d8 	beq.w	801206a <_printf_i+0x1d2>
 8011eba:	2f58      	cmp	r7, #88	; 0x58
 8011ebc:	f000 80a3 	beq.w	8012006 <_printf_i+0x16e>
 8011ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ec8:	e03a      	b.n	8011f40 <_printf_i+0xa8>
 8011eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ece:	2b15      	cmp	r3, #21
 8011ed0:	d8f6      	bhi.n	8011ec0 <_printf_i+0x28>
 8011ed2:	a101      	add	r1, pc, #4	; (adr r1, 8011ed8 <_printf_i+0x40>)
 8011ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ed8:	08011f31 	.word	0x08011f31
 8011edc:	08011f45 	.word	0x08011f45
 8011ee0:	08011ec1 	.word	0x08011ec1
 8011ee4:	08011ec1 	.word	0x08011ec1
 8011ee8:	08011ec1 	.word	0x08011ec1
 8011eec:	08011ec1 	.word	0x08011ec1
 8011ef0:	08011f45 	.word	0x08011f45
 8011ef4:	08011ec1 	.word	0x08011ec1
 8011ef8:	08011ec1 	.word	0x08011ec1
 8011efc:	08011ec1 	.word	0x08011ec1
 8011f00:	08011ec1 	.word	0x08011ec1
 8011f04:	08012051 	.word	0x08012051
 8011f08:	08011f75 	.word	0x08011f75
 8011f0c:	08012033 	.word	0x08012033
 8011f10:	08011ec1 	.word	0x08011ec1
 8011f14:	08011ec1 	.word	0x08011ec1
 8011f18:	08012073 	.word	0x08012073
 8011f1c:	08011ec1 	.word	0x08011ec1
 8011f20:	08011f75 	.word	0x08011f75
 8011f24:	08011ec1 	.word	0x08011ec1
 8011f28:	08011ec1 	.word	0x08011ec1
 8011f2c:	0801203b 	.word	0x0801203b
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	1d1a      	adds	r2, r3, #4
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	602a      	str	r2, [r5, #0]
 8011f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f40:	2301      	movs	r3, #1
 8011f42:	e0a3      	b.n	801208c <_printf_i+0x1f4>
 8011f44:	6820      	ldr	r0, [r4, #0]
 8011f46:	6829      	ldr	r1, [r5, #0]
 8011f48:	0606      	lsls	r6, r0, #24
 8011f4a:	f101 0304 	add.w	r3, r1, #4
 8011f4e:	d50a      	bpl.n	8011f66 <_printf_i+0xce>
 8011f50:	680e      	ldr	r6, [r1, #0]
 8011f52:	602b      	str	r3, [r5, #0]
 8011f54:	2e00      	cmp	r6, #0
 8011f56:	da03      	bge.n	8011f60 <_printf_i+0xc8>
 8011f58:	232d      	movs	r3, #45	; 0x2d
 8011f5a:	4276      	negs	r6, r6
 8011f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f60:	485e      	ldr	r0, [pc, #376]	; (80120dc <_printf_i+0x244>)
 8011f62:	230a      	movs	r3, #10
 8011f64:	e019      	b.n	8011f9a <_printf_i+0x102>
 8011f66:	680e      	ldr	r6, [r1, #0]
 8011f68:	602b      	str	r3, [r5, #0]
 8011f6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f6e:	bf18      	it	ne
 8011f70:	b236      	sxthne	r6, r6
 8011f72:	e7ef      	b.n	8011f54 <_printf_i+0xbc>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	6820      	ldr	r0, [r4, #0]
 8011f78:	1d19      	adds	r1, r3, #4
 8011f7a:	6029      	str	r1, [r5, #0]
 8011f7c:	0601      	lsls	r1, r0, #24
 8011f7e:	d501      	bpl.n	8011f84 <_printf_i+0xec>
 8011f80:	681e      	ldr	r6, [r3, #0]
 8011f82:	e002      	b.n	8011f8a <_printf_i+0xf2>
 8011f84:	0646      	lsls	r6, r0, #25
 8011f86:	d5fb      	bpl.n	8011f80 <_printf_i+0xe8>
 8011f88:	881e      	ldrh	r6, [r3, #0]
 8011f8a:	4854      	ldr	r0, [pc, #336]	; (80120dc <_printf_i+0x244>)
 8011f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8011f8e:	bf0c      	ite	eq
 8011f90:	2308      	moveq	r3, #8
 8011f92:	230a      	movne	r3, #10
 8011f94:	2100      	movs	r1, #0
 8011f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f9a:	6865      	ldr	r5, [r4, #4]
 8011f9c:	60a5      	str	r5, [r4, #8]
 8011f9e:	2d00      	cmp	r5, #0
 8011fa0:	bfa2      	ittt	ge
 8011fa2:	6821      	ldrge	r1, [r4, #0]
 8011fa4:	f021 0104 	bicge.w	r1, r1, #4
 8011fa8:	6021      	strge	r1, [r4, #0]
 8011faa:	b90e      	cbnz	r6, 8011fb0 <_printf_i+0x118>
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	d04d      	beq.n	801204c <_printf_i+0x1b4>
 8011fb0:	4615      	mov	r5, r2
 8011fb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fb6:	fb03 6711 	mls	r7, r3, r1, r6
 8011fba:	5dc7      	ldrb	r7, [r0, r7]
 8011fbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fc0:	4637      	mov	r7, r6
 8011fc2:	42bb      	cmp	r3, r7
 8011fc4:	460e      	mov	r6, r1
 8011fc6:	d9f4      	bls.n	8011fb2 <_printf_i+0x11a>
 8011fc8:	2b08      	cmp	r3, #8
 8011fca:	d10b      	bne.n	8011fe4 <_printf_i+0x14c>
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	07de      	lsls	r6, r3, #31
 8011fd0:	d508      	bpl.n	8011fe4 <_printf_i+0x14c>
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	6861      	ldr	r1, [r4, #4]
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	bfde      	ittt	le
 8011fda:	2330      	movle	r3, #48	; 0x30
 8011fdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011fe4:	1b52      	subs	r2, r2, r5
 8011fe6:	6122      	str	r2, [r4, #16]
 8011fe8:	f8cd a000 	str.w	sl, [sp]
 8011fec:	464b      	mov	r3, r9
 8011fee:	aa03      	add	r2, sp, #12
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	f7ff fee2 	bl	8011dbc <_printf_common>
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	d14c      	bne.n	8012096 <_printf_i+0x1fe>
 8011ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8012000:	b004      	add	sp, #16
 8012002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012006:	4835      	ldr	r0, [pc, #212]	; (80120dc <_printf_i+0x244>)
 8012008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801200c:	6829      	ldr	r1, [r5, #0]
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	f851 6b04 	ldr.w	r6, [r1], #4
 8012014:	6029      	str	r1, [r5, #0]
 8012016:	061d      	lsls	r5, r3, #24
 8012018:	d514      	bpl.n	8012044 <_printf_i+0x1ac>
 801201a:	07df      	lsls	r7, r3, #31
 801201c:	bf44      	itt	mi
 801201e:	f043 0320 	orrmi.w	r3, r3, #32
 8012022:	6023      	strmi	r3, [r4, #0]
 8012024:	b91e      	cbnz	r6, 801202e <_printf_i+0x196>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	f023 0320 	bic.w	r3, r3, #32
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	2310      	movs	r3, #16
 8012030:	e7b0      	b.n	8011f94 <_printf_i+0xfc>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	f043 0320 	orr.w	r3, r3, #32
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	2378      	movs	r3, #120	; 0x78
 801203c:	4828      	ldr	r0, [pc, #160]	; (80120e0 <_printf_i+0x248>)
 801203e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012042:	e7e3      	b.n	801200c <_printf_i+0x174>
 8012044:	0659      	lsls	r1, r3, #25
 8012046:	bf48      	it	mi
 8012048:	b2b6      	uxthmi	r6, r6
 801204a:	e7e6      	b.n	801201a <_printf_i+0x182>
 801204c:	4615      	mov	r5, r2
 801204e:	e7bb      	b.n	8011fc8 <_printf_i+0x130>
 8012050:	682b      	ldr	r3, [r5, #0]
 8012052:	6826      	ldr	r6, [r4, #0]
 8012054:	6961      	ldr	r1, [r4, #20]
 8012056:	1d18      	adds	r0, r3, #4
 8012058:	6028      	str	r0, [r5, #0]
 801205a:	0635      	lsls	r5, r6, #24
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	d501      	bpl.n	8012064 <_printf_i+0x1cc>
 8012060:	6019      	str	r1, [r3, #0]
 8012062:	e002      	b.n	801206a <_printf_i+0x1d2>
 8012064:	0670      	lsls	r0, r6, #25
 8012066:	d5fb      	bpl.n	8012060 <_printf_i+0x1c8>
 8012068:	8019      	strh	r1, [r3, #0]
 801206a:	2300      	movs	r3, #0
 801206c:	6123      	str	r3, [r4, #16]
 801206e:	4615      	mov	r5, r2
 8012070:	e7ba      	b.n	8011fe8 <_printf_i+0x150>
 8012072:	682b      	ldr	r3, [r5, #0]
 8012074:	1d1a      	adds	r2, r3, #4
 8012076:	602a      	str	r2, [r5, #0]
 8012078:	681d      	ldr	r5, [r3, #0]
 801207a:	6862      	ldr	r2, [r4, #4]
 801207c:	2100      	movs	r1, #0
 801207e:	4628      	mov	r0, r5
 8012080:	f7ee f8ce 	bl	8000220 <memchr>
 8012084:	b108      	cbz	r0, 801208a <_printf_i+0x1f2>
 8012086:	1b40      	subs	r0, r0, r5
 8012088:	6060      	str	r0, [r4, #4]
 801208a:	6863      	ldr	r3, [r4, #4]
 801208c:	6123      	str	r3, [r4, #16]
 801208e:	2300      	movs	r3, #0
 8012090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012094:	e7a8      	b.n	8011fe8 <_printf_i+0x150>
 8012096:	6923      	ldr	r3, [r4, #16]
 8012098:	462a      	mov	r2, r5
 801209a:	4649      	mov	r1, r9
 801209c:	4640      	mov	r0, r8
 801209e:	47d0      	blx	sl
 80120a0:	3001      	adds	r0, #1
 80120a2:	d0ab      	beq.n	8011ffc <_printf_i+0x164>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	079b      	lsls	r3, r3, #30
 80120a8:	d413      	bmi.n	80120d2 <_printf_i+0x23a>
 80120aa:	68e0      	ldr	r0, [r4, #12]
 80120ac:	9b03      	ldr	r3, [sp, #12]
 80120ae:	4298      	cmp	r0, r3
 80120b0:	bfb8      	it	lt
 80120b2:	4618      	movlt	r0, r3
 80120b4:	e7a4      	b.n	8012000 <_printf_i+0x168>
 80120b6:	2301      	movs	r3, #1
 80120b8:	4632      	mov	r2, r6
 80120ba:	4649      	mov	r1, r9
 80120bc:	4640      	mov	r0, r8
 80120be:	47d0      	blx	sl
 80120c0:	3001      	adds	r0, #1
 80120c2:	d09b      	beq.n	8011ffc <_printf_i+0x164>
 80120c4:	3501      	adds	r5, #1
 80120c6:	68e3      	ldr	r3, [r4, #12]
 80120c8:	9903      	ldr	r1, [sp, #12]
 80120ca:	1a5b      	subs	r3, r3, r1
 80120cc:	42ab      	cmp	r3, r5
 80120ce:	dcf2      	bgt.n	80120b6 <_printf_i+0x21e>
 80120d0:	e7eb      	b.n	80120aa <_printf_i+0x212>
 80120d2:	2500      	movs	r5, #0
 80120d4:	f104 0619 	add.w	r6, r4, #25
 80120d8:	e7f5      	b.n	80120c6 <_printf_i+0x22e>
 80120da:	bf00      	nop
 80120dc:	08048851 	.word	0x08048851
 80120e0:	08048862 	.word	0x08048862

080120e4 <iprintf>:
 80120e4:	b40f      	push	{r0, r1, r2, r3}
 80120e6:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <iprintf+0x2c>)
 80120e8:	b513      	push	{r0, r1, r4, lr}
 80120ea:	681c      	ldr	r4, [r3, #0]
 80120ec:	b124      	cbz	r4, 80120f8 <iprintf+0x14>
 80120ee:	69a3      	ldr	r3, [r4, #24]
 80120f0:	b913      	cbnz	r3, 80120f8 <iprintf+0x14>
 80120f2:	4620      	mov	r0, r4
 80120f4:	f003 f8a0 	bl	8015238 <__sinit>
 80120f8:	ab05      	add	r3, sp, #20
 80120fa:	9a04      	ldr	r2, [sp, #16]
 80120fc:	68a1      	ldr	r1, [r4, #8]
 80120fe:	9301      	str	r3, [sp, #4]
 8012100:	4620      	mov	r0, r4
 8012102:	f7ff fa55 	bl	80115b0 <_vfiprintf_r>
 8012106:	b002      	add	sp, #8
 8012108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801210c:	b004      	add	sp, #16
 801210e:	4770      	bx	lr
 8012110:	200002c8 	.word	0x200002c8

08012114 <_sbrk_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d06      	ldr	r5, [pc, #24]	; (8012130 <_sbrk_r+0x1c>)
 8012118:	2300      	movs	r3, #0
 801211a:	4604      	mov	r4, r0
 801211c:	4608      	mov	r0, r1
 801211e:	602b      	str	r3, [r5, #0]
 8012120:	f7f2 f852 	bl	80041c8 <_sbrk>
 8012124:	1c43      	adds	r3, r0, #1
 8012126:	d102      	bne.n	801212e <_sbrk_r+0x1a>
 8012128:	682b      	ldr	r3, [r5, #0]
 801212a:	b103      	cbz	r3, 801212e <_sbrk_r+0x1a>
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	bd38      	pop	{r3, r4, r5, pc}
 8012130:	20005d88 	.word	0x20005d88

08012134 <siprintf>:
 8012134:	b40e      	push	{r1, r2, r3}
 8012136:	b500      	push	{lr}
 8012138:	b09c      	sub	sp, #112	; 0x70
 801213a:	ab1d      	add	r3, sp, #116	; 0x74
 801213c:	9002      	str	r0, [sp, #8]
 801213e:	9006      	str	r0, [sp, #24]
 8012140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012144:	4809      	ldr	r0, [pc, #36]	; (801216c <siprintf+0x38>)
 8012146:	9107      	str	r1, [sp, #28]
 8012148:	9104      	str	r1, [sp, #16]
 801214a:	4909      	ldr	r1, [pc, #36]	; (8012170 <siprintf+0x3c>)
 801214c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012150:	9105      	str	r1, [sp, #20]
 8012152:	6800      	ldr	r0, [r0, #0]
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	a902      	add	r1, sp, #8
 8012158:	f004 fae2 	bl	8016720 <_svfiprintf_r>
 801215c:	9b02      	ldr	r3, [sp, #8]
 801215e:	2200      	movs	r2, #0
 8012160:	701a      	strb	r2, [r3, #0]
 8012162:	b01c      	add	sp, #112	; 0x70
 8012164:	f85d eb04 	ldr.w	lr, [sp], #4
 8012168:	b003      	add	sp, #12
 801216a:	4770      	bx	lr
 801216c:	200002c8 	.word	0x200002c8
 8012170:	ffff0208 	.word	0xffff0208

08012174 <siscanf>:
 8012174:	b40e      	push	{r1, r2, r3}
 8012176:	b510      	push	{r4, lr}
 8012178:	b09f      	sub	sp, #124	; 0x7c
 801217a:	ac21      	add	r4, sp, #132	; 0x84
 801217c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012180:	f854 2b04 	ldr.w	r2, [r4], #4
 8012184:	9201      	str	r2, [sp, #4]
 8012186:	f8ad 101c 	strh.w	r1, [sp, #28]
 801218a:	9004      	str	r0, [sp, #16]
 801218c:	9008      	str	r0, [sp, #32]
 801218e:	f7ee f839 	bl	8000204 <strlen>
 8012192:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <siscanf+0x50>)
 8012194:	9005      	str	r0, [sp, #20]
 8012196:	9009      	str	r0, [sp, #36]	; 0x24
 8012198:	930d      	str	r3, [sp, #52]	; 0x34
 801219a:	480b      	ldr	r0, [pc, #44]	; (80121c8 <siscanf+0x54>)
 801219c:	9a01      	ldr	r2, [sp, #4]
 801219e:	6800      	ldr	r0, [r0, #0]
 80121a0:	9403      	str	r4, [sp, #12]
 80121a2:	2300      	movs	r3, #0
 80121a4:	9311      	str	r3, [sp, #68]	; 0x44
 80121a6:	9316      	str	r3, [sp, #88]	; 0x58
 80121a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80121b0:	a904      	add	r1, sp, #16
 80121b2:	4623      	mov	r3, r4
 80121b4:	f004 fc0e 	bl	80169d4 <__ssvfiscanf_r>
 80121b8:	b01f      	add	sp, #124	; 0x7c
 80121ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121be:	b003      	add	sp, #12
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	080121ef 	.word	0x080121ef
 80121c8:	200002c8 	.word	0x200002c8

080121cc <__sread>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	460c      	mov	r4, r1
 80121d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121d4:	f004 fec8 	bl	8016f68 <_read_r>
 80121d8:	2800      	cmp	r0, #0
 80121da:	bfab      	itete	ge
 80121dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121de:	89a3      	ldrhlt	r3, [r4, #12]
 80121e0:	181b      	addge	r3, r3, r0
 80121e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121e6:	bfac      	ite	ge
 80121e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80121ea:	81a3      	strhlt	r3, [r4, #12]
 80121ec:	bd10      	pop	{r4, pc}

080121ee <__seofread>:
 80121ee:	2000      	movs	r0, #0
 80121f0:	4770      	bx	lr

080121f2 <__swrite>:
 80121f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f6:	461f      	mov	r7, r3
 80121f8:	898b      	ldrh	r3, [r1, #12]
 80121fa:	05db      	lsls	r3, r3, #23
 80121fc:	4605      	mov	r5, r0
 80121fe:	460c      	mov	r4, r1
 8012200:	4616      	mov	r6, r2
 8012202:	d505      	bpl.n	8012210 <__swrite+0x1e>
 8012204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012208:	2302      	movs	r3, #2
 801220a:	2200      	movs	r2, #0
 801220c:	f003 fc76 	bl	8015afc <_lseek_r>
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801221a:	81a3      	strh	r3, [r4, #12]
 801221c:	4632      	mov	r2, r6
 801221e:	463b      	mov	r3, r7
 8012220:	4628      	mov	r0, r5
 8012222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012226:	f001 bfc3 	b.w	80141b0 <_write_r>

0801222a <__sseek>:
 801222a:	b510      	push	{r4, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012232:	f003 fc63 	bl	8015afc <_lseek_r>
 8012236:	1c43      	adds	r3, r0, #1
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	bf15      	itete	ne
 801223c:	6560      	strne	r0, [r4, #84]	; 0x54
 801223e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012246:	81a3      	strheq	r3, [r4, #12]
 8012248:	bf18      	it	ne
 801224a:	81a3      	strhne	r3, [r4, #12]
 801224c:	bd10      	pop	{r4, pc}

0801224e <__sclose>:
 801224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012252:	f002 b839 	b.w	80142c8 <_close_r>

08012256 <strcpy>:
 8012256:	4603      	mov	r3, r0
 8012258:	f811 2b01 	ldrb.w	r2, [r1], #1
 801225c:	f803 2b01 	strb.w	r2, [r3], #1
 8012260:	2a00      	cmp	r2, #0
 8012262:	d1f9      	bne.n	8012258 <strcpy+0x2>
 8012264:	4770      	bx	lr
	...

08012268 <iso_year_adjust>:
 8012268:	6942      	ldr	r2, [r0, #20]
 801226a:	2a00      	cmp	r2, #0
 801226c:	f240 736c 	movw	r3, #1900	; 0x76c
 8012270:	bfa8      	it	ge
 8012272:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8012276:	4413      	add	r3, r2
 8012278:	0792      	lsls	r2, r2, #30
 801227a:	d105      	bne.n	8012288 <iso_year_adjust+0x20>
 801227c:	2164      	movs	r1, #100	; 0x64
 801227e:	fb93 f2f1 	sdiv	r2, r3, r1
 8012282:	fb01 3212 	mls	r2, r1, r2, r3
 8012286:	b9da      	cbnz	r2, 80122c0 <iso_year_adjust+0x58>
 8012288:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801228c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012290:	fb02 3311 	mls	r3, r2, r1, r3
 8012294:	fab3 f383 	clz	r3, r3
 8012298:	095b      	lsrs	r3, r3, #5
 801229a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801229e:	0040      	lsls	r0, r0, #1
 80122a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80122a4:	4418      	add	r0, r3
 80122a6:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80122aa:	4298      	cmp	r0, r3
 80122ac:	d03a      	beq.n	8012324 <iso_year_adjust+0xbc>
 80122ae:	dc21      	bgt.n	80122f4 <iso_year_adjust+0x8c>
 80122b0:	2801      	cmp	r0, #1
 80122b2:	dc1a      	bgt.n	80122ea <iso_year_adjust+0x82>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	bfb4      	ite	lt
 80122b8:	2000      	movlt	r0, #0
 80122ba:	f04f 30ff 	movge.w	r0, #4294967295
 80122be:	4770      	bx	lr
 80122c0:	2301      	movs	r3, #1
 80122c2:	e7ea      	b.n	801229a <iso_year_adjust+0x32>
 80122c4:	2817      	cmp	r0, #23
 80122c6:	d813      	bhi.n	80122f0 <iso_year_adjust+0x88>
 80122c8:	e8df f000 	tbb	[pc, r0]
 80122cc:	0c0c0c0c 	.word	0x0c0c0c0c
 80122d0:	0c0c1212 	.word	0x0c0c1212
 80122d4:	12121212 	.word	0x12121212
 80122d8:	12121212 	.word	0x12121212
 80122dc:	0c0c1212 	.word	0x0c0c1212
 80122e0:	0c0c1212 	.word	0x0c0c1212
 80122e4:	f04f 30ff 	mov.w	r0, #4294967295
 80122e8:	4770      	bx	lr
 80122ea:	380a      	subs	r0, #10
 80122ec:	2817      	cmp	r0, #23
 80122ee:	d9e9      	bls.n	80122c4 <iso_year_adjust+0x5c>
 80122f0:	2000      	movs	r0, #0
 80122f2:	4770      	bx	lr
 80122f4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80122f8:	4298      	cmp	r0, r3
 80122fa:	dc06      	bgt.n	801230a <iso_year_adjust+0xa2>
 80122fc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8012300:	4298      	cmp	r0, r3
 8012302:	bfd4      	ite	le
 8012304:	2000      	movle	r0, #0
 8012306:	2001      	movgt	r0, #1
 8012308:	4770      	bx	lr
 801230a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801230e:	3802      	subs	r0, #2
 8012310:	2815      	cmp	r0, #21
 8012312:	d8ed      	bhi.n	80122f0 <iso_year_adjust+0x88>
 8012314:	2301      	movs	r3, #1
 8012316:	4083      	lsls	r3, r0
 8012318:	4803      	ldr	r0, [pc, #12]	; (8012328 <iso_year_adjust+0xc0>)
 801231a:	4018      	ands	r0, r3
 801231c:	3800      	subs	r0, #0
 801231e:	bf18      	it	ne
 8012320:	2001      	movne	r0, #1
 8012322:	4770      	bx	lr
 8012324:	2001      	movs	r0, #1
 8012326:	4770      	bx	lr
 8012328:	002a001f 	.word	0x002a001f

0801232c <__strftime.isra.0>:
 801232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012330:	b08f      	sub	sp, #60	; 0x3c
 8012332:	461e      	mov	r6, r3
 8012334:	2300      	movs	r3, #0
 8012336:	4607      	mov	r7, r0
 8012338:	460d      	mov	r5, r1
 801233a:	9302      	str	r3, [sp, #8]
 801233c:	461c      	mov	r4, r3
 801233e:	7813      	ldrb	r3, [r2, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	f000 84ba 	beq.w	8012cba <__strftime.isra.0+0x98e>
 8012346:	2b25      	cmp	r3, #37	; 0x25
 8012348:	d11f      	bne.n	801238a <__strftime.isra.0+0x5e>
 801234a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801234e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8012352:	d024      	beq.n	801239e <__strftime.isra.0+0x72>
 8012354:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8012358:	d021      	beq.n	801239e <__strftime.isra.0+0x72>
 801235a:	f102 0801 	add.w	r8, r2, #1
 801235e:	f04f 0b00 	mov.w	fp, #0
 8012362:	f898 2000 	ldrb.w	r2, [r8]
 8012366:	3a31      	subs	r2, #49	; 0x31
 8012368:	2a08      	cmp	r2, #8
 801236a:	d81b      	bhi.n	80123a4 <__strftime.isra.0+0x78>
 801236c:	4640      	mov	r0, r8
 801236e:	220a      	movs	r2, #10
 8012370:	a906      	add	r1, sp, #24
 8012372:	f001 fc85 	bl	8013c80 <strtoul>
 8012376:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801237a:	4681      	mov	r9, r0
 801237c:	f898 2000 	ldrb.w	r2, [r8]
 8012380:	2a45      	cmp	r2, #69	; 0x45
 8012382:	d112      	bne.n	80123aa <__strftime.isra.0+0x7e>
 8012384:	f108 0801 	add.w	r8, r8, #1
 8012388:	e011      	b.n	80123ae <__strftime.isra.0+0x82>
 801238a:	1e69      	subs	r1, r5, #1
 801238c:	42a1      	cmp	r1, r4
 801238e:	d802      	bhi.n	8012396 <__strftime.isra.0+0x6a>
 8012390:	2400      	movs	r4, #0
 8012392:	f000 bc95 	b.w	8012cc0 <__strftime.isra.0+0x994>
 8012396:	553b      	strb	r3, [r7, r4]
 8012398:	3201      	adds	r2, #1
 801239a:	3401      	adds	r4, #1
 801239c:	e7cf      	b.n	801233e <__strftime.isra.0+0x12>
 801239e:	f102 0802 	add.w	r8, r2, #2
 80123a2:	e7de      	b.n	8012362 <__strftime.isra.0+0x36>
 80123a4:	f04f 0900 	mov.w	r9, #0
 80123a8:	e7e8      	b.n	801237c <__strftime.isra.0+0x50>
 80123aa:	2a4f      	cmp	r2, #79	; 0x4f
 80123ac:	d0ea      	beq.n	8012384 <__strftime.isra.0+0x58>
 80123ae:	f898 0000 	ldrb.w	r0, [r8]
 80123b2:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80123b6:	2a55      	cmp	r2, #85	; 0x55
 80123b8:	d8ea      	bhi.n	8012390 <__strftime.isra.0+0x64>
 80123ba:	a301      	add	r3, pc, #4	; (adr r3, 80123c0 <__strftime.isra.0+0x94>)
 80123bc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80123c0:	08012caf 	.word	0x08012caf
 80123c4:	08012391 	.word	0x08012391
 80123c8:	08012391 	.word	0x08012391
 80123cc:	08012391 	.word	0x08012391
 80123d0:	08012391 	.word	0x08012391
 80123d4:	08012391 	.word	0x08012391
 80123d8:	08012391 	.word	0x08012391
 80123dc:	08012391 	.word	0x08012391
 80123e0:	08012391 	.word	0x08012391
 80123e4:	08012391 	.word	0x08012391
 80123e8:	08012391 	.word	0x08012391
 80123ec:	08012391 	.word	0x08012391
 80123f0:	08012391 	.word	0x08012391
 80123f4:	08012391 	.word	0x08012391
 80123f8:	08012391 	.word	0x08012391
 80123fc:	08012391 	.word	0x08012391
 8012400:	08012391 	.word	0x08012391
 8012404:	08012391 	.word	0x08012391
 8012408:	08012391 	.word	0x08012391
 801240c:	08012391 	.word	0x08012391
 8012410:	08012391 	.word	0x08012391
 8012414:	08012391 	.word	0x08012391
 8012418:	08012391 	.word	0x08012391
 801241c:	08012391 	.word	0x08012391
 8012420:	08012391 	.word	0x08012391
 8012424:	08012391 	.word	0x08012391
 8012428:	08012391 	.word	0x08012391
 801242c:	08012391 	.word	0x08012391
 8012430:	08012555 	.word	0x08012555
 8012434:	080125ad 	.word	0x080125ad
 8012438:	0801261b 	.word	0x0801261b
 801243c:	080126b9 	.word	0x080126b9
 8012440:	08012391 	.word	0x08012391
 8012444:	08012705 	.word	0x08012705
 8012448:	080127f1 	.word	0x080127f1
 801244c:	080128cb 	.word	0x080128cb
 8012450:	080128d9 	.word	0x080128d9
 8012454:	08012391 	.word	0x08012391
 8012458:	08012391 	.word	0x08012391
 801245c:	08012391 	.word	0x08012391
 8012460:	08012909 	.word	0x08012909
 8012464:	08012391 	.word	0x08012391
 8012468:	08012391 	.word	0x08012391
 801246c:	0801291d 	.word	0x0801291d
 8012470:	08012391 	.word	0x08012391
 8012474:	0801296f 	.word	0x0801296f
 8012478:	08012a83 	.word	0x08012a83
 801247c:	08012a93 	.word	0x08012a93
 8012480:	08012abb 	.word	0x08012abb
 8012484:	08012af5 	.word	0x08012af5
 8012488:	08012b69 	.word	0x08012b69
 801248c:	08012613 	.word	0x08012613
 8012490:	08012b95 	.word	0x08012b95
 8012494:	08012c5d 	.word	0x08012c5d
 8012498:	08012391 	.word	0x08012391
 801249c:	08012391 	.word	0x08012391
 80124a0:	08012391 	.word	0x08012391
 80124a4:	08012391 	.word	0x08012391
 80124a8:	08012391 	.word	0x08012391
 80124ac:	08012391 	.word	0x08012391
 80124b0:	08012519 	.word	0x08012519
 80124b4:	08012583 	.word	0x08012583
 80124b8:	080125d9 	.word	0x080125d9
 80124bc:	08012695 	.word	0x08012695
 80124c0:	08012695 	.word	0x08012695
 80124c4:	08012391 	.word	0x08012391
 80124c8:	08012757 	.word	0x08012757
 80124cc:	08012583 	.word	0x08012583
 80124d0:	08012391 	.word	0x08012391
 80124d4:	080128fb 	.word	0x080128fb
 80124d8:	080128cb 	.word	0x080128cb
 80124dc:	080128d9 	.word	0x080128d9
 80124e0:	08012903 	.word	0x08012903
 80124e4:	0801290d 	.word	0x0801290d
 80124e8:	08012391 	.word	0x08012391
 80124ec:	0801291d 	.word	0x0801291d
 80124f0:	08012391 	.word	0x08012391
 80124f4:	08012603 	.word	0x08012603
 80124f8:	08012981 	.word	0x08012981
 80124fc:	08012a87 	.word	0x08012a87
 8012500:	08012aa1 	.word	0x08012aa1
 8012504:	08012391 	.word	0x08012391
 8012508:	08012b5b 	.word	0x08012b5b
 801250c:	0801260b 	.word	0x0801260b
 8012510:	08012b79 	.word	0x08012b79
 8012514:	08012be7 	.word	0x08012be7
 8012518:	69b3      	ldr	r3, [r6, #24]
 801251a:	4aa9      	ldr	r2, [pc, #676]	; (80127c0 <__strftime.isra.0+0x494>)
 801251c:	3318      	adds	r3, #24
 801251e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8012522:	4648      	mov	r0, r9
 8012524:	f7ed fe6e 	bl	8000204 <strlen>
 8012528:	f109 39ff 	add.w	r9, r9, #4294967295
 801252c:	4420      	add	r0, r4
 801252e:	1e6b      	subs	r3, r5, #1
 8012530:	42a0      	cmp	r0, r4
 8012532:	d107      	bne.n	8012544 <__strftime.isra.0+0x218>
 8012534:	f898 3000 	ldrb.w	r3, [r8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f000 83be 	beq.w	8012cba <__strftime.isra.0+0x98e>
 801253e:	f108 0201 	add.w	r2, r8, #1
 8012542:	e6fc      	b.n	801233e <__strftime.isra.0+0x12>
 8012544:	42a3      	cmp	r3, r4
 8012546:	f67f af23 	bls.w	8012390 <__strftime.isra.0+0x64>
 801254a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 801254e:	553a      	strb	r2, [r7, r4]
 8012550:	3401      	adds	r4, #1
 8012552:	e7ed      	b.n	8012530 <__strftime.isra.0+0x204>
 8012554:	69b2      	ldr	r2, [r6, #24]
 8012556:	4b9a      	ldr	r3, [pc, #616]	; (80127c0 <__strftime.isra.0+0x494>)
 8012558:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801255c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8012560:	4648      	mov	r0, r9
 8012562:	f7ed fe4f 	bl	8000204 <strlen>
 8012566:	f109 39ff 	add.w	r9, r9, #4294967295
 801256a:	4420      	add	r0, r4
 801256c:	1e6b      	subs	r3, r5, #1
 801256e:	42a0      	cmp	r0, r4
 8012570:	d0e0      	beq.n	8012534 <__strftime.isra.0+0x208>
 8012572:	42a3      	cmp	r3, r4
 8012574:	f67f af0c 	bls.w	8012390 <__strftime.isra.0+0x64>
 8012578:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 801257c:	553a      	strb	r2, [r7, r4]
 801257e:	3401      	adds	r4, #1
 8012580:	e7f5      	b.n	801256e <__strftime.isra.0+0x242>
 8012582:	4b8f      	ldr	r3, [pc, #572]	; (80127c0 <__strftime.isra.0+0x494>)
 8012584:	6932      	ldr	r2, [r6, #16]
 8012586:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 801258a:	4648      	mov	r0, r9
 801258c:	f7ed fe3a 	bl	8000204 <strlen>
 8012590:	f109 39ff 	add.w	r9, r9, #4294967295
 8012594:	4420      	add	r0, r4
 8012596:	1e6b      	subs	r3, r5, #1
 8012598:	42a0      	cmp	r0, r4
 801259a:	d0cb      	beq.n	8012534 <__strftime.isra.0+0x208>
 801259c:	42a3      	cmp	r3, r4
 801259e:	f67f aef7 	bls.w	8012390 <__strftime.isra.0+0x64>
 80125a2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80125a6:	553a      	strb	r2, [r7, r4]
 80125a8:	3401      	adds	r4, #1
 80125aa:	e7f5      	b.n	8012598 <__strftime.isra.0+0x26c>
 80125ac:	6933      	ldr	r3, [r6, #16]
 80125ae:	4a84      	ldr	r2, [pc, #528]	; (80127c0 <__strftime.isra.0+0x494>)
 80125b0:	330c      	adds	r3, #12
 80125b2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80125b6:	4648      	mov	r0, r9
 80125b8:	f7ed fe24 	bl	8000204 <strlen>
 80125bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80125c0:	4420      	add	r0, r4
 80125c2:	1e6b      	subs	r3, r5, #1
 80125c4:	42a0      	cmp	r0, r4
 80125c6:	d0b5      	beq.n	8012534 <__strftime.isra.0+0x208>
 80125c8:	42a3      	cmp	r3, r4
 80125ca:	f67f aee1 	bls.w	8012390 <__strftime.isra.0+0x64>
 80125ce:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80125d2:	553a      	strb	r2, [r7, r4]
 80125d4:	3401      	adds	r4, #1
 80125d6:	e7f5      	b.n	80125c4 <__strftime.isra.0+0x298>
 80125d8:	4b79      	ldr	r3, [pc, #484]	; (80127c0 <__strftime.isra.0+0x494>)
 80125da:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80125de:	4648      	mov	r0, r9
 80125e0:	f7ed fe10 	bl	8000204 <strlen>
 80125e4:	f899 3000 	ldrb.w	r3, [r9]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d0a3      	beq.n	8012534 <__strftime.isra.0+0x208>
 80125ec:	4633      	mov	r3, r6
 80125ee:	464a      	mov	r2, r9
 80125f0:	1b29      	subs	r1, r5, r4
 80125f2:	1938      	adds	r0, r7, r4
 80125f4:	f7ff fe9a 	bl	801232c <__strftime.isra.0>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	f77f aec9 	ble.w	8012390 <__strftime.isra.0+0x64>
 80125fe:	4404      	add	r4, r0
 8012600:	e798      	b.n	8012534 <__strftime.isra.0+0x208>
 8012602:	4b6f      	ldr	r3, [pc, #444]	; (80127c0 <__strftime.isra.0+0x494>)
 8012604:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8012608:	e7e9      	b.n	80125de <__strftime.isra.0+0x2b2>
 801260a:	4b6d      	ldr	r3, [pc, #436]	; (80127c0 <__strftime.isra.0+0x494>)
 801260c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8012610:	e7e5      	b.n	80125de <__strftime.isra.0+0x2b2>
 8012612:	4b6b      	ldr	r3, [pc, #428]	; (80127c0 <__strftime.isra.0+0x494>)
 8012614:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8012618:	e7e1      	b.n	80125de <__strftime.isra.0+0x2b2>
 801261a:	496a      	ldr	r1, [pc, #424]	; (80127c4 <__strftime.isra.0+0x498>)
 801261c:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8012620:	458a      	cmp	sl, r1
 8012622:	bfac      	ite	ge
 8012624:	2100      	movge	r1, #0
 8012626:	2101      	movlt	r1, #1
 8012628:	f1ba 0f00 	cmp.w	sl, #0
 801262c:	db11      	blt.n	8012652 <__strftime.isra.0+0x326>
 801262e:	2064      	movs	r0, #100	; 0x64
 8012630:	fb9a f0f0 	sdiv	r0, sl, r0
 8012634:	3013      	adds	r0, #19
 8012636:	f1bb 0f00 	cmp.w	fp, #0
 801263a:	d014      	beq.n	8012666 <__strftime.isra.0+0x33a>
 801263c:	2863      	cmp	r0, #99	; 0x63
 801263e:	dd27      	ble.n	8012690 <__strftime.isra.0+0x364>
 8012640:	4b61      	ldr	r3, [pc, #388]	; (80127c8 <__strftime.isra.0+0x49c>)
 8012642:	4a62      	ldr	r2, [pc, #392]	; (80127cc <__strftime.isra.0+0x4a0>)
 8012644:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8012648:	bf18      	it	ne
 801264a:	461a      	movne	r2, r3
 801264c:	f8df c198 	ldr.w	ip, [pc, #408]	; 80127e8 <__strftime.isra.0+0x4bc>
 8012650:	e00c      	b.n	801266c <__strftime.isra.0+0x340>
 8012652:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8012656:	9103      	str	r1, [sp, #12]
 8012658:	f001 fe31 	bl	80142be <abs>
 801265c:	2264      	movs	r2, #100	; 0x64
 801265e:	9903      	ldr	r1, [sp, #12]
 8012660:	fb90 f0f2 	sdiv	r0, r0, r2
 8012664:	e7e7      	b.n	8012636 <__strftime.isra.0+0x30a>
 8012666:	4a58      	ldr	r2, [pc, #352]	; (80127c8 <__strftime.isra.0+0x49c>)
 8012668:	f8df c180 	ldr.w	ip, [pc, #384]	; 80127ec <__strftime.isra.0+0x4c0>
 801266c:	4b58      	ldr	r3, [pc, #352]	; (80127d0 <__strftime.isra.0+0x4a4>)
 801266e:	9001      	str	r0, [sp, #4]
 8012670:	f1b9 0f02 	cmp.w	r9, #2
 8012674:	bf2c      	ite	cs
 8012676:	ebc1 0109 	rsbcs	r1, r1, r9
 801267a:	f1c1 0102 	rsbcc	r1, r1, #2
 801267e:	9100      	str	r1, [sp, #0]
 8012680:	4950      	ldr	r1, [pc, #320]	; (80127c4 <__strftime.isra.0+0x498>)
 8012682:	458a      	cmp	sl, r1
 8012684:	bfa8      	it	ge
 8012686:	4613      	movge	r3, r2
 8012688:	4662      	mov	r2, ip
 801268a:	1b29      	subs	r1, r5, r4
 801268c:	1938      	adds	r0, r7, r4
 801268e:	e028      	b.n	80126e2 <__strftime.isra.0+0x3b6>
 8012690:	4a4d      	ldr	r2, [pc, #308]	; (80127c8 <__strftime.isra.0+0x49c>)
 8012692:	e7db      	b.n	801264c <__strftime.isra.0+0x320>
 8012694:	494f      	ldr	r1, [pc, #316]	; (80127d4 <__strftime.isra.0+0x4a8>)
 8012696:	4a50      	ldr	r2, [pc, #320]	; (80127d8 <__strftime.isra.0+0x4ac>)
 8012698:	68f3      	ldr	r3, [r6, #12]
 801269a:	2864      	cmp	r0, #100	; 0x64
 801269c:	bf08      	it	eq
 801269e:	460a      	moveq	r2, r1
 80126a0:	1b29      	subs	r1, r5, r4
 80126a2:	1938      	adds	r0, r7, r4
 80126a4:	f004 fcf8 	bl	8017098 <sniprintf>
 80126a8:	2800      	cmp	r0, #0
 80126aa:	f6ff ae71 	blt.w	8012390 <__strftime.isra.0+0x64>
 80126ae:	4404      	add	r4, r0
 80126b0:	42a5      	cmp	r5, r4
 80126b2:	f63f af3f 	bhi.w	8012534 <__strftime.isra.0+0x208>
 80126b6:	e66b      	b.n	8012390 <__strftime.isra.0+0x64>
 80126b8:	6970      	ldr	r0, [r6, #20]
 80126ba:	6933      	ldr	r3, [r6, #16]
 80126bc:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80126c0:	2800      	cmp	r0, #0
 80126c2:	eb07 0904 	add.w	r9, r7, r4
 80126c6:	eba5 0104 	sub.w	r1, r5, r4
 80126ca:	f103 0301 	add.w	r3, r3, #1
 80126ce:	db0b      	blt.n	80126e8 <__strftime.isra.0+0x3bc>
 80126d0:	2264      	movs	r2, #100	; 0x64
 80126d2:	fb90 fcf2 	sdiv	ip, r0, r2
 80126d6:	fb02 001c 	mls	r0, r2, ip, r0
 80126da:	4a40      	ldr	r2, [pc, #256]	; (80127dc <__strftime.isra.0+0x4b0>)
 80126dc:	e9cd a000 	strd	sl, r0, [sp]
 80126e0:	4648      	mov	r0, r9
 80126e2:	f004 fcd9 	bl	8017098 <sniprintf>
 80126e6:	e7df      	b.n	80126a8 <__strftime.isra.0+0x37c>
 80126e8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80126ec:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80126f0:	f001 fde5 	bl	80142be <abs>
 80126f4:	2264      	movs	r2, #100	; 0x64
 80126f6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80126fa:	fb90 fcf2 	sdiv	ip, r0, r2
 80126fe:	fb0c 0012 	mls	r0, ip, r2, r0
 8012702:	e7ea      	b.n	80126da <__strftime.isra.0+0x3ae>
 8012704:	2225      	movs	r2, #37	; 0x25
 8012706:	f88d 2018 	strb.w	r2, [sp, #24]
 801270a:	f1bb 0f00 	cmp.w	fp, #0
 801270e:	d011      	beq.n	8012734 <__strftime.isra.0+0x408>
 8012710:	f1b9 0f06 	cmp.w	r9, #6
 8012714:	bf38      	it	cc
 8012716:	f04f 0906 	movcc.w	r9, #6
 801271a:	f1b9 0306 	subs.w	r3, r9, #6
 801271e:	f88d b019 	strb.w	fp, [sp, #25]
 8012722:	d10c      	bne.n	801273e <__strftime.isra.0+0x412>
 8012724:	f10d 001a 	add.w	r0, sp, #26
 8012728:	492d      	ldr	r1, [pc, #180]	; (80127e0 <__strftime.isra.0+0x4b4>)
 801272a:	f7ff fd94 	bl	8012256 <strcpy>
 801272e:	4633      	mov	r3, r6
 8012730:	aa06      	add	r2, sp, #24
 8012732:	e75d      	b.n	80125f0 <__strftime.isra.0+0x2c4>
 8012734:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8012738:	f04f 090a 	mov.w	r9, #10
 801273c:	e7ed      	b.n	801271a <__strftime.isra.0+0x3ee>
 801273e:	4a29      	ldr	r2, [pc, #164]	; (80127e4 <__strftime.isra.0+0x4b8>)
 8012740:	211e      	movs	r1, #30
 8012742:	f10d 001a 	add.w	r0, sp, #26
 8012746:	f004 fca7 	bl	8017098 <sniprintf>
 801274a:	2800      	cmp	r0, #0
 801274c:	ddea      	ble.n	8012724 <__strftime.isra.0+0x3f8>
 801274e:	f10d 031a 	add.w	r3, sp, #26
 8012752:	4418      	add	r0, r3
 8012754:	e7e8      	b.n	8012728 <__strftime.isra.0+0x3fc>
 8012756:	4630      	mov	r0, r6
 8012758:	f7ff fd86 	bl	8012268 <iso_year_adjust>
 801275c:	4681      	mov	r9, r0
 801275e:	6970      	ldr	r0, [r6, #20]
 8012760:	2800      	cmp	r0, #0
 8012762:	db11      	blt.n	8012788 <__strftime.isra.0+0x45c>
 8012764:	2364      	movs	r3, #100	; 0x64
 8012766:	fb90 f2f3 	sdiv	r2, r0, r3
 801276a:	fb03 0012 	mls	r0, r3, r2, r0
 801276e:	2264      	movs	r2, #100	; 0x64
 8012770:	4481      	add	r9, r0
 8012772:	fb99 f3f2 	sdiv	r3, r9, r2
 8012776:	fb02 9913 	mls	r9, r2, r3, r9
 801277a:	4491      	add	r9, r2
 801277c:	fbb9 f3f2 	udiv	r3, r9, r2
 8012780:	fb02 9313 	mls	r3, r2, r3, r9
 8012784:	4a13      	ldr	r2, [pc, #76]	; (80127d4 <__strftime.isra.0+0x4a8>)
 8012786:	e78b      	b.n	80126a0 <__strftime.isra.0+0x374>
 8012788:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801278c:	f001 fd97 	bl	80142be <abs>
 8012790:	2364      	movs	r3, #100	; 0x64
 8012792:	f1b9 0f00 	cmp.w	r9, #0
 8012796:	fb90 f2f3 	sdiv	r2, r0, r3
 801279a:	fb02 0013 	mls	r0, r2, r3, r0
 801279e:	da07      	bge.n	80127b0 <__strftime.isra.0+0x484>
 80127a0:	6972      	ldr	r2, [r6, #20]
 80127a2:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80127a6:	429a      	cmp	r2, r3
 80127a8:	bfb8      	it	lt
 80127aa:	f04f 0901 	movlt.w	r9, #1
 80127ae:	e7de      	b.n	801276e <__strftime.isra.0+0x442>
 80127b0:	d0dd      	beq.n	801276e <__strftime.isra.0+0x442>
 80127b2:	6972      	ldr	r2, [r6, #20]
 80127b4:	4b03      	ldr	r3, [pc, #12]	; (80127c4 <__strftime.isra.0+0x498>)
 80127b6:	429a      	cmp	r2, r3
 80127b8:	bfb8      	it	lt
 80127ba:	f04f 39ff 	movlt.w	r9, #4294967295
 80127be:	e7d6      	b.n	801276e <__strftime.isra.0+0x442>
 80127c0:	08048aa8 	.word	0x08048aa8
 80127c4:	fffff894 	.word	0xfffff894
 80127c8:	08048756 	.word	0x08048756
 80127cc:	08048882 	.word	0x08048882
 80127d0:	08048ff5 	.word	0x08048ff5
 80127d4:	08048892 	.word	0x08048892
 80127d8:	08048884 	.word	0x08048884
 80127dc:	08048888 	.word	0x08048888
 80127e0:	0804889b 	.word	0x0804889b
 80127e4:	08048897 	.word	0x08048897
 80127e8:	0804887a 	.word	0x0804887a
 80127ec:	08048873 	.word	0x08048873
 80127f0:	6971      	ldr	r1, [r6, #20]
 80127f2:	4ab6      	ldr	r2, [pc, #728]	; (8012acc <__strftime.isra.0+0x7a0>)
 80127f4:	4291      	cmp	r1, r2
 80127f6:	bfac      	ite	ge
 80127f8:	2300      	movge	r3, #0
 80127fa:	2301      	movlt	r3, #1
 80127fc:	4630      	mov	r0, r6
 80127fe:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8012802:	f7ff fd31 	bl	8012268 <iso_year_adjust>
 8012806:	9904      	ldr	r1, [sp, #16]
 8012808:	2900      	cmp	r1, #0
 801280a:	4682      	mov	sl, r0
 801280c:	db2c      	blt.n	8012868 <__strftime.isra.0+0x53c>
 801280e:	2264      	movs	r2, #100	; 0x64
 8012810:	fb91 f2f2 	sdiv	r2, r1, r2
 8012814:	3213      	adds	r2, #19
 8012816:	6970      	ldr	r0, [r6, #20]
 8012818:	2800      	cmp	r0, #0
 801281a:	db30      	blt.n	801287e <__strftime.isra.0+0x552>
 801281c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012820:	fb90 fefc 	sdiv	lr, r0, ip
 8012824:	fb0c 001e 	mls	r0, ip, lr, r0
 8012828:	f1ba 0f00 	cmp.w	sl, #0
 801282c:	da36      	bge.n	801289c <__strftime.isra.0+0x570>
 801282e:	6971      	ldr	r1, [r6, #20]
 8012830:	4ba7      	ldr	r3, [pc, #668]	; (8012ad0 <__strftime.isra.0+0x7a4>)
 8012832:	4299      	cmp	r1, r3
 8012834:	db3d      	blt.n	80128b2 <__strftime.isra.0+0x586>
 8012836:	4482      	add	sl, r0
 8012838:	f1ba 3fff 	cmp.w	sl, #4294967295
 801283c:	d13e      	bne.n	80128bc <__strftime.isra.0+0x590>
 801283e:	3a01      	subs	r2, #1
 8012840:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	2064      	movs	r0, #100	; 0x64
 8012848:	fb00 aa02 	mla	sl, r0, r2, sl
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 81ad 	beq.w	8012bac <__strftime.isra.0+0x880>
 8012852:	222d      	movs	r2, #45	; 0x2d
 8012854:	f88d 2018 	strb.w	r2, [sp, #24]
 8012858:	f1b9 0f00 	cmp.w	r9, #0
 801285c:	d001      	beq.n	8012862 <__strftime.isra.0+0x536>
 801285e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012862:	f10d 0219 	add.w	r2, sp, #25
 8012866:	e1ac      	b.n	8012bc2 <__strftime.isra.0+0x896>
 8012868:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801286c:	9104      	str	r1, [sp, #16]
 801286e:	f001 fd26 	bl	80142be <abs>
 8012872:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012876:	9904      	ldr	r1, [sp, #16]
 8012878:	fb90 f2fc 	sdiv	r2, r0, ip
 801287c:	e7cb      	b.n	8012816 <__strftime.isra.0+0x4ea>
 801287e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012882:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012886:	f001 fd1a 	bl	80142be <abs>
 801288a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801288e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8012892:	fb90 fefc 	sdiv	lr, r0, ip
 8012896:	fb0e 001c 	mls	r0, lr, ip, r0
 801289a:	e7c5      	b.n	8012828 <__strftime.isra.0+0x4fc>
 801289c:	d0cb      	beq.n	8012836 <__strftime.isra.0+0x50a>
 801289e:	4b8b      	ldr	r3, [pc, #556]	; (8012acc <__strftime.isra.0+0x7a0>)
 80128a0:	4299      	cmp	r1, r3
 80128a2:	bfb4      	ite	lt
 80128a4:	2301      	movlt	r3, #1
 80128a6:	2300      	movge	r3, #0
 80128a8:	9303      	str	r3, [sp, #12]
 80128aa:	bfb8      	it	lt
 80128ac:	f04f 3aff 	movlt.w	sl, #4294967295
 80128b0:	e7c1      	b.n	8012836 <__strftime.isra.0+0x50a>
 80128b2:	f04f 0a01 	mov.w	sl, #1
 80128b6:	f8cd a00c 	str.w	sl, [sp, #12]
 80128ba:	e7bc      	b.n	8012836 <__strftime.isra.0+0x50a>
 80128bc:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80128c0:	bf04      	itt	eq
 80128c2:	3201      	addeq	r2, #1
 80128c4:	f04f 0a00 	moveq.w	sl, #0
 80128c8:	e7bc      	b.n	8012844 <__strftime.isra.0+0x518>
 80128ca:	4982      	ldr	r1, [pc, #520]	; (8012ad4 <__strftime.isra.0+0x7a8>)
 80128cc:	4a82      	ldr	r2, [pc, #520]	; (8012ad8 <__strftime.isra.0+0x7ac>)
 80128ce:	68b3      	ldr	r3, [r6, #8]
 80128d0:	286b      	cmp	r0, #107	; 0x6b
 80128d2:	bf08      	it	eq
 80128d4:	460a      	moveq	r2, r1
 80128d6:	e6e3      	b.n	80126a0 <__strftime.isra.0+0x374>
 80128d8:	68b3      	ldr	r3, [r6, #8]
 80128da:	b163      	cbz	r3, 80128f6 <__strftime.isra.0+0x5ca>
 80128dc:	2b0c      	cmp	r3, #12
 80128de:	d004      	beq.n	80128ea <__strftime.isra.0+0x5be>
 80128e0:	210c      	movs	r1, #12
 80128e2:	fb93 f2f1 	sdiv	r2, r3, r1
 80128e6:	fb01 3312 	mls	r3, r1, r2, r3
 80128ea:	497b      	ldr	r1, [pc, #492]	; (8012ad8 <__strftime.isra.0+0x7ac>)
 80128ec:	4a79      	ldr	r2, [pc, #484]	; (8012ad4 <__strftime.isra.0+0x7a8>)
 80128ee:	2849      	cmp	r0, #73	; 0x49
 80128f0:	bf08      	it	eq
 80128f2:	460a      	moveq	r2, r1
 80128f4:	e6d4      	b.n	80126a0 <__strftime.isra.0+0x374>
 80128f6:	230c      	movs	r3, #12
 80128f8:	e7f7      	b.n	80128ea <__strftime.isra.0+0x5be>
 80128fa:	69f3      	ldr	r3, [r6, #28]
 80128fc:	4a77      	ldr	r2, [pc, #476]	; (8012adc <__strftime.isra.0+0x7b0>)
 80128fe:	3301      	adds	r3, #1
 8012900:	e6ce      	b.n	80126a0 <__strftime.isra.0+0x374>
 8012902:	6933      	ldr	r3, [r6, #16]
 8012904:	3301      	adds	r3, #1
 8012906:	e73d      	b.n	8012784 <__strftime.isra.0+0x458>
 8012908:	6873      	ldr	r3, [r6, #4]
 801290a:	e73b      	b.n	8012784 <__strftime.isra.0+0x458>
 801290c:	1e6b      	subs	r3, r5, #1
 801290e:	429c      	cmp	r4, r3
 8012910:	f4bf ad3e 	bcs.w	8012390 <__strftime.isra.0+0x64>
 8012914:	230a      	movs	r3, #10
 8012916:	553b      	strb	r3, [r7, r4]
 8012918:	3401      	adds	r4, #1
 801291a:	e60b      	b.n	8012534 <__strftime.isra.0+0x208>
 801291c:	68b3      	ldr	r3, [r6, #8]
 801291e:	2b0b      	cmp	r3, #11
 8012920:	4b6f      	ldr	r3, [pc, #444]	; (8012ae0 <__strftime.isra.0+0x7b4>)
 8012922:	bfd4      	ite	le
 8012924:	2200      	movle	r2, #0
 8012926:	2201      	movgt	r2, #1
 8012928:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801292c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8012930:	4648      	mov	r0, r9
 8012932:	f7ed fc67 	bl	8000204 <strlen>
 8012936:	f109 32ff 	add.w	r2, r9, #4294967295
 801293a:	4420      	add	r0, r4
 801293c:	f105 3cff 	add.w	ip, r5, #4294967295
 8012940:	42a0      	cmp	r0, r4
 8012942:	f43f adf7 	beq.w	8012534 <__strftime.isra.0+0x208>
 8012946:	45a4      	cmp	ip, r4
 8012948:	f67f ad22 	bls.w	8012390 <__strftime.isra.0+0x64>
 801294c:	f898 1000 	ldrb.w	r1, [r8]
 8012950:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012954:	2950      	cmp	r1, #80	; 0x50
 8012956:	d107      	bne.n	8012968 <__strftime.isra.0+0x63c>
 8012958:	4962      	ldr	r1, [pc, #392]	; (8012ae4 <__strftime.isra.0+0x7b8>)
 801295a:	5cc9      	ldrb	r1, [r1, r3]
 801295c:	f001 0103 	and.w	r1, r1, #3
 8012960:	2901      	cmp	r1, #1
 8012962:	bf08      	it	eq
 8012964:	3320      	addeq	r3, #32
 8012966:	b2db      	uxtb	r3, r3
 8012968:	553b      	strb	r3, [r7, r4]
 801296a:	3401      	adds	r4, #1
 801296c:	e7e8      	b.n	8012940 <__strftime.isra.0+0x614>
 801296e:	6873      	ldr	r3, [r6, #4]
 8012970:	9300      	str	r3, [sp, #0]
 8012972:	4a5d      	ldr	r2, [pc, #372]	; (8012ae8 <__strftime.isra.0+0x7bc>)
 8012974:	68b3      	ldr	r3, [r6, #8]
 8012976:	1b29      	subs	r1, r5, r4
 8012978:	1938      	adds	r0, r7, r4
 801297a:	f004 fb8d 	bl	8017098 <sniprintf>
 801297e:	e693      	b.n	80126a8 <__strftime.isra.0+0x37c>
 8012980:	6a33      	ldr	r3, [r6, #32]
 8012982:	2b00      	cmp	r3, #0
 8012984:	db7a      	blt.n	8012a7c <__strftime.isra.0+0x750>
 8012986:	f001 fa2f 	bl	8013de8 <__tz_lock>
 801298a:	9b02      	ldr	r3, [sp, #8]
 801298c:	b90b      	cbnz	r3, 8012992 <__strftime.isra.0+0x666>
 801298e:	f001 fa37 	bl	8013e00 <_tzset_unlocked>
 8012992:	f003 f8a1 	bl	8015ad8 <__gettzinfo>
 8012996:	6a33      	ldr	r3, [r6, #32]
 8012998:	2b00      	cmp	r3, #0
 801299a:	bfd4      	ite	le
 801299c:	2200      	movle	r2, #0
 801299e:	2201      	movgt	r2, #1
 80129a0:	2328      	movs	r3, #40	; 0x28
 80129a2:	fb02 3303 	mla	r3, r2, r3, r3
 80129a6:	58c3      	ldr	r3, [r0, r3]
 80129a8:	f1c3 0900 	rsb	r9, r3, #0
 80129ac:	f001 fa22 	bl	8013df4 <__tz_unlock>
 80129b0:	2301      	movs	r3, #1
 80129b2:	9302      	str	r3, [sp, #8]
 80129b4:	6972      	ldr	r2, [r6, #20]
 80129b6:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 80129ba:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80129be:	f16c 0c00 	sbc.w	ip, ip, #0
 80129c2:	f1bc 0f00 	cmp.w	ip, #0
 80129c6:	eba5 0104 	sub.w	r1, r5, r4
 80129ca:	eb07 0004 	add.w	r0, r7, r4
 80129ce:	da02      	bge.n	80129d6 <__strftime.isra.0+0x6aa>
 80129d0:	3303      	adds	r3, #3
 80129d2:	f14c 0c00 	adc.w	ip, ip, #0
 80129d6:	089b      	lsrs	r3, r3, #2
 80129d8:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80129dc:	f102 3aff 	add.w	sl, r2, #4294967295
 80129e0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80129e4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80129e8:	fb9a fefe 	sdiv	lr, sl, lr
 80129ec:	ebb3 030e 	subs.w	r3, r3, lr
 80129f0:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80129f4:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80129f8:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80129fc:	fb9a fefe 	sdiv	lr, sl, lr
 8012a00:	eb13 030e 	adds.w	r3, r3, lr
 8012a04:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8012a08:	3a46      	subs	r2, #70	; 0x46
 8012a0a:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012a0e:	fb0c f202 	mul.w	r2, ip, r2
 8012a12:	189b      	adds	r3, r3, r2
 8012a14:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8012a18:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8012a1c:	f04f 0c18 	mov.w	ip, #24
 8012a20:	eb13 030e 	adds.w	r3, r3, lr
 8012a24:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8012a28:	fba3 3e0c 	umull	r3, lr, r3, ip
 8012a2c:	fb0c e202 	mla	r2, ip, r2, lr
 8012a30:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8012a34:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8012a38:	eb13 030e 	adds.w	r3, r3, lr
 8012a3c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8012a40:	fba3 320c 	umull	r3, r2, r3, ip
 8012a44:	fb0c 220e 	mla	r2, ip, lr, r2
 8012a48:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8012a4c:	eb13 030e 	adds.w	r3, r3, lr
 8012a50:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8012a54:	fba3 3e0c 	umull	r3, lr, r3, ip
 8012a58:	fb0c e202 	mla	r2, ip, r2, lr
 8012a5c:	f8d6 e000 	ldr.w	lr, [r6]
 8012a60:	eb13 030e 	adds.w	r3, r3, lr
 8012a64:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8012a68:	ebb3 0309 	subs.w	r3, r3, r9
 8012a6c:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8012a70:	e9cd 3200 	strd	r3, r2, [sp]
 8012a74:	4a1d      	ldr	r2, [pc, #116]	; (8012aec <__strftime.isra.0+0x7c0>)
 8012a76:	f004 fb0f 	bl	8017098 <sniprintf>
 8012a7a:	e615      	b.n	80126a8 <__strftime.isra.0+0x37c>
 8012a7c:	f04f 0900 	mov.w	r9, #0
 8012a80:	e798      	b.n	80129b4 <__strftime.isra.0+0x688>
 8012a82:	6833      	ldr	r3, [r6, #0]
 8012a84:	e67e      	b.n	8012784 <__strftime.isra.0+0x458>
 8012a86:	1e6b      	subs	r3, r5, #1
 8012a88:	429c      	cmp	r4, r3
 8012a8a:	f4bf ac81 	bcs.w	8012390 <__strftime.isra.0+0x64>
 8012a8e:	2309      	movs	r3, #9
 8012a90:	e741      	b.n	8012916 <__strftime.isra.0+0x5ea>
 8012a92:	6833      	ldr	r3, [r6, #0]
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	6873      	ldr	r3, [r6, #4]
 8012a98:	9300      	str	r3, [sp, #0]
 8012a9a:	4a15      	ldr	r2, [pc, #84]	; (8012af0 <__strftime.isra.0+0x7c4>)
 8012a9c:	68b3      	ldr	r3, [r6, #8]
 8012a9e:	e5f4      	b.n	801268a <__strftime.isra.0+0x35e>
 8012aa0:	1e6b      	subs	r3, r5, #1
 8012aa2:	429c      	cmp	r4, r3
 8012aa4:	f4bf ac74 	bcs.w	8012390 <__strftime.isra.0+0x64>
 8012aa8:	69b3      	ldr	r3, [r6, #24]
 8012aaa:	1c62      	adds	r2, r4, #1
 8012aac:	b91b      	cbnz	r3, 8012ab6 <__strftime.isra.0+0x78a>
 8012aae:	2337      	movs	r3, #55	; 0x37
 8012ab0:	553b      	strb	r3, [r7, r4]
 8012ab2:	4614      	mov	r4, r2
 8012ab4:	e53e      	b.n	8012534 <__strftime.isra.0+0x208>
 8012ab6:	3330      	adds	r3, #48	; 0x30
 8012ab8:	e7fa      	b.n	8012ab0 <__strftime.isra.0+0x784>
 8012aba:	69f3      	ldr	r3, [r6, #28]
 8012abc:	69b2      	ldr	r2, [r6, #24]
 8012abe:	3307      	adds	r3, #7
 8012ac0:	1a9b      	subs	r3, r3, r2
 8012ac2:	2207      	movs	r2, #7
 8012ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ac8:	e65c      	b.n	8012784 <__strftime.isra.0+0x458>
 8012aca:	bf00      	nop
 8012acc:	fffff894 	.word	0xfffff894
 8012ad0:	fffff895 	.word	0xfffff895
 8012ad4:	08048884 	.word	0x08048884
 8012ad8:	08048892 	.word	0x08048892
 8012adc:	080488a7 	.word	0x080488a7
 8012ae0:	08048aa8 	.word	0x08048aa8
 8012ae4:	08048be1 	.word	0x08048be1
 8012ae8:	080488b6 	.word	0x080488b6
 8012aec:	080488ac 	.word	0x080488ac
 8012af0:	080488b1 	.word	0x080488b1
 8012af4:	4630      	mov	r0, r6
 8012af6:	f7ff fbb7 	bl	8012268 <iso_year_adjust>
 8012afa:	69b2      	ldr	r2, [r6, #24]
 8012afc:	b132      	cbz	r2, 8012b0c <__strftime.isra.0+0x7e0>
 8012afe:	3a01      	subs	r2, #1
 8012b00:	2800      	cmp	r0, #0
 8012b02:	dc28      	bgt.n	8012b56 <__strftime.isra.0+0x82a>
 8012b04:	69f3      	ldr	r3, [r6, #28]
 8012b06:	d103      	bne.n	8012b10 <__strftime.isra.0+0x7e4>
 8012b08:	330a      	adds	r3, #10
 8012b0a:	e7d9      	b.n	8012ac0 <__strftime.isra.0+0x794>
 8012b0c:	2206      	movs	r2, #6
 8012b0e:	e7f7      	b.n	8012b00 <__strftime.isra.0+0x7d4>
 8012b10:	6971      	ldr	r1, [r6, #20]
 8012b12:	2900      	cmp	r1, #0
 8012b14:	eba2 0203 	sub.w	r2, r2, r3
 8012b18:	f240 736b 	movw	r3, #1899	; 0x76b
 8012b1c:	bfa8      	it	ge
 8012b1e:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8012b22:	440b      	add	r3, r1
 8012b24:	0799      	lsls	r1, r3, #30
 8012b26:	d105      	bne.n	8012b34 <__strftime.isra.0+0x808>
 8012b28:	2064      	movs	r0, #100	; 0x64
 8012b2a:	fb93 f1f0 	sdiv	r1, r3, r0
 8012b2e:	fb00 3111 	mls	r1, r0, r1, r3
 8012b32:	b971      	cbnz	r1, 8012b52 <__strftime.isra.0+0x826>
 8012b34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012b38:	fb93 f0f1 	sdiv	r0, r3, r1
 8012b3c:	fb01 3310 	mls	r3, r1, r0, r3
 8012b40:	fab3 f383 	clz	r3, r3
 8012b44:	095b      	lsrs	r3, r3, #5
 8012b46:	1ad3      	subs	r3, r2, r3
 8012b48:	2b05      	cmp	r3, #5
 8012b4a:	bfb4      	ite	lt
 8012b4c:	2335      	movlt	r3, #53	; 0x35
 8012b4e:	2334      	movge	r3, #52	; 0x34
 8012b50:	e618      	b.n	8012784 <__strftime.isra.0+0x458>
 8012b52:	2301      	movs	r3, #1
 8012b54:	e7f7      	b.n	8012b46 <__strftime.isra.0+0x81a>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e614      	b.n	8012784 <__strftime.isra.0+0x458>
 8012b5a:	1e6b      	subs	r3, r5, #1
 8012b5c:	429c      	cmp	r4, r3
 8012b5e:	f4bf ac17 	bcs.w	8012390 <__strftime.isra.0+0x64>
 8012b62:	69b3      	ldr	r3, [r6, #24]
 8012b64:	3330      	adds	r3, #48	; 0x30
 8012b66:	e6d6      	b.n	8012916 <__strftime.isra.0+0x5ea>
 8012b68:	69b2      	ldr	r2, [r6, #24]
 8012b6a:	b11a      	cbz	r2, 8012b74 <__strftime.isra.0+0x848>
 8012b6c:	3a01      	subs	r2, #1
 8012b6e:	69f3      	ldr	r3, [r6, #28]
 8012b70:	3307      	adds	r3, #7
 8012b72:	e7a5      	b.n	8012ac0 <__strftime.isra.0+0x794>
 8012b74:	2206      	movs	r2, #6
 8012b76:	e7fa      	b.n	8012b6e <__strftime.isra.0+0x842>
 8012b78:	6970      	ldr	r0, [r6, #20]
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	db05      	blt.n	8012b8a <__strftime.isra.0+0x85e>
 8012b7e:	2364      	movs	r3, #100	; 0x64
 8012b80:	fb90 f2f3 	sdiv	r2, r0, r3
 8012b84:	fb02 0313 	mls	r3, r2, r3, r0
 8012b88:	e5fc      	b.n	8012784 <__strftime.isra.0+0x458>
 8012b8a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012b8e:	f001 fb96 	bl	80142be <abs>
 8012b92:	e7f4      	b.n	8012b7e <__strftime.isra.0+0x852>
 8012b94:	6972      	ldr	r2, [r6, #20]
 8012b96:	494c      	ldr	r1, [pc, #304]	; (8012cc8 <__strftime.isra.0+0x99c>)
 8012b98:	428a      	cmp	r2, r1
 8012b9a:	da05      	bge.n	8012ba8 <__strftime.isra.0+0x87c>
 8012b9c:	202d      	movs	r0, #45	; 0x2d
 8012b9e:	f88d 0018 	strb.w	r0, [sp, #24]
 8012ba2:	eba1 0a02 	sub.w	sl, r1, r2
 8012ba6:	e657      	b.n	8012858 <__strftime.isra.0+0x52c>
 8012ba8:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8012bac:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8012bb0:	d106      	bne.n	8012bc0 <__strftime.isra.0+0x894>
 8012bb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8012bb6:	4592      	cmp	sl, r2
 8012bb8:	d902      	bls.n	8012bc0 <__strftime.isra.0+0x894>
 8012bba:	f88d b018 	strb.w	fp, [sp, #24]
 8012bbe:	e64b      	b.n	8012858 <__strftime.isra.0+0x52c>
 8012bc0:	aa06      	add	r2, sp, #24
 8012bc2:	2125      	movs	r1, #37	; 0x25
 8012bc4:	7011      	strb	r1, [r2, #0]
 8012bc6:	f1bb 0f00 	cmp.w	fp, #0
 8012bca:	d108      	bne.n	8012bde <__strftime.isra.0+0x8b2>
 8012bcc:	1c50      	adds	r0, r2, #1
 8012bce:	493f      	ldr	r1, [pc, #252]	; (8012ccc <__strftime.isra.0+0x9a0>)
 8012bd0:	f7ff fb41 	bl	8012256 <strcpy>
 8012bd4:	f8cd a000 	str.w	sl, [sp]
 8012bd8:	464b      	mov	r3, r9
 8012bda:	aa06      	add	r2, sp, #24
 8012bdc:	e6cb      	b.n	8012976 <__strftime.isra.0+0x64a>
 8012bde:	2330      	movs	r3, #48	; 0x30
 8012be0:	1c90      	adds	r0, r2, #2
 8012be2:	7053      	strb	r3, [r2, #1]
 8012be4:	e7f3      	b.n	8012bce <__strftime.isra.0+0x8a2>
 8012be6:	6a33      	ldr	r3, [r6, #32]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	f6ff aca3 	blt.w	8012534 <__strftime.isra.0+0x208>
 8012bee:	f001 f8fb 	bl	8013de8 <__tz_lock>
 8012bf2:	9b02      	ldr	r3, [sp, #8]
 8012bf4:	b90b      	cbnz	r3, 8012bfa <__strftime.isra.0+0x8ce>
 8012bf6:	f001 f903 	bl	8013e00 <_tzset_unlocked>
 8012bfa:	f002 ff6d 	bl	8015ad8 <__gettzinfo>
 8012bfe:	6a33      	ldr	r3, [r6, #32]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	bfd4      	ite	le
 8012c04:	2200      	movle	r2, #0
 8012c06:	2201      	movgt	r2, #1
 8012c08:	2328      	movs	r3, #40	; 0x28
 8012c0a:	fb02 3303 	mla	r3, r2, r3, r3
 8012c0e:	eb07 0a04 	add.w	sl, r7, r4
 8012c12:	58c3      	ldr	r3, [r0, r3]
 8012c14:	f1c3 0900 	rsb	r9, r3, #0
 8012c18:	f001 f8ec 	bl	8013df4 <__tz_unlock>
 8012c1c:	233c      	movs	r3, #60	; 0x3c
 8012c1e:	fb99 f0f3 	sdiv	r0, r9, r3
 8012c22:	f002 ff5d 	bl	8015ae0 <labs>
 8012c26:	233c      	movs	r3, #60	; 0x3c
 8012c28:	eba5 0b04 	sub.w	fp, r5, r4
 8012c2c:	fb90 f2f3 	sdiv	r2, r0, r3
 8012c30:	fb02 0013 	mls	r0, r2, r3, r0
 8012c34:	9000      	str	r0, [sp, #0]
 8012c36:	4a26      	ldr	r2, [pc, #152]	; (8012cd0 <__strftime.isra.0+0x9a4>)
 8012c38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012c3c:	4659      	mov	r1, fp
 8012c3e:	4650      	mov	r0, sl
 8012c40:	fb99 f3f3 	sdiv	r3, r9, r3
 8012c44:	f004 fa28 	bl	8017098 <sniprintf>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	f6ff aba1 	blt.w	8012390 <__strftime.isra.0+0x64>
 8012c4e:	4404      	add	r4, r0
 8012c50:	42a5      	cmp	r5, r4
 8012c52:	f67f ab9d 	bls.w	8012390 <__strftime.isra.0+0x64>
 8012c56:	2301      	movs	r3, #1
 8012c58:	9302      	str	r3, [sp, #8]
 8012c5a:	e46b      	b.n	8012534 <__strftime.isra.0+0x208>
 8012c5c:	6a33      	ldr	r3, [r6, #32]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f6ff ac68 	blt.w	8012534 <__strftime.isra.0+0x208>
 8012c64:	f001 f8c0 	bl	8013de8 <__tz_lock>
 8012c68:	9b02      	ldr	r3, [sp, #8]
 8012c6a:	b90b      	cbnz	r3, 8012c70 <__strftime.isra.0+0x944>
 8012c6c:	f001 f8c8 	bl	8013e00 <_tzset_unlocked>
 8012c70:	6a33      	ldr	r3, [r6, #32]
 8012c72:	4a18      	ldr	r2, [pc, #96]	; (8012cd4 <__strftime.isra.0+0x9a8>)
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bfd4      	ite	le
 8012c78:	2300      	movle	r3, #0
 8012c7a:	2301      	movgt	r3, #1
 8012c7c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8012c80:	4648      	mov	r0, r9
 8012c82:	f7ed fabf 	bl	8000204 <strlen>
 8012c86:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c8a:	4420      	add	r0, r4
 8012c8c:	1e6b      	subs	r3, r5, #1
 8012c8e:	42a0      	cmp	r0, r4
 8012c90:	d102      	bne.n	8012c98 <__strftime.isra.0+0x96c>
 8012c92:	f001 f8af 	bl	8013df4 <__tz_unlock>
 8012c96:	e7de      	b.n	8012c56 <__strftime.isra.0+0x92a>
 8012c98:	42a3      	cmp	r3, r4
 8012c9a:	d904      	bls.n	8012ca6 <__strftime.isra.0+0x97a>
 8012c9c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8012ca0:	553a      	strb	r2, [r7, r4]
 8012ca2:	3401      	adds	r4, #1
 8012ca4:	e7f3      	b.n	8012c8e <__strftime.isra.0+0x962>
 8012ca6:	f001 f8a5 	bl	8013df4 <__tz_unlock>
 8012caa:	f7ff bb71 	b.w	8012390 <__strftime.isra.0+0x64>
 8012cae:	1e6b      	subs	r3, r5, #1
 8012cb0:	429c      	cmp	r4, r3
 8012cb2:	f4bf ab6d 	bcs.w	8012390 <__strftime.isra.0+0x64>
 8012cb6:	2325      	movs	r3, #37	; 0x25
 8012cb8:	e62d      	b.n	8012916 <__strftime.isra.0+0x5ea>
 8012cba:	b10d      	cbz	r5, 8012cc0 <__strftime.isra.0+0x994>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	553b      	strb	r3, [r7, r4]
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	b00f      	add	sp, #60	; 0x3c
 8012cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc8:	fffff894 	.word	0xfffff894
 8012ccc:	080488a3 	.word	0x080488a3
 8012cd0:	080488c0 	.word	0x080488c0
 8012cd4:	2000032c 	.word	0x2000032c

08012cd8 <strftime>:
 8012cd8:	f7ff bb28 	b.w	801232c <__strftime.isra.0>

08012cdc <strncpy>:
 8012cdc:	b510      	push	{r4, lr}
 8012cde:	3901      	subs	r1, #1
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	b132      	cbz	r2, 8012cf2 <strncpy+0x16>
 8012ce4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012ce8:	f803 4b01 	strb.w	r4, [r3], #1
 8012cec:	3a01      	subs	r2, #1
 8012cee:	2c00      	cmp	r4, #0
 8012cf0:	d1f7      	bne.n	8012ce2 <strncpy+0x6>
 8012cf2:	441a      	add	r2, r3
 8012cf4:	2100      	movs	r1, #0
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d100      	bne.n	8012cfc <strncpy+0x20>
 8012cfa:	bd10      	pop	{r4, pc}
 8012cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8012d00:	e7f9      	b.n	8012cf6 <strncpy+0x1a>

08012d02 <strpbrk>:
 8012d02:	b570      	push	{r4, r5, r6, lr}
 8012d04:	7803      	ldrb	r3, [r0, #0]
 8012d06:	b1a3      	cbz	r3, 8012d32 <strpbrk+0x30>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012d12:	b14d      	cbz	r5, 8012d28 <strpbrk+0x26>
 8012d14:	460a      	mov	r2, r1
 8012d16:	e001      	b.n	8012d1c <strpbrk+0x1a>
 8012d18:	42ae      	cmp	r6, r5
 8012d1a:	d009      	beq.n	8012d30 <strpbrk+0x2e>
 8012d1c:	4614      	mov	r4, r2
 8012d1e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8012d22:	2e00      	cmp	r6, #0
 8012d24:	d1f8      	bne.n	8012d18 <strpbrk+0x16>
 8012d26:	e7f1      	b.n	8012d0c <strpbrk+0xa>
 8012d28:	7823      	ldrb	r3, [r4, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	bf08      	it	eq
 8012d2e:	2000      	moveq	r0, #0
 8012d30:	bd70      	pop	{r4, r5, r6, pc}
 8012d32:	4618      	mov	r0, r3
 8012d34:	e7fc      	b.n	8012d30 <strpbrk+0x2e>

08012d36 <strstr>:
 8012d36:	780a      	ldrb	r2, [r1, #0]
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	b96a      	cbnz	r2, 8012d58 <strstr+0x22>
 8012d3c:	bd70      	pop	{r4, r5, r6, pc}
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d109      	bne.n	8012d56 <strstr+0x20>
 8012d42:	460c      	mov	r4, r1
 8012d44:	4605      	mov	r5, r0
 8012d46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d0f6      	beq.n	8012d3c <strstr+0x6>
 8012d4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012d52:	429e      	cmp	r6, r3
 8012d54:	d0f7      	beq.n	8012d46 <strstr+0x10>
 8012d56:	3001      	adds	r0, #1
 8012d58:	7803      	ldrb	r3, [r0, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1ef      	bne.n	8012d3e <strstr+0x8>
 8012d5e:	4618      	mov	r0, r3
 8012d60:	e7ec      	b.n	8012d3c <strstr+0x6>

08012d62 <sulp>:
 8012d62:	b570      	push	{r4, r5, r6, lr}
 8012d64:	4604      	mov	r4, r0
 8012d66:	460d      	mov	r5, r1
 8012d68:	ec45 4b10 	vmov	d0, r4, r5
 8012d6c:	4616      	mov	r6, r2
 8012d6e:	f003 fae7 	bl	8016340 <__ulp>
 8012d72:	ec51 0b10 	vmov	r0, r1, d0
 8012d76:	b17e      	cbz	r6, 8012d98 <sulp+0x36>
 8012d78:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012d7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	dd09      	ble.n	8012d98 <sulp+0x36>
 8012d84:	051b      	lsls	r3, r3, #20
 8012d86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012d8a:	2400      	movs	r4, #0
 8012d8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012d90:	4622      	mov	r2, r4
 8012d92:	462b      	mov	r3, r5
 8012d94:	f7ed fc50 	bl	8000638 <__aeabi_dmul>
 8012d98:	bd70      	pop	{r4, r5, r6, pc}
 8012d9a:	0000      	movs	r0, r0
 8012d9c:	0000      	movs	r0, r0
	...

08012da0 <_strtod_l>:
 8012da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da4:	ed2d 8b02 	vpush	{d8}
 8012da8:	b09d      	sub	sp, #116	; 0x74
 8012daa:	461f      	mov	r7, r3
 8012dac:	2300      	movs	r3, #0
 8012dae:	9318      	str	r3, [sp, #96]	; 0x60
 8012db0:	4ba2      	ldr	r3, [pc, #648]	; (801303c <_strtod_l+0x29c>)
 8012db2:	9213      	str	r2, [sp, #76]	; 0x4c
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	9305      	str	r3, [sp, #20]
 8012db8:	4604      	mov	r4, r0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	4688      	mov	r8, r1
 8012dbe:	f7ed fa21 	bl	8000204 <strlen>
 8012dc2:	f04f 0a00 	mov.w	sl, #0
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	f04f 0b00 	mov.w	fp, #0
 8012dcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012dd2:	781a      	ldrb	r2, [r3, #0]
 8012dd4:	2a2b      	cmp	r2, #43	; 0x2b
 8012dd6:	d04e      	beq.n	8012e76 <_strtod_l+0xd6>
 8012dd8:	d83b      	bhi.n	8012e52 <_strtod_l+0xb2>
 8012dda:	2a0d      	cmp	r2, #13
 8012ddc:	d834      	bhi.n	8012e48 <_strtod_l+0xa8>
 8012dde:	2a08      	cmp	r2, #8
 8012de0:	d834      	bhi.n	8012e4c <_strtod_l+0xac>
 8012de2:	2a00      	cmp	r2, #0
 8012de4:	d03e      	beq.n	8012e64 <_strtod_l+0xc4>
 8012de6:	2300      	movs	r3, #0
 8012de8:	930a      	str	r3, [sp, #40]	; 0x28
 8012dea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012dec:	7833      	ldrb	r3, [r6, #0]
 8012dee:	2b30      	cmp	r3, #48	; 0x30
 8012df0:	f040 80b0 	bne.w	8012f54 <_strtod_l+0x1b4>
 8012df4:	7873      	ldrb	r3, [r6, #1]
 8012df6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012dfa:	2b58      	cmp	r3, #88	; 0x58
 8012dfc:	d168      	bne.n	8012ed0 <_strtod_l+0x130>
 8012dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e00:	9301      	str	r3, [sp, #4]
 8012e02:	ab18      	add	r3, sp, #96	; 0x60
 8012e04:	9702      	str	r7, [sp, #8]
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	4a8d      	ldr	r2, [pc, #564]	; (8013040 <_strtod_l+0x2a0>)
 8012e0a:	ab19      	add	r3, sp, #100	; 0x64
 8012e0c:	a917      	add	r1, sp, #92	; 0x5c
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f002 fb16 	bl	8015440 <__gethex>
 8012e14:	f010 0707 	ands.w	r7, r0, #7
 8012e18:	4605      	mov	r5, r0
 8012e1a:	d005      	beq.n	8012e28 <_strtod_l+0x88>
 8012e1c:	2f06      	cmp	r7, #6
 8012e1e:	d12c      	bne.n	8012e7a <_strtod_l+0xda>
 8012e20:	3601      	adds	r6, #1
 8012e22:	2300      	movs	r3, #0
 8012e24:	9617      	str	r6, [sp, #92]	; 0x5c
 8012e26:	930a      	str	r3, [sp, #40]	; 0x28
 8012e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f040 8590 	bne.w	8013950 <_strtod_l+0xbb0>
 8012e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e32:	b1eb      	cbz	r3, 8012e70 <_strtod_l+0xd0>
 8012e34:	4652      	mov	r2, sl
 8012e36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012e3a:	ec43 2b10 	vmov	d0, r2, r3
 8012e3e:	b01d      	add	sp, #116	; 0x74
 8012e40:	ecbd 8b02 	vpop	{d8}
 8012e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e48:	2a20      	cmp	r2, #32
 8012e4a:	d1cc      	bne.n	8012de6 <_strtod_l+0x46>
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012e50:	e7be      	b.n	8012dd0 <_strtod_l+0x30>
 8012e52:	2a2d      	cmp	r2, #45	; 0x2d
 8012e54:	d1c7      	bne.n	8012de6 <_strtod_l+0x46>
 8012e56:	2201      	movs	r2, #1
 8012e58:	920a      	str	r2, [sp, #40]	; 0x28
 8012e5a:	1c5a      	adds	r2, r3, #1
 8012e5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e5e:	785b      	ldrb	r3, [r3, #1]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1c2      	bne.n	8012dea <_strtod_l+0x4a>
 8012e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f040 856e 	bne.w	801394c <_strtod_l+0xbac>
 8012e70:	4652      	mov	r2, sl
 8012e72:	465b      	mov	r3, fp
 8012e74:	e7e1      	b.n	8012e3a <_strtod_l+0x9a>
 8012e76:	2200      	movs	r2, #0
 8012e78:	e7ee      	b.n	8012e58 <_strtod_l+0xb8>
 8012e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e7c:	b13a      	cbz	r2, 8012e8e <_strtod_l+0xee>
 8012e7e:	2135      	movs	r1, #53	; 0x35
 8012e80:	a81a      	add	r0, sp, #104	; 0x68
 8012e82:	f003 fb68 	bl	8016556 <__copybits>
 8012e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f002 ff27 	bl	8015cdc <_Bfree>
 8012e8e:	3f01      	subs	r7, #1
 8012e90:	2f04      	cmp	r7, #4
 8012e92:	d806      	bhi.n	8012ea2 <_strtod_l+0x102>
 8012e94:	e8df f007 	tbb	[pc, r7]
 8012e98:	1714030a 	.word	0x1714030a
 8012e9c:	0a          	.byte	0x0a
 8012e9d:	00          	.byte	0x00
 8012e9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012ea2:	0728      	lsls	r0, r5, #28
 8012ea4:	d5c0      	bpl.n	8012e28 <_strtod_l+0x88>
 8012ea6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012eaa:	e7bd      	b.n	8012e28 <_strtod_l+0x88>
 8012eac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012eba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012ebe:	e7f0      	b.n	8012ea2 <_strtod_l+0x102>
 8012ec0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013044 <_strtod_l+0x2a4>
 8012ec4:	e7ed      	b.n	8012ea2 <_strtod_l+0x102>
 8012ec6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012eca:	f04f 3aff 	mov.w	sl, #4294967295
 8012ece:	e7e8      	b.n	8012ea2 <_strtod_l+0x102>
 8012ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ed2:	1c5a      	adds	r2, r3, #1
 8012ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8012ed6:	785b      	ldrb	r3, [r3, #1]
 8012ed8:	2b30      	cmp	r3, #48	; 0x30
 8012eda:	d0f9      	beq.n	8012ed0 <_strtod_l+0x130>
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d0a3      	beq.n	8012e28 <_strtod_l+0x88>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	f04f 0900 	mov.w	r9, #0
 8012ee6:	9304      	str	r3, [sp, #16]
 8012ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012eea:	9308      	str	r3, [sp, #32]
 8012eec:	f8cd 901c 	str.w	r9, [sp, #28]
 8012ef0:	464f      	mov	r7, r9
 8012ef2:	220a      	movs	r2, #10
 8012ef4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012ef6:	7806      	ldrb	r6, [r0, #0]
 8012ef8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012efc:	b2d9      	uxtb	r1, r3
 8012efe:	2909      	cmp	r1, #9
 8012f00:	d92a      	bls.n	8012f58 <_strtod_l+0x1b8>
 8012f02:	9905      	ldr	r1, [sp, #20]
 8012f04:	462a      	mov	r2, r5
 8012f06:	f004 f8fb 	bl	8017100 <strncmp>
 8012f0a:	b398      	cbz	r0, 8012f74 <_strtod_l+0x1d4>
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	4632      	mov	r2, r6
 8012f10:	463d      	mov	r5, r7
 8012f12:	9005      	str	r0, [sp, #20]
 8012f14:	4603      	mov	r3, r0
 8012f16:	2a65      	cmp	r2, #101	; 0x65
 8012f18:	d001      	beq.n	8012f1e <_strtod_l+0x17e>
 8012f1a:	2a45      	cmp	r2, #69	; 0x45
 8012f1c:	d118      	bne.n	8012f50 <_strtod_l+0x1b0>
 8012f1e:	b91d      	cbnz	r5, 8012f28 <_strtod_l+0x188>
 8012f20:	9a04      	ldr	r2, [sp, #16]
 8012f22:	4302      	orrs	r2, r0
 8012f24:	d09e      	beq.n	8012e64 <_strtod_l+0xc4>
 8012f26:	2500      	movs	r5, #0
 8012f28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012f2c:	f108 0201 	add.w	r2, r8, #1
 8012f30:	9217      	str	r2, [sp, #92]	; 0x5c
 8012f32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012f36:	2a2b      	cmp	r2, #43	; 0x2b
 8012f38:	d075      	beq.n	8013026 <_strtod_l+0x286>
 8012f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8012f3c:	d07b      	beq.n	8013036 <_strtod_l+0x296>
 8012f3e:	f04f 0c00 	mov.w	ip, #0
 8012f42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012f46:	2909      	cmp	r1, #9
 8012f48:	f240 8082 	bls.w	8013050 <_strtod_l+0x2b0>
 8012f4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012f50:	2600      	movs	r6, #0
 8012f52:	e09d      	b.n	8013090 <_strtod_l+0x2f0>
 8012f54:	2300      	movs	r3, #0
 8012f56:	e7c4      	b.n	8012ee2 <_strtod_l+0x142>
 8012f58:	2f08      	cmp	r7, #8
 8012f5a:	bfd8      	it	le
 8012f5c:	9907      	ldrle	r1, [sp, #28]
 8012f5e:	f100 0001 	add.w	r0, r0, #1
 8012f62:	bfda      	itte	le
 8012f64:	fb02 3301 	mlale	r3, r2, r1, r3
 8012f68:	9307      	strle	r3, [sp, #28]
 8012f6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012f6e:	3701      	adds	r7, #1
 8012f70:	9017      	str	r0, [sp, #92]	; 0x5c
 8012f72:	e7bf      	b.n	8012ef4 <_strtod_l+0x154>
 8012f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f76:	195a      	adds	r2, r3, r5
 8012f78:	9217      	str	r2, [sp, #92]	; 0x5c
 8012f7a:	5d5a      	ldrb	r2, [r3, r5]
 8012f7c:	2f00      	cmp	r7, #0
 8012f7e:	d037      	beq.n	8012ff0 <_strtod_l+0x250>
 8012f80:	9005      	str	r0, [sp, #20]
 8012f82:	463d      	mov	r5, r7
 8012f84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012f88:	2b09      	cmp	r3, #9
 8012f8a:	d912      	bls.n	8012fb2 <_strtod_l+0x212>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e7c2      	b.n	8012f16 <_strtod_l+0x176>
 8012f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f92:	1c5a      	adds	r2, r3, #1
 8012f94:	9217      	str	r2, [sp, #92]	; 0x5c
 8012f96:	785a      	ldrb	r2, [r3, #1]
 8012f98:	3001      	adds	r0, #1
 8012f9a:	2a30      	cmp	r2, #48	; 0x30
 8012f9c:	d0f8      	beq.n	8012f90 <_strtod_l+0x1f0>
 8012f9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012fa2:	2b08      	cmp	r3, #8
 8012fa4:	f200 84d9 	bhi.w	801395a <_strtod_l+0xbba>
 8012fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012faa:	9005      	str	r0, [sp, #20]
 8012fac:	2000      	movs	r0, #0
 8012fae:	9308      	str	r3, [sp, #32]
 8012fb0:	4605      	mov	r5, r0
 8012fb2:	3a30      	subs	r2, #48	; 0x30
 8012fb4:	f100 0301 	add.w	r3, r0, #1
 8012fb8:	d014      	beq.n	8012fe4 <_strtod_l+0x244>
 8012fba:	9905      	ldr	r1, [sp, #20]
 8012fbc:	4419      	add	r1, r3
 8012fbe:	9105      	str	r1, [sp, #20]
 8012fc0:	462b      	mov	r3, r5
 8012fc2:	eb00 0e05 	add.w	lr, r0, r5
 8012fc6:	210a      	movs	r1, #10
 8012fc8:	4573      	cmp	r3, lr
 8012fca:	d113      	bne.n	8012ff4 <_strtod_l+0x254>
 8012fcc:	182b      	adds	r3, r5, r0
 8012fce:	2b08      	cmp	r3, #8
 8012fd0:	f105 0501 	add.w	r5, r5, #1
 8012fd4:	4405      	add	r5, r0
 8012fd6:	dc1c      	bgt.n	8013012 <_strtod_l+0x272>
 8012fd8:	9907      	ldr	r1, [sp, #28]
 8012fda:	230a      	movs	r3, #10
 8012fdc:	fb03 2301 	mla	r3, r3, r1, r2
 8012fe0:	9307      	str	r3, [sp, #28]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012fe6:	1c51      	adds	r1, r2, #1
 8012fe8:	9117      	str	r1, [sp, #92]	; 0x5c
 8012fea:	7852      	ldrb	r2, [r2, #1]
 8012fec:	4618      	mov	r0, r3
 8012fee:	e7c9      	b.n	8012f84 <_strtod_l+0x1e4>
 8012ff0:	4638      	mov	r0, r7
 8012ff2:	e7d2      	b.n	8012f9a <_strtod_l+0x1fa>
 8012ff4:	2b08      	cmp	r3, #8
 8012ff6:	dc04      	bgt.n	8013002 <_strtod_l+0x262>
 8012ff8:	9e07      	ldr	r6, [sp, #28]
 8012ffa:	434e      	muls	r6, r1
 8012ffc:	9607      	str	r6, [sp, #28]
 8012ffe:	3301      	adds	r3, #1
 8013000:	e7e2      	b.n	8012fc8 <_strtod_l+0x228>
 8013002:	f103 0c01 	add.w	ip, r3, #1
 8013006:	f1bc 0f10 	cmp.w	ip, #16
 801300a:	bfd8      	it	le
 801300c:	fb01 f909 	mulle.w	r9, r1, r9
 8013010:	e7f5      	b.n	8012ffe <_strtod_l+0x25e>
 8013012:	2d10      	cmp	r5, #16
 8013014:	bfdc      	itt	le
 8013016:	230a      	movle	r3, #10
 8013018:	fb03 2909 	mlale	r9, r3, r9, r2
 801301c:	e7e1      	b.n	8012fe2 <_strtod_l+0x242>
 801301e:	2300      	movs	r3, #0
 8013020:	9305      	str	r3, [sp, #20]
 8013022:	2301      	movs	r3, #1
 8013024:	e77c      	b.n	8012f20 <_strtod_l+0x180>
 8013026:	f04f 0c00 	mov.w	ip, #0
 801302a:	f108 0202 	add.w	r2, r8, #2
 801302e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013030:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013034:	e785      	b.n	8012f42 <_strtod_l+0x1a2>
 8013036:	f04f 0c01 	mov.w	ip, #1
 801303a:	e7f6      	b.n	801302a <_strtod_l+0x28a>
 801303c:	08048e24 	.word	0x08048e24
 8013040:	080488cc 	.word	0x080488cc
 8013044:	7ff00000 	.word	0x7ff00000
 8013048:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801304a:	1c51      	adds	r1, r2, #1
 801304c:	9117      	str	r1, [sp, #92]	; 0x5c
 801304e:	7852      	ldrb	r2, [r2, #1]
 8013050:	2a30      	cmp	r2, #48	; 0x30
 8013052:	d0f9      	beq.n	8013048 <_strtod_l+0x2a8>
 8013054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013058:	2908      	cmp	r1, #8
 801305a:	f63f af79 	bhi.w	8012f50 <_strtod_l+0x1b0>
 801305e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013064:	9206      	str	r2, [sp, #24]
 8013066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013068:	1c51      	adds	r1, r2, #1
 801306a:	9117      	str	r1, [sp, #92]	; 0x5c
 801306c:	7852      	ldrb	r2, [r2, #1]
 801306e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013072:	2e09      	cmp	r6, #9
 8013074:	d937      	bls.n	80130e6 <_strtod_l+0x346>
 8013076:	9e06      	ldr	r6, [sp, #24]
 8013078:	1b89      	subs	r1, r1, r6
 801307a:	2908      	cmp	r1, #8
 801307c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013080:	dc02      	bgt.n	8013088 <_strtod_l+0x2e8>
 8013082:	4576      	cmp	r6, lr
 8013084:	bfa8      	it	ge
 8013086:	4676      	movge	r6, lr
 8013088:	f1bc 0f00 	cmp.w	ip, #0
 801308c:	d000      	beq.n	8013090 <_strtod_l+0x2f0>
 801308e:	4276      	negs	r6, r6
 8013090:	2d00      	cmp	r5, #0
 8013092:	d14d      	bne.n	8013130 <_strtod_l+0x390>
 8013094:	9904      	ldr	r1, [sp, #16]
 8013096:	4301      	orrs	r1, r0
 8013098:	f47f aec6 	bne.w	8012e28 <_strtod_l+0x88>
 801309c:	2b00      	cmp	r3, #0
 801309e:	f47f aee1 	bne.w	8012e64 <_strtod_l+0xc4>
 80130a2:	2a69      	cmp	r2, #105	; 0x69
 80130a4:	d027      	beq.n	80130f6 <_strtod_l+0x356>
 80130a6:	dc24      	bgt.n	80130f2 <_strtod_l+0x352>
 80130a8:	2a49      	cmp	r2, #73	; 0x49
 80130aa:	d024      	beq.n	80130f6 <_strtod_l+0x356>
 80130ac:	2a4e      	cmp	r2, #78	; 0x4e
 80130ae:	f47f aed9 	bne.w	8012e64 <_strtod_l+0xc4>
 80130b2:	499f      	ldr	r1, [pc, #636]	; (8013330 <_strtod_l+0x590>)
 80130b4:	a817      	add	r0, sp, #92	; 0x5c
 80130b6:	f002 fc1b 	bl	80158f0 <__match>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	f43f aed2 	beq.w	8012e64 <_strtod_l+0xc4>
 80130c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	2b28      	cmp	r3, #40	; 0x28
 80130c6:	d12d      	bne.n	8013124 <_strtod_l+0x384>
 80130c8:	499a      	ldr	r1, [pc, #616]	; (8013334 <_strtod_l+0x594>)
 80130ca:	aa1a      	add	r2, sp, #104	; 0x68
 80130cc:	a817      	add	r0, sp, #92	; 0x5c
 80130ce:	f002 fc23 	bl	8015918 <__hexnan>
 80130d2:	2805      	cmp	r0, #5
 80130d4:	d126      	bne.n	8013124 <_strtod_l+0x384>
 80130d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80130dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80130e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80130e4:	e6a0      	b.n	8012e28 <_strtod_l+0x88>
 80130e6:	210a      	movs	r1, #10
 80130e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80130ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80130f0:	e7b9      	b.n	8013066 <_strtod_l+0x2c6>
 80130f2:	2a6e      	cmp	r2, #110	; 0x6e
 80130f4:	e7db      	b.n	80130ae <_strtod_l+0x30e>
 80130f6:	4990      	ldr	r1, [pc, #576]	; (8013338 <_strtod_l+0x598>)
 80130f8:	a817      	add	r0, sp, #92	; 0x5c
 80130fa:	f002 fbf9 	bl	80158f0 <__match>
 80130fe:	2800      	cmp	r0, #0
 8013100:	f43f aeb0 	beq.w	8012e64 <_strtod_l+0xc4>
 8013104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013106:	498d      	ldr	r1, [pc, #564]	; (801333c <_strtod_l+0x59c>)
 8013108:	3b01      	subs	r3, #1
 801310a:	a817      	add	r0, sp, #92	; 0x5c
 801310c:	9317      	str	r3, [sp, #92]	; 0x5c
 801310e:	f002 fbef 	bl	80158f0 <__match>
 8013112:	b910      	cbnz	r0, 801311a <_strtod_l+0x37a>
 8013114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013116:	3301      	adds	r3, #1
 8013118:	9317      	str	r3, [sp, #92]	; 0x5c
 801311a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801334c <_strtod_l+0x5ac>
 801311e:	f04f 0a00 	mov.w	sl, #0
 8013122:	e681      	b.n	8012e28 <_strtod_l+0x88>
 8013124:	4886      	ldr	r0, [pc, #536]	; (8013340 <_strtod_l+0x5a0>)
 8013126:	f003 ff33 	bl	8016f90 <nan>
 801312a:	ec5b ab10 	vmov	sl, fp, d0
 801312e:	e67b      	b.n	8012e28 <_strtod_l+0x88>
 8013130:	9b05      	ldr	r3, [sp, #20]
 8013132:	9807      	ldr	r0, [sp, #28]
 8013134:	1af3      	subs	r3, r6, r3
 8013136:	2f00      	cmp	r7, #0
 8013138:	bf08      	it	eq
 801313a:	462f      	moveq	r7, r5
 801313c:	2d10      	cmp	r5, #16
 801313e:	9306      	str	r3, [sp, #24]
 8013140:	46a8      	mov	r8, r5
 8013142:	bfa8      	it	ge
 8013144:	f04f 0810 	movge.w	r8, #16
 8013148:	f7ed f9fc 	bl	8000544 <__aeabi_ui2d>
 801314c:	2d09      	cmp	r5, #9
 801314e:	4682      	mov	sl, r0
 8013150:	468b      	mov	fp, r1
 8013152:	dd13      	ble.n	801317c <_strtod_l+0x3dc>
 8013154:	4b7b      	ldr	r3, [pc, #492]	; (8013344 <_strtod_l+0x5a4>)
 8013156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801315a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801315e:	f7ed fa6b 	bl	8000638 <__aeabi_dmul>
 8013162:	4682      	mov	sl, r0
 8013164:	4648      	mov	r0, r9
 8013166:	468b      	mov	fp, r1
 8013168:	f7ed f9ec 	bl	8000544 <__aeabi_ui2d>
 801316c:	4602      	mov	r2, r0
 801316e:	460b      	mov	r3, r1
 8013170:	4650      	mov	r0, sl
 8013172:	4659      	mov	r1, fp
 8013174:	f7ed f8aa 	bl	80002cc <__adddf3>
 8013178:	4682      	mov	sl, r0
 801317a:	468b      	mov	fp, r1
 801317c:	2d0f      	cmp	r5, #15
 801317e:	dc38      	bgt.n	80131f2 <_strtod_l+0x452>
 8013180:	9b06      	ldr	r3, [sp, #24]
 8013182:	2b00      	cmp	r3, #0
 8013184:	f43f ae50 	beq.w	8012e28 <_strtod_l+0x88>
 8013188:	dd24      	ble.n	80131d4 <_strtod_l+0x434>
 801318a:	2b16      	cmp	r3, #22
 801318c:	dc0b      	bgt.n	80131a6 <_strtod_l+0x406>
 801318e:	496d      	ldr	r1, [pc, #436]	; (8013344 <_strtod_l+0x5a4>)
 8013190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013198:	4652      	mov	r2, sl
 801319a:	465b      	mov	r3, fp
 801319c:	f7ed fa4c 	bl	8000638 <__aeabi_dmul>
 80131a0:	4682      	mov	sl, r0
 80131a2:	468b      	mov	fp, r1
 80131a4:	e640      	b.n	8012e28 <_strtod_l+0x88>
 80131a6:	9a06      	ldr	r2, [sp, #24]
 80131a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80131ac:	4293      	cmp	r3, r2
 80131ae:	db20      	blt.n	80131f2 <_strtod_l+0x452>
 80131b0:	4c64      	ldr	r4, [pc, #400]	; (8013344 <_strtod_l+0x5a4>)
 80131b2:	f1c5 050f 	rsb	r5, r5, #15
 80131b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80131ba:	4652      	mov	r2, sl
 80131bc:	465b      	mov	r3, fp
 80131be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131c2:	f7ed fa39 	bl	8000638 <__aeabi_dmul>
 80131c6:	9b06      	ldr	r3, [sp, #24]
 80131c8:	1b5d      	subs	r5, r3, r5
 80131ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80131ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80131d2:	e7e3      	b.n	801319c <_strtod_l+0x3fc>
 80131d4:	9b06      	ldr	r3, [sp, #24]
 80131d6:	3316      	adds	r3, #22
 80131d8:	db0b      	blt.n	80131f2 <_strtod_l+0x452>
 80131da:	9b05      	ldr	r3, [sp, #20]
 80131dc:	1b9e      	subs	r6, r3, r6
 80131de:	4b59      	ldr	r3, [pc, #356]	; (8013344 <_strtod_l+0x5a4>)
 80131e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80131e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80131e8:	4650      	mov	r0, sl
 80131ea:	4659      	mov	r1, fp
 80131ec:	f7ed fb4e 	bl	800088c <__aeabi_ddiv>
 80131f0:	e7d6      	b.n	80131a0 <_strtod_l+0x400>
 80131f2:	9b06      	ldr	r3, [sp, #24]
 80131f4:	eba5 0808 	sub.w	r8, r5, r8
 80131f8:	4498      	add	r8, r3
 80131fa:	f1b8 0f00 	cmp.w	r8, #0
 80131fe:	dd74      	ble.n	80132ea <_strtod_l+0x54a>
 8013200:	f018 030f 	ands.w	r3, r8, #15
 8013204:	d00a      	beq.n	801321c <_strtod_l+0x47c>
 8013206:	494f      	ldr	r1, [pc, #316]	; (8013344 <_strtod_l+0x5a4>)
 8013208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801320c:	4652      	mov	r2, sl
 801320e:	465b      	mov	r3, fp
 8013210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013214:	f7ed fa10 	bl	8000638 <__aeabi_dmul>
 8013218:	4682      	mov	sl, r0
 801321a:	468b      	mov	fp, r1
 801321c:	f038 080f 	bics.w	r8, r8, #15
 8013220:	d04f      	beq.n	80132c2 <_strtod_l+0x522>
 8013222:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013226:	dd22      	ble.n	801326e <_strtod_l+0x4ce>
 8013228:	2500      	movs	r5, #0
 801322a:	462e      	mov	r6, r5
 801322c:	9507      	str	r5, [sp, #28]
 801322e:	9505      	str	r5, [sp, #20]
 8013230:	2322      	movs	r3, #34	; 0x22
 8013232:	f8df b118 	ldr.w	fp, [pc, #280]	; 801334c <_strtod_l+0x5ac>
 8013236:	6023      	str	r3, [r4, #0]
 8013238:	f04f 0a00 	mov.w	sl, #0
 801323c:	9b07      	ldr	r3, [sp, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f43f adf2 	beq.w	8012e28 <_strtod_l+0x88>
 8013244:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013246:	4620      	mov	r0, r4
 8013248:	f002 fd48 	bl	8015cdc <_Bfree>
 801324c:	9905      	ldr	r1, [sp, #20]
 801324e:	4620      	mov	r0, r4
 8013250:	f002 fd44 	bl	8015cdc <_Bfree>
 8013254:	4631      	mov	r1, r6
 8013256:	4620      	mov	r0, r4
 8013258:	f002 fd40 	bl	8015cdc <_Bfree>
 801325c:	9907      	ldr	r1, [sp, #28]
 801325e:	4620      	mov	r0, r4
 8013260:	f002 fd3c 	bl	8015cdc <_Bfree>
 8013264:	4629      	mov	r1, r5
 8013266:	4620      	mov	r0, r4
 8013268:	f002 fd38 	bl	8015cdc <_Bfree>
 801326c:	e5dc      	b.n	8012e28 <_strtod_l+0x88>
 801326e:	4b36      	ldr	r3, [pc, #216]	; (8013348 <_strtod_l+0x5a8>)
 8013270:	9304      	str	r3, [sp, #16]
 8013272:	2300      	movs	r3, #0
 8013274:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013278:	4650      	mov	r0, sl
 801327a:	4659      	mov	r1, fp
 801327c:	4699      	mov	r9, r3
 801327e:	f1b8 0f01 	cmp.w	r8, #1
 8013282:	dc21      	bgt.n	80132c8 <_strtod_l+0x528>
 8013284:	b10b      	cbz	r3, 801328a <_strtod_l+0x4ea>
 8013286:	4682      	mov	sl, r0
 8013288:	468b      	mov	fp, r1
 801328a:	4b2f      	ldr	r3, [pc, #188]	; (8013348 <_strtod_l+0x5a8>)
 801328c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013290:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013294:	4652      	mov	r2, sl
 8013296:	465b      	mov	r3, fp
 8013298:	e9d9 0100 	ldrd	r0, r1, [r9]
 801329c:	f7ed f9cc 	bl	8000638 <__aeabi_dmul>
 80132a0:	4b2a      	ldr	r3, [pc, #168]	; (801334c <_strtod_l+0x5ac>)
 80132a2:	460a      	mov	r2, r1
 80132a4:	400b      	ands	r3, r1
 80132a6:	492a      	ldr	r1, [pc, #168]	; (8013350 <_strtod_l+0x5b0>)
 80132a8:	428b      	cmp	r3, r1
 80132aa:	4682      	mov	sl, r0
 80132ac:	d8bc      	bhi.n	8013228 <_strtod_l+0x488>
 80132ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80132b2:	428b      	cmp	r3, r1
 80132b4:	bf86      	itte	hi
 80132b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013354 <_strtod_l+0x5b4>
 80132ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80132be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80132c2:	2300      	movs	r3, #0
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	e084      	b.n	80133d2 <_strtod_l+0x632>
 80132c8:	f018 0f01 	tst.w	r8, #1
 80132cc:	d005      	beq.n	80132da <_strtod_l+0x53a>
 80132ce:	9b04      	ldr	r3, [sp, #16]
 80132d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d4:	f7ed f9b0 	bl	8000638 <__aeabi_dmul>
 80132d8:	2301      	movs	r3, #1
 80132da:	9a04      	ldr	r2, [sp, #16]
 80132dc:	3208      	adds	r2, #8
 80132de:	f109 0901 	add.w	r9, r9, #1
 80132e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80132e6:	9204      	str	r2, [sp, #16]
 80132e8:	e7c9      	b.n	801327e <_strtod_l+0x4de>
 80132ea:	d0ea      	beq.n	80132c2 <_strtod_l+0x522>
 80132ec:	f1c8 0800 	rsb	r8, r8, #0
 80132f0:	f018 020f 	ands.w	r2, r8, #15
 80132f4:	d00a      	beq.n	801330c <_strtod_l+0x56c>
 80132f6:	4b13      	ldr	r3, [pc, #76]	; (8013344 <_strtod_l+0x5a4>)
 80132f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132fc:	4650      	mov	r0, sl
 80132fe:	4659      	mov	r1, fp
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	f7ed fac2 	bl	800088c <__aeabi_ddiv>
 8013308:	4682      	mov	sl, r0
 801330a:	468b      	mov	fp, r1
 801330c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013310:	d0d7      	beq.n	80132c2 <_strtod_l+0x522>
 8013312:	f1b8 0f1f 	cmp.w	r8, #31
 8013316:	dd1f      	ble.n	8013358 <_strtod_l+0x5b8>
 8013318:	2500      	movs	r5, #0
 801331a:	462e      	mov	r6, r5
 801331c:	9507      	str	r5, [sp, #28]
 801331e:	9505      	str	r5, [sp, #20]
 8013320:	2322      	movs	r3, #34	; 0x22
 8013322:	f04f 0a00 	mov.w	sl, #0
 8013326:	f04f 0b00 	mov.w	fp, #0
 801332a:	6023      	str	r3, [r4, #0]
 801332c:	e786      	b.n	801323c <_strtod_l+0x49c>
 801332e:	bf00      	nop
 8013330:	0804897e 	.word	0x0804897e
 8013334:	080488e0 	.word	0x080488e0
 8013338:	08048846 	.word	0x08048846
 801333c:	08048ce4 	.word	0x08048ce4
 8013340:	08048756 	.word	0x08048756
 8013344:	08048f20 	.word	0x08048f20
 8013348:	08048ef8 	.word	0x08048ef8
 801334c:	7ff00000 	.word	0x7ff00000
 8013350:	7ca00000 	.word	0x7ca00000
 8013354:	7fefffff 	.word	0x7fefffff
 8013358:	f018 0310 	ands.w	r3, r8, #16
 801335c:	bf18      	it	ne
 801335e:	236a      	movne	r3, #106	; 0x6a
 8013360:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013710 <_strtod_l+0x970>
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	4650      	mov	r0, sl
 8013368:	4659      	mov	r1, fp
 801336a:	2300      	movs	r3, #0
 801336c:	f018 0f01 	tst.w	r8, #1
 8013370:	d004      	beq.n	801337c <_strtod_l+0x5dc>
 8013372:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013376:	f7ed f95f 	bl	8000638 <__aeabi_dmul>
 801337a:	2301      	movs	r3, #1
 801337c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013380:	f109 0908 	add.w	r9, r9, #8
 8013384:	d1f2      	bne.n	801336c <_strtod_l+0x5cc>
 8013386:	b10b      	cbz	r3, 801338c <_strtod_l+0x5ec>
 8013388:	4682      	mov	sl, r0
 801338a:	468b      	mov	fp, r1
 801338c:	9b04      	ldr	r3, [sp, #16]
 801338e:	b1c3      	cbz	r3, 80133c2 <_strtod_l+0x622>
 8013390:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013398:	2b00      	cmp	r3, #0
 801339a:	4659      	mov	r1, fp
 801339c:	dd11      	ble.n	80133c2 <_strtod_l+0x622>
 801339e:	2b1f      	cmp	r3, #31
 80133a0:	f340 8124 	ble.w	80135ec <_strtod_l+0x84c>
 80133a4:	2b34      	cmp	r3, #52	; 0x34
 80133a6:	bfde      	ittt	le
 80133a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80133ac:	f04f 33ff 	movle.w	r3, #4294967295
 80133b0:	fa03 f202 	lslle.w	r2, r3, r2
 80133b4:	f04f 0a00 	mov.w	sl, #0
 80133b8:	bfcc      	ite	gt
 80133ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80133be:	ea02 0b01 	andle.w	fp, r2, r1
 80133c2:	2200      	movs	r2, #0
 80133c4:	2300      	movs	r3, #0
 80133c6:	4650      	mov	r0, sl
 80133c8:	4659      	mov	r1, fp
 80133ca:	f7ed fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d1a2      	bne.n	8013318 <_strtod_l+0x578>
 80133d2:	9b07      	ldr	r3, [sp, #28]
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	9908      	ldr	r1, [sp, #32]
 80133d8:	462b      	mov	r3, r5
 80133da:	463a      	mov	r2, r7
 80133dc:	4620      	mov	r0, r4
 80133de:	f002 fce5 	bl	8015dac <__s2b>
 80133e2:	9007      	str	r0, [sp, #28]
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f43f af1f 	beq.w	8013228 <_strtod_l+0x488>
 80133ea:	9b05      	ldr	r3, [sp, #20]
 80133ec:	1b9e      	subs	r6, r3, r6
 80133ee:	9b06      	ldr	r3, [sp, #24]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	bfb4      	ite	lt
 80133f4:	4633      	movlt	r3, r6
 80133f6:	2300      	movge	r3, #0
 80133f8:	930c      	str	r3, [sp, #48]	; 0x30
 80133fa:	9b06      	ldr	r3, [sp, #24]
 80133fc:	2500      	movs	r5, #0
 80133fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013402:	9312      	str	r3, [sp, #72]	; 0x48
 8013404:	462e      	mov	r6, r5
 8013406:	9b07      	ldr	r3, [sp, #28]
 8013408:	4620      	mov	r0, r4
 801340a:	6859      	ldr	r1, [r3, #4]
 801340c:	f002 fc26 	bl	8015c5c <_Balloc>
 8013410:	9005      	str	r0, [sp, #20]
 8013412:	2800      	cmp	r0, #0
 8013414:	f43f af0c 	beq.w	8013230 <_strtod_l+0x490>
 8013418:	9b07      	ldr	r3, [sp, #28]
 801341a:	691a      	ldr	r2, [r3, #16]
 801341c:	3202      	adds	r2, #2
 801341e:	f103 010c 	add.w	r1, r3, #12
 8013422:	0092      	lsls	r2, r2, #2
 8013424:	300c      	adds	r0, #12
 8013426:	f7fd fd31 	bl	8010e8c <memcpy>
 801342a:	ec4b ab10 	vmov	d0, sl, fp
 801342e:	aa1a      	add	r2, sp, #104	; 0x68
 8013430:	a919      	add	r1, sp, #100	; 0x64
 8013432:	4620      	mov	r0, r4
 8013434:	f003 f800 	bl	8016438 <__d2b>
 8013438:	ec4b ab18 	vmov	d8, sl, fp
 801343c:	9018      	str	r0, [sp, #96]	; 0x60
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f aef6 	beq.w	8013230 <_strtod_l+0x490>
 8013444:	2101      	movs	r1, #1
 8013446:	4620      	mov	r0, r4
 8013448:	f002 fd4a 	bl	8015ee0 <__i2b>
 801344c:	4606      	mov	r6, r0
 801344e:	2800      	cmp	r0, #0
 8013450:	f43f aeee 	beq.w	8013230 <_strtod_l+0x490>
 8013454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013456:	9904      	ldr	r1, [sp, #16]
 8013458:	2b00      	cmp	r3, #0
 801345a:	bfab      	itete	ge
 801345c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801345e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013462:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013466:	bfac      	ite	ge
 8013468:	eb03 0902 	addge.w	r9, r3, r2
 801346c:	1ad7      	sublt	r7, r2, r3
 801346e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013470:	eba3 0801 	sub.w	r8, r3, r1
 8013474:	4490      	add	r8, r2
 8013476:	4ba1      	ldr	r3, [pc, #644]	; (80136fc <_strtod_l+0x95c>)
 8013478:	f108 38ff 	add.w	r8, r8, #4294967295
 801347c:	4598      	cmp	r8, r3
 801347e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013482:	f280 80c7 	bge.w	8013614 <_strtod_l+0x874>
 8013486:	eba3 0308 	sub.w	r3, r3, r8
 801348a:	2b1f      	cmp	r3, #31
 801348c:	eba2 0203 	sub.w	r2, r2, r3
 8013490:	f04f 0101 	mov.w	r1, #1
 8013494:	f300 80b1 	bgt.w	80135fa <_strtod_l+0x85a>
 8013498:	fa01 f303 	lsl.w	r3, r1, r3
 801349c:	930d      	str	r3, [sp, #52]	; 0x34
 801349e:	2300      	movs	r3, #0
 80134a0:	9308      	str	r3, [sp, #32]
 80134a2:	eb09 0802 	add.w	r8, r9, r2
 80134a6:	9b04      	ldr	r3, [sp, #16]
 80134a8:	45c1      	cmp	r9, r8
 80134aa:	4417      	add	r7, r2
 80134ac:	441f      	add	r7, r3
 80134ae:	464b      	mov	r3, r9
 80134b0:	bfa8      	it	ge
 80134b2:	4643      	movge	r3, r8
 80134b4:	42bb      	cmp	r3, r7
 80134b6:	bfa8      	it	ge
 80134b8:	463b      	movge	r3, r7
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	bfc2      	ittt	gt
 80134be:	eba8 0803 	subgt.w	r8, r8, r3
 80134c2:	1aff      	subgt	r7, r7, r3
 80134c4:	eba9 0903 	subgt.w	r9, r9, r3
 80134c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	dd17      	ble.n	80134fe <_strtod_l+0x75e>
 80134ce:	4631      	mov	r1, r6
 80134d0:	461a      	mov	r2, r3
 80134d2:	4620      	mov	r0, r4
 80134d4:	f002 fdc4 	bl	8016060 <__pow5mult>
 80134d8:	4606      	mov	r6, r0
 80134da:	2800      	cmp	r0, #0
 80134dc:	f43f aea8 	beq.w	8013230 <_strtod_l+0x490>
 80134e0:	4601      	mov	r1, r0
 80134e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80134e4:	4620      	mov	r0, r4
 80134e6:	f002 fd11 	bl	8015f0c <__multiply>
 80134ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80134ec:	2800      	cmp	r0, #0
 80134ee:	f43f ae9f 	beq.w	8013230 <_strtod_l+0x490>
 80134f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80134f4:	4620      	mov	r0, r4
 80134f6:	f002 fbf1 	bl	8015cdc <_Bfree>
 80134fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134fc:	9318      	str	r3, [sp, #96]	; 0x60
 80134fe:	f1b8 0f00 	cmp.w	r8, #0
 8013502:	f300 808c 	bgt.w	801361e <_strtod_l+0x87e>
 8013506:	9b06      	ldr	r3, [sp, #24]
 8013508:	2b00      	cmp	r3, #0
 801350a:	dd08      	ble.n	801351e <_strtod_l+0x77e>
 801350c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801350e:	9905      	ldr	r1, [sp, #20]
 8013510:	4620      	mov	r0, r4
 8013512:	f002 fda5 	bl	8016060 <__pow5mult>
 8013516:	9005      	str	r0, [sp, #20]
 8013518:	2800      	cmp	r0, #0
 801351a:	f43f ae89 	beq.w	8013230 <_strtod_l+0x490>
 801351e:	2f00      	cmp	r7, #0
 8013520:	dd08      	ble.n	8013534 <_strtod_l+0x794>
 8013522:	9905      	ldr	r1, [sp, #20]
 8013524:	463a      	mov	r2, r7
 8013526:	4620      	mov	r0, r4
 8013528:	f002 fdf4 	bl	8016114 <__lshift>
 801352c:	9005      	str	r0, [sp, #20]
 801352e:	2800      	cmp	r0, #0
 8013530:	f43f ae7e 	beq.w	8013230 <_strtod_l+0x490>
 8013534:	f1b9 0f00 	cmp.w	r9, #0
 8013538:	dd08      	ble.n	801354c <_strtod_l+0x7ac>
 801353a:	4631      	mov	r1, r6
 801353c:	464a      	mov	r2, r9
 801353e:	4620      	mov	r0, r4
 8013540:	f002 fde8 	bl	8016114 <__lshift>
 8013544:	4606      	mov	r6, r0
 8013546:	2800      	cmp	r0, #0
 8013548:	f43f ae72 	beq.w	8013230 <_strtod_l+0x490>
 801354c:	9a05      	ldr	r2, [sp, #20]
 801354e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013550:	4620      	mov	r0, r4
 8013552:	f002 fe6b 	bl	801622c <__mdiff>
 8013556:	4605      	mov	r5, r0
 8013558:	2800      	cmp	r0, #0
 801355a:	f43f ae69 	beq.w	8013230 <_strtod_l+0x490>
 801355e:	68c3      	ldr	r3, [r0, #12]
 8013560:	930b      	str	r3, [sp, #44]	; 0x2c
 8013562:	2300      	movs	r3, #0
 8013564:	60c3      	str	r3, [r0, #12]
 8013566:	4631      	mov	r1, r6
 8013568:	f002 fe44 	bl	80161f4 <__mcmp>
 801356c:	2800      	cmp	r0, #0
 801356e:	da60      	bge.n	8013632 <_strtod_l+0x892>
 8013570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013572:	ea53 030a 	orrs.w	r3, r3, sl
 8013576:	f040 8082 	bne.w	801367e <_strtod_l+0x8de>
 801357a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801357e:	2b00      	cmp	r3, #0
 8013580:	d17d      	bne.n	801367e <_strtod_l+0x8de>
 8013582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013586:	0d1b      	lsrs	r3, r3, #20
 8013588:	051b      	lsls	r3, r3, #20
 801358a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801358e:	d976      	bls.n	801367e <_strtod_l+0x8de>
 8013590:	696b      	ldr	r3, [r5, #20]
 8013592:	b913      	cbnz	r3, 801359a <_strtod_l+0x7fa>
 8013594:	692b      	ldr	r3, [r5, #16]
 8013596:	2b01      	cmp	r3, #1
 8013598:	dd71      	ble.n	801367e <_strtod_l+0x8de>
 801359a:	4629      	mov	r1, r5
 801359c:	2201      	movs	r2, #1
 801359e:	4620      	mov	r0, r4
 80135a0:	f002 fdb8 	bl	8016114 <__lshift>
 80135a4:	4631      	mov	r1, r6
 80135a6:	4605      	mov	r5, r0
 80135a8:	f002 fe24 	bl	80161f4 <__mcmp>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	dd66      	ble.n	801367e <_strtod_l+0x8de>
 80135b0:	9904      	ldr	r1, [sp, #16]
 80135b2:	4a53      	ldr	r2, [pc, #332]	; (8013700 <_strtod_l+0x960>)
 80135b4:	465b      	mov	r3, fp
 80135b6:	2900      	cmp	r1, #0
 80135b8:	f000 8081 	beq.w	80136be <_strtod_l+0x91e>
 80135bc:	ea02 010b 	and.w	r1, r2, fp
 80135c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80135c4:	dc7b      	bgt.n	80136be <_strtod_l+0x91e>
 80135c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80135ca:	f77f aea9 	ble.w	8013320 <_strtod_l+0x580>
 80135ce:	4b4d      	ldr	r3, [pc, #308]	; (8013704 <_strtod_l+0x964>)
 80135d0:	4650      	mov	r0, sl
 80135d2:	4659      	mov	r1, fp
 80135d4:	2200      	movs	r2, #0
 80135d6:	f7ed f82f 	bl	8000638 <__aeabi_dmul>
 80135da:	460b      	mov	r3, r1
 80135dc:	4303      	orrs	r3, r0
 80135de:	bf08      	it	eq
 80135e0:	2322      	moveq	r3, #34	; 0x22
 80135e2:	4682      	mov	sl, r0
 80135e4:	468b      	mov	fp, r1
 80135e6:	bf08      	it	eq
 80135e8:	6023      	streq	r3, [r4, #0]
 80135ea:	e62b      	b.n	8013244 <_strtod_l+0x4a4>
 80135ec:	f04f 32ff 	mov.w	r2, #4294967295
 80135f0:	fa02 f303 	lsl.w	r3, r2, r3
 80135f4:	ea03 0a0a 	and.w	sl, r3, sl
 80135f8:	e6e3      	b.n	80133c2 <_strtod_l+0x622>
 80135fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80135fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013602:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013606:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801360a:	fa01 f308 	lsl.w	r3, r1, r8
 801360e:	9308      	str	r3, [sp, #32]
 8013610:	910d      	str	r1, [sp, #52]	; 0x34
 8013612:	e746      	b.n	80134a2 <_strtod_l+0x702>
 8013614:	2300      	movs	r3, #0
 8013616:	9308      	str	r3, [sp, #32]
 8013618:	2301      	movs	r3, #1
 801361a:	930d      	str	r3, [sp, #52]	; 0x34
 801361c:	e741      	b.n	80134a2 <_strtod_l+0x702>
 801361e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013620:	4642      	mov	r2, r8
 8013622:	4620      	mov	r0, r4
 8013624:	f002 fd76 	bl	8016114 <__lshift>
 8013628:	9018      	str	r0, [sp, #96]	; 0x60
 801362a:	2800      	cmp	r0, #0
 801362c:	f47f af6b 	bne.w	8013506 <_strtod_l+0x766>
 8013630:	e5fe      	b.n	8013230 <_strtod_l+0x490>
 8013632:	465f      	mov	r7, fp
 8013634:	d16e      	bne.n	8013714 <_strtod_l+0x974>
 8013636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801363c:	b342      	cbz	r2, 8013690 <_strtod_l+0x8f0>
 801363e:	4a32      	ldr	r2, [pc, #200]	; (8013708 <_strtod_l+0x968>)
 8013640:	4293      	cmp	r3, r2
 8013642:	d128      	bne.n	8013696 <_strtod_l+0x8f6>
 8013644:	9b04      	ldr	r3, [sp, #16]
 8013646:	4651      	mov	r1, sl
 8013648:	b1eb      	cbz	r3, 8013686 <_strtod_l+0x8e6>
 801364a:	4b2d      	ldr	r3, [pc, #180]	; (8013700 <_strtod_l+0x960>)
 801364c:	403b      	ands	r3, r7
 801364e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013652:	f04f 32ff 	mov.w	r2, #4294967295
 8013656:	d819      	bhi.n	801368c <_strtod_l+0x8ec>
 8013658:	0d1b      	lsrs	r3, r3, #20
 801365a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801365e:	fa02 f303 	lsl.w	r3, r2, r3
 8013662:	4299      	cmp	r1, r3
 8013664:	d117      	bne.n	8013696 <_strtod_l+0x8f6>
 8013666:	4b29      	ldr	r3, [pc, #164]	; (801370c <_strtod_l+0x96c>)
 8013668:	429f      	cmp	r7, r3
 801366a:	d102      	bne.n	8013672 <_strtod_l+0x8d2>
 801366c:	3101      	adds	r1, #1
 801366e:	f43f addf 	beq.w	8013230 <_strtod_l+0x490>
 8013672:	4b23      	ldr	r3, [pc, #140]	; (8013700 <_strtod_l+0x960>)
 8013674:	403b      	ands	r3, r7
 8013676:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801367a:	f04f 0a00 	mov.w	sl, #0
 801367e:	9b04      	ldr	r3, [sp, #16]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d1a4      	bne.n	80135ce <_strtod_l+0x82e>
 8013684:	e5de      	b.n	8013244 <_strtod_l+0x4a4>
 8013686:	f04f 33ff 	mov.w	r3, #4294967295
 801368a:	e7ea      	b.n	8013662 <_strtod_l+0x8c2>
 801368c:	4613      	mov	r3, r2
 801368e:	e7e8      	b.n	8013662 <_strtod_l+0x8c2>
 8013690:	ea53 030a 	orrs.w	r3, r3, sl
 8013694:	d08c      	beq.n	80135b0 <_strtod_l+0x810>
 8013696:	9b08      	ldr	r3, [sp, #32]
 8013698:	b1db      	cbz	r3, 80136d2 <_strtod_l+0x932>
 801369a:	423b      	tst	r3, r7
 801369c:	d0ef      	beq.n	801367e <_strtod_l+0x8de>
 801369e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136a0:	9a04      	ldr	r2, [sp, #16]
 80136a2:	4650      	mov	r0, sl
 80136a4:	4659      	mov	r1, fp
 80136a6:	b1c3      	cbz	r3, 80136da <_strtod_l+0x93a>
 80136a8:	f7ff fb5b 	bl	8012d62 <sulp>
 80136ac:	4602      	mov	r2, r0
 80136ae:	460b      	mov	r3, r1
 80136b0:	ec51 0b18 	vmov	r0, r1, d8
 80136b4:	f7ec fe0a 	bl	80002cc <__adddf3>
 80136b8:	4682      	mov	sl, r0
 80136ba:	468b      	mov	fp, r1
 80136bc:	e7df      	b.n	801367e <_strtod_l+0x8de>
 80136be:	4013      	ands	r3, r2
 80136c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80136c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80136c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80136cc:	f04f 3aff 	mov.w	sl, #4294967295
 80136d0:	e7d5      	b.n	801367e <_strtod_l+0x8de>
 80136d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136d4:	ea13 0f0a 	tst.w	r3, sl
 80136d8:	e7e0      	b.n	801369c <_strtod_l+0x8fc>
 80136da:	f7ff fb42 	bl	8012d62 <sulp>
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	ec51 0b18 	vmov	r0, r1, d8
 80136e6:	f7ec fdef 	bl	80002c8 <__aeabi_dsub>
 80136ea:	2200      	movs	r2, #0
 80136ec:	2300      	movs	r3, #0
 80136ee:	4682      	mov	sl, r0
 80136f0:	468b      	mov	fp, r1
 80136f2:	f7ed fa09 	bl	8000b08 <__aeabi_dcmpeq>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d0c1      	beq.n	801367e <_strtod_l+0x8de>
 80136fa:	e611      	b.n	8013320 <_strtod_l+0x580>
 80136fc:	fffffc02 	.word	0xfffffc02
 8013700:	7ff00000 	.word	0x7ff00000
 8013704:	39500000 	.word	0x39500000
 8013708:	000fffff 	.word	0x000fffff
 801370c:	7fefffff 	.word	0x7fefffff
 8013710:	080488f8 	.word	0x080488f8
 8013714:	4631      	mov	r1, r6
 8013716:	4628      	mov	r0, r5
 8013718:	f002 feea 	bl	80164f0 <__ratio>
 801371c:	ec59 8b10 	vmov	r8, r9, d0
 8013720:	ee10 0a10 	vmov	r0, s0
 8013724:	2200      	movs	r2, #0
 8013726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801372a:	4649      	mov	r1, r9
 801372c:	f7ed fa00 	bl	8000b30 <__aeabi_dcmple>
 8013730:	2800      	cmp	r0, #0
 8013732:	d07a      	beq.n	801382a <_strtod_l+0xa8a>
 8013734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013736:	2b00      	cmp	r3, #0
 8013738:	d04a      	beq.n	80137d0 <_strtod_l+0xa30>
 801373a:	4b95      	ldr	r3, [pc, #596]	; (8013990 <_strtod_l+0xbf0>)
 801373c:	2200      	movs	r2, #0
 801373e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013742:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013990 <_strtod_l+0xbf0>
 8013746:	f04f 0800 	mov.w	r8, #0
 801374a:	4b92      	ldr	r3, [pc, #584]	; (8013994 <_strtod_l+0xbf4>)
 801374c:	403b      	ands	r3, r7
 801374e:	930d      	str	r3, [sp, #52]	; 0x34
 8013750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013752:	4b91      	ldr	r3, [pc, #580]	; (8013998 <_strtod_l+0xbf8>)
 8013754:	429a      	cmp	r2, r3
 8013756:	f040 80b0 	bne.w	80138ba <_strtod_l+0xb1a>
 801375a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801375e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013762:	ec4b ab10 	vmov	d0, sl, fp
 8013766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801376a:	f002 fde9 	bl	8016340 <__ulp>
 801376e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013772:	ec53 2b10 	vmov	r2, r3, d0
 8013776:	f7ec ff5f 	bl	8000638 <__aeabi_dmul>
 801377a:	4652      	mov	r2, sl
 801377c:	465b      	mov	r3, fp
 801377e:	f7ec fda5 	bl	80002cc <__adddf3>
 8013782:	460b      	mov	r3, r1
 8013784:	4983      	ldr	r1, [pc, #524]	; (8013994 <_strtod_l+0xbf4>)
 8013786:	4a85      	ldr	r2, [pc, #532]	; (801399c <_strtod_l+0xbfc>)
 8013788:	4019      	ands	r1, r3
 801378a:	4291      	cmp	r1, r2
 801378c:	4682      	mov	sl, r0
 801378e:	d960      	bls.n	8013852 <_strtod_l+0xab2>
 8013790:	ee18 3a90 	vmov	r3, s17
 8013794:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013798:	4293      	cmp	r3, r2
 801379a:	d104      	bne.n	80137a6 <_strtod_l+0xa06>
 801379c:	ee18 3a10 	vmov	r3, s16
 80137a0:	3301      	adds	r3, #1
 80137a2:	f43f ad45 	beq.w	8013230 <_strtod_l+0x490>
 80137a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80139a8 <_strtod_l+0xc08>
 80137aa:	f04f 3aff 	mov.w	sl, #4294967295
 80137ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137b0:	4620      	mov	r0, r4
 80137b2:	f002 fa93 	bl	8015cdc <_Bfree>
 80137b6:	9905      	ldr	r1, [sp, #20]
 80137b8:	4620      	mov	r0, r4
 80137ba:	f002 fa8f 	bl	8015cdc <_Bfree>
 80137be:	4631      	mov	r1, r6
 80137c0:	4620      	mov	r0, r4
 80137c2:	f002 fa8b 	bl	8015cdc <_Bfree>
 80137c6:	4629      	mov	r1, r5
 80137c8:	4620      	mov	r0, r4
 80137ca:	f002 fa87 	bl	8015cdc <_Bfree>
 80137ce:	e61a      	b.n	8013406 <_strtod_l+0x666>
 80137d0:	f1ba 0f00 	cmp.w	sl, #0
 80137d4:	d11b      	bne.n	801380e <_strtod_l+0xa6e>
 80137d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137da:	b9f3      	cbnz	r3, 801381a <_strtod_l+0xa7a>
 80137dc:	4b6c      	ldr	r3, [pc, #432]	; (8013990 <_strtod_l+0xbf0>)
 80137de:	2200      	movs	r2, #0
 80137e0:	4640      	mov	r0, r8
 80137e2:	4649      	mov	r1, r9
 80137e4:	f7ed f99a 	bl	8000b1c <__aeabi_dcmplt>
 80137e8:	b9d0      	cbnz	r0, 8013820 <_strtod_l+0xa80>
 80137ea:	4640      	mov	r0, r8
 80137ec:	4649      	mov	r1, r9
 80137ee:	4b6c      	ldr	r3, [pc, #432]	; (80139a0 <_strtod_l+0xc00>)
 80137f0:	2200      	movs	r2, #0
 80137f2:	f7ec ff21 	bl	8000638 <__aeabi_dmul>
 80137f6:	4680      	mov	r8, r0
 80137f8:	4689      	mov	r9, r1
 80137fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80137fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013802:	9315      	str	r3, [sp, #84]	; 0x54
 8013804:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801380c:	e79d      	b.n	801374a <_strtod_l+0x9aa>
 801380e:	f1ba 0f01 	cmp.w	sl, #1
 8013812:	d102      	bne.n	801381a <_strtod_l+0xa7a>
 8013814:	2f00      	cmp	r7, #0
 8013816:	f43f ad83 	beq.w	8013320 <_strtod_l+0x580>
 801381a:	4b62      	ldr	r3, [pc, #392]	; (80139a4 <_strtod_l+0xc04>)
 801381c:	2200      	movs	r2, #0
 801381e:	e78e      	b.n	801373e <_strtod_l+0x99e>
 8013820:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80139a0 <_strtod_l+0xc00>
 8013824:	f04f 0800 	mov.w	r8, #0
 8013828:	e7e7      	b.n	80137fa <_strtod_l+0xa5a>
 801382a:	4b5d      	ldr	r3, [pc, #372]	; (80139a0 <_strtod_l+0xc00>)
 801382c:	4640      	mov	r0, r8
 801382e:	4649      	mov	r1, r9
 8013830:	2200      	movs	r2, #0
 8013832:	f7ec ff01 	bl	8000638 <__aeabi_dmul>
 8013836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013838:	4680      	mov	r8, r0
 801383a:	4689      	mov	r9, r1
 801383c:	b933      	cbnz	r3, 801384c <_strtod_l+0xaac>
 801383e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013842:	900e      	str	r0, [sp, #56]	; 0x38
 8013844:	930f      	str	r3, [sp, #60]	; 0x3c
 8013846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801384a:	e7dd      	b.n	8013808 <_strtod_l+0xa68>
 801384c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013850:	e7f9      	b.n	8013846 <_strtod_l+0xaa6>
 8013852:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013856:	9b04      	ldr	r3, [sp, #16]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1a8      	bne.n	80137ae <_strtod_l+0xa0e>
 801385c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013862:	0d1b      	lsrs	r3, r3, #20
 8013864:	051b      	lsls	r3, r3, #20
 8013866:	429a      	cmp	r2, r3
 8013868:	d1a1      	bne.n	80137ae <_strtod_l+0xa0e>
 801386a:	4640      	mov	r0, r8
 801386c:	4649      	mov	r1, r9
 801386e:	f7ed fa43 	bl	8000cf8 <__aeabi_d2lz>
 8013872:	f7ec feb3 	bl	80005dc <__aeabi_l2d>
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4640      	mov	r0, r8
 801387c:	4649      	mov	r1, r9
 801387e:	f7ec fd23 	bl	80002c8 <__aeabi_dsub>
 8013882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013888:	ea43 030a 	orr.w	r3, r3, sl
 801388c:	4313      	orrs	r3, r2
 801388e:	4680      	mov	r8, r0
 8013890:	4689      	mov	r9, r1
 8013892:	d055      	beq.n	8013940 <_strtod_l+0xba0>
 8013894:	a336      	add	r3, pc, #216	; (adr r3, 8013970 <_strtod_l+0xbd0>)
 8013896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389a:	f7ed f93f 	bl	8000b1c <__aeabi_dcmplt>
 801389e:	2800      	cmp	r0, #0
 80138a0:	f47f acd0 	bne.w	8013244 <_strtod_l+0x4a4>
 80138a4:	a334      	add	r3, pc, #208	; (adr r3, 8013978 <_strtod_l+0xbd8>)
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	4640      	mov	r0, r8
 80138ac:	4649      	mov	r1, r9
 80138ae:	f7ed f953 	bl	8000b58 <__aeabi_dcmpgt>
 80138b2:	2800      	cmp	r0, #0
 80138b4:	f43f af7b 	beq.w	80137ae <_strtod_l+0xa0e>
 80138b8:	e4c4      	b.n	8013244 <_strtod_l+0x4a4>
 80138ba:	9b04      	ldr	r3, [sp, #16]
 80138bc:	b333      	cbz	r3, 801390c <_strtod_l+0xb6c>
 80138be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80138c4:	d822      	bhi.n	801390c <_strtod_l+0xb6c>
 80138c6:	a32e      	add	r3, pc, #184	; (adr r3, 8013980 <_strtod_l+0xbe0>)
 80138c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138cc:	4640      	mov	r0, r8
 80138ce:	4649      	mov	r1, r9
 80138d0:	f7ed f92e 	bl	8000b30 <__aeabi_dcmple>
 80138d4:	b1a0      	cbz	r0, 8013900 <_strtod_l+0xb60>
 80138d6:	4649      	mov	r1, r9
 80138d8:	4640      	mov	r0, r8
 80138da:	f7ed f985 	bl	8000be8 <__aeabi_d2uiz>
 80138de:	2801      	cmp	r0, #1
 80138e0:	bf38      	it	cc
 80138e2:	2001      	movcc	r0, #1
 80138e4:	f7ec fe2e 	bl	8000544 <__aeabi_ui2d>
 80138e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138ea:	4680      	mov	r8, r0
 80138ec:	4689      	mov	r9, r1
 80138ee:	bb23      	cbnz	r3, 801393a <_strtod_l+0xb9a>
 80138f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138f4:	9010      	str	r0, [sp, #64]	; 0x40
 80138f6:	9311      	str	r3, [sp, #68]	; 0x44
 80138f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80138fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013904:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013908:	1a9b      	subs	r3, r3, r2
 801390a:	9309      	str	r3, [sp, #36]	; 0x24
 801390c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013910:	eeb0 0a48 	vmov.f32	s0, s16
 8013914:	eef0 0a68 	vmov.f32	s1, s17
 8013918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801391c:	f002 fd10 	bl	8016340 <__ulp>
 8013920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013924:	ec53 2b10 	vmov	r2, r3, d0
 8013928:	f7ec fe86 	bl	8000638 <__aeabi_dmul>
 801392c:	ec53 2b18 	vmov	r2, r3, d8
 8013930:	f7ec fccc 	bl	80002cc <__adddf3>
 8013934:	4682      	mov	sl, r0
 8013936:	468b      	mov	fp, r1
 8013938:	e78d      	b.n	8013856 <_strtod_l+0xab6>
 801393a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801393e:	e7db      	b.n	80138f8 <_strtod_l+0xb58>
 8013940:	a311      	add	r3, pc, #68	; (adr r3, 8013988 <_strtod_l+0xbe8>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	f7ed f8e9 	bl	8000b1c <__aeabi_dcmplt>
 801394a:	e7b2      	b.n	80138b2 <_strtod_l+0xb12>
 801394c:	2300      	movs	r3, #0
 801394e:	930a      	str	r3, [sp, #40]	; 0x28
 8013950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	f7ff ba6b 	b.w	8012e30 <_strtod_l+0x90>
 801395a:	2a65      	cmp	r2, #101	; 0x65
 801395c:	f43f ab5f 	beq.w	801301e <_strtod_l+0x27e>
 8013960:	2a45      	cmp	r2, #69	; 0x45
 8013962:	f43f ab5c 	beq.w	801301e <_strtod_l+0x27e>
 8013966:	2301      	movs	r3, #1
 8013968:	f7ff bb94 	b.w	8013094 <_strtod_l+0x2f4>
 801396c:	f3af 8000 	nop.w
 8013970:	94a03595 	.word	0x94a03595
 8013974:	3fdfffff 	.word	0x3fdfffff
 8013978:	35afe535 	.word	0x35afe535
 801397c:	3fe00000 	.word	0x3fe00000
 8013980:	ffc00000 	.word	0xffc00000
 8013984:	41dfffff 	.word	0x41dfffff
 8013988:	94a03595 	.word	0x94a03595
 801398c:	3fcfffff 	.word	0x3fcfffff
 8013990:	3ff00000 	.word	0x3ff00000
 8013994:	7ff00000 	.word	0x7ff00000
 8013998:	7fe00000 	.word	0x7fe00000
 801399c:	7c9fffff 	.word	0x7c9fffff
 80139a0:	3fe00000 	.word	0x3fe00000
 80139a4:	bff00000 	.word	0xbff00000
 80139a8:	7fefffff 	.word	0x7fefffff

080139ac <strtod>:
 80139ac:	460a      	mov	r2, r1
 80139ae:	4601      	mov	r1, r0
 80139b0:	4802      	ldr	r0, [pc, #8]	; (80139bc <strtod+0x10>)
 80139b2:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <strtod+0x14>)
 80139b4:	6800      	ldr	r0, [r0, #0]
 80139b6:	f7ff b9f3 	b.w	8012da0 <_strtod_l>
 80139ba:	bf00      	nop
 80139bc:	200002c8 	.word	0x200002c8
 80139c0:	20000394 	.word	0x20000394

080139c4 <strtok>:
 80139c4:	4b16      	ldr	r3, [pc, #88]	; (8013a20 <strtok+0x5c>)
 80139c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139c8:	681e      	ldr	r6, [r3, #0]
 80139ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80139cc:	4605      	mov	r5, r0
 80139ce:	b9fc      	cbnz	r4, 8013a10 <strtok+0x4c>
 80139d0:	2050      	movs	r0, #80	; 0x50
 80139d2:	9101      	str	r1, [sp, #4]
 80139d4:	f7fd fa4a 	bl	8010e6c <malloc>
 80139d8:	9901      	ldr	r1, [sp, #4]
 80139da:	65b0      	str	r0, [r6, #88]	; 0x58
 80139dc:	4602      	mov	r2, r0
 80139de:	b920      	cbnz	r0, 80139ea <strtok+0x26>
 80139e0:	4b10      	ldr	r3, [pc, #64]	; (8013a24 <strtok+0x60>)
 80139e2:	4811      	ldr	r0, [pc, #68]	; (8013a28 <strtok+0x64>)
 80139e4:	2157      	movs	r1, #87	; 0x57
 80139e6:	f7fd f9df 	bl	8010da8 <__assert_func>
 80139ea:	e9c0 4400 	strd	r4, r4, [r0]
 80139ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80139f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80139f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80139fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80139fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013a02:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013a06:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013a0a:	6184      	str	r4, [r0, #24]
 8013a0c:	7704      	strb	r4, [r0, #28]
 8013a0e:	6244      	str	r4, [r0, #36]	; 0x24
 8013a10:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013a12:	2301      	movs	r3, #1
 8013a14:	4628      	mov	r0, r5
 8013a16:	b002      	add	sp, #8
 8013a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a1c:	f000 b806 	b.w	8013a2c <__strtok_r>
 8013a20:	200002c8 	.word	0x200002c8
 8013a24:	080486c4 	.word	0x080486c4
 8013a28:	08048920 	.word	0x08048920

08013a2c <__strtok_r>:
 8013a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a2e:	b908      	cbnz	r0, 8013a34 <__strtok_r+0x8>
 8013a30:	6810      	ldr	r0, [r2, #0]
 8013a32:	b188      	cbz	r0, 8013a58 <__strtok_r+0x2c>
 8013a34:	4604      	mov	r4, r0
 8013a36:	4620      	mov	r0, r4
 8013a38:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013a3c:	460f      	mov	r7, r1
 8013a3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013a42:	b91e      	cbnz	r6, 8013a4c <__strtok_r+0x20>
 8013a44:	b965      	cbnz	r5, 8013a60 <__strtok_r+0x34>
 8013a46:	6015      	str	r5, [r2, #0]
 8013a48:	4628      	mov	r0, r5
 8013a4a:	e005      	b.n	8013a58 <__strtok_r+0x2c>
 8013a4c:	42b5      	cmp	r5, r6
 8013a4e:	d1f6      	bne.n	8013a3e <__strtok_r+0x12>
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d1f0      	bne.n	8013a36 <__strtok_r+0xa>
 8013a54:	6014      	str	r4, [r2, #0]
 8013a56:	7003      	strb	r3, [r0, #0]
 8013a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a5a:	461c      	mov	r4, r3
 8013a5c:	e00c      	b.n	8013a78 <__strtok_r+0x4c>
 8013a5e:	b915      	cbnz	r5, 8013a66 <__strtok_r+0x3a>
 8013a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a64:	460e      	mov	r6, r1
 8013a66:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013a6a:	42ab      	cmp	r3, r5
 8013a6c:	d1f7      	bne.n	8013a5e <__strtok_r+0x32>
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d0f3      	beq.n	8013a5a <__strtok_r+0x2e>
 8013a72:	2300      	movs	r3, #0
 8013a74:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013a78:	6014      	str	r4, [r2, #0]
 8013a7a:	e7ed      	b.n	8013a58 <__strtok_r+0x2c>

08013a7c <_strtol_l.constprop.0>:
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a82:	d001      	beq.n	8013a88 <_strtol_l.constprop.0+0xc>
 8013a84:	2b24      	cmp	r3, #36	; 0x24
 8013a86:	d906      	bls.n	8013a96 <_strtol_l.constprop.0+0x1a>
 8013a88:	f7fd f9b4 	bl	8010df4 <__errno>
 8013a8c:	2316      	movs	r3, #22
 8013a8e:	6003      	str	r3, [r0, #0]
 8013a90:	2000      	movs	r0, #0
 8013a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013b7c <_strtol_l.constprop.0+0x100>
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	462e      	mov	r6, r5
 8013a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013aa2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8013aa6:	f017 0708 	ands.w	r7, r7, #8
 8013aaa:	d1f7      	bne.n	8013a9c <_strtol_l.constprop.0+0x20>
 8013aac:	2c2d      	cmp	r4, #45	; 0x2d
 8013aae:	d132      	bne.n	8013b16 <_strtol_l.constprop.0+0x9a>
 8013ab0:	782c      	ldrb	r4, [r5, #0]
 8013ab2:	2701      	movs	r7, #1
 8013ab4:	1cb5      	adds	r5, r6, #2
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d05b      	beq.n	8013b72 <_strtol_l.constprop.0+0xf6>
 8013aba:	2b10      	cmp	r3, #16
 8013abc:	d109      	bne.n	8013ad2 <_strtol_l.constprop.0+0x56>
 8013abe:	2c30      	cmp	r4, #48	; 0x30
 8013ac0:	d107      	bne.n	8013ad2 <_strtol_l.constprop.0+0x56>
 8013ac2:	782c      	ldrb	r4, [r5, #0]
 8013ac4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013ac8:	2c58      	cmp	r4, #88	; 0x58
 8013aca:	d14d      	bne.n	8013b68 <_strtol_l.constprop.0+0xec>
 8013acc:	786c      	ldrb	r4, [r5, #1]
 8013ace:	2310      	movs	r3, #16
 8013ad0:	3502      	adds	r5, #2
 8013ad2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013ad6:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ada:	f04f 0c00 	mov.w	ip, #0
 8013ade:	fbb8 f9f3 	udiv	r9, r8, r3
 8013ae2:	4666      	mov	r6, ip
 8013ae4:	fb03 8a19 	mls	sl, r3, r9, r8
 8013ae8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013aec:	f1be 0f09 	cmp.w	lr, #9
 8013af0:	d816      	bhi.n	8013b20 <_strtol_l.constprop.0+0xa4>
 8013af2:	4674      	mov	r4, lr
 8013af4:	42a3      	cmp	r3, r4
 8013af6:	dd24      	ble.n	8013b42 <_strtol_l.constprop.0+0xc6>
 8013af8:	f1bc 0f00 	cmp.w	ip, #0
 8013afc:	db1e      	blt.n	8013b3c <_strtol_l.constprop.0+0xc0>
 8013afe:	45b1      	cmp	r9, r6
 8013b00:	d31c      	bcc.n	8013b3c <_strtol_l.constprop.0+0xc0>
 8013b02:	d101      	bne.n	8013b08 <_strtol_l.constprop.0+0x8c>
 8013b04:	45a2      	cmp	sl, r4
 8013b06:	db19      	blt.n	8013b3c <_strtol_l.constprop.0+0xc0>
 8013b08:	fb06 4603 	mla	r6, r6, r3, r4
 8013b0c:	f04f 0c01 	mov.w	ip, #1
 8013b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b14:	e7e8      	b.n	8013ae8 <_strtol_l.constprop.0+0x6c>
 8013b16:	2c2b      	cmp	r4, #43	; 0x2b
 8013b18:	bf04      	itt	eq
 8013b1a:	782c      	ldrbeq	r4, [r5, #0]
 8013b1c:	1cb5      	addeq	r5, r6, #2
 8013b1e:	e7ca      	b.n	8013ab6 <_strtol_l.constprop.0+0x3a>
 8013b20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013b24:	f1be 0f19 	cmp.w	lr, #25
 8013b28:	d801      	bhi.n	8013b2e <_strtol_l.constprop.0+0xb2>
 8013b2a:	3c37      	subs	r4, #55	; 0x37
 8013b2c:	e7e2      	b.n	8013af4 <_strtol_l.constprop.0+0x78>
 8013b2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8013b32:	f1be 0f19 	cmp.w	lr, #25
 8013b36:	d804      	bhi.n	8013b42 <_strtol_l.constprop.0+0xc6>
 8013b38:	3c57      	subs	r4, #87	; 0x57
 8013b3a:	e7db      	b.n	8013af4 <_strtol_l.constprop.0+0x78>
 8013b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8013b40:	e7e6      	b.n	8013b10 <_strtol_l.constprop.0+0x94>
 8013b42:	f1bc 0f00 	cmp.w	ip, #0
 8013b46:	da05      	bge.n	8013b54 <_strtol_l.constprop.0+0xd8>
 8013b48:	2322      	movs	r3, #34	; 0x22
 8013b4a:	6003      	str	r3, [r0, #0]
 8013b4c:	4646      	mov	r6, r8
 8013b4e:	b942      	cbnz	r2, 8013b62 <_strtol_l.constprop.0+0xe6>
 8013b50:	4630      	mov	r0, r6
 8013b52:	e79e      	b.n	8013a92 <_strtol_l.constprop.0+0x16>
 8013b54:	b107      	cbz	r7, 8013b58 <_strtol_l.constprop.0+0xdc>
 8013b56:	4276      	negs	r6, r6
 8013b58:	2a00      	cmp	r2, #0
 8013b5a:	d0f9      	beq.n	8013b50 <_strtol_l.constprop.0+0xd4>
 8013b5c:	f1bc 0f00 	cmp.w	ip, #0
 8013b60:	d000      	beq.n	8013b64 <_strtol_l.constprop.0+0xe8>
 8013b62:	1e69      	subs	r1, r5, #1
 8013b64:	6011      	str	r1, [r2, #0]
 8013b66:	e7f3      	b.n	8013b50 <_strtol_l.constprop.0+0xd4>
 8013b68:	2430      	movs	r4, #48	; 0x30
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d1b1      	bne.n	8013ad2 <_strtol_l.constprop.0+0x56>
 8013b6e:	2308      	movs	r3, #8
 8013b70:	e7af      	b.n	8013ad2 <_strtol_l.constprop.0+0x56>
 8013b72:	2c30      	cmp	r4, #48	; 0x30
 8013b74:	d0a5      	beq.n	8013ac2 <_strtol_l.constprop.0+0x46>
 8013b76:	230a      	movs	r3, #10
 8013b78:	e7ab      	b.n	8013ad2 <_strtol_l.constprop.0+0x56>
 8013b7a:	bf00      	nop
 8013b7c:	08048be1 	.word	0x08048be1

08013b80 <_strtol_r>:
 8013b80:	f7ff bf7c 	b.w	8013a7c <_strtol_l.constprop.0>

08013b84 <strtol>:
 8013b84:	4613      	mov	r3, r2
 8013b86:	460a      	mov	r2, r1
 8013b88:	4601      	mov	r1, r0
 8013b8a:	4802      	ldr	r0, [pc, #8]	; (8013b94 <strtol+0x10>)
 8013b8c:	6800      	ldr	r0, [r0, #0]
 8013b8e:	f7ff bf75 	b.w	8013a7c <_strtol_l.constprop.0>
 8013b92:	bf00      	nop
 8013b94:	200002c8 	.word	0x200002c8

08013b98 <_strtoul_l.constprop.0>:
 8013b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b9c:	4f36      	ldr	r7, [pc, #216]	; (8013c78 <_strtoul_l.constprop.0+0xe0>)
 8013b9e:	4686      	mov	lr, r0
 8013ba0:	460d      	mov	r5, r1
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ba8:	5de6      	ldrb	r6, [r4, r7]
 8013baa:	f016 0608 	ands.w	r6, r6, #8
 8013bae:	d1f8      	bne.n	8013ba2 <_strtoul_l.constprop.0+0xa>
 8013bb0:	2c2d      	cmp	r4, #45	; 0x2d
 8013bb2:	d12f      	bne.n	8013c14 <_strtoul_l.constprop.0+0x7c>
 8013bb4:	782c      	ldrb	r4, [r5, #0]
 8013bb6:	2601      	movs	r6, #1
 8013bb8:	1c85      	adds	r5, r0, #2
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d057      	beq.n	8013c6e <_strtoul_l.constprop.0+0xd6>
 8013bbe:	2b10      	cmp	r3, #16
 8013bc0:	d109      	bne.n	8013bd6 <_strtoul_l.constprop.0+0x3e>
 8013bc2:	2c30      	cmp	r4, #48	; 0x30
 8013bc4:	d107      	bne.n	8013bd6 <_strtoul_l.constprop.0+0x3e>
 8013bc6:	7828      	ldrb	r0, [r5, #0]
 8013bc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013bcc:	2858      	cmp	r0, #88	; 0x58
 8013bce:	d149      	bne.n	8013c64 <_strtoul_l.constprop.0+0xcc>
 8013bd0:	786c      	ldrb	r4, [r5, #1]
 8013bd2:	2310      	movs	r3, #16
 8013bd4:	3502      	adds	r5, #2
 8013bd6:	f04f 38ff 	mov.w	r8, #4294967295
 8013bda:	2700      	movs	r7, #0
 8013bdc:	fbb8 f8f3 	udiv	r8, r8, r3
 8013be0:	fb03 f908 	mul.w	r9, r3, r8
 8013be4:	ea6f 0909 	mvn.w	r9, r9
 8013be8:	4638      	mov	r0, r7
 8013bea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013bee:	f1bc 0f09 	cmp.w	ip, #9
 8013bf2:	d814      	bhi.n	8013c1e <_strtoul_l.constprop.0+0x86>
 8013bf4:	4664      	mov	r4, ip
 8013bf6:	42a3      	cmp	r3, r4
 8013bf8:	dd22      	ble.n	8013c40 <_strtoul_l.constprop.0+0xa8>
 8013bfa:	2f00      	cmp	r7, #0
 8013bfc:	db1d      	blt.n	8013c3a <_strtoul_l.constprop.0+0xa2>
 8013bfe:	4580      	cmp	r8, r0
 8013c00:	d31b      	bcc.n	8013c3a <_strtoul_l.constprop.0+0xa2>
 8013c02:	d101      	bne.n	8013c08 <_strtoul_l.constprop.0+0x70>
 8013c04:	45a1      	cmp	r9, r4
 8013c06:	db18      	blt.n	8013c3a <_strtoul_l.constprop.0+0xa2>
 8013c08:	fb00 4003 	mla	r0, r0, r3, r4
 8013c0c:	2701      	movs	r7, #1
 8013c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c12:	e7ea      	b.n	8013bea <_strtoul_l.constprop.0+0x52>
 8013c14:	2c2b      	cmp	r4, #43	; 0x2b
 8013c16:	bf04      	itt	eq
 8013c18:	782c      	ldrbeq	r4, [r5, #0]
 8013c1a:	1c85      	addeq	r5, r0, #2
 8013c1c:	e7cd      	b.n	8013bba <_strtoul_l.constprop.0+0x22>
 8013c1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013c22:	f1bc 0f19 	cmp.w	ip, #25
 8013c26:	d801      	bhi.n	8013c2c <_strtoul_l.constprop.0+0x94>
 8013c28:	3c37      	subs	r4, #55	; 0x37
 8013c2a:	e7e4      	b.n	8013bf6 <_strtoul_l.constprop.0+0x5e>
 8013c2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013c30:	f1bc 0f19 	cmp.w	ip, #25
 8013c34:	d804      	bhi.n	8013c40 <_strtoul_l.constprop.0+0xa8>
 8013c36:	3c57      	subs	r4, #87	; 0x57
 8013c38:	e7dd      	b.n	8013bf6 <_strtoul_l.constprop.0+0x5e>
 8013c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8013c3e:	e7e6      	b.n	8013c0e <_strtoul_l.constprop.0+0x76>
 8013c40:	2f00      	cmp	r7, #0
 8013c42:	da07      	bge.n	8013c54 <_strtoul_l.constprop.0+0xbc>
 8013c44:	2322      	movs	r3, #34	; 0x22
 8013c46:	f8ce 3000 	str.w	r3, [lr]
 8013c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4e:	b932      	cbnz	r2, 8013c5e <_strtoul_l.constprop.0+0xc6>
 8013c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c54:	b106      	cbz	r6, 8013c58 <_strtoul_l.constprop.0+0xc0>
 8013c56:	4240      	negs	r0, r0
 8013c58:	2a00      	cmp	r2, #0
 8013c5a:	d0f9      	beq.n	8013c50 <_strtoul_l.constprop.0+0xb8>
 8013c5c:	b107      	cbz	r7, 8013c60 <_strtoul_l.constprop.0+0xc8>
 8013c5e:	1e69      	subs	r1, r5, #1
 8013c60:	6011      	str	r1, [r2, #0]
 8013c62:	e7f5      	b.n	8013c50 <_strtoul_l.constprop.0+0xb8>
 8013c64:	2430      	movs	r4, #48	; 0x30
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d1b5      	bne.n	8013bd6 <_strtoul_l.constprop.0+0x3e>
 8013c6a:	2308      	movs	r3, #8
 8013c6c:	e7b3      	b.n	8013bd6 <_strtoul_l.constprop.0+0x3e>
 8013c6e:	2c30      	cmp	r4, #48	; 0x30
 8013c70:	d0a9      	beq.n	8013bc6 <_strtoul_l.constprop.0+0x2e>
 8013c72:	230a      	movs	r3, #10
 8013c74:	e7af      	b.n	8013bd6 <_strtoul_l.constprop.0+0x3e>
 8013c76:	bf00      	nop
 8013c78:	08048be1 	.word	0x08048be1

08013c7c <_strtoul_r>:
 8013c7c:	f7ff bf8c 	b.w	8013b98 <_strtoul_l.constprop.0>

08013c80 <strtoul>:
 8013c80:	4613      	mov	r3, r2
 8013c82:	460a      	mov	r2, r1
 8013c84:	4601      	mov	r1, r0
 8013c86:	4802      	ldr	r0, [pc, #8]	; (8013c90 <strtoul+0x10>)
 8013c88:	6800      	ldr	r0, [r0, #0]
 8013c8a:	f7ff bf85 	b.w	8013b98 <_strtoul_l.constprop.0>
 8013c8e:	bf00      	nop
 8013c90:	200002c8 	.word	0x200002c8

08013c94 <__tzcalc_limits>:
 8013c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c98:	4605      	mov	r5, r0
 8013c9a:	f001 ff1d 	bl	8015ad8 <__gettzinfo>
 8013c9e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013ca2:	429d      	cmp	r5, r3
 8013ca4:	f340 8099 	ble.w	8013dda <__tzcalc_limits+0x146>
 8013ca8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8013cac:	18ac      	adds	r4, r5, r2
 8013cae:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8013cb2:	f240 126d 	movw	r2, #365	; 0x16d
 8013cb6:	10a4      	asrs	r4, r4, #2
 8013cb8:	fb02 4403 	mla	r4, r2, r3, r4
 8013cbc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013cc0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8013cc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cc8:	441c      	add	r4, r3
 8013cca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013cce:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8013cd2:	fb95 fcf3 	sdiv	ip, r5, r3
 8013cd6:	fb03 5c1c 	mls	ip, r3, ip, r5
 8013cda:	186a      	adds	r2, r5, r1
 8013cdc:	fabc f68c 	clz	r6, ip
 8013ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8013ce4:	f005 0303 	and.w	r3, r5, #3
 8013ce8:	4414      	add	r4, r2
 8013cea:	2264      	movs	r2, #100	; 0x64
 8013cec:	6045      	str	r5, [r0, #4]
 8013cee:	fb95 f7f2 	sdiv	r7, r5, r2
 8013cf2:	0976      	lsrs	r6, r6, #5
 8013cf4:	fb02 5717 	mls	r7, r2, r7, r5
 8013cf8:	4601      	mov	r1, r0
 8013cfa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	f04f 0a07 	mov.w	sl, #7
 8013d04:	7a0d      	ldrb	r5, [r1, #8]
 8013d06:	694b      	ldr	r3, [r1, #20]
 8013d08:	2d4a      	cmp	r5, #74	; 0x4a
 8013d0a:	d12d      	bne.n	8013d68 <__tzcalc_limits+0xd4>
 8013d0c:	9a00      	ldr	r2, [sp, #0]
 8013d0e:	eb04 0e03 	add.w	lr, r4, r3
 8013d12:	b902      	cbnz	r2, 8013d16 <__tzcalc_limits+0x82>
 8013d14:	b917      	cbnz	r7, 8013d1c <__tzcalc_limits+0x88>
 8013d16:	f1bc 0f00 	cmp.w	ip, #0
 8013d1a:	d123      	bne.n	8013d64 <__tzcalc_limits+0xd0>
 8013d1c:	2b3b      	cmp	r3, #59	; 0x3b
 8013d1e:	bfd4      	ite	le
 8013d20:	2300      	movle	r3, #0
 8013d22:	2301      	movgt	r3, #1
 8013d24:	4473      	add	r3, lr
 8013d26:	3b01      	subs	r3, #1
 8013d28:	698d      	ldr	r5, [r1, #24]
 8013d2a:	4a2d      	ldr	r2, [pc, #180]	; (8013de0 <__tzcalc_limits+0x14c>)
 8013d2c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8013d30:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8013d34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8013d36:	18ed      	adds	r5, r5, r3
 8013d38:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8013d3c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8013d40:	3128      	adds	r1, #40	; 0x28
 8013d42:	458b      	cmp	fp, r1
 8013d44:	d1de      	bne.n	8013d04 <__tzcalc_limits+0x70>
 8013d46:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8013d4a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8013d4e:	428c      	cmp	r4, r1
 8013d50:	eb72 0303 	sbcs.w	r3, r2, r3
 8013d54:	bfb4      	ite	lt
 8013d56:	2301      	movlt	r3, #1
 8013d58:	2300      	movge	r3, #0
 8013d5a:	6003      	str	r3, [r0, #0]
 8013d5c:	2001      	movs	r0, #1
 8013d5e:	b003      	add	sp, #12
 8013d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d64:	2300      	movs	r3, #0
 8013d66:	e7dd      	b.n	8013d24 <__tzcalc_limits+0x90>
 8013d68:	2d44      	cmp	r5, #68	; 0x44
 8013d6a:	d101      	bne.n	8013d70 <__tzcalc_limits+0xdc>
 8013d6c:	4423      	add	r3, r4
 8013d6e:	e7db      	b.n	8013d28 <__tzcalc_limits+0x94>
 8013d70:	9a00      	ldr	r2, [sp, #0]
 8013d72:	bb62      	cbnz	r2, 8013dce <__tzcalc_limits+0x13a>
 8013d74:	2f00      	cmp	r7, #0
 8013d76:	bf0c      	ite	eq
 8013d78:	4635      	moveq	r5, r6
 8013d7a:	2501      	movne	r5, #1
 8013d7c:	68ca      	ldr	r2, [r1, #12]
 8013d7e:	9201      	str	r2, [sp, #4]
 8013d80:	4a18      	ldr	r2, [pc, #96]	; (8013de4 <__tzcalc_limits+0x150>)
 8013d82:	f04f 0930 	mov.w	r9, #48	; 0x30
 8013d86:	fb09 2505 	mla	r5, r9, r5, r2
 8013d8a:	46a6      	mov	lr, r4
 8013d8c:	f04f 0800 	mov.w	r8, #0
 8013d90:	3d04      	subs	r5, #4
 8013d92:	9a01      	ldr	r2, [sp, #4]
 8013d94:	f108 0801 	add.w	r8, r8, #1
 8013d98:	4542      	cmp	r2, r8
 8013d9a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8013d9e:	dc18      	bgt.n	8013dd2 <__tzcalc_limits+0x13e>
 8013da0:	f10e 0504 	add.w	r5, lr, #4
 8013da4:	fb95 f8fa 	sdiv	r8, r5, sl
 8013da8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8013dac:	eba5 0808 	sub.w	r8, r5, r8
 8013db0:	ebb3 0808 	subs.w	r8, r3, r8
 8013db4:	690b      	ldr	r3, [r1, #16]
 8013db6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013dba:	bf48      	it	mi
 8013dbc:	f108 0807 	addmi.w	r8, r8, #7
 8013dc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013dc4:	4443      	add	r3, r8
 8013dc6:	454b      	cmp	r3, r9
 8013dc8:	da05      	bge.n	8013dd6 <__tzcalc_limits+0x142>
 8013dca:	4473      	add	r3, lr
 8013dcc:	e7ac      	b.n	8013d28 <__tzcalc_limits+0x94>
 8013dce:	4635      	mov	r5, r6
 8013dd0:	e7d4      	b.n	8013d7c <__tzcalc_limits+0xe8>
 8013dd2:	44ce      	add	lr, r9
 8013dd4:	e7dd      	b.n	8013d92 <__tzcalc_limits+0xfe>
 8013dd6:	3b07      	subs	r3, #7
 8013dd8:	e7f5      	b.n	8013dc6 <__tzcalc_limits+0x132>
 8013dda:	2000      	movs	r0, #0
 8013ddc:	e7bf      	b.n	8013d5e <__tzcalc_limits+0xca>
 8013dde:	bf00      	nop
 8013de0:	00015180 	.word	0x00015180
 8013de4:	08048e38 	.word	0x08048e38

08013de8 <__tz_lock>:
 8013de8:	4801      	ldr	r0, [pc, #4]	; (8013df0 <__tz_lock+0x8>)
 8013dea:	f001 be82 	b.w	8015af2 <__retarget_lock_acquire>
 8013dee:	bf00      	nop
 8013df0:	20005d84 	.word	0x20005d84

08013df4 <__tz_unlock>:
 8013df4:	4801      	ldr	r0, [pc, #4]	; (8013dfc <__tz_unlock+0x8>)
 8013df6:	f001 be7e 	b.w	8015af6 <__retarget_lock_release>
 8013dfa:	bf00      	nop
 8013dfc:	20005d84 	.word	0x20005d84

08013e00 <_tzset_unlocked>:
 8013e00:	4b01      	ldr	r3, [pc, #4]	; (8013e08 <_tzset_unlocked+0x8>)
 8013e02:	6818      	ldr	r0, [r3, #0]
 8013e04:	f000 b802 	b.w	8013e0c <_tzset_unlocked_r>
 8013e08:	200002c8 	.word	0x200002c8

08013e0c <_tzset_unlocked_r>:
 8013e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e10:	b08d      	sub	sp, #52	; 0x34
 8013e12:	4607      	mov	r7, r0
 8013e14:	f001 fe60 	bl	8015ad8 <__gettzinfo>
 8013e18:	49b0      	ldr	r1, [pc, #704]	; (80140dc <_tzset_unlocked_r+0x2d0>)
 8013e1a:	4eb1      	ldr	r6, [pc, #708]	; (80140e0 <_tzset_unlocked_r+0x2d4>)
 8013e1c:	4605      	mov	r5, r0
 8013e1e:	4638      	mov	r0, r7
 8013e20:	f001 fe52 	bl	8015ac8 <_getenv_r>
 8013e24:	4604      	mov	r4, r0
 8013e26:	b970      	cbnz	r0, 8013e46 <_tzset_unlocked_r+0x3a>
 8013e28:	4bae      	ldr	r3, [pc, #696]	; (80140e4 <_tzset_unlocked_r+0x2d8>)
 8013e2a:	4aaf      	ldr	r2, [pc, #700]	; (80140e8 <_tzset_unlocked_r+0x2dc>)
 8013e2c:	6018      	str	r0, [r3, #0]
 8013e2e:	4baf      	ldr	r3, [pc, #700]	; (80140ec <_tzset_unlocked_r+0x2e0>)
 8013e30:	6018      	str	r0, [r3, #0]
 8013e32:	4baf      	ldr	r3, [pc, #700]	; (80140f0 <_tzset_unlocked_r+0x2e4>)
 8013e34:	6830      	ldr	r0, [r6, #0]
 8013e36:	e9c3 2200 	strd	r2, r2, [r3]
 8013e3a:	f7fd f81f 	bl	8010e7c <free>
 8013e3e:	6034      	str	r4, [r6, #0]
 8013e40:	b00d      	add	sp, #52	; 0x34
 8013e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e46:	6831      	ldr	r1, [r6, #0]
 8013e48:	2900      	cmp	r1, #0
 8013e4a:	d162      	bne.n	8013f12 <_tzset_unlocked_r+0x106>
 8013e4c:	6830      	ldr	r0, [r6, #0]
 8013e4e:	f7fd f815 	bl	8010e7c <free>
 8013e52:	4620      	mov	r0, r4
 8013e54:	f7ec f9d6 	bl	8000204 <strlen>
 8013e58:	1c41      	adds	r1, r0, #1
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	f7fd fb0a 	bl	8011474 <_malloc_r>
 8013e60:	6030      	str	r0, [r6, #0]
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d15a      	bne.n	8013f1c <_tzset_unlocked_r+0x110>
 8013e66:	7823      	ldrb	r3, [r4, #0]
 8013e68:	4aa2      	ldr	r2, [pc, #648]	; (80140f4 <_tzset_unlocked_r+0x2e8>)
 8013e6a:	49a3      	ldr	r1, [pc, #652]	; (80140f8 <_tzset_unlocked_r+0x2ec>)
 8013e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8013e6e:	bf08      	it	eq
 8013e70:	3401      	addeq	r4, #1
 8013e72:	ae0a      	add	r6, sp, #40	; 0x28
 8013e74:	4633      	mov	r3, r6
 8013e76:	4620      	mov	r0, r4
 8013e78:	f7fe f97c 	bl	8012174 <siscanf>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	dddf      	ble.n	8013e40 <_tzset_unlocked_r+0x34>
 8013e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e82:	18e7      	adds	r7, r4, r3
 8013e84:	5ce3      	ldrb	r3, [r4, r3]
 8013e86:	2b2d      	cmp	r3, #45	; 0x2d
 8013e88:	d14c      	bne.n	8013f24 <_tzset_unlocked_r+0x118>
 8013e8a:	3701      	adds	r7, #1
 8013e8c:	f04f 38ff 	mov.w	r8, #4294967295
 8013e90:	f10d 0a20 	add.w	sl, sp, #32
 8013e94:	f10d 0b1e 	add.w	fp, sp, #30
 8013e98:	2400      	movs	r4, #0
 8013e9a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8013e9e:	4997      	ldr	r1, [pc, #604]	; (80140fc <_tzset_unlocked_r+0x2f0>)
 8013ea0:	9603      	str	r6, [sp, #12]
 8013ea2:	f8cd b000 	str.w	fp, [sp]
 8013ea6:	4633      	mov	r3, r6
 8013ea8:	aa07      	add	r2, sp, #28
 8013eaa:	4638      	mov	r0, r7
 8013eac:	f8ad 401e 	strh.w	r4, [sp, #30]
 8013eb0:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013eb4:	f7fe f95e 	bl	8012174 <siscanf>
 8013eb8:	42a0      	cmp	r0, r4
 8013eba:	ddc1      	ble.n	8013e40 <_tzset_unlocked_r+0x34>
 8013ebc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013ec0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013ec4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014108 <_tzset_unlocked_r+0x2fc>
 8013ec8:	213c      	movs	r1, #60	; 0x3c
 8013eca:	fb01 3302 	mla	r3, r1, r2, r3
 8013ece:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8013ed2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013ed6:	fb01 3302 	mla	r3, r1, r2, r3
 8013eda:	fb08 f303 	mul.w	r3, r8, r3
 8013ede:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80140f0 <_tzset_unlocked_r+0x2e4>
 8013ee2:	62ab      	str	r3, [r5, #40]	; 0x28
 8013ee4:	4b83      	ldr	r3, [pc, #524]	; (80140f4 <_tzset_unlocked_r+0x2e8>)
 8013ee6:	f8c8 3000 	str.w	r3, [r8]
 8013eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eec:	4982      	ldr	r1, [pc, #520]	; (80140f8 <_tzset_unlocked_r+0x2ec>)
 8013eee:	441f      	add	r7, r3
 8013ef0:	464a      	mov	r2, r9
 8013ef2:	4633      	mov	r3, r6
 8013ef4:	4638      	mov	r0, r7
 8013ef6:	f7fe f93d 	bl	8012174 <siscanf>
 8013efa:	42a0      	cmp	r0, r4
 8013efc:	dc18      	bgt.n	8013f30 <_tzset_unlocked_r+0x124>
 8013efe:	f8d8 3000 	ldr.w	r3, [r8]
 8013f02:	f8c8 3004 	str.w	r3, [r8, #4]
 8013f06:	4b77      	ldr	r3, [pc, #476]	; (80140e4 <_tzset_unlocked_r+0x2d8>)
 8013f08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013f0a:	601a      	str	r2, [r3, #0]
 8013f0c:	4b77      	ldr	r3, [pc, #476]	; (80140ec <_tzset_unlocked_r+0x2e0>)
 8013f0e:	601c      	str	r4, [r3, #0]
 8013f10:	e796      	b.n	8013e40 <_tzset_unlocked_r+0x34>
 8013f12:	f7ec f96d 	bl	80001f0 <strcmp>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d198      	bne.n	8013e4c <_tzset_unlocked_r+0x40>
 8013f1a:	e791      	b.n	8013e40 <_tzset_unlocked_r+0x34>
 8013f1c:	4621      	mov	r1, r4
 8013f1e:	f7fe f99a 	bl	8012256 <strcpy>
 8013f22:	e7a0      	b.n	8013e66 <_tzset_unlocked_r+0x5a>
 8013f24:	2b2b      	cmp	r3, #43	; 0x2b
 8013f26:	bf08      	it	eq
 8013f28:	3701      	addeq	r7, #1
 8013f2a:	f04f 0801 	mov.w	r8, #1
 8013f2e:	e7af      	b.n	8013e90 <_tzset_unlocked_r+0x84>
 8013f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f32:	f8c8 9004 	str.w	r9, [r8, #4]
 8013f36:	18fc      	adds	r4, r7, r3
 8013f38:	5cfb      	ldrb	r3, [r7, r3]
 8013f3a:	2b2d      	cmp	r3, #45	; 0x2d
 8013f3c:	f040 808b 	bne.w	8014056 <_tzset_unlocked_r+0x24a>
 8013f40:	3401      	adds	r4, #1
 8013f42:	f04f 37ff 	mov.w	r7, #4294967295
 8013f46:	2300      	movs	r3, #0
 8013f48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013f50:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013f54:	930a      	str	r3, [sp, #40]	; 0x28
 8013f56:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013f5a:	e9cd b600 	strd	fp, r6, [sp]
 8013f5e:	4967      	ldr	r1, [pc, #412]	; (80140fc <_tzset_unlocked_r+0x2f0>)
 8013f60:	4633      	mov	r3, r6
 8013f62:	aa07      	add	r2, sp, #28
 8013f64:	4620      	mov	r0, r4
 8013f66:	f7fe f905 	bl	8012174 <siscanf>
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	dc78      	bgt.n	8014060 <_tzset_unlocked_r+0x254>
 8013f6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013f70:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013f74:	652b      	str	r3, [r5, #80]	; 0x50
 8013f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f78:	462f      	mov	r7, r5
 8013f7a:	441c      	add	r4, r3
 8013f7c:	f04f 0900 	mov.w	r9, #0
 8013f80:	7823      	ldrb	r3, [r4, #0]
 8013f82:	2b2c      	cmp	r3, #44	; 0x2c
 8013f84:	bf08      	it	eq
 8013f86:	3401      	addeq	r4, #1
 8013f88:	f894 8000 	ldrb.w	r8, [r4]
 8013f8c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013f90:	d178      	bne.n	8014084 <_tzset_unlocked_r+0x278>
 8013f92:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013f96:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013f9a:	ab09      	add	r3, sp, #36	; 0x24
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	4958      	ldr	r1, [pc, #352]	; (8014100 <_tzset_unlocked_r+0x2f4>)
 8013fa0:	9603      	str	r6, [sp, #12]
 8013fa2:	4633      	mov	r3, r6
 8013fa4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f7fe f8e3 	bl	8012174 <siscanf>
 8013fae:	2803      	cmp	r0, #3
 8013fb0:	f47f af46 	bne.w	8013e40 <_tzset_unlocked_r+0x34>
 8013fb4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013fb8:	1e4b      	subs	r3, r1, #1
 8013fba:	2b0b      	cmp	r3, #11
 8013fbc:	f63f af40 	bhi.w	8013e40 <_tzset_unlocked_r+0x34>
 8013fc0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013fc4:	1e53      	subs	r3, r2, #1
 8013fc6:	2b04      	cmp	r3, #4
 8013fc8:	f63f af3a 	bhi.w	8013e40 <_tzset_unlocked_r+0x34>
 8013fcc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013fd0:	2b06      	cmp	r3, #6
 8013fd2:	f63f af35 	bhi.w	8013e40 <_tzset_unlocked_r+0x34>
 8013fd6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8013fda:	f887 8008 	strb.w	r8, [r7, #8]
 8013fde:	617b      	str	r3, [r7, #20]
 8013fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe2:	eb04 0803 	add.w	r8, r4, r3
 8013fe6:	2302      	movs	r3, #2
 8013fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013fec:	2300      	movs	r3, #0
 8013fee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013ff2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff8:	f898 3000 	ldrb.w	r3, [r8]
 8013ffc:	2b2f      	cmp	r3, #47	; 0x2f
 8013ffe:	d109      	bne.n	8014014 <_tzset_unlocked_r+0x208>
 8014000:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014004:	e9cd b600 	strd	fp, r6, [sp]
 8014008:	493e      	ldr	r1, [pc, #248]	; (8014104 <_tzset_unlocked_r+0x2f8>)
 801400a:	4633      	mov	r3, r6
 801400c:	aa07      	add	r2, sp, #28
 801400e:	4640      	mov	r0, r8
 8014010:	f7fe f8b0 	bl	8012174 <siscanf>
 8014014:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014018:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801401c:	213c      	movs	r1, #60	; 0x3c
 801401e:	fb01 3302 	mla	r3, r1, r2, r3
 8014022:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014026:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801402a:	fb01 3302 	mla	r3, r1, r2, r3
 801402e:	61bb      	str	r3, [r7, #24]
 8014030:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014032:	3728      	adds	r7, #40	; 0x28
 8014034:	4444      	add	r4, r8
 8014036:	f1b9 0f00 	cmp.w	r9, #0
 801403a:	d020      	beq.n	801407e <_tzset_unlocked_r+0x272>
 801403c:	6868      	ldr	r0, [r5, #4]
 801403e:	f7ff fe29 	bl	8013c94 <__tzcalc_limits>
 8014042:	4b28      	ldr	r3, [pc, #160]	; (80140e4 <_tzset_unlocked_r+0x2d8>)
 8014044:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014046:	601a      	str	r2, [r3, #0]
 8014048:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801404a:	1a9b      	subs	r3, r3, r2
 801404c:	4a27      	ldr	r2, [pc, #156]	; (80140ec <_tzset_unlocked_r+0x2e0>)
 801404e:	bf18      	it	ne
 8014050:	2301      	movne	r3, #1
 8014052:	6013      	str	r3, [r2, #0]
 8014054:	e6f4      	b.n	8013e40 <_tzset_unlocked_r+0x34>
 8014056:	2b2b      	cmp	r3, #43	; 0x2b
 8014058:	bf08      	it	eq
 801405a:	3401      	addeq	r4, #1
 801405c:	2701      	movs	r7, #1
 801405e:	e772      	b.n	8013f46 <_tzset_unlocked_r+0x13a>
 8014060:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014064:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014068:	213c      	movs	r1, #60	; 0x3c
 801406a:	fb01 3302 	mla	r3, r1, r2, r3
 801406e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014072:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014076:	fb01 3302 	mla	r3, r1, r2, r3
 801407a:	437b      	muls	r3, r7
 801407c:	e77a      	b.n	8013f74 <_tzset_unlocked_r+0x168>
 801407e:	f04f 0901 	mov.w	r9, #1
 8014082:	e77d      	b.n	8013f80 <_tzset_unlocked_r+0x174>
 8014084:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014088:	bf06      	itte	eq
 801408a:	3401      	addeq	r4, #1
 801408c:	4643      	moveq	r3, r8
 801408e:	2344      	movne	r3, #68	; 0x44
 8014090:	220a      	movs	r2, #10
 8014092:	a90b      	add	r1, sp, #44	; 0x2c
 8014094:	4620      	mov	r0, r4
 8014096:	9305      	str	r3, [sp, #20]
 8014098:	f7ff fdf2 	bl	8013c80 <strtoul>
 801409c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80140a0:	9b05      	ldr	r3, [sp, #20]
 80140a2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80140a6:	45a0      	cmp	r8, r4
 80140a8:	d114      	bne.n	80140d4 <_tzset_unlocked_r+0x2c8>
 80140aa:	234d      	movs	r3, #77	; 0x4d
 80140ac:	f1b9 0f00 	cmp.w	r9, #0
 80140b0:	d107      	bne.n	80140c2 <_tzset_unlocked_r+0x2b6>
 80140b2:	722b      	strb	r3, [r5, #8]
 80140b4:	2103      	movs	r1, #3
 80140b6:	2302      	movs	r3, #2
 80140b8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80140bc:	f8c5 9014 	str.w	r9, [r5, #20]
 80140c0:	e791      	b.n	8013fe6 <_tzset_unlocked_r+0x1da>
 80140c2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80140c6:	220b      	movs	r2, #11
 80140c8:	2301      	movs	r3, #1
 80140ca:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80140ce:	2300      	movs	r3, #0
 80140d0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80140d2:	e788      	b.n	8013fe6 <_tzset_unlocked_r+0x1da>
 80140d4:	b280      	uxth	r0, r0
 80140d6:	723b      	strb	r3, [r7, #8]
 80140d8:	6178      	str	r0, [r7, #20]
 80140da:	e784      	b.n	8013fe6 <_tzset_unlocked_r+0x1da>
 80140dc:	08048ba4 	.word	0x08048ba4
 80140e0:	20005d74 	.word	0x20005d74
 80140e4:	20005d7c 	.word	0x20005d7c
 80140e8:	08048ba7 	.word	0x08048ba7
 80140ec:	20005d78 	.word	0x20005d78
 80140f0:	2000032c 	.word	0x2000032c
 80140f4:	20005d67 	.word	0x20005d67
 80140f8:	08048bab 	.word	0x08048bab
 80140fc:	08048bce 	.word	0x08048bce
 8014100:	08048bba 	.word	0x08048bba
 8014104:	08048bcd 	.word	0x08048bcd
 8014108:	20005d5c 	.word	0x20005d5c

0801410c <__swbuf_r>:
 801410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410e:	460e      	mov	r6, r1
 8014110:	4614      	mov	r4, r2
 8014112:	4605      	mov	r5, r0
 8014114:	b118      	cbz	r0, 801411e <__swbuf_r+0x12>
 8014116:	6983      	ldr	r3, [r0, #24]
 8014118:	b90b      	cbnz	r3, 801411e <__swbuf_r+0x12>
 801411a:	f001 f88d 	bl	8015238 <__sinit>
 801411e:	4b21      	ldr	r3, [pc, #132]	; (80141a4 <__swbuf_r+0x98>)
 8014120:	429c      	cmp	r4, r3
 8014122:	d12b      	bne.n	801417c <__swbuf_r+0x70>
 8014124:	686c      	ldr	r4, [r5, #4]
 8014126:	69a3      	ldr	r3, [r4, #24]
 8014128:	60a3      	str	r3, [r4, #8]
 801412a:	89a3      	ldrh	r3, [r4, #12]
 801412c:	071a      	lsls	r2, r3, #28
 801412e:	d52f      	bpl.n	8014190 <__swbuf_r+0x84>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	b36b      	cbz	r3, 8014190 <__swbuf_r+0x84>
 8014134:	6923      	ldr	r3, [r4, #16]
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	1ac0      	subs	r0, r0, r3
 801413a:	6963      	ldr	r3, [r4, #20]
 801413c:	b2f6      	uxtb	r6, r6
 801413e:	4283      	cmp	r3, r0
 8014140:	4637      	mov	r7, r6
 8014142:	dc04      	bgt.n	801414e <__swbuf_r+0x42>
 8014144:	4621      	mov	r1, r4
 8014146:	4628      	mov	r0, r5
 8014148:	f000 ffe2 	bl	8015110 <_fflush_r>
 801414c:	bb30      	cbnz	r0, 801419c <__swbuf_r+0x90>
 801414e:	68a3      	ldr	r3, [r4, #8]
 8014150:	3b01      	subs	r3, #1
 8014152:	60a3      	str	r3, [r4, #8]
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	6022      	str	r2, [r4, #0]
 801415a:	701e      	strb	r6, [r3, #0]
 801415c:	6963      	ldr	r3, [r4, #20]
 801415e:	3001      	adds	r0, #1
 8014160:	4283      	cmp	r3, r0
 8014162:	d004      	beq.n	801416e <__swbuf_r+0x62>
 8014164:	89a3      	ldrh	r3, [r4, #12]
 8014166:	07db      	lsls	r3, r3, #31
 8014168:	d506      	bpl.n	8014178 <__swbuf_r+0x6c>
 801416a:	2e0a      	cmp	r6, #10
 801416c:	d104      	bne.n	8014178 <__swbuf_r+0x6c>
 801416e:	4621      	mov	r1, r4
 8014170:	4628      	mov	r0, r5
 8014172:	f000 ffcd 	bl	8015110 <_fflush_r>
 8014176:	b988      	cbnz	r0, 801419c <__swbuf_r+0x90>
 8014178:	4638      	mov	r0, r7
 801417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801417c:	4b0a      	ldr	r3, [pc, #40]	; (80141a8 <__swbuf_r+0x9c>)
 801417e:	429c      	cmp	r4, r3
 8014180:	d101      	bne.n	8014186 <__swbuf_r+0x7a>
 8014182:	68ac      	ldr	r4, [r5, #8]
 8014184:	e7cf      	b.n	8014126 <__swbuf_r+0x1a>
 8014186:	4b09      	ldr	r3, [pc, #36]	; (80141ac <__swbuf_r+0xa0>)
 8014188:	429c      	cmp	r4, r3
 801418a:	bf08      	it	eq
 801418c:	68ec      	ldreq	r4, [r5, #12]
 801418e:	e7ca      	b.n	8014126 <__swbuf_r+0x1a>
 8014190:	4621      	mov	r1, r4
 8014192:	4628      	mov	r0, r5
 8014194:	f000 f81e 	bl	80141d4 <__swsetup_r>
 8014198:	2800      	cmp	r0, #0
 801419a:	d0cb      	beq.n	8014134 <__swbuf_r+0x28>
 801419c:	f04f 37ff 	mov.w	r7, #4294967295
 80141a0:	e7ea      	b.n	8014178 <__swbuf_r+0x6c>
 80141a2:	bf00      	nop
 80141a4:	08048d7c 	.word	0x08048d7c
 80141a8:	08048d9c 	.word	0x08048d9c
 80141ac:	08048d5c 	.word	0x08048d5c

080141b0 <_write_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d07      	ldr	r5, [pc, #28]	; (80141d0 <_write_r+0x20>)
 80141b4:	4604      	mov	r4, r0
 80141b6:	4608      	mov	r0, r1
 80141b8:	4611      	mov	r1, r2
 80141ba:	2200      	movs	r2, #0
 80141bc:	602a      	str	r2, [r5, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	f7ef ffb1 	bl	8004126 <_write>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d102      	bne.n	80141ce <_write_r+0x1e>
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	b103      	cbz	r3, 80141ce <_write_r+0x1e>
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	bd38      	pop	{r3, r4, r5, pc}
 80141d0:	20005d88 	.word	0x20005d88

080141d4 <__swsetup_r>:
 80141d4:	4b32      	ldr	r3, [pc, #200]	; (80142a0 <__swsetup_r+0xcc>)
 80141d6:	b570      	push	{r4, r5, r6, lr}
 80141d8:	681d      	ldr	r5, [r3, #0]
 80141da:	4606      	mov	r6, r0
 80141dc:	460c      	mov	r4, r1
 80141de:	b125      	cbz	r5, 80141ea <__swsetup_r+0x16>
 80141e0:	69ab      	ldr	r3, [r5, #24]
 80141e2:	b913      	cbnz	r3, 80141ea <__swsetup_r+0x16>
 80141e4:	4628      	mov	r0, r5
 80141e6:	f001 f827 	bl	8015238 <__sinit>
 80141ea:	4b2e      	ldr	r3, [pc, #184]	; (80142a4 <__swsetup_r+0xd0>)
 80141ec:	429c      	cmp	r4, r3
 80141ee:	d10f      	bne.n	8014210 <__swsetup_r+0x3c>
 80141f0:	686c      	ldr	r4, [r5, #4]
 80141f2:	89a3      	ldrh	r3, [r4, #12]
 80141f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141f8:	0719      	lsls	r1, r3, #28
 80141fa:	d42c      	bmi.n	8014256 <__swsetup_r+0x82>
 80141fc:	06dd      	lsls	r5, r3, #27
 80141fe:	d411      	bmi.n	8014224 <__swsetup_r+0x50>
 8014200:	2309      	movs	r3, #9
 8014202:	6033      	str	r3, [r6, #0]
 8014204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014208:	81a3      	strh	r3, [r4, #12]
 801420a:	f04f 30ff 	mov.w	r0, #4294967295
 801420e:	e03e      	b.n	801428e <__swsetup_r+0xba>
 8014210:	4b25      	ldr	r3, [pc, #148]	; (80142a8 <__swsetup_r+0xd4>)
 8014212:	429c      	cmp	r4, r3
 8014214:	d101      	bne.n	801421a <__swsetup_r+0x46>
 8014216:	68ac      	ldr	r4, [r5, #8]
 8014218:	e7eb      	b.n	80141f2 <__swsetup_r+0x1e>
 801421a:	4b24      	ldr	r3, [pc, #144]	; (80142ac <__swsetup_r+0xd8>)
 801421c:	429c      	cmp	r4, r3
 801421e:	bf08      	it	eq
 8014220:	68ec      	ldreq	r4, [r5, #12]
 8014222:	e7e6      	b.n	80141f2 <__swsetup_r+0x1e>
 8014224:	0758      	lsls	r0, r3, #29
 8014226:	d512      	bpl.n	801424e <__swsetup_r+0x7a>
 8014228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801422a:	b141      	cbz	r1, 801423e <__swsetup_r+0x6a>
 801422c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014230:	4299      	cmp	r1, r3
 8014232:	d002      	beq.n	801423a <__swsetup_r+0x66>
 8014234:	4630      	mov	r0, r6
 8014236:	f7fd f8b1 	bl	801139c <_free_r>
 801423a:	2300      	movs	r3, #0
 801423c:	6363      	str	r3, [r4, #52]	; 0x34
 801423e:	89a3      	ldrh	r3, [r4, #12]
 8014240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014244:	81a3      	strh	r3, [r4, #12]
 8014246:	2300      	movs	r3, #0
 8014248:	6063      	str	r3, [r4, #4]
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	6023      	str	r3, [r4, #0]
 801424e:	89a3      	ldrh	r3, [r4, #12]
 8014250:	f043 0308 	orr.w	r3, r3, #8
 8014254:	81a3      	strh	r3, [r4, #12]
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	b94b      	cbnz	r3, 801426e <__swsetup_r+0x9a>
 801425a:	89a3      	ldrh	r3, [r4, #12]
 801425c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014264:	d003      	beq.n	801426e <__swsetup_r+0x9a>
 8014266:	4621      	mov	r1, r4
 8014268:	4630      	mov	r0, r6
 801426a:	f001 fc7f 	bl	8015b6c <__smakebuf_r>
 801426e:	89a0      	ldrh	r0, [r4, #12]
 8014270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014274:	f010 0301 	ands.w	r3, r0, #1
 8014278:	d00a      	beq.n	8014290 <__swsetup_r+0xbc>
 801427a:	2300      	movs	r3, #0
 801427c:	60a3      	str	r3, [r4, #8]
 801427e:	6963      	ldr	r3, [r4, #20]
 8014280:	425b      	negs	r3, r3
 8014282:	61a3      	str	r3, [r4, #24]
 8014284:	6923      	ldr	r3, [r4, #16]
 8014286:	b943      	cbnz	r3, 801429a <__swsetup_r+0xc6>
 8014288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801428c:	d1ba      	bne.n	8014204 <__swsetup_r+0x30>
 801428e:	bd70      	pop	{r4, r5, r6, pc}
 8014290:	0781      	lsls	r1, r0, #30
 8014292:	bf58      	it	pl
 8014294:	6963      	ldrpl	r3, [r4, #20]
 8014296:	60a3      	str	r3, [r4, #8]
 8014298:	e7f4      	b.n	8014284 <__swsetup_r+0xb0>
 801429a:	2000      	movs	r0, #0
 801429c:	e7f7      	b.n	801428e <__swsetup_r+0xba>
 801429e:	bf00      	nop
 80142a0:	200002c8 	.word	0x200002c8
 80142a4:	08048d7c 	.word	0x08048d7c
 80142a8:	08048d9c 	.word	0x08048d9c
 80142ac:	08048d5c 	.word	0x08048d5c

080142b0 <abort>:
 80142b0:	b508      	push	{r3, lr}
 80142b2:	2006      	movs	r0, #6
 80142b4:	f002 fed4 	bl	8017060 <raise>
 80142b8:	2001      	movs	r0, #1
 80142ba:	f7ef ff0d 	bl	80040d8 <_exit>

080142be <abs>:
 80142be:	2800      	cmp	r0, #0
 80142c0:	bfb8      	it	lt
 80142c2:	4240      	neglt	r0, r0
 80142c4:	4770      	bx	lr
	...

080142c8 <_close_r>:
 80142c8:	b538      	push	{r3, r4, r5, lr}
 80142ca:	4d06      	ldr	r5, [pc, #24]	; (80142e4 <_close_r+0x1c>)
 80142cc:	2300      	movs	r3, #0
 80142ce:	4604      	mov	r4, r0
 80142d0:	4608      	mov	r0, r1
 80142d2:	602b      	str	r3, [r5, #0]
 80142d4:	f7ef ff43 	bl	800415e <_close>
 80142d8:	1c43      	adds	r3, r0, #1
 80142da:	d102      	bne.n	80142e2 <_close_r+0x1a>
 80142dc:	682b      	ldr	r3, [r5, #0]
 80142de:	b103      	cbz	r3, 80142e2 <_close_r+0x1a>
 80142e0:	6023      	str	r3, [r4, #0]
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	20005d88 	.word	0x20005d88

080142e8 <div>:
 80142e8:	2900      	cmp	r1, #0
 80142ea:	b510      	push	{r4, lr}
 80142ec:	fb91 f4f2 	sdiv	r4, r1, r2
 80142f0:	fb02 1314 	mls	r3, r2, r4, r1
 80142f4:	db06      	blt.n	8014304 <div+0x1c>
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	da01      	bge.n	80142fe <div+0x16>
 80142fa:	3401      	adds	r4, #1
 80142fc:	1a9b      	subs	r3, r3, r2
 80142fe:	e9c0 4300 	strd	r4, r3, [r0]
 8014302:	bd10      	pop	{r4, pc}
 8014304:	2b00      	cmp	r3, #0
 8014306:	bfc4      	itt	gt
 8014308:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801430c:	189b      	addgt	r3, r3, r2
 801430e:	e7f6      	b.n	80142fe <div+0x16>

08014310 <quorem>:
 8014310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	6903      	ldr	r3, [r0, #16]
 8014316:	690c      	ldr	r4, [r1, #16]
 8014318:	42a3      	cmp	r3, r4
 801431a:	4607      	mov	r7, r0
 801431c:	f2c0 8081 	blt.w	8014422 <quorem+0x112>
 8014320:	3c01      	subs	r4, #1
 8014322:	f101 0814 	add.w	r8, r1, #20
 8014326:	f100 0514 	add.w	r5, r0, #20
 801432a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801432e:	9301      	str	r3, [sp, #4]
 8014330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014338:	3301      	adds	r3, #1
 801433a:	429a      	cmp	r2, r3
 801433c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014340:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014344:	fbb2 f6f3 	udiv	r6, r2, r3
 8014348:	d331      	bcc.n	80143ae <quorem+0x9e>
 801434a:	f04f 0e00 	mov.w	lr, #0
 801434e:	4640      	mov	r0, r8
 8014350:	46ac      	mov	ip, r5
 8014352:	46f2      	mov	sl, lr
 8014354:	f850 2b04 	ldr.w	r2, [r0], #4
 8014358:	b293      	uxth	r3, r2
 801435a:	fb06 e303 	mla	r3, r6, r3, lr
 801435e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014362:	b29b      	uxth	r3, r3
 8014364:	ebaa 0303 	sub.w	r3, sl, r3
 8014368:	f8dc a000 	ldr.w	sl, [ip]
 801436c:	0c12      	lsrs	r2, r2, #16
 801436e:	fa13 f38a 	uxtah	r3, r3, sl
 8014372:	fb06 e202 	mla	r2, r6, r2, lr
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	9b00      	ldr	r3, [sp, #0]
 801437a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801437e:	b292      	uxth	r2, r2
 8014380:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014388:	f8bd 3000 	ldrh.w	r3, [sp]
 801438c:	4581      	cmp	r9, r0
 801438e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014392:	f84c 3b04 	str.w	r3, [ip], #4
 8014396:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801439a:	d2db      	bcs.n	8014354 <quorem+0x44>
 801439c:	f855 300b 	ldr.w	r3, [r5, fp]
 80143a0:	b92b      	cbnz	r3, 80143ae <quorem+0x9e>
 80143a2:	9b01      	ldr	r3, [sp, #4]
 80143a4:	3b04      	subs	r3, #4
 80143a6:	429d      	cmp	r5, r3
 80143a8:	461a      	mov	r2, r3
 80143aa:	d32e      	bcc.n	801440a <quorem+0xfa>
 80143ac:	613c      	str	r4, [r7, #16]
 80143ae:	4638      	mov	r0, r7
 80143b0:	f001 ff20 	bl	80161f4 <__mcmp>
 80143b4:	2800      	cmp	r0, #0
 80143b6:	db24      	blt.n	8014402 <quorem+0xf2>
 80143b8:	3601      	adds	r6, #1
 80143ba:	4628      	mov	r0, r5
 80143bc:	f04f 0c00 	mov.w	ip, #0
 80143c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80143c4:	f8d0 e000 	ldr.w	lr, [r0]
 80143c8:	b293      	uxth	r3, r2
 80143ca:	ebac 0303 	sub.w	r3, ip, r3
 80143ce:	0c12      	lsrs	r2, r2, #16
 80143d0:	fa13 f38e 	uxtah	r3, r3, lr
 80143d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80143d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143dc:	b29b      	uxth	r3, r3
 80143de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143e2:	45c1      	cmp	r9, r8
 80143e4:	f840 3b04 	str.w	r3, [r0], #4
 80143e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143ec:	d2e8      	bcs.n	80143c0 <quorem+0xb0>
 80143ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80143f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80143f6:	b922      	cbnz	r2, 8014402 <quorem+0xf2>
 80143f8:	3b04      	subs	r3, #4
 80143fa:	429d      	cmp	r5, r3
 80143fc:	461a      	mov	r2, r3
 80143fe:	d30a      	bcc.n	8014416 <quorem+0x106>
 8014400:	613c      	str	r4, [r7, #16]
 8014402:	4630      	mov	r0, r6
 8014404:	b003      	add	sp, #12
 8014406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440a:	6812      	ldr	r2, [r2, #0]
 801440c:	3b04      	subs	r3, #4
 801440e:	2a00      	cmp	r2, #0
 8014410:	d1cc      	bne.n	80143ac <quorem+0x9c>
 8014412:	3c01      	subs	r4, #1
 8014414:	e7c7      	b.n	80143a6 <quorem+0x96>
 8014416:	6812      	ldr	r2, [r2, #0]
 8014418:	3b04      	subs	r3, #4
 801441a:	2a00      	cmp	r2, #0
 801441c:	d1f0      	bne.n	8014400 <quorem+0xf0>
 801441e:	3c01      	subs	r4, #1
 8014420:	e7eb      	b.n	80143fa <quorem+0xea>
 8014422:	2000      	movs	r0, #0
 8014424:	e7ee      	b.n	8014404 <quorem+0xf4>
	...

08014428 <_dtoa_r>:
 8014428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801442c:	ed2d 8b04 	vpush	{d8-d9}
 8014430:	ec57 6b10 	vmov	r6, r7, d0
 8014434:	b093      	sub	sp, #76	; 0x4c
 8014436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014438:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801443c:	9106      	str	r1, [sp, #24]
 801443e:	ee10 aa10 	vmov	sl, s0
 8014442:	4604      	mov	r4, r0
 8014444:	9209      	str	r2, [sp, #36]	; 0x24
 8014446:	930c      	str	r3, [sp, #48]	; 0x30
 8014448:	46bb      	mov	fp, r7
 801444a:	b975      	cbnz	r5, 801446a <_dtoa_r+0x42>
 801444c:	2010      	movs	r0, #16
 801444e:	f7fc fd0d 	bl	8010e6c <malloc>
 8014452:	4602      	mov	r2, r0
 8014454:	6260      	str	r0, [r4, #36]	; 0x24
 8014456:	b920      	cbnz	r0, 8014462 <_dtoa_r+0x3a>
 8014458:	4ba7      	ldr	r3, [pc, #668]	; (80146f8 <_dtoa_r+0x2d0>)
 801445a:	21ea      	movs	r1, #234	; 0xea
 801445c:	48a7      	ldr	r0, [pc, #668]	; (80146fc <_dtoa_r+0x2d4>)
 801445e:	f7fc fca3 	bl	8010da8 <__assert_func>
 8014462:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014466:	6005      	str	r5, [r0, #0]
 8014468:	60c5      	str	r5, [r0, #12]
 801446a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801446c:	6819      	ldr	r1, [r3, #0]
 801446e:	b151      	cbz	r1, 8014486 <_dtoa_r+0x5e>
 8014470:	685a      	ldr	r2, [r3, #4]
 8014472:	604a      	str	r2, [r1, #4]
 8014474:	2301      	movs	r3, #1
 8014476:	4093      	lsls	r3, r2
 8014478:	608b      	str	r3, [r1, #8]
 801447a:	4620      	mov	r0, r4
 801447c:	f001 fc2e 	bl	8015cdc <_Bfree>
 8014480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014482:	2200      	movs	r2, #0
 8014484:	601a      	str	r2, [r3, #0]
 8014486:	1e3b      	subs	r3, r7, #0
 8014488:	bfaa      	itet	ge
 801448a:	2300      	movge	r3, #0
 801448c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014490:	f8c8 3000 	strge.w	r3, [r8]
 8014494:	4b9a      	ldr	r3, [pc, #616]	; (8014700 <_dtoa_r+0x2d8>)
 8014496:	bfbc      	itt	lt
 8014498:	2201      	movlt	r2, #1
 801449a:	f8c8 2000 	strlt.w	r2, [r8]
 801449e:	ea33 030b 	bics.w	r3, r3, fp
 80144a2:	d11b      	bne.n	80144dc <_dtoa_r+0xb4>
 80144a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80144aa:	6013      	str	r3, [r2, #0]
 80144ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80144b0:	4333      	orrs	r3, r6
 80144b2:	f000 8592 	beq.w	8014fda <_dtoa_r+0xbb2>
 80144b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144b8:	b963      	cbnz	r3, 80144d4 <_dtoa_r+0xac>
 80144ba:	4b92      	ldr	r3, [pc, #584]	; (8014704 <_dtoa_r+0x2dc>)
 80144bc:	e022      	b.n	8014504 <_dtoa_r+0xdc>
 80144be:	4b92      	ldr	r3, [pc, #584]	; (8014708 <_dtoa_r+0x2e0>)
 80144c0:	9301      	str	r3, [sp, #4]
 80144c2:	3308      	adds	r3, #8
 80144c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144c6:	6013      	str	r3, [r2, #0]
 80144c8:	9801      	ldr	r0, [sp, #4]
 80144ca:	b013      	add	sp, #76	; 0x4c
 80144cc:	ecbd 8b04 	vpop	{d8-d9}
 80144d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d4:	4b8b      	ldr	r3, [pc, #556]	; (8014704 <_dtoa_r+0x2dc>)
 80144d6:	9301      	str	r3, [sp, #4]
 80144d8:	3303      	adds	r3, #3
 80144da:	e7f3      	b.n	80144c4 <_dtoa_r+0x9c>
 80144dc:	2200      	movs	r2, #0
 80144de:	2300      	movs	r3, #0
 80144e0:	4650      	mov	r0, sl
 80144e2:	4659      	mov	r1, fp
 80144e4:	f7ec fb10 	bl	8000b08 <__aeabi_dcmpeq>
 80144e8:	ec4b ab19 	vmov	d9, sl, fp
 80144ec:	4680      	mov	r8, r0
 80144ee:	b158      	cbz	r0, 8014508 <_dtoa_r+0xe0>
 80144f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144f2:	2301      	movs	r3, #1
 80144f4:	6013      	str	r3, [r2, #0]
 80144f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	f000 856b 	beq.w	8014fd4 <_dtoa_r+0xbac>
 80144fe:	4883      	ldr	r0, [pc, #524]	; (801470c <_dtoa_r+0x2e4>)
 8014500:	6018      	str	r0, [r3, #0]
 8014502:	1e43      	subs	r3, r0, #1
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	e7df      	b.n	80144c8 <_dtoa_r+0xa0>
 8014508:	ec4b ab10 	vmov	d0, sl, fp
 801450c:	aa10      	add	r2, sp, #64	; 0x40
 801450e:	a911      	add	r1, sp, #68	; 0x44
 8014510:	4620      	mov	r0, r4
 8014512:	f001 ff91 	bl	8016438 <__d2b>
 8014516:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801451a:	ee08 0a10 	vmov	s16, r0
 801451e:	2d00      	cmp	r5, #0
 8014520:	f000 8084 	beq.w	801462c <_dtoa_r+0x204>
 8014524:	ee19 3a90 	vmov	r3, s19
 8014528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801452c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014530:	4656      	mov	r6, sl
 8014532:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801453a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801453e:	4b74      	ldr	r3, [pc, #464]	; (8014710 <_dtoa_r+0x2e8>)
 8014540:	2200      	movs	r2, #0
 8014542:	4630      	mov	r0, r6
 8014544:	4639      	mov	r1, r7
 8014546:	f7eb febf 	bl	80002c8 <__aeabi_dsub>
 801454a:	a365      	add	r3, pc, #404	; (adr r3, 80146e0 <_dtoa_r+0x2b8>)
 801454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014550:	f7ec f872 	bl	8000638 <__aeabi_dmul>
 8014554:	a364      	add	r3, pc, #400	; (adr r3, 80146e8 <_dtoa_r+0x2c0>)
 8014556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455a:	f7eb feb7 	bl	80002cc <__adddf3>
 801455e:	4606      	mov	r6, r0
 8014560:	4628      	mov	r0, r5
 8014562:	460f      	mov	r7, r1
 8014564:	f7eb fffe 	bl	8000564 <__aeabi_i2d>
 8014568:	a361      	add	r3, pc, #388	; (adr r3, 80146f0 <_dtoa_r+0x2c8>)
 801456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456e:	f7ec f863 	bl	8000638 <__aeabi_dmul>
 8014572:	4602      	mov	r2, r0
 8014574:	460b      	mov	r3, r1
 8014576:	4630      	mov	r0, r6
 8014578:	4639      	mov	r1, r7
 801457a:	f7eb fea7 	bl	80002cc <__adddf3>
 801457e:	4606      	mov	r6, r0
 8014580:	460f      	mov	r7, r1
 8014582:	f7ec fb09 	bl	8000b98 <__aeabi_d2iz>
 8014586:	2200      	movs	r2, #0
 8014588:	9000      	str	r0, [sp, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	4630      	mov	r0, r6
 801458e:	4639      	mov	r1, r7
 8014590:	f7ec fac4 	bl	8000b1c <__aeabi_dcmplt>
 8014594:	b150      	cbz	r0, 80145ac <_dtoa_r+0x184>
 8014596:	9800      	ldr	r0, [sp, #0]
 8014598:	f7eb ffe4 	bl	8000564 <__aeabi_i2d>
 801459c:	4632      	mov	r2, r6
 801459e:	463b      	mov	r3, r7
 80145a0:	f7ec fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80145a4:	b910      	cbnz	r0, 80145ac <_dtoa_r+0x184>
 80145a6:	9b00      	ldr	r3, [sp, #0]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	9300      	str	r3, [sp, #0]
 80145ac:	9b00      	ldr	r3, [sp, #0]
 80145ae:	2b16      	cmp	r3, #22
 80145b0:	d85a      	bhi.n	8014668 <_dtoa_r+0x240>
 80145b2:	9a00      	ldr	r2, [sp, #0]
 80145b4:	4b57      	ldr	r3, [pc, #348]	; (8014714 <_dtoa_r+0x2ec>)
 80145b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80145ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145be:	ec51 0b19 	vmov	r0, r1, d9
 80145c2:	f7ec faab 	bl	8000b1c <__aeabi_dcmplt>
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d050      	beq.n	801466c <_dtoa_r+0x244>
 80145ca:	9b00      	ldr	r3, [sp, #0]
 80145cc:	3b01      	subs	r3, #1
 80145ce:	9300      	str	r3, [sp, #0]
 80145d0:	2300      	movs	r3, #0
 80145d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80145d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145d6:	1b5d      	subs	r5, r3, r5
 80145d8:	1e6b      	subs	r3, r5, #1
 80145da:	9305      	str	r3, [sp, #20]
 80145dc:	bf45      	ittet	mi
 80145de:	f1c5 0301 	rsbmi	r3, r5, #1
 80145e2:	9304      	strmi	r3, [sp, #16]
 80145e4:	2300      	movpl	r3, #0
 80145e6:	2300      	movmi	r3, #0
 80145e8:	bf4c      	ite	mi
 80145ea:	9305      	strmi	r3, [sp, #20]
 80145ec:	9304      	strpl	r3, [sp, #16]
 80145ee:	9b00      	ldr	r3, [sp, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	db3d      	blt.n	8014670 <_dtoa_r+0x248>
 80145f4:	9b05      	ldr	r3, [sp, #20]
 80145f6:	9a00      	ldr	r2, [sp, #0]
 80145f8:	920a      	str	r2, [sp, #40]	; 0x28
 80145fa:	4413      	add	r3, r2
 80145fc:	9305      	str	r3, [sp, #20]
 80145fe:	2300      	movs	r3, #0
 8014600:	9307      	str	r3, [sp, #28]
 8014602:	9b06      	ldr	r3, [sp, #24]
 8014604:	2b09      	cmp	r3, #9
 8014606:	f200 8089 	bhi.w	801471c <_dtoa_r+0x2f4>
 801460a:	2b05      	cmp	r3, #5
 801460c:	bfc4      	itt	gt
 801460e:	3b04      	subgt	r3, #4
 8014610:	9306      	strgt	r3, [sp, #24]
 8014612:	9b06      	ldr	r3, [sp, #24]
 8014614:	f1a3 0302 	sub.w	r3, r3, #2
 8014618:	bfcc      	ite	gt
 801461a:	2500      	movgt	r5, #0
 801461c:	2501      	movle	r5, #1
 801461e:	2b03      	cmp	r3, #3
 8014620:	f200 8087 	bhi.w	8014732 <_dtoa_r+0x30a>
 8014624:	e8df f003 	tbb	[pc, r3]
 8014628:	59383a2d 	.word	0x59383a2d
 801462c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014630:	441d      	add	r5, r3
 8014632:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014636:	2b20      	cmp	r3, #32
 8014638:	bfc1      	itttt	gt
 801463a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801463e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014642:	fa0b f303 	lslgt.w	r3, fp, r3
 8014646:	fa26 f000 	lsrgt.w	r0, r6, r0
 801464a:	bfda      	itte	le
 801464c:	f1c3 0320 	rsble	r3, r3, #32
 8014650:	fa06 f003 	lslle.w	r0, r6, r3
 8014654:	4318      	orrgt	r0, r3
 8014656:	f7eb ff75 	bl	8000544 <__aeabi_ui2d>
 801465a:	2301      	movs	r3, #1
 801465c:	4606      	mov	r6, r0
 801465e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014662:	3d01      	subs	r5, #1
 8014664:	930e      	str	r3, [sp, #56]	; 0x38
 8014666:	e76a      	b.n	801453e <_dtoa_r+0x116>
 8014668:	2301      	movs	r3, #1
 801466a:	e7b2      	b.n	80145d2 <_dtoa_r+0x1aa>
 801466c:	900b      	str	r0, [sp, #44]	; 0x2c
 801466e:	e7b1      	b.n	80145d4 <_dtoa_r+0x1ac>
 8014670:	9b04      	ldr	r3, [sp, #16]
 8014672:	9a00      	ldr	r2, [sp, #0]
 8014674:	1a9b      	subs	r3, r3, r2
 8014676:	9304      	str	r3, [sp, #16]
 8014678:	4253      	negs	r3, r2
 801467a:	9307      	str	r3, [sp, #28]
 801467c:	2300      	movs	r3, #0
 801467e:	930a      	str	r3, [sp, #40]	; 0x28
 8014680:	e7bf      	b.n	8014602 <_dtoa_r+0x1da>
 8014682:	2300      	movs	r3, #0
 8014684:	9308      	str	r3, [sp, #32]
 8014686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014688:	2b00      	cmp	r3, #0
 801468a:	dc55      	bgt.n	8014738 <_dtoa_r+0x310>
 801468c:	2301      	movs	r3, #1
 801468e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014692:	461a      	mov	r2, r3
 8014694:	9209      	str	r2, [sp, #36]	; 0x24
 8014696:	e00c      	b.n	80146b2 <_dtoa_r+0x28a>
 8014698:	2301      	movs	r3, #1
 801469a:	e7f3      	b.n	8014684 <_dtoa_r+0x25c>
 801469c:	2300      	movs	r3, #0
 801469e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146a0:	9308      	str	r3, [sp, #32]
 80146a2:	9b00      	ldr	r3, [sp, #0]
 80146a4:	4413      	add	r3, r2
 80146a6:	9302      	str	r3, [sp, #8]
 80146a8:	3301      	adds	r3, #1
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	9303      	str	r3, [sp, #12]
 80146ae:	bfb8      	it	lt
 80146b0:	2301      	movlt	r3, #1
 80146b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80146b4:	2200      	movs	r2, #0
 80146b6:	6042      	str	r2, [r0, #4]
 80146b8:	2204      	movs	r2, #4
 80146ba:	f102 0614 	add.w	r6, r2, #20
 80146be:	429e      	cmp	r6, r3
 80146c0:	6841      	ldr	r1, [r0, #4]
 80146c2:	d93d      	bls.n	8014740 <_dtoa_r+0x318>
 80146c4:	4620      	mov	r0, r4
 80146c6:	f001 fac9 	bl	8015c5c <_Balloc>
 80146ca:	9001      	str	r0, [sp, #4]
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d13b      	bne.n	8014748 <_dtoa_r+0x320>
 80146d0:	4b11      	ldr	r3, [pc, #68]	; (8014718 <_dtoa_r+0x2f0>)
 80146d2:	4602      	mov	r2, r0
 80146d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80146d8:	e6c0      	b.n	801445c <_dtoa_r+0x34>
 80146da:	2301      	movs	r3, #1
 80146dc:	e7df      	b.n	801469e <_dtoa_r+0x276>
 80146de:	bf00      	nop
 80146e0:	636f4361 	.word	0x636f4361
 80146e4:	3fd287a7 	.word	0x3fd287a7
 80146e8:	8b60c8b3 	.word	0x8b60c8b3
 80146ec:	3fc68a28 	.word	0x3fc68a28
 80146f0:	509f79fb 	.word	0x509f79fb
 80146f4:	3fd34413 	.word	0x3fd34413
 80146f8:	080486c4 	.word	0x080486c4
 80146fc:	08048cee 	.word	0x08048cee
 8014700:	7ff00000 	.word	0x7ff00000
 8014704:	08048cea 	.word	0x08048cea
 8014708:	08048ce1 	.word	0x08048ce1
 801470c:	08048ff9 	.word	0x08048ff9
 8014710:	3ff80000 	.word	0x3ff80000
 8014714:	08048f20 	.word	0x08048f20
 8014718:	08048d49 	.word	0x08048d49
 801471c:	2501      	movs	r5, #1
 801471e:	2300      	movs	r3, #0
 8014720:	9306      	str	r3, [sp, #24]
 8014722:	9508      	str	r5, [sp, #32]
 8014724:	f04f 33ff 	mov.w	r3, #4294967295
 8014728:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801472c:	2200      	movs	r2, #0
 801472e:	2312      	movs	r3, #18
 8014730:	e7b0      	b.n	8014694 <_dtoa_r+0x26c>
 8014732:	2301      	movs	r3, #1
 8014734:	9308      	str	r3, [sp, #32]
 8014736:	e7f5      	b.n	8014724 <_dtoa_r+0x2fc>
 8014738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801473a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801473e:	e7b8      	b.n	80146b2 <_dtoa_r+0x28a>
 8014740:	3101      	adds	r1, #1
 8014742:	6041      	str	r1, [r0, #4]
 8014744:	0052      	lsls	r2, r2, #1
 8014746:	e7b8      	b.n	80146ba <_dtoa_r+0x292>
 8014748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801474a:	9a01      	ldr	r2, [sp, #4]
 801474c:	601a      	str	r2, [r3, #0]
 801474e:	9b03      	ldr	r3, [sp, #12]
 8014750:	2b0e      	cmp	r3, #14
 8014752:	f200 809d 	bhi.w	8014890 <_dtoa_r+0x468>
 8014756:	2d00      	cmp	r5, #0
 8014758:	f000 809a 	beq.w	8014890 <_dtoa_r+0x468>
 801475c:	9b00      	ldr	r3, [sp, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	dd32      	ble.n	80147c8 <_dtoa_r+0x3a0>
 8014762:	4ab7      	ldr	r2, [pc, #732]	; (8014a40 <_dtoa_r+0x618>)
 8014764:	f003 030f 	and.w	r3, r3, #15
 8014768:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801476c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014770:	9b00      	ldr	r3, [sp, #0]
 8014772:	05d8      	lsls	r0, r3, #23
 8014774:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014778:	d516      	bpl.n	80147a8 <_dtoa_r+0x380>
 801477a:	4bb2      	ldr	r3, [pc, #712]	; (8014a44 <_dtoa_r+0x61c>)
 801477c:	ec51 0b19 	vmov	r0, r1, d9
 8014780:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014784:	f7ec f882 	bl	800088c <__aeabi_ddiv>
 8014788:	f007 070f 	and.w	r7, r7, #15
 801478c:	4682      	mov	sl, r0
 801478e:	468b      	mov	fp, r1
 8014790:	2503      	movs	r5, #3
 8014792:	4eac      	ldr	r6, [pc, #688]	; (8014a44 <_dtoa_r+0x61c>)
 8014794:	b957      	cbnz	r7, 80147ac <_dtoa_r+0x384>
 8014796:	4642      	mov	r2, r8
 8014798:	464b      	mov	r3, r9
 801479a:	4650      	mov	r0, sl
 801479c:	4659      	mov	r1, fp
 801479e:	f7ec f875 	bl	800088c <__aeabi_ddiv>
 80147a2:	4682      	mov	sl, r0
 80147a4:	468b      	mov	fp, r1
 80147a6:	e028      	b.n	80147fa <_dtoa_r+0x3d2>
 80147a8:	2502      	movs	r5, #2
 80147aa:	e7f2      	b.n	8014792 <_dtoa_r+0x36a>
 80147ac:	07f9      	lsls	r1, r7, #31
 80147ae:	d508      	bpl.n	80147c2 <_dtoa_r+0x39a>
 80147b0:	4640      	mov	r0, r8
 80147b2:	4649      	mov	r1, r9
 80147b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80147b8:	f7eb ff3e 	bl	8000638 <__aeabi_dmul>
 80147bc:	3501      	adds	r5, #1
 80147be:	4680      	mov	r8, r0
 80147c0:	4689      	mov	r9, r1
 80147c2:	107f      	asrs	r7, r7, #1
 80147c4:	3608      	adds	r6, #8
 80147c6:	e7e5      	b.n	8014794 <_dtoa_r+0x36c>
 80147c8:	f000 809b 	beq.w	8014902 <_dtoa_r+0x4da>
 80147cc:	9b00      	ldr	r3, [sp, #0]
 80147ce:	4f9d      	ldr	r7, [pc, #628]	; (8014a44 <_dtoa_r+0x61c>)
 80147d0:	425e      	negs	r6, r3
 80147d2:	4b9b      	ldr	r3, [pc, #620]	; (8014a40 <_dtoa_r+0x618>)
 80147d4:	f006 020f 	and.w	r2, r6, #15
 80147d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e0:	ec51 0b19 	vmov	r0, r1, d9
 80147e4:	f7eb ff28 	bl	8000638 <__aeabi_dmul>
 80147e8:	1136      	asrs	r6, r6, #4
 80147ea:	4682      	mov	sl, r0
 80147ec:	468b      	mov	fp, r1
 80147ee:	2300      	movs	r3, #0
 80147f0:	2502      	movs	r5, #2
 80147f2:	2e00      	cmp	r6, #0
 80147f4:	d17a      	bne.n	80148ec <_dtoa_r+0x4c4>
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d1d3      	bne.n	80147a2 <_dtoa_r+0x37a>
 80147fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f000 8082 	beq.w	8014906 <_dtoa_r+0x4de>
 8014802:	4b91      	ldr	r3, [pc, #580]	; (8014a48 <_dtoa_r+0x620>)
 8014804:	2200      	movs	r2, #0
 8014806:	4650      	mov	r0, sl
 8014808:	4659      	mov	r1, fp
 801480a:	f7ec f987 	bl	8000b1c <__aeabi_dcmplt>
 801480e:	2800      	cmp	r0, #0
 8014810:	d079      	beq.n	8014906 <_dtoa_r+0x4de>
 8014812:	9b03      	ldr	r3, [sp, #12]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d076      	beq.n	8014906 <_dtoa_r+0x4de>
 8014818:	9b02      	ldr	r3, [sp, #8]
 801481a:	2b00      	cmp	r3, #0
 801481c:	dd36      	ble.n	801488c <_dtoa_r+0x464>
 801481e:	9b00      	ldr	r3, [sp, #0]
 8014820:	4650      	mov	r0, sl
 8014822:	4659      	mov	r1, fp
 8014824:	1e5f      	subs	r7, r3, #1
 8014826:	2200      	movs	r2, #0
 8014828:	4b88      	ldr	r3, [pc, #544]	; (8014a4c <_dtoa_r+0x624>)
 801482a:	f7eb ff05 	bl	8000638 <__aeabi_dmul>
 801482e:	9e02      	ldr	r6, [sp, #8]
 8014830:	4682      	mov	sl, r0
 8014832:	468b      	mov	fp, r1
 8014834:	3501      	adds	r5, #1
 8014836:	4628      	mov	r0, r5
 8014838:	f7eb fe94 	bl	8000564 <__aeabi_i2d>
 801483c:	4652      	mov	r2, sl
 801483e:	465b      	mov	r3, fp
 8014840:	f7eb fefa 	bl	8000638 <__aeabi_dmul>
 8014844:	4b82      	ldr	r3, [pc, #520]	; (8014a50 <_dtoa_r+0x628>)
 8014846:	2200      	movs	r2, #0
 8014848:	f7eb fd40 	bl	80002cc <__adddf3>
 801484c:	46d0      	mov	r8, sl
 801484e:	46d9      	mov	r9, fp
 8014850:	4682      	mov	sl, r0
 8014852:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014856:	2e00      	cmp	r6, #0
 8014858:	d158      	bne.n	801490c <_dtoa_r+0x4e4>
 801485a:	4b7e      	ldr	r3, [pc, #504]	; (8014a54 <_dtoa_r+0x62c>)
 801485c:	2200      	movs	r2, #0
 801485e:	4640      	mov	r0, r8
 8014860:	4649      	mov	r1, r9
 8014862:	f7eb fd31 	bl	80002c8 <__aeabi_dsub>
 8014866:	4652      	mov	r2, sl
 8014868:	465b      	mov	r3, fp
 801486a:	4680      	mov	r8, r0
 801486c:	4689      	mov	r9, r1
 801486e:	f7ec f973 	bl	8000b58 <__aeabi_dcmpgt>
 8014872:	2800      	cmp	r0, #0
 8014874:	f040 8295 	bne.w	8014da2 <_dtoa_r+0x97a>
 8014878:	4652      	mov	r2, sl
 801487a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801487e:	4640      	mov	r0, r8
 8014880:	4649      	mov	r1, r9
 8014882:	f7ec f94b 	bl	8000b1c <__aeabi_dcmplt>
 8014886:	2800      	cmp	r0, #0
 8014888:	f040 8289 	bne.w	8014d9e <_dtoa_r+0x976>
 801488c:	ec5b ab19 	vmov	sl, fp, d9
 8014890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014892:	2b00      	cmp	r3, #0
 8014894:	f2c0 8148 	blt.w	8014b28 <_dtoa_r+0x700>
 8014898:	9a00      	ldr	r2, [sp, #0]
 801489a:	2a0e      	cmp	r2, #14
 801489c:	f300 8144 	bgt.w	8014b28 <_dtoa_r+0x700>
 80148a0:	4b67      	ldr	r3, [pc, #412]	; (8014a40 <_dtoa_r+0x618>)
 80148a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80148aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	f280 80d5 	bge.w	8014a5c <_dtoa_r+0x634>
 80148b2:	9b03      	ldr	r3, [sp, #12]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f300 80d1 	bgt.w	8014a5c <_dtoa_r+0x634>
 80148ba:	f040 826f 	bne.w	8014d9c <_dtoa_r+0x974>
 80148be:	4b65      	ldr	r3, [pc, #404]	; (8014a54 <_dtoa_r+0x62c>)
 80148c0:	2200      	movs	r2, #0
 80148c2:	4640      	mov	r0, r8
 80148c4:	4649      	mov	r1, r9
 80148c6:	f7eb feb7 	bl	8000638 <__aeabi_dmul>
 80148ca:	4652      	mov	r2, sl
 80148cc:	465b      	mov	r3, fp
 80148ce:	f7ec f939 	bl	8000b44 <__aeabi_dcmpge>
 80148d2:	9e03      	ldr	r6, [sp, #12]
 80148d4:	4637      	mov	r7, r6
 80148d6:	2800      	cmp	r0, #0
 80148d8:	f040 8245 	bne.w	8014d66 <_dtoa_r+0x93e>
 80148dc:	9d01      	ldr	r5, [sp, #4]
 80148de:	2331      	movs	r3, #49	; 0x31
 80148e0:	f805 3b01 	strb.w	r3, [r5], #1
 80148e4:	9b00      	ldr	r3, [sp, #0]
 80148e6:	3301      	adds	r3, #1
 80148e8:	9300      	str	r3, [sp, #0]
 80148ea:	e240      	b.n	8014d6e <_dtoa_r+0x946>
 80148ec:	07f2      	lsls	r2, r6, #31
 80148ee:	d505      	bpl.n	80148fc <_dtoa_r+0x4d4>
 80148f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148f4:	f7eb fea0 	bl	8000638 <__aeabi_dmul>
 80148f8:	3501      	adds	r5, #1
 80148fa:	2301      	movs	r3, #1
 80148fc:	1076      	asrs	r6, r6, #1
 80148fe:	3708      	adds	r7, #8
 8014900:	e777      	b.n	80147f2 <_dtoa_r+0x3ca>
 8014902:	2502      	movs	r5, #2
 8014904:	e779      	b.n	80147fa <_dtoa_r+0x3d2>
 8014906:	9f00      	ldr	r7, [sp, #0]
 8014908:	9e03      	ldr	r6, [sp, #12]
 801490a:	e794      	b.n	8014836 <_dtoa_r+0x40e>
 801490c:	9901      	ldr	r1, [sp, #4]
 801490e:	4b4c      	ldr	r3, [pc, #304]	; (8014a40 <_dtoa_r+0x618>)
 8014910:	4431      	add	r1, r6
 8014912:	910d      	str	r1, [sp, #52]	; 0x34
 8014914:	9908      	ldr	r1, [sp, #32]
 8014916:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801491a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801491e:	2900      	cmp	r1, #0
 8014920:	d043      	beq.n	80149aa <_dtoa_r+0x582>
 8014922:	494d      	ldr	r1, [pc, #308]	; (8014a58 <_dtoa_r+0x630>)
 8014924:	2000      	movs	r0, #0
 8014926:	f7eb ffb1 	bl	800088c <__aeabi_ddiv>
 801492a:	4652      	mov	r2, sl
 801492c:	465b      	mov	r3, fp
 801492e:	f7eb fccb 	bl	80002c8 <__aeabi_dsub>
 8014932:	9d01      	ldr	r5, [sp, #4]
 8014934:	4682      	mov	sl, r0
 8014936:	468b      	mov	fp, r1
 8014938:	4649      	mov	r1, r9
 801493a:	4640      	mov	r0, r8
 801493c:	f7ec f92c 	bl	8000b98 <__aeabi_d2iz>
 8014940:	4606      	mov	r6, r0
 8014942:	f7eb fe0f 	bl	8000564 <__aeabi_i2d>
 8014946:	4602      	mov	r2, r0
 8014948:	460b      	mov	r3, r1
 801494a:	4640      	mov	r0, r8
 801494c:	4649      	mov	r1, r9
 801494e:	f7eb fcbb 	bl	80002c8 <__aeabi_dsub>
 8014952:	3630      	adds	r6, #48	; 0x30
 8014954:	f805 6b01 	strb.w	r6, [r5], #1
 8014958:	4652      	mov	r2, sl
 801495a:	465b      	mov	r3, fp
 801495c:	4680      	mov	r8, r0
 801495e:	4689      	mov	r9, r1
 8014960:	f7ec f8dc 	bl	8000b1c <__aeabi_dcmplt>
 8014964:	2800      	cmp	r0, #0
 8014966:	d163      	bne.n	8014a30 <_dtoa_r+0x608>
 8014968:	4642      	mov	r2, r8
 801496a:	464b      	mov	r3, r9
 801496c:	4936      	ldr	r1, [pc, #216]	; (8014a48 <_dtoa_r+0x620>)
 801496e:	2000      	movs	r0, #0
 8014970:	f7eb fcaa 	bl	80002c8 <__aeabi_dsub>
 8014974:	4652      	mov	r2, sl
 8014976:	465b      	mov	r3, fp
 8014978:	f7ec f8d0 	bl	8000b1c <__aeabi_dcmplt>
 801497c:	2800      	cmp	r0, #0
 801497e:	f040 80b5 	bne.w	8014aec <_dtoa_r+0x6c4>
 8014982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014984:	429d      	cmp	r5, r3
 8014986:	d081      	beq.n	801488c <_dtoa_r+0x464>
 8014988:	4b30      	ldr	r3, [pc, #192]	; (8014a4c <_dtoa_r+0x624>)
 801498a:	2200      	movs	r2, #0
 801498c:	4650      	mov	r0, sl
 801498e:	4659      	mov	r1, fp
 8014990:	f7eb fe52 	bl	8000638 <__aeabi_dmul>
 8014994:	4b2d      	ldr	r3, [pc, #180]	; (8014a4c <_dtoa_r+0x624>)
 8014996:	4682      	mov	sl, r0
 8014998:	468b      	mov	fp, r1
 801499a:	4640      	mov	r0, r8
 801499c:	4649      	mov	r1, r9
 801499e:	2200      	movs	r2, #0
 80149a0:	f7eb fe4a 	bl	8000638 <__aeabi_dmul>
 80149a4:	4680      	mov	r8, r0
 80149a6:	4689      	mov	r9, r1
 80149a8:	e7c6      	b.n	8014938 <_dtoa_r+0x510>
 80149aa:	4650      	mov	r0, sl
 80149ac:	4659      	mov	r1, fp
 80149ae:	f7eb fe43 	bl	8000638 <__aeabi_dmul>
 80149b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149b4:	9d01      	ldr	r5, [sp, #4]
 80149b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80149b8:	4682      	mov	sl, r0
 80149ba:	468b      	mov	fp, r1
 80149bc:	4649      	mov	r1, r9
 80149be:	4640      	mov	r0, r8
 80149c0:	f7ec f8ea 	bl	8000b98 <__aeabi_d2iz>
 80149c4:	4606      	mov	r6, r0
 80149c6:	f7eb fdcd 	bl	8000564 <__aeabi_i2d>
 80149ca:	3630      	adds	r6, #48	; 0x30
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4640      	mov	r0, r8
 80149d2:	4649      	mov	r1, r9
 80149d4:	f7eb fc78 	bl	80002c8 <__aeabi_dsub>
 80149d8:	f805 6b01 	strb.w	r6, [r5], #1
 80149dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149de:	429d      	cmp	r5, r3
 80149e0:	4680      	mov	r8, r0
 80149e2:	4689      	mov	r9, r1
 80149e4:	f04f 0200 	mov.w	r2, #0
 80149e8:	d124      	bne.n	8014a34 <_dtoa_r+0x60c>
 80149ea:	4b1b      	ldr	r3, [pc, #108]	; (8014a58 <_dtoa_r+0x630>)
 80149ec:	4650      	mov	r0, sl
 80149ee:	4659      	mov	r1, fp
 80149f0:	f7eb fc6c 	bl	80002cc <__adddf3>
 80149f4:	4602      	mov	r2, r0
 80149f6:	460b      	mov	r3, r1
 80149f8:	4640      	mov	r0, r8
 80149fa:	4649      	mov	r1, r9
 80149fc:	f7ec f8ac 	bl	8000b58 <__aeabi_dcmpgt>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d173      	bne.n	8014aec <_dtoa_r+0x6c4>
 8014a04:	4652      	mov	r2, sl
 8014a06:	465b      	mov	r3, fp
 8014a08:	4913      	ldr	r1, [pc, #76]	; (8014a58 <_dtoa_r+0x630>)
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	f7eb fc5c 	bl	80002c8 <__aeabi_dsub>
 8014a10:	4602      	mov	r2, r0
 8014a12:	460b      	mov	r3, r1
 8014a14:	4640      	mov	r0, r8
 8014a16:	4649      	mov	r1, r9
 8014a18:	f7ec f880 	bl	8000b1c <__aeabi_dcmplt>
 8014a1c:	2800      	cmp	r0, #0
 8014a1e:	f43f af35 	beq.w	801488c <_dtoa_r+0x464>
 8014a22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014a24:	1e6b      	subs	r3, r5, #1
 8014a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a2c:	2b30      	cmp	r3, #48	; 0x30
 8014a2e:	d0f8      	beq.n	8014a22 <_dtoa_r+0x5fa>
 8014a30:	9700      	str	r7, [sp, #0]
 8014a32:	e049      	b.n	8014ac8 <_dtoa_r+0x6a0>
 8014a34:	4b05      	ldr	r3, [pc, #20]	; (8014a4c <_dtoa_r+0x624>)
 8014a36:	f7eb fdff 	bl	8000638 <__aeabi_dmul>
 8014a3a:	4680      	mov	r8, r0
 8014a3c:	4689      	mov	r9, r1
 8014a3e:	e7bd      	b.n	80149bc <_dtoa_r+0x594>
 8014a40:	08048f20 	.word	0x08048f20
 8014a44:	08048ef8 	.word	0x08048ef8
 8014a48:	3ff00000 	.word	0x3ff00000
 8014a4c:	40240000 	.word	0x40240000
 8014a50:	401c0000 	.word	0x401c0000
 8014a54:	40140000 	.word	0x40140000
 8014a58:	3fe00000 	.word	0x3fe00000
 8014a5c:	9d01      	ldr	r5, [sp, #4]
 8014a5e:	4656      	mov	r6, sl
 8014a60:	465f      	mov	r7, fp
 8014a62:	4642      	mov	r2, r8
 8014a64:	464b      	mov	r3, r9
 8014a66:	4630      	mov	r0, r6
 8014a68:	4639      	mov	r1, r7
 8014a6a:	f7eb ff0f 	bl	800088c <__aeabi_ddiv>
 8014a6e:	f7ec f893 	bl	8000b98 <__aeabi_d2iz>
 8014a72:	4682      	mov	sl, r0
 8014a74:	f7eb fd76 	bl	8000564 <__aeabi_i2d>
 8014a78:	4642      	mov	r2, r8
 8014a7a:	464b      	mov	r3, r9
 8014a7c:	f7eb fddc 	bl	8000638 <__aeabi_dmul>
 8014a80:	4602      	mov	r2, r0
 8014a82:	460b      	mov	r3, r1
 8014a84:	4630      	mov	r0, r6
 8014a86:	4639      	mov	r1, r7
 8014a88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014a8c:	f7eb fc1c 	bl	80002c8 <__aeabi_dsub>
 8014a90:	f805 6b01 	strb.w	r6, [r5], #1
 8014a94:	9e01      	ldr	r6, [sp, #4]
 8014a96:	9f03      	ldr	r7, [sp, #12]
 8014a98:	1bae      	subs	r6, r5, r6
 8014a9a:	42b7      	cmp	r7, r6
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	d135      	bne.n	8014b0e <_dtoa_r+0x6e6>
 8014aa2:	f7eb fc13 	bl	80002cc <__adddf3>
 8014aa6:	4642      	mov	r2, r8
 8014aa8:	464b      	mov	r3, r9
 8014aaa:	4606      	mov	r6, r0
 8014aac:	460f      	mov	r7, r1
 8014aae:	f7ec f853 	bl	8000b58 <__aeabi_dcmpgt>
 8014ab2:	b9d0      	cbnz	r0, 8014aea <_dtoa_r+0x6c2>
 8014ab4:	4642      	mov	r2, r8
 8014ab6:	464b      	mov	r3, r9
 8014ab8:	4630      	mov	r0, r6
 8014aba:	4639      	mov	r1, r7
 8014abc:	f7ec f824 	bl	8000b08 <__aeabi_dcmpeq>
 8014ac0:	b110      	cbz	r0, 8014ac8 <_dtoa_r+0x6a0>
 8014ac2:	f01a 0f01 	tst.w	sl, #1
 8014ac6:	d110      	bne.n	8014aea <_dtoa_r+0x6c2>
 8014ac8:	4620      	mov	r0, r4
 8014aca:	ee18 1a10 	vmov	r1, s16
 8014ace:	f001 f905 	bl	8015cdc <_Bfree>
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9800      	ldr	r0, [sp, #0]
 8014ad6:	702b      	strb	r3, [r5, #0]
 8014ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ada:	3001      	adds	r0, #1
 8014adc:	6018      	str	r0, [r3, #0]
 8014ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	f43f acf1 	beq.w	80144c8 <_dtoa_r+0xa0>
 8014ae6:	601d      	str	r5, [r3, #0]
 8014ae8:	e4ee      	b.n	80144c8 <_dtoa_r+0xa0>
 8014aea:	9f00      	ldr	r7, [sp, #0]
 8014aec:	462b      	mov	r3, r5
 8014aee:	461d      	mov	r5, r3
 8014af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014af4:	2a39      	cmp	r2, #57	; 0x39
 8014af6:	d106      	bne.n	8014b06 <_dtoa_r+0x6de>
 8014af8:	9a01      	ldr	r2, [sp, #4]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d1f7      	bne.n	8014aee <_dtoa_r+0x6c6>
 8014afe:	9901      	ldr	r1, [sp, #4]
 8014b00:	2230      	movs	r2, #48	; 0x30
 8014b02:	3701      	adds	r7, #1
 8014b04:	700a      	strb	r2, [r1, #0]
 8014b06:	781a      	ldrb	r2, [r3, #0]
 8014b08:	3201      	adds	r2, #1
 8014b0a:	701a      	strb	r2, [r3, #0]
 8014b0c:	e790      	b.n	8014a30 <_dtoa_r+0x608>
 8014b0e:	4ba6      	ldr	r3, [pc, #664]	; (8014da8 <_dtoa_r+0x980>)
 8014b10:	2200      	movs	r2, #0
 8014b12:	f7eb fd91 	bl	8000638 <__aeabi_dmul>
 8014b16:	2200      	movs	r2, #0
 8014b18:	2300      	movs	r3, #0
 8014b1a:	4606      	mov	r6, r0
 8014b1c:	460f      	mov	r7, r1
 8014b1e:	f7eb fff3 	bl	8000b08 <__aeabi_dcmpeq>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d09d      	beq.n	8014a62 <_dtoa_r+0x63a>
 8014b26:	e7cf      	b.n	8014ac8 <_dtoa_r+0x6a0>
 8014b28:	9a08      	ldr	r2, [sp, #32]
 8014b2a:	2a00      	cmp	r2, #0
 8014b2c:	f000 80d7 	beq.w	8014cde <_dtoa_r+0x8b6>
 8014b30:	9a06      	ldr	r2, [sp, #24]
 8014b32:	2a01      	cmp	r2, #1
 8014b34:	f300 80ba 	bgt.w	8014cac <_dtoa_r+0x884>
 8014b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b3a:	2a00      	cmp	r2, #0
 8014b3c:	f000 80b2 	beq.w	8014ca4 <_dtoa_r+0x87c>
 8014b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014b44:	9e07      	ldr	r6, [sp, #28]
 8014b46:	9d04      	ldr	r5, [sp, #16]
 8014b48:	9a04      	ldr	r2, [sp, #16]
 8014b4a:	441a      	add	r2, r3
 8014b4c:	9204      	str	r2, [sp, #16]
 8014b4e:	9a05      	ldr	r2, [sp, #20]
 8014b50:	2101      	movs	r1, #1
 8014b52:	441a      	add	r2, r3
 8014b54:	4620      	mov	r0, r4
 8014b56:	9205      	str	r2, [sp, #20]
 8014b58:	f001 f9c2 	bl	8015ee0 <__i2b>
 8014b5c:	4607      	mov	r7, r0
 8014b5e:	2d00      	cmp	r5, #0
 8014b60:	dd0c      	ble.n	8014b7c <_dtoa_r+0x754>
 8014b62:	9b05      	ldr	r3, [sp, #20]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	dd09      	ble.n	8014b7c <_dtoa_r+0x754>
 8014b68:	42ab      	cmp	r3, r5
 8014b6a:	9a04      	ldr	r2, [sp, #16]
 8014b6c:	bfa8      	it	ge
 8014b6e:	462b      	movge	r3, r5
 8014b70:	1ad2      	subs	r2, r2, r3
 8014b72:	9204      	str	r2, [sp, #16]
 8014b74:	9a05      	ldr	r2, [sp, #20]
 8014b76:	1aed      	subs	r5, r5, r3
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	9305      	str	r3, [sp, #20]
 8014b7c:	9b07      	ldr	r3, [sp, #28]
 8014b7e:	b31b      	cbz	r3, 8014bc8 <_dtoa_r+0x7a0>
 8014b80:	9b08      	ldr	r3, [sp, #32]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	f000 80af 	beq.w	8014ce6 <_dtoa_r+0x8be>
 8014b88:	2e00      	cmp	r6, #0
 8014b8a:	dd13      	ble.n	8014bb4 <_dtoa_r+0x78c>
 8014b8c:	4639      	mov	r1, r7
 8014b8e:	4632      	mov	r2, r6
 8014b90:	4620      	mov	r0, r4
 8014b92:	f001 fa65 	bl	8016060 <__pow5mult>
 8014b96:	ee18 2a10 	vmov	r2, s16
 8014b9a:	4601      	mov	r1, r0
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f001 f9b4 	bl	8015f0c <__multiply>
 8014ba4:	ee18 1a10 	vmov	r1, s16
 8014ba8:	4680      	mov	r8, r0
 8014baa:	4620      	mov	r0, r4
 8014bac:	f001 f896 	bl	8015cdc <_Bfree>
 8014bb0:	ee08 8a10 	vmov	s16, r8
 8014bb4:	9b07      	ldr	r3, [sp, #28]
 8014bb6:	1b9a      	subs	r2, r3, r6
 8014bb8:	d006      	beq.n	8014bc8 <_dtoa_r+0x7a0>
 8014bba:	ee18 1a10 	vmov	r1, s16
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f001 fa4e 	bl	8016060 <__pow5mult>
 8014bc4:	ee08 0a10 	vmov	s16, r0
 8014bc8:	2101      	movs	r1, #1
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f001 f988 	bl	8015ee0 <__i2b>
 8014bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	f340 8088 	ble.w	8014cea <_dtoa_r+0x8c2>
 8014bda:	461a      	mov	r2, r3
 8014bdc:	4601      	mov	r1, r0
 8014bde:	4620      	mov	r0, r4
 8014be0:	f001 fa3e 	bl	8016060 <__pow5mult>
 8014be4:	9b06      	ldr	r3, [sp, #24]
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	4606      	mov	r6, r0
 8014bea:	f340 8081 	ble.w	8014cf0 <_dtoa_r+0x8c8>
 8014bee:	f04f 0800 	mov.w	r8, #0
 8014bf2:	6933      	ldr	r3, [r6, #16]
 8014bf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014bf8:	6918      	ldr	r0, [r3, #16]
 8014bfa:	f001 f921 	bl	8015e40 <__hi0bits>
 8014bfe:	f1c0 0020 	rsb	r0, r0, #32
 8014c02:	9b05      	ldr	r3, [sp, #20]
 8014c04:	4418      	add	r0, r3
 8014c06:	f010 001f 	ands.w	r0, r0, #31
 8014c0a:	f000 8092 	beq.w	8014d32 <_dtoa_r+0x90a>
 8014c0e:	f1c0 0320 	rsb	r3, r0, #32
 8014c12:	2b04      	cmp	r3, #4
 8014c14:	f340 808a 	ble.w	8014d2c <_dtoa_r+0x904>
 8014c18:	f1c0 001c 	rsb	r0, r0, #28
 8014c1c:	9b04      	ldr	r3, [sp, #16]
 8014c1e:	4403      	add	r3, r0
 8014c20:	9304      	str	r3, [sp, #16]
 8014c22:	9b05      	ldr	r3, [sp, #20]
 8014c24:	4403      	add	r3, r0
 8014c26:	4405      	add	r5, r0
 8014c28:	9305      	str	r3, [sp, #20]
 8014c2a:	9b04      	ldr	r3, [sp, #16]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	dd07      	ble.n	8014c40 <_dtoa_r+0x818>
 8014c30:	ee18 1a10 	vmov	r1, s16
 8014c34:	461a      	mov	r2, r3
 8014c36:	4620      	mov	r0, r4
 8014c38:	f001 fa6c 	bl	8016114 <__lshift>
 8014c3c:	ee08 0a10 	vmov	s16, r0
 8014c40:	9b05      	ldr	r3, [sp, #20]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	dd05      	ble.n	8014c52 <_dtoa_r+0x82a>
 8014c46:	4631      	mov	r1, r6
 8014c48:	461a      	mov	r2, r3
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	f001 fa62 	bl	8016114 <__lshift>
 8014c50:	4606      	mov	r6, r0
 8014c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d06e      	beq.n	8014d36 <_dtoa_r+0x90e>
 8014c58:	ee18 0a10 	vmov	r0, s16
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	f001 fac9 	bl	80161f4 <__mcmp>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	da67      	bge.n	8014d36 <_dtoa_r+0x90e>
 8014c66:	9b00      	ldr	r3, [sp, #0]
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	ee18 1a10 	vmov	r1, s16
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	220a      	movs	r2, #10
 8014c72:	2300      	movs	r3, #0
 8014c74:	4620      	mov	r0, r4
 8014c76:	f001 f853 	bl	8015d20 <__multadd>
 8014c7a:	9b08      	ldr	r3, [sp, #32]
 8014c7c:	ee08 0a10 	vmov	s16, r0
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f000 81b1 	beq.w	8014fe8 <_dtoa_r+0xbc0>
 8014c86:	2300      	movs	r3, #0
 8014c88:	4639      	mov	r1, r7
 8014c8a:	220a      	movs	r2, #10
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f001 f847 	bl	8015d20 <__multadd>
 8014c92:	9b02      	ldr	r3, [sp, #8]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	4607      	mov	r7, r0
 8014c98:	f300 808e 	bgt.w	8014db8 <_dtoa_r+0x990>
 8014c9c:	9b06      	ldr	r3, [sp, #24]
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	dc51      	bgt.n	8014d46 <_dtoa_r+0x91e>
 8014ca2:	e089      	b.n	8014db8 <_dtoa_r+0x990>
 8014ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014caa:	e74b      	b.n	8014b44 <_dtoa_r+0x71c>
 8014cac:	9b03      	ldr	r3, [sp, #12]
 8014cae:	1e5e      	subs	r6, r3, #1
 8014cb0:	9b07      	ldr	r3, [sp, #28]
 8014cb2:	42b3      	cmp	r3, r6
 8014cb4:	bfbf      	itttt	lt
 8014cb6:	9b07      	ldrlt	r3, [sp, #28]
 8014cb8:	9607      	strlt	r6, [sp, #28]
 8014cba:	1af2      	sublt	r2, r6, r3
 8014cbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014cbe:	bfb6      	itet	lt
 8014cc0:	189b      	addlt	r3, r3, r2
 8014cc2:	1b9e      	subge	r6, r3, r6
 8014cc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014cc6:	9b03      	ldr	r3, [sp, #12]
 8014cc8:	bfb8      	it	lt
 8014cca:	2600      	movlt	r6, #0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	bfb7      	itett	lt
 8014cd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014cd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014cd8:	1a9d      	sublt	r5, r3, r2
 8014cda:	2300      	movlt	r3, #0
 8014cdc:	e734      	b.n	8014b48 <_dtoa_r+0x720>
 8014cde:	9e07      	ldr	r6, [sp, #28]
 8014ce0:	9d04      	ldr	r5, [sp, #16]
 8014ce2:	9f08      	ldr	r7, [sp, #32]
 8014ce4:	e73b      	b.n	8014b5e <_dtoa_r+0x736>
 8014ce6:	9a07      	ldr	r2, [sp, #28]
 8014ce8:	e767      	b.n	8014bba <_dtoa_r+0x792>
 8014cea:	9b06      	ldr	r3, [sp, #24]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	dc18      	bgt.n	8014d22 <_dtoa_r+0x8fa>
 8014cf0:	f1ba 0f00 	cmp.w	sl, #0
 8014cf4:	d115      	bne.n	8014d22 <_dtoa_r+0x8fa>
 8014cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cfa:	b993      	cbnz	r3, 8014d22 <_dtoa_r+0x8fa>
 8014cfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014d00:	0d1b      	lsrs	r3, r3, #20
 8014d02:	051b      	lsls	r3, r3, #20
 8014d04:	b183      	cbz	r3, 8014d28 <_dtoa_r+0x900>
 8014d06:	9b04      	ldr	r3, [sp, #16]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	9304      	str	r3, [sp, #16]
 8014d0c:	9b05      	ldr	r3, [sp, #20]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	9305      	str	r3, [sp, #20]
 8014d12:	f04f 0801 	mov.w	r8, #1
 8014d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	f47f af6a 	bne.w	8014bf2 <_dtoa_r+0x7ca>
 8014d1e:	2001      	movs	r0, #1
 8014d20:	e76f      	b.n	8014c02 <_dtoa_r+0x7da>
 8014d22:	f04f 0800 	mov.w	r8, #0
 8014d26:	e7f6      	b.n	8014d16 <_dtoa_r+0x8ee>
 8014d28:	4698      	mov	r8, r3
 8014d2a:	e7f4      	b.n	8014d16 <_dtoa_r+0x8ee>
 8014d2c:	f43f af7d 	beq.w	8014c2a <_dtoa_r+0x802>
 8014d30:	4618      	mov	r0, r3
 8014d32:	301c      	adds	r0, #28
 8014d34:	e772      	b.n	8014c1c <_dtoa_r+0x7f4>
 8014d36:	9b03      	ldr	r3, [sp, #12]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	dc37      	bgt.n	8014dac <_dtoa_r+0x984>
 8014d3c:	9b06      	ldr	r3, [sp, #24]
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	dd34      	ble.n	8014dac <_dtoa_r+0x984>
 8014d42:	9b03      	ldr	r3, [sp, #12]
 8014d44:	9302      	str	r3, [sp, #8]
 8014d46:	9b02      	ldr	r3, [sp, #8]
 8014d48:	b96b      	cbnz	r3, 8014d66 <_dtoa_r+0x93e>
 8014d4a:	4631      	mov	r1, r6
 8014d4c:	2205      	movs	r2, #5
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f000 ffe6 	bl	8015d20 <__multadd>
 8014d54:	4601      	mov	r1, r0
 8014d56:	4606      	mov	r6, r0
 8014d58:	ee18 0a10 	vmov	r0, s16
 8014d5c:	f001 fa4a 	bl	80161f4 <__mcmp>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	f73f adbb 	bgt.w	80148dc <_dtoa_r+0x4b4>
 8014d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d68:	9d01      	ldr	r5, [sp, #4]
 8014d6a:	43db      	mvns	r3, r3
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	f04f 0800 	mov.w	r8, #0
 8014d72:	4631      	mov	r1, r6
 8014d74:	4620      	mov	r0, r4
 8014d76:	f000 ffb1 	bl	8015cdc <_Bfree>
 8014d7a:	2f00      	cmp	r7, #0
 8014d7c:	f43f aea4 	beq.w	8014ac8 <_dtoa_r+0x6a0>
 8014d80:	f1b8 0f00 	cmp.w	r8, #0
 8014d84:	d005      	beq.n	8014d92 <_dtoa_r+0x96a>
 8014d86:	45b8      	cmp	r8, r7
 8014d88:	d003      	beq.n	8014d92 <_dtoa_r+0x96a>
 8014d8a:	4641      	mov	r1, r8
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f000 ffa5 	bl	8015cdc <_Bfree>
 8014d92:	4639      	mov	r1, r7
 8014d94:	4620      	mov	r0, r4
 8014d96:	f000 ffa1 	bl	8015cdc <_Bfree>
 8014d9a:	e695      	b.n	8014ac8 <_dtoa_r+0x6a0>
 8014d9c:	2600      	movs	r6, #0
 8014d9e:	4637      	mov	r7, r6
 8014da0:	e7e1      	b.n	8014d66 <_dtoa_r+0x93e>
 8014da2:	9700      	str	r7, [sp, #0]
 8014da4:	4637      	mov	r7, r6
 8014da6:	e599      	b.n	80148dc <_dtoa_r+0x4b4>
 8014da8:	40240000 	.word	0x40240000
 8014dac:	9b08      	ldr	r3, [sp, #32]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f000 80ca 	beq.w	8014f48 <_dtoa_r+0xb20>
 8014db4:	9b03      	ldr	r3, [sp, #12]
 8014db6:	9302      	str	r3, [sp, #8]
 8014db8:	2d00      	cmp	r5, #0
 8014dba:	dd05      	ble.n	8014dc8 <_dtoa_r+0x9a0>
 8014dbc:	4639      	mov	r1, r7
 8014dbe:	462a      	mov	r2, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f001 f9a7 	bl	8016114 <__lshift>
 8014dc6:	4607      	mov	r7, r0
 8014dc8:	f1b8 0f00 	cmp.w	r8, #0
 8014dcc:	d05b      	beq.n	8014e86 <_dtoa_r+0xa5e>
 8014dce:	6879      	ldr	r1, [r7, #4]
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f000 ff43 	bl	8015c5c <_Balloc>
 8014dd6:	4605      	mov	r5, r0
 8014dd8:	b928      	cbnz	r0, 8014de6 <_dtoa_r+0x9be>
 8014dda:	4b87      	ldr	r3, [pc, #540]	; (8014ff8 <_dtoa_r+0xbd0>)
 8014ddc:	4602      	mov	r2, r0
 8014dde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014de2:	f7ff bb3b 	b.w	801445c <_dtoa_r+0x34>
 8014de6:	693a      	ldr	r2, [r7, #16]
 8014de8:	3202      	adds	r2, #2
 8014dea:	0092      	lsls	r2, r2, #2
 8014dec:	f107 010c 	add.w	r1, r7, #12
 8014df0:	300c      	adds	r0, #12
 8014df2:	f7fc f84b 	bl	8010e8c <memcpy>
 8014df6:	2201      	movs	r2, #1
 8014df8:	4629      	mov	r1, r5
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f001 f98a 	bl	8016114 <__lshift>
 8014e00:	9b01      	ldr	r3, [sp, #4]
 8014e02:	f103 0901 	add.w	r9, r3, #1
 8014e06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014e0a:	4413      	add	r3, r2
 8014e0c:	9305      	str	r3, [sp, #20]
 8014e0e:	f00a 0301 	and.w	r3, sl, #1
 8014e12:	46b8      	mov	r8, r7
 8014e14:	9304      	str	r3, [sp, #16]
 8014e16:	4607      	mov	r7, r0
 8014e18:	4631      	mov	r1, r6
 8014e1a:	ee18 0a10 	vmov	r0, s16
 8014e1e:	f7ff fa77 	bl	8014310 <quorem>
 8014e22:	4641      	mov	r1, r8
 8014e24:	9002      	str	r0, [sp, #8]
 8014e26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014e2a:	ee18 0a10 	vmov	r0, s16
 8014e2e:	f001 f9e1 	bl	80161f4 <__mcmp>
 8014e32:	463a      	mov	r2, r7
 8014e34:	9003      	str	r0, [sp, #12]
 8014e36:	4631      	mov	r1, r6
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f001 f9f7 	bl	801622c <__mdiff>
 8014e3e:	68c2      	ldr	r2, [r0, #12]
 8014e40:	f109 3bff 	add.w	fp, r9, #4294967295
 8014e44:	4605      	mov	r5, r0
 8014e46:	bb02      	cbnz	r2, 8014e8a <_dtoa_r+0xa62>
 8014e48:	4601      	mov	r1, r0
 8014e4a:	ee18 0a10 	vmov	r0, s16
 8014e4e:	f001 f9d1 	bl	80161f4 <__mcmp>
 8014e52:	4602      	mov	r2, r0
 8014e54:	4629      	mov	r1, r5
 8014e56:	4620      	mov	r0, r4
 8014e58:	9207      	str	r2, [sp, #28]
 8014e5a:	f000 ff3f 	bl	8015cdc <_Bfree>
 8014e5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014e62:	ea43 0102 	orr.w	r1, r3, r2
 8014e66:	9b04      	ldr	r3, [sp, #16]
 8014e68:	430b      	orrs	r3, r1
 8014e6a:	464d      	mov	r5, r9
 8014e6c:	d10f      	bne.n	8014e8e <_dtoa_r+0xa66>
 8014e6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e72:	d02a      	beq.n	8014eca <_dtoa_r+0xaa2>
 8014e74:	9b03      	ldr	r3, [sp, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	dd02      	ble.n	8014e80 <_dtoa_r+0xa58>
 8014e7a:	9b02      	ldr	r3, [sp, #8]
 8014e7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014e80:	f88b a000 	strb.w	sl, [fp]
 8014e84:	e775      	b.n	8014d72 <_dtoa_r+0x94a>
 8014e86:	4638      	mov	r0, r7
 8014e88:	e7ba      	b.n	8014e00 <_dtoa_r+0x9d8>
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	e7e2      	b.n	8014e54 <_dtoa_r+0xa2c>
 8014e8e:	9b03      	ldr	r3, [sp, #12]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	db04      	blt.n	8014e9e <_dtoa_r+0xa76>
 8014e94:	9906      	ldr	r1, [sp, #24]
 8014e96:	430b      	orrs	r3, r1
 8014e98:	9904      	ldr	r1, [sp, #16]
 8014e9a:	430b      	orrs	r3, r1
 8014e9c:	d122      	bne.n	8014ee4 <_dtoa_r+0xabc>
 8014e9e:	2a00      	cmp	r2, #0
 8014ea0:	ddee      	ble.n	8014e80 <_dtoa_r+0xa58>
 8014ea2:	ee18 1a10 	vmov	r1, s16
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f001 f933 	bl	8016114 <__lshift>
 8014eae:	4631      	mov	r1, r6
 8014eb0:	ee08 0a10 	vmov	s16, r0
 8014eb4:	f001 f99e 	bl	80161f4 <__mcmp>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	dc03      	bgt.n	8014ec4 <_dtoa_r+0xa9c>
 8014ebc:	d1e0      	bne.n	8014e80 <_dtoa_r+0xa58>
 8014ebe:	f01a 0f01 	tst.w	sl, #1
 8014ec2:	d0dd      	beq.n	8014e80 <_dtoa_r+0xa58>
 8014ec4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014ec8:	d1d7      	bne.n	8014e7a <_dtoa_r+0xa52>
 8014eca:	2339      	movs	r3, #57	; 0x39
 8014ecc:	f88b 3000 	strb.w	r3, [fp]
 8014ed0:	462b      	mov	r3, r5
 8014ed2:	461d      	mov	r5, r3
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014eda:	2a39      	cmp	r2, #57	; 0x39
 8014edc:	d071      	beq.n	8014fc2 <_dtoa_r+0xb9a>
 8014ede:	3201      	adds	r2, #1
 8014ee0:	701a      	strb	r2, [r3, #0]
 8014ee2:	e746      	b.n	8014d72 <_dtoa_r+0x94a>
 8014ee4:	2a00      	cmp	r2, #0
 8014ee6:	dd07      	ble.n	8014ef8 <_dtoa_r+0xad0>
 8014ee8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014eec:	d0ed      	beq.n	8014eca <_dtoa_r+0xaa2>
 8014eee:	f10a 0301 	add.w	r3, sl, #1
 8014ef2:	f88b 3000 	strb.w	r3, [fp]
 8014ef6:	e73c      	b.n	8014d72 <_dtoa_r+0x94a>
 8014ef8:	9b05      	ldr	r3, [sp, #20]
 8014efa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014efe:	4599      	cmp	r9, r3
 8014f00:	d047      	beq.n	8014f92 <_dtoa_r+0xb6a>
 8014f02:	ee18 1a10 	vmov	r1, s16
 8014f06:	2300      	movs	r3, #0
 8014f08:	220a      	movs	r2, #10
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f000 ff08 	bl	8015d20 <__multadd>
 8014f10:	45b8      	cmp	r8, r7
 8014f12:	ee08 0a10 	vmov	s16, r0
 8014f16:	f04f 0300 	mov.w	r3, #0
 8014f1a:	f04f 020a 	mov.w	r2, #10
 8014f1e:	4641      	mov	r1, r8
 8014f20:	4620      	mov	r0, r4
 8014f22:	d106      	bne.n	8014f32 <_dtoa_r+0xb0a>
 8014f24:	f000 fefc 	bl	8015d20 <__multadd>
 8014f28:	4680      	mov	r8, r0
 8014f2a:	4607      	mov	r7, r0
 8014f2c:	f109 0901 	add.w	r9, r9, #1
 8014f30:	e772      	b.n	8014e18 <_dtoa_r+0x9f0>
 8014f32:	f000 fef5 	bl	8015d20 <__multadd>
 8014f36:	4639      	mov	r1, r7
 8014f38:	4680      	mov	r8, r0
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	220a      	movs	r2, #10
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f000 feee 	bl	8015d20 <__multadd>
 8014f44:	4607      	mov	r7, r0
 8014f46:	e7f1      	b.n	8014f2c <_dtoa_r+0xb04>
 8014f48:	9b03      	ldr	r3, [sp, #12]
 8014f4a:	9302      	str	r3, [sp, #8]
 8014f4c:	9d01      	ldr	r5, [sp, #4]
 8014f4e:	ee18 0a10 	vmov	r0, s16
 8014f52:	4631      	mov	r1, r6
 8014f54:	f7ff f9dc 	bl	8014310 <quorem>
 8014f58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f5c:	9b01      	ldr	r3, [sp, #4]
 8014f5e:	f805 ab01 	strb.w	sl, [r5], #1
 8014f62:	1aea      	subs	r2, r5, r3
 8014f64:	9b02      	ldr	r3, [sp, #8]
 8014f66:	4293      	cmp	r3, r2
 8014f68:	dd09      	ble.n	8014f7e <_dtoa_r+0xb56>
 8014f6a:	ee18 1a10 	vmov	r1, s16
 8014f6e:	2300      	movs	r3, #0
 8014f70:	220a      	movs	r2, #10
 8014f72:	4620      	mov	r0, r4
 8014f74:	f000 fed4 	bl	8015d20 <__multadd>
 8014f78:	ee08 0a10 	vmov	s16, r0
 8014f7c:	e7e7      	b.n	8014f4e <_dtoa_r+0xb26>
 8014f7e:	9b02      	ldr	r3, [sp, #8]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	bfc8      	it	gt
 8014f84:	461d      	movgt	r5, r3
 8014f86:	9b01      	ldr	r3, [sp, #4]
 8014f88:	bfd8      	it	le
 8014f8a:	2501      	movle	r5, #1
 8014f8c:	441d      	add	r5, r3
 8014f8e:	f04f 0800 	mov.w	r8, #0
 8014f92:	ee18 1a10 	vmov	r1, s16
 8014f96:	2201      	movs	r2, #1
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f001 f8bb 	bl	8016114 <__lshift>
 8014f9e:	4631      	mov	r1, r6
 8014fa0:	ee08 0a10 	vmov	s16, r0
 8014fa4:	f001 f926 	bl	80161f4 <__mcmp>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	dc91      	bgt.n	8014ed0 <_dtoa_r+0xaa8>
 8014fac:	d102      	bne.n	8014fb4 <_dtoa_r+0xb8c>
 8014fae:	f01a 0f01 	tst.w	sl, #1
 8014fb2:	d18d      	bne.n	8014ed0 <_dtoa_r+0xaa8>
 8014fb4:	462b      	mov	r3, r5
 8014fb6:	461d      	mov	r5, r3
 8014fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fbc:	2a30      	cmp	r2, #48	; 0x30
 8014fbe:	d0fa      	beq.n	8014fb6 <_dtoa_r+0xb8e>
 8014fc0:	e6d7      	b.n	8014d72 <_dtoa_r+0x94a>
 8014fc2:	9a01      	ldr	r2, [sp, #4]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d184      	bne.n	8014ed2 <_dtoa_r+0xaaa>
 8014fc8:	9b00      	ldr	r3, [sp, #0]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	2331      	movs	r3, #49	; 0x31
 8014fd0:	7013      	strb	r3, [r2, #0]
 8014fd2:	e6ce      	b.n	8014d72 <_dtoa_r+0x94a>
 8014fd4:	4b09      	ldr	r3, [pc, #36]	; (8014ffc <_dtoa_r+0xbd4>)
 8014fd6:	f7ff ba95 	b.w	8014504 <_dtoa_r+0xdc>
 8014fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	f47f aa6e 	bne.w	80144be <_dtoa_r+0x96>
 8014fe2:	4b07      	ldr	r3, [pc, #28]	; (8015000 <_dtoa_r+0xbd8>)
 8014fe4:	f7ff ba8e 	b.w	8014504 <_dtoa_r+0xdc>
 8014fe8:	9b02      	ldr	r3, [sp, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	dcae      	bgt.n	8014f4c <_dtoa_r+0xb24>
 8014fee:	9b06      	ldr	r3, [sp, #24]
 8014ff0:	2b02      	cmp	r3, #2
 8014ff2:	f73f aea8 	bgt.w	8014d46 <_dtoa_r+0x91e>
 8014ff6:	e7a9      	b.n	8014f4c <_dtoa_r+0xb24>
 8014ff8:	08048d49 	.word	0x08048d49
 8014ffc:	08048ff8 	.word	0x08048ff8
 8015000:	08048ce1 	.word	0x08048ce1

08015004 <__sflush_r>:
 8015004:	898a      	ldrh	r2, [r1, #12]
 8015006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801500a:	4605      	mov	r5, r0
 801500c:	0710      	lsls	r0, r2, #28
 801500e:	460c      	mov	r4, r1
 8015010:	d458      	bmi.n	80150c4 <__sflush_r+0xc0>
 8015012:	684b      	ldr	r3, [r1, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	dc05      	bgt.n	8015024 <__sflush_r+0x20>
 8015018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801501a:	2b00      	cmp	r3, #0
 801501c:	dc02      	bgt.n	8015024 <__sflush_r+0x20>
 801501e:	2000      	movs	r0, #0
 8015020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015026:	2e00      	cmp	r6, #0
 8015028:	d0f9      	beq.n	801501e <__sflush_r+0x1a>
 801502a:	2300      	movs	r3, #0
 801502c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015030:	682f      	ldr	r7, [r5, #0]
 8015032:	602b      	str	r3, [r5, #0]
 8015034:	d032      	beq.n	801509c <__sflush_r+0x98>
 8015036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015038:	89a3      	ldrh	r3, [r4, #12]
 801503a:	075a      	lsls	r2, r3, #29
 801503c:	d505      	bpl.n	801504a <__sflush_r+0x46>
 801503e:	6863      	ldr	r3, [r4, #4]
 8015040:	1ac0      	subs	r0, r0, r3
 8015042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015044:	b10b      	cbz	r3, 801504a <__sflush_r+0x46>
 8015046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015048:	1ac0      	subs	r0, r0, r3
 801504a:	2300      	movs	r3, #0
 801504c:	4602      	mov	r2, r0
 801504e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015050:	6a21      	ldr	r1, [r4, #32]
 8015052:	4628      	mov	r0, r5
 8015054:	47b0      	blx	r6
 8015056:	1c43      	adds	r3, r0, #1
 8015058:	89a3      	ldrh	r3, [r4, #12]
 801505a:	d106      	bne.n	801506a <__sflush_r+0x66>
 801505c:	6829      	ldr	r1, [r5, #0]
 801505e:	291d      	cmp	r1, #29
 8015060:	d82c      	bhi.n	80150bc <__sflush_r+0xb8>
 8015062:	4a2a      	ldr	r2, [pc, #168]	; (801510c <__sflush_r+0x108>)
 8015064:	40ca      	lsrs	r2, r1
 8015066:	07d6      	lsls	r6, r2, #31
 8015068:	d528      	bpl.n	80150bc <__sflush_r+0xb8>
 801506a:	2200      	movs	r2, #0
 801506c:	6062      	str	r2, [r4, #4]
 801506e:	04d9      	lsls	r1, r3, #19
 8015070:	6922      	ldr	r2, [r4, #16]
 8015072:	6022      	str	r2, [r4, #0]
 8015074:	d504      	bpl.n	8015080 <__sflush_r+0x7c>
 8015076:	1c42      	adds	r2, r0, #1
 8015078:	d101      	bne.n	801507e <__sflush_r+0x7a>
 801507a:	682b      	ldr	r3, [r5, #0]
 801507c:	b903      	cbnz	r3, 8015080 <__sflush_r+0x7c>
 801507e:	6560      	str	r0, [r4, #84]	; 0x54
 8015080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015082:	602f      	str	r7, [r5, #0]
 8015084:	2900      	cmp	r1, #0
 8015086:	d0ca      	beq.n	801501e <__sflush_r+0x1a>
 8015088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801508c:	4299      	cmp	r1, r3
 801508e:	d002      	beq.n	8015096 <__sflush_r+0x92>
 8015090:	4628      	mov	r0, r5
 8015092:	f7fc f983 	bl	801139c <_free_r>
 8015096:	2000      	movs	r0, #0
 8015098:	6360      	str	r0, [r4, #52]	; 0x34
 801509a:	e7c1      	b.n	8015020 <__sflush_r+0x1c>
 801509c:	6a21      	ldr	r1, [r4, #32]
 801509e:	2301      	movs	r3, #1
 80150a0:	4628      	mov	r0, r5
 80150a2:	47b0      	blx	r6
 80150a4:	1c41      	adds	r1, r0, #1
 80150a6:	d1c7      	bne.n	8015038 <__sflush_r+0x34>
 80150a8:	682b      	ldr	r3, [r5, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d0c4      	beq.n	8015038 <__sflush_r+0x34>
 80150ae:	2b1d      	cmp	r3, #29
 80150b0:	d001      	beq.n	80150b6 <__sflush_r+0xb2>
 80150b2:	2b16      	cmp	r3, #22
 80150b4:	d101      	bne.n	80150ba <__sflush_r+0xb6>
 80150b6:	602f      	str	r7, [r5, #0]
 80150b8:	e7b1      	b.n	801501e <__sflush_r+0x1a>
 80150ba:	89a3      	ldrh	r3, [r4, #12]
 80150bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150c0:	81a3      	strh	r3, [r4, #12]
 80150c2:	e7ad      	b.n	8015020 <__sflush_r+0x1c>
 80150c4:	690f      	ldr	r7, [r1, #16]
 80150c6:	2f00      	cmp	r7, #0
 80150c8:	d0a9      	beq.n	801501e <__sflush_r+0x1a>
 80150ca:	0793      	lsls	r3, r2, #30
 80150cc:	680e      	ldr	r6, [r1, #0]
 80150ce:	bf08      	it	eq
 80150d0:	694b      	ldreq	r3, [r1, #20]
 80150d2:	600f      	str	r7, [r1, #0]
 80150d4:	bf18      	it	ne
 80150d6:	2300      	movne	r3, #0
 80150d8:	eba6 0807 	sub.w	r8, r6, r7
 80150dc:	608b      	str	r3, [r1, #8]
 80150de:	f1b8 0f00 	cmp.w	r8, #0
 80150e2:	dd9c      	ble.n	801501e <__sflush_r+0x1a>
 80150e4:	6a21      	ldr	r1, [r4, #32]
 80150e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80150e8:	4643      	mov	r3, r8
 80150ea:	463a      	mov	r2, r7
 80150ec:	4628      	mov	r0, r5
 80150ee:	47b0      	blx	r6
 80150f0:	2800      	cmp	r0, #0
 80150f2:	dc06      	bgt.n	8015102 <__sflush_r+0xfe>
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150fa:	81a3      	strh	r3, [r4, #12]
 80150fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015100:	e78e      	b.n	8015020 <__sflush_r+0x1c>
 8015102:	4407      	add	r7, r0
 8015104:	eba8 0800 	sub.w	r8, r8, r0
 8015108:	e7e9      	b.n	80150de <__sflush_r+0xda>
 801510a:	bf00      	nop
 801510c:	20400001 	.word	0x20400001

08015110 <_fflush_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	690b      	ldr	r3, [r1, #16]
 8015114:	4605      	mov	r5, r0
 8015116:	460c      	mov	r4, r1
 8015118:	b913      	cbnz	r3, 8015120 <_fflush_r+0x10>
 801511a:	2500      	movs	r5, #0
 801511c:	4628      	mov	r0, r5
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	b118      	cbz	r0, 801512a <_fflush_r+0x1a>
 8015122:	6983      	ldr	r3, [r0, #24]
 8015124:	b90b      	cbnz	r3, 801512a <_fflush_r+0x1a>
 8015126:	f000 f887 	bl	8015238 <__sinit>
 801512a:	4b14      	ldr	r3, [pc, #80]	; (801517c <_fflush_r+0x6c>)
 801512c:	429c      	cmp	r4, r3
 801512e:	d11b      	bne.n	8015168 <_fflush_r+0x58>
 8015130:	686c      	ldr	r4, [r5, #4]
 8015132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d0ef      	beq.n	801511a <_fflush_r+0xa>
 801513a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801513c:	07d0      	lsls	r0, r2, #31
 801513e:	d404      	bmi.n	801514a <_fflush_r+0x3a>
 8015140:	0599      	lsls	r1, r3, #22
 8015142:	d402      	bmi.n	801514a <_fflush_r+0x3a>
 8015144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015146:	f000 fcd5 	bl	8015af4 <__retarget_lock_acquire_recursive>
 801514a:	4628      	mov	r0, r5
 801514c:	4621      	mov	r1, r4
 801514e:	f7ff ff59 	bl	8015004 <__sflush_r>
 8015152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015154:	07da      	lsls	r2, r3, #31
 8015156:	4605      	mov	r5, r0
 8015158:	d4e0      	bmi.n	801511c <_fflush_r+0xc>
 801515a:	89a3      	ldrh	r3, [r4, #12]
 801515c:	059b      	lsls	r3, r3, #22
 801515e:	d4dd      	bmi.n	801511c <_fflush_r+0xc>
 8015160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015162:	f000 fcc9 	bl	8015af8 <__retarget_lock_release_recursive>
 8015166:	e7d9      	b.n	801511c <_fflush_r+0xc>
 8015168:	4b05      	ldr	r3, [pc, #20]	; (8015180 <_fflush_r+0x70>)
 801516a:	429c      	cmp	r4, r3
 801516c:	d101      	bne.n	8015172 <_fflush_r+0x62>
 801516e:	68ac      	ldr	r4, [r5, #8]
 8015170:	e7df      	b.n	8015132 <_fflush_r+0x22>
 8015172:	4b04      	ldr	r3, [pc, #16]	; (8015184 <_fflush_r+0x74>)
 8015174:	429c      	cmp	r4, r3
 8015176:	bf08      	it	eq
 8015178:	68ec      	ldreq	r4, [r5, #12]
 801517a:	e7da      	b.n	8015132 <_fflush_r+0x22>
 801517c:	08048d7c 	.word	0x08048d7c
 8015180:	08048d9c 	.word	0x08048d9c
 8015184:	08048d5c 	.word	0x08048d5c

08015188 <std>:
 8015188:	2300      	movs	r3, #0
 801518a:	b510      	push	{r4, lr}
 801518c:	4604      	mov	r4, r0
 801518e:	e9c0 3300 	strd	r3, r3, [r0]
 8015192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015196:	6083      	str	r3, [r0, #8]
 8015198:	8181      	strh	r1, [r0, #12]
 801519a:	6643      	str	r3, [r0, #100]	; 0x64
 801519c:	81c2      	strh	r2, [r0, #14]
 801519e:	6183      	str	r3, [r0, #24]
 80151a0:	4619      	mov	r1, r3
 80151a2:	2208      	movs	r2, #8
 80151a4:	305c      	adds	r0, #92	; 0x5c
 80151a6:	f7fb fe7f 	bl	8010ea8 <memset>
 80151aa:	4b05      	ldr	r3, [pc, #20]	; (80151c0 <std+0x38>)
 80151ac:	6263      	str	r3, [r4, #36]	; 0x24
 80151ae:	4b05      	ldr	r3, [pc, #20]	; (80151c4 <std+0x3c>)
 80151b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80151b2:	4b05      	ldr	r3, [pc, #20]	; (80151c8 <std+0x40>)
 80151b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80151b6:	4b05      	ldr	r3, [pc, #20]	; (80151cc <std+0x44>)
 80151b8:	6224      	str	r4, [r4, #32]
 80151ba:	6323      	str	r3, [r4, #48]	; 0x30
 80151bc:	bd10      	pop	{r4, pc}
 80151be:	bf00      	nop
 80151c0:	080121cd 	.word	0x080121cd
 80151c4:	080121f3 	.word	0x080121f3
 80151c8:	0801222b 	.word	0x0801222b
 80151cc:	0801224f 	.word	0x0801224f

080151d0 <_cleanup_r>:
 80151d0:	4901      	ldr	r1, [pc, #4]	; (80151d8 <_cleanup_r+0x8>)
 80151d2:	f000 b8af 	b.w	8015334 <_fwalk_reent>
 80151d6:	bf00      	nop
 80151d8:	08015111 	.word	0x08015111

080151dc <__sfmoreglue>:
 80151dc:	b570      	push	{r4, r5, r6, lr}
 80151de:	2268      	movs	r2, #104	; 0x68
 80151e0:	1e4d      	subs	r5, r1, #1
 80151e2:	4355      	muls	r5, r2
 80151e4:	460e      	mov	r6, r1
 80151e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80151ea:	f7fc f943 	bl	8011474 <_malloc_r>
 80151ee:	4604      	mov	r4, r0
 80151f0:	b140      	cbz	r0, 8015204 <__sfmoreglue+0x28>
 80151f2:	2100      	movs	r1, #0
 80151f4:	e9c0 1600 	strd	r1, r6, [r0]
 80151f8:	300c      	adds	r0, #12
 80151fa:	60a0      	str	r0, [r4, #8]
 80151fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015200:	f7fb fe52 	bl	8010ea8 <memset>
 8015204:	4620      	mov	r0, r4
 8015206:	bd70      	pop	{r4, r5, r6, pc}

08015208 <__sfp_lock_acquire>:
 8015208:	4801      	ldr	r0, [pc, #4]	; (8015210 <__sfp_lock_acquire+0x8>)
 801520a:	f000 bc73 	b.w	8015af4 <__retarget_lock_acquire_recursive>
 801520e:	bf00      	nop
 8015210:	20005d82 	.word	0x20005d82

08015214 <__sfp_lock_release>:
 8015214:	4801      	ldr	r0, [pc, #4]	; (801521c <__sfp_lock_release+0x8>)
 8015216:	f000 bc6f 	b.w	8015af8 <__retarget_lock_release_recursive>
 801521a:	bf00      	nop
 801521c:	20005d82 	.word	0x20005d82

08015220 <__sinit_lock_acquire>:
 8015220:	4801      	ldr	r0, [pc, #4]	; (8015228 <__sinit_lock_acquire+0x8>)
 8015222:	f000 bc67 	b.w	8015af4 <__retarget_lock_acquire_recursive>
 8015226:	bf00      	nop
 8015228:	20005d83 	.word	0x20005d83

0801522c <__sinit_lock_release>:
 801522c:	4801      	ldr	r0, [pc, #4]	; (8015234 <__sinit_lock_release+0x8>)
 801522e:	f000 bc63 	b.w	8015af8 <__retarget_lock_release_recursive>
 8015232:	bf00      	nop
 8015234:	20005d83 	.word	0x20005d83

08015238 <__sinit>:
 8015238:	b510      	push	{r4, lr}
 801523a:	4604      	mov	r4, r0
 801523c:	f7ff fff0 	bl	8015220 <__sinit_lock_acquire>
 8015240:	69a3      	ldr	r3, [r4, #24]
 8015242:	b11b      	cbz	r3, 801524c <__sinit+0x14>
 8015244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015248:	f7ff bff0 	b.w	801522c <__sinit_lock_release>
 801524c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015250:	6523      	str	r3, [r4, #80]	; 0x50
 8015252:	4b13      	ldr	r3, [pc, #76]	; (80152a0 <__sinit+0x68>)
 8015254:	4a13      	ldr	r2, [pc, #76]	; (80152a4 <__sinit+0x6c>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	62a2      	str	r2, [r4, #40]	; 0x28
 801525a:	42a3      	cmp	r3, r4
 801525c:	bf04      	itt	eq
 801525e:	2301      	moveq	r3, #1
 8015260:	61a3      	streq	r3, [r4, #24]
 8015262:	4620      	mov	r0, r4
 8015264:	f000 f820 	bl	80152a8 <__sfp>
 8015268:	6060      	str	r0, [r4, #4]
 801526a:	4620      	mov	r0, r4
 801526c:	f000 f81c 	bl	80152a8 <__sfp>
 8015270:	60a0      	str	r0, [r4, #8]
 8015272:	4620      	mov	r0, r4
 8015274:	f000 f818 	bl	80152a8 <__sfp>
 8015278:	2200      	movs	r2, #0
 801527a:	60e0      	str	r0, [r4, #12]
 801527c:	2104      	movs	r1, #4
 801527e:	6860      	ldr	r0, [r4, #4]
 8015280:	f7ff ff82 	bl	8015188 <std>
 8015284:	68a0      	ldr	r0, [r4, #8]
 8015286:	2201      	movs	r2, #1
 8015288:	2109      	movs	r1, #9
 801528a:	f7ff ff7d 	bl	8015188 <std>
 801528e:	68e0      	ldr	r0, [r4, #12]
 8015290:	2202      	movs	r2, #2
 8015292:	2112      	movs	r1, #18
 8015294:	f7ff ff78 	bl	8015188 <std>
 8015298:	2301      	movs	r3, #1
 801529a:	61a3      	str	r3, [r4, #24]
 801529c:	e7d2      	b.n	8015244 <__sinit+0xc>
 801529e:	bf00      	nop
 80152a0:	080487cc 	.word	0x080487cc
 80152a4:	080151d1 	.word	0x080151d1

080152a8 <__sfp>:
 80152a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152aa:	4607      	mov	r7, r0
 80152ac:	f7ff ffac 	bl	8015208 <__sfp_lock_acquire>
 80152b0:	4b1e      	ldr	r3, [pc, #120]	; (801532c <__sfp+0x84>)
 80152b2:	681e      	ldr	r6, [r3, #0]
 80152b4:	69b3      	ldr	r3, [r6, #24]
 80152b6:	b913      	cbnz	r3, 80152be <__sfp+0x16>
 80152b8:	4630      	mov	r0, r6
 80152ba:	f7ff ffbd 	bl	8015238 <__sinit>
 80152be:	3648      	adds	r6, #72	; 0x48
 80152c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80152c4:	3b01      	subs	r3, #1
 80152c6:	d503      	bpl.n	80152d0 <__sfp+0x28>
 80152c8:	6833      	ldr	r3, [r6, #0]
 80152ca:	b30b      	cbz	r3, 8015310 <__sfp+0x68>
 80152cc:	6836      	ldr	r6, [r6, #0]
 80152ce:	e7f7      	b.n	80152c0 <__sfp+0x18>
 80152d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80152d4:	b9d5      	cbnz	r5, 801530c <__sfp+0x64>
 80152d6:	4b16      	ldr	r3, [pc, #88]	; (8015330 <__sfp+0x88>)
 80152d8:	60e3      	str	r3, [r4, #12]
 80152da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152de:	6665      	str	r5, [r4, #100]	; 0x64
 80152e0:	f000 fc06 	bl	8015af0 <__retarget_lock_init_recursive>
 80152e4:	f7ff ff96 	bl	8015214 <__sfp_lock_release>
 80152e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80152ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80152f0:	6025      	str	r5, [r4, #0]
 80152f2:	61a5      	str	r5, [r4, #24]
 80152f4:	2208      	movs	r2, #8
 80152f6:	4629      	mov	r1, r5
 80152f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80152fc:	f7fb fdd4 	bl	8010ea8 <memset>
 8015300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015308:	4620      	mov	r0, r4
 801530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801530c:	3468      	adds	r4, #104	; 0x68
 801530e:	e7d9      	b.n	80152c4 <__sfp+0x1c>
 8015310:	2104      	movs	r1, #4
 8015312:	4638      	mov	r0, r7
 8015314:	f7ff ff62 	bl	80151dc <__sfmoreglue>
 8015318:	4604      	mov	r4, r0
 801531a:	6030      	str	r0, [r6, #0]
 801531c:	2800      	cmp	r0, #0
 801531e:	d1d5      	bne.n	80152cc <__sfp+0x24>
 8015320:	f7ff ff78 	bl	8015214 <__sfp_lock_release>
 8015324:	230c      	movs	r3, #12
 8015326:	603b      	str	r3, [r7, #0]
 8015328:	e7ee      	b.n	8015308 <__sfp+0x60>
 801532a:	bf00      	nop
 801532c:	080487cc 	.word	0x080487cc
 8015330:	ffff0001 	.word	0xffff0001

08015334 <_fwalk_reent>:
 8015334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015338:	4606      	mov	r6, r0
 801533a:	4688      	mov	r8, r1
 801533c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015340:	2700      	movs	r7, #0
 8015342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015346:	f1b9 0901 	subs.w	r9, r9, #1
 801534a:	d505      	bpl.n	8015358 <_fwalk_reent+0x24>
 801534c:	6824      	ldr	r4, [r4, #0]
 801534e:	2c00      	cmp	r4, #0
 8015350:	d1f7      	bne.n	8015342 <_fwalk_reent+0xe>
 8015352:	4638      	mov	r0, r7
 8015354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015358:	89ab      	ldrh	r3, [r5, #12]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d907      	bls.n	801536e <_fwalk_reent+0x3a>
 801535e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015362:	3301      	adds	r3, #1
 8015364:	d003      	beq.n	801536e <_fwalk_reent+0x3a>
 8015366:	4629      	mov	r1, r5
 8015368:	4630      	mov	r0, r6
 801536a:	47c0      	blx	r8
 801536c:	4307      	orrs	r7, r0
 801536e:	3568      	adds	r5, #104	; 0x68
 8015370:	e7e9      	b.n	8015346 <_fwalk_reent+0x12>

08015372 <rshift>:
 8015372:	6903      	ldr	r3, [r0, #16]
 8015374:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801537c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015380:	f100 0414 	add.w	r4, r0, #20
 8015384:	dd45      	ble.n	8015412 <rshift+0xa0>
 8015386:	f011 011f 	ands.w	r1, r1, #31
 801538a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801538e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015392:	d10c      	bne.n	80153ae <rshift+0x3c>
 8015394:	f100 0710 	add.w	r7, r0, #16
 8015398:	4629      	mov	r1, r5
 801539a:	42b1      	cmp	r1, r6
 801539c:	d334      	bcc.n	8015408 <rshift+0x96>
 801539e:	1a9b      	subs	r3, r3, r2
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	1eea      	subs	r2, r5, #3
 80153a4:	4296      	cmp	r6, r2
 80153a6:	bf38      	it	cc
 80153a8:	2300      	movcc	r3, #0
 80153aa:	4423      	add	r3, r4
 80153ac:	e015      	b.n	80153da <rshift+0x68>
 80153ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80153b2:	f1c1 0820 	rsb	r8, r1, #32
 80153b6:	40cf      	lsrs	r7, r1
 80153b8:	f105 0e04 	add.w	lr, r5, #4
 80153bc:	46a1      	mov	r9, r4
 80153be:	4576      	cmp	r6, lr
 80153c0:	46f4      	mov	ip, lr
 80153c2:	d815      	bhi.n	80153f0 <rshift+0x7e>
 80153c4:	1a9a      	subs	r2, r3, r2
 80153c6:	0092      	lsls	r2, r2, #2
 80153c8:	3a04      	subs	r2, #4
 80153ca:	3501      	adds	r5, #1
 80153cc:	42ae      	cmp	r6, r5
 80153ce:	bf38      	it	cc
 80153d0:	2200      	movcc	r2, #0
 80153d2:	18a3      	adds	r3, r4, r2
 80153d4:	50a7      	str	r7, [r4, r2]
 80153d6:	b107      	cbz	r7, 80153da <rshift+0x68>
 80153d8:	3304      	adds	r3, #4
 80153da:	1b1a      	subs	r2, r3, r4
 80153dc:	42a3      	cmp	r3, r4
 80153de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80153e2:	bf08      	it	eq
 80153e4:	2300      	moveq	r3, #0
 80153e6:	6102      	str	r2, [r0, #16]
 80153e8:	bf08      	it	eq
 80153ea:	6143      	streq	r3, [r0, #20]
 80153ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153f0:	f8dc c000 	ldr.w	ip, [ip]
 80153f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80153f8:	ea4c 0707 	orr.w	r7, ip, r7
 80153fc:	f849 7b04 	str.w	r7, [r9], #4
 8015400:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015404:	40cf      	lsrs	r7, r1
 8015406:	e7da      	b.n	80153be <rshift+0x4c>
 8015408:	f851 cb04 	ldr.w	ip, [r1], #4
 801540c:	f847 cf04 	str.w	ip, [r7, #4]!
 8015410:	e7c3      	b.n	801539a <rshift+0x28>
 8015412:	4623      	mov	r3, r4
 8015414:	e7e1      	b.n	80153da <rshift+0x68>

08015416 <__hexdig_fun>:
 8015416:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801541a:	2b09      	cmp	r3, #9
 801541c:	d802      	bhi.n	8015424 <__hexdig_fun+0xe>
 801541e:	3820      	subs	r0, #32
 8015420:	b2c0      	uxtb	r0, r0
 8015422:	4770      	bx	lr
 8015424:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015428:	2b05      	cmp	r3, #5
 801542a:	d801      	bhi.n	8015430 <__hexdig_fun+0x1a>
 801542c:	3847      	subs	r0, #71	; 0x47
 801542e:	e7f7      	b.n	8015420 <__hexdig_fun+0xa>
 8015430:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015434:	2b05      	cmp	r3, #5
 8015436:	d801      	bhi.n	801543c <__hexdig_fun+0x26>
 8015438:	3827      	subs	r0, #39	; 0x27
 801543a:	e7f1      	b.n	8015420 <__hexdig_fun+0xa>
 801543c:	2000      	movs	r0, #0
 801543e:	4770      	bx	lr

08015440 <__gethex>:
 8015440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015444:	ed2d 8b02 	vpush	{d8}
 8015448:	b089      	sub	sp, #36	; 0x24
 801544a:	ee08 0a10 	vmov	s16, r0
 801544e:	9304      	str	r3, [sp, #16]
 8015450:	4bb4      	ldr	r3, [pc, #720]	; (8015724 <__gethex+0x2e4>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	9301      	str	r3, [sp, #4]
 8015456:	4618      	mov	r0, r3
 8015458:	468b      	mov	fp, r1
 801545a:	4690      	mov	r8, r2
 801545c:	f7ea fed2 	bl	8000204 <strlen>
 8015460:	9b01      	ldr	r3, [sp, #4]
 8015462:	f8db 2000 	ldr.w	r2, [fp]
 8015466:	4403      	add	r3, r0
 8015468:	4682      	mov	sl, r0
 801546a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801546e:	9305      	str	r3, [sp, #20]
 8015470:	1c93      	adds	r3, r2, #2
 8015472:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015476:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801547a:	32fe      	adds	r2, #254	; 0xfe
 801547c:	18d1      	adds	r1, r2, r3
 801547e:	461f      	mov	r7, r3
 8015480:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015484:	9100      	str	r1, [sp, #0]
 8015486:	2830      	cmp	r0, #48	; 0x30
 8015488:	d0f8      	beq.n	801547c <__gethex+0x3c>
 801548a:	f7ff ffc4 	bl	8015416 <__hexdig_fun>
 801548e:	4604      	mov	r4, r0
 8015490:	2800      	cmp	r0, #0
 8015492:	d13a      	bne.n	801550a <__gethex+0xca>
 8015494:	9901      	ldr	r1, [sp, #4]
 8015496:	4652      	mov	r2, sl
 8015498:	4638      	mov	r0, r7
 801549a:	f001 fe31 	bl	8017100 <strncmp>
 801549e:	4605      	mov	r5, r0
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d168      	bne.n	8015576 <__gethex+0x136>
 80154a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80154a8:	eb07 060a 	add.w	r6, r7, sl
 80154ac:	f7ff ffb3 	bl	8015416 <__hexdig_fun>
 80154b0:	2800      	cmp	r0, #0
 80154b2:	d062      	beq.n	801557a <__gethex+0x13a>
 80154b4:	4633      	mov	r3, r6
 80154b6:	7818      	ldrb	r0, [r3, #0]
 80154b8:	2830      	cmp	r0, #48	; 0x30
 80154ba:	461f      	mov	r7, r3
 80154bc:	f103 0301 	add.w	r3, r3, #1
 80154c0:	d0f9      	beq.n	80154b6 <__gethex+0x76>
 80154c2:	f7ff ffa8 	bl	8015416 <__hexdig_fun>
 80154c6:	2301      	movs	r3, #1
 80154c8:	fab0 f480 	clz	r4, r0
 80154cc:	0964      	lsrs	r4, r4, #5
 80154ce:	4635      	mov	r5, r6
 80154d0:	9300      	str	r3, [sp, #0]
 80154d2:	463a      	mov	r2, r7
 80154d4:	4616      	mov	r6, r2
 80154d6:	3201      	adds	r2, #1
 80154d8:	7830      	ldrb	r0, [r6, #0]
 80154da:	f7ff ff9c 	bl	8015416 <__hexdig_fun>
 80154de:	2800      	cmp	r0, #0
 80154e0:	d1f8      	bne.n	80154d4 <__gethex+0x94>
 80154e2:	9901      	ldr	r1, [sp, #4]
 80154e4:	4652      	mov	r2, sl
 80154e6:	4630      	mov	r0, r6
 80154e8:	f001 fe0a 	bl	8017100 <strncmp>
 80154ec:	b980      	cbnz	r0, 8015510 <__gethex+0xd0>
 80154ee:	b94d      	cbnz	r5, 8015504 <__gethex+0xc4>
 80154f0:	eb06 050a 	add.w	r5, r6, sl
 80154f4:	462a      	mov	r2, r5
 80154f6:	4616      	mov	r6, r2
 80154f8:	3201      	adds	r2, #1
 80154fa:	7830      	ldrb	r0, [r6, #0]
 80154fc:	f7ff ff8b 	bl	8015416 <__hexdig_fun>
 8015500:	2800      	cmp	r0, #0
 8015502:	d1f8      	bne.n	80154f6 <__gethex+0xb6>
 8015504:	1bad      	subs	r5, r5, r6
 8015506:	00ad      	lsls	r5, r5, #2
 8015508:	e004      	b.n	8015514 <__gethex+0xd4>
 801550a:	2400      	movs	r4, #0
 801550c:	4625      	mov	r5, r4
 801550e:	e7e0      	b.n	80154d2 <__gethex+0x92>
 8015510:	2d00      	cmp	r5, #0
 8015512:	d1f7      	bne.n	8015504 <__gethex+0xc4>
 8015514:	7833      	ldrb	r3, [r6, #0]
 8015516:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801551a:	2b50      	cmp	r3, #80	; 0x50
 801551c:	d13b      	bne.n	8015596 <__gethex+0x156>
 801551e:	7873      	ldrb	r3, [r6, #1]
 8015520:	2b2b      	cmp	r3, #43	; 0x2b
 8015522:	d02c      	beq.n	801557e <__gethex+0x13e>
 8015524:	2b2d      	cmp	r3, #45	; 0x2d
 8015526:	d02e      	beq.n	8015586 <__gethex+0x146>
 8015528:	1c71      	adds	r1, r6, #1
 801552a:	f04f 0900 	mov.w	r9, #0
 801552e:	7808      	ldrb	r0, [r1, #0]
 8015530:	f7ff ff71 	bl	8015416 <__hexdig_fun>
 8015534:	1e43      	subs	r3, r0, #1
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b18      	cmp	r3, #24
 801553a:	d82c      	bhi.n	8015596 <__gethex+0x156>
 801553c:	f1a0 0210 	sub.w	r2, r0, #16
 8015540:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015544:	f7ff ff67 	bl	8015416 <__hexdig_fun>
 8015548:	1e43      	subs	r3, r0, #1
 801554a:	b2db      	uxtb	r3, r3
 801554c:	2b18      	cmp	r3, #24
 801554e:	d91d      	bls.n	801558c <__gethex+0x14c>
 8015550:	f1b9 0f00 	cmp.w	r9, #0
 8015554:	d000      	beq.n	8015558 <__gethex+0x118>
 8015556:	4252      	negs	r2, r2
 8015558:	4415      	add	r5, r2
 801555a:	f8cb 1000 	str.w	r1, [fp]
 801555e:	b1e4      	cbz	r4, 801559a <__gethex+0x15a>
 8015560:	9b00      	ldr	r3, [sp, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	bf14      	ite	ne
 8015566:	2700      	movne	r7, #0
 8015568:	2706      	moveq	r7, #6
 801556a:	4638      	mov	r0, r7
 801556c:	b009      	add	sp, #36	; 0x24
 801556e:	ecbd 8b02 	vpop	{d8}
 8015572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015576:	463e      	mov	r6, r7
 8015578:	4625      	mov	r5, r4
 801557a:	2401      	movs	r4, #1
 801557c:	e7ca      	b.n	8015514 <__gethex+0xd4>
 801557e:	f04f 0900 	mov.w	r9, #0
 8015582:	1cb1      	adds	r1, r6, #2
 8015584:	e7d3      	b.n	801552e <__gethex+0xee>
 8015586:	f04f 0901 	mov.w	r9, #1
 801558a:	e7fa      	b.n	8015582 <__gethex+0x142>
 801558c:	230a      	movs	r3, #10
 801558e:	fb03 0202 	mla	r2, r3, r2, r0
 8015592:	3a10      	subs	r2, #16
 8015594:	e7d4      	b.n	8015540 <__gethex+0x100>
 8015596:	4631      	mov	r1, r6
 8015598:	e7df      	b.n	801555a <__gethex+0x11a>
 801559a:	1bf3      	subs	r3, r6, r7
 801559c:	3b01      	subs	r3, #1
 801559e:	4621      	mov	r1, r4
 80155a0:	2b07      	cmp	r3, #7
 80155a2:	dc0b      	bgt.n	80155bc <__gethex+0x17c>
 80155a4:	ee18 0a10 	vmov	r0, s16
 80155a8:	f000 fb58 	bl	8015c5c <_Balloc>
 80155ac:	4604      	mov	r4, r0
 80155ae:	b940      	cbnz	r0, 80155c2 <__gethex+0x182>
 80155b0:	4b5d      	ldr	r3, [pc, #372]	; (8015728 <__gethex+0x2e8>)
 80155b2:	4602      	mov	r2, r0
 80155b4:	21de      	movs	r1, #222	; 0xde
 80155b6:	485d      	ldr	r0, [pc, #372]	; (801572c <__gethex+0x2ec>)
 80155b8:	f7fb fbf6 	bl	8010da8 <__assert_func>
 80155bc:	3101      	adds	r1, #1
 80155be:	105b      	asrs	r3, r3, #1
 80155c0:	e7ee      	b.n	80155a0 <__gethex+0x160>
 80155c2:	f100 0914 	add.w	r9, r0, #20
 80155c6:	f04f 0b00 	mov.w	fp, #0
 80155ca:	f1ca 0301 	rsb	r3, sl, #1
 80155ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80155d2:	f8cd b000 	str.w	fp, [sp]
 80155d6:	9306      	str	r3, [sp, #24]
 80155d8:	42b7      	cmp	r7, r6
 80155da:	d340      	bcc.n	801565e <__gethex+0x21e>
 80155dc:	9802      	ldr	r0, [sp, #8]
 80155de:	9b00      	ldr	r3, [sp, #0]
 80155e0:	f840 3b04 	str.w	r3, [r0], #4
 80155e4:	eba0 0009 	sub.w	r0, r0, r9
 80155e8:	1080      	asrs	r0, r0, #2
 80155ea:	0146      	lsls	r6, r0, #5
 80155ec:	6120      	str	r0, [r4, #16]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f000 fc26 	bl	8015e40 <__hi0bits>
 80155f4:	1a30      	subs	r0, r6, r0
 80155f6:	f8d8 6000 	ldr.w	r6, [r8]
 80155fa:	42b0      	cmp	r0, r6
 80155fc:	dd63      	ble.n	80156c6 <__gethex+0x286>
 80155fe:	1b87      	subs	r7, r0, r6
 8015600:	4639      	mov	r1, r7
 8015602:	4620      	mov	r0, r4
 8015604:	f000 ffca 	bl	801659c <__any_on>
 8015608:	4682      	mov	sl, r0
 801560a:	b1a8      	cbz	r0, 8015638 <__gethex+0x1f8>
 801560c:	1e7b      	subs	r3, r7, #1
 801560e:	1159      	asrs	r1, r3, #5
 8015610:	f003 021f 	and.w	r2, r3, #31
 8015614:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015618:	f04f 0a01 	mov.w	sl, #1
 801561c:	fa0a f202 	lsl.w	r2, sl, r2
 8015620:	420a      	tst	r2, r1
 8015622:	d009      	beq.n	8015638 <__gethex+0x1f8>
 8015624:	4553      	cmp	r3, sl
 8015626:	dd05      	ble.n	8015634 <__gethex+0x1f4>
 8015628:	1eb9      	subs	r1, r7, #2
 801562a:	4620      	mov	r0, r4
 801562c:	f000 ffb6 	bl	801659c <__any_on>
 8015630:	2800      	cmp	r0, #0
 8015632:	d145      	bne.n	80156c0 <__gethex+0x280>
 8015634:	f04f 0a02 	mov.w	sl, #2
 8015638:	4639      	mov	r1, r7
 801563a:	4620      	mov	r0, r4
 801563c:	f7ff fe99 	bl	8015372 <rshift>
 8015640:	443d      	add	r5, r7
 8015642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015646:	42ab      	cmp	r3, r5
 8015648:	da4c      	bge.n	80156e4 <__gethex+0x2a4>
 801564a:	ee18 0a10 	vmov	r0, s16
 801564e:	4621      	mov	r1, r4
 8015650:	f000 fb44 	bl	8015cdc <_Bfree>
 8015654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015656:	2300      	movs	r3, #0
 8015658:	6013      	str	r3, [r2, #0]
 801565a:	27a3      	movs	r7, #163	; 0xa3
 801565c:	e785      	b.n	801556a <__gethex+0x12a>
 801565e:	1e73      	subs	r3, r6, #1
 8015660:	9a05      	ldr	r2, [sp, #20]
 8015662:	9303      	str	r3, [sp, #12]
 8015664:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015668:	4293      	cmp	r3, r2
 801566a:	d019      	beq.n	80156a0 <__gethex+0x260>
 801566c:	f1bb 0f20 	cmp.w	fp, #32
 8015670:	d107      	bne.n	8015682 <__gethex+0x242>
 8015672:	9b02      	ldr	r3, [sp, #8]
 8015674:	9a00      	ldr	r2, [sp, #0]
 8015676:	f843 2b04 	str.w	r2, [r3], #4
 801567a:	9302      	str	r3, [sp, #8]
 801567c:	2300      	movs	r3, #0
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	469b      	mov	fp, r3
 8015682:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015686:	f7ff fec6 	bl	8015416 <__hexdig_fun>
 801568a:	9b00      	ldr	r3, [sp, #0]
 801568c:	f000 000f 	and.w	r0, r0, #15
 8015690:	fa00 f00b 	lsl.w	r0, r0, fp
 8015694:	4303      	orrs	r3, r0
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	f10b 0b04 	add.w	fp, fp, #4
 801569c:	9b03      	ldr	r3, [sp, #12]
 801569e:	e00d      	b.n	80156bc <__gethex+0x27c>
 80156a0:	9b03      	ldr	r3, [sp, #12]
 80156a2:	9a06      	ldr	r2, [sp, #24]
 80156a4:	4413      	add	r3, r2
 80156a6:	42bb      	cmp	r3, r7
 80156a8:	d3e0      	bcc.n	801566c <__gethex+0x22c>
 80156aa:	4618      	mov	r0, r3
 80156ac:	9901      	ldr	r1, [sp, #4]
 80156ae:	9307      	str	r3, [sp, #28]
 80156b0:	4652      	mov	r2, sl
 80156b2:	f001 fd25 	bl	8017100 <strncmp>
 80156b6:	9b07      	ldr	r3, [sp, #28]
 80156b8:	2800      	cmp	r0, #0
 80156ba:	d1d7      	bne.n	801566c <__gethex+0x22c>
 80156bc:	461e      	mov	r6, r3
 80156be:	e78b      	b.n	80155d8 <__gethex+0x198>
 80156c0:	f04f 0a03 	mov.w	sl, #3
 80156c4:	e7b8      	b.n	8015638 <__gethex+0x1f8>
 80156c6:	da0a      	bge.n	80156de <__gethex+0x29e>
 80156c8:	1a37      	subs	r7, r6, r0
 80156ca:	4621      	mov	r1, r4
 80156cc:	ee18 0a10 	vmov	r0, s16
 80156d0:	463a      	mov	r2, r7
 80156d2:	f000 fd1f 	bl	8016114 <__lshift>
 80156d6:	1bed      	subs	r5, r5, r7
 80156d8:	4604      	mov	r4, r0
 80156da:	f100 0914 	add.w	r9, r0, #20
 80156de:	f04f 0a00 	mov.w	sl, #0
 80156e2:	e7ae      	b.n	8015642 <__gethex+0x202>
 80156e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80156e8:	42a8      	cmp	r0, r5
 80156ea:	dd72      	ble.n	80157d2 <__gethex+0x392>
 80156ec:	1b45      	subs	r5, r0, r5
 80156ee:	42ae      	cmp	r6, r5
 80156f0:	dc36      	bgt.n	8015760 <__gethex+0x320>
 80156f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156f6:	2b02      	cmp	r3, #2
 80156f8:	d02a      	beq.n	8015750 <__gethex+0x310>
 80156fa:	2b03      	cmp	r3, #3
 80156fc:	d02c      	beq.n	8015758 <__gethex+0x318>
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d11c      	bne.n	801573c <__gethex+0x2fc>
 8015702:	42ae      	cmp	r6, r5
 8015704:	d11a      	bne.n	801573c <__gethex+0x2fc>
 8015706:	2e01      	cmp	r6, #1
 8015708:	d112      	bne.n	8015730 <__gethex+0x2f0>
 801570a:	9a04      	ldr	r2, [sp, #16]
 801570c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015710:	6013      	str	r3, [r2, #0]
 8015712:	2301      	movs	r3, #1
 8015714:	6123      	str	r3, [r4, #16]
 8015716:	f8c9 3000 	str.w	r3, [r9]
 801571a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801571c:	2762      	movs	r7, #98	; 0x62
 801571e:	601c      	str	r4, [r3, #0]
 8015720:	e723      	b.n	801556a <__gethex+0x12a>
 8015722:	bf00      	nop
 8015724:	08048e24 	.word	0x08048e24
 8015728:	08048d49 	.word	0x08048d49
 801572c:	08048dbc 	.word	0x08048dbc
 8015730:	1e71      	subs	r1, r6, #1
 8015732:	4620      	mov	r0, r4
 8015734:	f000 ff32 	bl	801659c <__any_on>
 8015738:	2800      	cmp	r0, #0
 801573a:	d1e6      	bne.n	801570a <__gethex+0x2ca>
 801573c:	ee18 0a10 	vmov	r0, s16
 8015740:	4621      	mov	r1, r4
 8015742:	f000 facb 	bl	8015cdc <_Bfree>
 8015746:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015748:	2300      	movs	r3, #0
 801574a:	6013      	str	r3, [r2, #0]
 801574c:	2750      	movs	r7, #80	; 0x50
 801574e:	e70c      	b.n	801556a <__gethex+0x12a>
 8015750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1f2      	bne.n	801573c <__gethex+0x2fc>
 8015756:	e7d8      	b.n	801570a <__gethex+0x2ca>
 8015758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801575a:	2b00      	cmp	r3, #0
 801575c:	d1d5      	bne.n	801570a <__gethex+0x2ca>
 801575e:	e7ed      	b.n	801573c <__gethex+0x2fc>
 8015760:	1e6f      	subs	r7, r5, #1
 8015762:	f1ba 0f00 	cmp.w	sl, #0
 8015766:	d131      	bne.n	80157cc <__gethex+0x38c>
 8015768:	b127      	cbz	r7, 8015774 <__gethex+0x334>
 801576a:	4639      	mov	r1, r7
 801576c:	4620      	mov	r0, r4
 801576e:	f000 ff15 	bl	801659c <__any_on>
 8015772:	4682      	mov	sl, r0
 8015774:	117b      	asrs	r3, r7, #5
 8015776:	2101      	movs	r1, #1
 8015778:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801577c:	f007 071f 	and.w	r7, r7, #31
 8015780:	fa01 f707 	lsl.w	r7, r1, r7
 8015784:	421f      	tst	r7, r3
 8015786:	4629      	mov	r1, r5
 8015788:	4620      	mov	r0, r4
 801578a:	bf18      	it	ne
 801578c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015790:	1b76      	subs	r6, r6, r5
 8015792:	f7ff fdee 	bl	8015372 <rshift>
 8015796:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801579a:	2702      	movs	r7, #2
 801579c:	f1ba 0f00 	cmp.w	sl, #0
 80157a0:	d048      	beq.n	8015834 <__gethex+0x3f4>
 80157a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80157a6:	2b02      	cmp	r3, #2
 80157a8:	d015      	beq.n	80157d6 <__gethex+0x396>
 80157aa:	2b03      	cmp	r3, #3
 80157ac:	d017      	beq.n	80157de <__gethex+0x39e>
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	d109      	bne.n	80157c6 <__gethex+0x386>
 80157b2:	f01a 0f02 	tst.w	sl, #2
 80157b6:	d006      	beq.n	80157c6 <__gethex+0x386>
 80157b8:	f8d9 0000 	ldr.w	r0, [r9]
 80157bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80157c0:	f01a 0f01 	tst.w	sl, #1
 80157c4:	d10e      	bne.n	80157e4 <__gethex+0x3a4>
 80157c6:	f047 0710 	orr.w	r7, r7, #16
 80157ca:	e033      	b.n	8015834 <__gethex+0x3f4>
 80157cc:	f04f 0a01 	mov.w	sl, #1
 80157d0:	e7d0      	b.n	8015774 <__gethex+0x334>
 80157d2:	2701      	movs	r7, #1
 80157d4:	e7e2      	b.n	801579c <__gethex+0x35c>
 80157d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157d8:	f1c3 0301 	rsb	r3, r3, #1
 80157dc:	9315      	str	r3, [sp, #84]	; 0x54
 80157de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d0f0      	beq.n	80157c6 <__gethex+0x386>
 80157e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80157e8:	f104 0314 	add.w	r3, r4, #20
 80157ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80157f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80157f4:	f04f 0c00 	mov.w	ip, #0
 80157f8:	4618      	mov	r0, r3
 80157fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80157fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015802:	d01c      	beq.n	801583e <__gethex+0x3fe>
 8015804:	3201      	adds	r2, #1
 8015806:	6002      	str	r2, [r0, #0]
 8015808:	2f02      	cmp	r7, #2
 801580a:	f104 0314 	add.w	r3, r4, #20
 801580e:	d13f      	bne.n	8015890 <__gethex+0x450>
 8015810:	f8d8 2000 	ldr.w	r2, [r8]
 8015814:	3a01      	subs	r2, #1
 8015816:	42b2      	cmp	r2, r6
 8015818:	d10a      	bne.n	8015830 <__gethex+0x3f0>
 801581a:	1171      	asrs	r1, r6, #5
 801581c:	2201      	movs	r2, #1
 801581e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015822:	f006 061f 	and.w	r6, r6, #31
 8015826:	fa02 f606 	lsl.w	r6, r2, r6
 801582a:	421e      	tst	r6, r3
 801582c:	bf18      	it	ne
 801582e:	4617      	movne	r7, r2
 8015830:	f047 0720 	orr.w	r7, r7, #32
 8015834:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015836:	601c      	str	r4, [r3, #0]
 8015838:	9b04      	ldr	r3, [sp, #16]
 801583a:	601d      	str	r5, [r3, #0]
 801583c:	e695      	b.n	801556a <__gethex+0x12a>
 801583e:	4299      	cmp	r1, r3
 8015840:	f843 cc04 	str.w	ip, [r3, #-4]
 8015844:	d8d8      	bhi.n	80157f8 <__gethex+0x3b8>
 8015846:	68a3      	ldr	r3, [r4, #8]
 8015848:	459b      	cmp	fp, r3
 801584a:	db19      	blt.n	8015880 <__gethex+0x440>
 801584c:	6861      	ldr	r1, [r4, #4]
 801584e:	ee18 0a10 	vmov	r0, s16
 8015852:	3101      	adds	r1, #1
 8015854:	f000 fa02 	bl	8015c5c <_Balloc>
 8015858:	4681      	mov	r9, r0
 801585a:	b918      	cbnz	r0, 8015864 <__gethex+0x424>
 801585c:	4b1a      	ldr	r3, [pc, #104]	; (80158c8 <__gethex+0x488>)
 801585e:	4602      	mov	r2, r0
 8015860:	2184      	movs	r1, #132	; 0x84
 8015862:	e6a8      	b.n	80155b6 <__gethex+0x176>
 8015864:	6922      	ldr	r2, [r4, #16]
 8015866:	3202      	adds	r2, #2
 8015868:	f104 010c 	add.w	r1, r4, #12
 801586c:	0092      	lsls	r2, r2, #2
 801586e:	300c      	adds	r0, #12
 8015870:	f7fb fb0c 	bl	8010e8c <memcpy>
 8015874:	4621      	mov	r1, r4
 8015876:	ee18 0a10 	vmov	r0, s16
 801587a:	f000 fa2f 	bl	8015cdc <_Bfree>
 801587e:	464c      	mov	r4, r9
 8015880:	6923      	ldr	r3, [r4, #16]
 8015882:	1c5a      	adds	r2, r3, #1
 8015884:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015888:	6122      	str	r2, [r4, #16]
 801588a:	2201      	movs	r2, #1
 801588c:	615a      	str	r2, [r3, #20]
 801588e:	e7bb      	b.n	8015808 <__gethex+0x3c8>
 8015890:	6922      	ldr	r2, [r4, #16]
 8015892:	455a      	cmp	r2, fp
 8015894:	dd0b      	ble.n	80158ae <__gethex+0x46e>
 8015896:	2101      	movs	r1, #1
 8015898:	4620      	mov	r0, r4
 801589a:	f7ff fd6a 	bl	8015372 <rshift>
 801589e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80158a2:	3501      	adds	r5, #1
 80158a4:	42ab      	cmp	r3, r5
 80158a6:	f6ff aed0 	blt.w	801564a <__gethex+0x20a>
 80158aa:	2701      	movs	r7, #1
 80158ac:	e7c0      	b.n	8015830 <__gethex+0x3f0>
 80158ae:	f016 061f 	ands.w	r6, r6, #31
 80158b2:	d0fa      	beq.n	80158aa <__gethex+0x46a>
 80158b4:	4453      	add	r3, sl
 80158b6:	f1c6 0620 	rsb	r6, r6, #32
 80158ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80158be:	f000 fabf 	bl	8015e40 <__hi0bits>
 80158c2:	42b0      	cmp	r0, r6
 80158c4:	dbe7      	blt.n	8015896 <__gethex+0x456>
 80158c6:	e7f0      	b.n	80158aa <__gethex+0x46a>
 80158c8:	08048d49 	.word	0x08048d49

080158cc <L_shift>:
 80158cc:	f1c2 0208 	rsb	r2, r2, #8
 80158d0:	0092      	lsls	r2, r2, #2
 80158d2:	b570      	push	{r4, r5, r6, lr}
 80158d4:	f1c2 0620 	rsb	r6, r2, #32
 80158d8:	6843      	ldr	r3, [r0, #4]
 80158da:	6804      	ldr	r4, [r0, #0]
 80158dc:	fa03 f506 	lsl.w	r5, r3, r6
 80158e0:	432c      	orrs	r4, r5
 80158e2:	40d3      	lsrs	r3, r2
 80158e4:	6004      	str	r4, [r0, #0]
 80158e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80158ea:	4288      	cmp	r0, r1
 80158ec:	d3f4      	bcc.n	80158d8 <L_shift+0xc>
 80158ee:	bd70      	pop	{r4, r5, r6, pc}

080158f0 <__match>:
 80158f0:	b530      	push	{r4, r5, lr}
 80158f2:	6803      	ldr	r3, [r0, #0]
 80158f4:	3301      	adds	r3, #1
 80158f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158fa:	b914      	cbnz	r4, 8015902 <__match+0x12>
 80158fc:	6003      	str	r3, [r0, #0]
 80158fe:	2001      	movs	r0, #1
 8015900:	bd30      	pop	{r4, r5, pc}
 8015902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015906:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801590a:	2d19      	cmp	r5, #25
 801590c:	bf98      	it	ls
 801590e:	3220      	addls	r2, #32
 8015910:	42a2      	cmp	r2, r4
 8015912:	d0f0      	beq.n	80158f6 <__match+0x6>
 8015914:	2000      	movs	r0, #0
 8015916:	e7f3      	b.n	8015900 <__match+0x10>

08015918 <__hexnan>:
 8015918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	680b      	ldr	r3, [r1, #0]
 801591e:	115e      	asrs	r6, r3, #5
 8015920:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015924:	f013 031f 	ands.w	r3, r3, #31
 8015928:	b087      	sub	sp, #28
 801592a:	bf18      	it	ne
 801592c:	3604      	addne	r6, #4
 801592e:	2500      	movs	r5, #0
 8015930:	1f37      	subs	r7, r6, #4
 8015932:	4690      	mov	r8, r2
 8015934:	6802      	ldr	r2, [r0, #0]
 8015936:	9301      	str	r3, [sp, #4]
 8015938:	4682      	mov	sl, r0
 801593a:	f846 5c04 	str.w	r5, [r6, #-4]
 801593e:	46b9      	mov	r9, r7
 8015940:	463c      	mov	r4, r7
 8015942:	9502      	str	r5, [sp, #8]
 8015944:	46ab      	mov	fp, r5
 8015946:	7851      	ldrb	r1, [r2, #1]
 8015948:	1c53      	adds	r3, r2, #1
 801594a:	9303      	str	r3, [sp, #12]
 801594c:	b341      	cbz	r1, 80159a0 <__hexnan+0x88>
 801594e:	4608      	mov	r0, r1
 8015950:	9205      	str	r2, [sp, #20]
 8015952:	9104      	str	r1, [sp, #16]
 8015954:	f7ff fd5f 	bl	8015416 <__hexdig_fun>
 8015958:	2800      	cmp	r0, #0
 801595a:	d14f      	bne.n	80159fc <__hexnan+0xe4>
 801595c:	9904      	ldr	r1, [sp, #16]
 801595e:	9a05      	ldr	r2, [sp, #20]
 8015960:	2920      	cmp	r1, #32
 8015962:	d818      	bhi.n	8015996 <__hexnan+0x7e>
 8015964:	9b02      	ldr	r3, [sp, #8]
 8015966:	459b      	cmp	fp, r3
 8015968:	dd13      	ble.n	8015992 <__hexnan+0x7a>
 801596a:	454c      	cmp	r4, r9
 801596c:	d206      	bcs.n	801597c <__hexnan+0x64>
 801596e:	2d07      	cmp	r5, #7
 8015970:	dc04      	bgt.n	801597c <__hexnan+0x64>
 8015972:	462a      	mov	r2, r5
 8015974:	4649      	mov	r1, r9
 8015976:	4620      	mov	r0, r4
 8015978:	f7ff ffa8 	bl	80158cc <L_shift>
 801597c:	4544      	cmp	r4, r8
 801597e:	d950      	bls.n	8015a22 <__hexnan+0x10a>
 8015980:	2300      	movs	r3, #0
 8015982:	f1a4 0904 	sub.w	r9, r4, #4
 8015986:	f844 3c04 	str.w	r3, [r4, #-4]
 801598a:	f8cd b008 	str.w	fp, [sp, #8]
 801598e:	464c      	mov	r4, r9
 8015990:	461d      	mov	r5, r3
 8015992:	9a03      	ldr	r2, [sp, #12]
 8015994:	e7d7      	b.n	8015946 <__hexnan+0x2e>
 8015996:	2929      	cmp	r1, #41	; 0x29
 8015998:	d156      	bne.n	8015a48 <__hexnan+0x130>
 801599a:	3202      	adds	r2, #2
 801599c:	f8ca 2000 	str.w	r2, [sl]
 80159a0:	f1bb 0f00 	cmp.w	fp, #0
 80159a4:	d050      	beq.n	8015a48 <__hexnan+0x130>
 80159a6:	454c      	cmp	r4, r9
 80159a8:	d206      	bcs.n	80159b8 <__hexnan+0xa0>
 80159aa:	2d07      	cmp	r5, #7
 80159ac:	dc04      	bgt.n	80159b8 <__hexnan+0xa0>
 80159ae:	462a      	mov	r2, r5
 80159b0:	4649      	mov	r1, r9
 80159b2:	4620      	mov	r0, r4
 80159b4:	f7ff ff8a 	bl	80158cc <L_shift>
 80159b8:	4544      	cmp	r4, r8
 80159ba:	d934      	bls.n	8015a26 <__hexnan+0x10e>
 80159bc:	f1a8 0204 	sub.w	r2, r8, #4
 80159c0:	4623      	mov	r3, r4
 80159c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80159c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80159ca:	429f      	cmp	r7, r3
 80159cc:	d2f9      	bcs.n	80159c2 <__hexnan+0xaa>
 80159ce:	1b3b      	subs	r3, r7, r4
 80159d0:	f023 0303 	bic.w	r3, r3, #3
 80159d4:	3304      	adds	r3, #4
 80159d6:	3401      	adds	r4, #1
 80159d8:	3e03      	subs	r6, #3
 80159da:	42b4      	cmp	r4, r6
 80159dc:	bf88      	it	hi
 80159de:	2304      	movhi	r3, #4
 80159e0:	4443      	add	r3, r8
 80159e2:	2200      	movs	r2, #0
 80159e4:	f843 2b04 	str.w	r2, [r3], #4
 80159e8:	429f      	cmp	r7, r3
 80159ea:	d2fb      	bcs.n	80159e4 <__hexnan+0xcc>
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	b91b      	cbnz	r3, 80159f8 <__hexnan+0xe0>
 80159f0:	4547      	cmp	r7, r8
 80159f2:	d127      	bne.n	8015a44 <__hexnan+0x12c>
 80159f4:	2301      	movs	r3, #1
 80159f6:	603b      	str	r3, [r7, #0]
 80159f8:	2005      	movs	r0, #5
 80159fa:	e026      	b.n	8015a4a <__hexnan+0x132>
 80159fc:	3501      	adds	r5, #1
 80159fe:	2d08      	cmp	r5, #8
 8015a00:	f10b 0b01 	add.w	fp, fp, #1
 8015a04:	dd06      	ble.n	8015a14 <__hexnan+0xfc>
 8015a06:	4544      	cmp	r4, r8
 8015a08:	d9c3      	bls.n	8015992 <__hexnan+0x7a>
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a10:	2501      	movs	r5, #1
 8015a12:	3c04      	subs	r4, #4
 8015a14:	6822      	ldr	r2, [r4, #0]
 8015a16:	f000 000f 	and.w	r0, r0, #15
 8015a1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015a1e:	6022      	str	r2, [r4, #0]
 8015a20:	e7b7      	b.n	8015992 <__hexnan+0x7a>
 8015a22:	2508      	movs	r5, #8
 8015a24:	e7b5      	b.n	8015992 <__hexnan+0x7a>
 8015a26:	9b01      	ldr	r3, [sp, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d0df      	beq.n	80159ec <__hexnan+0xd4>
 8015a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8015a30:	f1c3 0320 	rsb	r3, r3, #32
 8015a34:	fa22 f303 	lsr.w	r3, r2, r3
 8015a38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015a3c:	401a      	ands	r2, r3
 8015a3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015a42:	e7d3      	b.n	80159ec <__hexnan+0xd4>
 8015a44:	3f04      	subs	r7, #4
 8015a46:	e7d1      	b.n	80159ec <__hexnan+0xd4>
 8015a48:	2004      	movs	r0, #4
 8015a4a:	b007      	add	sp, #28
 8015a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015a50 <_findenv_r>:
 8015a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a54:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015ac4 <_findenv_r+0x74>
 8015a58:	4607      	mov	r7, r0
 8015a5a:	4689      	mov	r9, r1
 8015a5c:	4616      	mov	r6, r2
 8015a5e:	f001 fbab 	bl	80171b8 <__env_lock>
 8015a62:	f8da 4000 	ldr.w	r4, [sl]
 8015a66:	b134      	cbz	r4, 8015a76 <_findenv_r+0x26>
 8015a68:	464b      	mov	r3, r9
 8015a6a:	4698      	mov	r8, r3
 8015a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a70:	b13a      	cbz	r2, 8015a82 <_findenv_r+0x32>
 8015a72:	2a3d      	cmp	r2, #61	; 0x3d
 8015a74:	d1f9      	bne.n	8015a6a <_findenv_r+0x1a>
 8015a76:	4638      	mov	r0, r7
 8015a78:	f001 fba4 	bl	80171c4 <__env_unlock>
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a82:	eba8 0809 	sub.w	r8, r8, r9
 8015a86:	46a3      	mov	fp, r4
 8015a88:	f854 0b04 	ldr.w	r0, [r4], #4
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	d0f2      	beq.n	8015a76 <_findenv_r+0x26>
 8015a90:	4642      	mov	r2, r8
 8015a92:	4649      	mov	r1, r9
 8015a94:	f001 fb34 	bl	8017100 <strncmp>
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	d1f4      	bne.n	8015a86 <_findenv_r+0x36>
 8015a9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015aa0:	eb03 0508 	add.w	r5, r3, r8
 8015aa4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015aa8:	2b3d      	cmp	r3, #61	; 0x3d
 8015aaa:	d1ec      	bne.n	8015a86 <_findenv_r+0x36>
 8015aac:	f8da 3000 	ldr.w	r3, [sl]
 8015ab0:	ebab 0303 	sub.w	r3, fp, r3
 8015ab4:	109b      	asrs	r3, r3, #2
 8015ab6:	4638      	mov	r0, r7
 8015ab8:	6033      	str	r3, [r6, #0]
 8015aba:	f001 fb83 	bl	80171c4 <__env_unlock>
 8015abe:	1c68      	adds	r0, r5, #1
 8015ac0:	e7dd      	b.n	8015a7e <_findenv_r+0x2e>
 8015ac2:	bf00      	nop
 8015ac4:	20000184 	.word	0x20000184

08015ac8 <_getenv_r>:
 8015ac8:	b507      	push	{r0, r1, r2, lr}
 8015aca:	aa01      	add	r2, sp, #4
 8015acc:	f7ff ffc0 	bl	8015a50 <_findenv_r>
 8015ad0:	b003      	add	sp, #12
 8015ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015ad8 <__gettzinfo>:
 8015ad8:	4800      	ldr	r0, [pc, #0]	; (8015adc <__gettzinfo+0x4>)
 8015ada:	4770      	bx	lr
 8015adc:	20000338 	.word	0x20000338

08015ae0 <labs>:
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	bfb8      	it	lt
 8015ae4:	4240      	neglt	r0, r0
 8015ae6:	4770      	bx	lr

08015ae8 <_localeconv_r>:
 8015ae8:	4800      	ldr	r0, [pc, #0]	; (8015aec <_localeconv_r+0x4>)
 8015aea:	4770      	bx	lr
 8015aec:	20000484 	.word	0x20000484

08015af0 <__retarget_lock_init_recursive>:
 8015af0:	4770      	bx	lr

08015af2 <__retarget_lock_acquire>:
 8015af2:	4770      	bx	lr

08015af4 <__retarget_lock_acquire_recursive>:
 8015af4:	4770      	bx	lr

08015af6 <__retarget_lock_release>:
 8015af6:	4770      	bx	lr

08015af8 <__retarget_lock_release_recursive>:
 8015af8:	4770      	bx	lr
	...

08015afc <_lseek_r>:
 8015afc:	b538      	push	{r3, r4, r5, lr}
 8015afe:	4d07      	ldr	r5, [pc, #28]	; (8015b1c <_lseek_r+0x20>)
 8015b00:	4604      	mov	r4, r0
 8015b02:	4608      	mov	r0, r1
 8015b04:	4611      	mov	r1, r2
 8015b06:	2200      	movs	r2, #0
 8015b08:	602a      	str	r2, [r5, #0]
 8015b0a:	461a      	mov	r2, r3
 8015b0c:	f7ee fb4e 	bl	80041ac <_lseek>
 8015b10:	1c43      	adds	r3, r0, #1
 8015b12:	d102      	bne.n	8015b1a <_lseek_r+0x1e>
 8015b14:	682b      	ldr	r3, [r5, #0]
 8015b16:	b103      	cbz	r3, 8015b1a <_lseek_r+0x1e>
 8015b18:	6023      	str	r3, [r4, #0]
 8015b1a:	bd38      	pop	{r3, r4, r5, pc}
 8015b1c:	20005d88 	.word	0x20005d88

08015b20 <__swhatbuf_r>:
 8015b20:	b570      	push	{r4, r5, r6, lr}
 8015b22:	460e      	mov	r6, r1
 8015b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b28:	2900      	cmp	r1, #0
 8015b2a:	b096      	sub	sp, #88	; 0x58
 8015b2c:	4614      	mov	r4, r2
 8015b2e:	461d      	mov	r5, r3
 8015b30:	da08      	bge.n	8015b44 <__swhatbuf_r+0x24>
 8015b32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015b36:	2200      	movs	r2, #0
 8015b38:	602a      	str	r2, [r5, #0]
 8015b3a:	061a      	lsls	r2, r3, #24
 8015b3c:	d410      	bmi.n	8015b60 <__swhatbuf_r+0x40>
 8015b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b42:	e00e      	b.n	8015b62 <__swhatbuf_r+0x42>
 8015b44:	466a      	mov	r2, sp
 8015b46:	f001 fb43 	bl	80171d0 <_fstat_r>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	dbf1      	blt.n	8015b32 <__swhatbuf_r+0x12>
 8015b4e:	9a01      	ldr	r2, [sp, #4]
 8015b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b58:	425a      	negs	r2, r3
 8015b5a:	415a      	adcs	r2, r3
 8015b5c:	602a      	str	r2, [r5, #0]
 8015b5e:	e7ee      	b.n	8015b3e <__swhatbuf_r+0x1e>
 8015b60:	2340      	movs	r3, #64	; 0x40
 8015b62:	2000      	movs	r0, #0
 8015b64:	6023      	str	r3, [r4, #0]
 8015b66:	b016      	add	sp, #88	; 0x58
 8015b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b6c <__smakebuf_r>:
 8015b6c:	898b      	ldrh	r3, [r1, #12]
 8015b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b70:	079d      	lsls	r5, r3, #30
 8015b72:	4606      	mov	r6, r0
 8015b74:	460c      	mov	r4, r1
 8015b76:	d507      	bpl.n	8015b88 <__smakebuf_r+0x1c>
 8015b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b7c:	6023      	str	r3, [r4, #0]
 8015b7e:	6123      	str	r3, [r4, #16]
 8015b80:	2301      	movs	r3, #1
 8015b82:	6163      	str	r3, [r4, #20]
 8015b84:	b002      	add	sp, #8
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	ab01      	add	r3, sp, #4
 8015b8a:	466a      	mov	r2, sp
 8015b8c:	f7ff ffc8 	bl	8015b20 <__swhatbuf_r>
 8015b90:	9900      	ldr	r1, [sp, #0]
 8015b92:	4605      	mov	r5, r0
 8015b94:	4630      	mov	r0, r6
 8015b96:	f7fb fc6d 	bl	8011474 <_malloc_r>
 8015b9a:	b948      	cbnz	r0, 8015bb0 <__smakebuf_r+0x44>
 8015b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ba0:	059a      	lsls	r2, r3, #22
 8015ba2:	d4ef      	bmi.n	8015b84 <__smakebuf_r+0x18>
 8015ba4:	f023 0303 	bic.w	r3, r3, #3
 8015ba8:	f043 0302 	orr.w	r3, r3, #2
 8015bac:	81a3      	strh	r3, [r4, #12]
 8015bae:	e7e3      	b.n	8015b78 <__smakebuf_r+0xc>
 8015bb0:	4b0d      	ldr	r3, [pc, #52]	; (8015be8 <__smakebuf_r+0x7c>)
 8015bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015bb4:	89a3      	ldrh	r3, [r4, #12]
 8015bb6:	6020      	str	r0, [r4, #0]
 8015bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bbc:	81a3      	strh	r3, [r4, #12]
 8015bbe:	9b00      	ldr	r3, [sp, #0]
 8015bc0:	6163      	str	r3, [r4, #20]
 8015bc2:	9b01      	ldr	r3, [sp, #4]
 8015bc4:	6120      	str	r0, [r4, #16]
 8015bc6:	b15b      	cbz	r3, 8015be0 <__smakebuf_r+0x74>
 8015bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bcc:	4630      	mov	r0, r6
 8015bce:	f001 fb11 	bl	80171f4 <_isatty_r>
 8015bd2:	b128      	cbz	r0, 8015be0 <__smakebuf_r+0x74>
 8015bd4:	89a3      	ldrh	r3, [r4, #12]
 8015bd6:	f023 0303 	bic.w	r3, r3, #3
 8015bda:	f043 0301 	orr.w	r3, r3, #1
 8015bde:	81a3      	strh	r3, [r4, #12]
 8015be0:	89a0      	ldrh	r0, [r4, #12]
 8015be2:	4305      	orrs	r5, r0
 8015be4:	81a5      	strh	r5, [r4, #12]
 8015be6:	e7cd      	b.n	8015b84 <__smakebuf_r+0x18>
 8015be8:	080151d1 	.word	0x080151d1

08015bec <__ascii_mbtowc>:
 8015bec:	b082      	sub	sp, #8
 8015bee:	b901      	cbnz	r1, 8015bf2 <__ascii_mbtowc+0x6>
 8015bf0:	a901      	add	r1, sp, #4
 8015bf2:	b142      	cbz	r2, 8015c06 <__ascii_mbtowc+0x1a>
 8015bf4:	b14b      	cbz	r3, 8015c0a <__ascii_mbtowc+0x1e>
 8015bf6:	7813      	ldrb	r3, [r2, #0]
 8015bf8:	600b      	str	r3, [r1, #0]
 8015bfa:	7812      	ldrb	r2, [r2, #0]
 8015bfc:	1e10      	subs	r0, r2, #0
 8015bfe:	bf18      	it	ne
 8015c00:	2001      	movne	r0, #1
 8015c02:	b002      	add	sp, #8
 8015c04:	4770      	bx	lr
 8015c06:	4610      	mov	r0, r2
 8015c08:	e7fb      	b.n	8015c02 <__ascii_mbtowc+0x16>
 8015c0a:	f06f 0001 	mvn.w	r0, #1
 8015c0e:	e7f8      	b.n	8015c02 <__ascii_mbtowc+0x16>

08015c10 <memmove>:
 8015c10:	4288      	cmp	r0, r1
 8015c12:	b510      	push	{r4, lr}
 8015c14:	eb01 0402 	add.w	r4, r1, r2
 8015c18:	d902      	bls.n	8015c20 <memmove+0x10>
 8015c1a:	4284      	cmp	r4, r0
 8015c1c:	4623      	mov	r3, r4
 8015c1e:	d807      	bhi.n	8015c30 <memmove+0x20>
 8015c20:	1e43      	subs	r3, r0, #1
 8015c22:	42a1      	cmp	r1, r4
 8015c24:	d008      	beq.n	8015c38 <memmove+0x28>
 8015c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c2e:	e7f8      	b.n	8015c22 <memmove+0x12>
 8015c30:	4402      	add	r2, r0
 8015c32:	4601      	mov	r1, r0
 8015c34:	428a      	cmp	r2, r1
 8015c36:	d100      	bne.n	8015c3a <memmove+0x2a>
 8015c38:	bd10      	pop	{r4, pc}
 8015c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c42:	e7f7      	b.n	8015c34 <memmove+0x24>

08015c44 <__malloc_lock>:
 8015c44:	4801      	ldr	r0, [pc, #4]	; (8015c4c <__malloc_lock+0x8>)
 8015c46:	f7ff bf55 	b.w	8015af4 <__retarget_lock_acquire_recursive>
 8015c4a:	bf00      	nop
 8015c4c:	20005d81 	.word	0x20005d81

08015c50 <__malloc_unlock>:
 8015c50:	4801      	ldr	r0, [pc, #4]	; (8015c58 <__malloc_unlock+0x8>)
 8015c52:	f7ff bf51 	b.w	8015af8 <__retarget_lock_release_recursive>
 8015c56:	bf00      	nop
 8015c58:	20005d81 	.word	0x20005d81

08015c5c <_Balloc>:
 8015c5c:	b570      	push	{r4, r5, r6, lr}
 8015c5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015c60:	4604      	mov	r4, r0
 8015c62:	460d      	mov	r5, r1
 8015c64:	b976      	cbnz	r6, 8015c84 <_Balloc+0x28>
 8015c66:	2010      	movs	r0, #16
 8015c68:	f7fb f900 	bl	8010e6c <malloc>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	6260      	str	r0, [r4, #36]	; 0x24
 8015c70:	b920      	cbnz	r0, 8015c7c <_Balloc+0x20>
 8015c72:	4b18      	ldr	r3, [pc, #96]	; (8015cd4 <_Balloc+0x78>)
 8015c74:	4818      	ldr	r0, [pc, #96]	; (8015cd8 <_Balloc+0x7c>)
 8015c76:	2166      	movs	r1, #102	; 0x66
 8015c78:	f7fb f896 	bl	8010da8 <__assert_func>
 8015c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c80:	6006      	str	r6, [r0, #0]
 8015c82:	60c6      	str	r6, [r0, #12]
 8015c84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015c86:	68f3      	ldr	r3, [r6, #12]
 8015c88:	b183      	cbz	r3, 8015cac <_Balloc+0x50>
 8015c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c8c:	68db      	ldr	r3, [r3, #12]
 8015c8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015c92:	b9b8      	cbnz	r0, 8015cc4 <_Balloc+0x68>
 8015c94:	2101      	movs	r1, #1
 8015c96:	fa01 f605 	lsl.w	r6, r1, r5
 8015c9a:	1d72      	adds	r2, r6, #5
 8015c9c:	0092      	lsls	r2, r2, #2
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f000 fc9d 	bl	80165de <_calloc_r>
 8015ca4:	b160      	cbz	r0, 8015cc0 <_Balloc+0x64>
 8015ca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015caa:	e00e      	b.n	8015cca <_Balloc+0x6e>
 8015cac:	2221      	movs	r2, #33	; 0x21
 8015cae:	2104      	movs	r1, #4
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	f000 fc94 	bl	80165de <_calloc_r>
 8015cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cb8:	60f0      	str	r0, [r6, #12]
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d1e4      	bne.n	8015c8a <_Balloc+0x2e>
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	bd70      	pop	{r4, r5, r6, pc}
 8015cc4:	6802      	ldr	r2, [r0, #0]
 8015cc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015cca:	2300      	movs	r3, #0
 8015ccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015cd0:	e7f7      	b.n	8015cc2 <_Balloc+0x66>
 8015cd2:	bf00      	nop
 8015cd4:	080486c4 	.word	0x080486c4
 8015cd8:	08048e98 	.word	0x08048e98

08015cdc <_Bfree>:
 8015cdc:	b570      	push	{r4, r5, r6, lr}
 8015cde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ce0:	4605      	mov	r5, r0
 8015ce2:	460c      	mov	r4, r1
 8015ce4:	b976      	cbnz	r6, 8015d04 <_Bfree+0x28>
 8015ce6:	2010      	movs	r0, #16
 8015ce8:	f7fb f8c0 	bl	8010e6c <malloc>
 8015cec:	4602      	mov	r2, r0
 8015cee:	6268      	str	r0, [r5, #36]	; 0x24
 8015cf0:	b920      	cbnz	r0, 8015cfc <_Bfree+0x20>
 8015cf2:	4b09      	ldr	r3, [pc, #36]	; (8015d18 <_Bfree+0x3c>)
 8015cf4:	4809      	ldr	r0, [pc, #36]	; (8015d1c <_Bfree+0x40>)
 8015cf6:	218a      	movs	r1, #138	; 0x8a
 8015cf8:	f7fb f856 	bl	8010da8 <__assert_func>
 8015cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d00:	6006      	str	r6, [r0, #0]
 8015d02:	60c6      	str	r6, [r0, #12]
 8015d04:	b13c      	cbz	r4, 8015d16 <_Bfree+0x3a>
 8015d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015d08:	6862      	ldr	r2, [r4, #4]
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d10:	6021      	str	r1, [r4, #0]
 8015d12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015d16:	bd70      	pop	{r4, r5, r6, pc}
 8015d18:	080486c4 	.word	0x080486c4
 8015d1c:	08048e98 	.word	0x08048e98

08015d20 <__multadd>:
 8015d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d24:	690d      	ldr	r5, [r1, #16]
 8015d26:	4607      	mov	r7, r0
 8015d28:	460c      	mov	r4, r1
 8015d2a:	461e      	mov	r6, r3
 8015d2c:	f101 0c14 	add.w	ip, r1, #20
 8015d30:	2000      	movs	r0, #0
 8015d32:	f8dc 3000 	ldr.w	r3, [ip]
 8015d36:	b299      	uxth	r1, r3
 8015d38:	fb02 6101 	mla	r1, r2, r1, r6
 8015d3c:	0c1e      	lsrs	r6, r3, #16
 8015d3e:	0c0b      	lsrs	r3, r1, #16
 8015d40:	fb02 3306 	mla	r3, r2, r6, r3
 8015d44:	b289      	uxth	r1, r1
 8015d46:	3001      	adds	r0, #1
 8015d48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015d4c:	4285      	cmp	r5, r0
 8015d4e:	f84c 1b04 	str.w	r1, [ip], #4
 8015d52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015d56:	dcec      	bgt.n	8015d32 <__multadd+0x12>
 8015d58:	b30e      	cbz	r6, 8015d9e <__multadd+0x7e>
 8015d5a:	68a3      	ldr	r3, [r4, #8]
 8015d5c:	42ab      	cmp	r3, r5
 8015d5e:	dc19      	bgt.n	8015d94 <__multadd+0x74>
 8015d60:	6861      	ldr	r1, [r4, #4]
 8015d62:	4638      	mov	r0, r7
 8015d64:	3101      	adds	r1, #1
 8015d66:	f7ff ff79 	bl	8015c5c <_Balloc>
 8015d6a:	4680      	mov	r8, r0
 8015d6c:	b928      	cbnz	r0, 8015d7a <__multadd+0x5a>
 8015d6e:	4602      	mov	r2, r0
 8015d70:	4b0c      	ldr	r3, [pc, #48]	; (8015da4 <__multadd+0x84>)
 8015d72:	480d      	ldr	r0, [pc, #52]	; (8015da8 <__multadd+0x88>)
 8015d74:	21b5      	movs	r1, #181	; 0xb5
 8015d76:	f7fb f817 	bl	8010da8 <__assert_func>
 8015d7a:	6922      	ldr	r2, [r4, #16]
 8015d7c:	3202      	adds	r2, #2
 8015d7e:	f104 010c 	add.w	r1, r4, #12
 8015d82:	0092      	lsls	r2, r2, #2
 8015d84:	300c      	adds	r0, #12
 8015d86:	f7fb f881 	bl	8010e8c <memcpy>
 8015d8a:	4621      	mov	r1, r4
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f7ff ffa5 	bl	8015cdc <_Bfree>
 8015d92:	4644      	mov	r4, r8
 8015d94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015d98:	3501      	adds	r5, #1
 8015d9a:	615e      	str	r6, [r3, #20]
 8015d9c:	6125      	str	r5, [r4, #16]
 8015d9e:	4620      	mov	r0, r4
 8015da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da4:	08048d49 	.word	0x08048d49
 8015da8:	08048e98 	.word	0x08048e98

08015dac <__s2b>:
 8015dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015db0:	460c      	mov	r4, r1
 8015db2:	4615      	mov	r5, r2
 8015db4:	461f      	mov	r7, r3
 8015db6:	2209      	movs	r2, #9
 8015db8:	3308      	adds	r3, #8
 8015dba:	4606      	mov	r6, r0
 8015dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8015dc0:	2100      	movs	r1, #0
 8015dc2:	2201      	movs	r2, #1
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	db09      	blt.n	8015ddc <__s2b+0x30>
 8015dc8:	4630      	mov	r0, r6
 8015dca:	f7ff ff47 	bl	8015c5c <_Balloc>
 8015dce:	b940      	cbnz	r0, 8015de2 <__s2b+0x36>
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	4b19      	ldr	r3, [pc, #100]	; (8015e38 <__s2b+0x8c>)
 8015dd4:	4819      	ldr	r0, [pc, #100]	; (8015e3c <__s2b+0x90>)
 8015dd6:	21ce      	movs	r1, #206	; 0xce
 8015dd8:	f7fa ffe6 	bl	8010da8 <__assert_func>
 8015ddc:	0052      	lsls	r2, r2, #1
 8015dde:	3101      	adds	r1, #1
 8015de0:	e7f0      	b.n	8015dc4 <__s2b+0x18>
 8015de2:	9b08      	ldr	r3, [sp, #32]
 8015de4:	6143      	str	r3, [r0, #20]
 8015de6:	2d09      	cmp	r5, #9
 8015de8:	f04f 0301 	mov.w	r3, #1
 8015dec:	6103      	str	r3, [r0, #16]
 8015dee:	dd16      	ble.n	8015e1e <__s2b+0x72>
 8015df0:	f104 0909 	add.w	r9, r4, #9
 8015df4:	46c8      	mov	r8, r9
 8015df6:	442c      	add	r4, r5
 8015df8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015dfc:	4601      	mov	r1, r0
 8015dfe:	3b30      	subs	r3, #48	; 0x30
 8015e00:	220a      	movs	r2, #10
 8015e02:	4630      	mov	r0, r6
 8015e04:	f7ff ff8c 	bl	8015d20 <__multadd>
 8015e08:	45a0      	cmp	r8, r4
 8015e0a:	d1f5      	bne.n	8015df8 <__s2b+0x4c>
 8015e0c:	f1a5 0408 	sub.w	r4, r5, #8
 8015e10:	444c      	add	r4, r9
 8015e12:	1b2d      	subs	r5, r5, r4
 8015e14:	1963      	adds	r3, r4, r5
 8015e16:	42bb      	cmp	r3, r7
 8015e18:	db04      	blt.n	8015e24 <__s2b+0x78>
 8015e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	340a      	adds	r4, #10
 8015e20:	2509      	movs	r5, #9
 8015e22:	e7f6      	b.n	8015e12 <__s2b+0x66>
 8015e24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015e28:	4601      	mov	r1, r0
 8015e2a:	3b30      	subs	r3, #48	; 0x30
 8015e2c:	220a      	movs	r2, #10
 8015e2e:	4630      	mov	r0, r6
 8015e30:	f7ff ff76 	bl	8015d20 <__multadd>
 8015e34:	e7ee      	b.n	8015e14 <__s2b+0x68>
 8015e36:	bf00      	nop
 8015e38:	08048d49 	.word	0x08048d49
 8015e3c:	08048e98 	.word	0x08048e98

08015e40 <__hi0bits>:
 8015e40:	0c03      	lsrs	r3, r0, #16
 8015e42:	041b      	lsls	r3, r3, #16
 8015e44:	b9d3      	cbnz	r3, 8015e7c <__hi0bits+0x3c>
 8015e46:	0400      	lsls	r0, r0, #16
 8015e48:	2310      	movs	r3, #16
 8015e4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015e4e:	bf04      	itt	eq
 8015e50:	0200      	lsleq	r0, r0, #8
 8015e52:	3308      	addeq	r3, #8
 8015e54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015e58:	bf04      	itt	eq
 8015e5a:	0100      	lsleq	r0, r0, #4
 8015e5c:	3304      	addeq	r3, #4
 8015e5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015e62:	bf04      	itt	eq
 8015e64:	0080      	lsleq	r0, r0, #2
 8015e66:	3302      	addeq	r3, #2
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	db05      	blt.n	8015e78 <__hi0bits+0x38>
 8015e6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015e70:	f103 0301 	add.w	r3, r3, #1
 8015e74:	bf08      	it	eq
 8015e76:	2320      	moveq	r3, #32
 8015e78:	4618      	mov	r0, r3
 8015e7a:	4770      	bx	lr
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	e7e4      	b.n	8015e4a <__hi0bits+0xa>

08015e80 <__lo0bits>:
 8015e80:	6803      	ldr	r3, [r0, #0]
 8015e82:	f013 0207 	ands.w	r2, r3, #7
 8015e86:	4601      	mov	r1, r0
 8015e88:	d00b      	beq.n	8015ea2 <__lo0bits+0x22>
 8015e8a:	07da      	lsls	r2, r3, #31
 8015e8c:	d423      	bmi.n	8015ed6 <__lo0bits+0x56>
 8015e8e:	0798      	lsls	r0, r3, #30
 8015e90:	bf49      	itett	mi
 8015e92:	085b      	lsrmi	r3, r3, #1
 8015e94:	089b      	lsrpl	r3, r3, #2
 8015e96:	2001      	movmi	r0, #1
 8015e98:	600b      	strmi	r3, [r1, #0]
 8015e9a:	bf5c      	itt	pl
 8015e9c:	600b      	strpl	r3, [r1, #0]
 8015e9e:	2002      	movpl	r0, #2
 8015ea0:	4770      	bx	lr
 8015ea2:	b298      	uxth	r0, r3
 8015ea4:	b9a8      	cbnz	r0, 8015ed2 <__lo0bits+0x52>
 8015ea6:	0c1b      	lsrs	r3, r3, #16
 8015ea8:	2010      	movs	r0, #16
 8015eaa:	b2da      	uxtb	r2, r3
 8015eac:	b90a      	cbnz	r2, 8015eb2 <__lo0bits+0x32>
 8015eae:	3008      	adds	r0, #8
 8015eb0:	0a1b      	lsrs	r3, r3, #8
 8015eb2:	071a      	lsls	r2, r3, #28
 8015eb4:	bf04      	itt	eq
 8015eb6:	091b      	lsreq	r3, r3, #4
 8015eb8:	3004      	addeq	r0, #4
 8015eba:	079a      	lsls	r2, r3, #30
 8015ebc:	bf04      	itt	eq
 8015ebe:	089b      	lsreq	r3, r3, #2
 8015ec0:	3002      	addeq	r0, #2
 8015ec2:	07da      	lsls	r2, r3, #31
 8015ec4:	d403      	bmi.n	8015ece <__lo0bits+0x4e>
 8015ec6:	085b      	lsrs	r3, r3, #1
 8015ec8:	f100 0001 	add.w	r0, r0, #1
 8015ecc:	d005      	beq.n	8015eda <__lo0bits+0x5a>
 8015ece:	600b      	str	r3, [r1, #0]
 8015ed0:	4770      	bx	lr
 8015ed2:	4610      	mov	r0, r2
 8015ed4:	e7e9      	b.n	8015eaa <__lo0bits+0x2a>
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	4770      	bx	lr
 8015eda:	2020      	movs	r0, #32
 8015edc:	4770      	bx	lr
	...

08015ee0 <__i2b>:
 8015ee0:	b510      	push	{r4, lr}
 8015ee2:	460c      	mov	r4, r1
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	f7ff feb9 	bl	8015c5c <_Balloc>
 8015eea:	4602      	mov	r2, r0
 8015eec:	b928      	cbnz	r0, 8015efa <__i2b+0x1a>
 8015eee:	4b05      	ldr	r3, [pc, #20]	; (8015f04 <__i2b+0x24>)
 8015ef0:	4805      	ldr	r0, [pc, #20]	; (8015f08 <__i2b+0x28>)
 8015ef2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015ef6:	f7fa ff57 	bl	8010da8 <__assert_func>
 8015efa:	2301      	movs	r3, #1
 8015efc:	6144      	str	r4, [r0, #20]
 8015efe:	6103      	str	r3, [r0, #16]
 8015f00:	bd10      	pop	{r4, pc}
 8015f02:	bf00      	nop
 8015f04:	08048d49 	.word	0x08048d49
 8015f08:	08048e98 	.word	0x08048e98

08015f0c <__multiply>:
 8015f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	4691      	mov	r9, r2
 8015f12:	690a      	ldr	r2, [r1, #16]
 8015f14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	bfb8      	it	lt
 8015f1c:	460b      	movlt	r3, r1
 8015f1e:	460c      	mov	r4, r1
 8015f20:	bfbc      	itt	lt
 8015f22:	464c      	movlt	r4, r9
 8015f24:	4699      	movlt	r9, r3
 8015f26:	6927      	ldr	r7, [r4, #16]
 8015f28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015f2c:	68a3      	ldr	r3, [r4, #8]
 8015f2e:	6861      	ldr	r1, [r4, #4]
 8015f30:	eb07 060a 	add.w	r6, r7, sl
 8015f34:	42b3      	cmp	r3, r6
 8015f36:	b085      	sub	sp, #20
 8015f38:	bfb8      	it	lt
 8015f3a:	3101      	addlt	r1, #1
 8015f3c:	f7ff fe8e 	bl	8015c5c <_Balloc>
 8015f40:	b930      	cbnz	r0, 8015f50 <__multiply+0x44>
 8015f42:	4602      	mov	r2, r0
 8015f44:	4b44      	ldr	r3, [pc, #272]	; (8016058 <__multiply+0x14c>)
 8015f46:	4845      	ldr	r0, [pc, #276]	; (801605c <__multiply+0x150>)
 8015f48:	f240 115d 	movw	r1, #349	; 0x15d
 8015f4c:	f7fa ff2c 	bl	8010da8 <__assert_func>
 8015f50:	f100 0514 	add.w	r5, r0, #20
 8015f54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015f58:	462b      	mov	r3, r5
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	4543      	cmp	r3, r8
 8015f5e:	d321      	bcc.n	8015fa4 <__multiply+0x98>
 8015f60:	f104 0314 	add.w	r3, r4, #20
 8015f64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015f68:	f109 0314 	add.w	r3, r9, #20
 8015f6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015f70:	9202      	str	r2, [sp, #8]
 8015f72:	1b3a      	subs	r2, r7, r4
 8015f74:	3a15      	subs	r2, #21
 8015f76:	f022 0203 	bic.w	r2, r2, #3
 8015f7a:	3204      	adds	r2, #4
 8015f7c:	f104 0115 	add.w	r1, r4, #21
 8015f80:	428f      	cmp	r7, r1
 8015f82:	bf38      	it	cc
 8015f84:	2204      	movcc	r2, #4
 8015f86:	9201      	str	r2, [sp, #4]
 8015f88:	9a02      	ldr	r2, [sp, #8]
 8015f8a:	9303      	str	r3, [sp, #12]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d80c      	bhi.n	8015faa <__multiply+0x9e>
 8015f90:	2e00      	cmp	r6, #0
 8015f92:	dd03      	ble.n	8015f9c <__multiply+0x90>
 8015f94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d05a      	beq.n	8016052 <__multiply+0x146>
 8015f9c:	6106      	str	r6, [r0, #16]
 8015f9e:	b005      	add	sp, #20
 8015fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa4:	f843 2b04 	str.w	r2, [r3], #4
 8015fa8:	e7d8      	b.n	8015f5c <__multiply+0x50>
 8015faa:	f8b3 a000 	ldrh.w	sl, [r3]
 8015fae:	f1ba 0f00 	cmp.w	sl, #0
 8015fb2:	d024      	beq.n	8015ffe <__multiply+0xf2>
 8015fb4:	f104 0e14 	add.w	lr, r4, #20
 8015fb8:	46a9      	mov	r9, r5
 8015fba:	f04f 0c00 	mov.w	ip, #0
 8015fbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015fc2:	f8d9 1000 	ldr.w	r1, [r9]
 8015fc6:	fa1f fb82 	uxth.w	fp, r2
 8015fca:	b289      	uxth	r1, r1
 8015fcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8015fd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8015fd8:	4461      	add	r1, ip
 8015fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015fde:	fb0a c20b 	mla	r2, sl, fp, ip
 8015fe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015fe6:	b289      	uxth	r1, r1
 8015fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015fec:	4577      	cmp	r7, lr
 8015fee:	f849 1b04 	str.w	r1, [r9], #4
 8015ff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015ff6:	d8e2      	bhi.n	8015fbe <__multiply+0xb2>
 8015ff8:	9a01      	ldr	r2, [sp, #4]
 8015ffa:	f845 c002 	str.w	ip, [r5, r2]
 8015ffe:	9a03      	ldr	r2, [sp, #12]
 8016000:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016004:	3304      	adds	r3, #4
 8016006:	f1b9 0f00 	cmp.w	r9, #0
 801600a:	d020      	beq.n	801604e <__multiply+0x142>
 801600c:	6829      	ldr	r1, [r5, #0]
 801600e:	f104 0c14 	add.w	ip, r4, #20
 8016012:	46ae      	mov	lr, r5
 8016014:	f04f 0a00 	mov.w	sl, #0
 8016018:	f8bc b000 	ldrh.w	fp, [ip]
 801601c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016020:	fb09 220b 	mla	r2, r9, fp, r2
 8016024:	4492      	add	sl, r2
 8016026:	b289      	uxth	r1, r1
 8016028:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801602c:	f84e 1b04 	str.w	r1, [lr], #4
 8016030:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016034:	f8be 1000 	ldrh.w	r1, [lr]
 8016038:	0c12      	lsrs	r2, r2, #16
 801603a:	fb09 1102 	mla	r1, r9, r2, r1
 801603e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016042:	4567      	cmp	r7, ip
 8016044:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016048:	d8e6      	bhi.n	8016018 <__multiply+0x10c>
 801604a:	9a01      	ldr	r2, [sp, #4]
 801604c:	50a9      	str	r1, [r5, r2]
 801604e:	3504      	adds	r5, #4
 8016050:	e79a      	b.n	8015f88 <__multiply+0x7c>
 8016052:	3e01      	subs	r6, #1
 8016054:	e79c      	b.n	8015f90 <__multiply+0x84>
 8016056:	bf00      	nop
 8016058:	08048d49 	.word	0x08048d49
 801605c:	08048e98 	.word	0x08048e98

08016060 <__pow5mult>:
 8016060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016064:	4615      	mov	r5, r2
 8016066:	f012 0203 	ands.w	r2, r2, #3
 801606a:	4606      	mov	r6, r0
 801606c:	460f      	mov	r7, r1
 801606e:	d007      	beq.n	8016080 <__pow5mult+0x20>
 8016070:	4c25      	ldr	r4, [pc, #148]	; (8016108 <__pow5mult+0xa8>)
 8016072:	3a01      	subs	r2, #1
 8016074:	2300      	movs	r3, #0
 8016076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801607a:	f7ff fe51 	bl	8015d20 <__multadd>
 801607e:	4607      	mov	r7, r0
 8016080:	10ad      	asrs	r5, r5, #2
 8016082:	d03d      	beq.n	8016100 <__pow5mult+0xa0>
 8016084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016086:	b97c      	cbnz	r4, 80160a8 <__pow5mult+0x48>
 8016088:	2010      	movs	r0, #16
 801608a:	f7fa feef 	bl	8010e6c <malloc>
 801608e:	4602      	mov	r2, r0
 8016090:	6270      	str	r0, [r6, #36]	; 0x24
 8016092:	b928      	cbnz	r0, 80160a0 <__pow5mult+0x40>
 8016094:	4b1d      	ldr	r3, [pc, #116]	; (801610c <__pow5mult+0xac>)
 8016096:	481e      	ldr	r0, [pc, #120]	; (8016110 <__pow5mult+0xb0>)
 8016098:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801609c:	f7fa fe84 	bl	8010da8 <__assert_func>
 80160a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80160a4:	6004      	str	r4, [r0, #0]
 80160a6:	60c4      	str	r4, [r0, #12]
 80160a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80160ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80160b0:	b94c      	cbnz	r4, 80160c6 <__pow5mult+0x66>
 80160b2:	f240 2171 	movw	r1, #625	; 0x271
 80160b6:	4630      	mov	r0, r6
 80160b8:	f7ff ff12 	bl	8015ee0 <__i2b>
 80160bc:	2300      	movs	r3, #0
 80160be:	f8c8 0008 	str.w	r0, [r8, #8]
 80160c2:	4604      	mov	r4, r0
 80160c4:	6003      	str	r3, [r0, #0]
 80160c6:	f04f 0900 	mov.w	r9, #0
 80160ca:	07eb      	lsls	r3, r5, #31
 80160cc:	d50a      	bpl.n	80160e4 <__pow5mult+0x84>
 80160ce:	4639      	mov	r1, r7
 80160d0:	4622      	mov	r2, r4
 80160d2:	4630      	mov	r0, r6
 80160d4:	f7ff ff1a 	bl	8015f0c <__multiply>
 80160d8:	4639      	mov	r1, r7
 80160da:	4680      	mov	r8, r0
 80160dc:	4630      	mov	r0, r6
 80160de:	f7ff fdfd 	bl	8015cdc <_Bfree>
 80160e2:	4647      	mov	r7, r8
 80160e4:	106d      	asrs	r5, r5, #1
 80160e6:	d00b      	beq.n	8016100 <__pow5mult+0xa0>
 80160e8:	6820      	ldr	r0, [r4, #0]
 80160ea:	b938      	cbnz	r0, 80160fc <__pow5mult+0x9c>
 80160ec:	4622      	mov	r2, r4
 80160ee:	4621      	mov	r1, r4
 80160f0:	4630      	mov	r0, r6
 80160f2:	f7ff ff0b 	bl	8015f0c <__multiply>
 80160f6:	6020      	str	r0, [r4, #0]
 80160f8:	f8c0 9000 	str.w	r9, [r0]
 80160fc:	4604      	mov	r4, r0
 80160fe:	e7e4      	b.n	80160ca <__pow5mult+0x6a>
 8016100:	4638      	mov	r0, r7
 8016102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016106:	bf00      	nop
 8016108:	08048fe8 	.word	0x08048fe8
 801610c:	080486c4 	.word	0x080486c4
 8016110:	08048e98 	.word	0x08048e98

08016114 <__lshift>:
 8016114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016118:	460c      	mov	r4, r1
 801611a:	6849      	ldr	r1, [r1, #4]
 801611c:	6923      	ldr	r3, [r4, #16]
 801611e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016122:	68a3      	ldr	r3, [r4, #8]
 8016124:	4607      	mov	r7, r0
 8016126:	4691      	mov	r9, r2
 8016128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801612c:	f108 0601 	add.w	r6, r8, #1
 8016130:	42b3      	cmp	r3, r6
 8016132:	db0b      	blt.n	801614c <__lshift+0x38>
 8016134:	4638      	mov	r0, r7
 8016136:	f7ff fd91 	bl	8015c5c <_Balloc>
 801613a:	4605      	mov	r5, r0
 801613c:	b948      	cbnz	r0, 8016152 <__lshift+0x3e>
 801613e:	4602      	mov	r2, r0
 8016140:	4b2a      	ldr	r3, [pc, #168]	; (80161ec <__lshift+0xd8>)
 8016142:	482b      	ldr	r0, [pc, #172]	; (80161f0 <__lshift+0xdc>)
 8016144:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016148:	f7fa fe2e 	bl	8010da8 <__assert_func>
 801614c:	3101      	adds	r1, #1
 801614e:	005b      	lsls	r3, r3, #1
 8016150:	e7ee      	b.n	8016130 <__lshift+0x1c>
 8016152:	2300      	movs	r3, #0
 8016154:	f100 0114 	add.w	r1, r0, #20
 8016158:	f100 0210 	add.w	r2, r0, #16
 801615c:	4618      	mov	r0, r3
 801615e:	4553      	cmp	r3, sl
 8016160:	db37      	blt.n	80161d2 <__lshift+0xbe>
 8016162:	6920      	ldr	r0, [r4, #16]
 8016164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016168:	f104 0314 	add.w	r3, r4, #20
 801616c:	f019 091f 	ands.w	r9, r9, #31
 8016170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016174:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016178:	d02f      	beq.n	80161da <__lshift+0xc6>
 801617a:	f1c9 0e20 	rsb	lr, r9, #32
 801617e:	468a      	mov	sl, r1
 8016180:	f04f 0c00 	mov.w	ip, #0
 8016184:	681a      	ldr	r2, [r3, #0]
 8016186:	fa02 f209 	lsl.w	r2, r2, r9
 801618a:	ea42 020c 	orr.w	r2, r2, ip
 801618e:	f84a 2b04 	str.w	r2, [sl], #4
 8016192:	f853 2b04 	ldr.w	r2, [r3], #4
 8016196:	4298      	cmp	r0, r3
 8016198:	fa22 fc0e 	lsr.w	ip, r2, lr
 801619c:	d8f2      	bhi.n	8016184 <__lshift+0x70>
 801619e:	1b03      	subs	r3, r0, r4
 80161a0:	3b15      	subs	r3, #21
 80161a2:	f023 0303 	bic.w	r3, r3, #3
 80161a6:	3304      	adds	r3, #4
 80161a8:	f104 0215 	add.w	r2, r4, #21
 80161ac:	4290      	cmp	r0, r2
 80161ae:	bf38      	it	cc
 80161b0:	2304      	movcc	r3, #4
 80161b2:	f841 c003 	str.w	ip, [r1, r3]
 80161b6:	f1bc 0f00 	cmp.w	ip, #0
 80161ba:	d001      	beq.n	80161c0 <__lshift+0xac>
 80161bc:	f108 0602 	add.w	r6, r8, #2
 80161c0:	3e01      	subs	r6, #1
 80161c2:	4638      	mov	r0, r7
 80161c4:	612e      	str	r6, [r5, #16]
 80161c6:	4621      	mov	r1, r4
 80161c8:	f7ff fd88 	bl	8015cdc <_Bfree>
 80161cc:	4628      	mov	r0, r5
 80161ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80161d6:	3301      	adds	r3, #1
 80161d8:	e7c1      	b.n	801615e <__lshift+0x4a>
 80161da:	3904      	subs	r1, #4
 80161dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80161e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80161e4:	4298      	cmp	r0, r3
 80161e6:	d8f9      	bhi.n	80161dc <__lshift+0xc8>
 80161e8:	e7ea      	b.n	80161c0 <__lshift+0xac>
 80161ea:	bf00      	nop
 80161ec:	08048d49 	.word	0x08048d49
 80161f0:	08048e98 	.word	0x08048e98

080161f4 <__mcmp>:
 80161f4:	b530      	push	{r4, r5, lr}
 80161f6:	6902      	ldr	r2, [r0, #16]
 80161f8:	690c      	ldr	r4, [r1, #16]
 80161fa:	1b12      	subs	r2, r2, r4
 80161fc:	d10e      	bne.n	801621c <__mcmp+0x28>
 80161fe:	f100 0314 	add.w	r3, r0, #20
 8016202:	3114      	adds	r1, #20
 8016204:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016208:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801620c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016210:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016214:	42a5      	cmp	r5, r4
 8016216:	d003      	beq.n	8016220 <__mcmp+0x2c>
 8016218:	d305      	bcc.n	8016226 <__mcmp+0x32>
 801621a:	2201      	movs	r2, #1
 801621c:	4610      	mov	r0, r2
 801621e:	bd30      	pop	{r4, r5, pc}
 8016220:	4283      	cmp	r3, r0
 8016222:	d3f3      	bcc.n	801620c <__mcmp+0x18>
 8016224:	e7fa      	b.n	801621c <__mcmp+0x28>
 8016226:	f04f 32ff 	mov.w	r2, #4294967295
 801622a:	e7f7      	b.n	801621c <__mcmp+0x28>

0801622c <__mdiff>:
 801622c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016230:	460c      	mov	r4, r1
 8016232:	4606      	mov	r6, r0
 8016234:	4611      	mov	r1, r2
 8016236:	4620      	mov	r0, r4
 8016238:	4690      	mov	r8, r2
 801623a:	f7ff ffdb 	bl	80161f4 <__mcmp>
 801623e:	1e05      	subs	r5, r0, #0
 8016240:	d110      	bne.n	8016264 <__mdiff+0x38>
 8016242:	4629      	mov	r1, r5
 8016244:	4630      	mov	r0, r6
 8016246:	f7ff fd09 	bl	8015c5c <_Balloc>
 801624a:	b930      	cbnz	r0, 801625a <__mdiff+0x2e>
 801624c:	4b3a      	ldr	r3, [pc, #232]	; (8016338 <__mdiff+0x10c>)
 801624e:	4602      	mov	r2, r0
 8016250:	f240 2132 	movw	r1, #562	; 0x232
 8016254:	4839      	ldr	r0, [pc, #228]	; (801633c <__mdiff+0x110>)
 8016256:	f7fa fda7 	bl	8010da8 <__assert_func>
 801625a:	2301      	movs	r3, #1
 801625c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016264:	bfa4      	itt	ge
 8016266:	4643      	movge	r3, r8
 8016268:	46a0      	movge	r8, r4
 801626a:	4630      	mov	r0, r6
 801626c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016270:	bfa6      	itte	ge
 8016272:	461c      	movge	r4, r3
 8016274:	2500      	movge	r5, #0
 8016276:	2501      	movlt	r5, #1
 8016278:	f7ff fcf0 	bl	8015c5c <_Balloc>
 801627c:	b920      	cbnz	r0, 8016288 <__mdiff+0x5c>
 801627e:	4b2e      	ldr	r3, [pc, #184]	; (8016338 <__mdiff+0x10c>)
 8016280:	4602      	mov	r2, r0
 8016282:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016286:	e7e5      	b.n	8016254 <__mdiff+0x28>
 8016288:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801628c:	6926      	ldr	r6, [r4, #16]
 801628e:	60c5      	str	r5, [r0, #12]
 8016290:	f104 0914 	add.w	r9, r4, #20
 8016294:	f108 0514 	add.w	r5, r8, #20
 8016298:	f100 0e14 	add.w	lr, r0, #20
 801629c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80162a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80162a4:	f108 0210 	add.w	r2, r8, #16
 80162a8:	46f2      	mov	sl, lr
 80162aa:	2100      	movs	r1, #0
 80162ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80162b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80162b4:	fa1f f883 	uxth.w	r8, r3
 80162b8:	fa11 f18b 	uxtah	r1, r1, fp
 80162bc:	0c1b      	lsrs	r3, r3, #16
 80162be:	eba1 0808 	sub.w	r8, r1, r8
 80162c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80162c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80162ca:	fa1f f888 	uxth.w	r8, r8
 80162ce:	1419      	asrs	r1, r3, #16
 80162d0:	454e      	cmp	r6, r9
 80162d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80162d6:	f84a 3b04 	str.w	r3, [sl], #4
 80162da:	d8e7      	bhi.n	80162ac <__mdiff+0x80>
 80162dc:	1b33      	subs	r3, r6, r4
 80162de:	3b15      	subs	r3, #21
 80162e0:	f023 0303 	bic.w	r3, r3, #3
 80162e4:	3304      	adds	r3, #4
 80162e6:	3415      	adds	r4, #21
 80162e8:	42a6      	cmp	r6, r4
 80162ea:	bf38      	it	cc
 80162ec:	2304      	movcc	r3, #4
 80162ee:	441d      	add	r5, r3
 80162f0:	4473      	add	r3, lr
 80162f2:	469e      	mov	lr, r3
 80162f4:	462e      	mov	r6, r5
 80162f6:	4566      	cmp	r6, ip
 80162f8:	d30e      	bcc.n	8016318 <__mdiff+0xec>
 80162fa:	f10c 0203 	add.w	r2, ip, #3
 80162fe:	1b52      	subs	r2, r2, r5
 8016300:	f022 0203 	bic.w	r2, r2, #3
 8016304:	3d03      	subs	r5, #3
 8016306:	45ac      	cmp	ip, r5
 8016308:	bf38      	it	cc
 801630a:	2200      	movcc	r2, #0
 801630c:	441a      	add	r2, r3
 801630e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016312:	b17b      	cbz	r3, 8016334 <__mdiff+0x108>
 8016314:	6107      	str	r7, [r0, #16]
 8016316:	e7a3      	b.n	8016260 <__mdiff+0x34>
 8016318:	f856 8b04 	ldr.w	r8, [r6], #4
 801631c:	fa11 f288 	uxtah	r2, r1, r8
 8016320:	1414      	asrs	r4, r2, #16
 8016322:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016326:	b292      	uxth	r2, r2
 8016328:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801632c:	f84e 2b04 	str.w	r2, [lr], #4
 8016330:	1421      	asrs	r1, r4, #16
 8016332:	e7e0      	b.n	80162f6 <__mdiff+0xca>
 8016334:	3f01      	subs	r7, #1
 8016336:	e7ea      	b.n	801630e <__mdiff+0xe2>
 8016338:	08048d49 	.word	0x08048d49
 801633c:	08048e98 	.word	0x08048e98

08016340 <__ulp>:
 8016340:	b082      	sub	sp, #8
 8016342:	ed8d 0b00 	vstr	d0, [sp]
 8016346:	9b01      	ldr	r3, [sp, #4]
 8016348:	4912      	ldr	r1, [pc, #72]	; (8016394 <__ulp+0x54>)
 801634a:	4019      	ands	r1, r3
 801634c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016350:	2900      	cmp	r1, #0
 8016352:	dd05      	ble.n	8016360 <__ulp+0x20>
 8016354:	2200      	movs	r2, #0
 8016356:	460b      	mov	r3, r1
 8016358:	ec43 2b10 	vmov	d0, r2, r3
 801635c:	b002      	add	sp, #8
 801635e:	4770      	bx	lr
 8016360:	4249      	negs	r1, r1
 8016362:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016366:	ea4f 5021 	mov.w	r0, r1, asr #20
 801636a:	f04f 0200 	mov.w	r2, #0
 801636e:	f04f 0300 	mov.w	r3, #0
 8016372:	da04      	bge.n	801637e <__ulp+0x3e>
 8016374:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016378:	fa41 f300 	asr.w	r3, r1, r0
 801637c:	e7ec      	b.n	8016358 <__ulp+0x18>
 801637e:	f1a0 0114 	sub.w	r1, r0, #20
 8016382:	291e      	cmp	r1, #30
 8016384:	bfda      	itte	le
 8016386:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801638a:	fa20 f101 	lsrle.w	r1, r0, r1
 801638e:	2101      	movgt	r1, #1
 8016390:	460a      	mov	r2, r1
 8016392:	e7e1      	b.n	8016358 <__ulp+0x18>
 8016394:	7ff00000 	.word	0x7ff00000

08016398 <__b2d>:
 8016398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639a:	6905      	ldr	r5, [r0, #16]
 801639c:	f100 0714 	add.w	r7, r0, #20
 80163a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80163a4:	1f2e      	subs	r6, r5, #4
 80163a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80163aa:	4620      	mov	r0, r4
 80163ac:	f7ff fd48 	bl	8015e40 <__hi0bits>
 80163b0:	f1c0 0320 	rsb	r3, r0, #32
 80163b4:	280a      	cmp	r0, #10
 80163b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016434 <__b2d+0x9c>
 80163ba:	600b      	str	r3, [r1, #0]
 80163bc:	dc14      	bgt.n	80163e8 <__b2d+0x50>
 80163be:	f1c0 0e0b 	rsb	lr, r0, #11
 80163c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80163c6:	42b7      	cmp	r7, r6
 80163c8:	ea41 030c 	orr.w	r3, r1, ip
 80163cc:	bf34      	ite	cc
 80163ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80163d2:	2100      	movcs	r1, #0
 80163d4:	3015      	adds	r0, #21
 80163d6:	fa04 f000 	lsl.w	r0, r4, r0
 80163da:	fa21 f10e 	lsr.w	r1, r1, lr
 80163de:	ea40 0201 	orr.w	r2, r0, r1
 80163e2:	ec43 2b10 	vmov	d0, r2, r3
 80163e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163e8:	42b7      	cmp	r7, r6
 80163ea:	bf3a      	itte	cc
 80163ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80163f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80163f4:	2100      	movcs	r1, #0
 80163f6:	380b      	subs	r0, #11
 80163f8:	d017      	beq.n	801642a <__b2d+0x92>
 80163fa:	f1c0 0c20 	rsb	ip, r0, #32
 80163fe:	fa04 f500 	lsl.w	r5, r4, r0
 8016402:	42be      	cmp	r6, r7
 8016404:	fa21 f40c 	lsr.w	r4, r1, ip
 8016408:	ea45 0504 	orr.w	r5, r5, r4
 801640c:	bf8c      	ite	hi
 801640e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016412:	2400      	movls	r4, #0
 8016414:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016418:	fa01 f000 	lsl.w	r0, r1, r0
 801641c:	fa24 f40c 	lsr.w	r4, r4, ip
 8016420:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016424:	ea40 0204 	orr.w	r2, r0, r4
 8016428:	e7db      	b.n	80163e2 <__b2d+0x4a>
 801642a:	ea44 030c 	orr.w	r3, r4, ip
 801642e:	460a      	mov	r2, r1
 8016430:	e7d7      	b.n	80163e2 <__b2d+0x4a>
 8016432:	bf00      	nop
 8016434:	3ff00000 	.word	0x3ff00000

08016438 <__d2b>:
 8016438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801643c:	4689      	mov	r9, r1
 801643e:	2101      	movs	r1, #1
 8016440:	ec57 6b10 	vmov	r6, r7, d0
 8016444:	4690      	mov	r8, r2
 8016446:	f7ff fc09 	bl	8015c5c <_Balloc>
 801644a:	4604      	mov	r4, r0
 801644c:	b930      	cbnz	r0, 801645c <__d2b+0x24>
 801644e:	4602      	mov	r2, r0
 8016450:	4b25      	ldr	r3, [pc, #148]	; (80164e8 <__d2b+0xb0>)
 8016452:	4826      	ldr	r0, [pc, #152]	; (80164ec <__d2b+0xb4>)
 8016454:	f240 310a 	movw	r1, #778	; 0x30a
 8016458:	f7fa fca6 	bl	8010da8 <__assert_func>
 801645c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016464:	bb35      	cbnz	r5, 80164b4 <__d2b+0x7c>
 8016466:	2e00      	cmp	r6, #0
 8016468:	9301      	str	r3, [sp, #4]
 801646a:	d028      	beq.n	80164be <__d2b+0x86>
 801646c:	4668      	mov	r0, sp
 801646e:	9600      	str	r6, [sp, #0]
 8016470:	f7ff fd06 	bl	8015e80 <__lo0bits>
 8016474:	9900      	ldr	r1, [sp, #0]
 8016476:	b300      	cbz	r0, 80164ba <__d2b+0x82>
 8016478:	9a01      	ldr	r2, [sp, #4]
 801647a:	f1c0 0320 	rsb	r3, r0, #32
 801647e:	fa02 f303 	lsl.w	r3, r2, r3
 8016482:	430b      	orrs	r3, r1
 8016484:	40c2      	lsrs	r2, r0
 8016486:	6163      	str	r3, [r4, #20]
 8016488:	9201      	str	r2, [sp, #4]
 801648a:	9b01      	ldr	r3, [sp, #4]
 801648c:	61a3      	str	r3, [r4, #24]
 801648e:	2b00      	cmp	r3, #0
 8016490:	bf14      	ite	ne
 8016492:	2202      	movne	r2, #2
 8016494:	2201      	moveq	r2, #1
 8016496:	6122      	str	r2, [r4, #16]
 8016498:	b1d5      	cbz	r5, 80164d0 <__d2b+0x98>
 801649a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801649e:	4405      	add	r5, r0
 80164a0:	f8c9 5000 	str.w	r5, [r9]
 80164a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80164a8:	f8c8 0000 	str.w	r0, [r8]
 80164ac:	4620      	mov	r0, r4
 80164ae:	b003      	add	sp, #12
 80164b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80164b8:	e7d5      	b.n	8016466 <__d2b+0x2e>
 80164ba:	6161      	str	r1, [r4, #20]
 80164bc:	e7e5      	b.n	801648a <__d2b+0x52>
 80164be:	a801      	add	r0, sp, #4
 80164c0:	f7ff fcde 	bl	8015e80 <__lo0bits>
 80164c4:	9b01      	ldr	r3, [sp, #4]
 80164c6:	6163      	str	r3, [r4, #20]
 80164c8:	2201      	movs	r2, #1
 80164ca:	6122      	str	r2, [r4, #16]
 80164cc:	3020      	adds	r0, #32
 80164ce:	e7e3      	b.n	8016498 <__d2b+0x60>
 80164d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80164d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80164d8:	f8c9 0000 	str.w	r0, [r9]
 80164dc:	6918      	ldr	r0, [r3, #16]
 80164de:	f7ff fcaf 	bl	8015e40 <__hi0bits>
 80164e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80164e6:	e7df      	b.n	80164a8 <__d2b+0x70>
 80164e8:	08048d49 	.word	0x08048d49
 80164ec:	08048e98 	.word	0x08048e98

080164f0 <__ratio>:
 80164f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164f4:	4688      	mov	r8, r1
 80164f6:	4669      	mov	r1, sp
 80164f8:	4681      	mov	r9, r0
 80164fa:	f7ff ff4d 	bl	8016398 <__b2d>
 80164fe:	a901      	add	r1, sp, #4
 8016500:	4640      	mov	r0, r8
 8016502:	ec55 4b10 	vmov	r4, r5, d0
 8016506:	f7ff ff47 	bl	8016398 <__b2d>
 801650a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801650e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016512:	eba3 0c02 	sub.w	ip, r3, r2
 8016516:	e9dd 3200 	ldrd	r3, r2, [sp]
 801651a:	1a9b      	subs	r3, r3, r2
 801651c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016520:	ec51 0b10 	vmov	r0, r1, d0
 8016524:	2b00      	cmp	r3, #0
 8016526:	bfd6      	itet	le
 8016528:	460a      	movle	r2, r1
 801652a:	462a      	movgt	r2, r5
 801652c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016530:	468b      	mov	fp, r1
 8016532:	462f      	mov	r7, r5
 8016534:	bfd4      	ite	le
 8016536:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801653a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801653e:	4620      	mov	r0, r4
 8016540:	ee10 2a10 	vmov	r2, s0
 8016544:	465b      	mov	r3, fp
 8016546:	4639      	mov	r1, r7
 8016548:	f7ea f9a0 	bl	800088c <__aeabi_ddiv>
 801654c:	ec41 0b10 	vmov	d0, r0, r1
 8016550:	b003      	add	sp, #12
 8016552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016556 <__copybits>:
 8016556:	3901      	subs	r1, #1
 8016558:	b570      	push	{r4, r5, r6, lr}
 801655a:	1149      	asrs	r1, r1, #5
 801655c:	6914      	ldr	r4, [r2, #16]
 801655e:	3101      	adds	r1, #1
 8016560:	f102 0314 	add.w	r3, r2, #20
 8016564:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016568:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801656c:	1f05      	subs	r5, r0, #4
 801656e:	42a3      	cmp	r3, r4
 8016570:	d30c      	bcc.n	801658c <__copybits+0x36>
 8016572:	1aa3      	subs	r3, r4, r2
 8016574:	3b11      	subs	r3, #17
 8016576:	f023 0303 	bic.w	r3, r3, #3
 801657a:	3211      	adds	r2, #17
 801657c:	42a2      	cmp	r2, r4
 801657e:	bf88      	it	hi
 8016580:	2300      	movhi	r3, #0
 8016582:	4418      	add	r0, r3
 8016584:	2300      	movs	r3, #0
 8016586:	4288      	cmp	r0, r1
 8016588:	d305      	bcc.n	8016596 <__copybits+0x40>
 801658a:	bd70      	pop	{r4, r5, r6, pc}
 801658c:	f853 6b04 	ldr.w	r6, [r3], #4
 8016590:	f845 6f04 	str.w	r6, [r5, #4]!
 8016594:	e7eb      	b.n	801656e <__copybits+0x18>
 8016596:	f840 3b04 	str.w	r3, [r0], #4
 801659a:	e7f4      	b.n	8016586 <__copybits+0x30>

0801659c <__any_on>:
 801659c:	f100 0214 	add.w	r2, r0, #20
 80165a0:	6900      	ldr	r0, [r0, #16]
 80165a2:	114b      	asrs	r3, r1, #5
 80165a4:	4298      	cmp	r0, r3
 80165a6:	b510      	push	{r4, lr}
 80165a8:	db11      	blt.n	80165ce <__any_on+0x32>
 80165aa:	dd0a      	ble.n	80165c2 <__any_on+0x26>
 80165ac:	f011 011f 	ands.w	r1, r1, #31
 80165b0:	d007      	beq.n	80165c2 <__any_on+0x26>
 80165b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80165b6:	fa24 f001 	lsr.w	r0, r4, r1
 80165ba:	fa00 f101 	lsl.w	r1, r0, r1
 80165be:	428c      	cmp	r4, r1
 80165c0:	d10b      	bne.n	80165da <__any_on+0x3e>
 80165c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d803      	bhi.n	80165d2 <__any_on+0x36>
 80165ca:	2000      	movs	r0, #0
 80165cc:	bd10      	pop	{r4, pc}
 80165ce:	4603      	mov	r3, r0
 80165d0:	e7f7      	b.n	80165c2 <__any_on+0x26>
 80165d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80165d6:	2900      	cmp	r1, #0
 80165d8:	d0f5      	beq.n	80165c6 <__any_on+0x2a>
 80165da:	2001      	movs	r0, #1
 80165dc:	e7f6      	b.n	80165cc <__any_on+0x30>

080165de <_calloc_r>:
 80165de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165e0:	fba1 2402 	umull	r2, r4, r1, r2
 80165e4:	b94c      	cbnz	r4, 80165fa <_calloc_r+0x1c>
 80165e6:	4611      	mov	r1, r2
 80165e8:	9201      	str	r2, [sp, #4]
 80165ea:	f7fa ff43 	bl	8011474 <_malloc_r>
 80165ee:	9a01      	ldr	r2, [sp, #4]
 80165f0:	4605      	mov	r5, r0
 80165f2:	b930      	cbnz	r0, 8016602 <_calloc_r+0x24>
 80165f4:	4628      	mov	r0, r5
 80165f6:	b003      	add	sp, #12
 80165f8:	bd30      	pop	{r4, r5, pc}
 80165fa:	220c      	movs	r2, #12
 80165fc:	6002      	str	r2, [r0, #0]
 80165fe:	2500      	movs	r5, #0
 8016600:	e7f8      	b.n	80165f4 <_calloc_r+0x16>
 8016602:	4621      	mov	r1, r4
 8016604:	f7fa fc50 	bl	8010ea8 <memset>
 8016608:	e7f4      	b.n	80165f4 <_calloc_r+0x16>

0801660a <_realloc_r>:
 801660a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801660e:	4680      	mov	r8, r0
 8016610:	4614      	mov	r4, r2
 8016612:	460e      	mov	r6, r1
 8016614:	b921      	cbnz	r1, 8016620 <_realloc_r+0x16>
 8016616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801661a:	4611      	mov	r1, r2
 801661c:	f7fa bf2a 	b.w	8011474 <_malloc_r>
 8016620:	b92a      	cbnz	r2, 801662e <_realloc_r+0x24>
 8016622:	f7fa febb 	bl	801139c <_free_r>
 8016626:	4625      	mov	r5, r4
 8016628:	4628      	mov	r0, r5
 801662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801662e:	f000 fdf1 	bl	8017214 <_malloc_usable_size_r>
 8016632:	4284      	cmp	r4, r0
 8016634:	4607      	mov	r7, r0
 8016636:	d802      	bhi.n	801663e <_realloc_r+0x34>
 8016638:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801663c:	d812      	bhi.n	8016664 <_realloc_r+0x5a>
 801663e:	4621      	mov	r1, r4
 8016640:	4640      	mov	r0, r8
 8016642:	f7fa ff17 	bl	8011474 <_malloc_r>
 8016646:	4605      	mov	r5, r0
 8016648:	2800      	cmp	r0, #0
 801664a:	d0ed      	beq.n	8016628 <_realloc_r+0x1e>
 801664c:	42bc      	cmp	r4, r7
 801664e:	4622      	mov	r2, r4
 8016650:	4631      	mov	r1, r6
 8016652:	bf28      	it	cs
 8016654:	463a      	movcs	r2, r7
 8016656:	f7fa fc19 	bl	8010e8c <memcpy>
 801665a:	4631      	mov	r1, r6
 801665c:	4640      	mov	r0, r8
 801665e:	f7fa fe9d 	bl	801139c <_free_r>
 8016662:	e7e1      	b.n	8016628 <_realloc_r+0x1e>
 8016664:	4635      	mov	r5, r6
 8016666:	e7df      	b.n	8016628 <_realloc_r+0x1e>

08016668 <__ssputs_r>:
 8016668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801666c:	688e      	ldr	r6, [r1, #8]
 801666e:	429e      	cmp	r6, r3
 8016670:	4682      	mov	sl, r0
 8016672:	460c      	mov	r4, r1
 8016674:	4690      	mov	r8, r2
 8016676:	461f      	mov	r7, r3
 8016678:	d838      	bhi.n	80166ec <__ssputs_r+0x84>
 801667a:	898a      	ldrh	r2, [r1, #12]
 801667c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016680:	d032      	beq.n	80166e8 <__ssputs_r+0x80>
 8016682:	6825      	ldr	r5, [r4, #0]
 8016684:	6909      	ldr	r1, [r1, #16]
 8016686:	eba5 0901 	sub.w	r9, r5, r1
 801668a:	6965      	ldr	r5, [r4, #20]
 801668c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016694:	3301      	adds	r3, #1
 8016696:	444b      	add	r3, r9
 8016698:	106d      	asrs	r5, r5, #1
 801669a:	429d      	cmp	r5, r3
 801669c:	bf38      	it	cc
 801669e:	461d      	movcc	r5, r3
 80166a0:	0553      	lsls	r3, r2, #21
 80166a2:	d531      	bpl.n	8016708 <__ssputs_r+0xa0>
 80166a4:	4629      	mov	r1, r5
 80166a6:	f7fa fee5 	bl	8011474 <_malloc_r>
 80166aa:	4606      	mov	r6, r0
 80166ac:	b950      	cbnz	r0, 80166c4 <__ssputs_r+0x5c>
 80166ae:	230c      	movs	r3, #12
 80166b0:	f8ca 3000 	str.w	r3, [sl]
 80166b4:	89a3      	ldrh	r3, [r4, #12]
 80166b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166ba:	81a3      	strh	r3, [r4, #12]
 80166bc:	f04f 30ff 	mov.w	r0, #4294967295
 80166c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c4:	6921      	ldr	r1, [r4, #16]
 80166c6:	464a      	mov	r2, r9
 80166c8:	f7fa fbe0 	bl	8010e8c <memcpy>
 80166cc:	89a3      	ldrh	r3, [r4, #12]
 80166ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80166d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166d6:	81a3      	strh	r3, [r4, #12]
 80166d8:	6126      	str	r6, [r4, #16]
 80166da:	6165      	str	r5, [r4, #20]
 80166dc:	444e      	add	r6, r9
 80166de:	eba5 0509 	sub.w	r5, r5, r9
 80166e2:	6026      	str	r6, [r4, #0]
 80166e4:	60a5      	str	r5, [r4, #8]
 80166e6:	463e      	mov	r6, r7
 80166e8:	42be      	cmp	r6, r7
 80166ea:	d900      	bls.n	80166ee <__ssputs_r+0x86>
 80166ec:	463e      	mov	r6, r7
 80166ee:	6820      	ldr	r0, [r4, #0]
 80166f0:	4632      	mov	r2, r6
 80166f2:	4641      	mov	r1, r8
 80166f4:	f7ff fa8c 	bl	8015c10 <memmove>
 80166f8:	68a3      	ldr	r3, [r4, #8]
 80166fa:	1b9b      	subs	r3, r3, r6
 80166fc:	60a3      	str	r3, [r4, #8]
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	4433      	add	r3, r6
 8016702:	6023      	str	r3, [r4, #0]
 8016704:	2000      	movs	r0, #0
 8016706:	e7db      	b.n	80166c0 <__ssputs_r+0x58>
 8016708:	462a      	mov	r2, r5
 801670a:	f7ff ff7e 	bl	801660a <_realloc_r>
 801670e:	4606      	mov	r6, r0
 8016710:	2800      	cmp	r0, #0
 8016712:	d1e1      	bne.n	80166d8 <__ssputs_r+0x70>
 8016714:	6921      	ldr	r1, [r4, #16]
 8016716:	4650      	mov	r0, sl
 8016718:	f7fa fe40 	bl	801139c <_free_r>
 801671c:	e7c7      	b.n	80166ae <__ssputs_r+0x46>
	...

08016720 <_svfiprintf_r>:
 8016720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016724:	4698      	mov	r8, r3
 8016726:	898b      	ldrh	r3, [r1, #12]
 8016728:	061b      	lsls	r3, r3, #24
 801672a:	b09d      	sub	sp, #116	; 0x74
 801672c:	4607      	mov	r7, r0
 801672e:	460d      	mov	r5, r1
 8016730:	4614      	mov	r4, r2
 8016732:	d50e      	bpl.n	8016752 <_svfiprintf_r+0x32>
 8016734:	690b      	ldr	r3, [r1, #16]
 8016736:	b963      	cbnz	r3, 8016752 <_svfiprintf_r+0x32>
 8016738:	2140      	movs	r1, #64	; 0x40
 801673a:	f7fa fe9b 	bl	8011474 <_malloc_r>
 801673e:	6028      	str	r0, [r5, #0]
 8016740:	6128      	str	r0, [r5, #16]
 8016742:	b920      	cbnz	r0, 801674e <_svfiprintf_r+0x2e>
 8016744:	230c      	movs	r3, #12
 8016746:	603b      	str	r3, [r7, #0]
 8016748:	f04f 30ff 	mov.w	r0, #4294967295
 801674c:	e0d1      	b.n	80168f2 <_svfiprintf_r+0x1d2>
 801674e:	2340      	movs	r3, #64	; 0x40
 8016750:	616b      	str	r3, [r5, #20]
 8016752:	2300      	movs	r3, #0
 8016754:	9309      	str	r3, [sp, #36]	; 0x24
 8016756:	2320      	movs	r3, #32
 8016758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801675c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016760:	2330      	movs	r3, #48	; 0x30
 8016762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801690c <_svfiprintf_r+0x1ec>
 8016766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801676a:	f04f 0901 	mov.w	r9, #1
 801676e:	4623      	mov	r3, r4
 8016770:	469a      	mov	sl, r3
 8016772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016776:	b10a      	cbz	r2, 801677c <_svfiprintf_r+0x5c>
 8016778:	2a25      	cmp	r2, #37	; 0x25
 801677a:	d1f9      	bne.n	8016770 <_svfiprintf_r+0x50>
 801677c:	ebba 0b04 	subs.w	fp, sl, r4
 8016780:	d00b      	beq.n	801679a <_svfiprintf_r+0x7a>
 8016782:	465b      	mov	r3, fp
 8016784:	4622      	mov	r2, r4
 8016786:	4629      	mov	r1, r5
 8016788:	4638      	mov	r0, r7
 801678a:	f7ff ff6d 	bl	8016668 <__ssputs_r>
 801678e:	3001      	adds	r0, #1
 8016790:	f000 80aa 	beq.w	80168e8 <_svfiprintf_r+0x1c8>
 8016794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016796:	445a      	add	r2, fp
 8016798:	9209      	str	r2, [sp, #36]	; 0x24
 801679a:	f89a 3000 	ldrb.w	r3, [sl]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	f000 80a2 	beq.w	80168e8 <_svfiprintf_r+0x1c8>
 80167a4:	2300      	movs	r3, #0
 80167a6:	f04f 32ff 	mov.w	r2, #4294967295
 80167aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80167ae:	f10a 0a01 	add.w	sl, sl, #1
 80167b2:	9304      	str	r3, [sp, #16]
 80167b4:	9307      	str	r3, [sp, #28]
 80167b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80167ba:	931a      	str	r3, [sp, #104]	; 0x68
 80167bc:	4654      	mov	r4, sl
 80167be:	2205      	movs	r2, #5
 80167c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167c4:	4851      	ldr	r0, [pc, #324]	; (801690c <_svfiprintf_r+0x1ec>)
 80167c6:	f7e9 fd2b 	bl	8000220 <memchr>
 80167ca:	9a04      	ldr	r2, [sp, #16]
 80167cc:	b9d8      	cbnz	r0, 8016806 <_svfiprintf_r+0xe6>
 80167ce:	06d0      	lsls	r0, r2, #27
 80167d0:	bf44      	itt	mi
 80167d2:	2320      	movmi	r3, #32
 80167d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167d8:	0711      	lsls	r1, r2, #28
 80167da:	bf44      	itt	mi
 80167dc:	232b      	movmi	r3, #43	; 0x2b
 80167de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167e2:	f89a 3000 	ldrb.w	r3, [sl]
 80167e6:	2b2a      	cmp	r3, #42	; 0x2a
 80167e8:	d015      	beq.n	8016816 <_svfiprintf_r+0xf6>
 80167ea:	9a07      	ldr	r2, [sp, #28]
 80167ec:	4654      	mov	r4, sl
 80167ee:	2000      	movs	r0, #0
 80167f0:	f04f 0c0a 	mov.w	ip, #10
 80167f4:	4621      	mov	r1, r4
 80167f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167fa:	3b30      	subs	r3, #48	; 0x30
 80167fc:	2b09      	cmp	r3, #9
 80167fe:	d94e      	bls.n	801689e <_svfiprintf_r+0x17e>
 8016800:	b1b0      	cbz	r0, 8016830 <_svfiprintf_r+0x110>
 8016802:	9207      	str	r2, [sp, #28]
 8016804:	e014      	b.n	8016830 <_svfiprintf_r+0x110>
 8016806:	eba0 0308 	sub.w	r3, r0, r8
 801680a:	fa09 f303 	lsl.w	r3, r9, r3
 801680e:	4313      	orrs	r3, r2
 8016810:	9304      	str	r3, [sp, #16]
 8016812:	46a2      	mov	sl, r4
 8016814:	e7d2      	b.n	80167bc <_svfiprintf_r+0x9c>
 8016816:	9b03      	ldr	r3, [sp, #12]
 8016818:	1d19      	adds	r1, r3, #4
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	9103      	str	r1, [sp, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	bfbb      	ittet	lt
 8016822:	425b      	neglt	r3, r3
 8016824:	f042 0202 	orrlt.w	r2, r2, #2
 8016828:	9307      	strge	r3, [sp, #28]
 801682a:	9307      	strlt	r3, [sp, #28]
 801682c:	bfb8      	it	lt
 801682e:	9204      	strlt	r2, [sp, #16]
 8016830:	7823      	ldrb	r3, [r4, #0]
 8016832:	2b2e      	cmp	r3, #46	; 0x2e
 8016834:	d10c      	bne.n	8016850 <_svfiprintf_r+0x130>
 8016836:	7863      	ldrb	r3, [r4, #1]
 8016838:	2b2a      	cmp	r3, #42	; 0x2a
 801683a:	d135      	bne.n	80168a8 <_svfiprintf_r+0x188>
 801683c:	9b03      	ldr	r3, [sp, #12]
 801683e:	1d1a      	adds	r2, r3, #4
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	9203      	str	r2, [sp, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	bfb8      	it	lt
 8016848:	f04f 33ff 	movlt.w	r3, #4294967295
 801684c:	3402      	adds	r4, #2
 801684e:	9305      	str	r3, [sp, #20]
 8016850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801691c <_svfiprintf_r+0x1fc>
 8016854:	7821      	ldrb	r1, [r4, #0]
 8016856:	2203      	movs	r2, #3
 8016858:	4650      	mov	r0, sl
 801685a:	f7e9 fce1 	bl	8000220 <memchr>
 801685e:	b140      	cbz	r0, 8016872 <_svfiprintf_r+0x152>
 8016860:	2340      	movs	r3, #64	; 0x40
 8016862:	eba0 000a 	sub.w	r0, r0, sl
 8016866:	fa03 f000 	lsl.w	r0, r3, r0
 801686a:	9b04      	ldr	r3, [sp, #16]
 801686c:	4303      	orrs	r3, r0
 801686e:	3401      	adds	r4, #1
 8016870:	9304      	str	r3, [sp, #16]
 8016872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016876:	4826      	ldr	r0, [pc, #152]	; (8016910 <_svfiprintf_r+0x1f0>)
 8016878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801687c:	2206      	movs	r2, #6
 801687e:	f7e9 fccf 	bl	8000220 <memchr>
 8016882:	2800      	cmp	r0, #0
 8016884:	d038      	beq.n	80168f8 <_svfiprintf_r+0x1d8>
 8016886:	4b23      	ldr	r3, [pc, #140]	; (8016914 <_svfiprintf_r+0x1f4>)
 8016888:	bb1b      	cbnz	r3, 80168d2 <_svfiprintf_r+0x1b2>
 801688a:	9b03      	ldr	r3, [sp, #12]
 801688c:	3307      	adds	r3, #7
 801688e:	f023 0307 	bic.w	r3, r3, #7
 8016892:	3308      	adds	r3, #8
 8016894:	9303      	str	r3, [sp, #12]
 8016896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016898:	4433      	add	r3, r6
 801689a:	9309      	str	r3, [sp, #36]	; 0x24
 801689c:	e767      	b.n	801676e <_svfiprintf_r+0x4e>
 801689e:	fb0c 3202 	mla	r2, ip, r2, r3
 80168a2:	460c      	mov	r4, r1
 80168a4:	2001      	movs	r0, #1
 80168a6:	e7a5      	b.n	80167f4 <_svfiprintf_r+0xd4>
 80168a8:	2300      	movs	r3, #0
 80168aa:	3401      	adds	r4, #1
 80168ac:	9305      	str	r3, [sp, #20]
 80168ae:	4619      	mov	r1, r3
 80168b0:	f04f 0c0a 	mov.w	ip, #10
 80168b4:	4620      	mov	r0, r4
 80168b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168ba:	3a30      	subs	r2, #48	; 0x30
 80168bc:	2a09      	cmp	r2, #9
 80168be:	d903      	bls.n	80168c8 <_svfiprintf_r+0x1a8>
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d0c5      	beq.n	8016850 <_svfiprintf_r+0x130>
 80168c4:	9105      	str	r1, [sp, #20]
 80168c6:	e7c3      	b.n	8016850 <_svfiprintf_r+0x130>
 80168c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80168cc:	4604      	mov	r4, r0
 80168ce:	2301      	movs	r3, #1
 80168d0:	e7f0      	b.n	80168b4 <_svfiprintf_r+0x194>
 80168d2:	ab03      	add	r3, sp, #12
 80168d4:	9300      	str	r3, [sp, #0]
 80168d6:	462a      	mov	r2, r5
 80168d8:	4b0f      	ldr	r3, [pc, #60]	; (8016918 <_svfiprintf_r+0x1f8>)
 80168da:	a904      	add	r1, sp, #16
 80168dc:	4638      	mov	r0, r7
 80168de:	f7fb f837 	bl	8011950 <_printf_float>
 80168e2:	1c42      	adds	r2, r0, #1
 80168e4:	4606      	mov	r6, r0
 80168e6:	d1d6      	bne.n	8016896 <_svfiprintf_r+0x176>
 80168e8:	89ab      	ldrh	r3, [r5, #12]
 80168ea:	065b      	lsls	r3, r3, #25
 80168ec:	f53f af2c 	bmi.w	8016748 <_svfiprintf_r+0x28>
 80168f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168f2:	b01d      	add	sp, #116	; 0x74
 80168f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168f8:	ab03      	add	r3, sp, #12
 80168fa:	9300      	str	r3, [sp, #0]
 80168fc:	462a      	mov	r2, r5
 80168fe:	4b06      	ldr	r3, [pc, #24]	; (8016918 <_svfiprintf_r+0x1f8>)
 8016900:	a904      	add	r1, sp, #16
 8016902:	4638      	mov	r0, r7
 8016904:	f7fb fac8 	bl	8011e98 <_printf_i>
 8016908:	e7eb      	b.n	80168e2 <_svfiprintf_r+0x1c2>
 801690a:	bf00      	nop
 801690c:	08048830 	.word	0x08048830
 8016910:	0804883a 	.word	0x0804883a
 8016914:	08011951 	.word	0x08011951
 8016918:	08016669 	.word	0x08016669
 801691c:	08048836 	.word	0x08048836

08016920 <_sungetc_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	1c4b      	adds	r3, r1, #1
 8016924:	4614      	mov	r4, r2
 8016926:	d103      	bne.n	8016930 <_sungetc_r+0x10>
 8016928:	f04f 35ff 	mov.w	r5, #4294967295
 801692c:	4628      	mov	r0, r5
 801692e:	bd38      	pop	{r3, r4, r5, pc}
 8016930:	8993      	ldrh	r3, [r2, #12]
 8016932:	f023 0320 	bic.w	r3, r3, #32
 8016936:	8193      	strh	r3, [r2, #12]
 8016938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801693a:	6852      	ldr	r2, [r2, #4]
 801693c:	b2cd      	uxtb	r5, r1
 801693e:	b18b      	cbz	r3, 8016964 <_sungetc_r+0x44>
 8016940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016942:	4293      	cmp	r3, r2
 8016944:	dd08      	ble.n	8016958 <_sungetc_r+0x38>
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	1e5a      	subs	r2, r3, #1
 801694a:	6022      	str	r2, [r4, #0]
 801694c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016950:	6863      	ldr	r3, [r4, #4]
 8016952:	3301      	adds	r3, #1
 8016954:	6063      	str	r3, [r4, #4]
 8016956:	e7e9      	b.n	801692c <_sungetc_r+0xc>
 8016958:	4621      	mov	r1, r4
 801695a:	f000 fbe5 	bl	8017128 <__submore>
 801695e:	2800      	cmp	r0, #0
 8016960:	d0f1      	beq.n	8016946 <_sungetc_r+0x26>
 8016962:	e7e1      	b.n	8016928 <_sungetc_r+0x8>
 8016964:	6921      	ldr	r1, [r4, #16]
 8016966:	6823      	ldr	r3, [r4, #0]
 8016968:	b151      	cbz	r1, 8016980 <_sungetc_r+0x60>
 801696a:	4299      	cmp	r1, r3
 801696c:	d208      	bcs.n	8016980 <_sungetc_r+0x60>
 801696e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016972:	42a9      	cmp	r1, r5
 8016974:	d104      	bne.n	8016980 <_sungetc_r+0x60>
 8016976:	3b01      	subs	r3, #1
 8016978:	3201      	adds	r2, #1
 801697a:	6023      	str	r3, [r4, #0]
 801697c:	6062      	str	r2, [r4, #4]
 801697e:	e7d5      	b.n	801692c <_sungetc_r+0xc>
 8016980:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016988:	6363      	str	r3, [r4, #52]	; 0x34
 801698a:	2303      	movs	r3, #3
 801698c:	63a3      	str	r3, [r4, #56]	; 0x38
 801698e:	4623      	mov	r3, r4
 8016990:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016994:	6023      	str	r3, [r4, #0]
 8016996:	2301      	movs	r3, #1
 8016998:	e7dc      	b.n	8016954 <_sungetc_r+0x34>

0801699a <__ssrefill_r>:
 801699a:	b510      	push	{r4, lr}
 801699c:	460c      	mov	r4, r1
 801699e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80169a0:	b169      	cbz	r1, 80169be <__ssrefill_r+0x24>
 80169a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169a6:	4299      	cmp	r1, r3
 80169a8:	d001      	beq.n	80169ae <__ssrefill_r+0x14>
 80169aa:	f7fa fcf7 	bl	801139c <_free_r>
 80169ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80169b0:	6063      	str	r3, [r4, #4]
 80169b2:	2000      	movs	r0, #0
 80169b4:	6360      	str	r0, [r4, #52]	; 0x34
 80169b6:	b113      	cbz	r3, 80169be <__ssrefill_r+0x24>
 80169b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80169ba:	6023      	str	r3, [r4, #0]
 80169bc:	bd10      	pop	{r4, pc}
 80169be:	6923      	ldr	r3, [r4, #16]
 80169c0:	6023      	str	r3, [r4, #0]
 80169c2:	2300      	movs	r3, #0
 80169c4:	6063      	str	r3, [r4, #4]
 80169c6:	89a3      	ldrh	r3, [r4, #12]
 80169c8:	f043 0320 	orr.w	r3, r3, #32
 80169cc:	81a3      	strh	r3, [r4, #12]
 80169ce:	f04f 30ff 	mov.w	r0, #4294967295
 80169d2:	e7f3      	b.n	80169bc <__ssrefill_r+0x22>

080169d4 <__ssvfiscanf_r>:
 80169d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169d8:	460c      	mov	r4, r1
 80169da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80169de:	2100      	movs	r1, #0
 80169e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80169e4:	49a6      	ldr	r1, [pc, #664]	; (8016c80 <__ssvfiscanf_r+0x2ac>)
 80169e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80169e8:	f10d 0804 	add.w	r8, sp, #4
 80169ec:	49a5      	ldr	r1, [pc, #660]	; (8016c84 <__ssvfiscanf_r+0x2b0>)
 80169ee:	4fa6      	ldr	r7, [pc, #664]	; (8016c88 <__ssvfiscanf_r+0x2b4>)
 80169f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016c8c <__ssvfiscanf_r+0x2b8>
 80169f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80169f8:	4606      	mov	r6, r0
 80169fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80169fc:	9300      	str	r3, [sp, #0]
 80169fe:	7813      	ldrb	r3, [r2, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	f000 815a 	beq.w	8016cba <__ssvfiscanf_r+0x2e6>
 8016a06:	5dd9      	ldrb	r1, [r3, r7]
 8016a08:	f011 0108 	ands.w	r1, r1, #8
 8016a0c:	f102 0501 	add.w	r5, r2, #1
 8016a10:	d019      	beq.n	8016a46 <__ssvfiscanf_r+0x72>
 8016a12:	6863      	ldr	r3, [r4, #4]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	dd0f      	ble.n	8016a38 <__ssvfiscanf_r+0x64>
 8016a18:	6823      	ldr	r3, [r4, #0]
 8016a1a:	781a      	ldrb	r2, [r3, #0]
 8016a1c:	5cba      	ldrb	r2, [r7, r2]
 8016a1e:	0712      	lsls	r2, r2, #28
 8016a20:	d401      	bmi.n	8016a26 <__ssvfiscanf_r+0x52>
 8016a22:	462a      	mov	r2, r5
 8016a24:	e7eb      	b.n	80169fe <__ssvfiscanf_r+0x2a>
 8016a26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016a28:	3201      	adds	r2, #1
 8016a2a:	9245      	str	r2, [sp, #276]	; 0x114
 8016a2c:	6862      	ldr	r2, [r4, #4]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	3a01      	subs	r2, #1
 8016a32:	6062      	str	r2, [r4, #4]
 8016a34:	6023      	str	r3, [r4, #0]
 8016a36:	e7ec      	b.n	8016a12 <__ssvfiscanf_r+0x3e>
 8016a38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a3a:	4621      	mov	r1, r4
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	4798      	blx	r3
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d0e9      	beq.n	8016a18 <__ssvfiscanf_r+0x44>
 8016a44:	e7ed      	b.n	8016a22 <__ssvfiscanf_r+0x4e>
 8016a46:	2b25      	cmp	r3, #37	; 0x25
 8016a48:	d012      	beq.n	8016a70 <__ssvfiscanf_r+0x9c>
 8016a4a:	469a      	mov	sl, r3
 8016a4c:	6863      	ldr	r3, [r4, #4]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f340 8091 	ble.w	8016b76 <__ssvfiscanf_r+0x1a2>
 8016a54:	6822      	ldr	r2, [r4, #0]
 8016a56:	7813      	ldrb	r3, [r2, #0]
 8016a58:	4553      	cmp	r3, sl
 8016a5a:	f040 812e 	bne.w	8016cba <__ssvfiscanf_r+0x2e6>
 8016a5e:	6863      	ldr	r3, [r4, #4]
 8016a60:	3b01      	subs	r3, #1
 8016a62:	6063      	str	r3, [r4, #4]
 8016a64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016a66:	3201      	adds	r2, #1
 8016a68:	3301      	adds	r3, #1
 8016a6a:	6022      	str	r2, [r4, #0]
 8016a6c:	9345      	str	r3, [sp, #276]	; 0x114
 8016a6e:	e7d8      	b.n	8016a22 <__ssvfiscanf_r+0x4e>
 8016a70:	9141      	str	r1, [sp, #260]	; 0x104
 8016a72:	9143      	str	r1, [sp, #268]	; 0x10c
 8016a74:	7853      	ldrb	r3, [r2, #1]
 8016a76:	2b2a      	cmp	r3, #42	; 0x2a
 8016a78:	bf02      	ittt	eq
 8016a7a:	2310      	moveq	r3, #16
 8016a7c:	1c95      	addeq	r5, r2, #2
 8016a7e:	9341      	streq	r3, [sp, #260]	; 0x104
 8016a80:	220a      	movs	r2, #10
 8016a82:	46aa      	mov	sl, r5
 8016a84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016a88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016a8c:	2b09      	cmp	r3, #9
 8016a8e:	d91d      	bls.n	8016acc <__ssvfiscanf_r+0xf8>
 8016a90:	487e      	ldr	r0, [pc, #504]	; (8016c8c <__ssvfiscanf_r+0x2b8>)
 8016a92:	2203      	movs	r2, #3
 8016a94:	f7e9 fbc4 	bl	8000220 <memchr>
 8016a98:	b140      	cbz	r0, 8016aac <__ssvfiscanf_r+0xd8>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	eba0 0009 	sub.w	r0, r0, r9
 8016aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8016aa4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016aa6:	4318      	orrs	r0, r3
 8016aa8:	9041      	str	r0, [sp, #260]	; 0x104
 8016aaa:	4655      	mov	r5, sl
 8016aac:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016ab0:	2b78      	cmp	r3, #120	; 0x78
 8016ab2:	d806      	bhi.n	8016ac2 <__ssvfiscanf_r+0xee>
 8016ab4:	2b57      	cmp	r3, #87	; 0x57
 8016ab6:	d810      	bhi.n	8016ada <__ssvfiscanf_r+0x106>
 8016ab8:	2b25      	cmp	r3, #37	; 0x25
 8016aba:	d0c6      	beq.n	8016a4a <__ssvfiscanf_r+0x76>
 8016abc:	d856      	bhi.n	8016b6c <__ssvfiscanf_r+0x198>
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d064      	beq.n	8016b8c <__ssvfiscanf_r+0x1b8>
 8016ac2:	2303      	movs	r3, #3
 8016ac4:	9347      	str	r3, [sp, #284]	; 0x11c
 8016ac6:	230a      	movs	r3, #10
 8016ac8:	9342      	str	r3, [sp, #264]	; 0x108
 8016aca:	e071      	b.n	8016bb0 <__ssvfiscanf_r+0x1dc>
 8016acc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016ace:	fb02 1103 	mla	r1, r2, r3, r1
 8016ad2:	3930      	subs	r1, #48	; 0x30
 8016ad4:	9143      	str	r1, [sp, #268]	; 0x10c
 8016ad6:	4655      	mov	r5, sl
 8016ad8:	e7d3      	b.n	8016a82 <__ssvfiscanf_r+0xae>
 8016ada:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016ade:	2a20      	cmp	r2, #32
 8016ae0:	d8ef      	bhi.n	8016ac2 <__ssvfiscanf_r+0xee>
 8016ae2:	a101      	add	r1, pc, #4	; (adr r1, 8016ae8 <__ssvfiscanf_r+0x114>)
 8016ae4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016ae8:	08016b9b 	.word	0x08016b9b
 8016aec:	08016ac3 	.word	0x08016ac3
 8016af0:	08016ac3 	.word	0x08016ac3
 8016af4:	08016bf9 	.word	0x08016bf9
 8016af8:	08016ac3 	.word	0x08016ac3
 8016afc:	08016ac3 	.word	0x08016ac3
 8016b00:	08016ac3 	.word	0x08016ac3
 8016b04:	08016ac3 	.word	0x08016ac3
 8016b08:	08016ac3 	.word	0x08016ac3
 8016b0c:	08016ac3 	.word	0x08016ac3
 8016b10:	08016ac3 	.word	0x08016ac3
 8016b14:	08016c0f 	.word	0x08016c0f
 8016b18:	08016be5 	.word	0x08016be5
 8016b1c:	08016b73 	.word	0x08016b73
 8016b20:	08016b73 	.word	0x08016b73
 8016b24:	08016b73 	.word	0x08016b73
 8016b28:	08016ac3 	.word	0x08016ac3
 8016b2c:	08016be9 	.word	0x08016be9
 8016b30:	08016ac3 	.word	0x08016ac3
 8016b34:	08016ac3 	.word	0x08016ac3
 8016b38:	08016ac3 	.word	0x08016ac3
 8016b3c:	08016ac3 	.word	0x08016ac3
 8016b40:	08016c1f 	.word	0x08016c1f
 8016b44:	08016bf1 	.word	0x08016bf1
 8016b48:	08016b93 	.word	0x08016b93
 8016b4c:	08016ac3 	.word	0x08016ac3
 8016b50:	08016ac3 	.word	0x08016ac3
 8016b54:	08016c1b 	.word	0x08016c1b
 8016b58:	08016ac3 	.word	0x08016ac3
 8016b5c:	08016be5 	.word	0x08016be5
 8016b60:	08016ac3 	.word	0x08016ac3
 8016b64:	08016ac3 	.word	0x08016ac3
 8016b68:	08016b9b 	.word	0x08016b9b
 8016b6c:	3b45      	subs	r3, #69	; 0x45
 8016b6e:	2b02      	cmp	r3, #2
 8016b70:	d8a7      	bhi.n	8016ac2 <__ssvfiscanf_r+0xee>
 8016b72:	2305      	movs	r3, #5
 8016b74:	e01b      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016b76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b78:	4621      	mov	r1, r4
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	4798      	blx	r3
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	f43f af68 	beq.w	8016a54 <__ssvfiscanf_r+0x80>
 8016b84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016b86:	2800      	cmp	r0, #0
 8016b88:	f040 808d 	bne.w	8016ca6 <__ssvfiscanf_r+0x2d2>
 8016b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b90:	e08f      	b.n	8016cb2 <__ssvfiscanf_r+0x2de>
 8016b92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016b94:	f042 0220 	orr.w	r2, r2, #32
 8016b98:	9241      	str	r2, [sp, #260]	; 0x104
 8016b9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016ba0:	9241      	str	r2, [sp, #260]	; 0x104
 8016ba2:	2210      	movs	r2, #16
 8016ba4:	2b6f      	cmp	r3, #111	; 0x6f
 8016ba6:	9242      	str	r2, [sp, #264]	; 0x108
 8016ba8:	bf34      	ite	cc
 8016baa:	2303      	movcc	r3, #3
 8016bac:	2304      	movcs	r3, #4
 8016bae:	9347      	str	r3, [sp, #284]	; 0x11c
 8016bb0:	6863      	ldr	r3, [r4, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	dd42      	ble.n	8016c3c <__ssvfiscanf_r+0x268>
 8016bb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016bb8:	0659      	lsls	r1, r3, #25
 8016bba:	d404      	bmi.n	8016bc6 <__ssvfiscanf_r+0x1f2>
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	781a      	ldrb	r2, [r3, #0]
 8016bc0:	5cba      	ldrb	r2, [r7, r2]
 8016bc2:	0712      	lsls	r2, r2, #28
 8016bc4:	d441      	bmi.n	8016c4a <__ssvfiscanf_r+0x276>
 8016bc6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016bc8:	2b02      	cmp	r3, #2
 8016bca:	dc50      	bgt.n	8016c6e <__ssvfiscanf_r+0x29a>
 8016bcc:	466b      	mov	r3, sp
 8016bce:	4622      	mov	r2, r4
 8016bd0:	a941      	add	r1, sp, #260	; 0x104
 8016bd2:	4630      	mov	r0, r6
 8016bd4:	f000 f876 	bl	8016cc4 <_scanf_chars>
 8016bd8:	2801      	cmp	r0, #1
 8016bda:	d06e      	beq.n	8016cba <__ssvfiscanf_r+0x2e6>
 8016bdc:	2802      	cmp	r0, #2
 8016bde:	f47f af20 	bne.w	8016a22 <__ssvfiscanf_r+0x4e>
 8016be2:	e7cf      	b.n	8016b84 <__ssvfiscanf_r+0x1b0>
 8016be4:	220a      	movs	r2, #10
 8016be6:	e7dd      	b.n	8016ba4 <__ssvfiscanf_r+0x1d0>
 8016be8:	2300      	movs	r3, #0
 8016bea:	9342      	str	r3, [sp, #264]	; 0x108
 8016bec:	2303      	movs	r3, #3
 8016bee:	e7de      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016bf0:	2308      	movs	r3, #8
 8016bf2:	9342      	str	r3, [sp, #264]	; 0x108
 8016bf4:	2304      	movs	r3, #4
 8016bf6:	e7da      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016bf8:	4629      	mov	r1, r5
 8016bfa:	4640      	mov	r0, r8
 8016bfc:	f000 f9d0 	bl	8016fa0 <__sccl>
 8016c00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c06:	9341      	str	r3, [sp, #260]	; 0x104
 8016c08:	4605      	mov	r5, r0
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	e7cf      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016c0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c14:	9341      	str	r3, [sp, #260]	; 0x104
 8016c16:	2300      	movs	r3, #0
 8016c18:	e7c9      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016c1a:	2302      	movs	r3, #2
 8016c1c:	e7c7      	b.n	8016bae <__ssvfiscanf_r+0x1da>
 8016c1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016c20:	06c3      	lsls	r3, r0, #27
 8016c22:	f53f aefe 	bmi.w	8016a22 <__ssvfiscanf_r+0x4e>
 8016c26:	9b00      	ldr	r3, [sp, #0]
 8016c28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c2a:	1d19      	adds	r1, r3, #4
 8016c2c:	9100      	str	r1, [sp, #0]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	f010 0f01 	tst.w	r0, #1
 8016c34:	bf14      	ite	ne
 8016c36:	801a      	strhne	r2, [r3, #0]
 8016c38:	601a      	streq	r2, [r3, #0]
 8016c3a:	e6f2      	b.n	8016a22 <__ssvfiscanf_r+0x4e>
 8016c3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c3e:	4621      	mov	r1, r4
 8016c40:	4630      	mov	r0, r6
 8016c42:	4798      	blx	r3
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d0b6      	beq.n	8016bb6 <__ssvfiscanf_r+0x1e2>
 8016c48:	e79c      	b.n	8016b84 <__ssvfiscanf_r+0x1b0>
 8016c4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c4c:	3201      	adds	r2, #1
 8016c4e:	9245      	str	r2, [sp, #276]	; 0x114
 8016c50:	6862      	ldr	r2, [r4, #4]
 8016c52:	3a01      	subs	r2, #1
 8016c54:	2a00      	cmp	r2, #0
 8016c56:	6062      	str	r2, [r4, #4]
 8016c58:	dd02      	ble.n	8016c60 <__ssvfiscanf_r+0x28c>
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	6023      	str	r3, [r4, #0]
 8016c5e:	e7ad      	b.n	8016bbc <__ssvfiscanf_r+0x1e8>
 8016c60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c62:	4621      	mov	r1, r4
 8016c64:	4630      	mov	r0, r6
 8016c66:	4798      	blx	r3
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d0a7      	beq.n	8016bbc <__ssvfiscanf_r+0x1e8>
 8016c6c:	e78a      	b.n	8016b84 <__ssvfiscanf_r+0x1b0>
 8016c6e:	2b04      	cmp	r3, #4
 8016c70:	dc0e      	bgt.n	8016c90 <__ssvfiscanf_r+0x2bc>
 8016c72:	466b      	mov	r3, sp
 8016c74:	4622      	mov	r2, r4
 8016c76:	a941      	add	r1, sp, #260	; 0x104
 8016c78:	4630      	mov	r0, r6
 8016c7a:	f000 f87d 	bl	8016d78 <_scanf_i>
 8016c7e:	e7ab      	b.n	8016bd8 <__ssvfiscanf_r+0x204>
 8016c80:	08016921 	.word	0x08016921
 8016c84:	0801699b 	.word	0x0801699b
 8016c88:	08048be1 	.word	0x08048be1
 8016c8c:	08048836 	.word	0x08048836
 8016c90:	4b0b      	ldr	r3, [pc, #44]	; (8016cc0 <__ssvfiscanf_r+0x2ec>)
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	f43f aec5 	beq.w	8016a22 <__ssvfiscanf_r+0x4e>
 8016c98:	466b      	mov	r3, sp
 8016c9a:	4622      	mov	r2, r4
 8016c9c:	a941      	add	r1, sp, #260	; 0x104
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	f3af 8000 	nop.w
 8016ca4:	e798      	b.n	8016bd8 <__ssvfiscanf_r+0x204>
 8016ca6:	89a3      	ldrh	r3, [r4, #12]
 8016ca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016cac:	bf18      	it	ne
 8016cae:	f04f 30ff 	movne.w	r0, #4294967295
 8016cb2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016cbc:	e7f9      	b.n	8016cb2 <__ssvfiscanf_r+0x2de>
 8016cbe:	bf00      	nop
 8016cc0:	00000000 	.word	0x00000000

08016cc4 <_scanf_chars>:
 8016cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cc8:	4615      	mov	r5, r2
 8016cca:	688a      	ldr	r2, [r1, #8]
 8016ccc:	4680      	mov	r8, r0
 8016cce:	460c      	mov	r4, r1
 8016cd0:	b932      	cbnz	r2, 8016ce0 <_scanf_chars+0x1c>
 8016cd2:	698a      	ldr	r2, [r1, #24]
 8016cd4:	2a00      	cmp	r2, #0
 8016cd6:	bf0c      	ite	eq
 8016cd8:	2201      	moveq	r2, #1
 8016cda:	f04f 32ff 	movne.w	r2, #4294967295
 8016cde:	608a      	str	r2, [r1, #8]
 8016ce0:	6822      	ldr	r2, [r4, #0]
 8016ce2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016d74 <_scanf_chars+0xb0>
 8016ce6:	06d1      	lsls	r1, r2, #27
 8016ce8:	bf5f      	itttt	pl
 8016cea:	681a      	ldrpl	r2, [r3, #0]
 8016cec:	1d11      	addpl	r1, r2, #4
 8016cee:	6019      	strpl	r1, [r3, #0]
 8016cf0:	6816      	ldrpl	r6, [r2, #0]
 8016cf2:	2700      	movs	r7, #0
 8016cf4:	69a0      	ldr	r0, [r4, #24]
 8016cf6:	b188      	cbz	r0, 8016d1c <_scanf_chars+0x58>
 8016cf8:	2801      	cmp	r0, #1
 8016cfa:	d107      	bne.n	8016d0c <_scanf_chars+0x48>
 8016cfc:	682a      	ldr	r2, [r5, #0]
 8016cfe:	7811      	ldrb	r1, [r2, #0]
 8016d00:	6962      	ldr	r2, [r4, #20]
 8016d02:	5c52      	ldrb	r2, [r2, r1]
 8016d04:	b952      	cbnz	r2, 8016d1c <_scanf_chars+0x58>
 8016d06:	2f00      	cmp	r7, #0
 8016d08:	d031      	beq.n	8016d6e <_scanf_chars+0xaa>
 8016d0a:	e022      	b.n	8016d52 <_scanf_chars+0x8e>
 8016d0c:	2802      	cmp	r0, #2
 8016d0e:	d120      	bne.n	8016d52 <_scanf_chars+0x8e>
 8016d10:	682b      	ldr	r3, [r5, #0]
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016d18:	071b      	lsls	r3, r3, #28
 8016d1a:	d41a      	bmi.n	8016d52 <_scanf_chars+0x8e>
 8016d1c:	6823      	ldr	r3, [r4, #0]
 8016d1e:	06da      	lsls	r2, r3, #27
 8016d20:	bf5e      	ittt	pl
 8016d22:	682b      	ldrpl	r3, [r5, #0]
 8016d24:	781b      	ldrbpl	r3, [r3, #0]
 8016d26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016d2a:	682a      	ldr	r2, [r5, #0]
 8016d2c:	686b      	ldr	r3, [r5, #4]
 8016d2e:	3201      	adds	r2, #1
 8016d30:	602a      	str	r2, [r5, #0]
 8016d32:	68a2      	ldr	r2, [r4, #8]
 8016d34:	3b01      	subs	r3, #1
 8016d36:	3a01      	subs	r2, #1
 8016d38:	606b      	str	r3, [r5, #4]
 8016d3a:	3701      	adds	r7, #1
 8016d3c:	60a2      	str	r2, [r4, #8]
 8016d3e:	b142      	cbz	r2, 8016d52 <_scanf_chars+0x8e>
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	dcd7      	bgt.n	8016cf4 <_scanf_chars+0x30>
 8016d44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d48:	4629      	mov	r1, r5
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4798      	blx	r3
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d0d0      	beq.n	8016cf4 <_scanf_chars+0x30>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	f013 0310 	ands.w	r3, r3, #16
 8016d58:	d105      	bne.n	8016d66 <_scanf_chars+0xa2>
 8016d5a:	68e2      	ldr	r2, [r4, #12]
 8016d5c:	3201      	adds	r2, #1
 8016d5e:	60e2      	str	r2, [r4, #12]
 8016d60:	69a2      	ldr	r2, [r4, #24]
 8016d62:	b102      	cbz	r2, 8016d66 <_scanf_chars+0xa2>
 8016d64:	7033      	strb	r3, [r6, #0]
 8016d66:	6923      	ldr	r3, [r4, #16]
 8016d68:	443b      	add	r3, r7
 8016d6a:	6123      	str	r3, [r4, #16]
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d72:	bf00      	nop
 8016d74:	08048be1 	.word	0x08048be1

08016d78 <_scanf_i>:
 8016d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d7c:	4698      	mov	r8, r3
 8016d7e:	4b76      	ldr	r3, [pc, #472]	; (8016f58 <_scanf_i+0x1e0>)
 8016d80:	460c      	mov	r4, r1
 8016d82:	4682      	mov	sl, r0
 8016d84:	4616      	mov	r6, r2
 8016d86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016d8a:	b087      	sub	sp, #28
 8016d8c:	ab03      	add	r3, sp, #12
 8016d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016d92:	4b72      	ldr	r3, [pc, #456]	; (8016f5c <_scanf_i+0x1e4>)
 8016d94:	69a1      	ldr	r1, [r4, #24]
 8016d96:	4a72      	ldr	r2, [pc, #456]	; (8016f60 <_scanf_i+0x1e8>)
 8016d98:	2903      	cmp	r1, #3
 8016d9a:	bf18      	it	ne
 8016d9c:	461a      	movne	r2, r3
 8016d9e:	68a3      	ldr	r3, [r4, #8]
 8016da0:	9201      	str	r2, [sp, #4]
 8016da2:	1e5a      	subs	r2, r3, #1
 8016da4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016da8:	bf88      	it	hi
 8016daa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016dae:	4627      	mov	r7, r4
 8016db0:	bf82      	ittt	hi
 8016db2:	eb03 0905 	addhi.w	r9, r3, r5
 8016db6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016dba:	60a3      	strhi	r3, [r4, #8]
 8016dbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016dc0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016dc4:	bf98      	it	ls
 8016dc6:	f04f 0900 	movls.w	r9, #0
 8016dca:	6023      	str	r3, [r4, #0]
 8016dcc:	463d      	mov	r5, r7
 8016dce:	f04f 0b00 	mov.w	fp, #0
 8016dd2:	6831      	ldr	r1, [r6, #0]
 8016dd4:	ab03      	add	r3, sp, #12
 8016dd6:	7809      	ldrb	r1, [r1, #0]
 8016dd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016ddc:	2202      	movs	r2, #2
 8016dde:	f7e9 fa1f 	bl	8000220 <memchr>
 8016de2:	b328      	cbz	r0, 8016e30 <_scanf_i+0xb8>
 8016de4:	f1bb 0f01 	cmp.w	fp, #1
 8016de8:	d159      	bne.n	8016e9e <_scanf_i+0x126>
 8016dea:	6862      	ldr	r2, [r4, #4]
 8016dec:	b92a      	cbnz	r2, 8016dfa <_scanf_i+0x82>
 8016dee:	6822      	ldr	r2, [r4, #0]
 8016df0:	2308      	movs	r3, #8
 8016df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016df6:	6063      	str	r3, [r4, #4]
 8016df8:	6022      	str	r2, [r4, #0]
 8016dfa:	6822      	ldr	r2, [r4, #0]
 8016dfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016e00:	6022      	str	r2, [r4, #0]
 8016e02:	68a2      	ldr	r2, [r4, #8]
 8016e04:	1e51      	subs	r1, r2, #1
 8016e06:	60a1      	str	r1, [r4, #8]
 8016e08:	b192      	cbz	r2, 8016e30 <_scanf_i+0xb8>
 8016e0a:	6832      	ldr	r2, [r6, #0]
 8016e0c:	1c51      	adds	r1, r2, #1
 8016e0e:	6031      	str	r1, [r6, #0]
 8016e10:	7812      	ldrb	r2, [r2, #0]
 8016e12:	f805 2b01 	strb.w	r2, [r5], #1
 8016e16:	6872      	ldr	r2, [r6, #4]
 8016e18:	3a01      	subs	r2, #1
 8016e1a:	2a00      	cmp	r2, #0
 8016e1c:	6072      	str	r2, [r6, #4]
 8016e1e:	dc07      	bgt.n	8016e30 <_scanf_i+0xb8>
 8016e20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016e24:	4631      	mov	r1, r6
 8016e26:	4650      	mov	r0, sl
 8016e28:	4790      	blx	r2
 8016e2a:	2800      	cmp	r0, #0
 8016e2c:	f040 8085 	bne.w	8016f3a <_scanf_i+0x1c2>
 8016e30:	f10b 0b01 	add.w	fp, fp, #1
 8016e34:	f1bb 0f03 	cmp.w	fp, #3
 8016e38:	d1cb      	bne.n	8016dd2 <_scanf_i+0x5a>
 8016e3a:	6863      	ldr	r3, [r4, #4]
 8016e3c:	b90b      	cbnz	r3, 8016e42 <_scanf_i+0xca>
 8016e3e:	230a      	movs	r3, #10
 8016e40:	6063      	str	r3, [r4, #4]
 8016e42:	6863      	ldr	r3, [r4, #4]
 8016e44:	4947      	ldr	r1, [pc, #284]	; (8016f64 <_scanf_i+0x1ec>)
 8016e46:	6960      	ldr	r0, [r4, #20]
 8016e48:	1ac9      	subs	r1, r1, r3
 8016e4a:	f000 f8a9 	bl	8016fa0 <__sccl>
 8016e4e:	f04f 0b00 	mov.w	fp, #0
 8016e52:	68a3      	ldr	r3, [r4, #8]
 8016e54:	6822      	ldr	r2, [r4, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d03d      	beq.n	8016ed6 <_scanf_i+0x15e>
 8016e5a:	6831      	ldr	r1, [r6, #0]
 8016e5c:	6960      	ldr	r0, [r4, #20]
 8016e5e:	f891 c000 	ldrb.w	ip, [r1]
 8016e62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016e66:	2800      	cmp	r0, #0
 8016e68:	d035      	beq.n	8016ed6 <_scanf_i+0x15e>
 8016e6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016e6e:	d124      	bne.n	8016eba <_scanf_i+0x142>
 8016e70:	0510      	lsls	r0, r2, #20
 8016e72:	d522      	bpl.n	8016eba <_scanf_i+0x142>
 8016e74:	f10b 0b01 	add.w	fp, fp, #1
 8016e78:	f1b9 0f00 	cmp.w	r9, #0
 8016e7c:	d003      	beq.n	8016e86 <_scanf_i+0x10e>
 8016e7e:	3301      	adds	r3, #1
 8016e80:	f109 39ff 	add.w	r9, r9, #4294967295
 8016e84:	60a3      	str	r3, [r4, #8]
 8016e86:	6873      	ldr	r3, [r6, #4]
 8016e88:	3b01      	subs	r3, #1
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	6073      	str	r3, [r6, #4]
 8016e8e:	dd1b      	ble.n	8016ec8 <_scanf_i+0x150>
 8016e90:	6833      	ldr	r3, [r6, #0]
 8016e92:	3301      	adds	r3, #1
 8016e94:	6033      	str	r3, [r6, #0]
 8016e96:	68a3      	ldr	r3, [r4, #8]
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	60a3      	str	r3, [r4, #8]
 8016e9c:	e7d9      	b.n	8016e52 <_scanf_i+0xda>
 8016e9e:	f1bb 0f02 	cmp.w	fp, #2
 8016ea2:	d1ae      	bne.n	8016e02 <_scanf_i+0x8a>
 8016ea4:	6822      	ldr	r2, [r4, #0]
 8016ea6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016eaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016eae:	d1bf      	bne.n	8016e30 <_scanf_i+0xb8>
 8016eb0:	2310      	movs	r3, #16
 8016eb2:	6063      	str	r3, [r4, #4]
 8016eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016eb8:	e7a2      	b.n	8016e00 <_scanf_i+0x88>
 8016eba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016ebe:	6022      	str	r2, [r4, #0]
 8016ec0:	780b      	ldrb	r3, [r1, #0]
 8016ec2:	f805 3b01 	strb.w	r3, [r5], #1
 8016ec6:	e7de      	b.n	8016e86 <_scanf_i+0x10e>
 8016ec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016ecc:	4631      	mov	r1, r6
 8016ece:	4650      	mov	r0, sl
 8016ed0:	4798      	blx	r3
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d0df      	beq.n	8016e96 <_scanf_i+0x11e>
 8016ed6:	6823      	ldr	r3, [r4, #0]
 8016ed8:	05db      	lsls	r3, r3, #23
 8016eda:	d50d      	bpl.n	8016ef8 <_scanf_i+0x180>
 8016edc:	42bd      	cmp	r5, r7
 8016ede:	d909      	bls.n	8016ef4 <_scanf_i+0x17c>
 8016ee0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ee8:	4632      	mov	r2, r6
 8016eea:	4650      	mov	r0, sl
 8016eec:	4798      	blx	r3
 8016eee:	f105 39ff 	add.w	r9, r5, #4294967295
 8016ef2:	464d      	mov	r5, r9
 8016ef4:	42bd      	cmp	r5, r7
 8016ef6:	d02d      	beq.n	8016f54 <_scanf_i+0x1dc>
 8016ef8:	6822      	ldr	r2, [r4, #0]
 8016efa:	f012 0210 	ands.w	r2, r2, #16
 8016efe:	d113      	bne.n	8016f28 <_scanf_i+0x1b0>
 8016f00:	702a      	strb	r2, [r5, #0]
 8016f02:	6863      	ldr	r3, [r4, #4]
 8016f04:	9e01      	ldr	r6, [sp, #4]
 8016f06:	4639      	mov	r1, r7
 8016f08:	4650      	mov	r0, sl
 8016f0a:	47b0      	blx	r6
 8016f0c:	6821      	ldr	r1, [r4, #0]
 8016f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8016f12:	f011 0f20 	tst.w	r1, #32
 8016f16:	d013      	beq.n	8016f40 <_scanf_i+0x1c8>
 8016f18:	1d1a      	adds	r2, r3, #4
 8016f1a:	f8c8 2000 	str.w	r2, [r8]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	6018      	str	r0, [r3, #0]
 8016f22:	68e3      	ldr	r3, [r4, #12]
 8016f24:	3301      	adds	r3, #1
 8016f26:	60e3      	str	r3, [r4, #12]
 8016f28:	1bed      	subs	r5, r5, r7
 8016f2a:	44ab      	add	fp, r5
 8016f2c:	6925      	ldr	r5, [r4, #16]
 8016f2e:	445d      	add	r5, fp
 8016f30:	6125      	str	r5, [r4, #16]
 8016f32:	2000      	movs	r0, #0
 8016f34:	b007      	add	sp, #28
 8016f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3a:	f04f 0b00 	mov.w	fp, #0
 8016f3e:	e7ca      	b.n	8016ed6 <_scanf_i+0x15e>
 8016f40:	1d1a      	adds	r2, r3, #4
 8016f42:	f8c8 2000 	str.w	r2, [r8]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	f011 0f01 	tst.w	r1, #1
 8016f4c:	bf14      	ite	ne
 8016f4e:	8018      	strhne	r0, [r3, #0]
 8016f50:	6018      	streq	r0, [r3, #0]
 8016f52:	e7e6      	b.n	8016f22 <_scanf_i+0x1aa>
 8016f54:	2001      	movs	r0, #1
 8016f56:	e7ed      	b.n	8016f34 <_scanf_i+0x1bc>
 8016f58:	0801a8c8 	.word	0x0801a8c8
 8016f5c:	08013c7d 	.word	0x08013c7d
 8016f60:	08013b81 	.word	0x08013b81
 8016f64:	0804900d 	.word	0x0804900d

08016f68 <_read_r>:
 8016f68:	b538      	push	{r3, r4, r5, lr}
 8016f6a:	4d07      	ldr	r5, [pc, #28]	; (8016f88 <_read_r+0x20>)
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	4608      	mov	r0, r1
 8016f70:	4611      	mov	r1, r2
 8016f72:	2200      	movs	r2, #0
 8016f74:	602a      	str	r2, [r5, #0]
 8016f76:	461a      	mov	r2, r3
 8016f78:	f7ed f8b8 	bl	80040ec <_read>
 8016f7c:	1c43      	adds	r3, r0, #1
 8016f7e:	d102      	bne.n	8016f86 <_read_r+0x1e>
 8016f80:	682b      	ldr	r3, [r5, #0]
 8016f82:	b103      	cbz	r3, 8016f86 <_read_r+0x1e>
 8016f84:	6023      	str	r3, [r4, #0]
 8016f86:	bd38      	pop	{r3, r4, r5, pc}
 8016f88:	20005d88 	.word	0x20005d88
 8016f8c:	00000000 	.word	0x00000000

08016f90 <nan>:
 8016f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016f98 <nan+0x8>
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop
 8016f98:	00000000 	.word	0x00000000
 8016f9c:	7ff80000 	.word	0x7ff80000

08016fa0 <__sccl>:
 8016fa0:	b570      	push	{r4, r5, r6, lr}
 8016fa2:	780b      	ldrb	r3, [r1, #0]
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	2b5e      	cmp	r3, #94	; 0x5e
 8016fa8:	bf0b      	itete	eq
 8016faa:	784b      	ldrbeq	r3, [r1, #1]
 8016fac:	1c48      	addne	r0, r1, #1
 8016fae:	1c88      	addeq	r0, r1, #2
 8016fb0:	2200      	movne	r2, #0
 8016fb2:	bf08      	it	eq
 8016fb4:	2201      	moveq	r2, #1
 8016fb6:	1e61      	subs	r1, r4, #1
 8016fb8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016fbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016fc0:	42a9      	cmp	r1, r5
 8016fc2:	d1fb      	bne.n	8016fbc <__sccl+0x1c>
 8016fc4:	b90b      	cbnz	r3, 8016fca <__sccl+0x2a>
 8016fc6:	3801      	subs	r0, #1
 8016fc8:	bd70      	pop	{r4, r5, r6, pc}
 8016fca:	f082 0201 	eor.w	r2, r2, #1
 8016fce:	54e2      	strb	r2, [r4, r3]
 8016fd0:	4605      	mov	r5, r0
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016fd8:	292d      	cmp	r1, #45	; 0x2d
 8016fda:	d006      	beq.n	8016fea <__sccl+0x4a>
 8016fdc:	295d      	cmp	r1, #93	; 0x5d
 8016fde:	d0f3      	beq.n	8016fc8 <__sccl+0x28>
 8016fe0:	b909      	cbnz	r1, 8016fe6 <__sccl+0x46>
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	e7f0      	b.n	8016fc8 <__sccl+0x28>
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	e7f1      	b.n	8016fce <__sccl+0x2e>
 8016fea:	786e      	ldrb	r6, [r5, #1]
 8016fec:	2e5d      	cmp	r6, #93	; 0x5d
 8016fee:	d0fa      	beq.n	8016fe6 <__sccl+0x46>
 8016ff0:	42b3      	cmp	r3, r6
 8016ff2:	dcf8      	bgt.n	8016fe6 <__sccl+0x46>
 8016ff4:	3502      	adds	r5, #2
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	3101      	adds	r1, #1
 8016ffa:	428e      	cmp	r6, r1
 8016ffc:	5462      	strb	r2, [r4, r1]
 8016ffe:	dcfb      	bgt.n	8016ff8 <__sccl+0x58>
 8017000:	1af1      	subs	r1, r6, r3
 8017002:	3901      	subs	r1, #1
 8017004:	1c58      	adds	r0, r3, #1
 8017006:	42b3      	cmp	r3, r6
 8017008:	bfa8      	it	ge
 801700a:	2100      	movge	r1, #0
 801700c:	1843      	adds	r3, r0, r1
 801700e:	e7e0      	b.n	8016fd2 <__sccl+0x32>

08017010 <_raise_r>:
 8017010:	291f      	cmp	r1, #31
 8017012:	b538      	push	{r3, r4, r5, lr}
 8017014:	4604      	mov	r4, r0
 8017016:	460d      	mov	r5, r1
 8017018:	d904      	bls.n	8017024 <_raise_r+0x14>
 801701a:	2316      	movs	r3, #22
 801701c:	6003      	str	r3, [r0, #0]
 801701e:	f04f 30ff 	mov.w	r0, #4294967295
 8017022:	bd38      	pop	{r3, r4, r5, pc}
 8017024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017026:	b112      	cbz	r2, 801702e <_raise_r+0x1e>
 8017028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801702c:	b94b      	cbnz	r3, 8017042 <_raise_r+0x32>
 801702e:	4620      	mov	r0, r4
 8017030:	f000 f830 	bl	8017094 <_getpid_r>
 8017034:	462a      	mov	r2, r5
 8017036:	4601      	mov	r1, r0
 8017038:	4620      	mov	r0, r4
 801703a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801703e:	f000 b817 	b.w	8017070 <_kill_r>
 8017042:	2b01      	cmp	r3, #1
 8017044:	d00a      	beq.n	801705c <_raise_r+0x4c>
 8017046:	1c59      	adds	r1, r3, #1
 8017048:	d103      	bne.n	8017052 <_raise_r+0x42>
 801704a:	2316      	movs	r3, #22
 801704c:	6003      	str	r3, [r0, #0]
 801704e:	2001      	movs	r0, #1
 8017050:	e7e7      	b.n	8017022 <_raise_r+0x12>
 8017052:	2400      	movs	r4, #0
 8017054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017058:	4628      	mov	r0, r5
 801705a:	4798      	blx	r3
 801705c:	2000      	movs	r0, #0
 801705e:	e7e0      	b.n	8017022 <_raise_r+0x12>

08017060 <raise>:
 8017060:	4b02      	ldr	r3, [pc, #8]	; (801706c <raise+0xc>)
 8017062:	4601      	mov	r1, r0
 8017064:	6818      	ldr	r0, [r3, #0]
 8017066:	f7ff bfd3 	b.w	8017010 <_raise_r>
 801706a:	bf00      	nop
 801706c:	200002c8 	.word	0x200002c8

08017070 <_kill_r>:
 8017070:	b538      	push	{r3, r4, r5, lr}
 8017072:	4d07      	ldr	r5, [pc, #28]	; (8017090 <_kill_r+0x20>)
 8017074:	2300      	movs	r3, #0
 8017076:	4604      	mov	r4, r0
 8017078:	4608      	mov	r0, r1
 801707a:	4611      	mov	r1, r2
 801707c:	602b      	str	r3, [r5, #0]
 801707e:	f7ed f81b 	bl	80040b8 <_kill>
 8017082:	1c43      	adds	r3, r0, #1
 8017084:	d102      	bne.n	801708c <_kill_r+0x1c>
 8017086:	682b      	ldr	r3, [r5, #0]
 8017088:	b103      	cbz	r3, 801708c <_kill_r+0x1c>
 801708a:	6023      	str	r3, [r4, #0]
 801708c:	bd38      	pop	{r3, r4, r5, pc}
 801708e:	bf00      	nop
 8017090:	20005d88 	.word	0x20005d88

08017094 <_getpid_r>:
 8017094:	f7ed b808 	b.w	80040a8 <_getpid>

08017098 <sniprintf>:
 8017098:	b40c      	push	{r2, r3}
 801709a:	b530      	push	{r4, r5, lr}
 801709c:	4b17      	ldr	r3, [pc, #92]	; (80170fc <sniprintf+0x64>)
 801709e:	1e0c      	subs	r4, r1, #0
 80170a0:	681d      	ldr	r5, [r3, #0]
 80170a2:	b09d      	sub	sp, #116	; 0x74
 80170a4:	da08      	bge.n	80170b8 <sniprintf+0x20>
 80170a6:	238b      	movs	r3, #139	; 0x8b
 80170a8:	602b      	str	r3, [r5, #0]
 80170aa:	f04f 30ff 	mov.w	r0, #4294967295
 80170ae:	b01d      	add	sp, #116	; 0x74
 80170b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170b4:	b002      	add	sp, #8
 80170b6:	4770      	bx	lr
 80170b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80170bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80170c0:	bf14      	ite	ne
 80170c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80170c6:	4623      	moveq	r3, r4
 80170c8:	9304      	str	r3, [sp, #16]
 80170ca:	9307      	str	r3, [sp, #28]
 80170cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170d0:	9002      	str	r0, [sp, #8]
 80170d2:	9006      	str	r0, [sp, #24]
 80170d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80170d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170da:	ab21      	add	r3, sp, #132	; 0x84
 80170dc:	a902      	add	r1, sp, #8
 80170de:	4628      	mov	r0, r5
 80170e0:	9301      	str	r3, [sp, #4]
 80170e2:	f7ff fb1d 	bl	8016720 <_svfiprintf_r>
 80170e6:	1c43      	adds	r3, r0, #1
 80170e8:	bfbc      	itt	lt
 80170ea:	238b      	movlt	r3, #139	; 0x8b
 80170ec:	602b      	strlt	r3, [r5, #0]
 80170ee:	2c00      	cmp	r4, #0
 80170f0:	d0dd      	beq.n	80170ae <sniprintf+0x16>
 80170f2:	9b02      	ldr	r3, [sp, #8]
 80170f4:	2200      	movs	r2, #0
 80170f6:	701a      	strb	r2, [r3, #0]
 80170f8:	e7d9      	b.n	80170ae <sniprintf+0x16>
 80170fa:	bf00      	nop
 80170fc:	200002c8 	.word	0x200002c8

08017100 <strncmp>:
 8017100:	b510      	push	{r4, lr}
 8017102:	b17a      	cbz	r2, 8017124 <strncmp+0x24>
 8017104:	4603      	mov	r3, r0
 8017106:	3901      	subs	r1, #1
 8017108:	1884      	adds	r4, r0, r2
 801710a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801710e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017112:	4290      	cmp	r0, r2
 8017114:	d101      	bne.n	801711a <strncmp+0x1a>
 8017116:	42a3      	cmp	r3, r4
 8017118:	d101      	bne.n	801711e <strncmp+0x1e>
 801711a:	1a80      	subs	r0, r0, r2
 801711c:	bd10      	pop	{r4, pc}
 801711e:	2800      	cmp	r0, #0
 8017120:	d1f3      	bne.n	801710a <strncmp+0xa>
 8017122:	e7fa      	b.n	801711a <strncmp+0x1a>
 8017124:	4610      	mov	r0, r2
 8017126:	e7f9      	b.n	801711c <strncmp+0x1c>

08017128 <__submore>:
 8017128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712c:	460c      	mov	r4, r1
 801712e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017134:	4299      	cmp	r1, r3
 8017136:	d11d      	bne.n	8017174 <__submore+0x4c>
 8017138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801713c:	f7fa f99a 	bl	8011474 <_malloc_r>
 8017140:	b918      	cbnz	r0, 801714a <__submore+0x22>
 8017142:	f04f 30ff 	mov.w	r0, #4294967295
 8017146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801714a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801714e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017150:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017154:	6360      	str	r0, [r4, #52]	; 0x34
 8017156:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801715a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801715e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017162:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017166:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801716a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801716e:	6020      	str	r0, [r4, #0]
 8017170:	2000      	movs	r0, #0
 8017172:	e7e8      	b.n	8017146 <__submore+0x1e>
 8017174:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017176:	0077      	lsls	r7, r6, #1
 8017178:	463a      	mov	r2, r7
 801717a:	f7ff fa46 	bl	801660a <_realloc_r>
 801717e:	4605      	mov	r5, r0
 8017180:	2800      	cmp	r0, #0
 8017182:	d0de      	beq.n	8017142 <__submore+0x1a>
 8017184:	eb00 0806 	add.w	r8, r0, r6
 8017188:	4601      	mov	r1, r0
 801718a:	4632      	mov	r2, r6
 801718c:	4640      	mov	r0, r8
 801718e:	f7f9 fe7d 	bl	8010e8c <memcpy>
 8017192:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017196:	f8c4 8000 	str.w	r8, [r4]
 801719a:	e7e9      	b.n	8017170 <__submore+0x48>

0801719c <__ascii_wctomb>:
 801719c:	b149      	cbz	r1, 80171b2 <__ascii_wctomb+0x16>
 801719e:	2aff      	cmp	r2, #255	; 0xff
 80171a0:	bf85      	ittet	hi
 80171a2:	238a      	movhi	r3, #138	; 0x8a
 80171a4:	6003      	strhi	r3, [r0, #0]
 80171a6:	700a      	strbls	r2, [r1, #0]
 80171a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80171ac:	bf98      	it	ls
 80171ae:	2001      	movls	r0, #1
 80171b0:	4770      	bx	lr
 80171b2:	4608      	mov	r0, r1
 80171b4:	4770      	bx	lr
	...

080171b8 <__env_lock>:
 80171b8:	4801      	ldr	r0, [pc, #4]	; (80171c0 <__env_lock+0x8>)
 80171ba:	f7fe bc9b 	b.w	8015af4 <__retarget_lock_acquire_recursive>
 80171be:	bf00      	nop
 80171c0:	20005d80 	.word	0x20005d80

080171c4 <__env_unlock>:
 80171c4:	4801      	ldr	r0, [pc, #4]	; (80171cc <__env_unlock+0x8>)
 80171c6:	f7fe bc97 	b.w	8015af8 <__retarget_lock_release_recursive>
 80171ca:	bf00      	nop
 80171cc:	20005d80 	.word	0x20005d80

080171d0 <_fstat_r>:
 80171d0:	b538      	push	{r3, r4, r5, lr}
 80171d2:	4d07      	ldr	r5, [pc, #28]	; (80171f0 <_fstat_r+0x20>)
 80171d4:	2300      	movs	r3, #0
 80171d6:	4604      	mov	r4, r0
 80171d8:	4608      	mov	r0, r1
 80171da:	4611      	mov	r1, r2
 80171dc:	602b      	str	r3, [r5, #0]
 80171de:	f7ec ffca 	bl	8004176 <_fstat>
 80171e2:	1c43      	adds	r3, r0, #1
 80171e4:	d102      	bne.n	80171ec <_fstat_r+0x1c>
 80171e6:	682b      	ldr	r3, [r5, #0]
 80171e8:	b103      	cbz	r3, 80171ec <_fstat_r+0x1c>
 80171ea:	6023      	str	r3, [r4, #0]
 80171ec:	bd38      	pop	{r3, r4, r5, pc}
 80171ee:	bf00      	nop
 80171f0:	20005d88 	.word	0x20005d88

080171f4 <_isatty_r>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4d06      	ldr	r5, [pc, #24]	; (8017210 <_isatty_r+0x1c>)
 80171f8:	2300      	movs	r3, #0
 80171fa:	4604      	mov	r4, r0
 80171fc:	4608      	mov	r0, r1
 80171fe:	602b      	str	r3, [r5, #0]
 8017200:	f7ec ffc9 	bl	8004196 <_isatty>
 8017204:	1c43      	adds	r3, r0, #1
 8017206:	d102      	bne.n	801720e <_isatty_r+0x1a>
 8017208:	682b      	ldr	r3, [r5, #0]
 801720a:	b103      	cbz	r3, 801720e <_isatty_r+0x1a>
 801720c:	6023      	str	r3, [r4, #0]
 801720e:	bd38      	pop	{r3, r4, r5, pc}
 8017210:	20005d88 	.word	0x20005d88

08017214 <_malloc_usable_size_r>:
 8017214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017218:	1f18      	subs	r0, r3, #4
 801721a:	2b00      	cmp	r3, #0
 801721c:	bfbc      	itt	lt
 801721e:	580b      	ldrlt	r3, [r1, r0]
 8017220:	18c0      	addlt	r0, r0, r3
 8017222:	4770      	bx	lr
 8017224:	0000      	movs	r0, r0
	...

08017228 <cos>:
 8017228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801722a:	ec53 2b10 	vmov	r2, r3, d0
 801722e:	4826      	ldr	r0, [pc, #152]	; (80172c8 <cos+0xa0>)
 8017230:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017234:	4281      	cmp	r1, r0
 8017236:	dc06      	bgt.n	8017246 <cos+0x1e>
 8017238:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80172c0 <cos+0x98>
 801723c:	b005      	add	sp, #20
 801723e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017242:	f001 bbf1 	b.w	8018a28 <__kernel_cos>
 8017246:	4821      	ldr	r0, [pc, #132]	; (80172cc <cos+0xa4>)
 8017248:	4281      	cmp	r1, r0
 801724a:	dd09      	ble.n	8017260 <cos+0x38>
 801724c:	ee10 0a10 	vmov	r0, s0
 8017250:	4619      	mov	r1, r3
 8017252:	f7e9 f839 	bl	80002c8 <__aeabi_dsub>
 8017256:	ec41 0b10 	vmov	d0, r0, r1
 801725a:	b005      	add	sp, #20
 801725c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017260:	4668      	mov	r0, sp
 8017262:	f001 f921 	bl	80184a8 <__ieee754_rem_pio2>
 8017266:	f000 0003 	and.w	r0, r0, #3
 801726a:	2801      	cmp	r0, #1
 801726c:	d00b      	beq.n	8017286 <cos+0x5e>
 801726e:	2802      	cmp	r0, #2
 8017270:	d016      	beq.n	80172a0 <cos+0x78>
 8017272:	b9e0      	cbnz	r0, 80172ae <cos+0x86>
 8017274:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017278:	ed9d 0b00 	vldr	d0, [sp]
 801727c:	f001 fbd4 	bl	8018a28 <__kernel_cos>
 8017280:	ec51 0b10 	vmov	r0, r1, d0
 8017284:	e7e7      	b.n	8017256 <cos+0x2e>
 8017286:	ed9d 1b02 	vldr	d1, [sp, #8]
 801728a:	ed9d 0b00 	vldr	d0, [sp]
 801728e:	f001 ffe3 	bl	8019258 <__kernel_sin>
 8017292:	ec53 2b10 	vmov	r2, r3, d0
 8017296:	ee10 0a10 	vmov	r0, s0
 801729a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801729e:	e7da      	b.n	8017256 <cos+0x2e>
 80172a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172a4:	ed9d 0b00 	vldr	d0, [sp]
 80172a8:	f001 fbbe 	bl	8018a28 <__kernel_cos>
 80172ac:	e7f1      	b.n	8017292 <cos+0x6a>
 80172ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172b2:	ed9d 0b00 	vldr	d0, [sp]
 80172b6:	2001      	movs	r0, #1
 80172b8:	f001 ffce 	bl	8019258 <__kernel_sin>
 80172bc:	e7e0      	b.n	8017280 <cos+0x58>
 80172be:	bf00      	nop
	...
 80172c8:	3fe921fb 	.word	0x3fe921fb
 80172cc:	7fefffff 	.word	0x7fefffff

080172d0 <sin>:
 80172d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172d2:	ec53 2b10 	vmov	r2, r3, d0
 80172d6:	4828      	ldr	r0, [pc, #160]	; (8017378 <sin+0xa8>)
 80172d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80172dc:	4281      	cmp	r1, r0
 80172de:	dc07      	bgt.n	80172f0 <sin+0x20>
 80172e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8017370 <sin+0xa0>
 80172e4:	2000      	movs	r0, #0
 80172e6:	b005      	add	sp, #20
 80172e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80172ec:	f001 bfb4 	b.w	8019258 <__kernel_sin>
 80172f0:	4822      	ldr	r0, [pc, #136]	; (801737c <sin+0xac>)
 80172f2:	4281      	cmp	r1, r0
 80172f4:	dd09      	ble.n	801730a <sin+0x3a>
 80172f6:	ee10 0a10 	vmov	r0, s0
 80172fa:	4619      	mov	r1, r3
 80172fc:	f7e8 ffe4 	bl	80002c8 <__aeabi_dsub>
 8017300:	ec41 0b10 	vmov	d0, r0, r1
 8017304:	b005      	add	sp, #20
 8017306:	f85d fb04 	ldr.w	pc, [sp], #4
 801730a:	4668      	mov	r0, sp
 801730c:	f001 f8cc 	bl	80184a8 <__ieee754_rem_pio2>
 8017310:	f000 0003 	and.w	r0, r0, #3
 8017314:	2801      	cmp	r0, #1
 8017316:	d00c      	beq.n	8017332 <sin+0x62>
 8017318:	2802      	cmp	r0, #2
 801731a:	d011      	beq.n	8017340 <sin+0x70>
 801731c:	b9f0      	cbnz	r0, 801735c <sin+0x8c>
 801731e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017322:	ed9d 0b00 	vldr	d0, [sp]
 8017326:	2001      	movs	r0, #1
 8017328:	f001 ff96 	bl	8019258 <__kernel_sin>
 801732c:	ec51 0b10 	vmov	r0, r1, d0
 8017330:	e7e6      	b.n	8017300 <sin+0x30>
 8017332:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017336:	ed9d 0b00 	vldr	d0, [sp]
 801733a:	f001 fb75 	bl	8018a28 <__kernel_cos>
 801733e:	e7f5      	b.n	801732c <sin+0x5c>
 8017340:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017344:	ed9d 0b00 	vldr	d0, [sp]
 8017348:	2001      	movs	r0, #1
 801734a:	f001 ff85 	bl	8019258 <__kernel_sin>
 801734e:	ec53 2b10 	vmov	r2, r3, d0
 8017352:	ee10 0a10 	vmov	r0, s0
 8017356:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801735a:	e7d1      	b.n	8017300 <sin+0x30>
 801735c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017360:	ed9d 0b00 	vldr	d0, [sp]
 8017364:	f001 fb60 	bl	8018a28 <__kernel_cos>
 8017368:	e7f1      	b.n	801734e <sin+0x7e>
 801736a:	bf00      	nop
 801736c:	f3af 8000 	nop.w
	...
 8017378:	3fe921fb 	.word	0x3fe921fb
 801737c:	7fefffff 	.word	0x7fefffff

08017380 <tan>:
 8017380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017382:	ec53 2b10 	vmov	r2, r3, d0
 8017386:	4816      	ldr	r0, [pc, #88]	; (80173e0 <tan+0x60>)
 8017388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801738c:	4281      	cmp	r1, r0
 801738e:	dc07      	bgt.n	80173a0 <tan+0x20>
 8017390:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80173d8 <tan+0x58>
 8017394:	2001      	movs	r0, #1
 8017396:	b005      	add	sp, #20
 8017398:	f85d eb04 	ldr.w	lr, [sp], #4
 801739c:	f002 b81c 	b.w	80193d8 <__kernel_tan>
 80173a0:	4810      	ldr	r0, [pc, #64]	; (80173e4 <tan+0x64>)
 80173a2:	4281      	cmp	r1, r0
 80173a4:	dd09      	ble.n	80173ba <tan+0x3a>
 80173a6:	ee10 0a10 	vmov	r0, s0
 80173aa:	4619      	mov	r1, r3
 80173ac:	f7e8 ff8c 	bl	80002c8 <__aeabi_dsub>
 80173b0:	ec41 0b10 	vmov	d0, r0, r1
 80173b4:	b005      	add	sp, #20
 80173b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80173ba:	4668      	mov	r0, sp
 80173bc:	f001 f874 	bl	80184a8 <__ieee754_rem_pio2>
 80173c0:	0040      	lsls	r0, r0, #1
 80173c2:	f000 0002 	and.w	r0, r0, #2
 80173c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173ca:	ed9d 0b00 	vldr	d0, [sp]
 80173ce:	f1c0 0001 	rsb	r0, r0, #1
 80173d2:	f002 f801 	bl	80193d8 <__kernel_tan>
 80173d6:	e7ed      	b.n	80173b4 <tan+0x34>
	...
 80173e0:	3fe921fb 	.word	0x3fe921fb
 80173e4:	7fefffff 	.word	0x7fefffff

080173e8 <acos>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	ed2d 8b02 	vpush	{d8}
 80173ee:	ec55 4b10 	vmov	r4, r5, d0
 80173f2:	f000 f8c9 	bl	8017588 <__ieee754_acos>
 80173f6:	4622      	mov	r2, r4
 80173f8:	462b      	mov	r3, r5
 80173fa:	4620      	mov	r0, r4
 80173fc:	4629      	mov	r1, r5
 80173fe:	eeb0 8a40 	vmov.f32	s16, s0
 8017402:	eef0 8a60 	vmov.f32	s17, s1
 8017406:	f7e9 fbb1 	bl	8000b6c <__aeabi_dcmpun>
 801740a:	b9a8      	cbnz	r0, 8017438 <acos+0x50>
 801740c:	ec45 4b10 	vmov	d0, r4, r5
 8017410:	f002 fa1c 	bl	801984c <fabs>
 8017414:	4b0c      	ldr	r3, [pc, #48]	; (8017448 <acos+0x60>)
 8017416:	ec51 0b10 	vmov	r0, r1, d0
 801741a:	2200      	movs	r2, #0
 801741c:	f7e9 fb9c 	bl	8000b58 <__aeabi_dcmpgt>
 8017420:	b150      	cbz	r0, 8017438 <acos+0x50>
 8017422:	f7f9 fce7 	bl	8010df4 <__errno>
 8017426:	ecbd 8b02 	vpop	{d8}
 801742a:	2321      	movs	r3, #33	; 0x21
 801742c:	6003      	str	r3, [r0, #0]
 801742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017432:	4806      	ldr	r0, [pc, #24]	; (801744c <acos+0x64>)
 8017434:	f7ff bdac 	b.w	8016f90 <nan>
 8017438:	eeb0 0a48 	vmov.f32	s0, s16
 801743c:	eef0 0a68 	vmov.f32	s1, s17
 8017440:	ecbd 8b02 	vpop	{d8}
 8017444:	bd38      	pop	{r3, r4, r5, pc}
 8017446:	bf00      	nop
 8017448:	3ff00000 	.word	0x3ff00000
 801744c:	08048756 	.word	0x08048756

08017450 <pow>:
 8017450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017452:	ed2d 8b02 	vpush	{d8}
 8017456:	eeb0 8a40 	vmov.f32	s16, s0
 801745a:	eef0 8a60 	vmov.f32	s17, s1
 801745e:	ec55 4b11 	vmov	r4, r5, d1
 8017462:	f000 faf1 	bl	8017a48 <__ieee754_pow>
 8017466:	4622      	mov	r2, r4
 8017468:	462b      	mov	r3, r5
 801746a:	4620      	mov	r0, r4
 801746c:	4629      	mov	r1, r5
 801746e:	ec57 6b10 	vmov	r6, r7, d0
 8017472:	f7e9 fb7b 	bl	8000b6c <__aeabi_dcmpun>
 8017476:	2800      	cmp	r0, #0
 8017478:	d13b      	bne.n	80174f2 <pow+0xa2>
 801747a:	ec51 0b18 	vmov	r0, r1, d8
 801747e:	2200      	movs	r2, #0
 8017480:	2300      	movs	r3, #0
 8017482:	f7e9 fb41 	bl	8000b08 <__aeabi_dcmpeq>
 8017486:	b1b8      	cbz	r0, 80174b8 <pow+0x68>
 8017488:	2200      	movs	r2, #0
 801748a:	2300      	movs	r3, #0
 801748c:	4620      	mov	r0, r4
 801748e:	4629      	mov	r1, r5
 8017490:	f7e9 fb3a 	bl	8000b08 <__aeabi_dcmpeq>
 8017494:	2800      	cmp	r0, #0
 8017496:	d146      	bne.n	8017526 <pow+0xd6>
 8017498:	ec45 4b10 	vmov	d0, r4, r5
 801749c:	f002 f9df 	bl	801985e <finite>
 80174a0:	b338      	cbz	r0, 80174f2 <pow+0xa2>
 80174a2:	2200      	movs	r2, #0
 80174a4:	2300      	movs	r3, #0
 80174a6:	4620      	mov	r0, r4
 80174a8:	4629      	mov	r1, r5
 80174aa:	f7e9 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80174ae:	b300      	cbz	r0, 80174f2 <pow+0xa2>
 80174b0:	f7f9 fca0 	bl	8010df4 <__errno>
 80174b4:	2322      	movs	r3, #34	; 0x22
 80174b6:	e01b      	b.n	80174f0 <pow+0xa0>
 80174b8:	ec47 6b10 	vmov	d0, r6, r7
 80174bc:	f002 f9cf 	bl	801985e <finite>
 80174c0:	b9e0      	cbnz	r0, 80174fc <pow+0xac>
 80174c2:	eeb0 0a48 	vmov.f32	s0, s16
 80174c6:	eef0 0a68 	vmov.f32	s1, s17
 80174ca:	f002 f9c8 	bl	801985e <finite>
 80174ce:	b1a8      	cbz	r0, 80174fc <pow+0xac>
 80174d0:	ec45 4b10 	vmov	d0, r4, r5
 80174d4:	f002 f9c3 	bl	801985e <finite>
 80174d8:	b180      	cbz	r0, 80174fc <pow+0xac>
 80174da:	4632      	mov	r2, r6
 80174dc:	463b      	mov	r3, r7
 80174de:	4630      	mov	r0, r6
 80174e0:	4639      	mov	r1, r7
 80174e2:	f7e9 fb43 	bl	8000b6c <__aeabi_dcmpun>
 80174e6:	2800      	cmp	r0, #0
 80174e8:	d0e2      	beq.n	80174b0 <pow+0x60>
 80174ea:	f7f9 fc83 	bl	8010df4 <__errno>
 80174ee:	2321      	movs	r3, #33	; 0x21
 80174f0:	6003      	str	r3, [r0, #0]
 80174f2:	ecbd 8b02 	vpop	{d8}
 80174f6:	ec47 6b10 	vmov	d0, r6, r7
 80174fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174fc:	2200      	movs	r2, #0
 80174fe:	2300      	movs	r3, #0
 8017500:	4630      	mov	r0, r6
 8017502:	4639      	mov	r1, r7
 8017504:	f7e9 fb00 	bl	8000b08 <__aeabi_dcmpeq>
 8017508:	2800      	cmp	r0, #0
 801750a:	d0f2      	beq.n	80174f2 <pow+0xa2>
 801750c:	eeb0 0a48 	vmov.f32	s0, s16
 8017510:	eef0 0a68 	vmov.f32	s1, s17
 8017514:	f002 f9a3 	bl	801985e <finite>
 8017518:	2800      	cmp	r0, #0
 801751a:	d0ea      	beq.n	80174f2 <pow+0xa2>
 801751c:	ec45 4b10 	vmov	d0, r4, r5
 8017520:	f002 f99d 	bl	801985e <finite>
 8017524:	e7c3      	b.n	80174ae <pow+0x5e>
 8017526:	4f01      	ldr	r7, [pc, #4]	; (801752c <pow+0xdc>)
 8017528:	2600      	movs	r6, #0
 801752a:	e7e2      	b.n	80174f2 <pow+0xa2>
 801752c:	3ff00000 	.word	0x3ff00000

08017530 <sqrt>:
 8017530:	b538      	push	{r3, r4, r5, lr}
 8017532:	ed2d 8b02 	vpush	{d8}
 8017536:	ec55 4b10 	vmov	r4, r5, d0
 801753a:	f001 f9c1 	bl	80188c0 <__ieee754_sqrt>
 801753e:	4622      	mov	r2, r4
 8017540:	462b      	mov	r3, r5
 8017542:	4620      	mov	r0, r4
 8017544:	4629      	mov	r1, r5
 8017546:	eeb0 8a40 	vmov.f32	s16, s0
 801754a:	eef0 8a60 	vmov.f32	s17, s1
 801754e:	f7e9 fb0d 	bl	8000b6c <__aeabi_dcmpun>
 8017552:	b990      	cbnz	r0, 801757a <sqrt+0x4a>
 8017554:	2200      	movs	r2, #0
 8017556:	2300      	movs	r3, #0
 8017558:	4620      	mov	r0, r4
 801755a:	4629      	mov	r1, r5
 801755c:	f7e9 fade 	bl	8000b1c <__aeabi_dcmplt>
 8017560:	b158      	cbz	r0, 801757a <sqrt+0x4a>
 8017562:	f7f9 fc47 	bl	8010df4 <__errno>
 8017566:	2321      	movs	r3, #33	; 0x21
 8017568:	6003      	str	r3, [r0, #0]
 801756a:	2200      	movs	r2, #0
 801756c:	2300      	movs	r3, #0
 801756e:	4610      	mov	r0, r2
 8017570:	4619      	mov	r1, r3
 8017572:	f7e9 f98b 	bl	800088c <__aeabi_ddiv>
 8017576:	ec41 0b18 	vmov	d8, r0, r1
 801757a:	eeb0 0a48 	vmov.f32	s0, s16
 801757e:	eef0 0a68 	vmov.f32	s1, s17
 8017582:	ecbd 8b02 	vpop	{d8}
 8017586:	bd38      	pop	{r3, r4, r5, pc}

08017588 <__ieee754_acos>:
 8017588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801758c:	ec55 4b10 	vmov	r4, r5, d0
 8017590:	49b7      	ldr	r1, [pc, #732]	; (8017870 <__ieee754_acos+0x2e8>)
 8017592:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017596:	428b      	cmp	r3, r1
 8017598:	dd1b      	ble.n	80175d2 <__ieee754_acos+0x4a>
 801759a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801759e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80175a2:	4323      	orrs	r3, r4
 80175a4:	d106      	bne.n	80175b4 <__ieee754_acos+0x2c>
 80175a6:	2d00      	cmp	r5, #0
 80175a8:	f300 8211 	bgt.w	80179ce <__ieee754_acos+0x446>
 80175ac:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8017808 <__ieee754_acos+0x280>
 80175b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b4:	ee10 2a10 	vmov	r2, s0
 80175b8:	462b      	mov	r3, r5
 80175ba:	ee10 0a10 	vmov	r0, s0
 80175be:	4629      	mov	r1, r5
 80175c0:	f7e8 fe82 	bl	80002c8 <__aeabi_dsub>
 80175c4:	4602      	mov	r2, r0
 80175c6:	460b      	mov	r3, r1
 80175c8:	f7e9 f960 	bl	800088c <__aeabi_ddiv>
 80175cc:	ec41 0b10 	vmov	d0, r0, r1
 80175d0:	e7ee      	b.n	80175b0 <__ieee754_acos+0x28>
 80175d2:	49a8      	ldr	r1, [pc, #672]	; (8017874 <__ieee754_acos+0x2ec>)
 80175d4:	428b      	cmp	r3, r1
 80175d6:	f300 8087 	bgt.w	80176e8 <__ieee754_acos+0x160>
 80175da:	4aa7      	ldr	r2, [pc, #668]	; (8017878 <__ieee754_acos+0x2f0>)
 80175dc:	4293      	cmp	r3, r2
 80175de:	f340 81f9 	ble.w	80179d4 <__ieee754_acos+0x44c>
 80175e2:	ee10 2a10 	vmov	r2, s0
 80175e6:	ee10 0a10 	vmov	r0, s0
 80175ea:	462b      	mov	r3, r5
 80175ec:	4629      	mov	r1, r5
 80175ee:	f7e9 f823 	bl	8000638 <__aeabi_dmul>
 80175f2:	a387      	add	r3, pc, #540	; (adr r3, 8017810 <__ieee754_acos+0x288>)
 80175f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f8:	4606      	mov	r6, r0
 80175fa:	460f      	mov	r7, r1
 80175fc:	f7e9 f81c 	bl	8000638 <__aeabi_dmul>
 8017600:	a385      	add	r3, pc, #532	; (adr r3, 8017818 <__ieee754_acos+0x290>)
 8017602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017606:	f7e8 fe61 	bl	80002cc <__adddf3>
 801760a:	4632      	mov	r2, r6
 801760c:	463b      	mov	r3, r7
 801760e:	f7e9 f813 	bl	8000638 <__aeabi_dmul>
 8017612:	a383      	add	r3, pc, #524	; (adr r3, 8017820 <__ieee754_acos+0x298>)
 8017614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017618:	f7e8 fe56 	bl	80002c8 <__aeabi_dsub>
 801761c:	4632      	mov	r2, r6
 801761e:	463b      	mov	r3, r7
 8017620:	f7e9 f80a 	bl	8000638 <__aeabi_dmul>
 8017624:	a380      	add	r3, pc, #512	; (adr r3, 8017828 <__ieee754_acos+0x2a0>)
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	f7e8 fe4f 	bl	80002cc <__adddf3>
 801762e:	4632      	mov	r2, r6
 8017630:	463b      	mov	r3, r7
 8017632:	f7e9 f801 	bl	8000638 <__aeabi_dmul>
 8017636:	a37e      	add	r3, pc, #504	; (adr r3, 8017830 <__ieee754_acos+0x2a8>)
 8017638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763c:	f7e8 fe44 	bl	80002c8 <__aeabi_dsub>
 8017640:	4632      	mov	r2, r6
 8017642:	463b      	mov	r3, r7
 8017644:	f7e8 fff8 	bl	8000638 <__aeabi_dmul>
 8017648:	a37b      	add	r3, pc, #492	; (adr r3, 8017838 <__ieee754_acos+0x2b0>)
 801764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764e:	f7e8 fe3d 	bl	80002cc <__adddf3>
 8017652:	4632      	mov	r2, r6
 8017654:	463b      	mov	r3, r7
 8017656:	f7e8 ffef 	bl	8000638 <__aeabi_dmul>
 801765a:	a379      	add	r3, pc, #484	; (adr r3, 8017840 <__ieee754_acos+0x2b8>)
 801765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017660:	4680      	mov	r8, r0
 8017662:	4689      	mov	r9, r1
 8017664:	4630      	mov	r0, r6
 8017666:	4639      	mov	r1, r7
 8017668:	f7e8 ffe6 	bl	8000638 <__aeabi_dmul>
 801766c:	a376      	add	r3, pc, #472	; (adr r3, 8017848 <__ieee754_acos+0x2c0>)
 801766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017672:	f7e8 fe29 	bl	80002c8 <__aeabi_dsub>
 8017676:	4632      	mov	r2, r6
 8017678:	463b      	mov	r3, r7
 801767a:	f7e8 ffdd 	bl	8000638 <__aeabi_dmul>
 801767e:	a374      	add	r3, pc, #464	; (adr r3, 8017850 <__ieee754_acos+0x2c8>)
 8017680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017684:	f7e8 fe22 	bl	80002cc <__adddf3>
 8017688:	4632      	mov	r2, r6
 801768a:	463b      	mov	r3, r7
 801768c:	f7e8 ffd4 	bl	8000638 <__aeabi_dmul>
 8017690:	a371      	add	r3, pc, #452	; (adr r3, 8017858 <__ieee754_acos+0x2d0>)
 8017692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017696:	f7e8 fe17 	bl	80002c8 <__aeabi_dsub>
 801769a:	4632      	mov	r2, r6
 801769c:	463b      	mov	r3, r7
 801769e:	f7e8 ffcb 	bl	8000638 <__aeabi_dmul>
 80176a2:	4b76      	ldr	r3, [pc, #472]	; (801787c <__ieee754_acos+0x2f4>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	f7e8 fe11 	bl	80002cc <__adddf3>
 80176aa:	4602      	mov	r2, r0
 80176ac:	460b      	mov	r3, r1
 80176ae:	4640      	mov	r0, r8
 80176b0:	4649      	mov	r1, r9
 80176b2:	f7e9 f8eb 	bl	800088c <__aeabi_ddiv>
 80176b6:	4622      	mov	r2, r4
 80176b8:	462b      	mov	r3, r5
 80176ba:	f7e8 ffbd 	bl	8000638 <__aeabi_dmul>
 80176be:	4602      	mov	r2, r0
 80176c0:	460b      	mov	r3, r1
 80176c2:	a167      	add	r1, pc, #412	; (adr r1, 8017860 <__ieee754_acos+0x2d8>)
 80176c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176c8:	f7e8 fdfe 	bl	80002c8 <__aeabi_dsub>
 80176cc:	4602      	mov	r2, r0
 80176ce:	460b      	mov	r3, r1
 80176d0:	4620      	mov	r0, r4
 80176d2:	4629      	mov	r1, r5
 80176d4:	f7e8 fdf8 	bl	80002c8 <__aeabi_dsub>
 80176d8:	4602      	mov	r2, r0
 80176da:	460b      	mov	r3, r1
 80176dc:	a162      	add	r1, pc, #392	; (adr r1, 8017868 <__ieee754_acos+0x2e0>)
 80176de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176e2:	f7e8 fdf1 	bl	80002c8 <__aeabi_dsub>
 80176e6:	e771      	b.n	80175cc <__ieee754_acos+0x44>
 80176e8:	2d00      	cmp	r5, #0
 80176ea:	f280 80cb 	bge.w	8017884 <__ieee754_acos+0x2fc>
 80176ee:	ee10 0a10 	vmov	r0, s0
 80176f2:	4b62      	ldr	r3, [pc, #392]	; (801787c <__ieee754_acos+0x2f4>)
 80176f4:	2200      	movs	r2, #0
 80176f6:	4629      	mov	r1, r5
 80176f8:	f7e8 fde8 	bl	80002cc <__adddf3>
 80176fc:	4b60      	ldr	r3, [pc, #384]	; (8017880 <__ieee754_acos+0x2f8>)
 80176fe:	2200      	movs	r2, #0
 8017700:	f7e8 ff9a 	bl	8000638 <__aeabi_dmul>
 8017704:	a342      	add	r3, pc, #264	; (adr r3, 8017810 <__ieee754_acos+0x288>)
 8017706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801770a:	4604      	mov	r4, r0
 801770c:	460d      	mov	r5, r1
 801770e:	f7e8 ff93 	bl	8000638 <__aeabi_dmul>
 8017712:	a341      	add	r3, pc, #260	; (adr r3, 8017818 <__ieee754_acos+0x290>)
 8017714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017718:	f7e8 fdd8 	bl	80002cc <__adddf3>
 801771c:	4622      	mov	r2, r4
 801771e:	462b      	mov	r3, r5
 8017720:	f7e8 ff8a 	bl	8000638 <__aeabi_dmul>
 8017724:	a33e      	add	r3, pc, #248	; (adr r3, 8017820 <__ieee754_acos+0x298>)
 8017726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772a:	f7e8 fdcd 	bl	80002c8 <__aeabi_dsub>
 801772e:	4622      	mov	r2, r4
 8017730:	462b      	mov	r3, r5
 8017732:	f7e8 ff81 	bl	8000638 <__aeabi_dmul>
 8017736:	a33c      	add	r3, pc, #240	; (adr r3, 8017828 <__ieee754_acos+0x2a0>)
 8017738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773c:	f7e8 fdc6 	bl	80002cc <__adddf3>
 8017740:	4622      	mov	r2, r4
 8017742:	462b      	mov	r3, r5
 8017744:	f7e8 ff78 	bl	8000638 <__aeabi_dmul>
 8017748:	a339      	add	r3, pc, #228	; (adr r3, 8017830 <__ieee754_acos+0x2a8>)
 801774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774e:	f7e8 fdbb 	bl	80002c8 <__aeabi_dsub>
 8017752:	4622      	mov	r2, r4
 8017754:	462b      	mov	r3, r5
 8017756:	f7e8 ff6f 	bl	8000638 <__aeabi_dmul>
 801775a:	a337      	add	r3, pc, #220	; (adr r3, 8017838 <__ieee754_acos+0x2b0>)
 801775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017760:	f7e8 fdb4 	bl	80002cc <__adddf3>
 8017764:	4622      	mov	r2, r4
 8017766:	462b      	mov	r3, r5
 8017768:	f7e8 ff66 	bl	8000638 <__aeabi_dmul>
 801776c:	ec45 4b10 	vmov	d0, r4, r5
 8017770:	4680      	mov	r8, r0
 8017772:	4689      	mov	r9, r1
 8017774:	f001 f8a4 	bl	80188c0 <__ieee754_sqrt>
 8017778:	a331      	add	r3, pc, #196	; (adr r3, 8017840 <__ieee754_acos+0x2b8>)
 801777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801777e:	4620      	mov	r0, r4
 8017780:	4629      	mov	r1, r5
 8017782:	ec57 6b10 	vmov	r6, r7, d0
 8017786:	f7e8 ff57 	bl	8000638 <__aeabi_dmul>
 801778a:	a32f      	add	r3, pc, #188	; (adr r3, 8017848 <__ieee754_acos+0x2c0>)
 801778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017790:	f7e8 fd9a 	bl	80002c8 <__aeabi_dsub>
 8017794:	4622      	mov	r2, r4
 8017796:	462b      	mov	r3, r5
 8017798:	f7e8 ff4e 	bl	8000638 <__aeabi_dmul>
 801779c:	a32c      	add	r3, pc, #176	; (adr r3, 8017850 <__ieee754_acos+0x2c8>)
 801779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177a2:	f7e8 fd93 	bl	80002cc <__adddf3>
 80177a6:	4622      	mov	r2, r4
 80177a8:	462b      	mov	r3, r5
 80177aa:	f7e8 ff45 	bl	8000638 <__aeabi_dmul>
 80177ae:	a32a      	add	r3, pc, #168	; (adr r3, 8017858 <__ieee754_acos+0x2d0>)
 80177b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177b4:	f7e8 fd88 	bl	80002c8 <__aeabi_dsub>
 80177b8:	4622      	mov	r2, r4
 80177ba:	462b      	mov	r3, r5
 80177bc:	f7e8 ff3c 	bl	8000638 <__aeabi_dmul>
 80177c0:	4b2e      	ldr	r3, [pc, #184]	; (801787c <__ieee754_acos+0x2f4>)
 80177c2:	2200      	movs	r2, #0
 80177c4:	f7e8 fd82 	bl	80002cc <__adddf3>
 80177c8:	4602      	mov	r2, r0
 80177ca:	460b      	mov	r3, r1
 80177cc:	4640      	mov	r0, r8
 80177ce:	4649      	mov	r1, r9
 80177d0:	f7e9 f85c 	bl	800088c <__aeabi_ddiv>
 80177d4:	4632      	mov	r2, r6
 80177d6:	463b      	mov	r3, r7
 80177d8:	f7e8 ff2e 	bl	8000638 <__aeabi_dmul>
 80177dc:	a320      	add	r3, pc, #128	; (adr r3, 8017860 <__ieee754_acos+0x2d8>)
 80177de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e2:	f7e8 fd71 	bl	80002c8 <__aeabi_dsub>
 80177e6:	4632      	mov	r2, r6
 80177e8:	463b      	mov	r3, r7
 80177ea:	f7e8 fd6f 	bl	80002cc <__adddf3>
 80177ee:	4602      	mov	r2, r0
 80177f0:	460b      	mov	r3, r1
 80177f2:	f7e8 fd6b 	bl	80002cc <__adddf3>
 80177f6:	4602      	mov	r2, r0
 80177f8:	460b      	mov	r3, r1
 80177fa:	a103      	add	r1, pc, #12	; (adr r1, 8017808 <__ieee754_acos+0x280>)
 80177fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017800:	e76f      	b.n	80176e2 <__ieee754_acos+0x15a>
 8017802:	bf00      	nop
 8017804:	f3af 8000 	nop.w
 8017808:	54442d18 	.word	0x54442d18
 801780c:	400921fb 	.word	0x400921fb
 8017810:	0dfdf709 	.word	0x0dfdf709
 8017814:	3f023de1 	.word	0x3f023de1
 8017818:	7501b288 	.word	0x7501b288
 801781c:	3f49efe0 	.word	0x3f49efe0
 8017820:	b5688f3b 	.word	0xb5688f3b
 8017824:	3fa48228 	.word	0x3fa48228
 8017828:	0e884455 	.word	0x0e884455
 801782c:	3fc9c155 	.word	0x3fc9c155
 8017830:	03eb6f7d 	.word	0x03eb6f7d
 8017834:	3fd4d612 	.word	0x3fd4d612
 8017838:	55555555 	.word	0x55555555
 801783c:	3fc55555 	.word	0x3fc55555
 8017840:	b12e9282 	.word	0xb12e9282
 8017844:	3fb3b8c5 	.word	0x3fb3b8c5
 8017848:	1b8d0159 	.word	0x1b8d0159
 801784c:	3fe6066c 	.word	0x3fe6066c
 8017850:	9c598ac8 	.word	0x9c598ac8
 8017854:	40002ae5 	.word	0x40002ae5
 8017858:	1c8a2d4b 	.word	0x1c8a2d4b
 801785c:	40033a27 	.word	0x40033a27
 8017860:	33145c07 	.word	0x33145c07
 8017864:	3c91a626 	.word	0x3c91a626
 8017868:	54442d18 	.word	0x54442d18
 801786c:	3ff921fb 	.word	0x3ff921fb
 8017870:	3fefffff 	.word	0x3fefffff
 8017874:	3fdfffff 	.word	0x3fdfffff
 8017878:	3c600000 	.word	0x3c600000
 801787c:	3ff00000 	.word	0x3ff00000
 8017880:	3fe00000 	.word	0x3fe00000
 8017884:	ee10 2a10 	vmov	r2, s0
 8017888:	462b      	mov	r3, r5
 801788a:	496d      	ldr	r1, [pc, #436]	; (8017a40 <__ieee754_acos+0x4b8>)
 801788c:	2000      	movs	r0, #0
 801788e:	f7e8 fd1b 	bl	80002c8 <__aeabi_dsub>
 8017892:	4b6c      	ldr	r3, [pc, #432]	; (8017a44 <__ieee754_acos+0x4bc>)
 8017894:	2200      	movs	r2, #0
 8017896:	f7e8 fecf 	bl	8000638 <__aeabi_dmul>
 801789a:	4604      	mov	r4, r0
 801789c:	460d      	mov	r5, r1
 801789e:	ec45 4b10 	vmov	d0, r4, r5
 80178a2:	f001 f80d 	bl	80188c0 <__ieee754_sqrt>
 80178a6:	a34e      	add	r3, pc, #312	; (adr r3, 80179e0 <__ieee754_acos+0x458>)
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	4620      	mov	r0, r4
 80178ae:	4629      	mov	r1, r5
 80178b0:	ec59 8b10 	vmov	r8, r9, d0
 80178b4:	f7e8 fec0 	bl	8000638 <__aeabi_dmul>
 80178b8:	a34b      	add	r3, pc, #300	; (adr r3, 80179e8 <__ieee754_acos+0x460>)
 80178ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178be:	f7e8 fd05 	bl	80002cc <__adddf3>
 80178c2:	4622      	mov	r2, r4
 80178c4:	462b      	mov	r3, r5
 80178c6:	f7e8 feb7 	bl	8000638 <__aeabi_dmul>
 80178ca:	a349      	add	r3, pc, #292	; (adr r3, 80179f0 <__ieee754_acos+0x468>)
 80178cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d0:	f7e8 fcfa 	bl	80002c8 <__aeabi_dsub>
 80178d4:	4622      	mov	r2, r4
 80178d6:	462b      	mov	r3, r5
 80178d8:	f7e8 feae 	bl	8000638 <__aeabi_dmul>
 80178dc:	a346      	add	r3, pc, #280	; (adr r3, 80179f8 <__ieee754_acos+0x470>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	f7e8 fcf3 	bl	80002cc <__adddf3>
 80178e6:	4622      	mov	r2, r4
 80178e8:	462b      	mov	r3, r5
 80178ea:	f7e8 fea5 	bl	8000638 <__aeabi_dmul>
 80178ee:	a344      	add	r3, pc, #272	; (adr r3, 8017a00 <__ieee754_acos+0x478>)
 80178f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f4:	f7e8 fce8 	bl	80002c8 <__aeabi_dsub>
 80178f8:	4622      	mov	r2, r4
 80178fa:	462b      	mov	r3, r5
 80178fc:	f7e8 fe9c 	bl	8000638 <__aeabi_dmul>
 8017900:	a341      	add	r3, pc, #260	; (adr r3, 8017a08 <__ieee754_acos+0x480>)
 8017902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017906:	f7e8 fce1 	bl	80002cc <__adddf3>
 801790a:	4622      	mov	r2, r4
 801790c:	462b      	mov	r3, r5
 801790e:	f7e8 fe93 	bl	8000638 <__aeabi_dmul>
 8017912:	a33f      	add	r3, pc, #252	; (adr r3, 8017a10 <__ieee754_acos+0x488>)
 8017914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017918:	4682      	mov	sl, r0
 801791a:	468b      	mov	fp, r1
 801791c:	4620      	mov	r0, r4
 801791e:	4629      	mov	r1, r5
 8017920:	f7e8 fe8a 	bl	8000638 <__aeabi_dmul>
 8017924:	a33c      	add	r3, pc, #240	; (adr r3, 8017a18 <__ieee754_acos+0x490>)
 8017926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801792a:	f7e8 fccd 	bl	80002c8 <__aeabi_dsub>
 801792e:	4622      	mov	r2, r4
 8017930:	462b      	mov	r3, r5
 8017932:	f7e8 fe81 	bl	8000638 <__aeabi_dmul>
 8017936:	a33a      	add	r3, pc, #232	; (adr r3, 8017a20 <__ieee754_acos+0x498>)
 8017938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793c:	f7e8 fcc6 	bl	80002cc <__adddf3>
 8017940:	4622      	mov	r2, r4
 8017942:	462b      	mov	r3, r5
 8017944:	f7e8 fe78 	bl	8000638 <__aeabi_dmul>
 8017948:	a337      	add	r3, pc, #220	; (adr r3, 8017a28 <__ieee754_acos+0x4a0>)
 801794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801794e:	f7e8 fcbb 	bl	80002c8 <__aeabi_dsub>
 8017952:	4622      	mov	r2, r4
 8017954:	462b      	mov	r3, r5
 8017956:	f7e8 fe6f 	bl	8000638 <__aeabi_dmul>
 801795a:	4b39      	ldr	r3, [pc, #228]	; (8017a40 <__ieee754_acos+0x4b8>)
 801795c:	2200      	movs	r2, #0
 801795e:	f7e8 fcb5 	bl	80002cc <__adddf3>
 8017962:	4602      	mov	r2, r0
 8017964:	460b      	mov	r3, r1
 8017966:	4650      	mov	r0, sl
 8017968:	4659      	mov	r1, fp
 801796a:	f7e8 ff8f 	bl	800088c <__aeabi_ddiv>
 801796e:	4642      	mov	r2, r8
 8017970:	464b      	mov	r3, r9
 8017972:	f7e8 fe61 	bl	8000638 <__aeabi_dmul>
 8017976:	2600      	movs	r6, #0
 8017978:	4682      	mov	sl, r0
 801797a:	468b      	mov	fp, r1
 801797c:	4632      	mov	r2, r6
 801797e:	464b      	mov	r3, r9
 8017980:	4630      	mov	r0, r6
 8017982:	4649      	mov	r1, r9
 8017984:	f7e8 fe58 	bl	8000638 <__aeabi_dmul>
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	4620      	mov	r0, r4
 801798e:	4629      	mov	r1, r5
 8017990:	f7e8 fc9a 	bl	80002c8 <__aeabi_dsub>
 8017994:	4632      	mov	r2, r6
 8017996:	4604      	mov	r4, r0
 8017998:	460d      	mov	r5, r1
 801799a:	464b      	mov	r3, r9
 801799c:	4640      	mov	r0, r8
 801799e:	4649      	mov	r1, r9
 80179a0:	f7e8 fc94 	bl	80002cc <__adddf3>
 80179a4:	4602      	mov	r2, r0
 80179a6:	460b      	mov	r3, r1
 80179a8:	4620      	mov	r0, r4
 80179aa:	4629      	mov	r1, r5
 80179ac:	f7e8 ff6e 	bl	800088c <__aeabi_ddiv>
 80179b0:	4602      	mov	r2, r0
 80179b2:	460b      	mov	r3, r1
 80179b4:	4650      	mov	r0, sl
 80179b6:	4659      	mov	r1, fp
 80179b8:	f7e8 fc88 	bl	80002cc <__adddf3>
 80179bc:	4632      	mov	r2, r6
 80179be:	464b      	mov	r3, r9
 80179c0:	f7e8 fc84 	bl	80002cc <__adddf3>
 80179c4:	4602      	mov	r2, r0
 80179c6:	460b      	mov	r3, r1
 80179c8:	f7e8 fc80 	bl	80002cc <__adddf3>
 80179cc:	e5fe      	b.n	80175cc <__ieee754_acos+0x44>
 80179ce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8017a30 <__ieee754_acos+0x4a8>
 80179d2:	e5ed      	b.n	80175b0 <__ieee754_acos+0x28>
 80179d4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8017a38 <__ieee754_acos+0x4b0>
 80179d8:	e5ea      	b.n	80175b0 <__ieee754_acos+0x28>
 80179da:	bf00      	nop
 80179dc:	f3af 8000 	nop.w
 80179e0:	0dfdf709 	.word	0x0dfdf709
 80179e4:	3f023de1 	.word	0x3f023de1
 80179e8:	7501b288 	.word	0x7501b288
 80179ec:	3f49efe0 	.word	0x3f49efe0
 80179f0:	b5688f3b 	.word	0xb5688f3b
 80179f4:	3fa48228 	.word	0x3fa48228
 80179f8:	0e884455 	.word	0x0e884455
 80179fc:	3fc9c155 	.word	0x3fc9c155
 8017a00:	03eb6f7d 	.word	0x03eb6f7d
 8017a04:	3fd4d612 	.word	0x3fd4d612
 8017a08:	55555555 	.word	0x55555555
 8017a0c:	3fc55555 	.word	0x3fc55555
 8017a10:	b12e9282 	.word	0xb12e9282
 8017a14:	3fb3b8c5 	.word	0x3fb3b8c5
 8017a18:	1b8d0159 	.word	0x1b8d0159
 8017a1c:	3fe6066c 	.word	0x3fe6066c
 8017a20:	9c598ac8 	.word	0x9c598ac8
 8017a24:	40002ae5 	.word	0x40002ae5
 8017a28:	1c8a2d4b 	.word	0x1c8a2d4b
 8017a2c:	40033a27 	.word	0x40033a27
	...
 8017a38:	54442d18 	.word	0x54442d18
 8017a3c:	3ff921fb 	.word	0x3ff921fb
 8017a40:	3ff00000 	.word	0x3ff00000
 8017a44:	3fe00000 	.word	0x3fe00000

08017a48 <__ieee754_pow>:
 8017a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a4c:	ed2d 8b06 	vpush	{d8-d10}
 8017a50:	b089      	sub	sp, #36	; 0x24
 8017a52:	ed8d 1b00 	vstr	d1, [sp]
 8017a56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017a5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017a5e:	ea58 0102 	orrs.w	r1, r8, r2
 8017a62:	ec57 6b10 	vmov	r6, r7, d0
 8017a66:	d115      	bne.n	8017a94 <__ieee754_pow+0x4c>
 8017a68:	19b3      	adds	r3, r6, r6
 8017a6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8017a6e:	4152      	adcs	r2, r2
 8017a70:	4299      	cmp	r1, r3
 8017a72:	4b89      	ldr	r3, [pc, #548]	; (8017c98 <__ieee754_pow+0x250>)
 8017a74:	4193      	sbcs	r3, r2
 8017a76:	f080 84d2 	bcs.w	801841e <__ieee754_pow+0x9d6>
 8017a7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a7e:	4630      	mov	r0, r6
 8017a80:	4639      	mov	r1, r7
 8017a82:	f7e8 fc23 	bl	80002cc <__adddf3>
 8017a86:	ec41 0b10 	vmov	d0, r0, r1
 8017a8a:	b009      	add	sp, #36	; 0x24
 8017a8c:	ecbd 8b06 	vpop	{d8-d10}
 8017a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a94:	4b81      	ldr	r3, [pc, #516]	; (8017c9c <__ieee754_pow+0x254>)
 8017a96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017a9a:	429c      	cmp	r4, r3
 8017a9c:	ee10 aa10 	vmov	sl, s0
 8017aa0:	463d      	mov	r5, r7
 8017aa2:	dc06      	bgt.n	8017ab2 <__ieee754_pow+0x6a>
 8017aa4:	d101      	bne.n	8017aaa <__ieee754_pow+0x62>
 8017aa6:	2e00      	cmp	r6, #0
 8017aa8:	d1e7      	bne.n	8017a7a <__ieee754_pow+0x32>
 8017aaa:	4598      	cmp	r8, r3
 8017aac:	dc01      	bgt.n	8017ab2 <__ieee754_pow+0x6a>
 8017aae:	d10f      	bne.n	8017ad0 <__ieee754_pow+0x88>
 8017ab0:	b172      	cbz	r2, 8017ad0 <__ieee754_pow+0x88>
 8017ab2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8017ab6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8017aba:	ea55 050a 	orrs.w	r5, r5, sl
 8017abe:	d1dc      	bne.n	8017a7a <__ieee754_pow+0x32>
 8017ac0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017ac4:	18db      	adds	r3, r3, r3
 8017ac6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8017aca:	4152      	adcs	r2, r2
 8017acc:	429d      	cmp	r5, r3
 8017ace:	e7d0      	b.n	8017a72 <__ieee754_pow+0x2a>
 8017ad0:	2d00      	cmp	r5, #0
 8017ad2:	da3b      	bge.n	8017b4c <__ieee754_pow+0x104>
 8017ad4:	4b72      	ldr	r3, [pc, #456]	; (8017ca0 <__ieee754_pow+0x258>)
 8017ad6:	4598      	cmp	r8, r3
 8017ad8:	dc51      	bgt.n	8017b7e <__ieee754_pow+0x136>
 8017ada:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017ade:	4598      	cmp	r8, r3
 8017ae0:	f340 84ac 	ble.w	801843c <__ieee754_pow+0x9f4>
 8017ae4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017ae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017aec:	2b14      	cmp	r3, #20
 8017aee:	dd0f      	ble.n	8017b10 <__ieee754_pow+0xc8>
 8017af0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017af4:	fa22 f103 	lsr.w	r1, r2, r3
 8017af8:	fa01 f303 	lsl.w	r3, r1, r3
 8017afc:	4293      	cmp	r3, r2
 8017afe:	f040 849d 	bne.w	801843c <__ieee754_pow+0x9f4>
 8017b02:	f001 0101 	and.w	r1, r1, #1
 8017b06:	f1c1 0302 	rsb	r3, r1, #2
 8017b0a:	9304      	str	r3, [sp, #16]
 8017b0c:	b182      	cbz	r2, 8017b30 <__ieee754_pow+0xe8>
 8017b0e:	e05f      	b.n	8017bd0 <__ieee754_pow+0x188>
 8017b10:	2a00      	cmp	r2, #0
 8017b12:	d15b      	bne.n	8017bcc <__ieee754_pow+0x184>
 8017b14:	f1c3 0314 	rsb	r3, r3, #20
 8017b18:	fa48 f103 	asr.w	r1, r8, r3
 8017b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8017b20:	4543      	cmp	r3, r8
 8017b22:	f040 8488 	bne.w	8018436 <__ieee754_pow+0x9ee>
 8017b26:	f001 0101 	and.w	r1, r1, #1
 8017b2a:	f1c1 0302 	rsb	r3, r1, #2
 8017b2e:	9304      	str	r3, [sp, #16]
 8017b30:	4b5c      	ldr	r3, [pc, #368]	; (8017ca4 <__ieee754_pow+0x25c>)
 8017b32:	4598      	cmp	r8, r3
 8017b34:	d132      	bne.n	8017b9c <__ieee754_pow+0x154>
 8017b36:	f1b9 0f00 	cmp.w	r9, #0
 8017b3a:	f280 8478 	bge.w	801842e <__ieee754_pow+0x9e6>
 8017b3e:	4959      	ldr	r1, [pc, #356]	; (8017ca4 <__ieee754_pow+0x25c>)
 8017b40:	4632      	mov	r2, r6
 8017b42:	463b      	mov	r3, r7
 8017b44:	2000      	movs	r0, #0
 8017b46:	f7e8 fea1 	bl	800088c <__aeabi_ddiv>
 8017b4a:	e79c      	b.n	8017a86 <__ieee754_pow+0x3e>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	9304      	str	r3, [sp, #16]
 8017b50:	2a00      	cmp	r2, #0
 8017b52:	d13d      	bne.n	8017bd0 <__ieee754_pow+0x188>
 8017b54:	4b51      	ldr	r3, [pc, #324]	; (8017c9c <__ieee754_pow+0x254>)
 8017b56:	4598      	cmp	r8, r3
 8017b58:	d1ea      	bne.n	8017b30 <__ieee754_pow+0xe8>
 8017b5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017b5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017b62:	ea53 030a 	orrs.w	r3, r3, sl
 8017b66:	f000 845a 	beq.w	801841e <__ieee754_pow+0x9d6>
 8017b6a:	4b4f      	ldr	r3, [pc, #316]	; (8017ca8 <__ieee754_pow+0x260>)
 8017b6c:	429c      	cmp	r4, r3
 8017b6e:	dd08      	ble.n	8017b82 <__ieee754_pow+0x13a>
 8017b70:	f1b9 0f00 	cmp.w	r9, #0
 8017b74:	f2c0 8457 	blt.w	8018426 <__ieee754_pow+0x9de>
 8017b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b7c:	e783      	b.n	8017a86 <__ieee754_pow+0x3e>
 8017b7e:	2302      	movs	r3, #2
 8017b80:	e7e5      	b.n	8017b4e <__ieee754_pow+0x106>
 8017b82:	f1b9 0f00 	cmp.w	r9, #0
 8017b86:	f04f 0000 	mov.w	r0, #0
 8017b8a:	f04f 0100 	mov.w	r1, #0
 8017b8e:	f6bf af7a 	bge.w	8017a86 <__ieee754_pow+0x3e>
 8017b92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017b96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017b9a:	e774      	b.n	8017a86 <__ieee754_pow+0x3e>
 8017b9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017ba0:	d106      	bne.n	8017bb0 <__ieee754_pow+0x168>
 8017ba2:	4632      	mov	r2, r6
 8017ba4:	463b      	mov	r3, r7
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	4639      	mov	r1, r7
 8017baa:	f7e8 fd45 	bl	8000638 <__aeabi_dmul>
 8017bae:	e76a      	b.n	8017a86 <__ieee754_pow+0x3e>
 8017bb0:	4b3e      	ldr	r3, [pc, #248]	; (8017cac <__ieee754_pow+0x264>)
 8017bb2:	4599      	cmp	r9, r3
 8017bb4:	d10c      	bne.n	8017bd0 <__ieee754_pow+0x188>
 8017bb6:	2d00      	cmp	r5, #0
 8017bb8:	db0a      	blt.n	8017bd0 <__ieee754_pow+0x188>
 8017bba:	ec47 6b10 	vmov	d0, r6, r7
 8017bbe:	b009      	add	sp, #36	; 0x24
 8017bc0:	ecbd 8b06 	vpop	{d8-d10}
 8017bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc8:	f000 be7a 	b.w	80188c0 <__ieee754_sqrt>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	9304      	str	r3, [sp, #16]
 8017bd0:	ec47 6b10 	vmov	d0, r6, r7
 8017bd4:	f001 fe3a 	bl	801984c <fabs>
 8017bd8:	ec51 0b10 	vmov	r0, r1, d0
 8017bdc:	f1ba 0f00 	cmp.w	sl, #0
 8017be0:	d129      	bne.n	8017c36 <__ieee754_pow+0x1ee>
 8017be2:	b124      	cbz	r4, 8017bee <__ieee754_pow+0x1a6>
 8017be4:	4b2f      	ldr	r3, [pc, #188]	; (8017ca4 <__ieee754_pow+0x25c>)
 8017be6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d123      	bne.n	8017c36 <__ieee754_pow+0x1ee>
 8017bee:	f1b9 0f00 	cmp.w	r9, #0
 8017bf2:	da05      	bge.n	8017c00 <__ieee754_pow+0x1b8>
 8017bf4:	4602      	mov	r2, r0
 8017bf6:	460b      	mov	r3, r1
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	492a      	ldr	r1, [pc, #168]	; (8017ca4 <__ieee754_pow+0x25c>)
 8017bfc:	f7e8 fe46 	bl	800088c <__aeabi_ddiv>
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	f6bf af40 	bge.w	8017a86 <__ieee754_pow+0x3e>
 8017c06:	9b04      	ldr	r3, [sp, #16]
 8017c08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017c0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017c10:	4323      	orrs	r3, r4
 8017c12:	d108      	bne.n	8017c26 <__ieee754_pow+0x1de>
 8017c14:	4602      	mov	r2, r0
 8017c16:	460b      	mov	r3, r1
 8017c18:	4610      	mov	r0, r2
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	f7e8 fb54 	bl	80002c8 <__aeabi_dsub>
 8017c20:	4602      	mov	r2, r0
 8017c22:	460b      	mov	r3, r1
 8017c24:	e78f      	b.n	8017b46 <__ieee754_pow+0xfe>
 8017c26:	9b04      	ldr	r3, [sp, #16]
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	f47f af2c 	bne.w	8017a86 <__ieee754_pow+0x3e>
 8017c2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c32:	4619      	mov	r1, r3
 8017c34:	e727      	b.n	8017a86 <__ieee754_pow+0x3e>
 8017c36:	0feb      	lsrs	r3, r5, #31
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	9306      	str	r3, [sp, #24]
 8017c3c:	9a06      	ldr	r2, [sp, #24]
 8017c3e:	9b04      	ldr	r3, [sp, #16]
 8017c40:	4313      	orrs	r3, r2
 8017c42:	d102      	bne.n	8017c4a <__ieee754_pow+0x202>
 8017c44:	4632      	mov	r2, r6
 8017c46:	463b      	mov	r3, r7
 8017c48:	e7e6      	b.n	8017c18 <__ieee754_pow+0x1d0>
 8017c4a:	4b19      	ldr	r3, [pc, #100]	; (8017cb0 <__ieee754_pow+0x268>)
 8017c4c:	4598      	cmp	r8, r3
 8017c4e:	f340 80fb 	ble.w	8017e48 <__ieee754_pow+0x400>
 8017c52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017c56:	4598      	cmp	r8, r3
 8017c58:	4b13      	ldr	r3, [pc, #76]	; (8017ca8 <__ieee754_pow+0x260>)
 8017c5a:	dd0c      	ble.n	8017c76 <__ieee754_pow+0x22e>
 8017c5c:	429c      	cmp	r4, r3
 8017c5e:	dc0f      	bgt.n	8017c80 <__ieee754_pow+0x238>
 8017c60:	f1b9 0f00 	cmp.w	r9, #0
 8017c64:	da0f      	bge.n	8017c86 <__ieee754_pow+0x23e>
 8017c66:	2000      	movs	r0, #0
 8017c68:	b009      	add	sp, #36	; 0x24
 8017c6a:	ecbd 8b06 	vpop	{d8-d10}
 8017c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c72:	f001 bde2 	b.w	801983a <__math_oflow>
 8017c76:	429c      	cmp	r4, r3
 8017c78:	dbf2      	blt.n	8017c60 <__ieee754_pow+0x218>
 8017c7a:	4b0a      	ldr	r3, [pc, #40]	; (8017ca4 <__ieee754_pow+0x25c>)
 8017c7c:	429c      	cmp	r4, r3
 8017c7e:	dd19      	ble.n	8017cb4 <__ieee754_pow+0x26c>
 8017c80:	f1b9 0f00 	cmp.w	r9, #0
 8017c84:	dcef      	bgt.n	8017c66 <__ieee754_pow+0x21e>
 8017c86:	2000      	movs	r0, #0
 8017c88:	b009      	add	sp, #36	; 0x24
 8017c8a:	ecbd 8b06 	vpop	{d8-d10}
 8017c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c92:	f001 bdc9 	b.w	8019828 <__math_uflow>
 8017c96:	bf00      	nop
 8017c98:	fff00000 	.word	0xfff00000
 8017c9c:	7ff00000 	.word	0x7ff00000
 8017ca0:	433fffff 	.word	0x433fffff
 8017ca4:	3ff00000 	.word	0x3ff00000
 8017ca8:	3fefffff 	.word	0x3fefffff
 8017cac:	3fe00000 	.word	0x3fe00000
 8017cb0:	41e00000 	.word	0x41e00000
 8017cb4:	4b60      	ldr	r3, [pc, #384]	; (8017e38 <__ieee754_pow+0x3f0>)
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	f7e8 fb06 	bl	80002c8 <__aeabi_dsub>
 8017cbc:	a354      	add	r3, pc, #336	; (adr r3, 8017e10 <__ieee754_pow+0x3c8>)
 8017cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	460d      	mov	r5, r1
 8017cc6:	f7e8 fcb7 	bl	8000638 <__aeabi_dmul>
 8017cca:	a353      	add	r3, pc, #332	; (adr r3, 8017e18 <__ieee754_pow+0x3d0>)
 8017ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd0:	4606      	mov	r6, r0
 8017cd2:	460f      	mov	r7, r1
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	4629      	mov	r1, r5
 8017cd8:	f7e8 fcae 	bl	8000638 <__aeabi_dmul>
 8017cdc:	4b57      	ldr	r3, [pc, #348]	; (8017e3c <__ieee754_pow+0x3f4>)
 8017cde:	4682      	mov	sl, r0
 8017ce0:	468b      	mov	fp, r1
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	4629      	mov	r1, r5
 8017ce8:	f7e8 fca6 	bl	8000638 <__aeabi_dmul>
 8017cec:	4602      	mov	r2, r0
 8017cee:	460b      	mov	r3, r1
 8017cf0:	a14b      	add	r1, pc, #300	; (adr r1, 8017e20 <__ieee754_pow+0x3d8>)
 8017cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cf6:	f7e8 fae7 	bl	80002c8 <__aeabi_dsub>
 8017cfa:	4622      	mov	r2, r4
 8017cfc:	462b      	mov	r3, r5
 8017cfe:	f7e8 fc9b 	bl	8000638 <__aeabi_dmul>
 8017d02:	4602      	mov	r2, r0
 8017d04:	460b      	mov	r3, r1
 8017d06:	2000      	movs	r0, #0
 8017d08:	494d      	ldr	r1, [pc, #308]	; (8017e40 <__ieee754_pow+0x3f8>)
 8017d0a:	f7e8 fadd 	bl	80002c8 <__aeabi_dsub>
 8017d0e:	4622      	mov	r2, r4
 8017d10:	4680      	mov	r8, r0
 8017d12:	4689      	mov	r9, r1
 8017d14:	462b      	mov	r3, r5
 8017d16:	4620      	mov	r0, r4
 8017d18:	4629      	mov	r1, r5
 8017d1a:	f7e8 fc8d 	bl	8000638 <__aeabi_dmul>
 8017d1e:	4602      	mov	r2, r0
 8017d20:	460b      	mov	r3, r1
 8017d22:	4640      	mov	r0, r8
 8017d24:	4649      	mov	r1, r9
 8017d26:	f7e8 fc87 	bl	8000638 <__aeabi_dmul>
 8017d2a:	a33f      	add	r3, pc, #252	; (adr r3, 8017e28 <__ieee754_pow+0x3e0>)
 8017d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d30:	f7e8 fc82 	bl	8000638 <__aeabi_dmul>
 8017d34:	4602      	mov	r2, r0
 8017d36:	460b      	mov	r3, r1
 8017d38:	4650      	mov	r0, sl
 8017d3a:	4659      	mov	r1, fp
 8017d3c:	f7e8 fac4 	bl	80002c8 <__aeabi_dsub>
 8017d40:	4602      	mov	r2, r0
 8017d42:	460b      	mov	r3, r1
 8017d44:	4680      	mov	r8, r0
 8017d46:	4689      	mov	r9, r1
 8017d48:	4630      	mov	r0, r6
 8017d4a:	4639      	mov	r1, r7
 8017d4c:	f7e8 fabe 	bl	80002cc <__adddf3>
 8017d50:	2000      	movs	r0, #0
 8017d52:	4632      	mov	r2, r6
 8017d54:	463b      	mov	r3, r7
 8017d56:	4604      	mov	r4, r0
 8017d58:	460d      	mov	r5, r1
 8017d5a:	f7e8 fab5 	bl	80002c8 <__aeabi_dsub>
 8017d5e:	4602      	mov	r2, r0
 8017d60:	460b      	mov	r3, r1
 8017d62:	4640      	mov	r0, r8
 8017d64:	4649      	mov	r1, r9
 8017d66:	f7e8 faaf 	bl	80002c8 <__aeabi_dsub>
 8017d6a:	9b04      	ldr	r3, [sp, #16]
 8017d6c:	9a06      	ldr	r2, [sp, #24]
 8017d6e:	3b01      	subs	r3, #1
 8017d70:	4313      	orrs	r3, r2
 8017d72:	4682      	mov	sl, r0
 8017d74:	468b      	mov	fp, r1
 8017d76:	f040 81e7 	bne.w	8018148 <__ieee754_pow+0x700>
 8017d7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017e30 <__ieee754_pow+0x3e8>
 8017d7e:	eeb0 8a47 	vmov.f32	s16, s14
 8017d82:	eef0 8a67 	vmov.f32	s17, s15
 8017d86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017d8a:	2600      	movs	r6, #0
 8017d8c:	4632      	mov	r2, r6
 8017d8e:	463b      	mov	r3, r7
 8017d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d94:	f7e8 fa98 	bl	80002c8 <__aeabi_dsub>
 8017d98:	4622      	mov	r2, r4
 8017d9a:	462b      	mov	r3, r5
 8017d9c:	f7e8 fc4c 	bl	8000638 <__aeabi_dmul>
 8017da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017da4:	4680      	mov	r8, r0
 8017da6:	4689      	mov	r9, r1
 8017da8:	4650      	mov	r0, sl
 8017daa:	4659      	mov	r1, fp
 8017dac:	f7e8 fc44 	bl	8000638 <__aeabi_dmul>
 8017db0:	4602      	mov	r2, r0
 8017db2:	460b      	mov	r3, r1
 8017db4:	4640      	mov	r0, r8
 8017db6:	4649      	mov	r1, r9
 8017db8:	f7e8 fa88 	bl	80002cc <__adddf3>
 8017dbc:	4632      	mov	r2, r6
 8017dbe:	463b      	mov	r3, r7
 8017dc0:	4680      	mov	r8, r0
 8017dc2:	4689      	mov	r9, r1
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	f7e8 fc36 	bl	8000638 <__aeabi_dmul>
 8017dcc:	460b      	mov	r3, r1
 8017dce:	4604      	mov	r4, r0
 8017dd0:	460d      	mov	r5, r1
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	4649      	mov	r1, r9
 8017dd6:	4640      	mov	r0, r8
 8017dd8:	f7e8 fa78 	bl	80002cc <__adddf3>
 8017ddc:	4b19      	ldr	r3, [pc, #100]	; (8017e44 <__ieee754_pow+0x3fc>)
 8017dde:	4299      	cmp	r1, r3
 8017de0:	ec45 4b19 	vmov	d9, r4, r5
 8017de4:	4606      	mov	r6, r0
 8017de6:	460f      	mov	r7, r1
 8017de8:	468b      	mov	fp, r1
 8017dea:	f340 82f1 	ble.w	80183d0 <__ieee754_pow+0x988>
 8017dee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017df2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017df6:	4303      	orrs	r3, r0
 8017df8:	f000 81e4 	beq.w	80181c4 <__ieee754_pow+0x77c>
 8017dfc:	ec51 0b18 	vmov	r0, r1, d8
 8017e00:	2200      	movs	r2, #0
 8017e02:	2300      	movs	r3, #0
 8017e04:	f7e8 fe8a 	bl	8000b1c <__aeabi_dcmplt>
 8017e08:	3800      	subs	r0, #0
 8017e0a:	bf18      	it	ne
 8017e0c:	2001      	movne	r0, #1
 8017e0e:	e72b      	b.n	8017c68 <__ieee754_pow+0x220>
 8017e10:	60000000 	.word	0x60000000
 8017e14:	3ff71547 	.word	0x3ff71547
 8017e18:	f85ddf44 	.word	0xf85ddf44
 8017e1c:	3e54ae0b 	.word	0x3e54ae0b
 8017e20:	55555555 	.word	0x55555555
 8017e24:	3fd55555 	.word	0x3fd55555
 8017e28:	652b82fe 	.word	0x652b82fe
 8017e2c:	3ff71547 	.word	0x3ff71547
 8017e30:	00000000 	.word	0x00000000
 8017e34:	bff00000 	.word	0xbff00000
 8017e38:	3ff00000 	.word	0x3ff00000
 8017e3c:	3fd00000 	.word	0x3fd00000
 8017e40:	3fe00000 	.word	0x3fe00000
 8017e44:	408fffff 	.word	0x408fffff
 8017e48:	4bd5      	ldr	r3, [pc, #852]	; (80181a0 <__ieee754_pow+0x758>)
 8017e4a:	402b      	ands	r3, r5
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	b92b      	cbnz	r3, 8017e5c <__ieee754_pow+0x414>
 8017e50:	4bd4      	ldr	r3, [pc, #848]	; (80181a4 <__ieee754_pow+0x75c>)
 8017e52:	f7e8 fbf1 	bl	8000638 <__aeabi_dmul>
 8017e56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017e5a:	460c      	mov	r4, r1
 8017e5c:	1523      	asrs	r3, r4, #20
 8017e5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017e62:	4413      	add	r3, r2
 8017e64:	9305      	str	r3, [sp, #20]
 8017e66:	4bd0      	ldr	r3, [pc, #832]	; (80181a8 <__ieee754_pow+0x760>)
 8017e68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017e6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017e70:	429c      	cmp	r4, r3
 8017e72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017e76:	dd08      	ble.n	8017e8a <__ieee754_pow+0x442>
 8017e78:	4bcc      	ldr	r3, [pc, #816]	; (80181ac <__ieee754_pow+0x764>)
 8017e7a:	429c      	cmp	r4, r3
 8017e7c:	f340 8162 	ble.w	8018144 <__ieee754_pow+0x6fc>
 8017e80:	9b05      	ldr	r3, [sp, #20]
 8017e82:	3301      	adds	r3, #1
 8017e84:	9305      	str	r3, [sp, #20]
 8017e86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017e8a:	2400      	movs	r4, #0
 8017e8c:	00e3      	lsls	r3, r4, #3
 8017e8e:	9307      	str	r3, [sp, #28]
 8017e90:	4bc7      	ldr	r3, [pc, #796]	; (80181b0 <__ieee754_pow+0x768>)
 8017e92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017e96:	ed93 7b00 	vldr	d7, [r3]
 8017e9a:	4629      	mov	r1, r5
 8017e9c:	ec53 2b17 	vmov	r2, r3, d7
 8017ea0:	eeb0 9a47 	vmov.f32	s18, s14
 8017ea4:	eef0 9a67 	vmov.f32	s19, s15
 8017ea8:	4682      	mov	sl, r0
 8017eaa:	f7e8 fa0d 	bl	80002c8 <__aeabi_dsub>
 8017eae:	4652      	mov	r2, sl
 8017eb0:	4606      	mov	r6, r0
 8017eb2:	460f      	mov	r7, r1
 8017eb4:	462b      	mov	r3, r5
 8017eb6:	ec51 0b19 	vmov	r0, r1, d9
 8017eba:	f7e8 fa07 	bl	80002cc <__adddf3>
 8017ebe:	4602      	mov	r2, r0
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	49bb      	ldr	r1, [pc, #748]	; (80181b4 <__ieee754_pow+0x76c>)
 8017ec6:	f7e8 fce1 	bl	800088c <__aeabi_ddiv>
 8017eca:	ec41 0b1a 	vmov	d10, r0, r1
 8017ece:	4602      	mov	r2, r0
 8017ed0:	460b      	mov	r3, r1
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	f7e8 fbaf 	bl	8000638 <__aeabi_dmul>
 8017eda:	2300      	movs	r3, #0
 8017edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ee0:	9302      	str	r3, [sp, #8]
 8017ee2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017ee6:	46ab      	mov	fp, r5
 8017ee8:	106d      	asrs	r5, r5, #1
 8017eea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017eee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017ef2:	ec41 0b18 	vmov	d8, r0, r1
 8017ef6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017efa:	2200      	movs	r2, #0
 8017efc:	4640      	mov	r0, r8
 8017efe:	4649      	mov	r1, r9
 8017f00:	4614      	mov	r4, r2
 8017f02:	461d      	mov	r5, r3
 8017f04:	f7e8 fb98 	bl	8000638 <__aeabi_dmul>
 8017f08:	4602      	mov	r2, r0
 8017f0a:	460b      	mov	r3, r1
 8017f0c:	4630      	mov	r0, r6
 8017f0e:	4639      	mov	r1, r7
 8017f10:	f7e8 f9da 	bl	80002c8 <__aeabi_dsub>
 8017f14:	ec53 2b19 	vmov	r2, r3, d9
 8017f18:	4606      	mov	r6, r0
 8017f1a:	460f      	mov	r7, r1
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	4629      	mov	r1, r5
 8017f20:	f7e8 f9d2 	bl	80002c8 <__aeabi_dsub>
 8017f24:	4602      	mov	r2, r0
 8017f26:	460b      	mov	r3, r1
 8017f28:	4650      	mov	r0, sl
 8017f2a:	4659      	mov	r1, fp
 8017f2c:	f7e8 f9cc 	bl	80002c8 <__aeabi_dsub>
 8017f30:	4642      	mov	r2, r8
 8017f32:	464b      	mov	r3, r9
 8017f34:	f7e8 fb80 	bl	8000638 <__aeabi_dmul>
 8017f38:	4602      	mov	r2, r0
 8017f3a:	460b      	mov	r3, r1
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	4639      	mov	r1, r7
 8017f40:	f7e8 f9c2 	bl	80002c8 <__aeabi_dsub>
 8017f44:	ec53 2b1a 	vmov	r2, r3, d10
 8017f48:	f7e8 fb76 	bl	8000638 <__aeabi_dmul>
 8017f4c:	ec53 2b18 	vmov	r2, r3, d8
 8017f50:	ec41 0b19 	vmov	d9, r0, r1
 8017f54:	ec51 0b18 	vmov	r0, r1, d8
 8017f58:	f7e8 fb6e 	bl	8000638 <__aeabi_dmul>
 8017f5c:	a37c      	add	r3, pc, #496	; (adr r3, 8018150 <__ieee754_pow+0x708>)
 8017f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f62:	4604      	mov	r4, r0
 8017f64:	460d      	mov	r5, r1
 8017f66:	f7e8 fb67 	bl	8000638 <__aeabi_dmul>
 8017f6a:	a37b      	add	r3, pc, #492	; (adr r3, 8018158 <__ieee754_pow+0x710>)
 8017f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f70:	f7e8 f9ac 	bl	80002cc <__adddf3>
 8017f74:	4622      	mov	r2, r4
 8017f76:	462b      	mov	r3, r5
 8017f78:	f7e8 fb5e 	bl	8000638 <__aeabi_dmul>
 8017f7c:	a378      	add	r3, pc, #480	; (adr r3, 8018160 <__ieee754_pow+0x718>)
 8017f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f82:	f7e8 f9a3 	bl	80002cc <__adddf3>
 8017f86:	4622      	mov	r2, r4
 8017f88:	462b      	mov	r3, r5
 8017f8a:	f7e8 fb55 	bl	8000638 <__aeabi_dmul>
 8017f8e:	a376      	add	r3, pc, #472	; (adr r3, 8018168 <__ieee754_pow+0x720>)
 8017f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f94:	f7e8 f99a 	bl	80002cc <__adddf3>
 8017f98:	4622      	mov	r2, r4
 8017f9a:	462b      	mov	r3, r5
 8017f9c:	f7e8 fb4c 	bl	8000638 <__aeabi_dmul>
 8017fa0:	a373      	add	r3, pc, #460	; (adr r3, 8018170 <__ieee754_pow+0x728>)
 8017fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa6:	f7e8 f991 	bl	80002cc <__adddf3>
 8017faa:	4622      	mov	r2, r4
 8017fac:	462b      	mov	r3, r5
 8017fae:	f7e8 fb43 	bl	8000638 <__aeabi_dmul>
 8017fb2:	a371      	add	r3, pc, #452	; (adr r3, 8018178 <__ieee754_pow+0x730>)
 8017fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb8:	f7e8 f988 	bl	80002cc <__adddf3>
 8017fbc:	4622      	mov	r2, r4
 8017fbe:	4606      	mov	r6, r0
 8017fc0:	460f      	mov	r7, r1
 8017fc2:	462b      	mov	r3, r5
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	4629      	mov	r1, r5
 8017fc8:	f7e8 fb36 	bl	8000638 <__aeabi_dmul>
 8017fcc:	4602      	mov	r2, r0
 8017fce:	460b      	mov	r3, r1
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	4639      	mov	r1, r7
 8017fd4:	f7e8 fb30 	bl	8000638 <__aeabi_dmul>
 8017fd8:	4642      	mov	r2, r8
 8017fda:	4604      	mov	r4, r0
 8017fdc:	460d      	mov	r5, r1
 8017fde:	464b      	mov	r3, r9
 8017fe0:	ec51 0b18 	vmov	r0, r1, d8
 8017fe4:	f7e8 f972 	bl	80002cc <__adddf3>
 8017fe8:	ec53 2b19 	vmov	r2, r3, d9
 8017fec:	f7e8 fb24 	bl	8000638 <__aeabi_dmul>
 8017ff0:	4622      	mov	r2, r4
 8017ff2:	462b      	mov	r3, r5
 8017ff4:	f7e8 f96a 	bl	80002cc <__adddf3>
 8017ff8:	4642      	mov	r2, r8
 8017ffa:	4682      	mov	sl, r0
 8017ffc:	468b      	mov	fp, r1
 8017ffe:	464b      	mov	r3, r9
 8018000:	4640      	mov	r0, r8
 8018002:	4649      	mov	r1, r9
 8018004:	f7e8 fb18 	bl	8000638 <__aeabi_dmul>
 8018008:	4b6b      	ldr	r3, [pc, #428]	; (80181b8 <__ieee754_pow+0x770>)
 801800a:	2200      	movs	r2, #0
 801800c:	4606      	mov	r6, r0
 801800e:	460f      	mov	r7, r1
 8018010:	f7e8 f95c 	bl	80002cc <__adddf3>
 8018014:	4652      	mov	r2, sl
 8018016:	465b      	mov	r3, fp
 8018018:	f7e8 f958 	bl	80002cc <__adddf3>
 801801c:	2000      	movs	r0, #0
 801801e:	4604      	mov	r4, r0
 8018020:	460d      	mov	r5, r1
 8018022:	4602      	mov	r2, r0
 8018024:	460b      	mov	r3, r1
 8018026:	4640      	mov	r0, r8
 8018028:	4649      	mov	r1, r9
 801802a:	f7e8 fb05 	bl	8000638 <__aeabi_dmul>
 801802e:	4b62      	ldr	r3, [pc, #392]	; (80181b8 <__ieee754_pow+0x770>)
 8018030:	4680      	mov	r8, r0
 8018032:	4689      	mov	r9, r1
 8018034:	2200      	movs	r2, #0
 8018036:	4620      	mov	r0, r4
 8018038:	4629      	mov	r1, r5
 801803a:	f7e8 f945 	bl	80002c8 <__aeabi_dsub>
 801803e:	4632      	mov	r2, r6
 8018040:	463b      	mov	r3, r7
 8018042:	f7e8 f941 	bl	80002c8 <__aeabi_dsub>
 8018046:	4602      	mov	r2, r0
 8018048:	460b      	mov	r3, r1
 801804a:	4650      	mov	r0, sl
 801804c:	4659      	mov	r1, fp
 801804e:	f7e8 f93b 	bl	80002c8 <__aeabi_dsub>
 8018052:	ec53 2b18 	vmov	r2, r3, d8
 8018056:	f7e8 faef 	bl	8000638 <__aeabi_dmul>
 801805a:	4622      	mov	r2, r4
 801805c:	4606      	mov	r6, r0
 801805e:	460f      	mov	r7, r1
 8018060:	462b      	mov	r3, r5
 8018062:	ec51 0b19 	vmov	r0, r1, d9
 8018066:	f7e8 fae7 	bl	8000638 <__aeabi_dmul>
 801806a:	4602      	mov	r2, r0
 801806c:	460b      	mov	r3, r1
 801806e:	4630      	mov	r0, r6
 8018070:	4639      	mov	r1, r7
 8018072:	f7e8 f92b 	bl	80002cc <__adddf3>
 8018076:	4606      	mov	r6, r0
 8018078:	460f      	mov	r7, r1
 801807a:	4602      	mov	r2, r0
 801807c:	460b      	mov	r3, r1
 801807e:	4640      	mov	r0, r8
 8018080:	4649      	mov	r1, r9
 8018082:	f7e8 f923 	bl	80002cc <__adddf3>
 8018086:	a33e      	add	r3, pc, #248	; (adr r3, 8018180 <__ieee754_pow+0x738>)
 8018088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801808c:	2000      	movs	r0, #0
 801808e:	4604      	mov	r4, r0
 8018090:	460d      	mov	r5, r1
 8018092:	f7e8 fad1 	bl	8000638 <__aeabi_dmul>
 8018096:	4642      	mov	r2, r8
 8018098:	ec41 0b18 	vmov	d8, r0, r1
 801809c:	464b      	mov	r3, r9
 801809e:	4620      	mov	r0, r4
 80180a0:	4629      	mov	r1, r5
 80180a2:	f7e8 f911 	bl	80002c8 <__aeabi_dsub>
 80180a6:	4602      	mov	r2, r0
 80180a8:	460b      	mov	r3, r1
 80180aa:	4630      	mov	r0, r6
 80180ac:	4639      	mov	r1, r7
 80180ae:	f7e8 f90b 	bl	80002c8 <__aeabi_dsub>
 80180b2:	a335      	add	r3, pc, #212	; (adr r3, 8018188 <__ieee754_pow+0x740>)
 80180b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b8:	f7e8 fabe 	bl	8000638 <__aeabi_dmul>
 80180bc:	a334      	add	r3, pc, #208	; (adr r3, 8018190 <__ieee754_pow+0x748>)
 80180be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c2:	4606      	mov	r6, r0
 80180c4:	460f      	mov	r7, r1
 80180c6:	4620      	mov	r0, r4
 80180c8:	4629      	mov	r1, r5
 80180ca:	f7e8 fab5 	bl	8000638 <__aeabi_dmul>
 80180ce:	4602      	mov	r2, r0
 80180d0:	460b      	mov	r3, r1
 80180d2:	4630      	mov	r0, r6
 80180d4:	4639      	mov	r1, r7
 80180d6:	f7e8 f8f9 	bl	80002cc <__adddf3>
 80180da:	9a07      	ldr	r2, [sp, #28]
 80180dc:	4b37      	ldr	r3, [pc, #220]	; (80181bc <__ieee754_pow+0x774>)
 80180de:	4413      	add	r3, r2
 80180e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e4:	f7e8 f8f2 	bl	80002cc <__adddf3>
 80180e8:	4682      	mov	sl, r0
 80180ea:	9805      	ldr	r0, [sp, #20]
 80180ec:	468b      	mov	fp, r1
 80180ee:	f7e8 fa39 	bl	8000564 <__aeabi_i2d>
 80180f2:	9a07      	ldr	r2, [sp, #28]
 80180f4:	4b32      	ldr	r3, [pc, #200]	; (80181c0 <__ieee754_pow+0x778>)
 80180f6:	4413      	add	r3, r2
 80180f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80180fc:	4606      	mov	r6, r0
 80180fe:	460f      	mov	r7, r1
 8018100:	4652      	mov	r2, sl
 8018102:	465b      	mov	r3, fp
 8018104:	ec51 0b18 	vmov	r0, r1, d8
 8018108:	f7e8 f8e0 	bl	80002cc <__adddf3>
 801810c:	4642      	mov	r2, r8
 801810e:	464b      	mov	r3, r9
 8018110:	f7e8 f8dc 	bl	80002cc <__adddf3>
 8018114:	4632      	mov	r2, r6
 8018116:	463b      	mov	r3, r7
 8018118:	f7e8 f8d8 	bl	80002cc <__adddf3>
 801811c:	2000      	movs	r0, #0
 801811e:	4632      	mov	r2, r6
 8018120:	463b      	mov	r3, r7
 8018122:	4604      	mov	r4, r0
 8018124:	460d      	mov	r5, r1
 8018126:	f7e8 f8cf 	bl	80002c8 <__aeabi_dsub>
 801812a:	4642      	mov	r2, r8
 801812c:	464b      	mov	r3, r9
 801812e:	f7e8 f8cb 	bl	80002c8 <__aeabi_dsub>
 8018132:	ec53 2b18 	vmov	r2, r3, d8
 8018136:	f7e8 f8c7 	bl	80002c8 <__aeabi_dsub>
 801813a:	4602      	mov	r2, r0
 801813c:	460b      	mov	r3, r1
 801813e:	4650      	mov	r0, sl
 8018140:	4659      	mov	r1, fp
 8018142:	e610      	b.n	8017d66 <__ieee754_pow+0x31e>
 8018144:	2401      	movs	r4, #1
 8018146:	e6a1      	b.n	8017e8c <__ieee754_pow+0x444>
 8018148:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018198 <__ieee754_pow+0x750>
 801814c:	e617      	b.n	8017d7e <__ieee754_pow+0x336>
 801814e:	bf00      	nop
 8018150:	4a454eef 	.word	0x4a454eef
 8018154:	3fca7e28 	.word	0x3fca7e28
 8018158:	93c9db65 	.word	0x93c9db65
 801815c:	3fcd864a 	.word	0x3fcd864a
 8018160:	a91d4101 	.word	0xa91d4101
 8018164:	3fd17460 	.word	0x3fd17460
 8018168:	518f264d 	.word	0x518f264d
 801816c:	3fd55555 	.word	0x3fd55555
 8018170:	db6fabff 	.word	0xdb6fabff
 8018174:	3fdb6db6 	.word	0x3fdb6db6
 8018178:	33333303 	.word	0x33333303
 801817c:	3fe33333 	.word	0x3fe33333
 8018180:	e0000000 	.word	0xe0000000
 8018184:	3feec709 	.word	0x3feec709
 8018188:	dc3a03fd 	.word	0xdc3a03fd
 801818c:	3feec709 	.word	0x3feec709
 8018190:	145b01f5 	.word	0x145b01f5
 8018194:	be3e2fe0 	.word	0xbe3e2fe0
 8018198:	00000000 	.word	0x00000000
 801819c:	3ff00000 	.word	0x3ff00000
 80181a0:	7ff00000 	.word	0x7ff00000
 80181a4:	43400000 	.word	0x43400000
 80181a8:	0003988e 	.word	0x0003988e
 80181ac:	000bb679 	.word	0x000bb679
 80181b0:	08049010 	.word	0x08049010
 80181b4:	3ff00000 	.word	0x3ff00000
 80181b8:	40080000 	.word	0x40080000
 80181bc:	08049030 	.word	0x08049030
 80181c0:	08049020 	.word	0x08049020
 80181c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801849c <__ieee754_pow+0xa54>)
 80181c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ca:	4640      	mov	r0, r8
 80181cc:	4649      	mov	r1, r9
 80181ce:	f7e8 f87d 	bl	80002cc <__adddf3>
 80181d2:	4622      	mov	r2, r4
 80181d4:	ec41 0b1a 	vmov	d10, r0, r1
 80181d8:	462b      	mov	r3, r5
 80181da:	4630      	mov	r0, r6
 80181dc:	4639      	mov	r1, r7
 80181de:	f7e8 f873 	bl	80002c8 <__aeabi_dsub>
 80181e2:	4602      	mov	r2, r0
 80181e4:	460b      	mov	r3, r1
 80181e6:	ec51 0b1a 	vmov	r0, r1, d10
 80181ea:	f7e8 fcb5 	bl	8000b58 <__aeabi_dcmpgt>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	f47f ae04 	bne.w	8017dfc <__ieee754_pow+0x3b4>
 80181f4:	4aa4      	ldr	r2, [pc, #656]	; (8018488 <__ieee754_pow+0xa40>)
 80181f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80181fa:	4293      	cmp	r3, r2
 80181fc:	f340 8108 	ble.w	8018410 <__ieee754_pow+0x9c8>
 8018200:	151b      	asrs	r3, r3, #20
 8018202:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018206:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801820a:	fa4a f303 	asr.w	r3, sl, r3
 801820e:	445b      	add	r3, fp
 8018210:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018214:	4e9d      	ldr	r6, [pc, #628]	; (801848c <__ieee754_pow+0xa44>)
 8018216:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801821a:	4116      	asrs	r6, r2
 801821c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018220:	2000      	movs	r0, #0
 8018222:	ea23 0106 	bic.w	r1, r3, r6
 8018226:	f1c2 0214 	rsb	r2, r2, #20
 801822a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801822e:	fa4a fa02 	asr.w	sl, sl, r2
 8018232:	f1bb 0f00 	cmp.w	fp, #0
 8018236:	4602      	mov	r2, r0
 8018238:	460b      	mov	r3, r1
 801823a:	4620      	mov	r0, r4
 801823c:	4629      	mov	r1, r5
 801823e:	bfb8      	it	lt
 8018240:	f1ca 0a00 	rsblt	sl, sl, #0
 8018244:	f7e8 f840 	bl	80002c8 <__aeabi_dsub>
 8018248:	ec41 0b19 	vmov	d9, r0, r1
 801824c:	4642      	mov	r2, r8
 801824e:	464b      	mov	r3, r9
 8018250:	ec51 0b19 	vmov	r0, r1, d9
 8018254:	f7e8 f83a 	bl	80002cc <__adddf3>
 8018258:	a37b      	add	r3, pc, #492	; (adr r3, 8018448 <__ieee754_pow+0xa00>)
 801825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801825e:	2000      	movs	r0, #0
 8018260:	4604      	mov	r4, r0
 8018262:	460d      	mov	r5, r1
 8018264:	f7e8 f9e8 	bl	8000638 <__aeabi_dmul>
 8018268:	ec53 2b19 	vmov	r2, r3, d9
 801826c:	4606      	mov	r6, r0
 801826e:	460f      	mov	r7, r1
 8018270:	4620      	mov	r0, r4
 8018272:	4629      	mov	r1, r5
 8018274:	f7e8 f828 	bl	80002c8 <__aeabi_dsub>
 8018278:	4602      	mov	r2, r0
 801827a:	460b      	mov	r3, r1
 801827c:	4640      	mov	r0, r8
 801827e:	4649      	mov	r1, r9
 8018280:	f7e8 f822 	bl	80002c8 <__aeabi_dsub>
 8018284:	a372      	add	r3, pc, #456	; (adr r3, 8018450 <__ieee754_pow+0xa08>)
 8018286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828a:	f7e8 f9d5 	bl	8000638 <__aeabi_dmul>
 801828e:	a372      	add	r3, pc, #456	; (adr r3, 8018458 <__ieee754_pow+0xa10>)
 8018290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018294:	4680      	mov	r8, r0
 8018296:	4689      	mov	r9, r1
 8018298:	4620      	mov	r0, r4
 801829a:	4629      	mov	r1, r5
 801829c:	f7e8 f9cc 	bl	8000638 <__aeabi_dmul>
 80182a0:	4602      	mov	r2, r0
 80182a2:	460b      	mov	r3, r1
 80182a4:	4640      	mov	r0, r8
 80182a6:	4649      	mov	r1, r9
 80182a8:	f7e8 f810 	bl	80002cc <__adddf3>
 80182ac:	4604      	mov	r4, r0
 80182ae:	460d      	mov	r5, r1
 80182b0:	4602      	mov	r2, r0
 80182b2:	460b      	mov	r3, r1
 80182b4:	4630      	mov	r0, r6
 80182b6:	4639      	mov	r1, r7
 80182b8:	f7e8 f808 	bl	80002cc <__adddf3>
 80182bc:	4632      	mov	r2, r6
 80182be:	463b      	mov	r3, r7
 80182c0:	4680      	mov	r8, r0
 80182c2:	4689      	mov	r9, r1
 80182c4:	f7e8 f800 	bl	80002c8 <__aeabi_dsub>
 80182c8:	4602      	mov	r2, r0
 80182ca:	460b      	mov	r3, r1
 80182cc:	4620      	mov	r0, r4
 80182ce:	4629      	mov	r1, r5
 80182d0:	f7e7 fffa 	bl	80002c8 <__aeabi_dsub>
 80182d4:	4642      	mov	r2, r8
 80182d6:	4606      	mov	r6, r0
 80182d8:	460f      	mov	r7, r1
 80182da:	464b      	mov	r3, r9
 80182dc:	4640      	mov	r0, r8
 80182de:	4649      	mov	r1, r9
 80182e0:	f7e8 f9aa 	bl	8000638 <__aeabi_dmul>
 80182e4:	a35e      	add	r3, pc, #376	; (adr r3, 8018460 <__ieee754_pow+0xa18>)
 80182e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ea:	4604      	mov	r4, r0
 80182ec:	460d      	mov	r5, r1
 80182ee:	f7e8 f9a3 	bl	8000638 <__aeabi_dmul>
 80182f2:	a35d      	add	r3, pc, #372	; (adr r3, 8018468 <__ieee754_pow+0xa20>)
 80182f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f8:	f7e7 ffe6 	bl	80002c8 <__aeabi_dsub>
 80182fc:	4622      	mov	r2, r4
 80182fe:	462b      	mov	r3, r5
 8018300:	f7e8 f99a 	bl	8000638 <__aeabi_dmul>
 8018304:	a35a      	add	r3, pc, #360	; (adr r3, 8018470 <__ieee754_pow+0xa28>)
 8018306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801830a:	f7e7 ffdf 	bl	80002cc <__adddf3>
 801830e:	4622      	mov	r2, r4
 8018310:	462b      	mov	r3, r5
 8018312:	f7e8 f991 	bl	8000638 <__aeabi_dmul>
 8018316:	a358      	add	r3, pc, #352	; (adr r3, 8018478 <__ieee754_pow+0xa30>)
 8018318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831c:	f7e7 ffd4 	bl	80002c8 <__aeabi_dsub>
 8018320:	4622      	mov	r2, r4
 8018322:	462b      	mov	r3, r5
 8018324:	f7e8 f988 	bl	8000638 <__aeabi_dmul>
 8018328:	a355      	add	r3, pc, #340	; (adr r3, 8018480 <__ieee754_pow+0xa38>)
 801832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801832e:	f7e7 ffcd 	bl	80002cc <__adddf3>
 8018332:	4622      	mov	r2, r4
 8018334:	462b      	mov	r3, r5
 8018336:	f7e8 f97f 	bl	8000638 <__aeabi_dmul>
 801833a:	4602      	mov	r2, r0
 801833c:	460b      	mov	r3, r1
 801833e:	4640      	mov	r0, r8
 8018340:	4649      	mov	r1, r9
 8018342:	f7e7 ffc1 	bl	80002c8 <__aeabi_dsub>
 8018346:	4604      	mov	r4, r0
 8018348:	460d      	mov	r5, r1
 801834a:	4602      	mov	r2, r0
 801834c:	460b      	mov	r3, r1
 801834e:	4640      	mov	r0, r8
 8018350:	4649      	mov	r1, r9
 8018352:	f7e8 f971 	bl	8000638 <__aeabi_dmul>
 8018356:	2200      	movs	r2, #0
 8018358:	ec41 0b19 	vmov	d9, r0, r1
 801835c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018360:	4620      	mov	r0, r4
 8018362:	4629      	mov	r1, r5
 8018364:	f7e7 ffb0 	bl	80002c8 <__aeabi_dsub>
 8018368:	4602      	mov	r2, r0
 801836a:	460b      	mov	r3, r1
 801836c:	ec51 0b19 	vmov	r0, r1, d9
 8018370:	f7e8 fa8c 	bl	800088c <__aeabi_ddiv>
 8018374:	4632      	mov	r2, r6
 8018376:	4604      	mov	r4, r0
 8018378:	460d      	mov	r5, r1
 801837a:	463b      	mov	r3, r7
 801837c:	4640      	mov	r0, r8
 801837e:	4649      	mov	r1, r9
 8018380:	f7e8 f95a 	bl	8000638 <__aeabi_dmul>
 8018384:	4632      	mov	r2, r6
 8018386:	463b      	mov	r3, r7
 8018388:	f7e7 ffa0 	bl	80002cc <__adddf3>
 801838c:	4602      	mov	r2, r0
 801838e:	460b      	mov	r3, r1
 8018390:	4620      	mov	r0, r4
 8018392:	4629      	mov	r1, r5
 8018394:	f7e7 ff98 	bl	80002c8 <__aeabi_dsub>
 8018398:	4642      	mov	r2, r8
 801839a:	464b      	mov	r3, r9
 801839c:	f7e7 ff94 	bl	80002c8 <__aeabi_dsub>
 80183a0:	460b      	mov	r3, r1
 80183a2:	4602      	mov	r2, r0
 80183a4:	493a      	ldr	r1, [pc, #232]	; (8018490 <__ieee754_pow+0xa48>)
 80183a6:	2000      	movs	r0, #0
 80183a8:	f7e7 ff8e 	bl	80002c8 <__aeabi_dsub>
 80183ac:	ec41 0b10 	vmov	d0, r0, r1
 80183b0:	ee10 3a90 	vmov	r3, s1
 80183b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80183b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80183bc:	da2b      	bge.n	8018416 <__ieee754_pow+0x9ce>
 80183be:	4650      	mov	r0, sl
 80183c0:	f001 fada 	bl	8019978 <scalbn>
 80183c4:	ec51 0b10 	vmov	r0, r1, d0
 80183c8:	ec53 2b18 	vmov	r2, r3, d8
 80183cc:	f7ff bbed 	b.w	8017baa <__ieee754_pow+0x162>
 80183d0:	4b30      	ldr	r3, [pc, #192]	; (8018494 <__ieee754_pow+0xa4c>)
 80183d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80183d6:	429e      	cmp	r6, r3
 80183d8:	f77f af0c 	ble.w	80181f4 <__ieee754_pow+0x7ac>
 80183dc:	4b2e      	ldr	r3, [pc, #184]	; (8018498 <__ieee754_pow+0xa50>)
 80183de:	440b      	add	r3, r1
 80183e0:	4303      	orrs	r3, r0
 80183e2:	d009      	beq.n	80183f8 <__ieee754_pow+0x9b0>
 80183e4:	ec51 0b18 	vmov	r0, r1, d8
 80183e8:	2200      	movs	r2, #0
 80183ea:	2300      	movs	r3, #0
 80183ec:	f7e8 fb96 	bl	8000b1c <__aeabi_dcmplt>
 80183f0:	3800      	subs	r0, #0
 80183f2:	bf18      	it	ne
 80183f4:	2001      	movne	r0, #1
 80183f6:	e447      	b.n	8017c88 <__ieee754_pow+0x240>
 80183f8:	4622      	mov	r2, r4
 80183fa:	462b      	mov	r3, r5
 80183fc:	f7e7 ff64 	bl	80002c8 <__aeabi_dsub>
 8018400:	4642      	mov	r2, r8
 8018402:	464b      	mov	r3, r9
 8018404:	f7e8 fb9e 	bl	8000b44 <__aeabi_dcmpge>
 8018408:	2800      	cmp	r0, #0
 801840a:	f43f aef3 	beq.w	80181f4 <__ieee754_pow+0x7ac>
 801840e:	e7e9      	b.n	80183e4 <__ieee754_pow+0x99c>
 8018410:	f04f 0a00 	mov.w	sl, #0
 8018414:	e71a      	b.n	801824c <__ieee754_pow+0x804>
 8018416:	ec51 0b10 	vmov	r0, r1, d0
 801841a:	4619      	mov	r1, r3
 801841c:	e7d4      	b.n	80183c8 <__ieee754_pow+0x980>
 801841e:	491c      	ldr	r1, [pc, #112]	; (8018490 <__ieee754_pow+0xa48>)
 8018420:	2000      	movs	r0, #0
 8018422:	f7ff bb30 	b.w	8017a86 <__ieee754_pow+0x3e>
 8018426:	2000      	movs	r0, #0
 8018428:	2100      	movs	r1, #0
 801842a:	f7ff bb2c 	b.w	8017a86 <__ieee754_pow+0x3e>
 801842e:	4630      	mov	r0, r6
 8018430:	4639      	mov	r1, r7
 8018432:	f7ff bb28 	b.w	8017a86 <__ieee754_pow+0x3e>
 8018436:	9204      	str	r2, [sp, #16]
 8018438:	f7ff bb7a 	b.w	8017b30 <__ieee754_pow+0xe8>
 801843c:	2300      	movs	r3, #0
 801843e:	f7ff bb64 	b.w	8017b0a <__ieee754_pow+0xc2>
 8018442:	bf00      	nop
 8018444:	f3af 8000 	nop.w
 8018448:	00000000 	.word	0x00000000
 801844c:	3fe62e43 	.word	0x3fe62e43
 8018450:	fefa39ef 	.word	0xfefa39ef
 8018454:	3fe62e42 	.word	0x3fe62e42
 8018458:	0ca86c39 	.word	0x0ca86c39
 801845c:	be205c61 	.word	0xbe205c61
 8018460:	72bea4d0 	.word	0x72bea4d0
 8018464:	3e663769 	.word	0x3e663769
 8018468:	c5d26bf1 	.word	0xc5d26bf1
 801846c:	3ebbbd41 	.word	0x3ebbbd41
 8018470:	af25de2c 	.word	0xaf25de2c
 8018474:	3f11566a 	.word	0x3f11566a
 8018478:	16bebd93 	.word	0x16bebd93
 801847c:	3f66c16c 	.word	0x3f66c16c
 8018480:	5555553e 	.word	0x5555553e
 8018484:	3fc55555 	.word	0x3fc55555
 8018488:	3fe00000 	.word	0x3fe00000
 801848c:	000fffff 	.word	0x000fffff
 8018490:	3ff00000 	.word	0x3ff00000
 8018494:	4090cbff 	.word	0x4090cbff
 8018498:	3f6f3400 	.word	0x3f6f3400
 801849c:	652b82fe 	.word	0x652b82fe
 80184a0:	3c971547 	.word	0x3c971547
 80184a4:	00000000 	.word	0x00000000

080184a8 <__ieee754_rem_pio2>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	ed2d 8b02 	vpush	{d8}
 80184b0:	ec55 4b10 	vmov	r4, r5, d0
 80184b4:	4bca      	ldr	r3, [pc, #808]	; (80187e0 <__ieee754_rem_pio2+0x338>)
 80184b6:	b08b      	sub	sp, #44	; 0x2c
 80184b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80184bc:	4598      	cmp	r8, r3
 80184be:	4682      	mov	sl, r0
 80184c0:	9502      	str	r5, [sp, #8]
 80184c2:	dc08      	bgt.n	80184d6 <__ieee754_rem_pio2+0x2e>
 80184c4:	2200      	movs	r2, #0
 80184c6:	2300      	movs	r3, #0
 80184c8:	ed80 0b00 	vstr	d0, [r0]
 80184cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80184d0:	f04f 0b00 	mov.w	fp, #0
 80184d4:	e028      	b.n	8018528 <__ieee754_rem_pio2+0x80>
 80184d6:	4bc3      	ldr	r3, [pc, #780]	; (80187e4 <__ieee754_rem_pio2+0x33c>)
 80184d8:	4598      	cmp	r8, r3
 80184da:	dc78      	bgt.n	80185ce <__ieee754_rem_pio2+0x126>
 80184dc:	9b02      	ldr	r3, [sp, #8]
 80184de:	4ec2      	ldr	r6, [pc, #776]	; (80187e8 <__ieee754_rem_pio2+0x340>)
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	ee10 0a10 	vmov	r0, s0
 80184e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80187a8 <__ieee754_rem_pio2+0x300>)
 80184e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ec:	4629      	mov	r1, r5
 80184ee:	dd39      	ble.n	8018564 <__ieee754_rem_pio2+0xbc>
 80184f0:	f7e7 feea 	bl	80002c8 <__aeabi_dsub>
 80184f4:	45b0      	cmp	r8, r6
 80184f6:	4604      	mov	r4, r0
 80184f8:	460d      	mov	r5, r1
 80184fa:	d01b      	beq.n	8018534 <__ieee754_rem_pio2+0x8c>
 80184fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80187b0 <__ieee754_rem_pio2+0x308>)
 80184fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018502:	f7e7 fee1 	bl	80002c8 <__aeabi_dsub>
 8018506:	4602      	mov	r2, r0
 8018508:	460b      	mov	r3, r1
 801850a:	e9ca 2300 	strd	r2, r3, [sl]
 801850e:	4620      	mov	r0, r4
 8018510:	4629      	mov	r1, r5
 8018512:	f7e7 fed9 	bl	80002c8 <__aeabi_dsub>
 8018516:	a3a6      	add	r3, pc, #664	; (adr r3, 80187b0 <__ieee754_rem_pio2+0x308>)
 8018518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801851c:	f7e7 fed4 	bl	80002c8 <__aeabi_dsub>
 8018520:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018524:	f04f 0b01 	mov.w	fp, #1
 8018528:	4658      	mov	r0, fp
 801852a:	b00b      	add	sp, #44	; 0x2c
 801852c:	ecbd 8b02 	vpop	{d8}
 8018530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018534:	a3a0      	add	r3, pc, #640	; (adr r3, 80187b8 <__ieee754_rem_pio2+0x310>)
 8018536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801853a:	f7e7 fec5 	bl	80002c8 <__aeabi_dsub>
 801853e:	a3a0      	add	r3, pc, #640	; (adr r3, 80187c0 <__ieee754_rem_pio2+0x318>)
 8018540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018544:	4604      	mov	r4, r0
 8018546:	460d      	mov	r5, r1
 8018548:	f7e7 febe 	bl	80002c8 <__aeabi_dsub>
 801854c:	4602      	mov	r2, r0
 801854e:	460b      	mov	r3, r1
 8018550:	e9ca 2300 	strd	r2, r3, [sl]
 8018554:	4620      	mov	r0, r4
 8018556:	4629      	mov	r1, r5
 8018558:	f7e7 feb6 	bl	80002c8 <__aeabi_dsub>
 801855c:	a398      	add	r3, pc, #608	; (adr r3, 80187c0 <__ieee754_rem_pio2+0x318>)
 801855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018562:	e7db      	b.n	801851c <__ieee754_rem_pio2+0x74>
 8018564:	f7e7 feb2 	bl	80002cc <__adddf3>
 8018568:	45b0      	cmp	r8, r6
 801856a:	4604      	mov	r4, r0
 801856c:	460d      	mov	r5, r1
 801856e:	d016      	beq.n	801859e <__ieee754_rem_pio2+0xf6>
 8018570:	a38f      	add	r3, pc, #572	; (adr r3, 80187b0 <__ieee754_rem_pio2+0x308>)
 8018572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018576:	f7e7 fea9 	bl	80002cc <__adddf3>
 801857a:	4602      	mov	r2, r0
 801857c:	460b      	mov	r3, r1
 801857e:	e9ca 2300 	strd	r2, r3, [sl]
 8018582:	4620      	mov	r0, r4
 8018584:	4629      	mov	r1, r5
 8018586:	f7e7 fe9f 	bl	80002c8 <__aeabi_dsub>
 801858a:	a389      	add	r3, pc, #548	; (adr r3, 80187b0 <__ieee754_rem_pio2+0x308>)
 801858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018590:	f7e7 fe9c 	bl	80002cc <__adddf3>
 8018594:	f04f 3bff 	mov.w	fp, #4294967295
 8018598:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801859c:	e7c4      	b.n	8018528 <__ieee754_rem_pio2+0x80>
 801859e:	a386      	add	r3, pc, #536	; (adr r3, 80187b8 <__ieee754_rem_pio2+0x310>)
 80185a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a4:	f7e7 fe92 	bl	80002cc <__adddf3>
 80185a8:	a385      	add	r3, pc, #532	; (adr r3, 80187c0 <__ieee754_rem_pio2+0x318>)
 80185aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ae:	4604      	mov	r4, r0
 80185b0:	460d      	mov	r5, r1
 80185b2:	f7e7 fe8b 	bl	80002cc <__adddf3>
 80185b6:	4602      	mov	r2, r0
 80185b8:	460b      	mov	r3, r1
 80185ba:	e9ca 2300 	strd	r2, r3, [sl]
 80185be:	4620      	mov	r0, r4
 80185c0:	4629      	mov	r1, r5
 80185c2:	f7e7 fe81 	bl	80002c8 <__aeabi_dsub>
 80185c6:	a37e      	add	r3, pc, #504	; (adr r3, 80187c0 <__ieee754_rem_pio2+0x318>)
 80185c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185cc:	e7e0      	b.n	8018590 <__ieee754_rem_pio2+0xe8>
 80185ce:	4b87      	ldr	r3, [pc, #540]	; (80187ec <__ieee754_rem_pio2+0x344>)
 80185d0:	4598      	cmp	r8, r3
 80185d2:	f300 80d9 	bgt.w	8018788 <__ieee754_rem_pio2+0x2e0>
 80185d6:	f001 f939 	bl	801984c <fabs>
 80185da:	ec55 4b10 	vmov	r4, r5, d0
 80185de:	ee10 0a10 	vmov	r0, s0
 80185e2:	a379      	add	r3, pc, #484	; (adr r3, 80187c8 <__ieee754_rem_pio2+0x320>)
 80185e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185e8:	4629      	mov	r1, r5
 80185ea:	f7e8 f825 	bl	8000638 <__aeabi_dmul>
 80185ee:	4b80      	ldr	r3, [pc, #512]	; (80187f0 <__ieee754_rem_pio2+0x348>)
 80185f0:	2200      	movs	r2, #0
 80185f2:	f7e7 fe6b 	bl	80002cc <__adddf3>
 80185f6:	f7e8 facf 	bl	8000b98 <__aeabi_d2iz>
 80185fa:	4683      	mov	fp, r0
 80185fc:	f7e7 ffb2 	bl	8000564 <__aeabi_i2d>
 8018600:	4602      	mov	r2, r0
 8018602:	460b      	mov	r3, r1
 8018604:	ec43 2b18 	vmov	d8, r2, r3
 8018608:	a367      	add	r3, pc, #412	; (adr r3, 80187a8 <__ieee754_rem_pio2+0x300>)
 801860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801860e:	f7e8 f813 	bl	8000638 <__aeabi_dmul>
 8018612:	4602      	mov	r2, r0
 8018614:	460b      	mov	r3, r1
 8018616:	4620      	mov	r0, r4
 8018618:	4629      	mov	r1, r5
 801861a:	f7e7 fe55 	bl	80002c8 <__aeabi_dsub>
 801861e:	a364      	add	r3, pc, #400	; (adr r3, 80187b0 <__ieee754_rem_pio2+0x308>)
 8018620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018624:	4606      	mov	r6, r0
 8018626:	460f      	mov	r7, r1
 8018628:	ec51 0b18 	vmov	r0, r1, d8
 801862c:	f7e8 f804 	bl	8000638 <__aeabi_dmul>
 8018630:	f1bb 0f1f 	cmp.w	fp, #31
 8018634:	4604      	mov	r4, r0
 8018636:	460d      	mov	r5, r1
 8018638:	dc0d      	bgt.n	8018656 <__ieee754_rem_pio2+0x1ae>
 801863a:	4b6e      	ldr	r3, [pc, #440]	; (80187f4 <__ieee754_rem_pio2+0x34c>)
 801863c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018644:	4543      	cmp	r3, r8
 8018646:	d006      	beq.n	8018656 <__ieee754_rem_pio2+0x1ae>
 8018648:	4622      	mov	r2, r4
 801864a:	462b      	mov	r3, r5
 801864c:	4630      	mov	r0, r6
 801864e:	4639      	mov	r1, r7
 8018650:	f7e7 fe3a 	bl	80002c8 <__aeabi_dsub>
 8018654:	e00f      	b.n	8018676 <__ieee754_rem_pio2+0x1ce>
 8018656:	462b      	mov	r3, r5
 8018658:	4622      	mov	r2, r4
 801865a:	4630      	mov	r0, r6
 801865c:	4639      	mov	r1, r7
 801865e:	f7e7 fe33 	bl	80002c8 <__aeabi_dsub>
 8018662:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018666:	9303      	str	r3, [sp, #12]
 8018668:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801866c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8018670:	f1b8 0f10 	cmp.w	r8, #16
 8018674:	dc02      	bgt.n	801867c <__ieee754_rem_pio2+0x1d4>
 8018676:	e9ca 0100 	strd	r0, r1, [sl]
 801867a:	e039      	b.n	80186f0 <__ieee754_rem_pio2+0x248>
 801867c:	a34e      	add	r3, pc, #312	; (adr r3, 80187b8 <__ieee754_rem_pio2+0x310>)
 801867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018682:	ec51 0b18 	vmov	r0, r1, d8
 8018686:	f7e7 ffd7 	bl	8000638 <__aeabi_dmul>
 801868a:	4604      	mov	r4, r0
 801868c:	460d      	mov	r5, r1
 801868e:	4602      	mov	r2, r0
 8018690:	460b      	mov	r3, r1
 8018692:	4630      	mov	r0, r6
 8018694:	4639      	mov	r1, r7
 8018696:	f7e7 fe17 	bl	80002c8 <__aeabi_dsub>
 801869a:	4602      	mov	r2, r0
 801869c:	460b      	mov	r3, r1
 801869e:	4680      	mov	r8, r0
 80186a0:	4689      	mov	r9, r1
 80186a2:	4630      	mov	r0, r6
 80186a4:	4639      	mov	r1, r7
 80186a6:	f7e7 fe0f 	bl	80002c8 <__aeabi_dsub>
 80186aa:	4622      	mov	r2, r4
 80186ac:	462b      	mov	r3, r5
 80186ae:	f7e7 fe0b 	bl	80002c8 <__aeabi_dsub>
 80186b2:	a343      	add	r3, pc, #268	; (adr r3, 80187c0 <__ieee754_rem_pio2+0x318>)
 80186b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186b8:	4604      	mov	r4, r0
 80186ba:	460d      	mov	r5, r1
 80186bc:	ec51 0b18 	vmov	r0, r1, d8
 80186c0:	f7e7 ffba 	bl	8000638 <__aeabi_dmul>
 80186c4:	4622      	mov	r2, r4
 80186c6:	462b      	mov	r3, r5
 80186c8:	f7e7 fdfe 	bl	80002c8 <__aeabi_dsub>
 80186cc:	4602      	mov	r2, r0
 80186ce:	460b      	mov	r3, r1
 80186d0:	4604      	mov	r4, r0
 80186d2:	460d      	mov	r5, r1
 80186d4:	4640      	mov	r0, r8
 80186d6:	4649      	mov	r1, r9
 80186d8:	f7e7 fdf6 	bl	80002c8 <__aeabi_dsub>
 80186dc:	9a03      	ldr	r2, [sp, #12]
 80186de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80186e2:	1ad3      	subs	r3, r2, r3
 80186e4:	2b31      	cmp	r3, #49	; 0x31
 80186e6:	dc24      	bgt.n	8018732 <__ieee754_rem_pio2+0x28a>
 80186e8:	e9ca 0100 	strd	r0, r1, [sl]
 80186ec:	4646      	mov	r6, r8
 80186ee:	464f      	mov	r7, r9
 80186f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80186f4:	4630      	mov	r0, r6
 80186f6:	4642      	mov	r2, r8
 80186f8:	464b      	mov	r3, r9
 80186fa:	4639      	mov	r1, r7
 80186fc:	f7e7 fde4 	bl	80002c8 <__aeabi_dsub>
 8018700:	462b      	mov	r3, r5
 8018702:	4622      	mov	r2, r4
 8018704:	f7e7 fde0 	bl	80002c8 <__aeabi_dsub>
 8018708:	9b02      	ldr	r3, [sp, #8]
 801870a:	2b00      	cmp	r3, #0
 801870c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018710:	f6bf af0a 	bge.w	8018528 <__ieee754_rem_pio2+0x80>
 8018714:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018718:	f8ca 3004 	str.w	r3, [sl, #4]
 801871c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018720:	f8ca 8000 	str.w	r8, [sl]
 8018724:	f8ca 0008 	str.w	r0, [sl, #8]
 8018728:	f8ca 300c 	str.w	r3, [sl, #12]
 801872c:	f1cb 0b00 	rsb	fp, fp, #0
 8018730:	e6fa      	b.n	8018528 <__ieee754_rem_pio2+0x80>
 8018732:	a327      	add	r3, pc, #156	; (adr r3, 80187d0 <__ieee754_rem_pio2+0x328>)
 8018734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018738:	ec51 0b18 	vmov	r0, r1, d8
 801873c:	f7e7 ff7c 	bl	8000638 <__aeabi_dmul>
 8018740:	4604      	mov	r4, r0
 8018742:	460d      	mov	r5, r1
 8018744:	4602      	mov	r2, r0
 8018746:	460b      	mov	r3, r1
 8018748:	4640      	mov	r0, r8
 801874a:	4649      	mov	r1, r9
 801874c:	f7e7 fdbc 	bl	80002c8 <__aeabi_dsub>
 8018750:	4602      	mov	r2, r0
 8018752:	460b      	mov	r3, r1
 8018754:	4606      	mov	r6, r0
 8018756:	460f      	mov	r7, r1
 8018758:	4640      	mov	r0, r8
 801875a:	4649      	mov	r1, r9
 801875c:	f7e7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8018760:	4622      	mov	r2, r4
 8018762:	462b      	mov	r3, r5
 8018764:	f7e7 fdb0 	bl	80002c8 <__aeabi_dsub>
 8018768:	a31b      	add	r3, pc, #108	; (adr r3, 80187d8 <__ieee754_rem_pio2+0x330>)
 801876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801876e:	4604      	mov	r4, r0
 8018770:	460d      	mov	r5, r1
 8018772:	ec51 0b18 	vmov	r0, r1, d8
 8018776:	f7e7 ff5f 	bl	8000638 <__aeabi_dmul>
 801877a:	4622      	mov	r2, r4
 801877c:	462b      	mov	r3, r5
 801877e:	f7e7 fda3 	bl	80002c8 <__aeabi_dsub>
 8018782:	4604      	mov	r4, r0
 8018784:	460d      	mov	r5, r1
 8018786:	e75f      	b.n	8018648 <__ieee754_rem_pio2+0x1a0>
 8018788:	4b1b      	ldr	r3, [pc, #108]	; (80187f8 <__ieee754_rem_pio2+0x350>)
 801878a:	4598      	cmp	r8, r3
 801878c:	dd36      	ble.n	80187fc <__ieee754_rem_pio2+0x354>
 801878e:	ee10 2a10 	vmov	r2, s0
 8018792:	462b      	mov	r3, r5
 8018794:	4620      	mov	r0, r4
 8018796:	4629      	mov	r1, r5
 8018798:	f7e7 fd96 	bl	80002c8 <__aeabi_dsub>
 801879c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80187a0:	e9ca 0100 	strd	r0, r1, [sl]
 80187a4:	e694      	b.n	80184d0 <__ieee754_rem_pio2+0x28>
 80187a6:	bf00      	nop
 80187a8:	54400000 	.word	0x54400000
 80187ac:	3ff921fb 	.word	0x3ff921fb
 80187b0:	1a626331 	.word	0x1a626331
 80187b4:	3dd0b461 	.word	0x3dd0b461
 80187b8:	1a600000 	.word	0x1a600000
 80187bc:	3dd0b461 	.word	0x3dd0b461
 80187c0:	2e037073 	.word	0x2e037073
 80187c4:	3ba3198a 	.word	0x3ba3198a
 80187c8:	6dc9c883 	.word	0x6dc9c883
 80187cc:	3fe45f30 	.word	0x3fe45f30
 80187d0:	2e000000 	.word	0x2e000000
 80187d4:	3ba3198a 	.word	0x3ba3198a
 80187d8:	252049c1 	.word	0x252049c1
 80187dc:	397b839a 	.word	0x397b839a
 80187e0:	3fe921fb 	.word	0x3fe921fb
 80187e4:	4002d97b 	.word	0x4002d97b
 80187e8:	3ff921fb 	.word	0x3ff921fb
 80187ec:	413921fb 	.word	0x413921fb
 80187f0:	3fe00000 	.word	0x3fe00000
 80187f4:	08049040 	.word	0x08049040
 80187f8:	7fefffff 	.word	0x7fefffff
 80187fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8018800:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8018804:	ee10 0a10 	vmov	r0, s0
 8018808:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801880c:	ee10 6a10 	vmov	r6, s0
 8018810:	460f      	mov	r7, r1
 8018812:	f7e8 f9c1 	bl	8000b98 <__aeabi_d2iz>
 8018816:	f7e7 fea5 	bl	8000564 <__aeabi_i2d>
 801881a:	4602      	mov	r2, r0
 801881c:	460b      	mov	r3, r1
 801881e:	4630      	mov	r0, r6
 8018820:	4639      	mov	r1, r7
 8018822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018826:	f7e7 fd4f 	bl	80002c8 <__aeabi_dsub>
 801882a:	4b23      	ldr	r3, [pc, #140]	; (80188b8 <__ieee754_rem_pio2+0x410>)
 801882c:	2200      	movs	r2, #0
 801882e:	f7e7 ff03 	bl	8000638 <__aeabi_dmul>
 8018832:	460f      	mov	r7, r1
 8018834:	4606      	mov	r6, r0
 8018836:	f7e8 f9af 	bl	8000b98 <__aeabi_d2iz>
 801883a:	f7e7 fe93 	bl	8000564 <__aeabi_i2d>
 801883e:	4602      	mov	r2, r0
 8018840:	460b      	mov	r3, r1
 8018842:	4630      	mov	r0, r6
 8018844:	4639      	mov	r1, r7
 8018846:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801884a:	f7e7 fd3d 	bl	80002c8 <__aeabi_dsub>
 801884e:	4b1a      	ldr	r3, [pc, #104]	; (80188b8 <__ieee754_rem_pio2+0x410>)
 8018850:	2200      	movs	r2, #0
 8018852:	f7e7 fef1 	bl	8000638 <__aeabi_dmul>
 8018856:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801885a:	ad04      	add	r5, sp, #16
 801885c:	f04f 0803 	mov.w	r8, #3
 8018860:	46a9      	mov	r9, r5
 8018862:	2600      	movs	r6, #0
 8018864:	2700      	movs	r7, #0
 8018866:	4632      	mov	r2, r6
 8018868:	463b      	mov	r3, r7
 801886a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801886e:	46c3      	mov	fp, r8
 8018870:	3d08      	subs	r5, #8
 8018872:	f108 38ff 	add.w	r8, r8, #4294967295
 8018876:	f7e8 f947 	bl	8000b08 <__aeabi_dcmpeq>
 801887a:	2800      	cmp	r0, #0
 801887c:	d1f3      	bne.n	8018866 <__ieee754_rem_pio2+0x3be>
 801887e:	4b0f      	ldr	r3, [pc, #60]	; (80188bc <__ieee754_rem_pio2+0x414>)
 8018880:	9301      	str	r3, [sp, #4]
 8018882:	2302      	movs	r3, #2
 8018884:	9300      	str	r3, [sp, #0]
 8018886:	4622      	mov	r2, r4
 8018888:	465b      	mov	r3, fp
 801888a:	4651      	mov	r1, sl
 801888c:	4648      	mov	r0, r9
 801888e:	f000 f993 	bl	8018bb8 <__kernel_rem_pio2>
 8018892:	9b02      	ldr	r3, [sp, #8]
 8018894:	2b00      	cmp	r3, #0
 8018896:	4683      	mov	fp, r0
 8018898:	f6bf ae46 	bge.w	8018528 <__ieee754_rem_pio2+0x80>
 801889c:	e9da 2100 	ldrd	r2, r1, [sl]
 80188a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188a4:	e9ca 2300 	strd	r2, r3, [sl]
 80188a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80188ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80188b4:	e73a      	b.n	801872c <__ieee754_rem_pio2+0x284>
 80188b6:	bf00      	nop
 80188b8:	41700000 	.word	0x41700000
 80188bc:	080490c0 	.word	0x080490c0

080188c0 <__ieee754_sqrt>:
 80188c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c4:	ec55 4b10 	vmov	r4, r5, d0
 80188c8:	4e55      	ldr	r6, [pc, #340]	; (8018a20 <__ieee754_sqrt+0x160>)
 80188ca:	43ae      	bics	r6, r5
 80188cc:	ee10 0a10 	vmov	r0, s0
 80188d0:	ee10 3a10 	vmov	r3, s0
 80188d4:	462a      	mov	r2, r5
 80188d6:	4629      	mov	r1, r5
 80188d8:	d110      	bne.n	80188fc <__ieee754_sqrt+0x3c>
 80188da:	ee10 2a10 	vmov	r2, s0
 80188de:	462b      	mov	r3, r5
 80188e0:	f7e7 feaa 	bl	8000638 <__aeabi_dmul>
 80188e4:	4602      	mov	r2, r0
 80188e6:	460b      	mov	r3, r1
 80188e8:	4620      	mov	r0, r4
 80188ea:	4629      	mov	r1, r5
 80188ec:	f7e7 fcee 	bl	80002cc <__adddf3>
 80188f0:	4604      	mov	r4, r0
 80188f2:	460d      	mov	r5, r1
 80188f4:	ec45 4b10 	vmov	d0, r4, r5
 80188f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188fc:	2d00      	cmp	r5, #0
 80188fe:	dc10      	bgt.n	8018922 <__ieee754_sqrt+0x62>
 8018900:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018904:	4330      	orrs	r0, r6
 8018906:	d0f5      	beq.n	80188f4 <__ieee754_sqrt+0x34>
 8018908:	b15d      	cbz	r5, 8018922 <__ieee754_sqrt+0x62>
 801890a:	ee10 2a10 	vmov	r2, s0
 801890e:	462b      	mov	r3, r5
 8018910:	ee10 0a10 	vmov	r0, s0
 8018914:	f7e7 fcd8 	bl	80002c8 <__aeabi_dsub>
 8018918:	4602      	mov	r2, r0
 801891a:	460b      	mov	r3, r1
 801891c:	f7e7 ffb6 	bl	800088c <__aeabi_ddiv>
 8018920:	e7e6      	b.n	80188f0 <__ieee754_sqrt+0x30>
 8018922:	1512      	asrs	r2, r2, #20
 8018924:	d074      	beq.n	8018a10 <__ieee754_sqrt+0x150>
 8018926:	07d4      	lsls	r4, r2, #31
 8018928:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801892c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018934:	bf5e      	ittt	pl
 8018936:	0fda      	lsrpl	r2, r3, #31
 8018938:	005b      	lslpl	r3, r3, #1
 801893a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801893e:	2400      	movs	r4, #0
 8018940:	0fda      	lsrs	r2, r3, #31
 8018942:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018946:	107f      	asrs	r7, r7, #1
 8018948:	005b      	lsls	r3, r3, #1
 801894a:	2516      	movs	r5, #22
 801894c:	4620      	mov	r0, r4
 801894e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018952:	1886      	adds	r6, r0, r2
 8018954:	428e      	cmp	r6, r1
 8018956:	bfde      	ittt	le
 8018958:	1b89      	suble	r1, r1, r6
 801895a:	18b0      	addle	r0, r6, r2
 801895c:	18a4      	addle	r4, r4, r2
 801895e:	0049      	lsls	r1, r1, #1
 8018960:	3d01      	subs	r5, #1
 8018962:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018966:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801896a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801896e:	d1f0      	bne.n	8018952 <__ieee754_sqrt+0x92>
 8018970:	462a      	mov	r2, r5
 8018972:	f04f 0e20 	mov.w	lr, #32
 8018976:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801897a:	4281      	cmp	r1, r0
 801897c:	eb06 0c05 	add.w	ip, r6, r5
 8018980:	dc02      	bgt.n	8018988 <__ieee754_sqrt+0xc8>
 8018982:	d113      	bne.n	80189ac <__ieee754_sqrt+0xec>
 8018984:	459c      	cmp	ip, r3
 8018986:	d811      	bhi.n	80189ac <__ieee754_sqrt+0xec>
 8018988:	f1bc 0f00 	cmp.w	ip, #0
 801898c:	eb0c 0506 	add.w	r5, ip, r6
 8018990:	da43      	bge.n	8018a1a <__ieee754_sqrt+0x15a>
 8018992:	2d00      	cmp	r5, #0
 8018994:	db41      	blt.n	8018a1a <__ieee754_sqrt+0x15a>
 8018996:	f100 0801 	add.w	r8, r0, #1
 801899a:	1a09      	subs	r1, r1, r0
 801899c:	459c      	cmp	ip, r3
 801899e:	bf88      	it	hi
 80189a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80189a4:	eba3 030c 	sub.w	r3, r3, ip
 80189a8:	4432      	add	r2, r6
 80189aa:	4640      	mov	r0, r8
 80189ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80189b0:	f1be 0e01 	subs.w	lr, lr, #1
 80189b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80189b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80189bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80189c0:	d1db      	bne.n	801897a <__ieee754_sqrt+0xba>
 80189c2:	430b      	orrs	r3, r1
 80189c4:	d006      	beq.n	80189d4 <__ieee754_sqrt+0x114>
 80189c6:	1c50      	adds	r0, r2, #1
 80189c8:	bf13      	iteet	ne
 80189ca:	3201      	addne	r2, #1
 80189cc:	3401      	addeq	r4, #1
 80189ce:	4672      	moveq	r2, lr
 80189d0:	f022 0201 	bicne.w	r2, r2, #1
 80189d4:	1063      	asrs	r3, r4, #1
 80189d6:	0852      	lsrs	r2, r2, #1
 80189d8:	07e1      	lsls	r1, r4, #31
 80189da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80189de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80189e2:	bf48      	it	mi
 80189e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80189e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80189ec:	4614      	mov	r4, r2
 80189ee:	e781      	b.n	80188f4 <__ieee754_sqrt+0x34>
 80189f0:	0ad9      	lsrs	r1, r3, #11
 80189f2:	3815      	subs	r0, #21
 80189f4:	055b      	lsls	r3, r3, #21
 80189f6:	2900      	cmp	r1, #0
 80189f8:	d0fa      	beq.n	80189f0 <__ieee754_sqrt+0x130>
 80189fa:	02cd      	lsls	r5, r1, #11
 80189fc:	d50a      	bpl.n	8018a14 <__ieee754_sqrt+0x154>
 80189fe:	f1c2 0420 	rsb	r4, r2, #32
 8018a02:	fa23 f404 	lsr.w	r4, r3, r4
 8018a06:	1e55      	subs	r5, r2, #1
 8018a08:	4093      	lsls	r3, r2
 8018a0a:	4321      	orrs	r1, r4
 8018a0c:	1b42      	subs	r2, r0, r5
 8018a0e:	e78a      	b.n	8018926 <__ieee754_sqrt+0x66>
 8018a10:	4610      	mov	r0, r2
 8018a12:	e7f0      	b.n	80189f6 <__ieee754_sqrt+0x136>
 8018a14:	0049      	lsls	r1, r1, #1
 8018a16:	3201      	adds	r2, #1
 8018a18:	e7ef      	b.n	80189fa <__ieee754_sqrt+0x13a>
 8018a1a:	4680      	mov	r8, r0
 8018a1c:	e7bd      	b.n	801899a <__ieee754_sqrt+0xda>
 8018a1e:	bf00      	nop
 8018a20:	7ff00000 	.word	0x7ff00000
 8018a24:	00000000 	.word	0x00000000

08018a28 <__kernel_cos>:
 8018a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a2c:	ec57 6b10 	vmov	r6, r7, d0
 8018a30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8018a34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8018a38:	ed8d 1b00 	vstr	d1, [sp]
 8018a3c:	da07      	bge.n	8018a4e <__kernel_cos+0x26>
 8018a3e:	ee10 0a10 	vmov	r0, s0
 8018a42:	4639      	mov	r1, r7
 8018a44:	f7e8 f8a8 	bl	8000b98 <__aeabi_d2iz>
 8018a48:	2800      	cmp	r0, #0
 8018a4a:	f000 8088 	beq.w	8018b5e <__kernel_cos+0x136>
 8018a4e:	4632      	mov	r2, r6
 8018a50:	463b      	mov	r3, r7
 8018a52:	4630      	mov	r0, r6
 8018a54:	4639      	mov	r1, r7
 8018a56:	f7e7 fdef 	bl	8000638 <__aeabi_dmul>
 8018a5a:	4b51      	ldr	r3, [pc, #324]	; (8018ba0 <__kernel_cos+0x178>)
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	4604      	mov	r4, r0
 8018a60:	460d      	mov	r5, r1
 8018a62:	f7e7 fde9 	bl	8000638 <__aeabi_dmul>
 8018a66:	a340      	add	r3, pc, #256	; (adr r3, 8018b68 <__kernel_cos+0x140>)
 8018a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a6c:	4682      	mov	sl, r0
 8018a6e:	468b      	mov	fp, r1
 8018a70:	4620      	mov	r0, r4
 8018a72:	4629      	mov	r1, r5
 8018a74:	f7e7 fde0 	bl	8000638 <__aeabi_dmul>
 8018a78:	a33d      	add	r3, pc, #244	; (adr r3, 8018b70 <__kernel_cos+0x148>)
 8018a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a7e:	f7e7 fc25 	bl	80002cc <__adddf3>
 8018a82:	4622      	mov	r2, r4
 8018a84:	462b      	mov	r3, r5
 8018a86:	f7e7 fdd7 	bl	8000638 <__aeabi_dmul>
 8018a8a:	a33b      	add	r3, pc, #236	; (adr r3, 8018b78 <__kernel_cos+0x150>)
 8018a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a90:	f7e7 fc1a 	bl	80002c8 <__aeabi_dsub>
 8018a94:	4622      	mov	r2, r4
 8018a96:	462b      	mov	r3, r5
 8018a98:	f7e7 fdce 	bl	8000638 <__aeabi_dmul>
 8018a9c:	a338      	add	r3, pc, #224	; (adr r3, 8018b80 <__kernel_cos+0x158>)
 8018a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa2:	f7e7 fc13 	bl	80002cc <__adddf3>
 8018aa6:	4622      	mov	r2, r4
 8018aa8:	462b      	mov	r3, r5
 8018aaa:	f7e7 fdc5 	bl	8000638 <__aeabi_dmul>
 8018aae:	a336      	add	r3, pc, #216	; (adr r3, 8018b88 <__kernel_cos+0x160>)
 8018ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab4:	f7e7 fc08 	bl	80002c8 <__aeabi_dsub>
 8018ab8:	4622      	mov	r2, r4
 8018aba:	462b      	mov	r3, r5
 8018abc:	f7e7 fdbc 	bl	8000638 <__aeabi_dmul>
 8018ac0:	a333      	add	r3, pc, #204	; (adr r3, 8018b90 <__kernel_cos+0x168>)
 8018ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac6:	f7e7 fc01 	bl	80002cc <__adddf3>
 8018aca:	4622      	mov	r2, r4
 8018acc:	462b      	mov	r3, r5
 8018ace:	f7e7 fdb3 	bl	8000638 <__aeabi_dmul>
 8018ad2:	4622      	mov	r2, r4
 8018ad4:	462b      	mov	r3, r5
 8018ad6:	f7e7 fdaf 	bl	8000638 <__aeabi_dmul>
 8018ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ade:	4604      	mov	r4, r0
 8018ae0:	460d      	mov	r5, r1
 8018ae2:	4630      	mov	r0, r6
 8018ae4:	4639      	mov	r1, r7
 8018ae6:	f7e7 fda7 	bl	8000638 <__aeabi_dmul>
 8018aea:	460b      	mov	r3, r1
 8018aec:	4602      	mov	r2, r0
 8018aee:	4629      	mov	r1, r5
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7e7 fbe9 	bl	80002c8 <__aeabi_dsub>
 8018af6:	4b2b      	ldr	r3, [pc, #172]	; (8018ba4 <__kernel_cos+0x17c>)
 8018af8:	4598      	cmp	r8, r3
 8018afa:	4606      	mov	r6, r0
 8018afc:	460f      	mov	r7, r1
 8018afe:	dc10      	bgt.n	8018b22 <__kernel_cos+0xfa>
 8018b00:	4602      	mov	r2, r0
 8018b02:	460b      	mov	r3, r1
 8018b04:	4650      	mov	r0, sl
 8018b06:	4659      	mov	r1, fp
 8018b08:	f7e7 fbde 	bl	80002c8 <__aeabi_dsub>
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	4926      	ldr	r1, [pc, #152]	; (8018ba8 <__kernel_cos+0x180>)
 8018b10:	4602      	mov	r2, r0
 8018b12:	2000      	movs	r0, #0
 8018b14:	f7e7 fbd8 	bl	80002c8 <__aeabi_dsub>
 8018b18:	ec41 0b10 	vmov	d0, r0, r1
 8018b1c:	b003      	add	sp, #12
 8018b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b22:	4b22      	ldr	r3, [pc, #136]	; (8018bac <__kernel_cos+0x184>)
 8018b24:	4920      	ldr	r1, [pc, #128]	; (8018ba8 <__kernel_cos+0x180>)
 8018b26:	4598      	cmp	r8, r3
 8018b28:	bfcc      	ite	gt
 8018b2a:	4d21      	ldrgt	r5, [pc, #132]	; (8018bb0 <__kernel_cos+0x188>)
 8018b2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8018b30:	2400      	movs	r4, #0
 8018b32:	4622      	mov	r2, r4
 8018b34:	462b      	mov	r3, r5
 8018b36:	2000      	movs	r0, #0
 8018b38:	f7e7 fbc6 	bl	80002c8 <__aeabi_dsub>
 8018b3c:	4622      	mov	r2, r4
 8018b3e:	4680      	mov	r8, r0
 8018b40:	4689      	mov	r9, r1
 8018b42:	462b      	mov	r3, r5
 8018b44:	4650      	mov	r0, sl
 8018b46:	4659      	mov	r1, fp
 8018b48:	f7e7 fbbe 	bl	80002c8 <__aeabi_dsub>
 8018b4c:	4632      	mov	r2, r6
 8018b4e:	463b      	mov	r3, r7
 8018b50:	f7e7 fbba 	bl	80002c8 <__aeabi_dsub>
 8018b54:	4602      	mov	r2, r0
 8018b56:	460b      	mov	r3, r1
 8018b58:	4640      	mov	r0, r8
 8018b5a:	4649      	mov	r1, r9
 8018b5c:	e7da      	b.n	8018b14 <__kernel_cos+0xec>
 8018b5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018b98 <__kernel_cos+0x170>
 8018b62:	e7db      	b.n	8018b1c <__kernel_cos+0xf4>
 8018b64:	f3af 8000 	nop.w
 8018b68:	be8838d4 	.word	0xbe8838d4
 8018b6c:	bda8fae9 	.word	0xbda8fae9
 8018b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8018b74:	3e21ee9e 	.word	0x3e21ee9e
 8018b78:	809c52ad 	.word	0x809c52ad
 8018b7c:	3e927e4f 	.word	0x3e927e4f
 8018b80:	19cb1590 	.word	0x19cb1590
 8018b84:	3efa01a0 	.word	0x3efa01a0
 8018b88:	16c15177 	.word	0x16c15177
 8018b8c:	3f56c16c 	.word	0x3f56c16c
 8018b90:	5555554c 	.word	0x5555554c
 8018b94:	3fa55555 	.word	0x3fa55555
 8018b98:	00000000 	.word	0x00000000
 8018b9c:	3ff00000 	.word	0x3ff00000
 8018ba0:	3fe00000 	.word	0x3fe00000
 8018ba4:	3fd33332 	.word	0x3fd33332
 8018ba8:	3ff00000 	.word	0x3ff00000
 8018bac:	3fe90000 	.word	0x3fe90000
 8018bb0:	3fd20000 	.word	0x3fd20000
 8018bb4:	00000000 	.word	0x00000000

08018bb8 <__kernel_rem_pio2>:
 8018bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bbc:	ed2d 8b02 	vpush	{d8}
 8018bc0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8018bc4:	f112 0f14 	cmn.w	r2, #20
 8018bc8:	9308      	str	r3, [sp, #32]
 8018bca:	9101      	str	r1, [sp, #4]
 8018bcc:	4bc4      	ldr	r3, [pc, #784]	; (8018ee0 <__kernel_rem_pio2+0x328>)
 8018bce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018bd0:	900b      	str	r0, [sp, #44]	; 0x2c
 8018bd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018bd6:	9302      	str	r3, [sp, #8]
 8018bd8:	9b08      	ldr	r3, [sp, #32]
 8018bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8018bde:	bfa8      	it	ge
 8018be0:	1ed4      	subge	r4, r2, #3
 8018be2:	9306      	str	r3, [sp, #24]
 8018be4:	bfb2      	itee	lt
 8018be6:	2400      	movlt	r4, #0
 8018be8:	2318      	movge	r3, #24
 8018bea:	fb94 f4f3 	sdivge	r4, r4, r3
 8018bee:	f06f 0317 	mvn.w	r3, #23
 8018bf2:	fb04 3303 	mla	r3, r4, r3, r3
 8018bf6:	eb03 0a02 	add.w	sl, r3, r2
 8018bfa:	9b02      	ldr	r3, [sp, #8]
 8018bfc:	9a06      	ldr	r2, [sp, #24]
 8018bfe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8018ed0 <__kernel_rem_pio2+0x318>
 8018c02:	eb03 0802 	add.w	r8, r3, r2
 8018c06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018c08:	1aa7      	subs	r7, r4, r2
 8018c0a:	ae22      	add	r6, sp, #136	; 0x88
 8018c0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018c10:	2500      	movs	r5, #0
 8018c12:	4545      	cmp	r5, r8
 8018c14:	dd13      	ble.n	8018c3e <__kernel_rem_pio2+0x86>
 8018c16:	9b08      	ldr	r3, [sp, #32]
 8018c18:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8018ed0 <__kernel_rem_pio2+0x318>
 8018c1c:	aa22      	add	r2, sp, #136	; 0x88
 8018c1e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8018c22:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8018c26:	f04f 0800 	mov.w	r8, #0
 8018c2a:	9b02      	ldr	r3, [sp, #8]
 8018c2c:	4598      	cmp	r8, r3
 8018c2e:	dc2f      	bgt.n	8018c90 <__kernel_rem_pio2+0xd8>
 8018c30:	ed8d 8b04 	vstr	d8, [sp, #16]
 8018c34:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8018c38:	462f      	mov	r7, r5
 8018c3a:	2600      	movs	r6, #0
 8018c3c:	e01b      	b.n	8018c76 <__kernel_rem_pio2+0xbe>
 8018c3e:	42ef      	cmn	r7, r5
 8018c40:	d407      	bmi.n	8018c52 <__kernel_rem_pio2+0x9a>
 8018c42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018c46:	f7e7 fc8d 	bl	8000564 <__aeabi_i2d>
 8018c4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018c4e:	3501      	adds	r5, #1
 8018c50:	e7df      	b.n	8018c12 <__kernel_rem_pio2+0x5a>
 8018c52:	ec51 0b18 	vmov	r0, r1, d8
 8018c56:	e7f8      	b.n	8018c4a <__kernel_rem_pio2+0x92>
 8018c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8018c60:	f7e7 fcea 	bl	8000638 <__aeabi_dmul>
 8018c64:	4602      	mov	r2, r0
 8018c66:	460b      	mov	r3, r1
 8018c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c6c:	f7e7 fb2e 	bl	80002cc <__adddf3>
 8018c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c74:	3601      	adds	r6, #1
 8018c76:	9b06      	ldr	r3, [sp, #24]
 8018c78:	429e      	cmp	r6, r3
 8018c7a:	f1a7 0708 	sub.w	r7, r7, #8
 8018c7e:	ddeb      	ble.n	8018c58 <__kernel_rem_pio2+0xa0>
 8018c80:	ed9d 7b04 	vldr	d7, [sp, #16]
 8018c84:	f108 0801 	add.w	r8, r8, #1
 8018c88:	ecab 7b02 	vstmia	fp!, {d7}
 8018c8c:	3508      	adds	r5, #8
 8018c8e:	e7cc      	b.n	8018c2a <__kernel_rem_pio2+0x72>
 8018c90:	9b02      	ldr	r3, [sp, #8]
 8018c92:	aa0e      	add	r2, sp, #56	; 0x38
 8018c94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c98:	930d      	str	r3, [sp, #52]	; 0x34
 8018c9a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018c9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018ca0:	9c02      	ldr	r4, [sp, #8]
 8018ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8018ca4:	00e3      	lsls	r3, r4, #3
 8018ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8018ca8:	ab9a      	add	r3, sp, #616	; 0x268
 8018caa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018cae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8018cb2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018cb6:	ab72      	add	r3, sp, #456	; 0x1c8
 8018cb8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8018cbc:	46c3      	mov	fp, r8
 8018cbe:	46a1      	mov	r9, r4
 8018cc0:	f1b9 0f00 	cmp.w	r9, #0
 8018cc4:	f1a5 0508 	sub.w	r5, r5, #8
 8018cc8:	dc77      	bgt.n	8018dba <__kernel_rem_pio2+0x202>
 8018cca:	ec47 6b10 	vmov	d0, r6, r7
 8018cce:	4650      	mov	r0, sl
 8018cd0:	f000 fe52 	bl	8019978 <scalbn>
 8018cd4:	ec57 6b10 	vmov	r6, r7, d0
 8018cd8:	2200      	movs	r2, #0
 8018cda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018cde:	ee10 0a10 	vmov	r0, s0
 8018ce2:	4639      	mov	r1, r7
 8018ce4:	f7e7 fca8 	bl	8000638 <__aeabi_dmul>
 8018ce8:	ec41 0b10 	vmov	d0, r0, r1
 8018cec:	f000 fdc4 	bl	8019878 <floor>
 8018cf0:	4b7c      	ldr	r3, [pc, #496]	; (8018ee4 <__kernel_rem_pio2+0x32c>)
 8018cf2:	ec51 0b10 	vmov	r0, r1, d0
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	f7e7 fc9e 	bl	8000638 <__aeabi_dmul>
 8018cfc:	4602      	mov	r2, r0
 8018cfe:	460b      	mov	r3, r1
 8018d00:	4630      	mov	r0, r6
 8018d02:	4639      	mov	r1, r7
 8018d04:	f7e7 fae0 	bl	80002c8 <__aeabi_dsub>
 8018d08:	460f      	mov	r7, r1
 8018d0a:	4606      	mov	r6, r0
 8018d0c:	f7e7 ff44 	bl	8000b98 <__aeabi_d2iz>
 8018d10:	9004      	str	r0, [sp, #16]
 8018d12:	f7e7 fc27 	bl	8000564 <__aeabi_i2d>
 8018d16:	4602      	mov	r2, r0
 8018d18:	460b      	mov	r3, r1
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	4639      	mov	r1, r7
 8018d1e:	f7e7 fad3 	bl	80002c8 <__aeabi_dsub>
 8018d22:	f1ba 0f00 	cmp.w	sl, #0
 8018d26:	4606      	mov	r6, r0
 8018d28:	460f      	mov	r7, r1
 8018d2a:	dd6d      	ble.n	8018e08 <__kernel_rem_pio2+0x250>
 8018d2c:	1e62      	subs	r2, r4, #1
 8018d2e:	ab0e      	add	r3, sp, #56	; 0x38
 8018d30:	9d04      	ldr	r5, [sp, #16]
 8018d32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018d36:	f1ca 0118 	rsb	r1, sl, #24
 8018d3a:	fa40 f301 	asr.w	r3, r0, r1
 8018d3e:	441d      	add	r5, r3
 8018d40:	408b      	lsls	r3, r1
 8018d42:	1ac0      	subs	r0, r0, r3
 8018d44:	ab0e      	add	r3, sp, #56	; 0x38
 8018d46:	9504      	str	r5, [sp, #16]
 8018d48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018d4c:	f1ca 0317 	rsb	r3, sl, #23
 8018d50:	fa40 fb03 	asr.w	fp, r0, r3
 8018d54:	f1bb 0f00 	cmp.w	fp, #0
 8018d58:	dd65      	ble.n	8018e26 <__kernel_rem_pio2+0x26e>
 8018d5a:	9b04      	ldr	r3, [sp, #16]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	3301      	adds	r3, #1
 8018d60:	9304      	str	r3, [sp, #16]
 8018d62:	4615      	mov	r5, r2
 8018d64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018d68:	4294      	cmp	r4, r2
 8018d6a:	f300 809c 	bgt.w	8018ea6 <__kernel_rem_pio2+0x2ee>
 8018d6e:	f1ba 0f00 	cmp.w	sl, #0
 8018d72:	dd07      	ble.n	8018d84 <__kernel_rem_pio2+0x1cc>
 8018d74:	f1ba 0f01 	cmp.w	sl, #1
 8018d78:	f000 80c0 	beq.w	8018efc <__kernel_rem_pio2+0x344>
 8018d7c:	f1ba 0f02 	cmp.w	sl, #2
 8018d80:	f000 80c6 	beq.w	8018f10 <__kernel_rem_pio2+0x358>
 8018d84:	f1bb 0f02 	cmp.w	fp, #2
 8018d88:	d14d      	bne.n	8018e26 <__kernel_rem_pio2+0x26e>
 8018d8a:	4632      	mov	r2, r6
 8018d8c:	463b      	mov	r3, r7
 8018d8e:	4956      	ldr	r1, [pc, #344]	; (8018ee8 <__kernel_rem_pio2+0x330>)
 8018d90:	2000      	movs	r0, #0
 8018d92:	f7e7 fa99 	bl	80002c8 <__aeabi_dsub>
 8018d96:	4606      	mov	r6, r0
 8018d98:	460f      	mov	r7, r1
 8018d9a:	2d00      	cmp	r5, #0
 8018d9c:	d043      	beq.n	8018e26 <__kernel_rem_pio2+0x26e>
 8018d9e:	4650      	mov	r0, sl
 8018da0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8018ed8 <__kernel_rem_pio2+0x320>
 8018da4:	f000 fde8 	bl	8019978 <scalbn>
 8018da8:	4630      	mov	r0, r6
 8018daa:	4639      	mov	r1, r7
 8018dac:	ec53 2b10 	vmov	r2, r3, d0
 8018db0:	f7e7 fa8a 	bl	80002c8 <__aeabi_dsub>
 8018db4:	4606      	mov	r6, r0
 8018db6:	460f      	mov	r7, r1
 8018db8:	e035      	b.n	8018e26 <__kernel_rem_pio2+0x26e>
 8018dba:	4b4c      	ldr	r3, [pc, #304]	; (8018eec <__kernel_rem_pio2+0x334>)
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	4639      	mov	r1, r7
 8018dc2:	f7e7 fc39 	bl	8000638 <__aeabi_dmul>
 8018dc6:	f7e7 fee7 	bl	8000b98 <__aeabi_d2iz>
 8018dca:	f7e7 fbcb 	bl	8000564 <__aeabi_i2d>
 8018dce:	4602      	mov	r2, r0
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	ec43 2b18 	vmov	d8, r2, r3
 8018dd6:	4b46      	ldr	r3, [pc, #280]	; (8018ef0 <__kernel_rem_pio2+0x338>)
 8018dd8:	2200      	movs	r2, #0
 8018dda:	f7e7 fc2d 	bl	8000638 <__aeabi_dmul>
 8018dde:	4602      	mov	r2, r0
 8018de0:	460b      	mov	r3, r1
 8018de2:	4630      	mov	r0, r6
 8018de4:	4639      	mov	r1, r7
 8018de6:	f7e7 fa6f 	bl	80002c8 <__aeabi_dsub>
 8018dea:	f7e7 fed5 	bl	8000b98 <__aeabi_d2iz>
 8018dee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018df2:	f84b 0b04 	str.w	r0, [fp], #4
 8018df6:	ec51 0b18 	vmov	r0, r1, d8
 8018dfa:	f7e7 fa67 	bl	80002cc <__adddf3>
 8018dfe:	f109 39ff 	add.w	r9, r9, #4294967295
 8018e02:	4606      	mov	r6, r0
 8018e04:	460f      	mov	r7, r1
 8018e06:	e75b      	b.n	8018cc0 <__kernel_rem_pio2+0x108>
 8018e08:	d106      	bne.n	8018e18 <__kernel_rem_pio2+0x260>
 8018e0a:	1e63      	subs	r3, r4, #1
 8018e0c:	aa0e      	add	r2, sp, #56	; 0x38
 8018e0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018e12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8018e16:	e79d      	b.n	8018d54 <__kernel_rem_pio2+0x19c>
 8018e18:	4b36      	ldr	r3, [pc, #216]	; (8018ef4 <__kernel_rem_pio2+0x33c>)
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	f7e7 fe92 	bl	8000b44 <__aeabi_dcmpge>
 8018e20:	2800      	cmp	r0, #0
 8018e22:	d13d      	bne.n	8018ea0 <__kernel_rem_pio2+0x2e8>
 8018e24:	4683      	mov	fp, r0
 8018e26:	2200      	movs	r2, #0
 8018e28:	2300      	movs	r3, #0
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	4639      	mov	r1, r7
 8018e2e:	f7e7 fe6b 	bl	8000b08 <__aeabi_dcmpeq>
 8018e32:	2800      	cmp	r0, #0
 8018e34:	f000 80c0 	beq.w	8018fb8 <__kernel_rem_pio2+0x400>
 8018e38:	1e65      	subs	r5, r4, #1
 8018e3a:	462b      	mov	r3, r5
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	9902      	ldr	r1, [sp, #8]
 8018e40:	428b      	cmp	r3, r1
 8018e42:	da6c      	bge.n	8018f1e <__kernel_rem_pio2+0x366>
 8018e44:	2a00      	cmp	r2, #0
 8018e46:	f000 8089 	beq.w	8018f5c <__kernel_rem_pio2+0x3a4>
 8018e4a:	ab0e      	add	r3, sp, #56	; 0x38
 8018e4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8018e50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	f000 80ad 	beq.w	8018fb4 <__kernel_rem_pio2+0x3fc>
 8018e5a:	4650      	mov	r0, sl
 8018e5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8018ed8 <__kernel_rem_pio2+0x320>
 8018e60:	f000 fd8a 	bl	8019978 <scalbn>
 8018e64:	ab9a      	add	r3, sp, #616	; 0x268
 8018e66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018e6a:	ec57 6b10 	vmov	r6, r7, d0
 8018e6e:	00ec      	lsls	r4, r5, #3
 8018e70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8018e74:	46aa      	mov	sl, r5
 8018e76:	f1ba 0f00 	cmp.w	sl, #0
 8018e7a:	f280 80d6 	bge.w	801902a <__kernel_rem_pio2+0x472>
 8018e7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8018ed0 <__kernel_rem_pio2+0x318>
 8018e82:	462e      	mov	r6, r5
 8018e84:	2e00      	cmp	r6, #0
 8018e86:	f2c0 8104 	blt.w	8019092 <__kernel_rem_pio2+0x4da>
 8018e8a:	ab72      	add	r3, sp, #456	; 0x1c8
 8018e8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8018e90:	f8df a064 	ldr.w	sl, [pc, #100]	; 8018ef8 <__kernel_rem_pio2+0x340>
 8018e94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8018e98:	f04f 0800 	mov.w	r8, #0
 8018e9c:	1baf      	subs	r7, r5, r6
 8018e9e:	e0ea      	b.n	8019076 <__kernel_rem_pio2+0x4be>
 8018ea0:	f04f 0b02 	mov.w	fp, #2
 8018ea4:	e759      	b.n	8018d5a <__kernel_rem_pio2+0x1a2>
 8018ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8018eaa:	b955      	cbnz	r5, 8018ec2 <__kernel_rem_pio2+0x30a>
 8018eac:	b123      	cbz	r3, 8018eb8 <__kernel_rem_pio2+0x300>
 8018eae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018eb2:	f8c8 3000 	str.w	r3, [r8]
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	3201      	adds	r2, #1
 8018eba:	f108 0804 	add.w	r8, r8, #4
 8018ebe:	461d      	mov	r5, r3
 8018ec0:	e752      	b.n	8018d68 <__kernel_rem_pio2+0x1b0>
 8018ec2:	1acb      	subs	r3, r1, r3
 8018ec4:	f8c8 3000 	str.w	r3, [r8]
 8018ec8:	462b      	mov	r3, r5
 8018eca:	e7f5      	b.n	8018eb8 <__kernel_rem_pio2+0x300>
 8018ecc:	f3af 8000 	nop.w
	...
 8018edc:	3ff00000 	.word	0x3ff00000
 8018ee0:	08049208 	.word	0x08049208
 8018ee4:	40200000 	.word	0x40200000
 8018ee8:	3ff00000 	.word	0x3ff00000
 8018eec:	3e700000 	.word	0x3e700000
 8018ef0:	41700000 	.word	0x41700000
 8018ef4:	3fe00000 	.word	0x3fe00000
 8018ef8:	080491c8 	.word	0x080491c8
 8018efc:	1e62      	subs	r2, r4, #1
 8018efe:	ab0e      	add	r3, sp, #56	; 0x38
 8018f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018f08:	a90e      	add	r1, sp, #56	; 0x38
 8018f0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018f0e:	e739      	b.n	8018d84 <__kernel_rem_pio2+0x1cc>
 8018f10:	1e62      	subs	r2, r4, #1
 8018f12:	ab0e      	add	r3, sp, #56	; 0x38
 8018f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018f1c:	e7f4      	b.n	8018f08 <__kernel_rem_pio2+0x350>
 8018f1e:	a90e      	add	r1, sp, #56	; 0x38
 8018f20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018f24:	3b01      	subs	r3, #1
 8018f26:	430a      	orrs	r2, r1
 8018f28:	e789      	b.n	8018e3e <__kernel_rem_pio2+0x286>
 8018f2a:	3301      	adds	r3, #1
 8018f2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018f30:	2900      	cmp	r1, #0
 8018f32:	d0fa      	beq.n	8018f2a <__kernel_rem_pio2+0x372>
 8018f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8018f3a:	446a      	add	r2, sp
 8018f3c:	3a98      	subs	r2, #152	; 0x98
 8018f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8018f40:	9a08      	ldr	r2, [sp, #32]
 8018f42:	18e3      	adds	r3, r4, r3
 8018f44:	18a5      	adds	r5, r4, r2
 8018f46:	aa22      	add	r2, sp, #136	; 0x88
 8018f48:	f104 0801 	add.w	r8, r4, #1
 8018f4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8018f50:	9304      	str	r3, [sp, #16]
 8018f52:	9b04      	ldr	r3, [sp, #16]
 8018f54:	4543      	cmp	r3, r8
 8018f56:	da04      	bge.n	8018f62 <__kernel_rem_pio2+0x3aa>
 8018f58:	461c      	mov	r4, r3
 8018f5a:	e6a3      	b.n	8018ca4 <__kernel_rem_pio2+0xec>
 8018f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f5e:	2301      	movs	r3, #1
 8018f60:	e7e4      	b.n	8018f2c <__kernel_rem_pio2+0x374>
 8018f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018f64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f68:	f7e7 fafc 	bl	8000564 <__aeabi_i2d>
 8018f6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8018f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f72:	46ab      	mov	fp, r5
 8018f74:	461c      	mov	r4, r3
 8018f76:	f04f 0900 	mov.w	r9, #0
 8018f7a:	2600      	movs	r6, #0
 8018f7c:	2700      	movs	r7, #0
 8018f7e:	9b06      	ldr	r3, [sp, #24]
 8018f80:	4599      	cmp	r9, r3
 8018f82:	dd06      	ble.n	8018f92 <__kernel_rem_pio2+0x3da>
 8018f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f86:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018f8a:	f108 0801 	add.w	r8, r8, #1
 8018f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8018f90:	e7df      	b.n	8018f52 <__kernel_rem_pio2+0x39a>
 8018f92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018f96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018f9a:	f7e7 fb4d 	bl	8000638 <__aeabi_dmul>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	4639      	mov	r1, r7
 8018fa6:	f7e7 f991 	bl	80002cc <__adddf3>
 8018faa:	f109 0901 	add.w	r9, r9, #1
 8018fae:	4606      	mov	r6, r0
 8018fb0:	460f      	mov	r7, r1
 8018fb2:	e7e4      	b.n	8018f7e <__kernel_rem_pio2+0x3c6>
 8018fb4:	3d01      	subs	r5, #1
 8018fb6:	e748      	b.n	8018e4a <__kernel_rem_pio2+0x292>
 8018fb8:	ec47 6b10 	vmov	d0, r6, r7
 8018fbc:	f1ca 0000 	rsb	r0, sl, #0
 8018fc0:	f000 fcda 	bl	8019978 <scalbn>
 8018fc4:	ec57 6b10 	vmov	r6, r7, d0
 8018fc8:	4ba0      	ldr	r3, [pc, #640]	; (801924c <__kernel_rem_pio2+0x694>)
 8018fca:	ee10 0a10 	vmov	r0, s0
 8018fce:	2200      	movs	r2, #0
 8018fd0:	4639      	mov	r1, r7
 8018fd2:	f7e7 fdb7 	bl	8000b44 <__aeabi_dcmpge>
 8018fd6:	b1f8      	cbz	r0, 8019018 <__kernel_rem_pio2+0x460>
 8018fd8:	4b9d      	ldr	r3, [pc, #628]	; (8019250 <__kernel_rem_pio2+0x698>)
 8018fda:	2200      	movs	r2, #0
 8018fdc:	4630      	mov	r0, r6
 8018fde:	4639      	mov	r1, r7
 8018fe0:	f7e7 fb2a 	bl	8000638 <__aeabi_dmul>
 8018fe4:	f7e7 fdd8 	bl	8000b98 <__aeabi_d2iz>
 8018fe8:	4680      	mov	r8, r0
 8018fea:	f7e7 fabb 	bl	8000564 <__aeabi_i2d>
 8018fee:	4b97      	ldr	r3, [pc, #604]	; (801924c <__kernel_rem_pio2+0x694>)
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f7e7 fb21 	bl	8000638 <__aeabi_dmul>
 8018ff6:	460b      	mov	r3, r1
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	4639      	mov	r1, r7
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f7e7 f963 	bl	80002c8 <__aeabi_dsub>
 8019002:	f7e7 fdc9 	bl	8000b98 <__aeabi_d2iz>
 8019006:	1c65      	adds	r5, r4, #1
 8019008:	ab0e      	add	r3, sp, #56	; 0x38
 801900a:	f10a 0a18 	add.w	sl, sl, #24
 801900e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019012:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8019016:	e720      	b.n	8018e5a <__kernel_rem_pio2+0x2a2>
 8019018:	4630      	mov	r0, r6
 801901a:	4639      	mov	r1, r7
 801901c:	f7e7 fdbc 	bl	8000b98 <__aeabi_d2iz>
 8019020:	ab0e      	add	r3, sp, #56	; 0x38
 8019022:	4625      	mov	r5, r4
 8019024:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019028:	e717      	b.n	8018e5a <__kernel_rem_pio2+0x2a2>
 801902a:	ab0e      	add	r3, sp, #56	; 0x38
 801902c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8019030:	f7e7 fa98 	bl	8000564 <__aeabi_i2d>
 8019034:	4632      	mov	r2, r6
 8019036:	463b      	mov	r3, r7
 8019038:	f7e7 fafe 	bl	8000638 <__aeabi_dmul>
 801903c:	4b84      	ldr	r3, [pc, #528]	; (8019250 <__kernel_rem_pio2+0x698>)
 801903e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8019042:	2200      	movs	r2, #0
 8019044:	4630      	mov	r0, r6
 8019046:	4639      	mov	r1, r7
 8019048:	f7e7 faf6 	bl	8000638 <__aeabi_dmul>
 801904c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019050:	4606      	mov	r6, r0
 8019052:	460f      	mov	r7, r1
 8019054:	e70f      	b.n	8018e76 <__kernel_rem_pio2+0x2be>
 8019056:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801905a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801905e:	f7e7 faeb 	bl	8000638 <__aeabi_dmul>
 8019062:	4602      	mov	r2, r0
 8019064:	460b      	mov	r3, r1
 8019066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801906a:	f7e7 f92f 	bl	80002cc <__adddf3>
 801906e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019072:	f108 0801 	add.w	r8, r8, #1
 8019076:	9b02      	ldr	r3, [sp, #8]
 8019078:	4598      	cmp	r8, r3
 801907a:	dc01      	bgt.n	8019080 <__kernel_rem_pio2+0x4c8>
 801907c:	45b8      	cmp	r8, r7
 801907e:	ddea      	ble.n	8019056 <__kernel_rem_pio2+0x49e>
 8019080:	ed9d 7b06 	vldr	d7, [sp, #24]
 8019084:	ab4a      	add	r3, sp, #296	; 0x128
 8019086:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801908a:	ed87 7b00 	vstr	d7, [r7]
 801908e:	3e01      	subs	r6, #1
 8019090:	e6f8      	b.n	8018e84 <__kernel_rem_pio2+0x2cc>
 8019092:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8019094:	2b02      	cmp	r3, #2
 8019096:	dc0b      	bgt.n	80190b0 <__kernel_rem_pio2+0x4f8>
 8019098:	2b00      	cmp	r3, #0
 801909a:	dc35      	bgt.n	8019108 <__kernel_rem_pio2+0x550>
 801909c:	d059      	beq.n	8019152 <__kernel_rem_pio2+0x59a>
 801909e:	9b04      	ldr	r3, [sp, #16]
 80190a0:	f003 0007 	and.w	r0, r3, #7
 80190a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80190a8:	ecbd 8b02 	vpop	{d8}
 80190ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80190b2:	2b03      	cmp	r3, #3
 80190b4:	d1f3      	bne.n	801909e <__kernel_rem_pio2+0x4e6>
 80190b6:	ab4a      	add	r3, sp, #296	; 0x128
 80190b8:	4423      	add	r3, r4
 80190ba:	9306      	str	r3, [sp, #24]
 80190bc:	461c      	mov	r4, r3
 80190be:	469a      	mov	sl, r3
 80190c0:	9502      	str	r5, [sp, #8]
 80190c2:	9b02      	ldr	r3, [sp, #8]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80190ca:	dc6b      	bgt.n	80191a4 <__kernel_rem_pio2+0x5ec>
 80190cc:	46aa      	mov	sl, r5
 80190ce:	f1ba 0f01 	cmp.w	sl, #1
 80190d2:	f1a4 0408 	sub.w	r4, r4, #8
 80190d6:	f300 8085 	bgt.w	80191e4 <__kernel_rem_pio2+0x62c>
 80190da:	9c06      	ldr	r4, [sp, #24]
 80190dc:	2000      	movs	r0, #0
 80190de:	3408      	adds	r4, #8
 80190e0:	2100      	movs	r1, #0
 80190e2:	2d01      	cmp	r5, #1
 80190e4:	f300 809d 	bgt.w	8019222 <__kernel_rem_pio2+0x66a>
 80190e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80190ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80190f0:	f1bb 0f00 	cmp.w	fp, #0
 80190f4:	f040 809b 	bne.w	801922e <__kernel_rem_pio2+0x676>
 80190f8:	9b01      	ldr	r3, [sp, #4]
 80190fa:	e9c3 5600 	strd	r5, r6, [r3]
 80190fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8019102:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019106:	e7ca      	b.n	801909e <__kernel_rem_pio2+0x4e6>
 8019108:	3408      	adds	r4, #8
 801910a:	ab4a      	add	r3, sp, #296	; 0x128
 801910c:	441c      	add	r4, r3
 801910e:	462e      	mov	r6, r5
 8019110:	2000      	movs	r0, #0
 8019112:	2100      	movs	r1, #0
 8019114:	2e00      	cmp	r6, #0
 8019116:	da36      	bge.n	8019186 <__kernel_rem_pio2+0x5ce>
 8019118:	f1bb 0f00 	cmp.w	fp, #0
 801911c:	d039      	beq.n	8019192 <__kernel_rem_pio2+0x5da>
 801911e:	4602      	mov	r2, r0
 8019120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019124:	9c01      	ldr	r4, [sp, #4]
 8019126:	e9c4 2300 	strd	r2, r3, [r4]
 801912a:	4602      	mov	r2, r0
 801912c:	460b      	mov	r3, r1
 801912e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8019132:	f7e7 f8c9 	bl	80002c8 <__aeabi_dsub>
 8019136:	ae4c      	add	r6, sp, #304	; 0x130
 8019138:	2401      	movs	r4, #1
 801913a:	42a5      	cmp	r5, r4
 801913c:	da2c      	bge.n	8019198 <__kernel_rem_pio2+0x5e0>
 801913e:	f1bb 0f00 	cmp.w	fp, #0
 8019142:	d002      	beq.n	801914a <__kernel_rem_pio2+0x592>
 8019144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019148:	4619      	mov	r1, r3
 801914a:	9b01      	ldr	r3, [sp, #4]
 801914c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019150:	e7a5      	b.n	801909e <__kernel_rem_pio2+0x4e6>
 8019152:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8019156:	eb0d 0403 	add.w	r4, sp, r3
 801915a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801915e:	2000      	movs	r0, #0
 8019160:	2100      	movs	r1, #0
 8019162:	2d00      	cmp	r5, #0
 8019164:	da09      	bge.n	801917a <__kernel_rem_pio2+0x5c2>
 8019166:	f1bb 0f00 	cmp.w	fp, #0
 801916a:	d002      	beq.n	8019172 <__kernel_rem_pio2+0x5ba>
 801916c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019170:	4619      	mov	r1, r3
 8019172:	9b01      	ldr	r3, [sp, #4]
 8019174:	e9c3 0100 	strd	r0, r1, [r3]
 8019178:	e791      	b.n	801909e <__kernel_rem_pio2+0x4e6>
 801917a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801917e:	f7e7 f8a5 	bl	80002cc <__adddf3>
 8019182:	3d01      	subs	r5, #1
 8019184:	e7ed      	b.n	8019162 <__kernel_rem_pio2+0x5aa>
 8019186:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801918a:	f7e7 f89f 	bl	80002cc <__adddf3>
 801918e:	3e01      	subs	r6, #1
 8019190:	e7c0      	b.n	8019114 <__kernel_rem_pio2+0x55c>
 8019192:	4602      	mov	r2, r0
 8019194:	460b      	mov	r3, r1
 8019196:	e7c5      	b.n	8019124 <__kernel_rem_pio2+0x56c>
 8019198:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801919c:	f7e7 f896 	bl	80002cc <__adddf3>
 80191a0:	3401      	adds	r4, #1
 80191a2:	e7ca      	b.n	801913a <__kernel_rem_pio2+0x582>
 80191a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80191a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80191ac:	9b02      	ldr	r3, [sp, #8]
 80191ae:	3b01      	subs	r3, #1
 80191b0:	9302      	str	r3, [sp, #8]
 80191b2:	4632      	mov	r2, r6
 80191b4:	463b      	mov	r3, r7
 80191b6:	4640      	mov	r0, r8
 80191b8:	4649      	mov	r1, r9
 80191ba:	f7e7 f887 	bl	80002cc <__adddf3>
 80191be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80191c2:	4602      	mov	r2, r0
 80191c4:	460b      	mov	r3, r1
 80191c6:	4640      	mov	r0, r8
 80191c8:	4649      	mov	r1, r9
 80191ca:	f7e7 f87d 	bl	80002c8 <__aeabi_dsub>
 80191ce:	4632      	mov	r2, r6
 80191d0:	463b      	mov	r3, r7
 80191d2:	f7e7 f87b 	bl	80002cc <__adddf3>
 80191d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80191da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80191de:	ed8a 7b00 	vstr	d7, [sl]
 80191e2:	e76e      	b.n	80190c2 <__kernel_rem_pio2+0x50a>
 80191e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80191e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80191ec:	4640      	mov	r0, r8
 80191ee:	4632      	mov	r2, r6
 80191f0:	463b      	mov	r3, r7
 80191f2:	4649      	mov	r1, r9
 80191f4:	f7e7 f86a 	bl	80002cc <__adddf3>
 80191f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80191fc:	4602      	mov	r2, r0
 80191fe:	460b      	mov	r3, r1
 8019200:	4640      	mov	r0, r8
 8019202:	4649      	mov	r1, r9
 8019204:	f7e7 f860 	bl	80002c8 <__aeabi_dsub>
 8019208:	4632      	mov	r2, r6
 801920a:	463b      	mov	r3, r7
 801920c:	f7e7 f85e 	bl	80002cc <__adddf3>
 8019210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019214:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019218:	ed84 7b00 	vstr	d7, [r4]
 801921c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019220:	e755      	b.n	80190ce <__kernel_rem_pio2+0x516>
 8019222:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019226:	f7e7 f851 	bl	80002cc <__adddf3>
 801922a:	3d01      	subs	r5, #1
 801922c:	e759      	b.n	80190e2 <__kernel_rem_pio2+0x52a>
 801922e:	9b01      	ldr	r3, [sp, #4]
 8019230:	9a01      	ldr	r2, [sp, #4]
 8019232:	601d      	str	r5, [r3, #0]
 8019234:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8019238:	605c      	str	r4, [r3, #4]
 801923a:	609f      	str	r7, [r3, #8]
 801923c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8019240:	60d3      	str	r3, [r2, #12]
 8019242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019246:	6110      	str	r0, [r2, #16]
 8019248:	6153      	str	r3, [r2, #20]
 801924a:	e728      	b.n	801909e <__kernel_rem_pio2+0x4e6>
 801924c:	41700000 	.word	0x41700000
 8019250:	3e700000 	.word	0x3e700000
 8019254:	00000000 	.word	0x00000000

08019258 <__kernel_sin>:
 8019258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801925c:	ed2d 8b04 	vpush	{d8-d9}
 8019260:	eeb0 8a41 	vmov.f32	s16, s2
 8019264:	eef0 8a61 	vmov.f32	s17, s3
 8019268:	ec55 4b10 	vmov	r4, r5, d0
 801926c:	b083      	sub	sp, #12
 801926e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019276:	9001      	str	r0, [sp, #4]
 8019278:	da06      	bge.n	8019288 <__kernel_sin+0x30>
 801927a:	ee10 0a10 	vmov	r0, s0
 801927e:	4629      	mov	r1, r5
 8019280:	f7e7 fc8a 	bl	8000b98 <__aeabi_d2iz>
 8019284:	2800      	cmp	r0, #0
 8019286:	d051      	beq.n	801932c <__kernel_sin+0xd4>
 8019288:	4622      	mov	r2, r4
 801928a:	462b      	mov	r3, r5
 801928c:	4620      	mov	r0, r4
 801928e:	4629      	mov	r1, r5
 8019290:	f7e7 f9d2 	bl	8000638 <__aeabi_dmul>
 8019294:	4682      	mov	sl, r0
 8019296:	468b      	mov	fp, r1
 8019298:	4602      	mov	r2, r0
 801929a:	460b      	mov	r3, r1
 801929c:	4620      	mov	r0, r4
 801929e:	4629      	mov	r1, r5
 80192a0:	f7e7 f9ca 	bl	8000638 <__aeabi_dmul>
 80192a4:	a341      	add	r3, pc, #260	; (adr r3, 80193ac <__kernel_sin+0x154>)
 80192a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192aa:	4680      	mov	r8, r0
 80192ac:	4689      	mov	r9, r1
 80192ae:	4650      	mov	r0, sl
 80192b0:	4659      	mov	r1, fp
 80192b2:	f7e7 f9c1 	bl	8000638 <__aeabi_dmul>
 80192b6:	a33f      	add	r3, pc, #252	; (adr r3, 80193b4 <__kernel_sin+0x15c>)
 80192b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192bc:	f7e7 f804 	bl	80002c8 <__aeabi_dsub>
 80192c0:	4652      	mov	r2, sl
 80192c2:	465b      	mov	r3, fp
 80192c4:	f7e7 f9b8 	bl	8000638 <__aeabi_dmul>
 80192c8:	a33c      	add	r3, pc, #240	; (adr r3, 80193bc <__kernel_sin+0x164>)
 80192ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ce:	f7e6 fffd 	bl	80002cc <__adddf3>
 80192d2:	4652      	mov	r2, sl
 80192d4:	465b      	mov	r3, fp
 80192d6:	f7e7 f9af 	bl	8000638 <__aeabi_dmul>
 80192da:	a33a      	add	r3, pc, #232	; (adr r3, 80193c4 <__kernel_sin+0x16c>)
 80192dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192e0:	f7e6 fff2 	bl	80002c8 <__aeabi_dsub>
 80192e4:	4652      	mov	r2, sl
 80192e6:	465b      	mov	r3, fp
 80192e8:	f7e7 f9a6 	bl	8000638 <__aeabi_dmul>
 80192ec:	a337      	add	r3, pc, #220	; (adr r3, 80193cc <__kernel_sin+0x174>)
 80192ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f2:	f7e6 ffeb 	bl	80002cc <__adddf3>
 80192f6:	9b01      	ldr	r3, [sp, #4]
 80192f8:	4606      	mov	r6, r0
 80192fa:	460f      	mov	r7, r1
 80192fc:	b9eb      	cbnz	r3, 801933a <__kernel_sin+0xe2>
 80192fe:	4602      	mov	r2, r0
 8019300:	460b      	mov	r3, r1
 8019302:	4650      	mov	r0, sl
 8019304:	4659      	mov	r1, fp
 8019306:	f7e7 f997 	bl	8000638 <__aeabi_dmul>
 801930a:	a325      	add	r3, pc, #148	; (adr r3, 80193a0 <__kernel_sin+0x148>)
 801930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019310:	f7e6 ffda 	bl	80002c8 <__aeabi_dsub>
 8019314:	4642      	mov	r2, r8
 8019316:	464b      	mov	r3, r9
 8019318:	f7e7 f98e 	bl	8000638 <__aeabi_dmul>
 801931c:	4602      	mov	r2, r0
 801931e:	460b      	mov	r3, r1
 8019320:	4620      	mov	r0, r4
 8019322:	4629      	mov	r1, r5
 8019324:	f7e6 ffd2 	bl	80002cc <__adddf3>
 8019328:	4604      	mov	r4, r0
 801932a:	460d      	mov	r5, r1
 801932c:	ec45 4b10 	vmov	d0, r4, r5
 8019330:	b003      	add	sp, #12
 8019332:	ecbd 8b04 	vpop	{d8-d9}
 8019336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933a:	4b1b      	ldr	r3, [pc, #108]	; (80193a8 <__kernel_sin+0x150>)
 801933c:	ec51 0b18 	vmov	r0, r1, d8
 8019340:	2200      	movs	r2, #0
 8019342:	f7e7 f979 	bl	8000638 <__aeabi_dmul>
 8019346:	4632      	mov	r2, r6
 8019348:	ec41 0b19 	vmov	d9, r0, r1
 801934c:	463b      	mov	r3, r7
 801934e:	4640      	mov	r0, r8
 8019350:	4649      	mov	r1, r9
 8019352:	f7e7 f971 	bl	8000638 <__aeabi_dmul>
 8019356:	4602      	mov	r2, r0
 8019358:	460b      	mov	r3, r1
 801935a:	ec51 0b19 	vmov	r0, r1, d9
 801935e:	f7e6 ffb3 	bl	80002c8 <__aeabi_dsub>
 8019362:	4652      	mov	r2, sl
 8019364:	465b      	mov	r3, fp
 8019366:	f7e7 f967 	bl	8000638 <__aeabi_dmul>
 801936a:	ec53 2b18 	vmov	r2, r3, d8
 801936e:	f7e6 ffab 	bl	80002c8 <__aeabi_dsub>
 8019372:	a30b      	add	r3, pc, #44	; (adr r3, 80193a0 <__kernel_sin+0x148>)
 8019374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019378:	4606      	mov	r6, r0
 801937a:	460f      	mov	r7, r1
 801937c:	4640      	mov	r0, r8
 801937e:	4649      	mov	r1, r9
 8019380:	f7e7 f95a 	bl	8000638 <__aeabi_dmul>
 8019384:	4602      	mov	r2, r0
 8019386:	460b      	mov	r3, r1
 8019388:	4630      	mov	r0, r6
 801938a:	4639      	mov	r1, r7
 801938c:	f7e6 ff9e 	bl	80002cc <__adddf3>
 8019390:	4602      	mov	r2, r0
 8019392:	460b      	mov	r3, r1
 8019394:	4620      	mov	r0, r4
 8019396:	4629      	mov	r1, r5
 8019398:	f7e6 ff96 	bl	80002c8 <__aeabi_dsub>
 801939c:	e7c4      	b.n	8019328 <__kernel_sin+0xd0>
 801939e:	bf00      	nop
 80193a0:	55555549 	.word	0x55555549
 80193a4:	3fc55555 	.word	0x3fc55555
 80193a8:	3fe00000 	.word	0x3fe00000
 80193ac:	5acfd57c 	.word	0x5acfd57c
 80193b0:	3de5d93a 	.word	0x3de5d93a
 80193b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80193b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80193bc:	57b1fe7d 	.word	0x57b1fe7d
 80193c0:	3ec71de3 	.word	0x3ec71de3
 80193c4:	19c161d5 	.word	0x19c161d5
 80193c8:	3f2a01a0 	.word	0x3f2a01a0
 80193cc:	1110f8a6 	.word	0x1110f8a6
 80193d0:	3f811111 	.word	0x3f811111
 80193d4:	00000000 	.word	0x00000000

080193d8 <__kernel_tan>:
 80193d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193dc:	ed2d 8b06 	vpush	{d8-d10}
 80193e0:	ec5b ab10 	vmov	sl, fp, d0
 80193e4:	4be0      	ldr	r3, [pc, #896]	; (8019768 <__kernel_tan+0x390>)
 80193e6:	b083      	sub	sp, #12
 80193e8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80193ec:	429f      	cmp	r7, r3
 80193ee:	ec59 8b11 	vmov	r8, r9, d1
 80193f2:	4606      	mov	r6, r0
 80193f4:	f8cd b000 	str.w	fp, [sp]
 80193f8:	dc61      	bgt.n	80194be <__kernel_tan+0xe6>
 80193fa:	ee10 0a10 	vmov	r0, s0
 80193fe:	4659      	mov	r1, fp
 8019400:	f7e7 fbca 	bl	8000b98 <__aeabi_d2iz>
 8019404:	4605      	mov	r5, r0
 8019406:	2800      	cmp	r0, #0
 8019408:	f040 8083 	bne.w	8019512 <__kernel_tan+0x13a>
 801940c:	1c73      	adds	r3, r6, #1
 801940e:	4652      	mov	r2, sl
 8019410:	4313      	orrs	r3, r2
 8019412:	433b      	orrs	r3, r7
 8019414:	d112      	bne.n	801943c <__kernel_tan+0x64>
 8019416:	ec4b ab10 	vmov	d0, sl, fp
 801941a:	f000 fa17 	bl	801984c <fabs>
 801941e:	49d3      	ldr	r1, [pc, #844]	; (801976c <__kernel_tan+0x394>)
 8019420:	ec53 2b10 	vmov	r2, r3, d0
 8019424:	2000      	movs	r0, #0
 8019426:	f7e7 fa31 	bl	800088c <__aeabi_ddiv>
 801942a:	4682      	mov	sl, r0
 801942c:	468b      	mov	fp, r1
 801942e:	ec4b ab10 	vmov	d0, sl, fp
 8019432:	b003      	add	sp, #12
 8019434:	ecbd 8b06 	vpop	{d8-d10}
 8019438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943c:	2e01      	cmp	r6, #1
 801943e:	d0f6      	beq.n	801942e <__kernel_tan+0x56>
 8019440:	4642      	mov	r2, r8
 8019442:	464b      	mov	r3, r9
 8019444:	4650      	mov	r0, sl
 8019446:	4659      	mov	r1, fp
 8019448:	f7e6 ff40 	bl	80002cc <__adddf3>
 801944c:	4602      	mov	r2, r0
 801944e:	460b      	mov	r3, r1
 8019450:	460f      	mov	r7, r1
 8019452:	2000      	movs	r0, #0
 8019454:	49c6      	ldr	r1, [pc, #792]	; (8019770 <__kernel_tan+0x398>)
 8019456:	f7e7 fa19 	bl	800088c <__aeabi_ddiv>
 801945a:	e9cd 0100 	strd	r0, r1, [sp]
 801945e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019462:	462e      	mov	r6, r5
 8019464:	4652      	mov	r2, sl
 8019466:	462c      	mov	r4, r5
 8019468:	4630      	mov	r0, r6
 801946a:	461d      	mov	r5, r3
 801946c:	4639      	mov	r1, r7
 801946e:	465b      	mov	r3, fp
 8019470:	f7e6 ff2a 	bl	80002c8 <__aeabi_dsub>
 8019474:	4602      	mov	r2, r0
 8019476:	460b      	mov	r3, r1
 8019478:	4640      	mov	r0, r8
 801947a:	4649      	mov	r1, r9
 801947c:	f7e6 ff24 	bl	80002c8 <__aeabi_dsub>
 8019480:	4632      	mov	r2, r6
 8019482:	462b      	mov	r3, r5
 8019484:	f7e7 f8d8 	bl	8000638 <__aeabi_dmul>
 8019488:	4632      	mov	r2, r6
 801948a:	4680      	mov	r8, r0
 801948c:	4689      	mov	r9, r1
 801948e:	462b      	mov	r3, r5
 8019490:	4630      	mov	r0, r6
 8019492:	4639      	mov	r1, r7
 8019494:	f7e7 f8d0 	bl	8000638 <__aeabi_dmul>
 8019498:	4bb4      	ldr	r3, [pc, #720]	; (801976c <__kernel_tan+0x394>)
 801949a:	2200      	movs	r2, #0
 801949c:	f7e6 ff16 	bl	80002cc <__adddf3>
 80194a0:	4602      	mov	r2, r0
 80194a2:	460b      	mov	r3, r1
 80194a4:	4640      	mov	r0, r8
 80194a6:	4649      	mov	r1, r9
 80194a8:	f7e6 ff10 	bl	80002cc <__adddf3>
 80194ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80194b0:	f7e7 f8c2 	bl	8000638 <__aeabi_dmul>
 80194b4:	4622      	mov	r2, r4
 80194b6:	462b      	mov	r3, r5
 80194b8:	f7e6 ff08 	bl	80002cc <__adddf3>
 80194bc:	e7b5      	b.n	801942a <__kernel_tan+0x52>
 80194be:	4bad      	ldr	r3, [pc, #692]	; (8019774 <__kernel_tan+0x39c>)
 80194c0:	429f      	cmp	r7, r3
 80194c2:	dd26      	ble.n	8019512 <__kernel_tan+0x13a>
 80194c4:	9b00      	ldr	r3, [sp, #0]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	da09      	bge.n	80194de <__kernel_tan+0x106>
 80194ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80194ce:	469b      	mov	fp, r3
 80194d0:	ee10 aa10 	vmov	sl, s0
 80194d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80194d8:	ee11 8a10 	vmov	r8, s2
 80194dc:	4699      	mov	r9, r3
 80194de:	4652      	mov	r2, sl
 80194e0:	465b      	mov	r3, fp
 80194e2:	a183      	add	r1, pc, #524	; (adr r1, 80196f0 <__kernel_tan+0x318>)
 80194e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194e8:	f7e6 feee 	bl	80002c8 <__aeabi_dsub>
 80194ec:	4642      	mov	r2, r8
 80194ee:	464b      	mov	r3, r9
 80194f0:	4604      	mov	r4, r0
 80194f2:	460d      	mov	r5, r1
 80194f4:	a180      	add	r1, pc, #512	; (adr r1, 80196f8 <__kernel_tan+0x320>)
 80194f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194fa:	f7e6 fee5 	bl	80002c8 <__aeabi_dsub>
 80194fe:	4622      	mov	r2, r4
 8019500:	462b      	mov	r3, r5
 8019502:	f7e6 fee3 	bl	80002cc <__adddf3>
 8019506:	f04f 0800 	mov.w	r8, #0
 801950a:	4682      	mov	sl, r0
 801950c:	468b      	mov	fp, r1
 801950e:	f04f 0900 	mov.w	r9, #0
 8019512:	4652      	mov	r2, sl
 8019514:	465b      	mov	r3, fp
 8019516:	4650      	mov	r0, sl
 8019518:	4659      	mov	r1, fp
 801951a:	f7e7 f88d 	bl	8000638 <__aeabi_dmul>
 801951e:	4602      	mov	r2, r0
 8019520:	460b      	mov	r3, r1
 8019522:	ec43 2b18 	vmov	d8, r2, r3
 8019526:	f7e7 f887 	bl	8000638 <__aeabi_dmul>
 801952a:	ec53 2b18 	vmov	r2, r3, d8
 801952e:	4604      	mov	r4, r0
 8019530:	460d      	mov	r5, r1
 8019532:	4650      	mov	r0, sl
 8019534:	4659      	mov	r1, fp
 8019536:	f7e7 f87f 	bl	8000638 <__aeabi_dmul>
 801953a:	a371      	add	r3, pc, #452	; (adr r3, 8019700 <__kernel_tan+0x328>)
 801953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019540:	ec41 0b19 	vmov	d9, r0, r1
 8019544:	4620      	mov	r0, r4
 8019546:	4629      	mov	r1, r5
 8019548:	f7e7 f876 	bl	8000638 <__aeabi_dmul>
 801954c:	a36e      	add	r3, pc, #440	; (adr r3, 8019708 <__kernel_tan+0x330>)
 801954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019552:	f7e6 febb 	bl	80002cc <__adddf3>
 8019556:	4622      	mov	r2, r4
 8019558:	462b      	mov	r3, r5
 801955a:	f7e7 f86d 	bl	8000638 <__aeabi_dmul>
 801955e:	a36c      	add	r3, pc, #432	; (adr r3, 8019710 <__kernel_tan+0x338>)
 8019560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019564:	f7e6 feb2 	bl	80002cc <__adddf3>
 8019568:	4622      	mov	r2, r4
 801956a:	462b      	mov	r3, r5
 801956c:	f7e7 f864 	bl	8000638 <__aeabi_dmul>
 8019570:	a369      	add	r3, pc, #420	; (adr r3, 8019718 <__kernel_tan+0x340>)
 8019572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019576:	f7e6 fea9 	bl	80002cc <__adddf3>
 801957a:	4622      	mov	r2, r4
 801957c:	462b      	mov	r3, r5
 801957e:	f7e7 f85b 	bl	8000638 <__aeabi_dmul>
 8019582:	a367      	add	r3, pc, #412	; (adr r3, 8019720 <__kernel_tan+0x348>)
 8019584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019588:	f7e6 fea0 	bl	80002cc <__adddf3>
 801958c:	4622      	mov	r2, r4
 801958e:	462b      	mov	r3, r5
 8019590:	f7e7 f852 	bl	8000638 <__aeabi_dmul>
 8019594:	a364      	add	r3, pc, #400	; (adr r3, 8019728 <__kernel_tan+0x350>)
 8019596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959a:	f7e6 fe97 	bl	80002cc <__adddf3>
 801959e:	ec53 2b18 	vmov	r2, r3, d8
 80195a2:	f7e7 f849 	bl	8000638 <__aeabi_dmul>
 80195a6:	a362      	add	r3, pc, #392	; (adr r3, 8019730 <__kernel_tan+0x358>)
 80195a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ac:	ec41 0b1a 	vmov	d10, r0, r1
 80195b0:	4620      	mov	r0, r4
 80195b2:	4629      	mov	r1, r5
 80195b4:	f7e7 f840 	bl	8000638 <__aeabi_dmul>
 80195b8:	a35f      	add	r3, pc, #380	; (adr r3, 8019738 <__kernel_tan+0x360>)
 80195ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195be:	f7e6 fe85 	bl	80002cc <__adddf3>
 80195c2:	4622      	mov	r2, r4
 80195c4:	462b      	mov	r3, r5
 80195c6:	f7e7 f837 	bl	8000638 <__aeabi_dmul>
 80195ca:	a35d      	add	r3, pc, #372	; (adr r3, 8019740 <__kernel_tan+0x368>)
 80195cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d0:	f7e6 fe7c 	bl	80002cc <__adddf3>
 80195d4:	4622      	mov	r2, r4
 80195d6:	462b      	mov	r3, r5
 80195d8:	f7e7 f82e 	bl	8000638 <__aeabi_dmul>
 80195dc:	a35a      	add	r3, pc, #360	; (adr r3, 8019748 <__kernel_tan+0x370>)
 80195de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e2:	f7e6 fe73 	bl	80002cc <__adddf3>
 80195e6:	4622      	mov	r2, r4
 80195e8:	462b      	mov	r3, r5
 80195ea:	f7e7 f825 	bl	8000638 <__aeabi_dmul>
 80195ee:	a358      	add	r3, pc, #352	; (adr r3, 8019750 <__kernel_tan+0x378>)
 80195f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f4:	f7e6 fe6a 	bl	80002cc <__adddf3>
 80195f8:	4622      	mov	r2, r4
 80195fa:	462b      	mov	r3, r5
 80195fc:	f7e7 f81c 	bl	8000638 <__aeabi_dmul>
 8019600:	a355      	add	r3, pc, #340	; (adr r3, 8019758 <__kernel_tan+0x380>)
 8019602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019606:	f7e6 fe61 	bl	80002cc <__adddf3>
 801960a:	4602      	mov	r2, r0
 801960c:	460b      	mov	r3, r1
 801960e:	ec51 0b1a 	vmov	r0, r1, d10
 8019612:	f7e6 fe5b 	bl	80002cc <__adddf3>
 8019616:	ec53 2b19 	vmov	r2, r3, d9
 801961a:	f7e7 f80d 	bl	8000638 <__aeabi_dmul>
 801961e:	4642      	mov	r2, r8
 8019620:	464b      	mov	r3, r9
 8019622:	f7e6 fe53 	bl	80002cc <__adddf3>
 8019626:	ec53 2b18 	vmov	r2, r3, d8
 801962a:	f7e7 f805 	bl	8000638 <__aeabi_dmul>
 801962e:	4642      	mov	r2, r8
 8019630:	464b      	mov	r3, r9
 8019632:	f7e6 fe4b 	bl	80002cc <__adddf3>
 8019636:	a34a      	add	r3, pc, #296	; (adr r3, 8019760 <__kernel_tan+0x388>)
 8019638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963c:	4604      	mov	r4, r0
 801963e:	460d      	mov	r5, r1
 8019640:	ec51 0b19 	vmov	r0, r1, d9
 8019644:	f7e6 fff8 	bl	8000638 <__aeabi_dmul>
 8019648:	4622      	mov	r2, r4
 801964a:	462b      	mov	r3, r5
 801964c:	f7e6 fe3e 	bl	80002cc <__adddf3>
 8019650:	460b      	mov	r3, r1
 8019652:	ec41 0b18 	vmov	d8, r0, r1
 8019656:	4602      	mov	r2, r0
 8019658:	4659      	mov	r1, fp
 801965a:	4650      	mov	r0, sl
 801965c:	f7e6 fe36 	bl	80002cc <__adddf3>
 8019660:	4b44      	ldr	r3, [pc, #272]	; (8019774 <__kernel_tan+0x39c>)
 8019662:	429f      	cmp	r7, r3
 8019664:	4604      	mov	r4, r0
 8019666:	460d      	mov	r5, r1
 8019668:	f340 8086 	ble.w	8019778 <__kernel_tan+0x3a0>
 801966c:	4630      	mov	r0, r6
 801966e:	f7e6 ff79 	bl	8000564 <__aeabi_i2d>
 8019672:	4622      	mov	r2, r4
 8019674:	4680      	mov	r8, r0
 8019676:	4689      	mov	r9, r1
 8019678:	462b      	mov	r3, r5
 801967a:	4620      	mov	r0, r4
 801967c:	4629      	mov	r1, r5
 801967e:	f7e6 ffdb 	bl	8000638 <__aeabi_dmul>
 8019682:	4642      	mov	r2, r8
 8019684:	4606      	mov	r6, r0
 8019686:	460f      	mov	r7, r1
 8019688:	464b      	mov	r3, r9
 801968a:	4620      	mov	r0, r4
 801968c:	4629      	mov	r1, r5
 801968e:	f7e6 fe1d 	bl	80002cc <__adddf3>
 8019692:	4602      	mov	r2, r0
 8019694:	460b      	mov	r3, r1
 8019696:	4630      	mov	r0, r6
 8019698:	4639      	mov	r1, r7
 801969a:	f7e7 f8f7 	bl	800088c <__aeabi_ddiv>
 801969e:	ec53 2b18 	vmov	r2, r3, d8
 80196a2:	f7e6 fe11 	bl	80002c8 <__aeabi_dsub>
 80196a6:	4602      	mov	r2, r0
 80196a8:	460b      	mov	r3, r1
 80196aa:	4650      	mov	r0, sl
 80196ac:	4659      	mov	r1, fp
 80196ae:	f7e6 fe0b 	bl	80002c8 <__aeabi_dsub>
 80196b2:	4602      	mov	r2, r0
 80196b4:	460b      	mov	r3, r1
 80196b6:	f7e6 fe09 	bl	80002cc <__adddf3>
 80196ba:	4602      	mov	r2, r0
 80196bc:	460b      	mov	r3, r1
 80196be:	4640      	mov	r0, r8
 80196c0:	4649      	mov	r1, r9
 80196c2:	f7e6 fe01 	bl	80002c8 <__aeabi_dsub>
 80196c6:	9b00      	ldr	r3, [sp, #0]
 80196c8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80196cc:	f00a 0a02 	and.w	sl, sl, #2
 80196d0:	4604      	mov	r4, r0
 80196d2:	f1ca 0001 	rsb	r0, sl, #1
 80196d6:	460d      	mov	r5, r1
 80196d8:	f7e6 ff44 	bl	8000564 <__aeabi_i2d>
 80196dc:	4602      	mov	r2, r0
 80196de:	460b      	mov	r3, r1
 80196e0:	4620      	mov	r0, r4
 80196e2:	4629      	mov	r1, r5
 80196e4:	f7e6 ffa8 	bl	8000638 <__aeabi_dmul>
 80196e8:	e69f      	b.n	801942a <__kernel_tan+0x52>
 80196ea:	bf00      	nop
 80196ec:	f3af 8000 	nop.w
 80196f0:	54442d18 	.word	0x54442d18
 80196f4:	3fe921fb 	.word	0x3fe921fb
 80196f8:	33145c07 	.word	0x33145c07
 80196fc:	3c81a626 	.word	0x3c81a626
 8019700:	74bf7ad4 	.word	0x74bf7ad4
 8019704:	3efb2a70 	.word	0x3efb2a70
 8019708:	32f0a7e9 	.word	0x32f0a7e9
 801970c:	3f12b80f 	.word	0x3f12b80f
 8019710:	1a8d1068 	.word	0x1a8d1068
 8019714:	3f3026f7 	.word	0x3f3026f7
 8019718:	fee08315 	.word	0xfee08315
 801971c:	3f57dbc8 	.word	0x3f57dbc8
 8019720:	e96e8493 	.word	0xe96e8493
 8019724:	3f8226e3 	.word	0x3f8226e3
 8019728:	1bb341fe 	.word	0x1bb341fe
 801972c:	3faba1ba 	.word	0x3faba1ba
 8019730:	db605373 	.word	0xdb605373
 8019734:	bef375cb 	.word	0xbef375cb
 8019738:	a03792a6 	.word	0xa03792a6
 801973c:	3f147e88 	.word	0x3f147e88
 8019740:	f2f26501 	.word	0xf2f26501
 8019744:	3f4344d8 	.word	0x3f4344d8
 8019748:	c9560328 	.word	0xc9560328
 801974c:	3f6d6d22 	.word	0x3f6d6d22
 8019750:	8406d637 	.word	0x8406d637
 8019754:	3f9664f4 	.word	0x3f9664f4
 8019758:	1110fe7a 	.word	0x1110fe7a
 801975c:	3fc11111 	.word	0x3fc11111
 8019760:	55555563 	.word	0x55555563
 8019764:	3fd55555 	.word	0x3fd55555
 8019768:	3e2fffff 	.word	0x3e2fffff
 801976c:	3ff00000 	.word	0x3ff00000
 8019770:	bff00000 	.word	0xbff00000
 8019774:	3fe59427 	.word	0x3fe59427
 8019778:	2e01      	cmp	r6, #1
 801977a:	d02f      	beq.n	80197dc <__kernel_tan+0x404>
 801977c:	460f      	mov	r7, r1
 801977e:	4602      	mov	r2, r0
 8019780:	460b      	mov	r3, r1
 8019782:	4689      	mov	r9, r1
 8019784:	2000      	movs	r0, #0
 8019786:	4917      	ldr	r1, [pc, #92]	; (80197e4 <__kernel_tan+0x40c>)
 8019788:	f7e7 f880 	bl	800088c <__aeabi_ddiv>
 801978c:	2600      	movs	r6, #0
 801978e:	e9cd 0100 	strd	r0, r1, [sp]
 8019792:	4652      	mov	r2, sl
 8019794:	465b      	mov	r3, fp
 8019796:	4630      	mov	r0, r6
 8019798:	4639      	mov	r1, r7
 801979a:	f7e6 fd95 	bl	80002c8 <__aeabi_dsub>
 801979e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80197a2:	4602      	mov	r2, r0
 80197a4:	460b      	mov	r3, r1
 80197a6:	ec51 0b18 	vmov	r0, r1, d8
 80197aa:	f7e6 fd8d 	bl	80002c8 <__aeabi_dsub>
 80197ae:	4632      	mov	r2, r6
 80197b0:	462b      	mov	r3, r5
 80197b2:	f7e6 ff41 	bl	8000638 <__aeabi_dmul>
 80197b6:	46b0      	mov	r8, r6
 80197b8:	460f      	mov	r7, r1
 80197ba:	4642      	mov	r2, r8
 80197bc:	462b      	mov	r3, r5
 80197be:	4634      	mov	r4, r6
 80197c0:	4649      	mov	r1, r9
 80197c2:	4606      	mov	r6, r0
 80197c4:	4640      	mov	r0, r8
 80197c6:	f7e6 ff37 	bl	8000638 <__aeabi_dmul>
 80197ca:	4b07      	ldr	r3, [pc, #28]	; (80197e8 <__kernel_tan+0x410>)
 80197cc:	2200      	movs	r2, #0
 80197ce:	f7e6 fd7d 	bl	80002cc <__adddf3>
 80197d2:	4602      	mov	r2, r0
 80197d4:	460b      	mov	r3, r1
 80197d6:	4630      	mov	r0, r6
 80197d8:	4639      	mov	r1, r7
 80197da:	e665      	b.n	80194a8 <__kernel_tan+0xd0>
 80197dc:	4682      	mov	sl, r0
 80197de:	468b      	mov	fp, r1
 80197e0:	e625      	b.n	801942e <__kernel_tan+0x56>
 80197e2:	bf00      	nop
 80197e4:	bff00000 	.word	0xbff00000
 80197e8:	3ff00000 	.word	0x3ff00000

080197ec <with_errno>:
 80197ec:	b570      	push	{r4, r5, r6, lr}
 80197ee:	4604      	mov	r4, r0
 80197f0:	460d      	mov	r5, r1
 80197f2:	4616      	mov	r6, r2
 80197f4:	f7f7 fafe 	bl	8010df4 <__errno>
 80197f8:	4629      	mov	r1, r5
 80197fa:	6006      	str	r6, [r0, #0]
 80197fc:	4620      	mov	r0, r4
 80197fe:	bd70      	pop	{r4, r5, r6, pc}

08019800 <xflow>:
 8019800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019802:	4614      	mov	r4, r2
 8019804:	461d      	mov	r5, r3
 8019806:	b108      	cbz	r0, 801980c <xflow+0xc>
 8019808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801980c:	e9cd 2300 	strd	r2, r3, [sp]
 8019810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019814:	4620      	mov	r0, r4
 8019816:	4629      	mov	r1, r5
 8019818:	f7e6 ff0e 	bl	8000638 <__aeabi_dmul>
 801981c:	2222      	movs	r2, #34	; 0x22
 801981e:	b003      	add	sp, #12
 8019820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019824:	f7ff bfe2 	b.w	80197ec <with_errno>

08019828 <__math_uflow>:
 8019828:	b508      	push	{r3, lr}
 801982a:	2200      	movs	r2, #0
 801982c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019830:	f7ff ffe6 	bl	8019800 <xflow>
 8019834:	ec41 0b10 	vmov	d0, r0, r1
 8019838:	bd08      	pop	{r3, pc}

0801983a <__math_oflow>:
 801983a:	b508      	push	{r3, lr}
 801983c:	2200      	movs	r2, #0
 801983e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019842:	f7ff ffdd 	bl	8019800 <xflow>
 8019846:	ec41 0b10 	vmov	d0, r0, r1
 801984a:	bd08      	pop	{r3, pc}

0801984c <fabs>:
 801984c:	ec51 0b10 	vmov	r0, r1, d0
 8019850:	ee10 2a10 	vmov	r2, s0
 8019854:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019858:	ec43 2b10 	vmov	d0, r2, r3
 801985c:	4770      	bx	lr

0801985e <finite>:
 801985e:	b082      	sub	sp, #8
 8019860:	ed8d 0b00 	vstr	d0, [sp]
 8019864:	9801      	ldr	r0, [sp, #4]
 8019866:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801986a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801986e:	0fc0      	lsrs	r0, r0, #31
 8019870:	b002      	add	sp, #8
 8019872:	4770      	bx	lr
 8019874:	0000      	movs	r0, r0
	...

08019878 <floor>:
 8019878:	ec51 0b10 	vmov	r0, r1, d0
 801987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019880:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019884:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019888:	2e13      	cmp	r6, #19
 801988a:	ee10 5a10 	vmov	r5, s0
 801988e:	ee10 8a10 	vmov	r8, s0
 8019892:	460c      	mov	r4, r1
 8019894:	dc32      	bgt.n	80198fc <floor+0x84>
 8019896:	2e00      	cmp	r6, #0
 8019898:	da14      	bge.n	80198c4 <floor+0x4c>
 801989a:	a333      	add	r3, pc, #204	; (adr r3, 8019968 <floor+0xf0>)
 801989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a0:	f7e6 fd14 	bl	80002cc <__adddf3>
 80198a4:	2200      	movs	r2, #0
 80198a6:	2300      	movs	r3, #0
 80198a8:	f7e7 f956 	bl	8000b58 <__aeabi_dcmpgt>
 80198ac:	b138      	cbz	r0, 80198be <floor+0x46>
 80198ae:	2c00      	cmp	r4, #0
 80198b0:	da57      	bge.n	8019962 <floor+0xea>
 80198b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80198b6:	431d      	orrs	r5, r3
 80198b8:	d001      	beq.n	80198be <floor+0x46>
 80198ba:	4c2d      	ldr	r4, [pc, #180]	; (8019970 <floor+0xf8>)
 80198bc:	2500      	movs	r5, #0
 80198be:	4621      	mov	r1, r4
 80198c0:	4628      	mov	r0, r5
 80198c2:	e025      	b.n	8019910 <floor+0x98>
 80198c4:	4f2b      	ldr	r7, [pc, #172]	; (8019974 <floor+0xfc>)
 80198c6:	4137      	asrs	r7, r6
 80198c8:	ea01 0307 	and.w	r3, r1, r7
 80198cc:	4303      	orrs	r3, r0
 80198ce:	d01f      	beq.n	8019910 <floor+0x98>
 80198d0:	a325      	add	r3, pc, #148	; (adr r3, 8019968 <floor+0xf0>)
 80198d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d6:	f7e6 fcf9 	bl	80002cc <__adddf3>
 80198da:	2200      	movs	r2, #0
 80198dc:	2300      	movs	r3, #0
 80198de:	f7e7 f93b 	bl	8000b58 <__aeabi_dcmpgt>
 80198e2:	2800      	cmp	r0, #0
 80198e4:	d0eb      	beq.n	80198be <floor+0x46>
 80198e6:	2c00      	cmp	r4, #0
 80198e8:	bfbe      	ittt	lt
 80198ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80198ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80198f2:	19a4      	addlt	r4, r4, r6
 80198f4:	ea24 0407 	bic.w	r4, r4, r7
 80198f8:	2500      	movs	r5, #0
 80198fa:	e7e0      	b.n	80198be <floor+0x46>
 80198fc:	2e33      	cmp	r6, #51	; 0x33
 80198fe:	dd0b      	ble.n	8019918 <floor+0xa0>
 8019900:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019904:	d104      	bne.n	8019910 <floor+0x98>
 8019906:	ee10 2a10 	vmov	r2, s0
 801990a:	460b      	mov	r3, r1
 801990c:	f7e6 fcde 	bl	80002cc <__adddf3>
 8019910:	ec41 0b10 	vmov	d0, r0, r1
 8019914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019918:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801991c:	f04f 33ff 	mov.w	r3, #4294967295
 8019920:	fa23 f707 	lsr.w	r7, r3, r7
 8019924:	4207      	tst	r7, r0
 8019926:	d0f3      	beq.n	8019910 <floor+0x98>
 8019928:	a30f      	add	r3, pc, #60	; (adr r3, 8019968 <floor+0xf0>)
 801992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801992e:	f7e6 fccd 	bl	80002cc <__adddf3>
 8019932:	2200      	movs	r2, #0
 8019934:	2300      	movs	r3, #0
 8019936:	f7e7 f90f 	bl	8000b58 <__aeabi_dcmpgt>
 801993a:	2800      	cmp	r0, #0
 801993c:	d0bf      	beq.n	80198be <floor+0x46>
 801993e:	2c00      	cmp	r4, #0
 8019940:	da02      	bge.n	8019948 <floor+0xd0>
 8019942:	2e14      	cmp	r6, #20
 8019944:	d103      	bne.n	801994e <floor+0xd6>
 8019946:	3401      	adds	r4, #1
 8019948:	ea25 0507 	bic.w	r5, r5, r7
 801994c:	e7b7      	b.n	80198be <floor+0x46>
 801994e:	2301      	movs	r3, #1
 8019950:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019954:	fa03 f606 	lsl.w	r6, r3, r6
 8019958:	4435      	add	r5, r6
 801995a:	4545      	cmp	r5, r8
 801995c:	bf38      	it	cc
 801995e:	18e4      	addcc	r4, r4, r3
 8019960:	e7f2      	b.n	8019948 <floor+0xd0>
 8019962:	2500      	movs	r5, #0
 8019964:	462c      	mov	r4, r5
 8019966:	e7aa      	b.n	80198be <floor+0x46>
 8019968:	8800759c 	.word	0x8800759c
 801996c:	7e37e43c 	.word	0x7e37e43c
 8019970:	bff00000 	.word	0xbff00000
 8019974:	000fffff 	.word	0x000fffff

08019978 <scalbn>:
 8019978:	b570      	push	{r4, r5, r6, lr}
 801997a:	ec55 4b10 	vmov	r4, r5, d0
 801997e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019982:	4606      	mov	r6, r0
 8019984:	462b      	mov	r3, r5
 8019986:	b99a      	cbnz	r2, 80199b0 <scalbn+0x38>
 8019988:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801998c:	4323      	orrs	r3, r4
 801998e:	d036      	beq.n	80199fe <scalbn+0x86>
 8019990:	4b39      	ldr	r3, [pc, #228]	; (8019a78 <scalbn+0x100>)
 8019992:	4629      	mov	r1, r5
 8019994:	ee10 0a10 	vmov	r0, s0
 8019998:	2200      	movs	r2, #0
 801999a:	f7e6 fe4d 	bl	8000638 <__aeabi_dmul>
 801999e:	4b37      	ldr	r3, [pc, #220]	; (8019a7c <scalbn+0x104>)
 80199a0:	429e      	cmp	r6, r3
 80199a2:	4604      	mov	r4, r0
 80199a4:	460d      	mov	r5, r1
 80199a6:	da10      	bge.n	80199ca <scalbn+0x52>
 80199a8:	a32b      	add	r3, pc, #172	; (adr r3, 8019a58 <scalbn+0xe0>)
 80199aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ae:	e03a      	b.n	8019a26 <scalbn+0xae>
 80199b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80199b4:	428a      	cmp	r2, r1
 80199b6:	d10c      	bne.n	80199d2 <scalbn+0x5a>
 80199b8:	ee10 2a10 	vmov	r2, s0
 80199bc:	4620      	mov	r0, r4
 80199be:	4629      	mov	r1, r5
 80199c0:	f7e6 fc84 	bl	80002cc <__adddf3>
 80199c4:	4604      	mov	r4, r0
 80199c6:	460d      	mov	r5, r1
 80199c8:	e019      	b.n	80199fe <scalbn+0x86>
 80199ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80199ce:	460b      	mov	r3, r1
 80199d0:	3a36      	subs	r2, #54	; 0x36
 80199d2:	4432      	add	r2, r6
 80199d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80199d8:	428a      	cmp	r2, r1
 80199da:	dd08      	ble.n	80199ee <scalbn+0x76>
 80199dc:	2d00      	cmp	r5, #0
 80199de:	a120      	add	r1, pc, #128	; (adr r1, 8019a60 <scalbn+0xe8>)
 80199e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199e4:	da1c      	bge.n	8019a20 <scalbn+0xa8>
 80199e6:	a120      	add	r1, pc, #128	; (adr r1, 8019a68 <scalbn+0xf0>)
 80199e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80199ec:	e018      	b.n	8019a20 <scalbn+0xa8>
 80199ee:	2a00      	cmp	r2, #0
 80199f0:	dd08      	ble.n	8019a04 <scalbn+0x8c>
 80199f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80199f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80199fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80199fe:	ec45 4b10 	vmov	d0, r4, r5
 8019a02:	bd70      	pop	{r4, r5, r6, pc}
 8019a04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019a08:	da19      	bge.n	8019a3e <scalbn+0xc6>
 8019a0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019a0e:	429e      	cmp	r6, r3
 8019a10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019a14:	dd0a      	ble.n	8019a2c <scalbn+0xb4>
 8019a16:	a112      	add	r1, pc, #72	; (adr r1, 8019a60 <scalbn+0xe8>)
 8019a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d1e2      	bne.n	80199e6 <scalbn+0x6e>
 8019a20:	a30f      	add	r3, pc, #60	; (adr r3, 8019a60 <scalbn+0xe8>)
 8019a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a26:	f7e6 fe07 	bl	8000638 <__aeabi_dmul>
 8019a2a:	e7cb      	b.n	80199c4 <scalbn+0x4c>
 8019a2c:	a10a      	add	r1, pc, #40	; (adr r1, 8019a58 <scalbn+0xe0>)
 8019a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d0b8      	beq.n	80199a8 <scalbn+0x30>
 8019a36:	a10e      	add	r1, pc, #56	; (adr r1, 8019a70 <scalbn+0xf8>)
 8019a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a3c:	e7b4      	b.n	80199a8 <scalbn+0x30>
 8019a3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a42:	3236      	adds	r2, #54	; 0x36
 8019a44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	4b0c      	ldr	r3, [pc, #48]	; (8019a80 <scalbn+0x108>)
 8019a50:	2200      	movs	r2, #0
 8019a52:	e7e8      	b.n	8019a26 <scalbn+0xae>
 8019a54:	f3af 8000 	nop.w
 8019a58:	c2f8f359 	.word	0xc2f8f359
 8019a5c:	01a56e1f 	.word	0x01a56e1f
 8019a60:	8800759c 	.word	0x8800759c
 8019a64:	7e37e43c 	.word	0x7e37e43c
 8019a68:	8800759c 	.word	0x8800759c
 8019a6c:	fe37e43c 	.word	0xfe37e43c
 8019a70:	c2f8f359 	.word	0xc2f8f359
 8019a74:	81a56e1f 	.word	0x81a56e1f
 8019a78:	43500000 	.word	0x43500000
 8019a7c:	ffff3cb0 	.word	0xffff3cb0
 8019a80:	3c900000 	.word	0x3c900000

08019a84 <_init>:
 8019a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a86:	bf00      	nop
 8019a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a8a:	bc08      	pop	{r3}
 8019a8c:	469e      	mov	lr, r3
 8019a8e:	4770      	bx	lr

08019a90 <_fini>:
 8019a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a92:	bf00      	nop
 8019a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a96:	bc08      	pop	{r3}
 8019a98:	469e      	mov	lr, r3
 8019a9a:	4770      	bx	lr
