
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c824  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00056f18  0801c9d8  0801c9d8  0002c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080738f0  080738f0  00090480  2**0
                  CONTENTS
  4 .ARM          00000008  080738f0  080738f0  000838f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080738f8  080738f8  00090480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080738f8  080738f8  000838f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080738fc  080738fc  000838fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  08073900  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00090480  2**0
                  CONTENTS
 10 .bss          0000592c  20000480  20000480  00090480  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005dac  20005dac  00090480  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00090480  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003074b  00000000  00000000  000904b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008491  00000000  00000000  000c0bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  000c9090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002150  00000000  00000000  000cb518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b44  00000000  00000000  000cd668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a66f  00000000  00000000  000ff1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f04a3  00000000  00000000  0013981b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00229cbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b25c  00000000  00000000  00229d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000480 	.word	0x20000480
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c9bc 	.word	0x0801c9bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000484 	.word	0x20000484
 80001ec:	0801c9bc 	.word	0x0801c9bc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <SD_logger+0x24>)
 8001042:	f000 fa5b 	bl	80014fc <Create_Dir>
	Create_File("logs/LOG.TXT");
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <SD_logger+0x28>)
 8001048:	f000 f918 	bl	800127c <Create_File>
	Update_File("logs/LOG.TXT", msg);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <SD_logger+0x28>)
 8001050:	f000 f9a0 	bl	8001394 <Update_File>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801c9d8 	.word	0x0801c9d8
 8001060:	0801c9e0 	.word	0x0801c9e0

08001064 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <Mount_SD+0x30>)
 8001072:	f012 faa3 	bl	80135bc <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Mount_SD+0x34>)
 800107c:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Mount_SD+0x34>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <Mount_SD+0x26>
		return SD_ERROR;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 800108a:	2301      	movs	r3, #1
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000049c 	.word	0x2000049c
 8001098:	20002518 	.word	0x20002518

0800109c <Scan_SD_my>:
	else return SD_ERROR;
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD_my (DIR *dir, char *filename)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

    if (fresult == FR_OK)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <Scan_SD_my+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d123      	bne.n	80010f6 <Scan_SD_my+0x5a>
    {
		fresult = f_readdir(dir, &fno);                   /* Read a directory item */
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <Scan_SD_my+0x6c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f013 f8c9 	bl	8014248 <f_readdir>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Scan_SD_my+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || fno.fname[0] == 0)  return fresult;  /* Break on error or end of dir */
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Scan_SD_my+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <Scan_SD_my+0x32>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Scan_SD_my+0x6c>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <Scan_SD_my+0x38>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <Scan_SD_my+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	e012      	b.n	80010fa <Scan_SD_my+0x5e>
		if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <Scan_SD_my+0x6c>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <Scan_SD_my+0x50>
		{
			sprintf (filename, "Dir: %s\r\n", fno.fname);
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Scan_SD_my+0x70>)
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <Scan_SD_my+0x74>)
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f014 fd39 	bl	8015b5c <siprintf>
 80010ea:	e004      	b.n	80010f6 <Scan_SD_my+0x5a>
		}
		else
		{   /* It is a file. */
		   sprintf(filename,"File: %s\n", fno.fname);
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <Scan_SD_my+0x70>)
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <Scan_SD_my+0x78>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f014 fd33 	bl	8015b5c <siprintf>
		}
    }
    return fresult;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <Scan_SD_my+0x68>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20002518 	.word	0x20002518
 8001108:	20002500 	.word	0x20002500
 800110c:	20002509 	.word	0x20002509
 8001110:	0801c9f0 	.word	0x0801c9f0
 8001114:	0801c9fc 	.word	0x0801c9fc

08001118 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001122:	494d      	ldr	r1, [pc, #308]	; (8001258 <Read_File+0x140>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f013 f8cc 	bl	80142c2 <f_stat>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Read_File+0x144>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <Read_File+0x144>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f013 fbc2 	bl	80148c4 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <Read_File+0x148>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f014 fd07 	bl	8015b5c <siprintf>
//		Send_Uart (buf);
		free(buf);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f013 fbc0 	bl	80148d4 <free>
	    return fresult;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Read_File+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e07a      	b.n	8001250 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800115a:	2201      	movs	r2, #1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <Read_File+0x14c>)
 8001160:	f012 fa72 	bl	8013648 <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Read_File+0x144>)
 800116a:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <Read_File+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f013 fba5 	bl	80148c4 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <Read_File+0x144>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <Read_File+0x150>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f014 fce7 	bl	8015b5c <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f013 fba0 	bl	80148d4 <free>
		    return fresult;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Read_File+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e05a      	b.n	8001250 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800119a:	2004      	movs	r0, #4
 800119c:	f013 fb92 	bl	80148c4 <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <Read_File+0x14c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <Read_File+0x154>)
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <Read_File+0x14c>)
 80011ae:	f012 fc17 	bl	80139e0 <f_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <Read_File+0x144>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Read_File+0x144>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f013 fb7e 	bl	80148c4 <malloc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
			free(buffer);
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f013 fb81 	bl	80148d4 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Read_File+0x144>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <Read_File+0x158>)
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f014 fcbd 	bl	8015b5c <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f013 fb76 	bl	80148d4 <free>
 80011e8:	e030      	b.n	800124c <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80011ea:	2231      	movs	r2, #49	; 0x31
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f014 fd4d 	bl	8015c8e <strncpy>
			free(buffer);
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f013 fb6d 	bl	80148d4 <free>

			/* Close file */
			fresult = f_close(&fil);
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <Read_File+0x14c>)
 80011fc:	f012 ff61 	bl	80140c2 <f_close>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Read_File+0x144>)
 8001206:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Read_File+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f013 fb57 	bl	80148c4 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Read_File+0x144>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <Read_File+0x15c>)
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f014 fc99 	bl	8015b5c <siprintf>
//				Send_Uart(buf);
				free(buf);
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f013 fb52 	bl	80148d4 <free>
 8001230:	e00c      	b.n	800124c <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f013 fb46 	bl	80148c4 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <Read_File+0x160>)
 8001240:	69b8      	ldr	r0, [r7, #24]
 8001242:	f014 fc8b 	bl	8015b5c <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001246:	69b8      	ldr	r0, [r7, #24]
 8001248:	f013 fb44 	bl	80148d4 <free>
			}
		}
	    return fresult;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <Read_File+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20002500 	.word	0x20002500
 800125c:	20002518 	.word	0x20002518
 8001260:	0801cb14 	.word	0x0801cb14
 8001264:	200014d0 	.word	0x200014d0
 8001268:	0801ca50 	.word	0x0801ca50
 800126c:	2000251c 	.word	0x2000251c
 8001270:	0801cb38 	.word	0x0801cb38
 8001274:	0801cb60 	.word	0x0801cb60
 8001278:	0801cb88 	.word	0x0801cb88

0800127c <Create_File>:

FRESULT Create_File (char *name)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <Create_File+0xf8>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f013 f81b 	bl	80142c2 <f_stat>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Create_File+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <Create_File+0xfc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f013 fb11 	bl	80148c4 <malloc>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <Create_File+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f014 fc56 	bl	8015b5c <siprintf>
//		Send_Uart(buf);
		free(buf);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f013 fb0f 	bl	80148d4 <free>
	    return fresult;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Create_File+0xfc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e057      	b.n	800136c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012bc:	220b      	movs	r2, #11
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <Create_File+0x104>)
 80012c2:	f012 f9c1 	bl	8013648 <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Create_File+0xfc>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <Create_File+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f013 faf4 	bl	80148c4 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Create_File+0xfc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4926      	ldr	r1, [pc, #152]	; (8001384 <Create_File+0x108>)
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f014 fc36 	bl	8015b5c <siprintf>
//			Send_Uart(buf);
			free(buf);
 80012f0:	6938      	ldr	r0, [r7, #16]
 80012f2:	f013 faef 	bl	80148d4 <free>
		    return fresult;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <Create_File+0xfc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e037      	b.n	800136c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f013 fae1 	bl	80148c4 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Create_File+0x10c>)
 800130a:	69f8      	ldr	r0, [r7, #28]
 800130c:	f014 fc26 	bl	8015b5c <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f013 fadf 	bl	80148d4 <free>
		}

		fresult = f_close(&fil);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Create_File+0x104>)
 8001318:	f012 fed3 	bl	80140c2 <f_close>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <Create_File+0xfc>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <Create_File+0xfc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f013 fac9 	bl	80148c4 <malloc>
 8001332:	4603      	mov	r3, r0
 8001334:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <Create_File+0xfc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4913      	ldr	r1, [pc, #76]	; (800138c <Create_File+0x110>)
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f014 fc0b 	bl	8015b5c <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f013 fac4 	bl	80148d4 <free>
 800134c:	e00c      	b.n	8001368 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f013 fab8 	bl	80148c4 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <Create_File+0x114>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f014 fbfd 	bl	8015b5c <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001362:	69b8      	ldr	r0, [r7, #24]
 8001364:	f013 fab6 	bl	80148d4 <free>
		}
	}
    return fresult;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Create_File+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20002500 	.word	0x20002500
 8001378:	20002518 	.word	0x20002518
 800137c:	0801cba8 	.word	0x0801cba8
 8001380:	200014d0 	.word	0x200014d0
 8001384:	0801cbe0 	.word	0x0801cbe0
 8001388:	0801cc08 	.word	0x0801cc08
 800138c:	0801cc48 	.word	0x0801cc48
 8001390:	0801cb88 	.word	0x0801cb88

08001394 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800139e:	494d      	ldr	r1, [pc, #308]	; (80014d4 <Update_File+0x140>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f012 ff8e 	bl	80142c2 <f_stat>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <Update_File+0x144>)
 80013ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Update_File+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f013 fa84 	bl	80148c4 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4946      	ldr	r1, [pc, #280]	; (80014dc <Update_File+0x148>)
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f014 fbc9 	bl	8015b5c <siprintf>
//		Send_Uart (buf);
		free(buf);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f013 fa82 	bl	80148d4 <free>
	    return fresult;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <Update_File+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	e079      	b.n	80014ca <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <Update_File+0x14c>)
 80013dc:	f012 f934 	bl	8013648 <f_open>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Update_File+0x144>)
 80013e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <Update_File+0x144>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f013 fa67 	bl	80148c4 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Update_File+0x144>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <Update_File+0x150>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f014 fba9 	bl	8015b5c <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f013 fa62 	bl	80148d4 <free>
	        return fresult;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <Update_File+0x144>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	e059      	b.n	80014ca <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7fe fef4 	bl	8000204 <strlen>
 800141c:	4602      	mov	r2, r0
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Update_File+0x154>)
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <Update_File+0x14c>)
 8001424:	f012 fc3b 	bl	8013c9e <f_write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <Update_File+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Update_File+0x144>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f013 fa43 	bl	80148c4 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Update_File+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <Update_File+0x158>)
 800144c:	69b8      	ldr	r0, [r7, #24]
 800144e:	f014 fb85 	bl	8015b5c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f013 fa3e 	bl	80148d4 <free>
 8001458:	e00c      	b.n	8001474 <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f013 fa32 	bl	80148c4 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <Update_File+0x15c>)
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f014 fb77 	bl	8015b5c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f013 fa30 	bl	80148d4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <Update_File+0x14c>)
 8001476:	f012 fe24 	bl	80140c2 <f_close>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Update_File+0x144>)
 8001480:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Update_File+0x144>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f013 fa1a 	bl	80148c4 <malloc>
 8001490:	4603      	mov	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <Update_File+0x144>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Update_File+0x160>)
 800149e:	6938      	ldr	r0, [r7, #16]
 80014a0:	f014 fb5c 	bl	8015b5c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f013 fa15 	bl	80148d4 <free>
 80014aa:	e00c      	b.n	80014c6 <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f013 fa09 	bl	80148c4 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <Update_File+0x164>)
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f014 fb4e 	bl	8015b5c <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f013 fa07 	bl	80148d4 <free>
	     }
	}
    return fresult;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <Update_File+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20002500 	.word	0x20002500
 80014d8:	20002518 	.word	0x20002518
 80014dc:	0801ca30 	.word	0x0801ca30
 80014e0:	200014d0 	.word	0x200014d0
 80014e4:	0801ca50 	.word	0x0801ca50
 80014e8:	20002520 	.word	0x20002520
 80014ec:	0801cc6c 	.word	0x0801cc6c
 80014f0:	0801cc94 	.word	0x0801cc94
 80014f4:	0801cb60 	.word	0x0801cb60
 80014f8:	0801cb88 	.word	0x0801cb88

080014fc <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f012 ffca 	bl	801449e <f_mkdir>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Create_Dir+0x68>)
 8001510:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Create_Dir+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f013 f9d2 	bl	80148c4 <malloc>
 8001520:	4603      	mov	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4910      	ldr	r1, [pc, #64]	; (8001568 <Create_Dir+0x6c>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f014 fb17 	bl	8015b5c <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f013 f9d0 	bl	80148d4 <free>
 8001534:	e00f      	b.n	8001556 <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f013 f9c4 	bl	80148c4 <malloc>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Create_Dir+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <Create_Dir+0x70>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f014 fb06 	bl	8015b5c <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f013 f9bf 	bl	80148d4 <free>
    }
    return fresult;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Create_Dir+0x68>)
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20002518 	.word	0x20002518
 8001568:	0801ccf4 	.word	0x0801ccf4
 800156c:	0801cd18 	.word	0x0801cd18

08001570 <Check_SD_Space>:

void Check_SD_Space (char* free_total)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <Check_SD_Space+0xcc>)
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <Check_SD_Space+0xd0>)
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <Check_SD_Space+0xd4>)
 800157e:	f012 fed9 	bl	8014334 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Check_SD_Space+0xcc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <Check_SD_Space+0xcc>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	8952      	ldrh	r2, [r2, #10]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Check_SD_Space+0xd8>)
 80015a0:	f7ff f84a 	bl	8000638 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <Check_SD_Space+0xdc>)
 80015b4:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80015b6:	201e      	movs	r0, #30
 80015b8:	f013 f984 	bl	80148c4 <malloc>
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <Check_SD_Space+0xdc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_SD_Space+0xe0>)
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f014 fac7 	bl	8015b5c <siprintf>
//    Send_Uart(buf);
    free(buf);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f013 f980 	bl	80148d4 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <Check_SD_Space+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <Check_SD_Space+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Check_SD_Space+0xd8>)
 80015f0:	f7ff f822 	bl	8000638 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <Check_SD_Space+0xe4>)
 8001604:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001606:	201e      	movs	r0, #30
 8001608:	f013 f95c 	bl	80148c4 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Check_SD_Space+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4910      	ldr	r1, [pc, #64]	; (8001658 <Check_SD_Space+0xe8>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f014 fa9f 	bl	8015b5c <siprintf>
//    Send_Uart(buf);
    free(buf);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f013 f958 	bl	80148d4 <free>
    sprintf (free_total, "%lu/%lu", free_space, total);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Check_SD_Space+0xe4>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <Check_SD_Space+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <Check_SD_Space+0xec>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f014 fa94 	bl	8015b5c <siprintf>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20002524 	.word	0x20002524
 8001640:	20002528 	.word	0x20002528
 8001644:	0801cd44 	.word	0x0801cd44
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	2000252c 	.word	0x2000252c
 8001650:	0801cd48 	.word	0x0801cd48
 8001654:	20002530 	.word	0x20002530
 8001658:	0801cd64 	.word	0x0801cd64
 800165c:	0801cd80 	.word	0x0801cd80

08001660 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	22d0      	movs	r2, #208	; 0xd0
 800167e:	21ef      	movs	r1, #239	; 0xef
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <read_chip_id+0x3c>)
 8001682:	f00a fadf 	bl	800bc44 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b55      	cmp	r3, #85	; 0x55
 800168a:	d001      	beq.n	8001690 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002668 	.word	0x20002668

080016a0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d81a      	bhi.n	80016ec <set_oss+0x4c>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_oss+0x1c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	705a      	strb	r2, [r3, #1]
			break;
 80016d2:	e00f      	b.n	80016f4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	705a      	strb	r2, [r3, #1]
			break;
 80016da:	e00b      	b.n	80016f4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	220e      	movs	r2, #14
 80016e0:	705a      	strb	r2, [r3, #1]
			break;
 80016e2:	e007      	b.n	80016f4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	221a      	movs	r2, #26
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e003      	b.n	80016f4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	705a      	strb	r2, [r3, #1]
			break;
 80016f2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001704:	2332      	movs	r3, #50	; 0x32
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	22f4      	movs	r2, #244	; 0xf4
 8001716:	21ee      	movs	r1, #238	; 0xee
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <set_oss+0x88>)
 800171a:	f00a f999 	bl	800ba50 <HAL_I2C_Mem_Write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002668 	.word	0x20002668

0800172c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800175a:	2332      	movs	r3, #50	; 0x32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2316      	movs	r3, #22
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	22aa      	movs	r2, #170	; 0xaa
 800176c:	21ef      	movs	r1, #239	; 0xef
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <read_calib_data+0xe0>)
 8001770:	f00a fa68 	bl	800bc44 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177a:	e03c      	b.n	80017f6 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800177c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	443b      	add	r3, r7
 8001786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001792:	3328      	adds	r3, #40	; 0x28
 8001794:	443b      	add	r3, r7
 8001796:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4403      	add	r3, r0
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b212      	sxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80017ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d9be      	bls.n	800177c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80017fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001802:	4618      	mov	r0, r3
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002668 	.word	0x20002668

08001810 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f013 f86e 	bl	8014900 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001824:	687c      	ldr	r4, [r7, #4]
 8001826:	f7ff ff1b 	bl	8001660 <read_chip_id>
 800182a:	4603      	mov	r3, r0
 800182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687c      	ldr	r4, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <read_calib_data>
 800183a:	4603      	mov	r3, r0
 800183c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff2a 	bl	80016a0 <set_oss>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800185a:	232e      	movs	r3, #46	; 0x2e
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <get_ut+0x50>)
 8001872:	f00a f8ed 	bl	800ba50 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001876:	2005      	movs	r0, #5
 8001878:	f009 fbce 	bl	800b018 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800187c:	2332      	movs	r3, #50	; 0x32
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	22f6      	movs	r2, #246	; 0xf6
 800188c:	21ef      	movs	r1, #239	; 0xef
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <get_ut+0x50>)
 8001890:	f00a f9d8 	bl	800bc44 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4313      	orrs	r3, r2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20002668 	.word	0x20002668

080018a8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	13db      	asrs	r3, r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e4:	02da      	lsls	r2, r3, #11
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	440b      	add	r3, r1
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	3308      	adds	r3, #8
 8001908:	111b      	asrs	r3, r3, #4
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001960 <get_temp+0xb8>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001964 <get_temp+0xbc>
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d908      	bls.n	8001942 <get_temp+0x9a>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001968 <get_temp+0xc0>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	db03      	blt.n	800194a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	3dcccccd 	.word	0x3dcccccd
 8001964:	c2200000 	.word	0xc2200000
 8001968:	42aa0000 	.word	0x42aa0000

0800196c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <get_up+0x7c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	22f4      	movs	r2, #244	; 0xf4
 8001998:	21ee      	movs	r1, #238	; 0xee
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <get_up+0x80>)
 800199c:	f00a f858 	bl	800ba50 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f009 fb38 	bl	800b018 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2303      	movs	r3, #3
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	22f6      	movs	r2, #246	; 0xf6
 80019ba:	21ef      	movs	r1, #239	; 0xef
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <get_up+0x80>)
 80019be:	f00a f941 	bl	800bc44 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4413      	add	r3, r2
 80019cc:	7aba      	ldrb	r2, [r7, #10]
 80019ce:	441a      	add	r2, r3
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	f1c3 0308 	rsb	r3, r3, #8
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	return up;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0801cd88 	.word	0x0801cd88
 80019ec:	20002668 	.word	0x20002668

080019f0 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a0e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001a10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fb03 f303 	mul.w	r3, r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <get_pressure+0x34>
 8001a20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a24:	131b      	asrs	r3, r3, #12
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da01      	bge.n	8001a32 <get_pressure+0x42>
 8001a2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a32:	12db      	asrs	r3, r3, #11
 8001a34:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <get_pressure+0x5a>
 8001a46:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a4a:	12db      	asrs	r3, r3, #11
 8001a4c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <get_pressure+0x7e>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <get_pressure+0x98>
 8001a82:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a86:	331f      	adds	r3, #31
 8001a88:	135b      	asrs	r3, r3, #13
 8001a8a:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fb03 f303 	mul.w	r3, r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <get_pressure+0xb0>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <get_pressure+0xc0>
 8001aaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <get_pressure+0xd2>
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	109b      	asrs	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	0bdb      	lsrs	r3, r3, #15
 8001ad6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aea:	410a      	asrs	r2, r1
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db06      	blt.n	8001b06 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005a      	lsls	r2, r3, #1
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e005      	b.n	8001b12 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <get_pressure+0x12a>
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	121b      	asrs	r3, r3, #8
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <get_pressure+0x136>
 8001b24:	33ff      	adds	r3, #255	; 0xff
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <get_pressure+0x152>
 8001b3c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	141b      	asrs	r3, r3, #16
 8001b44:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <get_pressure+0x198>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <get_pressure+0x168>
 8001b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	141b      	asrs	r3, r3, #16
 8001b5a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <get_pressure+0x17c>
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

	return p;
 8001b76:	69fb      	ldr	r3, [r7, #28]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	ffffe343 	.word	0xffffe343
 8001b8c:	00000000 	.word	0x00000000

08001b90 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <get_altitude+0xb8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb4:	ee16 0a90 	vmov	r0, s13
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001c38 <get_altitude+0xa8>
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f018 fbde 	bl	801a388 <pow>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	491d      	ldr	r1, [pc, #116]	; (8001c4c <get_altitude+0xbc>)
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <get_altitude+0xb0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f818 	bl	8000c28 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <get_altitude+0xc0>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d908      	bls.n	8001c20 <get_altitude+0x90>
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c54 <get_altitude+0xc4>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db03      	blt.n	8001c28 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	ccd9456c 	.word	0xccd9456c
 8001c3c:	3fc85b95 	.word	0x3fc85b95
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40e5a540 	.word	0x40e5a540
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	c3fa0000 	.word	0xc3fa0000
 8001c54:	460ca000 	.word	0x460ca000

08001c58 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_i2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get_slp+0x80>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cdc <get_slp+0x84>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001cd0 <get_slp+0x78>
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f018 fb73 	bl	801a388 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ffb7 	bl	8000c28 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

	return slp;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
}
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	4015051e 	.word	0x4015051e
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	472d2a00 	.word	0x472d2a00

08001ce0 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b095      	sub	sp, #84	; 0x54
 8001ce4:	af0e      	add	r7, sp, #56	; 0x38
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001cea:	f7ff fdb3 	bl	8001854 <get_ut>
 8001cee:	ee07 0a90 	vmov	s15, r0
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff fdd3 	bl	80018a8 <get_temp>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d10:	f7ff fe2c 	bl	800196c <get_up>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001d1a:	683e      	ldr	r6, [r7, #0]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d36:	f7ff fe5b 	bl	80019f0 <get_pressure>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001d40:	6838      	ldr	r0, [r7, #0]
 8001d42:	f7ff ff89 	bl	8001c58 <get_slp>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff ff1d 	bl	8001b90 <get_altitude>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	617b      	str	r3, [r7, #20]
	return result;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d90 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001d9c:	e083      	b.n	8001ea6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	440b      	add	r3, r1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4944      	ldr	r1, [pc, #272]	; (8001ebc <initButtons+0x12c>)
 8001dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4940      	ldr	r1, [pc, #256]	; (8001ec0 <initButtons+0x130>)
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	7993      	ldrb	r3, [r2, #6]
 8001dd2:	f36f 0300 	bfc	r3, #0, #1
 8001dd6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	7993      	ldrb	r3, [r2, #6]
 8001de4:	f36f 0341 	bfc	r3, #1, #1
 8001de8:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	f67f af78 	bls.w	8001d9e <initButtons+0xe>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000020 	.word	0x20000020
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001ece:	e020      	b.n	8001f12 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <resetButtonHandlers+0x64>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <resetButtonHandlers+0x64>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
		i++;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d9db      	bls.n	8001ed0 <resetButtonHandlers+0xc>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f009 fbd2 	bl	800b6e8 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <scanButton>:

void scanButton(Button* btn){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	7993      	ldrb	r3, [r2, #6]
 8001f78:	f361 0300 	bfi	r3, r1, #0, #1
 8001f7c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffd4 	bl	8001f2c <readButton>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7993      	ldrb	r3, [r2, #6]
 8001f94:	f361 0341 	bfi	r3, r1, #1, #1
 8001f98:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001f9a:	7bba      	ldrb	r2, [r7, #14]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d150      	bne.n	8002044 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d146      	bne.n	8002036 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a9b      	ldrb	r3, [r3, #10]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7a9b      	ldrb	r3, [r3, #10]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <scanButton+0x164>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d32d      	bcc.n	800202e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b5b      	ldrb	r3, [r3, #13]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d110      	bne.n	8001ffc <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a5b      	ldrb	r3, [r3, #9]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <scanButton+0x164>)
 8002002:	8852      	ldrh	r2, [r2, #2]
 8002004:	fb93 f1f2 	sdiv	r1, r3, r2
 8002008:	fb01 f202 	mul.w	r2, r1, r2
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2000      	movs	r0, #0
 8002020:	4798      	blx	r3
					}
					btn->longContinuous++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002034:	e03e      	b.n	80020b4 <scanButton+0x15c>
			btn->shortSingleHandled = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	735a      	strb	r2, [r3, #13]
}
 8002042:	e037      	b.n	80020b4 <scanButton+0x15c>
		if(currStatus == 1){
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11f      	bne.n	800208a <scanButton+0x132>
			btn->shortContinuous = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d12a      	bne.n	80020b4 <scanButton+0x15c>
				if(btn->onSinglePressHandler != NULL){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <scanButton+0x11e>
					pulseVib(5, 100);
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	2005      	movs	r0, #5
 800206a:	f003 f8e7 	bl	800523c <pulseVib>
					btn->onSinglePressHandler(NULL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2000      	movs	r0, #0
 8002074:	4798      	blx	r3
				btn->shortSingleOn++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	79db      	ldrb	r3, [r3, #7]
 800207a:	3301      	adds	r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	731a      	strb	r2, [r3, #12]
}
 8002088:	e014      	b.n	80020b4 <scanButton+0x15c>
			if(btn->releaseHandled == 0){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b9b      	ldrb	r3, [r3, #14]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d110      	bne.n	80020b4 <scanButton+0x15c>
				if(btn->onReleaseHandler != NULL){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <scanButton+0x14a>
					btn->onReleaseHandler(NULL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	2000      	movs	r0, #0
 80020a0:	4798      	blx	r3
				btn->shortSingleOff++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7a1b      	ldrb	r3, [r3, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	739a      	strb	r2, [r3, #14]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000044 	.word	0x20000044

080020c0 <scanButtons>:

void scanButtons(Button* btns[6]){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020cc:	e00a      	b.n	80020e4 <scanButtons+0x24>
		scanButton(btns[i]);
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff3d 	bl	8001f58 <scanButton>
		i++;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3301      	adds	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d9f1      	bls.n	80020ce <scanButtons+0xe>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	791b      	ldrb	r3, [r3, #4]
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <setTimer>:

void setTimer(countdown_t *cnt, uint16_t seconds){
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
	cnt->setpoint = seconds;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	801a      	strh	r2, [r3, #0]
	cnt->isRunning = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	711a      	strb	r2, [r3, #4]
	cnt->remainingSec = seconds;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	805a      	strh	r2, [r3, #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <startTimer>:
void startTimer(countdown_t *cnt){
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	711a      	strb	r2, [r3, #4]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <pauseTimer>:
void pauseTimer(countdown_t *cnt){
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	711a      	strb	r2, [r3, #4]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <resetTimer>:
void resetTimer(countdown_t *cnt){
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	711a      	strb	r2, [r3, #4]
	cnt->remainingSec = cnt->setpoint;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	805a      	strh	r2, [r3, #2]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b68      	ldr	r3, [pc, #416]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	4b64      	ldr	r3, [pc, #400]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a63      	ldr	r2, [pc, #396]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b61      	ldr	r3, [pc, #388]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <MX_GPIO_Init+0x1e4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b56      	ldr	r3, [pc, #344]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a55      	ldr	r2, [pc, #340]	; (8002370 <MX_GPIO_Init+0x1e4>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b48      	ldr	r3, [pc, #288]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a47      	ldr	r2, [pc, #284]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b45      	ldr	r3, [pc, #276]	; (8002370 <MX_GPIO_Init+0x1e4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <MX_GPIO_Init+0x1e4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a40      	ldr	r2, [pc, #256]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <MX_GPIO_Init+0x1e4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	483b      	ldr	r0, [pc, #236]	; (8002374 <MX_GPIO_Init+0x1e8>)
 8002288:	f009 fa46 	bl	800b718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002292:	4839      	ldr	r0, [pc, #228]	; (8002378 <MX_GPIO_Init+0x1ec>)
 8002294:	f009 fa40 	bl	800b718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	; 0x40
 800229c:	4837      	ldr	r0, [pc, #220]	; (800237c <MX_GPIO_Init+0x1f0>)
 800229e:	f009 fa3b 	bl	800b718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a8:	4835      	ldr	r0, [pc, #212]	; (8002380 <MX_GPIO_Init+0x1f4>)
 80022aa:	f009 fa35 	bl	800b718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	482b      	ldr	r0, [pc, #172]	; (8002374 <MX_GPIO_Init+0x1e8>)
 80022c6:	f009 f863 	bl	800b390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	4619      	mov	r1, r3
 80022e2:	4825      	ldr	r0, [pc, #148]	; (8002378 <MX_GPIO_Init+0x1ec>)
 80022e4:	f009 f854 	bl	800b390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 80022e8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fc:	4619      	mov	r1, r3
 80022fe:	4821      	ldr	r0, [pc, #132]	; (8002384 <MX_GPIO_Init+0x1f8>)
 8002300:	f009 f846 	bl	800b390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002304:	2340      	movs	r3, #64	; 0x40
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4818      	ldr	r0, [pc, #96]	; (800237c <MX_GPIO_Init+0x1f0>)
 800231c:	f009 f838 	bl	800b390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <MX_GPIO_Init+0x1f0>)
 8002334:	f009 f82c 	bl	800b390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4619      	mov	r1, r3
 8002350:	480b      	ldr	r0, [pc, #44]	; (8002380 <MX_GPIO_Init+0x1f4>)
 8002352:	f009 f81d 	bl	800b390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2028      	movs	r0, #40	; 0x28
 800235c:	f008 ff5b 	bl	800b216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002360:	2028      	movs	r0, #40	; 0x28
 8002362:	f008 ff74 	bl	800b24e <HAL_NVIC_EnableIRQ>

}
 8002366:	bf00      	nop
 8002368:	3738      	adds	r7, #56	; 0x38
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40021800 	.word	0x40021800
 8002380:	40020800 	.word	0x40020800
 8002384:	40021000 	.word	0x40021000

08002388 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b2f      	cmp	r3, #47	; 0x2f
 800239a:	bf8c      	ite	hi
 800239c:	2301      	movhi	r3, #1
 800239e:	2300      	movls	r3, #0
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b39      	cmp	r3, #57	; 0x39
 80023a8:	bf94      	ite	ls
 80023aa:	2301      	movls	r3, #1
 80023ac:	2300      	movhi	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4013      	ands	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <hexCharToInt+0x3a>
		msb = *value - 48;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	3b30      	subs	r3, #48	; 0x30
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e003      	b.n	80023ca <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	3b37      	subs	r3, #55	; 0x37
 80023c8:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b2f      	cmp	r3, #47	; 0x2f
 80023d6:	bf8c      	ite	hi
 80023d8:	2301      	movhi	r3, #1
 80023da:	2300      	movls	r3, #0
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3301      	adds	r3, #1
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b39      	cmp	r3, #57	; 0x39
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4013      	ands	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3b30      	subs	r3, #48	; 0x30
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e004      	b.n	800240c <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	3b37      	subs	r3, #55	; 0x37
 800240a:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
	return(result)
 8002416:	68fb      	ldr	r3, [r7, #12]
;}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002434:	4619      	mov	r1, r3
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <getDataFromUart+0x20>)
 8002438:	f00d fe77 	bl	801012a <HAL_UART_Receive_DMA>

}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20005c7c 	.word	0x20005c7c

08002448 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8002448:	b580      	push	{r7, lr}
 800244a:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800244e:	af00      	add	r7, sp, #0
 8002450:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002454:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002458:	6018      	str	r0, [r3, #0]
 800245a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800245e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002462:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002464:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002468:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800246c:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002470:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	3304      	adds	r3, #4
 800247e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f013 fc02 	bl	8015c8e <strncpy>
	gpsModule.getData = &getDataFromUart;
 800248a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800248e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002492:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <initGps+0x90>)
 8002494:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 8002498:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800249c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80024a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80024aa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80024b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f44f 7319 	mov.w	r3, #612	; 0x264
 80024c0:	461a      	mov	r2, r3
 80024c2:	f012 fa0f 	bl	80148e4 <memcpy>
}
 80024c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80024ca:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	08002425 	.word	0x08002425

080024dc <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <strtoke+0x1a>
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <strtoke+0x60>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <strtoke+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <strtoke+0x26>
 80024fe:	2300      	movs	r3, #0
 8002500:	e017      	b.n	8002532 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <strtoke+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <strtoke+0x60>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f013 fbd0 	bl	8015cb4 <strpbrk>
 8002514:	4603      	mov	r3, r0
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <strtoke+0x60>)
 8002518:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <strtoke+0x60>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <strtoke+0x54>
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <strtoke+0x60>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	4904      	ldr	r1, [pc, #16]	; (800253c <strtoke+0x60>)
 800252a:	600a      	str	r2, [r1, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20002660 	.word	0x20002660

08002540 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002550:	e009      	b.n	8002566 <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4053      	eors	r3, r2
 800255e:	73fb      	strb	r3, [r7, #15]
		i++;
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	3301      	adds	r3, #1
 8002564:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b2a      	cmp	r3, #42	; 0x2a
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2da      	uxtb	r2, r3
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4013      	ands	r3, r2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1df      	bne.n	8002552 <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 8002592:	7bbb      	ldrb	r3, [r7, #14]
 8002594:	3301      	adds	r3, #1
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fef4 	bl	8002388 <hexCharToInt>
 80025a0:	4602      	mov	r2, r0
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <getMessage+0x68>)
 80025d2:	4413      	add	r3, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	68b8      	ldr	r0, [r7, #8]
 80025d8:	f013 fb86 	bl	8015ce8 <strstr>
 80025dc:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <getMessage+0x30>
 80025e4:	2300      	movs	r3, #0
 80025e6:	e016      	b.n	8002616 <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 80025e8:	490e      	ldr	r1, [pc, #56]	; (8002624 <getMessage+0x6c>)
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f014 f9c2 	bl	8016974 <strtok>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <getMessage+0x42>
 80025f6:	2300      	movs	r3, #0
 80025f8:	e00d      	b.n	8002616 <getMessage+0x5e>
	if(validateChecksum(start)){
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ffa0 	bl	8002540 <validateChecksum>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <getMessage+0x5c>
		return strcpy(destination,start);
 8002606:	6979      	ldr	r1, [r7, #20]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f013 fb38 	bl	8015c7e <strcpy>
 800260e:	4603      	mov	r3, r0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e000      	b.n	8002616 <getMessage+0x5e>
	} else {
		return NULL;
 8002614:	2300      	movs	r3, #0
	}
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	0801de60 	.word	0x0801de60
 8002624:	0801cd8c 	.word	0x0801cd8c

08002628 <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800262e:	af00      	add	r7, sp, #0
 8002630:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002634:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002638:	6018      	str	r0, [r3, #0]
 800263a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800263e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002642:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 8002644:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002648:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8002654:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002658:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1d19      	adds	r1, r3, #4
 8002660:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002664:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002668:	4618      	mov	r0, r3
 800266a:	f013 fb10 	bl	8015c8e <strncpy>
	dev->isReady = 1;
 800266e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002672:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 800267e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	2200      	movs	r2, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff95 	bl	80025b8 <getMessage>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d113      	bne.n	80026bc <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 8002694:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002698:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <getLocation+0x90>)
 80026a0:	461d      	mov	r5, r3
 80026a2:	4614      	mov	r4, r2
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	6028      	str	r0, [r5, #0]
 80026a8:	6069      	str	r1, [r5, #4]
 80026aa:	60aa      	str	r2, [r5, #8]
 80026ac:	60eb      	str	r3, [r5, #12]
 80026ae:	7823      	ldrb	r3, [r4, #0]
 80026b0:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e1ff      	b.n	8002ab6 <getLocation+0x48e>
 80026b6:	bf00      	nop
 80026b8:	0801cd94 	.word	0x0801cd94
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 80026bc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026c0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f107 020c 	add.w	r2, r7, #12
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f013 fad6 	bl	8015c7e <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	49dd      	ldr	r1, [pc, #884]	; (8002a4c <getLocation+0x424>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff feff 	bl	80024dc <strtoke>
 80026de:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 80026e2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026e6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026f0:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80026f4:	4618      	mov	r0, r3
 80026f6:	f013 fac2 	bl	8015c7e <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 80026fa:	49d4      	ldr	r1, [pc, #848]	; (8002a4c <getLocation+0x424>)
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff feed 	bl	80024dc <strtoke>
 8002702:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 8002706:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800270a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002714:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002718:	4618      	mov	r0, r3
 800271a:	f013 fab0 	bl	8015c7e <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 800271e:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002722:	f012 f88e 	bl	8014842 <atoi>
 8002726:	4603      	mov	r3, r0
 8002728:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 800272c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002730:	4ac7      	ldr	r2, [pc, #796]	; (8002a50 <getLocation+0x428>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0b5a      	lsrs	r2, r3, #13
 8002738:	4bc6      	ldr	r3, [pc, #792]	; (8002a54 <getLocation+0x42c>)
 800273a:	fba3 1302 	umull	r1, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2164      	movs	r1, #100	; 0x64
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b2da      	uxtb	r2, r3
 800274a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800274e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 8002758:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800275c:	4abd      	ldr	r2, [pc, #756]	; (8002a54 <getLocation+0x42c>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095a      	lsrs	r2, r3, #5
 8002764:	4bbb      	ldr	r3, [pc, #748]	; (8002a54 <getLocation+0x42c>)
 8002766:	fba3 1302 	umull	r1, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	b2da      	uxtb	r2, r3
 8002776:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800277a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 8002784:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8002788:	4bb2      	ldr	r3, [pc, #712]	; (8002a54 <getLocation+0x42c>)
 800278a:	fba3 1302 	umull	r1, r3, r3, r2
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2164      	movs	r1, #100	; 0x64
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b2da      	uxtb	r2, r3
 800279a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800279e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 80027a8:	49a8      	ldr	r1, [pc, #672]	; (8002a4c <getLocation+0x424>)
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff fe96 	bl	80024dc <strtoke>
 80027b0:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 80027b4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027b8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027c2:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027c6:	4618      	mov	r0, r3
 80027c8:	f013 fa59 	bl	8015c7e <strcpy>
	double latitude = atof(parsePointer);
 80027cc:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80027d0:	f012 f834 	bl	801483c <atof>
 80027d4:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <getLocation+0x430>)
 80027de:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 80027e2:	f7fe f853 	bl	800088c <__aeabi_ddiv>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9fb 	bl	8000be8 <__aeabi_d2uiz>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027fa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 8002804:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002808:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002812:	461a      	mov	r2, r3
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fea2 	bl	8000564 <__aeabi_i2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002828:	f7fd fd4e 	bl	80002c8 <__aeabi_dsub>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002834:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 8002838:	6809      	ldr	r1, [r1, #0]
 800283a:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 800283e:	4983      	ldr	r1, [pc, #524]	; (8002a4c <getLocation+0x424>)
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fe4b 	bl	80024dc <strtoke>
 8002846:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 800284a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800284e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002858:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800285c:	4618      	mov	r0, r3
 800285e:	f013 fa0e 	bl	8015c7e <strcpy>
	position->n_s = *parsePointer;
 8002862:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800286c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 8002876:	4975      	ldr	r1, [pc, #468]	; (8002a4c <getLocation+0x424>)
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff fe2f 	bl	80024dc <strtoke>
 800287e:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 8002882:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002886:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002890:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002894:	4618      	mov	r0, r3
 8002896:	f013 f9f2 	bl	8015c7e <strcpy>
	double longitude = atof(parsePointer);
 800289a:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 800289e:	f011 ffcd 	bl	801483c <atof>
 80028a2:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <getLocation+0x430>)
 80028ac:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80028b0:	f7fd ffec 	bl	800088c <__aeabi_ddiv>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f994 	bl	8000be8 <__aeabi_d2uiz>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028c8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 80028d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028d6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80028e0:	461a      	mov	r2, r3
 80028e2:	2364      	movs	r3, #100	; 0x64
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe3b 	bl	8000564 <__aeabi_i2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80028f6:	f7fd fce7 	bl	80002c8 <__aeabi_dsub>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002902:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 8002906:	6809      	ldr	r1, [r1, #0]
 8002908:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 800290c:	494f      	ldr	r1, [pc, #316]	; (8002a4c <getLocation+0x424>)
 800290e:	2000      	movs	r0, #0
 8002910:	f7ff fde4 	bl	80024dc <strtoke>
 8002914:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 8002918:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800291c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002926:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800292a:	4618      	mov	r0, r3
 800292c:	f013 f9a7 	bl	8015c7e <strcpy>
	position->w_e = *parsePointer;
 8002930:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800293a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 8002944:	4941      	ldr	r1, [pc, #260]	; (8002a4c <getLocation+0x424>)
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff fdc8 	bl	80024dc <strtoke>
 800294c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 8002950:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002954:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800295e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002962:	4618      	mov	r0, r3
 8002964:	f013 f98b 	bl	8015c7e <strcpy>
	if(*parsePointer=='0'){
 8002968:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b30      	cmp	r3, #48	; 0x30
 8002970:	d007      	beq.n	8002982 <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 8002972:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002976:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 8002982:	4932      	ldr	r1, [pc, #200]	; (8002a4c <getLocation+0x424>)
 8002984:	2000      	movs	r0, #0
 8002986:	f7ff fda9 	bl	80024dc <strtoke>
 800298a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 800298e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002992:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800299c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029a0:	4618      	mov	r0, r3
 80029a2:	f013 f96c 	bl	8015c7e <strcpy>
	position->satNum = atoi(parsePointer);
 80029a6:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80029aa:	f011 ff4a 	bl	8014842 <atoi>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029b6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <getLocation+0x424>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fd8a 	bl	80024dc <strtoke>
 80029c8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 80029cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029d0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 80029da:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029de:	4618      	mov	r0, r3
 80029e0:	f013 f94d 	bl	8015c7e <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 80029e4:	4919      	ldr	r1, [pc, #100]	; (8002a4c <getLocation+0x424>)
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fd78 	bl	80024dc <strtoke>
 80029ec:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 80029f0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029f4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80029fe:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a02:	4618      	mov	r0, r3
 8002a04:	f013 f93b 	bl	8015c7e <strcpy>
	position->elevation = atof(parsePointer);
 8002a08:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002a0c:	f011 ff16 	bl	801483c <atof>
 8002a10:	eeb0 7a40 	vmov.f32	s14, s0
 8002a14:	eef0 7a60 	vmov.f32	s15, s1
 8002a18:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a1c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 8002a26:	4909      	ldr	r1, [pc, #36]	; (8002a4c <getLocation+0x424>)
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fd57 	bl	80024dc <strtoke>
 8002a2e:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 8002a32:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a36:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002a40:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a44:	4618      	mov	r0, r3
 8002a46:	f013 f91a 	bl	8015c7e <strcpy>
 8002a4a:	e007      	b.n	8002a5c <getLocation+0x434>
 8002a4c:	0801cd90 	.word	0x0801cd90
 8002a50:	d1b71759 	.word	0xd1b71759
 8002a54:	51eb851f 	.word	0x51eb851f
 8002a58:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 8002a5c:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <getLocation+0x498>)
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7ff fd3c 	bl	80024dc <strtoke>
 8002a64:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 8002a68:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a6c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8002a76:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f013 f8ff 	bl	8015c7e <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 8002a80:	490f      	ldr	r1, [pc, #60]	; (8002ac0 <getLocation+0x498>)
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7ff fd2a 	bl	80024dc <strtoke>
 8002a88:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 8002a8c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002a90:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002a9a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f013 f8ed 	bl	8015c7e <strcpy>

	//	mark position as valid
	position->isValid = 1;
 8002aa4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002aa8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 8002ab4:	2301      	movs	r3, #1
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac0:	0801cd90 	.word	0x0801cd90

08002ac4 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	if(position>0){
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <prevPos+0x2c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <prevPos+0x1a>
		position--;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <prevPos+0x2c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <prevPos+0x2c>)
 8002ada:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002adc:	e002      	b.n	8002ae4 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <prevPos+0x2c>)
 8002ae0:	220b      	movs	r2, #11
 8002ae2:	701a      	strb	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000048 	.word	0x20000048

08002af4 <nextPos>:

void nextPos(void){
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <nextPos+0x2c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b0a      	cmp	r3, #10
 8002afe:	d806      	bhi.n	8002b0e <nextPos+0x1a>
		position++;
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <nextPos+0x2c>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <nextPos+0x2c>)
 8002b0a:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002b0c:	e002      	b.n	8002b14 <nextPos+0x20>
		position=0;
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <nextPos+0x2c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000048 	.word	0x20000048

08002b24 <nextScreen>:

void nextScreen(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	nextPos();
 8002b28:	f7ff ffe4 	bl	8002af4 <nextPos>
	applySelectedScreen();
 8002b2c:	f000 f82c 	bl	8002b88 <applySelectedScreen>
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prevScreen>:
void prevScreen(void){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	prevPos();
 8002b38:	f7ff ffc4 	bl	8002ac4 <prevPos>
	applySelectedScreen();
 8002b3c:	f000 f824 	bl	8002b88 <applySelectedScreen>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <resetPos>:
void resetPos(void){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	position=0;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <resetPos+0x14>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002b4e:	f000 f81b 	bl	8002b88 <applySelectedScreen>
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000048 	.word	0x20000048

08002b5c <guiApplyView>:

void guiApplyView(struct Module *module){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <guiApplyView+0x24>)
 8002b6a:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <guiApplyView+0x28>)
 8002b72:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002b74:	f000 f830 	bl	8002bd8 <selectScreen>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000050 	.word	0x20000050
 8002b84:	2000004c 	.word	0x2000004c

08002b88 <applySelectedScreen>:

void applySelectedScreen(void){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <applySelectedScreen+0x40>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <applySelectedScreen+0x44>)
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <applySelectedScreen+0x48>)
 8002ba4:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <applySelectedScreen+0x40>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <applySelectedScreen+0x44>)
 8002bae:	460b      	mov	r3, r1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3324      	adds	r3, #36	; 0x24
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <applySelectedScreen+0x4c>)
 8002bbe:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002bc0:	f000 f80a 	bl	8002bd8 <selectScreen>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000048 	.word	0x20000048
 8002bcc:	0801de98 	.word	0x0801de98
 8002bd0:	20000050 	.word	0x20000050
 8002bd4:	2000004c 	.word	0x2000004c

08002bd8 <selectScreen>:

void selectScreen(void){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002bdc:	f7ff f972 	bl	8001ec4 <resetButtonHandlers>
	isModuleSet = 0;
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <selectScreen+0x1c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <selectScreen+0x20>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <selectScreen+0x24>)
 8002bec:	6013      	str	r3, [r2, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20002664 	.word	0x20002664
 8002bf8:	2000004c 	.word	0x2000004c
 8002bfc:	20000054 	.word	0x20000054

08002c00 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <showGui+0x2c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <showGui+0x18>
		moduleSetupPtr();
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <showGui+0x30>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4798      	blx	r3
		isModuleSet = 1;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <showGui+0x2c>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <showGui+0x34>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <showGui+0x26>
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <showGui+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4798      	blx	r3
//	lcdRefresh();
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20002664 	.word	0x20002664
 8002c30:	20000050 	.word	0x20000050
 8002c34:	20000054 	.word	0x20000054

08002c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <MX_I2C1_Init+0x78>)
 8002c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <MX_I2C1_Init+0x7c>)
 8002c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c76:	f008 fda7 	bl	800b7c8 <HAL_I2C_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c80:	f001 fc20 	bl	80044c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c84:	2100      	movs	r1, #0
 8002c86:	4809      	ldr	r0, [pc, #36]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c88:	f009 fd5d 	bl	800c746 <HAL_I2CEx_ConfigAnalogFilter>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002c92:	f001 fc17 	bl	80044c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c96:	2100      	movs	r1, #0
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <MX_I2C1_Init+0x74>)
 8002c9a:	f009 fd90 	bl	800c7be <HAL_I2CEx_ConfigDigitalFilter>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002ca4:	f001 fc0e 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20002668 	.word	0x20002668
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	000186a0 	.word	0x000186a0

08002cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_I2C_MspInit+0x84>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12c      	bne.n	8002d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfc:	2312      	movs	r3, #18
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d08:	2304      	movs	r3, #4
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	480c      	ldr	r0, [pc, #48]	; (8002d44 <HAL_I2C_MspInit+0x8c>)
 8002d14:	f008 fb3c 	bl	800b390 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_I2C_MspInit+0x88>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40005400 	.word	0x40005400
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020400 	.word	0x40020400

08002d48 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002d52:	2307      	movs	r3, #7
 8002d54:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002d62:	e010      	b.n	8002d86 <reverse_uint8+0x3e>
		result = result << 1;
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002d78:	7bba      	ldrb	r2, [r7, #14]
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	73bb      	strb	r3, [r7, #14]
		times--;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1eb      	bne.n	8002d64 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 f824 	bl	8002df0 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002da8:	2300      	movs	r3, #0
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	e014      	b.n	8002dd8 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002dae:	2300      	movs	r3, #0
 8002db0:	80bb      	strh	r3, [r7, #4]
 8002db2:	e00b      	b.n	8002dcc <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2232      	movs	r2, #50	; 0x32
 8002db8:	fb03 f202 	mul.w	r2, r3, r2
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <lcdClearBuffer+0x50>)
 8002dc2:	21ff      	movs	r1, #255	; 0xff
 8002dc4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002dc6:	88bb      	ldrh	r3, [r7, #4]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	80bb      	strh	r3, [r7, #4]
 8002dcc:	88bb      	ldrh	r3, [r7, #4]
 8002dce:	2b31      	cmp	r3, #49	; 0x31
 8002dd0:	d9f0      	bls.n	8002db4 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	71fb      	strb	r3, [r7, #7]
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2bef      	cmp	r3, #239	; 0xef
 8002ddc:	d9e7      	bls.n	8002dae <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 f806 	bl	8002df0 <updateSetting>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200026c0 	.word	0x200026c0

08002df0 <updateSetting>:

void updateSetting(uint8_t state){
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <updateSetting+0x1c>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	7013      	strb	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	20000058 	.word	0x20000058

08002e10 <lcdPutPix>:

void lcdPutPix(uint16_t x, uint8_t y, uint8_t val){
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	717b      	strb	r3, [r7, #5]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	713b      	strb	r3, [r7, #4]
	uint8_t xBlock = x/8;
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	73bb      	strb	r3, [r7, #14]
	uint8_t finalVal = lcdBuffer[y*SCR_W/8 + xBlock];
 8002e2a:	797b      	ldrb	r3, [r7, #5]
 8002e2c:	2232      	movs	r2, #50	; 0x32
 8002e2e:	fb03 f202 	mul.w	r2, r3, r2
 8002e32:	7bbb      	ldrb	r3, [r7, #14]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <lcdPutPix+0x98>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (1 << (8 - x%8 - 1));
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	737b      	strb	r3, [r7, #13]
	switch(val){
 8002e4c:	793b      	ldrb	r3, [r7, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d015      	beq.n	8002e7e <lcdPutPix+0x6e>
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	dc18      	bgt.n	8002e88 <lcdPutPix+0x78>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <lcdPutPix+0x50>
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <lcdPutPix+0x5a>
 8002e5e:	e013      	b.n	8002e88 <lcdPutPix+0x78>
	case 0:
		finalVal |= offset;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	73fb      	strb	r3, [r7, #15]
		break;
 8002e68:	e00e      	b.n	8002e88 <lcdPutPix+0x78>
	case 1:
		finalVal &= ~offset;
 8002e6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	b25a      	sxtb	r2, r3
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8002e7c:	e004      	b.n	8002e88 <lcdPutPix+0x78>
	case 2:
		finalVal ^= offset;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	7b7b      	ldrb	r3, [r7, #13]
 8002e82:	4053      	eors	r3, r2
 8002e84:	73fb      	strb	r3, [r7, #15]
		break;
 8002e86:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
 8002e88:	797b      	ldrb	r3, [r7, #5]
 8002e8a:	2232      	movs	r2, #50	; 0x32
 8002e8c:	fb03 f202 	mul.w	r2, r3, r2
 8002e90:	7bbb      	ldrb	r3, [r7, #14]
 8002e92:	4413      	add	r3, r2
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <lcdPutPix+0x98>)
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	54ca      	strb	r2, [r1, r3]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200026c0 	.word	0x200026c0

08002eac <lcdPutChar>:

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	80fb      	strh	r3, [r7, #6]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	717b      	strb	r3, [r7, #5]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	795b      	ldrb	r3, [r3, #5]
 8002ec4:	793a      	ldrb	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d304      	bcc.n	8002ed4 <lcdPutChar+0x28>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	799b      	ldrb	r3, [r3, #6]
 8002ece:	793a      	ldrb	r2, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d902      	bls.n	8002eda <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	79db      	ldrb	r3, [r3, #7]
 8002ed8:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	885b      	ldrh	r3, [r3, #2]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002efa:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]
 8002f00:	e09b      	b.n	800303a <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002f02:	797a      	ldrb	r2, [r7, #5]
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	4413      	add	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	0091      	lsls	r1, r2, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	460b      	mov	r3, r1
 8002f18:	4413      	add	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002f26:	793b      	ldrb	r3, [r7, #4]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	7952      	ldrb	r2, [r2, #5]
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	8852      	ldrh	r2, [r2, #2]
 8002f32:	fb03 f202 	mul.w	r2, r3, r2
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	7cb9      	ldrb	r1, [r7, #18]
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	3308      	adds	r3, #8
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	7d3b      	ldrb	r3, [r7, #20]
 8002f50:	fa42 f303 	asr.w	r3, r2, r3
 8002f54:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002f56:	8a3b      	ldrh	r3, [r7, #16]
 8002f58:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <lcdPutChar+0x1a8>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	4013      	ands	r3, r2
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	8a3b      	ldrh	r3, [r7, #16]
 8002f6c:	b2d1      	uxtb	r1, r2
 8002f6e:	4a39      	ldr	r2, [pc, #228]	; (8003054 <lcdPutChar+0x1a8>)
 8002f70:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	3308      	adds	r3, #8
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	7d3b      	ldrb	r3, [r7, #20]
 8002f80:	f1c3 0308 	rsb	r3, r3, #8
 8002f84:	21ff      	movs	r1, #255	; 0xff
 8002f86:	fa41 f303 	asr.w	r3, r1, r3
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b25b      	sxtb	r3, r3
 8002f90:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002f92:	2301      	movs	r3, #1
 8002f94:	757b      	strb	r3, [r7, #21]
 8002f96:	e029      	b.n	8002fec <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002f98:	7d7a      	ldrb	r2, [r7, #21]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	7a1b      	ldrb	r3, [r3, #8]
 8002fa4:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002fa6:	8a3a      	ldrh	r2, [r7, #16]
 8002fa8:	7d7b      	ldrb	r3, [r7, #21]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a29      	ldr	r2, [pc, #164]	; (8003054 <lcdPutChar+0x1a8>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	7db9      	ldrb	r1, [r7, #22]
 8002fb4:	7d3b      	ldrb	r3, [r7, #20]
 8002fb6:	f1c3 0308 	rsb	r3, r3, #8
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	b259      	sxtb	r1, r3
 8002fc0:	7af8      	ldrb	r0, [r7, #11]
 8002fc2:	7d3b      	ldrb	r3, [r7, #20]
 8002fc4:	fa40 f303 	asr.w	r3, r0, r3
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b259      	sxtb	r1, r3
 8002fd6:	8a3a      	ldrh	r2, [r7, #16]
 8002fd8:	7d7b      	ldrb	r3, [r7, #21]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b2c9      	uxtb	r1, r1
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <lcdPutChar+0x1a8>)
 8002fe0:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002fe6:	7d7b      	ldrb	r3, [r7, #21]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	757b      	strb	r3, [r7, #21]
 8002fec:	7d7a      	ldrb	r2, [r7, #21]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	10db      	asrs	r3, r3, #3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	dbce      	blt.n	8002f98 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002ffa:	8a3a      	ldrh	r2, [r7, #16]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	3307      	adds	r3, #7
 8003002:	10db      	asrs	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <lcdPutChar+0x1a8>)
 8003008:	5cd3      	ldrb	r3, [r2, r3]
 800300a:	b25a      	sxtb	r2, r3
 800300c:	7db9      	ldrb	r1, [r7, #22]
 800300e:	7d3b      	ldrb	r3, [r7, #20]
 8003010:	f1c3 0308 	rsb	r3, r3, #8
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	b25b      	sxtb	r3, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	b25b      	sxtb	r3, r3
 800301e:	4013      	ands	r3, r2
 8003020:	b259      	sxtb	r1, r3
 8003022:	8a3a      	ldrh	r2, [r7, #16]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3307      	adds	r3, #7
 800302a:	10db      	asrs	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	b2c9      	uxtb	r1, r1
 8003030:	4a08      	ldr	r2, [pc, #32]	; (8003054 <lcdPutChar+0x1a8>)
 8003032:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	3301      	adds	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	7dfa      	ldrb	r2, [r7, #23]
 8003040:	429a      	cmp	r2, r3
 8003042:	f4ff af5e 	bcc.w	8002f02 <lcdPutChar+0x56>
	}
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	200026c0 	.word	0x200026c0

08003058 <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	603a      	str	r2, [r7, #0]
 8003062:	80fb      	strh	r3, [r7, #6]
 8003064:	460b      	mov	r3, r1
 8003066:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	3305      	adds	r3, #5
 8003078:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	b29b      	uxth	r3, r3
 800308a:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	885b      	ldrh	r3, [r3, #2]
 8003090:	461a      	mov	r2, r3
 8003092:	7efb      	ldrb	r3, [r7, #27]
 8003094:	fb92 f3f3 	sdiv	r3, r2, r3
 8003098:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 800309a:	2300      	movs	r3, #0
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e094      	b.n	80031ca <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 80030a0:	797a      	ldrb	r2, [r7, #5]
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	4413      	add	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	0091      	lsls	r1, r2, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	4413      	add	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	7cbb      	ldrb	r3, [r7, #18]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	7c7a      	ldrb	r2, [r7, #17]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	fa42 f303 	asr.w	r3, r2, r3
 80030dc:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	4a40      	ldr	r2, [pc, #256]	; (80031e4 <lcdPutIcon+0x18c>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	b25a      	sxtb	r2, r3
 80030e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	4013      	ands	r3, r2
 80030f0:	b25a      	sxtb	r2, r3
 80030f2:	89fb      	ldrh	r3, [r7, #14]
 80030f4:	b2d1      	uxtb	r1, r2
 80030f6:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <lcdPutIcon+0x18c>)
 80030f8:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	7c7a      	ldrb	r2, [r7, #17]
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	461a      	mov	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b25a      	sxtb	r2, r3
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	f1c3 0308 	rsb	r3, r3, #8
 8003112:	21ff      	movs	r1, #255	; 0xff
 8003114:	fa41 f303 	asr.w	r3, r1, r3
 8003118:	b25b      	sxtb	r3, r3
 800311a:	4013      	ands	r3, r2
 800311c:	b25b      	sxtb	r3, r3
 800311e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8003120:	2301      	movs	r3, #1
 8003122:	777b      	strb	r3, [r7, #29]
 8003124:	e02d      	b.n	8003182 <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	7c7a      	ldrb	r2, [r7, #17]
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	7f7b      	ldrb	r3, [r7, #29]
 8003130:	4413      	add	r3, r2
 8003132:	461a      	mov	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 800313c:	89fa      	ldrh	r2, [r7, #14]
 800313e:	7f7b      	ldrb	r3, [r7, #29]
 8003140:	4413      	add	r3, r2
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <lcdPutIcon+0x18c>)
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	b25a      	sxtb	r2, r3
 8003148:	7fb9      	ldrb	r1, [r7, #30]
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	f1c3 0308 	rsb	r3, r3, #8
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	b259      	sxtb	r1, r3
 8003156:	7b78      	ldrb	r0, [r7, #13]
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	fa40 f303 	asr.w	r3, r0, r3
 800315e:	b25b      	sxtb	r3, r3
 8003160:	430b      	orrs	r3, r1
 8003162:	b25b      	sxtb	r3, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	b25b      	sxtb	r3, r3
 8003168:	4013      	ands	r3, r2
 800316a:	b259      	sxtb	r1, r3
 800316c:	89fa      	ldrh	r2, [r7, #14]
 800316e:	7f7b      	ldrb	r3, [r7, #29]
 8003170:	4413      	add	r3, r2
 8003172:	b2c9      	uxtb	r1, r1
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <lcdPutIcon+0x18c>)
 8003176:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8003178:	7b7b      	ldrb	r3, [r7, #13]
 800317a:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 800317c:	7f7b      	ldrb	r3, [r7, #29]
 800317e:	3301      	adds	r3, #1
 8003180:	777b      	strb	r3, [r7, #29]
 8003182:	7f3b      	ldrb	r3, [r7, #28]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	7f7a      	ldrb	r2, [r7, #29]
 800318a:	429a      	cmp	r2, r3
 800318c:	d9cb      	bls.n	8003126 <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	7f3b      	ldrb	r3, [r7, #28]
 8003192:	3307      	adds	r3, #7
 8003194:	10db      	asrs	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <lcdPutIcon+0x18c>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	b25a      	sxtb	r2, r3
 800319e:	7fb9      	ldrb	r1, [r7, #30]
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	f1c3 0308 	rsb	r3, r3, #8
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	4013      	ands	r3, r2
 80031b2:	b259      	sxtb	r1, r3
 80031b4:	89fa      	ldrh	r2, [r7, #14]
 80031b6:	7f3b      	ldrb	r3, [r7, #28]
 80031b8:	3307      	adds	r3, #7
 80031ba:	10db      	asrs	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	b2c9      	uxtb	r1, r1
 80031c0:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <lcdPutIcon+0x18c>)
 80031c2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
 80031c6:	3301      	adds	r3, #1
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	7ffa      	ldrb	r2, [r7, #31]
 80031cc:	7efb      	ldrb	r3, [r7, #27]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	f4ff af66 	bcc.w	80030a0 <lcdPutIcon+0x48>
	}
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200026c0 	.word	0x200026c0

080031e8 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60ba      	str	r2, [r7, #8]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	4603      	mov	r3, r0
 80031f4:	81fb      	strh	r3, [r7, #14]
 80031f6:	460b      	mov	r3, r1
 80031f8:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
 80031fe:	e015      	b.n	800322c <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b29a      	uxth	r2, r3
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	b29b      	uxth	r3, r3
 800320a:	fb12 f303 	smulbb	r3, r2, r3
 800320e:	b29a      	uxth	r2, r3
 8003210:	89fb      	ldrh	r3, [r7, #14]
 8003212:	4413      	add	r3, r2
 8003214:	b298      	uxth	r0, r3
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4413      	add	r3, r2
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	7b79      	ldrb	r1, [r7, #13]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f7ff fe43 	bl	8002eac <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	3301      	adds	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
 800322c:	7dfc      	ldrb	r4, [r7, #23]
 800322e:	68b8      	ldr	r0, [r7, #8]
 8003230:	f7fc ffe8 	bl	8000204 <strlen>
 8003234:	4603      	mov	r3, r0
 8003236:	429c      	cmp	r4, r3
 8003238:	d3e2      	bcc.n	8003200 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}

08003244 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60ba      	str	r2, [r7, #8]
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4603      	mov	r3, r0
 8003250:	81fb      	strh	r3, [r7, #14]
 8003252:	460b      	mov	r3, r1
 8003254:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	fb93 f3f2 	sdiv	r3, r3, r2
 8003264:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 8003266:	7b7b      	ldrb	r3, [r7, #13]
 8003268:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 800326e:	2300      	movs	r3, #0
 8003270:	827b      	strh	r3, [r7, #18]
 8003272:	e02d      	b.n	80032d0 <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8003274:	8aba      	ldrh	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800327e:	429a      	cmp	r2, r3
 8003280:	dd06      	ble.n	8003290 <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	785a      	ldrb	r2, [r3, #1]
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	4413      	add	r3, r2
 800328a:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 8003290:	8a7b      	ldrh	r3, [r7, #18]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4413      	add	r3, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b0a      	cmp	r3, #10
 800329a:	d107      	bne.n	80032ac <lcdPutStrML+0x68>
			xPos = x;
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	785a      	ldrb	r2, [r3, #1]
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	4413      	add	r3, r2
 80032a8:	75fb      	strb	r3, [r7, #23]
 80032aa:	e00e      	b.n	80032ca <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 80032ac:	8a7b      	ldrh	r3, [r7, #18]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4413      	add	r3, r2
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	7df9      	ldrb	r1, [r7, #23]
 80032b6:	8ab8      	ldrh	r0, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f7ff fdf7 	bl	8002eac <lcdPutChar>
			xPos += font->font_Width;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	8abb      	ldrh	r3, [r7, #20]
 80032c6:	4413      	add	r3, r2
 80032c8:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 80032ca:	8a7b      	ldrh	r3, [r7, #18]
 80032cc:	3301      	adds	r3, #1
 80032ce:	827b      	strh	r3, [r7, #18]
 80032d0:	8a7c      	ldrh	r4, [r7, #18]
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f7fc ff96 	bl	8000204 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	429c      	cmp	r4, r3
 80032dc:	d3ca      	bcc.n	8003274 <lcdPutStrML+0x30>
		}

	}
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd90      	pop	{r4, r7, pc}

080032e8 <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 80032e8:	b490      	push	{r4, r7}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	80fb      	strh	r3, [r7, #6]
 80032fa:	4603      	mov	r3, r0
 80032fc:	80bb      	strh	r3, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	70fb      	strb	r3, [r7, #3]
 8003302:	4613      	mov	r3, r2
 8003304:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	b29b      	uxth	r3, r3
 800330c:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	b29b      	uxth	r3, r3
 800331c:	88ba      	ldrh	r2, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d905      	bls.n	800332e <lcdVLine+0x46>
		uint8_t temp = y1;
 8003322:	88bb      	ldrh	r3, [r7, #4]
 8003324:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 800332e:	88bb      	ldrh	r3, [r7, #4]
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e04e      	b.n	80033d2 <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2232      	movs	r2, #50	; 0x32
 8003338:	fb03 f202 	mul.w	r2, r3, r2
 800333c:	7b7b      	ldrb	r3, [r7, #13]
 800333e:	4413      	add	r3, r2
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <lcdVLine+0x100>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8003346:	78bb      	ldrb	r3, [r7, #2]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d01e      	beq.n	800338a <lcdVLine+0xa2>
 800334c:	2b02      	cmp	r3, #2
 800334e:	dc27      	bgt.n	80033a0 <lcdVLine+0xb8>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <lcdVLine+0x72>
 8003354:	2b01      	cmp	r3, #1
 8003356:	d00b      	beq.n	8003370 <lcdVLine+0x88>
 8003358:	e022      	b.n	80033a0 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 800335a:	7b3b      	ldrb	r3, [r7, #12]
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	fa42 f303 	asr.w	r3, r2, r3
 8003362:	b25a      	sxtb	r2, r3
 8003364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003368:	4313      	orrs	r3, r2
 800336a:	b25b      	sxtb	r3, r3
 800336c:	73bb      	strb	r3, [r7, #14]
				break;
 800336e:	e024      	b.n	80033ba <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8003370:	7b3b      	ldrb	r3, [r7, #12]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	fa42 f303 	asr.w	r3, r2, r3
 8003378:	b25b      	sxtb	r3, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	b25a      	sxtb	r2, r3
 800337e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003382:	4013      	ands	r3, r2
 8003384:	b25b      	sxtb	r3, r3
 8003386:	73bb      	strb	r3, [r7, #14]
				break;
 8003388:	e017      	b.n	80033ba <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	fa42 f303 	asr.w	r3, r2, r3
 8003392:	b25a      	sxtb	r2, r3
 8003394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003398:	4053      	eors	r3, r2
 800339a:	b25b      	sxtb	r3, r3
 800339c:	73bb      	strb	r3, [r7, #14]
				break;
 800339e:	e00c      	b.n	80033ba <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 80033a0:	7b3b      	ldrb	r3, [r7, #12]
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	fa42 f303 	asr.w	r3, r2, r3
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b2:	4013      	ands	r3, r2
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	73bb      	strb	r3, [r7, #14]
				break;
 80033b8:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	fb03 f202 	mul.w	r2, r3, r2
 80033c2:	7b7b      	ldrb	r3, [r7, #13]
 80033c4:	4413      	add	r3, r2
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <lcdVLine+0x100>)
 80033c8:	7bba      	ldrb	r2, [r7, #14]
 80033ca:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	3301      	adds	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d9ac      	bls.n	8003334 <lcdVLine+0x4c>
	}
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc90      	pop	{r4, r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	200026c0 	.word	0x200026c0

080033ec <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80033ec:	b490      	push	{r4, r7}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4604      	mov	r4, r0
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	80fb      	strh	r3, [r7, #6]
 80033fe:	4603      	mov	r3, r0
 8003400:	80bb      	strh	r3, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	70fb      	strb	r3, [r7, #3]
 8003406:	4613      	mov	r3, r2
 8003408:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 800340a:	23ff      	movs	r3, #255	; 0xff
 800340c:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 800340e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003412:	2b14      	cmp	r3, #20
 8003414:	f200 8208 	bhi.w	8003828 <lcdHLine2+0x43c>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <lcdHLine2+0x34>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003475 	.word	0x08003475
 8003424:	0800347b 	.word	0x0800347b
 8003428:	08003481 	.word	0x08003481
 800342c:	08003487 	.word	0x08003487
 8003430:	0800349f 	.word	0x0800349f
 8003434:	080034b7 	.word	0x080034b7
 8003438:	080034cf 	.word	0x080034cf
 800343c:	08003519 	.word	0x08003519
 8003440:	0800355d 	.word	0x0800355d
 8003444:	080035a1 	.word	0x080035a1
 8003448:	080035df 	.word	0x080035df
 800344c:	08003605 	.word	0x08003605
 8003450:	0800362f 	.word	0x0800362f
 8003454:	08003665 	.word	0x08003665
 8003458:	0800367d 	.word	0x0800367d
 800345c:	080036a3 	.word	0x080036a3
 8003460:	080036d9 	.word	0x080036d9
 8003464:	0800370f 	.word	0x0800370f
 8003468:	08003751 	.word	0x08003751
 800346c:	080037ab 	.word	0x080037ab
 8003470:	080037e7 	.word	0x080037e7
		case 0:	// clear
			pattern = 0x00;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
			break;
 8003478:	e1ea      	b.n	8003850 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800347a:	23ff      	movs	r3, #255	; 0xff
 800347c:	75fb      	strb	r3, [r7, #23]
			break;
 800347e:	e1e7      	b.n	8003850 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8003480:	2355      	movs	r3, #85	; 0x55
 8003482:	75fb      	strb	r3, [r7, #23]
			break;
 8003484:	e1e4      	b.n	8003850 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <lcdHLine2+0xac>
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8003496:	e1db      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8003498:	23ff      	movs	r3, #255	; 0xff
 800349a:	75fb      	strb	r3, [r7, #23]
			break;
 800349c:	e1d8      	b.n	8003850 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <lcdHLine2+0xc4>
 80034aa:	23aa      	movs	r3, #170	; 0xaa
 80034ac:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 80034ae:	e1cf      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x55;
 80034b0:	2355      	movs	r3, #85	; 0x55
 80034b2:	75fb      	strb	r3, [r7, #23]
			break;
 80034b4:	e1cc      	b.n	8003850 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <lcdHLine2+0xdc>
 80034c2:	2388      	movs	r3, #136	; 0x88
 80034c4:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80034c6:	e1c3      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80034c8:	2322      	movs	r3, #34	; 0x22
 80034ca:	75fb      	strb	r3, [r7, #23]
			break;
 80034cc:	e1c0      	b.n	8003850 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <lcdHLine2+0xf4>
 80034da:	2388      	movs	r3, #136	; 0x88
 80034dc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80034de:	e1a6      	b.n	800382e <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <lcdHLine2+0x106>
 80034ec:	2344      	movs	r3, #68	; 0x44
 80034ee:	75fb      	strb	r3, [r7, #23]
			break;
 80034f0:	e19d      	b.n	800382e <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d102      	bne.n	8003504 <lcdHLine2+0x118>
 80034fe:	2322      	movs	r3, #34	; 0x22
 8003500:	75fb      	strb	r3, [r7, #23]
			break;
 8003502:	e194      	b.n	800382e <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b03      	cmp	r3, #3
 800350e:	f040 818e 	bne.w	800382e <lcdHLine2+0x442>
 8003512:	2311      	movs	r3, #17
 8003514:	75fb      	strb	r3, [r7, #23]
			break;
 8003516:	e18a      	b.n	800382e <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <lcdHLine2+0x144>
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d102      	bne.n	8003536 <lcdHLine2+0x14a>
 8003530:	23aa      	movs	r3, #170	; 0xaa
 8003532:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003534:	e17d      	b.n	8003832 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <lcdHLine2+0x15c>
 8003542:	2322      	movs	r3, #34	; 0x22
 8003544:	75fb      	strb	r3, [r7, #23]
			break;
 8003546:	e174      	b.n	8003832 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b03      	cmp	r3, #3
 8003552:	f040 816e 	bne.w	8003832 <lcdHLine2+0x446>
 8003556:	2388      	movs	r3, #136	; 0x88
 8003558:	75fb      	strb	r3, [r7, #23]
			break;
 800355a:	e16a      	b.n	8003832 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d005      	beq.n	8003574 <lcdHLine2+0x188>
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d102      	bne.n	800357a <lcdHLine2+0x18e>
 8003574:	2355      	movs	r3, #85	; 0x55
 8003576:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8003578:	e15d      	b.n	8003836 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <lcdHLine2+0x1a0>
 8003586:	2388      	movs	r3, #136	; 0x88
 8003588:	75fb      	strb	r3, [r7, #23]
			break;
 800358a:	e154      	b.n	8003836 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	f040 814e 	bne.w	8003836 <lcdHLine2+0x44a>
 800359a:	2322      	movs	r3, #34	; 0x22
 800359c:	75fb      	strb	r3, [r7, #23]
			break;
 800359e:	e14a      	b.n	8003836 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <lcdHLine2+0x1cc>
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <lcdHLine2+0x1d2>
 80035b8:	23cc      	movs	r3, #204	; 0xcc
 80035ba:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80035bc:	e13d      	b.n	800383a <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d006      	beq.n	80035d8 <lcdHLine2+0x1ec>
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f040 8131 	bne.w	800383a <lcdHLine2+0x44e>
 80035d8:	2333      	movs	r3, #51	; 0x33
 80035da:	75fb      	strb	r3, [r7, #23]
			break;
 80035dc:	e12d      	b.n	800383a <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <lcdHLine2+0x204>
 80035ea:	2355      	movs	r3, #85	; 0x55
 80035ec:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80035ee:	e126      	b.n	800383e <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8120 	beq.w	800383e <lcdHLine2+0x452>
 80035fe:	23ff      	movs	r3, #255	; 0xff
 8003600:	75fb      	strb	r3, [r7, #23]
			break;
 8003602:	e11c      	b.n	800383e <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <lcdHLine2+0x22a>
 8003610:	23cc      	movs	r3, #204	; 0xcc
 8003612:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003614:	e11c      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d102      	bne.n	8003628 <lcdHLine2+0x23c>
 8003622:	2344      	movs	r3, #68	; 0x44
 8003624:	75fb      	strb	r3, [r7, #23]
			break;
 8003626:	e113      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
			break;
 800362c:	e110      	b.n	8003850 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <lcdHLine2+0x254>
 800363a:	23ee      	movs	r3, #238	; 0xee
 800363c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800363e:	e107      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d005      	beq.n	8003658 <lcdHLine2+0x26c>
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d102      	bne.n	800365e <lcdHLine2+0x272>
 8003658:	2322      	movs	r3, #34	; 0x22
 800365a:	75fb      	strb	r3, [r7, #23]
			break;
 800365c:	e0f8      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
			break;
 8003662:	e0f5      	b.n	8003850 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <lcdHLine2+0x28a>
 8003670:	23ff      	movs	r3, #255	; 0xff
 8003672:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003674:	e0ec      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8003676:	2388      	movs	r3, #136	; 0x88
 8003678:	75fb      	strb	r3, [r7, #23]
			break;
 800367a:	e0e9      	b.n	8003850 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <lcdHLine2+0x2a2>
 8003688:	23aa      	movs	r3, #170	; 0xaa
 800368a:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 800368c:	e0d9      	b.n	8003842 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80d3 	beq.w	8003842 <lcdHLine2+0x456>
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
			break;
 80036a0:	e0cf      	b.n	8003842 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <lcdHLine2+0x2ce>
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d102      	bne.n	80036c0 <lcdHLine2+0x2d4>
 80036ba:	23aa      	movs	r3, #170	; 0xaa
 80036bc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80036be:	e0c7      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <lcdHLine2+0x2e6>
 80036cc:	2344      	movs	r3, #68	; 0x44
 80036ce:	75fb      	strb	r3, [r7, #23]
			break;
 80036d0:	e0be      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
			break;
 80036d6:	e0bb      	b.n	8003850 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <lcdHLine2+0x304>
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d102      	bne.n	80036f6 <lcdHLine2+0x30a>
 80036f0:	23ee      	movs	r3, #238	; 0xee
 80036f2:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80036f4:	e0ac      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <lcdHLine2+0x31c>
 8003702:	23aa      	movs	r3, #170	; 0xaa
 8003704:	75fb      	strb	r3, [r7, #23]
			break;
 8003706:	e0a3      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003708:	2300      	movs	r3, #0
 800370a:	75fb      	strb	r3, [r7, #23]
			break;
 800370c:	e0a0      	b.n	8003850 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <lcdHLine2+0x33a>
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d102      	bne.n	800372c <lcdHLine2+0x340>
 8003726:	2344      	movs	r3, #68	; 0x44
 8003728:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800372a:	e08c      	b.n	8003846 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <lcdHLine2+0x352>
 8003738:	23aa      	movs	r3, #170	; 0xaa
 800373a:	75fb      	strb	r3, [r7, #23]
			break;
 800373c:	e083      	b.n	8003846 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d17d      	bne.n	8003846 <lcdHLine2+0x45a>
 800374a:	2311      	movs	r3, #17
 800374c:	75fb      	strb	r3, [r7, #23]
			break;
 800374e:	e07a      	b.n	8003846 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	4baf      	ldr	r3, [pc, #700]	; (8003a10 <lcdHLine2+0x624>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	0859      	lsrs	r1, r3, #1
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <lcdHLine2+0x382>
 8003768:	2355      	movs	r3, #85	; 0x55
 800376a:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 800376c:	e06d      	b.n	800384a <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4ba7      	ldr	r3, [pc, #668]	; (8003a10 <lcdHLine2+0x624>)
 8003772:	fba3 1302 	umull	r1, r3, r3, r2
 8003776:	0859      	lsrs	r1, r3, #1
 8003778:	460b      	mov	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <lcdHLine2+0x3a0>
 8003786:	23aa      	movs	r3, #170	; 0xaa
 8003788:	75fb      	strb	r3, [r7, #23]
			break;
 800378a:	e05e      	b.n	800384a <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	4ba0      	ldr	r3, [pc, #640]	; (8003a10 <lcdHLine2+0x624>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	0859      	lsrs	r1, r3, #1
 8003796:	460b      	mov	r3, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d152      	bne.n	800384a <lcdHLine2+0x45e>
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]
			break;
 80037a8:	e04f      	b.n	800384a <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <lcdHLine2+0x3d0>
 80037b6:	2322      	movs	r3, #34	; 0x22
 80037b8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80037ba:	e049      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <lcdHLine2+0x3e2>
 80037c8:	2355      	movs	r3, #85	; 0x55
 80037ca:	75fb      	strb	r3, [r7, #23]
			break;
 80037cc:	e040      	b.n	8003850 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d102      	bne.n	80037e0 <lcdHLine2+0x3f4>
 80037da:	2388      	movs	r3, #136	; 0x88
 80037dc:	75fb      	strb	r3, [r7, #23]
			break;
 80037de:	e037      	b.n	8003850 <lcdHLine2+0x464>
			else pattern = 0x00;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
			break;
 80037e4:	e034      	b.n	8003850 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d005      	beq.n	80037fe <lcdHLine2+0x412>
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d102      	bne.n	8003804 <lcdHLine2+0x418>
 80037fe:	2388      	movs	r3, #136	; 0x88
 8003800:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003802:	e024      	b.n	800384e <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <lcdHLine2+0x42a>
 8003810:	2377      	movs	r3, #119	; 0x77
 8003812:	75fb      	strb	r3, [r7, #23]
			break;
 8003814:	e01b      	b.n	800384e <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d115      	bne.n	800384e <lcdHLine2+0x462>
 8003822:	23aa      	movs	r3, #170	; 0xaa
 8003824:	75fb      	strb	r3, [r7, #23]
			break;
 8003826:	e012      	b.n	800384e <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
			break;
 800382c:	e010      	b.n	8003850 <lcdHLine2+0x464>
			break;
 800382e:	bf00      	nop
 8003830:	e00e      	b.n	8003850 <lcdHLine2+0x464>
			break;
 8003832:	bf00      	nop
 8003834:	e00c      	b.n	8003850 <lcdHLine2+0x464>
			break;
 8003836:	bf00      	nop
 8003838:	e00a      	b.n	8003850 <lcdHLine2+0x464>
			break;
 800383a:	bf00      	nop
 800383c:	e008      	b.n	8003850 <lcdHLine2+0x464>
			break;
 800383e:	bf00      	nop
 8003840:	e006      	b.n	8003850 <lcdHLine2+0x464>
			break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <lcdHLine2+0x464>
			break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <lcdHLine2+0x464>
			break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <lcdHLine2+0x464>
			break;
 800384e:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	08db      	lsrs	r3, r3, #3
 8003854:	b29b      	uxth	r3, r3
 8003856:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8003862:	88bb      	ldrh	r3, [r7, #4]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	b29b      	uxth	r3, r3
 8003868:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800386a:	88bb      	ldrh	r3, [r7, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	2232      	movs	r2, #50	; 0x32
 8003878:	fb03 f202 	mul.w	r2, r3, r2
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	4413      	add	r3, r2
 8003880:	4a64      	ldr	r2, [pc, #400]	; (8003a14 <lcdHLine2+0x628>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	2232      	movs	r2, #50	; 0x32
 800388a:	fb03 f202 	mul.w	r2, r3, r2
 800388e:	7b7b      	ldrb	r3, [r7, #13]
 8003890:	4413      	add	r3, r2
 8003892:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <lcdHLine2+0x628>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
 8003896:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8003898:	23ff      	movs	r3, #255	; 0xff
 800389a:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	f1c3 0208 	rsb	r2, r3, #8
 80038a2:	88b9      	ldrh	r1, [r7, #4]
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	1acb      	subs	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	429a      	cmp	r2, r3
 80038ac:	dd11      	ble.n	80038d2 <lcdHLine2+0x4e6>
 80038ae:	88ba      	ldrh	r2, [r7, #4]
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	22ff      	movs	r2, #255	; 0xff
 80038b8:	fa42 f303 	asr.w	r3, r2, r3
 80038bc:	43da      	mvns	r2, r3
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	fa42 f303 	asr.w	r3, r2, r3
 80038c4:	b25a      	sxtb	r2, r3
 80038c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	753b      	strb	r3, [r7, #20]
 80038d0:	e001      	b.n	80038d6 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80038d6:	78bb      	ldrb	r3, [r7, #2]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	f200 8130 	bhi.w	8003b3e <lcdHLine2+0x752>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <lcdHLine2+0x4f8>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003979 	.word	0x08003979
 80038ec:	08003a19 	.word	0x08003a19
 80038f0:	08003a9d 	.word	0x08003a9d
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80038f4:	7bbb      	ldrb	r3, [r7, #14]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	fa42 f303 	asr.w	r3, r2, r3
 80038fc:	b25a      	sxtb	r2, r3
 80038fe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003902:	4013      	ands	r3, r2
 8003904:	b25a      	sxtb	r2, r3
 8003906:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800390a:	4313      	orrs	r3, r2
 800390c:	b25b      	sxtb	r3, r3
 800390e:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	b25a      	sxtb	r2, r3
 800391e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003922:	4013      	ands	r3, r2
 8003924:	b25a      	sxtb	r2, r3
 8003926:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800392a:	4313      	orrs	r3, r2
 800392c:	b25b      	sxtb	r3, r3
 800392e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003930:	2301      	movs	r3, #1
 8003932:	74fb      	strb	r3, [r7, #19]
 8003934:	e019      	b.n	800396a <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	2232      	movs	r2, #50	; 0x32
 800393a:	fb03 f202 	mul.w	r2, r3, r2
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	441a      	add	r2, r3
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	4413      	add	r3, r2
 8003946:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <lcdHLine2+0x628>)
 8003948:	5cd1      	ldrb	r1, [r2, r3]
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	2232      	movs	r2, #50	; 0x32
 800394e:	fb03 f202 	mul.w	r2, r3, r2
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	441a      	add	r2, r3
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	4413      	add	r3, r2
 800395a:	7dfa      	ldrb	r2, [r7, #23]
 800395c:	430a      	orrs	r2, r1
 800395e:	b2d1      	uxtb	r1, r2
 8003960:	4a2c      	ldr	r2, [pc, #176]	; (8003a14 <lcdHLine2+0x628>)
 8003962:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	3301      	adds	r3, #1
 8003968:	74fb      	strb	r3, [r7, #19]
 800396a:	7cfa      	ldrb	r2, [r7, #19]
 800396c:	7b79      	ldrb	r1, [r7, #13]
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	1acb      	subs	r3, r1, r3
 8003972:	429a      	cmp	r2, r3
 8003974:	dbdf      	blt.n	8003936 <lcdHLine2+0x54a>
			}
			break;
 8003976:	e0e2      	b.n	8003b3e <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	fa42 f303 	asr.w	r3, r2, r3
 8003980:	b25a      	sxtb	r2, r3
 8003982:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003986:	4013      	ands	r3, r2
 8003988:	b25b      	sxtb	r3, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	b25a      	sxtb	r2, r3
 800398e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003992:	4013      	ands	r3, r2
 8003994:	b25b      	sxtb	r3, r3
 8003996:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8003998:	7b3b      	ldrb	r3, [r7, #12]
 800399a:	f1c3 0307 	rsb	r3, r3, #7
 800399e:	22ff      	movs	r2, #255	; 0xff
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	b25a      	sxtb	r2, r3
 80039a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039bc:	2301      	movs	r3, #1
 80039be:	74bb      	strb	r3, [r7, #18]
 80039c0:	e01e      	b.n	8003a00 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	2232      	movs	r2, #50	; 0x32
 80039c6:	fb03 f202 	mul.w	r2, r3, r2
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	441a      	add	r2, r3
 80039ce:	7cbb      	ldrb	r3, [r7, #18]
 80039d0:	4413      	add	r3, r2
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <lcdHLine2+0x628>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	b25a      	sxtb	r2, r3
 80039d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039dc:	43db      	mvns	r3, r3
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	4013      	ands	r3, r2
 80039e2:	b259      	sxtb	r1, r3
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	2232      	movs	r2, #50	; 0x32
 80039e8:	fb03 f202 	mul.w	r2, r3, r2
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	441a      	add	r2, r3
 80039f0:	7cbb      	ldrb	r3, [r7, #18]
 80039f2:	4413      	add	r3, r2
 80039f4:	b2c9      	uxtb	r1, r1
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <lcdHLine2+0x628>)
 80039f8:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039fa:	7cbb      	ldrb	r3, [r7, #18]
 80039fc:	3301      	adds	r3, #1
 80039fe:	74bb      	strb	r3, [r7, #18]
 8003a00:	7cba      	ldrb	r2, [r7, #18]
 8003a02:	7b79      	ldrb	r1, [r7, #13]
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	dbda      	blt.n	80039c2 <lcdHLine2+0x5d6>
			}
			break;
 8003a0c:	e097      	b.n	8003b3e <lcdHLine2+0x752>
 8003a0e:	bf00      	nop
 8003a10:	aaaaaaab 	.word	0xaaaaaaab
 8003a14:	200026c0 	.word	0x200026c0
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	22ff      	movs	r2, #255	; 0xff
 8003a1c:	fa42 f303 	asr.w	r3, r2, r3
 8003a20:	b25a      	sxtb	r2, r3
 8003a22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003a26:	4013      	ands	r3, r2
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a2e:	4053      	eors	r3, r2
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	f1c3 0307 	rsb	r3, r3, #7
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	b25a      	sxtb	r2, r3
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b25a      	sxtb	r2, r3
 8003a4a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003a4e:	4053      	eors	r3, r2
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a54:	2301      	movs	r3, #1
 8003a56:	747b      	strb	r3, [r7, #17]
 8003a58:	e019      	b.n	8003a8e <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	2232      	movs	r2, #50	; 0x32
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	441a      	add	r2, r3
 8003a66:	7c7b      	ldrb	r3, [r7, #17]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <lcdHLine2+0x788>)
 8003a6c:	5cd1      	ldrb	r1, [r2, r3]
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	2232      	movs	r2, #50	; 0x32
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	441a      	add	r2, r3
 8003a7a:	7c7b      	ldrb	r3, [r7, #17]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	7dfa      	ldrb	r2, [r7, #23]
 8003a80:	404a      	eors	r2, r1
 8003a82:	b2d1      	uxtb	r1, r2
 8003a84:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <lcdHLine2+0x788>)
 8003a86:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a88:	7c7b      	ldrb	r3, [r7, #17]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	747b      	strb	r3, [r7, #17]
 8003a8e:	7c7a      	ldrb	r2, [r7, #17]
 8003a90:	7b79      	ldrb	r1, [r7, #13]
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	1acb      	subs	r3, r1, r3
 8003a96:	429a      	cmp	r2, r3
 8003a98:	dbdf      	blt.n	8003a5a <lcdHLine2+0x66e>
			}
			break;
 8003a9a:	e050      	b.n	8003b3e <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	fa42 f303 	asr.w	r3, r2, r3
 8003aa4:	b25a      	sxtb	r2, r3
 8003aa6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	b25a      	sxtb	r2, r3
 8003aae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	b259      	sxtb	r1, r3
 8003ab6:	7bbb      	ldrb	r3, [r7, #14]
 8003ab8:	f1c3 0308 	rsb	r3, r3, #8
 8003abc:	20ff      	movs	r0, #255	; 0xff
 8003abe:	fa00 f303 	lsl.w	r3, r0, r3
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8003ad2:	7b3b      	ldrb	r3, [r7, #12]
 8003ad4:	f1c3 0307 	rsb	r3, r3, #7
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	b25a      	sxtb	r2, r3
 8003ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b25a      	sxtb	r2, r3
 8003ae8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	b259      	sxtb	r1, r3
 8003af0:	7b3b      	ldrb	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	20ff      	movs	r0, #255	; 0xff
 8003af6:	fa40 f303 	asr.w	r3, r0, r3
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	400b      	ands	r3, r1
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	743b      	strb	r3, [r7, #16]
 8003b0e:	e00f      	b.n	8003b30 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	2232      	movs	r2, #50	; 0x32
 8003b14:	fb03 f202 	mul.w	r2, r3, r2
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	441a      	add	r2, r3
 8003b1c:	7c3b      	ldrb	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	7dfa      	ldrb	r2, [r7, #23]
 8003b22:	43d2      	mvns	r2, r2
 8003b24:	b2d1      	uxtb	r1, r2
 8003b26:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <lcdHLine2+0x788>)
 8003b28:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003b2a:	7c3b      	ldrb	r3, [r7, #16]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	743b      	strb	r3, [r7, #16]
 8003b30:	7c3a      	ldrb	r2, [r7, #16]
 8003b32:	7b79      	ldrb	r1, [r7, #13]
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	dbe9      	blt.n	8003b10 <lcdHLine2+0x724>
			}
			break;
 8003b3c:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	2232      	movs	r2, #50	; 0x32
 8003b42:	fb03 f202 	mul.w	r2, r3, r2
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	4413      	add	r3, r2
 8003b4a:	490a      	ldr	r1, [pc, #40]	; (8003b74 <lcdHLine2+0x788>)
 8003b4c:	7dba      	ldrb	r2, [r7, #22]
 8003b4e:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003b50:	7b7a      	ldrb	r2, [r7, #13]
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d908      	bls.n	8003b6a <lcdHLine2+0x77e>
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2232      	movs	r2, #50	; 0x32
 8003b5c:	fb03 f202 	mul.w	r2, r3, r2
 8003b60:	7b7b      	ldrb	r3, [r7, #13]
 8003b62:	4413      	add	r3, r2
 8003b64:	4903      	ldr	r1, [pc, #12]	; (8003b74 <lcdHLine2+0x788>)
 8003b66:	7d7a      	ldrb	r2, [r7, #21]
 8003b68:	54ca      	strb	r2, [r1, r3]
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc90      	pop	{r4, r7}
 8003b72:	4770      	bx	lr
 8003b74:	200026c0 	.word	0x200026c0

08003b78 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003b78:	b490      	push	{r4, r7}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	80fb      	strh	r3, [r7, #6]
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80bb      	strh	r3, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70fb      	strb	r3, [r7, #3]
 8003b92:	4613      	mov	r3, r2
 8003b94:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003ba8:	88bb      	ldrh	r3, [r7, #4]
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	2232      	movs	r2, #50	; 0x32
 8003bbe:	fb03 f202 	mul.w	r2, r3, r2
 8003bc2:	7c7b      	ldrb	r3, [r7, #17]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a71      	ldr	r2, [pc, #452]	; (8003d8c <lcdHLine+0x214>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	fb03 f202 	mul.w	r2, r3, r2
 8003bd4:	7c7b      	ldrb	r3, [r7, #17]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a6b      	ldr	r2, [pc, #428]	; (8003d8c <lcdHLine+0x214>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8003be2:	23ff      	movs	r3, #255	; 0xff
 8003be4:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8003be6:	7c3b      	ldrb	r3, [r7, #16]
 8003be8:	f1c3 0208 	rsb	r2, r3, #8
 8003bec:	88b9      	ldrh	r1, [r7, #4]
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	1acb      	subs	r3, r1, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	dd09      	ble.n	8003c0c <lcdHLine+0x94>
 8003bf8:	88ba      	ldrh	r2, [r7, #4]
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	fa42 f303 	asr.w	r3, r2, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8003c0c:	78bb      	ldrb	r3, [r7, #2]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d067      	beq.n	8003ce2 <lcdHLine+0x16a>
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f300 809e 	bgt.w	8003d54 <lcdHLine+0x1dc>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <lcdHLine+0xaa>
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d02e      	beq.n	8003c7e <lcdHLine+0x106>
 8003c20:	e098      	b.n	8003d54 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003c22:	7d7a      	ldrb	r2, [r7, #21]
 8003c24:	7c3b      	ldrb	r3, [r7, #16]
 8003c26:	fa42 f303 	asr.w	r3, r2, r3
 8003c2a:	b25a      	sxtb	r2, r3
 8003c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
 8003c38:	f1c3 0307 	rsb	r3, r3, #7
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	b25a      	sxtb	r2, r3
 8003c44:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003c4e:	2301      	movs	r3, #1
 8003c50:	753b      	strb	r3, [r7, #20]
 8003c52:	e00d      	b.n	8003c70 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	2232      	movs	r2, #50	; 0x32
 8003c58:	fb03 f202 	mul.w	r2, r3, r2
 8003c5c:	7c7b      	ldrb	r3, [r7, #17]
 8003c5e:	441a      	add	r2, r3
 8003c60:	7d3b      	ldrb	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <lcdHLine+0x214>)
 8003c66:	21ff      	movs	r1, #255	; 0xff
 8003c68:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003c6a:	7d3b      	ldrb	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	753b      	strb	r3, [r7, #20]
 8003c70:	7d3a      	ldrb	r2, [r7, #20]
 8003c72:	7bf9      	ldrb	r1, [r7, #15]
 8003c74:	7c7b      	ldrb	r3, [r7, #17]
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dbeb      	blt.n	8003c54 <lcdHLine+0xdc>
		}
		break;
 8003c7c:	e06a      	b.n	8003d54 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003c7e:	7d7a      	ldrb	r2, [r7, #21]
 8003c80:	7c3b      	ldrb	r3, [r7, #16]
 8003c82:	fa42 f303 	asr.w	r3, r2, r3
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	b25a      	sxtb	r2, r3
 8003c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	f1c3 0307 	rsb	r3, r3, #7
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	74fb      	strb	r3, [r7, #19]
 8003cb6:	e00d      	b.n	8003cd4 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	2232      	movs	r2, #50	; 0x32
 8003cbc:	fb03 f202 	mul.w	r2, r3, r2
 8003cc0:	7c7b      	ldrb	r3, [r7, #17]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <lcdHLine+0x214>)
 8003cca:	2100      	movs	r1, #0
 8003ccc:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	74fb      	strb	r3, [r7, #19]
 8003cd4:	7cfa      	ldrb	r2, [r7, #19]
 8003cd6:	7bf9      	ldrb	r1, [r7, #15]
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	dbeb      	blt.n	8003cb8 <lcdHLine+0x140>
		}
		break;
 8003ce0:	e038      	b.n	8003d54 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003ce2:	7d7a      	ldrb	r2, [r7, #21]
 8003ce4:	7c3b      	ldrb	r3, [r7, #16]
 8003ce6:	fa42 f303 	asr.w	r3, r2, r3
 8003cea:	b25a      	sxtb	r2, r3
 8003cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cf0:	4053      	eors	r3, r2
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	f1c3 0307 	rsb	r3, r3, #7
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	b25a      	sxtb	r2, r3
 8003d04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d08:	4053      	eors	r3, r2
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d0e:	2301      	movs	r3, #1
 8003d10:	74bb      	strb	r3, [r7, #18]
 8003d12:	e018      	b.n	8003d46 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2232      	movs	r2, #50	; 0x32
 8003d18:	fb03 f202 	mul.w	r2, r3, r2
 8003d1c:	7c7b      	ldrb	r3, [r7, #17]
 8003d1e:	441a      	add	r2, r3
 8003d20:	7cbb      	ldrb	r3, [r7, #18]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <lcdHLine+0x214>)
 8003d26:	5cd2      	ldrb	r2, [r2, r3]
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	2132      	movs	r1, #50	; 0x32
 8003d2c:	fb03 f101 	mul.w	r1, r3, r1
 8003d30:	7c7b      	ldrb	r3, [r7, #17]
 8003d32:	4419      	add	r1, r3
 8003d34:	7cbb      	ldrb	r3, [r7, #18]
 8003d36:	440b      	add	r3, r1
 8003d38:	43d2      	mvns	r2, r2
 8003d3a:	b2d1      	uxtb	r1, r2
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <lcdHLine+0x214>)
 8003d3e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003d40:	7cbb      	ldrb	r3, [r7, #18]
 8003d42:	3301      	adds	r3, #1
 8003d44:	74bb      	strb	r3, [r7, #18]
 8003d46:	7cba      	ldrb	r2, [r7, #18]
 8003d48:	7bf9      	ldrb	r1, [r7, #15]
 8003d4a:	7c7b      	ldrb	r3, [r7, #17]
 8003d4c:	1acb      	subs	r3, r1, r3
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	dbe0      	blt.n	8003d14 <lcdHLine+0x19c>
		}
		break;
 8003d52:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	fb03 f202 	mul.w	r2, r3, r2
 8003d5c:	7c7b      	ldrb	r3, [r7, #17]
 8003d5e:	4413      	add	r3, r2
 8003d60:	490a      	ldr	r1, [pc, #40]	; (8003d8c <lcdHLine+0x214>)
 8003d62:	7dfa      	ldrb	r2, [r7, #23]
 8003d64:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	7c7b      	ldrb	r3, [r7, #17]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d908      	bls.n	8003d80 <lcdHLine+0x208>
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	2232      	movs	r2, #50	; 0x32
 8003d72:	fb03 f202 	mul.w	r2, r3, r2
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	4413      	add	r3, r2
 8003d7a:	4904      	ldr	r1, [pc, #16]	; (8003d8c <lcdHLine+0x214>)
 8003d7c:	7dba      	ldrb	r2, [r7, #22]
 8003d7e:	54ca      	strb	r2, [r1, r3]
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc90      	pop	{r4, r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200026c0 	.word	0x200026c0

08003d90 <lcdRefresh>:

void lcdRefresh(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <lcdRefresh+0x7c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d032      	beq.n	8003e04 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	481b      	ldr	r0, [pc, #108]	; (8003e10 <lcdRefresh+0x80>)
 8003da4:	f007 fcb8 	bl	800b718 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003da8:	2301      	movs	r3, #1
 8003daa:	71fb      	strb	r3, [r7, #7]
 8003dac:	e01c      	b.n	8003de8 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe ffc9 	bl	8002d48 <reverse_uint8>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <lcdRefresh+0x84>)
 8003dbc:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003dbe:	2396      	movs	r3, #150	; 0x96
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4914      	ldr	r1, [pc, #80]	; (8003e14 <lcdRefresh+0x84>)
 8003dc4:	4814      	ldr	r0, [pc, #80]	; (8003e18 <lcdRefresh+0x88>)
 8003dc6:	f00a fea0 	bl	800eb0a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	2232      	movs	r2, #50	; 0x32
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <lcdRefresh+0x8c>)
 8003dd6:	1899      	adds	r1, r3, r2
 8003dd8:	2396      	movs	r3, #150	; 0x96
 8003dda:	2232      	movs	r2, #50	; 0x32
 8003ddc:	480e      	ldr	r0, [pc, #56]	; (8003e18 <lcdRefresh+0x88>)
 8003dde:	f00a fe94 	bl	800eb0a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	3301      	adds	r3, #1
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2bf1      	cmp	r3, #241	; 0xf1
 8003dec:	d9df      	bls.n	8003dae <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003dee:	2396      	movs	r3, #150	; 0x96
 8003df0:	2202      	movs	r2, #2
 8003df2:	490b      	ldr	r1, [pc, #44]	; (8003e20 <lcdRefresh+0x90>)
 8003df4:	4808      	ldr	r0, [pc, #32]	; (8003e18 <lcdRefresh+0x88>)
 8003df6:	f00a fe88 	bl	800eb0a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	4804      	ldr	r0, [pc, #16]	; (8003e10 <lcdRefresh+0x80>)
 8003e00:	f007 fc8a 	bl	800b718 <HAL_GPIO_WritePin>
	}
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000058 	.word	0x20000058
 8003e10:	40020000 	.word	0x40020000
 8003e14:	2000005c 	.word	0x2000005c
 8003e18:	20005a6c 	.word	0x20005a6c
 8003e1c:	200026c0 	.word	0x200026c0
 8003e20:	200026bc 	.word	0x200026bc

08003e24 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	80fb      	strh	r3, [r7, #6]
 8003e36:	4603      	mov	r3, r0
 8003e38:	80bb      	strh	r3, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70fb      	strb	r3, [r7, #3]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e009      	b.n	8003e5c <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003e48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	88b9      	ldrh	r1, [r7, #4]
 8003e50:	88f8      	ldrh	r0, [r7, #6]
 8003e52:	f7ff fe91 	bl	8003b78 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	78bb      	ldrb	r3, [r7, #2]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d9f1      	bls.n	8003e48 <lcdRect+0x24>
	}
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}

08003e6e <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003e6e:	b590      	push	{r4, r7, lr}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	4604      	mov	r4, r0
 8003e76:	4608      	mov	r0, r1
 8003e78:	4611      	mov	r1, r2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	80fb      	strh	r3, [r7, #6]
 8003e80:	4603      	mov	r3, r0
 8003e82:	80bb      	strh	r3, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	88bb      	ldrh	r3, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d046      	beq.n	8003f22 <lcdRect2+0xb4>
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	78bb      	ldrb	r3, [r7, #2]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d042      	beq.n	8003f22 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e00d      	b.n	8003ebe <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003ea2:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	88b9      	ldrh	r1, [r7, #4]
 8003eaa:	88f8      	ldrh	r0, [r7, #6]
 8003eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	f7ff fa9a 	bl	80033ec <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	78bb      	ldrb	r3, [r7, #2]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d9ed      	bls.n	8003ea2 <lcdRect2+0x34>
		}
		if(outline){
 8003ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d029      	beq.n	8003f22 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	88b9      	ldrh	r1, [r7, #4]
 8003ed6:	88f8      	ldrh	r0, [r7, #6]
 8003ed8:	2401      	movs	r4, #1
 8003eda:	9400      	str	r4, [sp, #0]
 8003edc:	f7ff fa86 	bl	80033ec <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee4:	78ba      	ldrb	r2, [r7, #2]
 8003ee6:	88b9      	ldrh	r1, [r7, #4]
 8003ee8:	88f8      	ldrh	r0, [r7, #6]
 8003eea:	2401      	movs	r4, #1
 8003eec:	9400      	str	r4, [sp, #0]
 8003eee:	f7ff fa7d 	bl	80033ec <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	78bb      	ldrb	r3, [r7, #2]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f04:	88f8      	ldrh	r0, [r7, #6]
 8003f06:	f7ff f9ef 	bl	80032e8 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b299      	uxth	r1, r3
 8003f12:	78bb      	ldrb	r3, [r7, #2]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f1c:	88b8      	ldrh	r0, [r7, #4]
 8003f1e:	f7ff f9e3 	bl	80032e8 <lcdVLine>
		}
	}
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}

08003f2a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f36:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003f42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f46:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003f4a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003f52:	e000      	b.n	8003f56 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003f54:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003f56:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f9      	beq.n	8003f54 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003f60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003f6a:	687b      	ldr	r3, [r7, #4]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ffd1 	bl	8003f2a <ITM_SendChar>
	return(ch);
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <setTimeout+0x30>)
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <setTimeout+0x34>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003fac:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <setTimeout+0x38>)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <setTimeout+0x3c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	200059bc 	.word	0x200059bc
 8003fc8:	200059ba 	.word	0x200059ba
 8003fcc:	200059c0 	.word	0x200059c0
 8003fd0:	200059b9 	.word	0x200059b9

08003fd4 <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 8003fda:	2301      	movs	r3, #1
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	23be      	movs	r3, #190	; 0xbe
 8003fe8:	2232      	movs	r2, #50	; 0x32
 8003fea:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003fee:	2032      	movs	r0, #50	; 0x32
 8003ff0:	f7ff ff3d 	bl	8003e6e <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <showAlert+0x34>)
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <showAlert+0x38>)
 8003ff8:	215a      	movs	r1, #90	; 0x5a
 8003ffa:	205a      	movs	r0, #90	; 0x5a
 8003ffc:	f7ff f8f4 	bl	80031e8 <lcdPutStr>
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	0801e078 	.word	0x0801e078
 800400c:	0801ce60 	.word	0x0801ce60

08004010 <hideAlert>:
void hideAlert(void){
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
	alertFlag = 0;
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <hideAlert+0x14>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	200059c4 	.word	0x200059c4

08004028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 800402e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004030:	f006 ff80 	bl	800af34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004034:	f000 f902 	bl	800423c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004038:	f7fe f8a8 	bl	800218c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800403c:	f001 f810 	bl	8005060 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8004040:	f000 fb30 	bl	80046a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004044:	f000 fdac 	bl	8004ba0 <MX_TIM1_Init>
  MX_TIM10_Init();
 8004048:	f000 fe4c 	bl	8004ce4 <MX_TIM10_Init>
  MX_I2C1_Init();
 800404c:	f7fe fdf4 	bl	8002c38 <MX_I2C1_Init>
  MX_TIM11_Init();
 8004050:	f000 fe6c 	bl	8004d2c <MX_TIM11_Init>
  MX_RTC_Init();
 8004054:	f000 fa44 	bl	80044e0 <MX_RTC_Init>
  MX_TIM13_Init();
 8004058:	f000 fe8c 	bl	8004d74 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 800405c:	f000 fa9a 	bl	8004594 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8004060:	f00d fa7c 	bl	801155c <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8004064:	f001 f826 	bl	80050b4 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8004068:	f000 fea8 	bl	8004dbc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 800406c:	485a      	ldr	r0, [pc, #360]	; (80041d8 <main+0x1b0>)
 800406e:	f00a ff53 	bl	800ef18 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8004072:	4859      	ldr	r0, [pc, #356]	; (80041d8 <main+0x1b0>)
 8004074:	f00a ffa0 	bl	800efb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004078:	2100      	movs	r1, #0
 800407a:	4857      	ldr	r0, [pc, #348]	; (80041d8 <main+0x1b0>)
 800407c:	f00b f894 	bl	800f1a8 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8004080:	2100      	movs	r1, #0
 8004082:	4856      	ldr	r0, [pc, #344]	; (80041dc <main+0x1b4>)
 8004084:	f00b f890 	bl	800f1a8 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8004088:	4855      	ldr	r0, [pc, #340]	; (80041e0 <main+0x1b8>)
 800408a:	f00a ff95 	bl	800efb8 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 800408e:	4855      	ldr	r0, [pc, #340]	; (80041e4 <main+0x1bc>)
 8004090:	f7fd fe7e 	bl	8001d90 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8004094:	4854      	ldr	r0, [pc, #336]	; (80041e8 <main+0x1c0>)
 8004096:	f00a ff8f 	bl	800efb8 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 800409a:	4c54      	ldr	r4, [pc, #336]	; (80041ec <main+0x1c4>)
 800409c:	463b      	mov	r3, r7
 800409e:	4954      	ldr	r1, [pc, #336]	; (80041f0 <main+0x1c8>)
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe f9d1 	bl	8002448 <initGps>
 80040a6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80040aa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80040ae:	4620      	mov	r0, r4
 80040b0:	4619      	mov	r1, r3
 80040b2:	f44f 7319 	mov.w	r3, #612	; 0x264
 80040b6:	461a      	mov	r2, r3
 80040b8:	f010 fc14 	bl	80148e4 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 80040bc:	484d      	ldr	r0, [pc, #308]	; (80041f4 <main+0x1cc>)
 80040be:	f7fd fba7 	bl	8001810 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 80040c2:	f240 118f 	movw	r1, #399	; 0x18f
 80040c6:	484c      	ldr	r0, [pc, #304]	; (80041f8 <main+0x1d0>)
 80040c8:	f006 fded 	bl	800aca6 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 80040cc:	f240 128f 	movw	r2, #399	; 0x18f
 80040d0:	2102      	movs	r1, #2
 80040d2:	484a      	ldr	r0, [pc, #296]	; (80041fc <main+0x1d4>)
 80040d4:	f006 fd2a 	bl	800ab2c <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040de:	4848      	ldr	r0, [pc, #288]	; (8004200 <main+0x1d8>)
 80040e0:	f007 fb1a 	bl	800b718 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 80040e4:	4847      	ldr	r0, [pc, #284]	; (8004204 <main+0x1dc>)
 80040e6:	f7fc ffbd 	bl	8001064 <Mount_SD>
  	Create_File("FILE1.TXT");
 80040ea:	4847      	ldr	r0, [pc, #284]	; (8004208 <main+0x1e0>)
 80040ec:	f7fd f8c6 	bl	800127c <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 80040f0:	4946      	ldr	r1, [pc, #280]	; (800420c <main+0x1e4>)
 80040f2:	4845      	ldr	r0, [pc, #276]	; (8004208 <main+0x1e0>)
 80040f4:	f7fd f94e 	bl	8001394 <Update_File>
  	Create_File("FILE4.TXT");
 80040f8:	4845      	ldr	r0, [pc, #276]	; (8004210 <main+0x1e8>)
 80040fa:	f7fd f8bf 	bl	800127c <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 80040fe:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004102:	4619      	mov	r1, r3
 8004104:	4843      	ldr	r0, [pc, #268]	; (8004214 <main+0x1ec>)
 8004106:	f7fd f807 	bl	8001118 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800410a:	2200      	movs	r2, #0
 800410c:	4942      	ldr	r1, [pc, #264]	; (8004218 <main+0x1f0>)
 800410e:	4843      	ldr	r0, [pc, #268]	; (800421c <main+0x1f4>)
 8004110:	f009 fafc 	bl	800d70c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8004114:	2200      	movs	r2, #0
 8004116:	4942      	ldr	r1, [pc, #264]	; (8004220 <main+0x1f8>)
 8004118:	4840      	ldr	r0, [pc, #256]	; (800421c <main+0x1f4>)
 800411a:	f009 fbd9 	bl	800d8d0 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8004124:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8004128:	222e      	movs	r2, #46	; 0x2e
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f010 fbe7 	bl	8014900 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <main+0x1f0>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	4b37      	ldr	r3, [pc, #220]	; (8004218 <main+0x1f0>)
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	4619      	mov	r1, r3
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <main+0x1f0>)
 8004140:	789b      	ldrb	r3, [r3, #2]
 8004142:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	460b      	mov	r3, r1
 800414a:	4936      	ldr	r1, [pc, #216]	; (8004224 <main+0x1fc>)
 800414c:	f011 fd06 	bl	8015b5c <siprintf>
	SD_logger(tmpl);
 8004150:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc ff6f 	bl	8001038 <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 800415a:	f7fe fe1f 	bl	8002d9c <lcdClearBuffer>
  lcdRefresh();
 800415e:	f7ff fe17 	bl	8003d90 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <main+0x200>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00f      	beq.n	800418a <main+0x162>
		bmpData = getBmpData(&bmp180module);
 800416a:	4c30      	ldr	r4, [pc, #192]	; (800422c <main+0x204>)
 800416c:	463b      	mov	r3, r7
 800416e:	4921      	ldr	r1, [pc, #132]	; (80041f4 <main+0x1cc>)
 8004170:	4618      	mov	r0, r3
 8004172:	f7fd fdb5 	bl	8001ce0 <getBmpData>
 8004176:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800417a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800417e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <main+0x200>)
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800418a:	2200      	movs	r2, #0
 800418c:	4922      	ldr	r1, [pc, #136]	; (8004218 <main+0x1f0>)
 800418e:	4823      	ldr	r0, [pc, #140]	; (800421c <main+0x1f4>)
 8004190:	f009 fabc 	bl	800d70c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8004194:	2200      	movs	r2, #0
 8004196:	4922      	ldr	r1, [pc, #136]	; (8004220 <main+0x1f8>)
 8004198:	4820      	ldr	r0, [pc, #128]	; (800421c <main+0x1f4>)
 800419a:	f009 fb99 	bl	800d8d0 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <main+0x1f0>)
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <main+0x18e>
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <main+0x1f0>)
 80041a8:	789b      	ldrb	r3, [r3, #2]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <main+0x18e>
			pulseVib(40, 60);
 80041ae:	213c      	movs	r1, #60	; 0x3c
 80041b0:	2028      	movs	r0, #40	; 0x28
 80041b2:	f001 f843 	bl	800523c <pulseVib>
		}
	  lcdClearBuffer();
 80041b6:	f7fe fdf1 	bl	8002d9c <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 80041ba:	f7fe fd21 	bl	8002c00 <showGui>

	  if(alertFlag){
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <main+0x208>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <main+0x1a8>
		  showAlert();
 80041c6:	f7ff ff05 	bl	8003fd4 <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 80041ca:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <main+0x20c>)
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <main+0x210>)
 80041ce:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 80041d0:	f7ff fdde 	bl	8003d90 <lcdRefresh>
	  if(updateBmpData_flag){
 80041d4:	e7c5      	b.n	8004162 <main+0x13a>
 80041d6:	bf00      	nop
 80041d8:	20005ad0 	.word	0x20005ad0
 80041dc:	20005bf0 	.word	0x20005bf0
 80041e0:	20005b60 	.word	0x20005b60
 80041e4:	2000002c 	.word	0x2000002c
 80041e8:	20005ba8 	.word	0x20005ba8
 80041ec:	20005754 	.word	0x20005754
 80041f0:	20005c7c 	.word	0x20005c7c
 80041f4:	20002534 	.word	0x20002534
 80041f8:	20005744 	.word	0x20005744
 80041fc:	20005730 	.word	0x20005730
 8004200:	40020800 	.word	0x40020800
 8004204:	0801ce68 	.word	0x0801ce68
 8004208:	0801ce6c 	.word	0x0801ce6c
 800420c:	0801ce78 	.word	0x0801ce78
 8004210:	0801ce98 	.word	0x0801ce98
 8004214:	0801cea4 	.word	0x0801cea4
 8004218:	20005718 	.word	0x20005718
 800421c:	200059c8 	.word	0x200059c8
 8004220:	2000572c 	.word	0x2000572c
 8004224:	0801ceb0 	.word	0x0801ceb0
 8004228:	20000065 	.word	0x20000065
 800422c:	20002578 	.word	0x20002578
 8004230:	200059c4 	.word	0x200059c4
 8004234:	20002618 	.word	0x20002618
 8004238:	08004011 	.word	0x08004011

0800423c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b094      	sub	sp, #80	; 0x50
 8004240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004242:	f107 0320 	add.w	r3, r7, #32
 8004246:	2230      	movs	r2, #48	; 0x30
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f010 fb58 	bl	8014900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <SystemClock_Config+0xd0>)
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <SystemClock_Config+0xd0>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	6413      	str	r3, [r2, #64]	; 0x40
 8004270:	4b26      	ldr	r3, [pc, #152]	; (800430c <SystemClock_Config+0xd0>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800427c:	2300      	movs	r3, #0
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <SystemClock_Config+0xd4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <SystemClock_Config+0xd4>)
 8004286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <SystemClock_Config+0xd4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004298:	2305      	movs	r3, #5
 800429a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800429c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042a2:	2301      	movs	r3, #1
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a6:	2302      	movs	r3, #2
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80042b0:	2304      	movs	r3, #4
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80042b4:	23a8      	movs	r3, #168	; 0xa8
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042b8:	2302      	movs	r3, #2
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042bc:	2307      	movs	r3, #7
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c0:	f107 0320 	add.w	r3, r7, #32
 80042c4:	4618      	mov	r0, r3
 80042c6:	f008 fab9 	bl	800c83c <HAL_RCC_OscConfig>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80042d0:	f000 f8f8 	bl	80044c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042d4:	230f      	movs	r3, #15
 80042d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042d8:	2302      	movs	r3, #2
 80042da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	2105      	movs	r1, #5
 80042f2:	4618      	mov	r0, r3
 80042f4:	f008 fd1a 	bl	800cd2c <HAL_RCC_ClockConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80042fe:	f000 f8e1 	bl	80044c4 <Error_Handler>
  }
}
 8004302:	bf00      	nop
 8004304:	3750      	adds	r7, #80	; 0x50
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a49      	ldr	r2, [pc, #292]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8004326:	4b49      	ldr	r3, [pc, #292]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004328:	78db      	ldrb	r3, [r3, #3]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8004334:	f000 fb08 	bl	8004948 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a44      	ldr	r2, [pc, #272]	; (8004450 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d119      	bne.n	8004376 <HAL_TIM_PeriodElapsedCallback+0x62>
		scanButtons(btnsPtrs);
 8004342:	4844      	ldr	r0, [pc, #272]	; (8004454 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004344:	f7fd febc 	bl	80020c0 <scanButtons>
		// check timeouts
		if(timeoutState){
 8004348:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_TIM_PeriodElapsedCallback+0x62>
			if(timeoutValue == timeoutSetpoint){
 8004350:	4b42      	ldr	r3, [pc, #264]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	4b42      	ldr	r3, [pc, #264]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_TIM_PeriodElapsedCallback+0x56>
				(*timeoutClbkPtr)();
 800435c:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4798      	blx	r3
				timeoutState = 0;
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e005      	b.n	8004376 <HAL_TIM_PeriodElapsedCallback+0x62>
			} else {
				timeoutValue++;
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004374:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d15e      	bne.n	800443e <HAL_TIM_PeriodElapsedCallback+0x12a>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004382:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_TIM_PeriodElapsedCallback+0x80>
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800438c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8004390:	4836      	ldr	r0, [pc, #216]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004392:	4798      	blx	r3


		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8004394:	2101      	movs	r1, #1
 8004396:	4836      	ldr	r0, [pc, #216]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004398:	f007 f9d7 	bl	800b74a <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800439c:	4b35      	ldr	r3, [pc, #212]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800439e:	7b1b      	ldrb	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <HAL_TIM_PeriodElapsedCallback+0xac>
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80043a6:	edd3 7a00 	vldr	s15, [r3]
 80043aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b6:	ee17 1a90 	vmov	r1, s15
 80043ba:	482e      	ldr	r0, [pc, #184]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80043bc:	f006 fca9 	bl	800ad12 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a2d      	ldr	r2, [pc, #180]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80043d2:	7c1b      	ldrb	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80043d8:	f107 030e 	add.w	r3, r7, #14
 80043dc:	4619      	mov	r1, r3
 80043de:	4828      	ldr	r0, [pc, #160]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80043e0:	f006 fbe1 	bl	800aba6 <cbuf_ovw>

		tim13_counter++;
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80043ee:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d109      	bne.n	8004410 <HAL_TIM_PeriodElapsedCallback+0xfc>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	481c      	ldr	r0, [pc, #112]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004400:	f007 f9a3 	bl	800b74a <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 8004404:	4b21      	ldr	r3, [pc, #132]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]

		}
		if(isTimerRunning(&countDown1)){
 8004410:	481f      	ldr	r0, [pc, #124]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004412:	f7fd fe6f 	bl	80020f4 <isTimerRunning>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d010      	beq.n	800443e <HAL_TIM_PeriodElapsedCallback+0x12a>
			if(countDown1.remainingSec == 0){
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800441e:	885b      	ldrh	r3, [r3, #2]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_TIM_PeriodElapsedCallback+0x11e>
				alertFlag = 1;
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 800442a:	4819      	ldr	r0, [pc, #100]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800442c:	f7fd fe90 	bl	8002150 <pauseTimer>
				countDown1.remainingSec--;
			}
		}

	}
}
 8004430:	e005      	b.n	800443e <HAL_TIM_PeriodElapsedCallback+0x12a>
				countDown1.remainingSec--;
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004434:	885b      	ldrh	r3, [r3, #2]
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800443c:	805a      	strh	r2, [r3, #2]
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40014400 	.word	0x40014400
 800444c:	20005ac4 	.word	0x20005ac4
 8004450:	40014800 	.word	0x40014800
 8004454:	2000002c 	.word	0x2000002c
 8004458:	200059b9 	.word	0x200059b9
 800445c:	200059ba 	.word	0x200059ba
 8004460:	200059bc 	.word	0x200059bc
 8004464:	200059c0 	.word	0x200059c0
 8004468:	40001c00 	.word	0x40001c00
 800446c:	20005754 	.word	0x20005754
 8004470:	40020400 	.word	0x40020400
 8004474:	20005744 	.word	0x20005744
 8004478:	20002578 	.word	0x20002578
 800447c:	cccccccd 	.word	0xcccccccd
 8004480:	20005730 	.word	0x20005730
 8004484:	200059b8 	.word	0x200059b8
 8004488:	20000064 	.word	0x20000064
 800448c:	20000065 	.word	0x20000065
 8004490:	20000068 	.word	0x20000068
 8004494:	200059c4 	.word	0x200059c4

08004498 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a05      	ldr	r2, [pc, #20]	; (80044bc <HAL_UART_RxCpltCallback+0x24>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d103      	bne.n	80044b2 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	4804      	ldr	r0, [pc, #16]	; (80044c0 <HAL_UART_RxCpltCallback+0x28>)
 80044ae:	f007 f94c 	bl	800b74a <HAL_GPIO_TogglePin>

	}
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40011400 	.word	0x40011400
 80044c0:	40020400 	.word	0x40020400

080044c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044c8:	b672      	cpsid	i
}
 80044ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80044cc:	2201      	movs	r2, #1
 80044ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044d2:	4802      	ldr	r0, [pc, #8]	; (80044dc <Error_Handler+0x18>)
 80044d4:	f007 f920 	bl	800b718 <HAL_GPIO_WritePin>
  while (1)
 80044d8:	e7fe      	b.n	80044d8 <Error_Handler+0x14>
 80044da:	bf00      	nop
 80044dc:	40020400 	.word	0x40020400

080044e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80044e6:	1d3b      	adds	r3, r7, #4
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <MX_RTC_Init+0x58>)
 80044fa:	4a10      	ldr	r2, [pc, #64]	; (800453c <MX_RTC_Init+0x5c>)
 80044fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <MX_RTC_Init+0x58>)
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <MX_RTC_Init+0x58>)
 8004506:	227f      	movs	r2, #127	; 0x7f
 8004508:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <MX_RTC_Init+0x58>)
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <MX_RTC_Init+0x58>)
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <MX_RTC_Init+0x58>)
 8004518:	2200      	movs	r2, #0
 800451a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <MX_RTC_Init+0x58>)
 800451e:	2200      	movs	r2, #0
 8004520:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004522:	4805      	ldr	r0, [pc, #20]	; (8004538 <MX_RTC_Init+0x58>)
 8004524:	f008 ffe2 	bl	800d4ec <HAL_RTC_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800452e:	f7ff ffc9 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200059c8 	.word	0x200059c8
 800453c:	40002800 	.word	0x40002800

08004540 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	2230      	movs	r2, #48	; 0x30
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f010 f9d5 	bl	8014900 <memset>
  if(rtcHandle->Instance==RTC)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <HAL_RTC_MspInit+0x4c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d111      	bne.n	8004584 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004560:	2320      	movs	r3, #32
 8004562:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f008 fdfc 	bl	800d16c <HAL_RCCEx_PeriphCLKConfig>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800457a:	f7ff ffa3 	bl	80044c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RTC_MspInit+0x50>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004584:	bf00      	nop
 8004586:	3738      	adds	r7, #56	; 0x38
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40002800 	.word	0x40002800
 8004590:	42470e3c 	.word	0x42470e3c

08004594 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 800459a:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <MX_SDIO_SD_Init+0x3c>)
 800459c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <MX_SDIO_SD_Init+0x38>)
 80045be:	2204      	movs	r2, #4
 80045c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80045c2:	bf00      	nop
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	200059e8 	.word	0x200059e8
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a28      	ldr	r2, [pc, #160]	; (8004694 <HAL_SD_MspInit+0xc0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d14a      	bne.n	800468c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <HAL_SD_MspInit+0xc4>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	4a26      	ldr	r2, [pc, #152]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004604:	6453      	str	r3, [r2, #68]	; 0x44
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_SD_MspInit+0xc4>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_SD_MspInit+0xc4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800464a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800464e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004650:	2302      	movs	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004658:	2303      	movs	r3, #3
 800465a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800465c:	230c      	movs	r3, #12
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4619      	mov	r1, r3
 8004666:	480d      	ldr	r0, [pc, #52]	; (800469c <HAL_SD_MspInit+0xc8>)
 8004668:	f006 fe92 	bl	800b390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800466c:	2304      	movs	r3, #4
 800466e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800467c:	230c      	movs	r3, #12
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	4806      	ldr	r0, [pc, #24]	; (80046a0 <HAL_SD_MspInit+0xcc>)
 8004688:	f006 fe82 	bl	800b390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800468c:	bf00      	nop
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40023800 	.word	0x40023800
 800469c:	40020800 	.word	0x40020800
 80046a0:	40020c00 	.word	0x40020c00

080046a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <MX_SPI1_Init+0x64>)
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <MX_SPI1_Init+0x68>)
 80046ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <MX_SPI1_Init+0x64>)
 80046b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <MX_SPI1_Init+0x64>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <MX_SPI1_Init+0x64>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <MX_SPI1_Init+0x64>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <MX_SPI1_Init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <MX_SPI1_Init+0x64>)
 80046d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <MX_SPI1_Init+0x64>)
 80046d8:	2220      	movs	r2, #32
 80046da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <MX_SPI1_Init+0x64>)
 80046de:	2200      	movs	r2, #0
 80046e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <MX_SPI1_Init+0x64>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <MX_SPI1_Init+0x64>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <MX_SPI1_Init+0x64>)
 80046f0:	220a      	movs	r2, #10
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046f4:	4804      	ldr	r0, [pc, #16]	; (8004708 <MX_SPI1_Init+0x64>)
 80046f6:	f00a f97f 	bl	800e9f8 <HAL_SPI_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004700:	f7ff fee0 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20005a6c 	.word	0x20005a6c
 800470c:	40013000 	.word	0x40013000

08004710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_SPI_MspInit+0x84>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d12b      	bne.n	800478a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_SPI_MspInit+0x88>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_SPI_MspInit+0x88>)
 800473c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <HAL_SPI_MspInit+0x88>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_SPI_MspInit+0x88>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a10      	ldr	r2, [pc, #64]	; (8004798 <HAL_SPI_MspInit+0x88>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_SPI_MspInit+0x88>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800476a:	23a0      	movs	r3, #160	; 0xa0
 800476c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476e:	2302      	movs	r3, #2
 8004770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004776:	2303      	movs	r3, #3
 8004778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800477a:	2305      	movs	r3, #5
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	4619      	mov	r1, r3
 8004784:	4805      	ldr	r0, [pc, #20]	; (800479c <HAL_SPI_MspInit+0x8c>)
 8004786:	f006 fe03 	bl	800b390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800478a:	bf00      	nop
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40013000 	.word	0x40013000
 8004798:	40023800 	.word	0x40023800
 800479c:	40020000 	.word	0x40020000

080047a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_MspInit+0x4c>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <HAL_MspInit+0x4c>)
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_MspInit+0x4c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_MspInit+0x4c>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_MspInit+0x4c>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_MspInit+0x4c>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <NMI_Handler+0x4>

080047f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 80047fa:	f7ff fe63 	bl	80044c4 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047fe:	e7fe      	b.n	80047fe <HardFault_Handler+0x8>

08004800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004804:	e7fe      	b.n	8004804 <MemManage_Handler+0x4>

08004806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004806:	b480      	push	{r7}
 8004808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800480a:	e7fe      	b.n	800480a <BusFault_Handler+0x4>

0800480c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004810:	e7fe      	b.n	8004810 <UsageFault_Handler+0x4>

08004812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004812:	b480      	push	{r7}
 8004814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004840:	f006 fbca 	bl	800afd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}

08004848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800484c:	4803      	ldr	r0, [pc, #12]	; (800485c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800484e:	f00a fd73 	bl	800f338 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004852:	4803      	ldr	r0, [pc, #12]	; (8004860 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004854:	f00a fd70 	bl	800f338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20005ad0 	.word	0x20005ad0
 8004860:	20005b18 	.word	0x20005b18

08004864 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004868:	4803      	ldr	r0, [pc, #12]	; (8004878 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800486a:	f00a fd65 	bl	800f338 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800486e:	4803      	ldr	r0, [pc, #12]	; (800487c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004870:	f00a fd62 	bl	800f338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20005ad0 	.word	0x20005ad0
 800487c:	20005b60 	.word	0x20005b60

08004880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8004884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004888:	f006 ff7a 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 800488c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004890:	f006 ff76 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004894:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004898:	f006 ff72 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 800489c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048a0:	f006 ff6e 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80048a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048a8:	f006 ff6a 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80048ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048b0:	f006 ff66 	bl	800b780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048b4:	bf00      	nop
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80048be:	f00a fd3b 	bl	800f338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20005ba8 	.word	0x20005ba8

080048cc <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 80048d0:	2228      	movs	r2, #40	; 0x28
 80048d2:	2100      	movs	r1, #0
 80048d4:	4804      	ldr	r0, [pc, #16]	; (80048e8 <clearTable+0x1c>)
 80048d6:	f010 f813 	bl	8014900 <memset>
	stwT.position = 0;
 80048da:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <clearTable+0x1c>)
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000070 	.word	0x20000070

080048ec <addItem>:
void addItem(stw_struct stwS){
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <addItem+0x38>)
 80048fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004900:	461a      	mov	r2, r3
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <addItem+0x38>)
 8004904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <addItem+0x38>)
 800490a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490e:	3301      	adds	r3, #1
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <addItem+0x38>)
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	20000070 	.word	0x20000070

08004928 <stwStart>:

void stwStart(void){
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 800492c:	4804      	ldr	r0, [pc, #16]	; (8004940 <stwStart+0x18>)
 800492e:	f00a fb43 	bl	800efb8 <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 8004932:	4a04      	ldr	r2, [pc, #16]	; (8004944 <stwStart+0x1c>)
 8004934:	78d3      	ldrb	r3, [r2, #3]
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	70d3      	strb	r3, [r2, #3]
}
 800493c:	bf00      	nop
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20005b18 	.word	0x20005b18
 8004944:	20005ac4 	.word	0x20005ac4

08004948 <stwTick>:
void stwTick(void){
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	stwS.cnt++;
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <stwTick+0x28>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800495a:	4905      	ldr	r1, [pc, #20]	; (8004970 <stwTick+0x28>)
 800495c:	680b      	ldr	r3, [r1, #0]
 800495e:	f362 0317 	bfi	r3, r2, #0, #24
 8004962:	600b      	str	r3, [r1, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20005ac4 	.word	0x20005ac4

08004974 <stwStop>:
void stwStop(void){
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <stwStop+0x18>)
 800497a:	78d3      	ldrb	r3, [r2, #3]
 800497c:	f36f 0300 	bfc	r3, #0, #1
 8004980:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 8004982:	4803      	ldr	r0, [pc, #12]	; (8004990 <stwStop+0x1c>)
 8004984:	f00a fb88 	bl	800f098 <HAL_TIM_Base_Stop_IT>

}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20005ac4 	.word	0x20005ac4
 8004990:	20005b18 	.word	0x20005b18

08004994 <stwClear>:
void stwClear(void){
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <stwClear+0x20>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 80049a0:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <stwClear+0x24>)
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	f36f 0317 	bfc	r3, #0, #24
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20005b18 	.word	0x20005b18
 80049b8:	20005ac4 	.word	0x20005ac4

080049bc <stwSave>:
void stwSave(void){
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <stwSave+0x18>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <stwSave+0x1c>)
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000070 	.word	0x20000070
 80049d8:	20005ac4 	.word	0x20005ac4

080049dc <getStw>:

uint16_t getStw(void){
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <getStw+0x20>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <getStw+0x24>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	b29b      	uxth	r3, r3
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	20005b18 	.word	0x20005b18
 8004a00:	51eb851f 	.word	0x51eb851f

08004a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	return 1;
 8004a08:	2301      	movs	r3, #1
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <_kill>:

int _kill(int pid, int sig)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a1e:	f00f ff15 	bl	801484c <__errno>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2216      	movs	r2, #22
 8004a26:	601a      	str	r2, [r3, #0]
	return -1;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_exit>:

void _exit (int status)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ffe7 	bl	8004a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a46:	e7fe      	b.n	8004a46 <_exit+0x12>

08004a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e00a      	b.n	8004a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a5a:	f3af 8000 	nop.w
 8004a5e:	4601      	mov	r1, r0
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	b2ca      	uxtb	r2, r1
 8004a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	dbf0      	blt.n	8004a5a <_read+0x12>
	}

return len;
 8004a78:	687b      	ldr	r3, [r7, #4]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e009      	b.n	8004aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	60ba      	str	r2, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fa6b 	bl	8003f78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	dbf1      	blt.n	8004a94 <_write+0x12>
	}
	return len;
 8004ab0:	687b      	ldr	r3, [r7, #4]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <_close>:

int _close(int file)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <_isatty>:

int _isatty(int file)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
	return 1;
 8004afa:	2301      	movs	r3, #1
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
	return 0;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <_sbrk+0x50>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <_sbrk+0x16>
		heap_end = &end;
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <_sbrk+0x50>)
 8004b36:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <_sbrk+0x54>)
 8004b38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <_sbrk+0x50>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <_sbrk+0x50>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	466a      	mov	r2, sp
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d907      	bls.n	8004b5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b4e:	f00f fe7d 	bl	801484c <__errno>
 8004b52:	4603      	mov	r3, r0
 8004b54:	220c      	movs	r2, #12
 8004b56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	e006      	b.n	8004b6c <_sbrk+0x48>
	}

	heap_end += incr;
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <_sbrk+0x50>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <_sbrk+0x50>)
 8004b68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20005acc 	.word	0x20005acc
 8004b78:	20005db0 	.word	0x20005db0

08004b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <SystemInit+0x20>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <SystemInit+0x20>)
 8004b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b096      	sub	sp, #88	; 0x58
 8004ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	611a      	str	r2, [r3, #16]
 8004bce:	615a      	str	r2, [r3, #20]
 8004bd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f00f fe91 	bl	8014900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <MX_TIM1_Init+0x140>)
 8004be2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004be6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bec:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004bf2:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004bf4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c06:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c0c:	4833      	ldr	r0, [pc, #204]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c0e:	f00a f983 	bl	800ef18 <HAL_TIM_Base_Init>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004c18:	f7ff fc54 	bl	80044c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c26:	4619      	mov	r1, r3
 8004c28:	482c      	ldr	r0, [pc, #176]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c2a:	f00a fd4f 	bl	800f6cc <HAL_TIM_ConfigClockSource>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004c34:	f7ff fc46 	bl	80044c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c38:	4828      	ldr	r0, [pc, #160]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c3a:	f00a fa5c 	bl	800f0f6 <HAL_TIM_PWM_Init>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004c44:	f7ff fc3e 	bl	80044c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c54:	4619      	mov	r1, r3
 8004c56:	4821      	ldr	r0, [pc, #132]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c58:	f00b f938 	bl	800fecc <HAL_TIMEx_MasterConfigSynchronization>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004c62:	f7ff fc2f 	bl	80044c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c66:	2360      	movs	r3, #96	; 0x60
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c72:	2300      	movs	r3, #0
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4814      	ldr	r0, [pc, #80]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004c8c:	f00a fc5c 	bl	800f548 <HAL_TIM_PWM_ConfigChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004c96:	f7ff fc15 	bl	80044c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4807      	ldr	r0, [pc, #28]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004cbe:	f00b f981 	bl	800ffc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004cc8:	f7ff fbfc 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <MX_TIM1_Init+0x13c>)
 8004cce:	f000 f963 	bl	8004f98 <HAL_TIM_MspPostInit>

}
 8004cd2:	bf00      	nop
 8004cd4:	3758      	adds	r7, #88	; 0x58
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20005ad0 	.word	0x20005ad0
 8004ce0:	40010000 	.word	0x40010000

08004ce4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004cea:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <MX_TIM10_Init+0x44>)
 8004cec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004cf0:	f244 129f 	movw	r2, #16799	; 0x419f
 8004cf4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004cfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004d10:	4804      	ldr	r0, [pc, #16]	; (8004d24 <MX_TIM10_Init+0x40>)
 8004d12:	f00a f901 	bl	800ef18 <HAL_TIM_Base_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004d1c:	f7ff fbd2 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004d20:	bf00      	nop
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20005b18 	.word	0x20005b18
 8004d28:	40014400 	.word	0x40014400

08004d2c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004d30:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d32:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <MX_TIM11_Init+0x44>)
 8004d34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d38:	f244 129f 	movw	r2, #16799	; 0x419f
 8004d3c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d46:	2263      	movs	r2, #99	; 0x63
 8004d48:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004d56:	4805      	ldr	r0, [pc, #20]	; (8004d6c <MX_TIM11_Init+0x40>)
 8004d58:	f00a f8de 	bl	800ef18 <HAL_TIM_Base_Init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004d62:	f7ff fbaf 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20005b60 	.word	0x20005b60
 8004d70:	40014800 	.word	0x40014800

08004d74 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <MX_TIM13_Init+0x44>)
 8004d7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d80:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004d84:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d92:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004da0:	4804      	ldr	r0, [pc, #16]	; (8004db4 <MX_TIM13_Init+0x40>)
 8004da2:	f00a f8b9 	bl	800ef18 <HAL_TIM_Base_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004dac:	f7ff fb8a 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20005ba8 	.word	0x20005ba8
 8004db8:	40001c00 	.word	0x40001c00

08004dbc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	611a      	str	r2, [r3, #16]
 8004dd0:	615a      	str	r2, [r3, #20]
 8004dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004dd6:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <MX_TIM14_Init+0x98>)
 8004dd8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004ddc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004de0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004dea:	2263      	movs	r2, #99	; 0x63
 8004dec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004dfa:	4815      	ldr	r0, [pc, #84]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004dfc:	f00a f88c 	bl	800ef18 <HAL_TIM_Base_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004e06:	f7ff fb5d 	bl	80044c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004e0a:	4811      	ldr	r0, [pc, #68]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004e0c:	f00a f973 	bl	800f0f6 <HAL_TIM_PWM_Init>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004e16:	f7ff fb55 	bl	80044c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e1a:	2360      	movs	r3, #96	; 0x60
 8004e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4807      	ldr	r0, [pc, #28]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004e32:	f00a fb89 	bl	800f548 <HAL_TIM_PWM_ConfigChannel>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004e3c:	f7ff fb42 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004e40:	4803      	ldr	r0, [pc, #12]	; (8004e50 <MX_TIM14_Init+0x94>)
 8004e42:	f000 f8a9 	bl	8004f98 <HAL_TIM_MspPostInit>

}
 8004e46:	bf00      	nop
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20005bf0 	.word	0x20005bf0
 8004e54:	40002000 	.word	0x40002000

08004e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a46      	ldr	r2, [pc, #280]	; (8004f80 <HAL_TIM_Base_MspInit+0x128>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d11e      	bne.n	8004ea8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	4b45      	ldr	r3, [pc, #276]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a44      	ldr	r2, [pc, #272]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b42      	ldr	r3, [pc, #264]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004e86:	2200      	movs	r2, #0
 8004e88:	2100      	movs	r1, #0
 8004e8a:	2019      	movs	r0, #25
 8004e8c:	f006 f9c3 	bl	800b216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e90:	2019      	movs	r0, #25
 8004e92:	f006 f9dc 	bl	800b24e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2100      	movs	r1, #0
 8004e9a:	201a      	movs	r0, #26
 8004e9c:	f006 f9bb 	bl	800b216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004ea0:	201a      	movs	r0, #26
 8004ea2:	f006 f9d4 	bl	800b24e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004ea6:	e066      	b.n	8004f76 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a36      	ldr	r2, [pc, #216]	; (8004f88 <HAL_TIM_Base_MspInit+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d116      	bne.n	8004ee0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec2:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	2019      	movs	r0, #25
 8004ed4:	f006 f99f 	bl	800b216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ed8:	2019      	movs	r0, #25
 8004eda:	f006 f9b8 	bl	800b24e <HAL_NVIC_EnableIRQ>
}
 8004ede:	e04a      	b.n	8004f76 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <HAL_TIM_Base_MspInit+0x134>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d116      	bne.n	8004f18 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	201a      	movs	r0, #26
 8004f0c:	f006 f983 	bl	800b216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f10:	201a      	movs	r0, #26
 8004f12:	f006 f99c 	bl	800b24e <HAL_NVIC_EnableIRQ>
}
 8004f16:	e02e      	b.n	8004f76 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_TIM_Base_MspInit+0x138>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d116      	bne.n	8004f50 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f30:	6413      	str	r3, [r2, #64]	; 0x40
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	202c      	movs	r0, #44	; 0x2c
 8004f44:	f006 f967 	bl	800b216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004f48:	202c      	movs	r0, #44	; 0x2c
 8004f4a:	f006 f980 	bl	800b24e <HAL_NVIC_EnableIRQ>
}
 8004f4e:	e012      	b.n	8004f76 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <HAL_TIM_Base_MspInit+0x13c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10d      	bne.n	8004f76 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_TIM_Base_MspInit+0x12c>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40001c00 	.word	0x40001c00
 8004f94:	40002000 	.word	0x40002000

08004f98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <HAL_TIM_MspPostInit+0xb4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d11f      	bne.n	8004ffa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	4a23      	ldr	r2, [pc, #140]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 8004fc4:	f043 0310 	orr.w	r3, r3, #16
 8004fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fca:	4b21      	ldr	r3, [pc, #132]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4818      	ldr	r0, [pc, #96]	; (8005054 <HAL_TIM_MspPostInit+0xbc>)
 8004ff4:	f006 f9cc 	bl	800b390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004ff8:	e023      	b.n	8005042 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_TIM_MspPostInit+0xc0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d11e      	bne.n	8005042 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	4a10      	ldr	r2, [pc, #64]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 800500e:	f043 0320 	orr.w	r3, r3, #32
 8005012:	6313      	str	r3, [r2, #48]	; 0x30
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <HAL_TIM_MspPostInit+0xb8>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005026:	2302      	movs	r3, #2
 8005028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005032:	2309      	movs	r3, #9
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	4619      	mov	r1, r3
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <HAL_TIM_MspPostInit+0xc4>)
 800503e:	f006 f9a7 	bl	800b390 <HAL_GPIO_Init>
}
 8005042:	bf00      	nop
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40023800 	.word	0x40023800
 8005054:	40021000 	.word	0x40021000
 8005058:	40002000 	.word	0x40002000
 800505c:	40021400 	.word	0x40021400

08005060 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <MX_USART3_UART_Init+0x50>)
 8005068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800506c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800507a:	2200      	movs	r2, #0
 800507c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005086:	220c      	movs	r2, #12
 8005088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005092:	2200      	movs	r2, #0
 8005094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005096:	4805      	ldr	r0, [pc, #20]	; (80050ac <MX_USART3_UART_Init+0x4c>)
 8005098:	f00a fffa 	bl	8010090 <HAL_UART_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80050a2:	f7ff fa0f 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20005c38 	.word	0x20005c38
 80050b0:	40004800 	.word	0x40004800

080050b4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <MX_USART6_UART_Init+0x50>)
 80050bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050da:	220c      	movs	r2, #12
 80050dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <MX_USART6_UART_Init+0x4c>)
 80050ec:	f00a ffd0 	bl	8010090 <HAL_UART_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80050f6:	f7ff f9e5 	bl	80044c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20005c7c 	.word	0x20005c7c
 8005104:	40011400 	.word	0x40011400

08005108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	; 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_UART_MspInit+0xe8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d12d      	bne.n	8005186 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_UART_MspInit+0xec>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_UART_MspInit+0xec>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6413      	str	r3, [r2, #64]	; 0x40
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_UART_MspInit+0xec>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_UART_MspInit+0xec>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a29      	ldr	r2, [pc, #164]	; (80051f4 <HAL_UART_MspInit+0xec>)
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_UART_MspInit+0xec>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005168:	2302      	movs	r3, #2
 800516a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005170:	2303      	movs	r3, #3
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005174:	2307      	movs	r3, #7
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005178:	f107 031c 	add.w	r3, r7, #28
 800517c:	4619      	mov	r1, r3
 800517e:	481e      	ldr	r0, [pc, #120]	; (80051f8 <HAL_UART_MspInit+0xf0>)
 8005180:	f006 f906 	bl	800b390 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005184:	e030      	b.n	80051e8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <HAL_UART_MspInit+0xf4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d12b      	bne.n	80051e8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_UART_MspInit+0xec>)
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_UART_MspInit+0xec>)
 800519a:	f043 0320 	orr.w	r3, r3, #32
 800519e:	6453      	str	r3, [r2, #68]	; 0x44
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_UART_MspInit+0xec>)
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_UART_MspInit+0xec>)
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	4a0f      	ldr	r2, [pc, #60]	; (80051f4 <HAL_UART_MspInit+0xec>)
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	6313      	str	r3, [r2, #48]	; 0x30
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_UART_MspInit+0xec>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051c8:	23c0      	movs	r3, #192	; 0xc0
 80051ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80051d8:	2308      	movs	r3, #8
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	4619      	mov	r1, r3
 80051e2:	4807      	ldr	r0, [pc, #28]	; (8005200 <HAL_UART_MspInit+0xf8>)
 80051e4:	f006 f8d4 	bl	800b390 <HAL_GPIO_Init>
}
 80051e8:	bf00      	nop
 80051ea:	3730      	adds	r7, #48	; 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40004800 	.word	0x40004800
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020c00 	.word	0x40020c00
 80051fc:	40011400 	.word	0x40011400
 8005200:	40020800 	.word	0x40020800

08005204 <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <enableVib+0x18>)
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <enableVib+0x1c>)
 800520e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200000ac 	.word	0x200000ac
 8005220:	40002000 	.word	0x40002000

08005224 <disableVib>:
void disableVib(void){
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <disableVib+0x14>)
 800522a:	2200      	movs	r2, #0
 800522c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800522e:	bf00      	nop
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	40002000 	.word	0x40002000

0800523c <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	460a      	mov	r2, r1
 8005246:	80fb      	strh	r3, [r7, #6]
 8005248:	4613      	mov	r3, r2
 800524a:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 800524c:	4a06      	ldr	r2, [pc, #24]	; (8005268 <pulseVib+0x2c>)
 800524e:	797b      	ldrb	r3, [r7, #5]
 8005250:	7013      	strb	r3, [r2, #0]
	enableVib();
 8005252:	f7ff ffd7 	bl	8005204 <enableVib>
	setTimeout(duration, &disableVib);
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <pulseVib+0x30>)
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fe9a 	bl	8003f94 <setTimeout>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200000ac 	.word	0x200000ac
 800526c:	08005225 	.word	0x08005225

08005270 <addAlarm>:
#include "fonts/fonts.h"
#include "../Src/pageModules/guiUtils/valueSelector.h"


//struct alarmType alarmList[5];
void addAlarm(uint8_t hour, uint8_t min){
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	460a      	mov	r2, r1
 800527a:	71fb      	strb	r3, [r7, #7]
 800527c:	4613      	mov	r3, r2
 800527e:	71bb      	strb	r3, [r7, #6]
	if(alarmCount < 5){
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <addAlarm+0x48>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d812      	bhi.n	80052ae <addAlarm+0x3e>
		alarmList[alarmCount] = createAlarm(hour, min);
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <addAlarm+0x48>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	461c      	mov	r4, r3
 800528e:	79ba      	ldrb	r2, [r7, #6]
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f813 	bl	80052c0 <createAlarm>
 800529a:	4603      	mov	r3, r0
 800529c:	4a07      	ldr	r2, [pc, #28]	; (80052bc <addAlarm+0x4c>)
 800529e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		alarmCount++;
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <addAlarm+0x48>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <addAlarm+0x48>)
 80052ac:	701a      	strb	r2, [r3, #0]
	}
//	else {
////		return ERROR_FAIL;
//	}
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20005cc0 	.word	0x20005cc0
 80052bc:	20005cc4 	.word	0x20005cc4

080052c0 <createAlarm>:

struct alarmType *createAlarm(uint8_t hour, uint8_t min){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	460a      	mov	r2, r1
 80052ca:	71fb      	strb	r3, [r7, #7]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71bb      	strb	r3, [r7, #6]
	struct alarmType *alm;
	alm = malloc(sizeof (struct alarmType));
 80052d0:	2003      	movs	r0, #3
 80052d2:	f00f faf7 	bl	80148c4 <malloc>
 80052d6:	4603      	mov	r3, r0
 80052d8:	60fb      	str	r3, [r7, #12]
	alm->hour = hour;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	79fa      	ldrb	r2, [r7, #7]
 80052de:	701a      	strb	r2, [r3, #0]
	alm->min = min;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	79ba      	ldrb	r2, [r7, #6]
 80052e4:	705a      	strb	r2, [r3, #1]
	return alm;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <nextPosition>:
}

uint8_t alarmPosition;
uint8_t isAlarmEditModeOn = 0;

void nextPosition(void){
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
	if(alarmPosition < alarmCount){
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <nextPosition+0x30>)
 80052f6:	781a      	ldrb	r2, [r3, #0]
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <nextPosition+0x34>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d206      	bcs.n	800530e <nextPosition+0x1e>
		alarmPosition++;
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <nextPosition+0x30>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <nextPosition+0x30>)
 800530a:	701a      	strb	r2, [r3, #0]
	} else {
		alarmPosition = 0;
	}
}
 800530c:	e002      	b.n	8005314 <nextPosition+0x24>
		alarmPosition = 0;
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <nextPosition+0x30>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20005cd8 	.word	0x20005cd8
 8005324:	20005cc0 	.word	0x20005cc0

08005328 <prevPosition>:
void prevPosition(void){
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
	if(alarmPosition > 0){
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <prevPosition+0x2c>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <prevPosition+0x1a>
		alarmPosition--;
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <prevPosition+0x2c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	3b01      	subs	r3, #1
 800533a:	b2da      	uxtb	r2, r3
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <prevPosition+0x2c>)
 800533e:	701a      	strb	r2, [r3, #0]
	} else {
		alarmPosition = alarmCount;
	}
}
 8005340:	e003      	b.n	800534a <prevPosition+0x22>
		alarmPosition = alarmCount;
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <prevPosition+0x30>)
 8005344:	781a      	ldrb	r2, [r3, #0]
 8005346:	4b03      	ldr	r3, [pc, #12]	; (8005354 <prevPosition+0x2c>)
 8005348:	701a      	strb	r2, [r3, #0]
}
 800534a:	bf00      	nop
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	20005cd8 	.word	0x20005cd8
 8005358:	20005cc0 	.word	0x20005cc0

0800535c <toggleEditAlarmMode>:
void toggleEditAlarmMode(void){
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
	isAlarmEditModeOn = !isAlarmEditModeOn;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <toggleEditAlarmMode+0x40>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <toggleEditAlarmMode+0x40>)
 8005372:	701a      	strb	r2, [r3, #0]
	if(isAlarmEditModeOn){
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <toggleEditAlarmMode+0x40>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <toggleEditAlarmMode+0x36>
		setEditModeClbcks();
 800537c:	f000 f812 	bl	80053a4 <setEditModeClbcks>
		if(alarmCount == 0){
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <toggleEditAlarmMode+0x44>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <toggleEditAlarmMode+0x3a>
			addAlarm(1, 23);
 8005388:	2117      	movs	r1, #23
 800538a:	2001      	movs	r0, #1
 800538c:	f7ff ff70 	bl	8005270 <addAlarm>
		}
	} else {
		setDefaultClbcks();
	}
}
 8005390:	e001      	b.n	8005396 <toggleEditAlarmMode+0x3a>
		setDefaultClbcks();
 8005392:	f000 f823 	bl	80053dc <setDefaultClbcks>
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20005cd9 	.word	0x20005cd9
 80053a0:	20005cc0 	.word	0x20005cc0

080053a4 <setEditModeClbcks>:

void setEditModeClbcks(void){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
	resetButtonHandlers();
 80053a8:	f7fc fd8c 	bl	8001ec4 <resetButtonHandlers>
	btn_BA.onSinglePressHandler = &nextPosition;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <setEditModeClbcks+0x20>)
 80053ae:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <setEditModeClbcks+0x24>)
 80053b0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevPosition;
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <setEditModeClbcks+0x28>)
 80053b4:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <setEditModeClbcks+0x2c>)
 80053b6:	611a      	str	r2, [r3, #16]


	btn_B1.onSinglePressHandler = &toggleEditAlarmMode;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <setEditModeClbcks+0x30>)
 80053ba:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <setEditModeClbcks+0x34>)
 80053bc:	611a      	str	r2, [r3, #16]
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20002588 	.word	0x20002588
 80053c8:	080052f1 	.word	0x080052f1
 80053cc:	200025d0 	.word	0x200025d0
 80053d0:	08005329 	.word	0x08005329
 80053d4:	200025f4 	.word	0x200025f4
 80053d8:	0800535d 	.word	0x0800535d

080053dc <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <setDefaultClbcks+0x20>)
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <setDefaultClbcks+0x24>)
 80053e4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <setDefaultClbcks+0x28>)
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <setDefaultClbcks+0x2c>)
 80053ea:	611a      	str	r2, [r3, #16]

	btn_BB.onSinglePressHandler = &toggleEditAlarmMode;
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <setDefaultClbcks+0x30>)
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <setDefaultClbcks+0x34>)
 80053f0:	611a      	str	r2, [r3, #16]
}
 80053f2:	bf00      	nop
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20002588 	.word	0x20002588
 8005400:	08002b25 	.word	0x08002b25
 8005404:	200025d0 	.word	0x200025d0
 8005408:	08002b35 	.word	0x08002b35
 800540c:	200025ac 	.word	0x200025ac
 8005410:	0800535d 	.word	0x0800535d

08005414 <alarmSetup>:

void alarmSetup(void){
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005418:	f7ff ffe0 	bl	80053dc <setDefaultClbcks>
	isAlarmEditModeOn = 0;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <alarmSetup+0x14>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20005cd9 	.word	0x20005cd9

0800542c <alarmMain>:

void alarmMain(void){
 800542c:	b580      	push	{r7, lr}
 800542e:	b090      	sub	sp, #64	; 0x40
 8005430:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	222f      	movs	r2, #47	; 0x2f
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f00f fa5e 	bl	8014900 <memset>
	sprintf(&tempStr, "Alarms");
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	4950      	ldr	r1, [pc, #320]	; (8005588 <alarmMain+0x15c>)
 8005448:	4618      	mov	r0, r3
 800544a:	f010 fb87 	bl	8015b5c <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 800544e:	1d3a      	adds	r2, r7, #4
 8005450:	4b4e      	ldr	r3, [pc, #312]	; (800558c <alarmMain+0x160>)
 8005452:	210a      	movs	r1, #10
 8005454:	200a      	movs	r0, #10
 8005456:	f7fd fec7 	bl	80031e8 <lcdPutStr>
	lcdHLine2(10, 390, 40, 1, 2);
 800545a:	2302      	movs	r3, #2
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2301      	movs	r3, #1
 8005460:	2228      	movs	r2, #40	; 0x28
 8005462:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8005466:	200a      	movs	r0, #10
 8005468:	f7fd ffc0 	bl	80033ec <lcdHLine2>

	if(alarmCount == 0){
 800546c:	4b48      	ldr	r3, [pc, #288]	; (8005590 <alarmMain+0x164>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <alarmMain+0x60>
		sprintf(&tempStr, "No alarms");
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	4947      	ldr	r1, [pc, #284]	; (8005594 <alarmMain+0x168>)
 8005478:	4618      	mov	r0, r3
 800547a:	f010 fb6f 	bl	8015b5c <siprintf>
		lcdPutStr(170, 120, tempStr, font_12_zekton);
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	4b45      	ldr	r3, [pc, #276]	; (8005598 <alarmMain+0x16c>)
 8005482:	2178      	movs	r1, #120	; 0x78
 8005484:	20aa      	movs	r0, #170	; 0xaa
 8005486:	f7fd feaf 	bl	80031e8 <lcdPutStr>
 800548a:	e069      	b.n	8005560 <alarmMain+0x134>
	} else {
		// could be removed from /else/ cause for alarmCount==0 loop will not execute
		for(uint8_t i = 0; i < alarmCount; i++){
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005492:	e046      	b.n	8005522 <alarmMain+0xf6>
			sprintf(&tempStr, "%d:%d", alarmList[i]->hour, alarmList[i]->min);
 8005494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005498:	4a40      	ldr	r2, [pc, #256]	; (800559c <alarmMain+0x170>)
 800549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054a6:	4a3d      	ldr	r2, [pc, #244]	; (800559c <alarmMain+0x170>)
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	1d38      	adds	r0, r7, #4
 80054b0:	460a      	mov	r2, r1
 80054b2:	493b      	ldr	r1, [pc, #236]	; (80055a0 <alarmMain+0x174>)
 80054b4:	f010 fb52 	bl	8015b5c <siprintf>
			lcdPutStr(250, 45+i*30, tempStr, zekton24font);
 80054b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054bc:	461a      	mov	r2, r3
 80054be:	0112      	lsls	r2, r2, #4
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	332d      	adds	r3, #45	; 0x2d
 80054c8:	b2d9      	uxtb	r1, r3
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	4b2f      	ldr	r3, [pc, #188]	; (800558c <alarmMain+0x160>)
 80054ce:	20fa      	movs	r0, #250	; 0xfa
 80054d0:	f7fd fe8a 	bl	80031e8 <lcdPutStr>
			if(alarmList[i]->isActive){
 80054d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054d8:	4a30      	ldr	r2, [pc, #192]	; (800559c <alarmMain+0x170>)
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	789b      	ldrb	r3, [r3, #2]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <alarmMain+0xc4>
				sprintf(&tempStr, "on");
 80054e4:	1d3b      	adds	r3, r7, #4
 80054e6:	492f      	ldr	r1, [pc, #188]	; (80055a4 <alarmMain+0x178>)
 80054e8:	4618      	mov	r0, r3
 80054ea:	f010 fb37 	bl	8015b5c <siprintf>
 80054ee:	e004      	b.n	80054fa <alarmMain+0xce>
			} else {
				sprintf(&tempStr, "off");
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	492d      	ldr	r1, [pc, #180]	; (80055a8 <alarmMain+0x17c>)
 80054f4:	4618      	mov	r0, r3
 80054f6:	f010 fb31 	bl	8015b5c <siprintf>
			}
			lcdPutStr(350, 45+i*30, tempStr, font_12_zekton);
 80054fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054fe:	461a      	mov	r2, r3
 8005500:	0112      	lsls	r2, r2, #4
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	332d      	adds	r3, #45	; 0x2d
 800550a:	b2d9      	uxtb	r1, r3
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	4b22      	ldr	r3, [pc, #136]	; (8005598 <alarmMain+0x16c>)
 8005510:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005514:	f7fd fe68 	bl	80031e8 <lcdPutStr>
		for(uint8_t i = 0; i < alarmCount; i++){
 8005518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800551c:	3301      	adds	r3, #1
 800551e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <alarmMain+0x164>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b2      	bcc.n	8005494 <alarmMain+0x68>

		}
	lcdRect(350, 375, 63+alarmPosition*30, 65+alarmPosition*30, 1);
 800552e:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <alarmMain+0x180>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <alarmMain+0x180>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	460b      	mov	r3, r1
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a5b      	subs	r3, r3, r1
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	3341      	adds	r3, #65	; 0x41
 8005550:	2101      	movs	r1, #1
 8005552:	9100      	str	r1, [sp, #0]
 8005554:	f240 1177 	movw	r1, #375	; 0x177
 8005558:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800555c:	f7fe fc62 	bl	8003e24 <lcdRect>
	}
	if(alarmCount < 5){
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <alarmMain+0x164>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d80b      	bhi.n	8005580 <alarmMain+0x154>
		sprintf(&tempStr, "+");
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	4911      	ldr	r1, [pc, #68]	; (80055b0 <alarmMain+0x184>)
 800556c:	4618      	mov	r0, r3
 800556e:	f010 faf5 	bl	8015b5c <siprintf>
		lcdPutStr(375, 110, tempStr, zekton24font);
 8005572:	1d3a      	adds	r2, r7, #4
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <alarmMain+0x160>)
 8005576:	216e      	movs	r1, #110	; 0x6e
 8005578:	f240 1077 	movw	r0, #375	; 0x177
 800557c:	f7fd fe34 	bl	80031e8 <lcdPutStr>
//	numSelector.valPtr = &AdjVar;
//	numSelector.draw();

//	drawNumberSelector(&AdjVar);

}
 8005580:	bf00      	nop
 8005582:	3738      	adds	r7, #56	; 0x38
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	0801cf8c 	.word	0x0801cf8c
 800558c:	08020980 	.word	0x08020980
 8005590:	20005cc0 	.word	0x20005cc0
 8005594:	0801cf94 	.word	0x0801cf94
 8005598:	0801fef8 	.word	0x0801fef8
 800559c:	20005cc4 	.word	0x20005cc4
 80055a0:	0801cfa0 	.word	0x0801cfa0
 80055a4:	0801cfa8 	.word	0x0801cfa8
 80055a8:	0801cfac 	.word	0x0801cfac
 80055ac:	20005cd8 	.word	0x20005cd8
 80055b0:	0801cfb0 	.word	0x0801cfb0

080055b4 <setDefaultClbcks>:
#include "fonts/fonts.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t altitudeMode = 1;

static void setDefaultClbcks(void){
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <setDefaultClbcks+0x38>)
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <setDefaultClbcks+0x3c>)
 80055bc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <setDefaultClbcks+0x40>)
 80055c0:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <setDefaultClbcks+0x44>)
 80055c2:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &changeAltiMode;
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <setDefaultClbcks+0x48>)
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <setDefaultClbcks+0x4c>)
 80055c8:	611a      	str	r2, [r3, #16]
	btn_B3.onContinuousShortPressHandler = &increaseAltitude;
 80055ca:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <setDefaultClbcks+0x50>)
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <setDefaultClbcks+0x54>)
 80055ce:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &decreaseAltitude;
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <setDefaultClbcks+0x58>)
 80055d2:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <setDefaultClbcks+0x5c>)
 80055d4:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = &setRefAltitude;
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <setDefaultClbcks+0x60>)
 80055d8:	4a0f      	ldr	r2, [pc, #60]	; (8005618 <setDefaultClbcks+0x64>)
 80055da:	611a      	str	r2, [r3, #16]
	btn_B2.onSingleLongPressHandler = &clearRefAltitude;
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <setDefaultClbcks+0x60>)
 80055de:	4a0f      	ldr	r2, [pc, #60]	; (800561c <setDefaultClbcks+0x68>)
 80055e0:	615a      	str	r2, [r3, #20]
}
 80055e2:	bf00      	nop
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20002588 	.word	0x20002588
 80055f0:	08002b25 	.word	0x08002b25
 80055f4:	200025d0 	.word	0x200025d0
 80055f8:	08002b35 	.word	0x08002b35
 80055fc:	200025ac 	.word	0x200025ac
 8005600:	08005c61 	.word	0x08005c61
 8005604:	2000263c 	.word	0x2000263c
 8005608:	08005ca5 	.word	0x08005ca5
 800560c:	200025f4 	.word	0x200025f4
 8005610:	08005cf1 	.word	0x08005cf1
 8005614:	20002618 	.word	0x20002618
 8005618:	08005c25 	.word	0x08005c25
 800561c:	08005c45 	.word	0x08005c45

08005620 <altiSetup>:

// function executed once on module load
void altiSetup(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005624:	f7ff ffc6 	bl	80055b4 <setDefaultClbcks>
	minAltitude = bmpData.altitude;
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <altiSetup+0x1c>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <altiSetup+0x20>)
 800562e:	6013      	str	r3, [r2, #0]
	minPressure = bmpData.slpress;
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <altiSetup+0x1c>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <altiSetup+0x24>)
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20002578 	.word	0x20002578
 8005640:	20005ce0 	.word	0x20005ce0
 8005644:	20005ce8 	.word	0x20005ce8

08005648 <altiMain>:

// main function
void altiMain(void){
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b096      	sub	sp, #88	; 0x58
 800564c:	af02      	add	r7, sp, #8
	bmpData = getBmpData(&bmp180module);
 800564e:	4cab      	ldr	r4, [pc, #684]	; (80058fc <altiMain+0x2b4>)
 8005650:	463b      	mov	r3, r7
 8005652:	49ab      	ldr	r1, [pc, #684]	; (8005900 <altiMain+0x2b8>)
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc fb43 	bl	8001ce0 <getBmpData>
 800565a:	463b      	mov	r3, r7
 800565c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800565e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// header bar temperature - time
	char guiPos[6] = {0};
 8005662:	2300      	movs	r3, #0
 8005664:	64bb      	str	r3, [r7, #72]	; 0x48
 8005666:	2300      	movs	r3, #0
 8005668:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 800566c:	4ba5      	ldr	r3, [pc, #660]	; (8005904 <altiMain+0x2bc>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4ba4      	ldr	r3, [pc, #656]	; (8005904 <altiMain+0x2bc>)
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800567a:	49a3      	ldr	r1, [pc, #652]	; (8005908 <altiMain+0x2c0>)
 800567c:	f010 fa6e 	bl	8015b5c <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8005680:	2314      	movs	r3, #20
 8005682:	b29c      	uxth	r4, r3
 8005684:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005688:	4618      	mov	r0, r3
 800568a:	f7fa fdbb 	bl	8000204 <strlen>
 800568e:	4603      	mov	r3, r0
 8005690:	b29b      	uxth	r3, r3
 8005692:	fb14 f303 	smulbb	r3, r4, r3
 8005696:	b29b      	uxth	r3, r3
 8005698:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800569c:	b298      	uxth	r0, r3
 800569e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056a2:	4b9a      	ldr	r3, [pc, #616]	; (800590c <altiMain+0x2c4>)
 80056a4:	210a      	movs	r1, #10
 80056a6:	f7fd fd9f 	bl	80031e8 <lcdPutStr>
	sprintf(&guiPos, "%02.1f`C", bmpData.temperature);
 80056aa:	4b94      	ldr	r3, [pc, #592]	; (80058fc <altiMain+0x2b4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa ff6a 	bl	8000588 <__aeabi_f2d>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80056bc:	4994      	ldr	r1, [pc, #592]	; (8005910 <altiMain+0x2c8>)
 80056be:	f010 fa4d 	bl	8015b5c <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 80056c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056c6:	4b91      	ldr	r3, [pc, #580]	; (800590c <altiMain+0x2c4>)
 80056c8:	210a      	movs	r1, #10
 80056ca:	200a      	movs	r0, #10
 80056cc:	f7fd fd8c 	bl	80031e8 <lcdPutStr>

	if(altitudeMode){
 80056d0:	4b90      	ldr	r3, [pc, #576]	; (8005914 <altiMain+0x2cc>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 813d 	beq.w	8005954 <altiMain+0x30c>
		// altitude - pressure at the sea level
		char tmpStr[50] = {0};
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	f107 0318 	add.w	r3, r7, #24
 80056e2:	222e      	movs	r2, #46	; 0x2e
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f00f f90a 	bl	8014900 <memset>
		sprintf(&tmpStr, "%d", (int16_t)bmpData.altitude);
 80056ec:	4b83      	ldr	r3, [pc, #524]	; (80058fc <altiMain+0x2b4>)
 80056ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80056f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056f6:	ee17 3a90 	vmov	r3, s15
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	4985      	ldr	r1, [pc, #532]	; (8005918 <altiMain+0x2d0>)
 8005704:	4618      	mov	r0, r3
 8005706:	f010 fa29 	bl	8015b5c <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 800570a:	2342      	movs	r3, #66	; 0x42
 800570c:	b29c      	uxth	r4, r3
 800570e:	f107 0314 	add.w	r3, r7, #20
 8005712:	4618      	mov	r0, r3
 8005714:	f7fa fd76 	bl	8000204 <strlen>
 8005718:	4603      	mov	r3, r0
 800571a:	3301      	adds	r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	fb14 f303 	smulbb	r3, r4, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8005728:	b298      	uxth	r0, r3
 800572a:	f107 0214 	add.w	r2, r7, #20
 800572e:	4b7b      	ldr	r3, [pc, #492]	; (800591c <altiMain+0x2d4>)
 8005730:	2142      	movs	r1, #66	; 0x42
 8005732:	f7fd fd59 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, ".%1um", ((uint16_t)(fabs(bmpData.altitude)*10))%10);
 8005736:	4b71      	ldr	r3, [pc, #452]	; (80058fc <altiMain+0x2b4>)
 8005738:	edd3 7a02 	vldr	s15, [r3, #8]
 800573c:	eef0 7ae7 	vabs.f32	s15, s15
 8005740:	ee17 0a90 	vmov	r0, s15
 8005744:	f7fa ff20 	bl	8000588 <__aeabi_f2d>
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	4b74      	ldr	r3, [pc, #464]	; (8005920 <altiMain+0x2d8>)
 800574e:	f7fa ff73 	bl	8000638 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4610      	mov	r0, r2
 8005758:	4619      	mov	r1, r3
 800575a:	f7fb fa45 	bl	8000be8 <__aeabi_d2uiz>
 800575e:	4603      	mov	r3, r0
 8005760:	b29a      	uxth	r2, r3
 8005762:	4b70      	ldr	r3, [pc, #448]	; (8005924 <altiMain+0x2dc>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	08d9      	lsrs	r1, r3, #3
 800576a:	460b      	mov	r3, r1
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	496a      	ldr	r1, [pc, #424]	; (8005928 <altiMain+0x2e0>)
 800577e:	4618      	mov	r0, r3
 8005780:	f010 f9ec 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 8005784:	2322      	movs	r3, #34	; 0x22
 8005786:	b29c      	uxth	r4, r3
 8005788:	f107 0314 	add.w	r3, r7, #20
 800578c:	4618      	mov	r0, r3
 800578e:	f7fa fd39 	bl	8000204 <strlen>
 8005792:	4603      	mov	r3, r0
 8005794:	3301      	adds	r3, #1
 8005796:	b29b      	uxth	r3, r3
 8005798:	fb14 f303 	smulbb	r3, r4, r3
 800579c:	b29b      	uxth	r3, r3
 800579e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80057a2:	b298      	uxth	r0, r3
 80057a4:	f107 0214 	add.w	r2, r7, #20
 80057a8:	4b60      	ldr	r3, [pc, #384]	; (800592c <altiMain+0x2e4>)
 80057aa:	2142      	movs	r1, #66	; 0x42
 80057ac:	f7fd fd1c 	bl	80031e8 <lcdPutStr>
//		sprintf(&tmpStr, "m ", bmpData.pressure%100/10);
//		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
		sprintf(&tmpStr, "ASL %4.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80057b0:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <altiMain+0x2e8>)
 80057b2:	edd3 7a00 	vldr	s15, [r3]
 80057b6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005934 <altiMain+0x2ec>
 80057ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057be:	ee16 0a90 	vmov	r0, s13
 80057c2:	f7fa fee1 	bl	8000588 <__aeabi_f2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	f107 0014 	add.w	r0, r7, #20
 80057ce:	495a      	ldr	r1, [pc, #360]	; (8005938 <altiMain+0x2f0>)
 80057d0:	f010 f9c4 	bl	8015b5c <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 80057d4:	2309      	movs	r3, #9
 80057d6:	b29c      	uxth	r4, r3
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fa fd11 	bl	8000204 <strlen>
 80057e2:	4603      	mov	r3, r0
 80057e4:	3301      	adds	r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	fb14 f303 	smulbb	r3, r4, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 80057f2:	3301      	adds	r3, #1
 80057f4:	b298      	uxth	r0, r3
 80057f6:	f107 0214 	add.w	r2, r7, #20
 80057fa:	4b50      	ldr	r3, [pc, #320]	; (800593c <altiMain+0x2f4>)
 80057fc:	21a5      	movs	r1, #165	; 0xa5
 80057fe:	f7fd fcf3 	bl	80031e8 <lcdPutStr>

		// update minimum/maximum/diff
		if(bmpData.altitude < minAltitude) minAltitude = bmpData.altitude;
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <altiMain+0x2b4>)
 8005804:	ed93 7a02 	vldr	s14, [r3, #8]
 8005808:	4b4d      	ldr	r3, [pc, #308]	; (8005940 <altiMain+0x2f8>)
 800580a:	edd3 7a00 	vldr	s15, [r3]
 800580e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005816:	d503      	bpl.n	8005820 <altiMain+0x1d8>
 8005818:	4b38      	ldr	r3, [pc, #224]	; (80058fc <altiMain+0x2b4>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a48      	ldr	r2, [pc, #288]	; (8005940 <altiMain+0x2f8>)
 800581e:	6013      	str	r3, [r2, #0]
		if(bmpData.altitude > maxAltitude) maxAltitude = bmpData.altitude;
 8005820:	4b36      	ldr	r3, [pc, #216]	; (80058fc <altiMain+0x2b4>)
 8005822:	ed93 7a02 	vldr	s14, [r3, #8]
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <altiMain+0x2fc>)
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005834:	dd03      	ble.n	800583e <altiMain+0x1f6>
 8005836:	4b31      	ldr	r3, [pc, #196]	; (80058fc <altiMain+0x2b4>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a42      	ldr	r2, [pc, #264]	; (8005944 <altiMain+0x2fc>)
 800583c:	6013      	str	r3, [r2, #0]

//		sprintf(&tmpStr, "ref(diff) %.1fm(%+.1fm)", refAltitude, bmpData.altitude-refAltitude);
		if(refAltitude != 0){
 800583e:	4b42      	ldr	r3, [pc, #264]	; (8005948 <altiMain+0x300>)
 8005840:	edd3 7a00 	vldr	s15, [r3]
 8005844:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	d028      	beq.n	80058a0 <altiMain+0x258>
			sprintf(&tmpStr, "%+.1fm", bmpData.altitude-refAltitude);
 800584e:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <altiMain+0x2b4>)
 8005850:	ed93 7a02 	vldr	s14, [r3, #8]
 8005854:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <altiMain+0x300>)
 8005856:	edd3 7a00 	vldr	s15, [r3]
 800585a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800585e:	ee17 0a90 	vmov	r0, s15
 8005862:	f7fa fe91 	bl	8000588 <__aeabi_f2d>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	f107 0014 	add.w	r0, r7, #20
 800586e:	4937      	ldr	r1, [pc, #220]	; (800594c <altiMain+0x304>)
 8005870:	f010 f974 	bl	8015b5c <siprintf>
			lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 184, tmpStr, zekton24font);
 8005874:	2314      	movs	r3, #20
 8005876:	b29c      	uxth	r4, r3
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	4618      	mov	r0, r3
 800587e:	f7fa fcc1 	bl	8000204 <strlen>
 8005882:	4603      	mov	r3, r0
 8005884:	3301      	adds	r3, #1
 8005886:	b29b      	uxth	r3, r3
 8005888:	fb14 f303 	smulbb	r3, r4, r3
 800588c:	b29b      	uxth	r3, r3
 800588e:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8005892:	b298      	uxth	r0, r3
 8005894:	f107 0214 	add.w	r2, r7, #20
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <altiMain+0x2c4>)
 800589a:	21b8      	movs	r1, #184	; 0xb8
 800589c:	f7fd fca4 	bl	80031e8 <lcdPutStr>
		}
		sprintf(&tmpStr, "%.1fm/%.1fm", minAltitude, maxAltitude);
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <altiMain+0x2f8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fa fe6f 	bl	8000588 <__aeabi_f2d>
 80058aa:	4604      	mov	r4, r0
 80058ac:	460d      	mov	r5, r1
 80058ae:	4b25      	ldr	r3, [pc, #148]	; (8005944 <altiMain+0x2fc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fe68 	bl	8000588 <__aeabi_f2d>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	f107 0014 	add.w	r0, r7, #20
 80058c0:	e9cd 2300 	strd	r2, r3, [sp]
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	4921      	ldr	r1, [pc, #132]	; (8005950 <altiMain+0x308>)
 80058ca:	f010 f947 	bl	8015b5c <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 80058ce:	2314      	movs	r3, #20
 80058d0:	b29c      	uxth	r4, r3
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fc94 	bl	8000204 <strlen>
 80058dc:	4603      	mov	r3, r0
 80058de:	3301      	adds	r3, #1
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	fb14 f303 	smulbb	r3, r4, r3
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 80058ec:	b298      	uxth	r0, r3
 80058ee:	f107 0214 	add.w	r2, r7, #20
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <altiMain+0x2c4>)
 80058f4:	21d2      	movs	r1, #210	; 0xd2
 80058f6:	f7fd fc77 	bl	80031e8 <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
	}
}
 80058fa:	e169      	b.n	8005bd0 <altiMain+0x588>
 80058fc:	20002578 	.word	0x20002578
 8005900:	20002534 	.word	0x20002534
 8005904:	20005718 	.word	0x20005718
 8005908:	0801d06c 	.word	0x0801d06c
 800590c:	08023270 	.word	0x08023270
 8005910:	0801d078 	.word	0x0801d078
 8005914:	200000ad 	.word	0x200000ad
 8005918:	0801d084 	.word	0x0801d084
 800591c:	0802a720 	.word	0x0802a720
 8005920:	40240000 	.word	0x40240000
 8005924:	cccccccd 	.word	0xcccccccd
 8005928:	0801d088 	.word	0x0801d088
 800592c:	080250d8 	.word	0x080250d8
 8005930:	20000000 	.word	0x20000000
 8005934:	42c80000 	.word	0x42c80000
 8005938:	0801d090 	.word	0x0801d090
 800593c:	080227e8 	.word	0x080227e8
 8005940:	20005ce0 	.word	0x20005ce0
 8005944:	20005ce4 	.word	0x20005ce4
 8005948:	20005cdc 	.word	0x20005cdc
 800594c:	0801d0a0 	.word	0x0801d0a0
 8005950:	0801d0a8 	.word	0x0801d0a8
		char tmpStr[50] = {0};
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f107 0318 	add.w	r3, r7, #24
 800595c:	222e      	movs	r2, #46	; 0x2e
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f00e ffcd 	bl	8014900 <memset>
		sprintf(&tmpStr, "%d", (uint16_t)(bmpData.slpress/100));
 8005966:	4b9c      	ldr	r3, [pc, #624]	; (8005bd8 <altiMain+0x590>)
 8005968:	ed93 7a03 	vldr	s14, [r3, #12]
 800596c:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8005bdc <altiMain+0x594>
 8005970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 3a90 	vmov	r3, s15
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4996      	ldr	r1, [pc, #600]	; (8005be0 <altiMain+0x598>)
 8005986:	4618      	mov	r0, r3
 8005988:	f010 f8e8 	bl	8015b5c <siprintf>
		lcdPutStr(350-(*(zekton84font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton84font);
 800598c:	2342      	movs	r3, #66	; 0x42
 800598e:	b29c      	uxth	r4, r3
 8005990:	f107 0314 	add.w	r3, r7, #20
 8005994:	4618      	mov	r0, r3
 8005996:	f7fa fc35 	bl	8000204 <strlen>
 800599a:	4603      	mov	r3, r0
 800599c:	3301      	adds	r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	fb14 f303 	smulbb	r3, r4, r3
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 80059aa:	b298      	uxth	r0, r3
 80059ac:	f107 0214 	add.w	r2, r7, #20
 80059b0:	4b8c      	ldr	r3, [pc, #560]	; (8005be4 <altiMain+0x59c>)
 80059b2:	2142      	movs	r1, #66	; 0x42
 80059b4:	f7fd fc18 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, ".%d ", ((uint16_t)(bmpData.slpress/10))%10);
 80059b8:	4b87      	ldr	r3, [pc, #540]	; (8005bd8 <altiMain+0x590>)
 80059ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80059be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80059c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ca:	ee17 3a90 	vmov	r3, s15
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	4b85      	ldr	r3, [pc, #532]	; (8005be8 <altiMain+0x5a0>)
 80059d2:	fba3 1302 	umull	r1, r3, r3, r2
 80059d6:	08d9      	lsrs	r1, r3, #3
 80059d8:	460b      	mov	r3, r1
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	4980      	ldr	r1, [pc, #512]	; (8005bec <altiMain+0x5a4>)
 80059ec:	4618      	mov	r0, r3
 80059ee:	f010 f8b5 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 66, tmpStr, zekton45font);
 80059f2:	2322      	movs	r3, #34	; 0x22
 80059f4:	b29c      	uxth	r4, r3
 80059f6:	f107 0314 	add.w	r3, r7, #20
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fa fc02 	bl	8000204 <strlen>
 8005a00:	4603      	mov	r3, r0
 8005a02:	3301      	adds	r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	fb14 f303 	smulbb	r3, r4, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8005a10:	b298      	uxth	r0, r3
 8005a12:	f107 0214 	add.w	r2, r7, #20
 8005a16:	4b76      	ldr	r3, [pc, #472]	; (8005bf0 <altiMain+0x5a8>)
 8005a18:	2142      	movs	r1, #66	; 0x42
 8005a1a:	f7fd fbe5 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, "hpa", bmpData.pressure%100/10);
 8005a1e:	4b6e      	ldr	r3, [pc, #440]	; (8005bd8 <altiMain+0x590>)
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b74      	ldr	r3, [pc, #464]	; (8005bf4 <altiMain+0x5ac>)
 8005a24:	fba3 1302 	umull	r1, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	2164      	movs	r1, #100	; 0x64
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	4a6d      	ldr	r2, [pc, #436]	; (8005be8 <altiMain+0x5a0>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	08da      	lsrs	r2, r3, #3
 8005a3a:	f107 0314 	add.w	r3, r7, #20
 8005a3e:	496e      	ldr	r1, [pc, #440]	; (8005bf8 <altiMain+0x5b0>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	f010 f88b 	bl	8015b5c <siprintf>
		lcdPutStr(432-(*(zekton45font.font_Width)*(strlen(tmpStr)+1)), 112, tmpStr, zekton45font);
 8005a46:	2322      	movs	r3, #34	; 0x22
 8005a48:	b29c      	uxth	r4, r3
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fa fbd8 	bl	8000204 <strlen>
 8005a54:	4603      	mov	r3, r0
 8005a56:	3301      	adds	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	fb14 f303 	smulbb	r3, r4, r3
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f5c3 73d8 	rsb	r3, r3, #432	; 0x1b0
 8005a64:	b298      	uxth	r0, r3
 8005a66:	f107 0214 	add.w	r2, r7, #20
 8005a6a:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <altiMain+0x5a8>)
 8005a6c:	2170      	movs	r1, #112	; 0x70
 8005a6e:	f7fd fbbb 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, "ambient: %6.1f hPa", ((float)bmpData.pressure/100));
 8005a72:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <altiMain+0x590>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005bdc <altiMain+0x594>
 8005a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a86:	ee16 0a90 	vmov	r0, s13
 8005a8a:	f7fa fd7d 	bl	8000588 <__aeabi_f2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	f107 0014 	add.w	r0, r7, #20
 8005a96:	4959      	ldr	r1, [pc, #356]	; (8005bfc <altiMain+0x5b4>)
 8005a98:	f010 f860 	bl	8015b5c <siprintf>
		lcdPutStr(0, 165, tmpStr, font_12_zekton);
 8005a9c:	f107 0214 	add.w	r2, r7, #20
 8005aa0:	4b57      	ldr	r3, [pc, #348]	; (8005c00 <altiMain+0x5b8>)
 8005aa2:	21a5      	movs	r1, #165	; 0xa5
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	f7fd fb9f 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, "elevation: %.1fm", fixedAltitude);
 8005aaa:	4b56      	ldr	r3, [pc, #344]	; (8005c04 <altiMain+0x5bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fa fd6a 	bl	8000588 <__aeabi_f2d>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	f107 0014 	add.w	r0, r7, #20
 8005abc:	4952      	ldr	r1, [pc, #328]	; (8005c08 <altiMain+0x5c0>)
 8005abe:	f010 f84d 	bl	8015b5c <siprintf>
		lcdPutStr(0, 180, tmpStr, font_12_zekton);
 8005ac2:	f107 0214 	add.w	r2, r7, #20
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <altiMain+0x5b8>)
 8005ac8:	21b4      	movs	r1, #180	; 0xb4
 8005aca:	2000      	movs	r0, #0
 8005acc:	f7fd fb8c 	bl	80031e8 <lcdPutStr>
		sprintf(&tmpStr, "ASL: %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005ad0:	4b4e      	ldr	r3, [pc, #312]	; (8005c0c <altiMain+0x5c4>)
 8005ad2:	edd3 7a00 	vldr	s15, [r3]
 8005ad6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005bdc <altiMain+0x594>
 8005ada:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ade:	ee16 0a90 	vmov	r0, s13
 8005ae2:	f7fa fd51 	bl	8000588 <__aeabi_f2d>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	f107 0014 	add.w	r0, r7, #20
 8005aee:	4948      	ldr	r1, [pc, #288]	; (8005c10 <altiMain+0x5c8>)
 8005af0:	f010 f834 	bl	8015b5c <siprintf>
		lcdPutStr(395-(*(font_12_zekton.font_Width)*(strlen(tmpStr)+1)), 165, tmpStr, font_12_zekton);
 8005af4:	2309      	movs	r3, #9
 8005af6:	b29c      	uxth	r4, r3
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fb81 	bl	8000204 <strlen>
 8005b02:	4603      	mov	r3, r0
 8005b04:	3301      	adds	r3, #1
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	fb14 f303 	smulbb	r3, r4, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8005b12:	3301      	adds	r3, #1
 8005b14:	b298      	uxth	r0, r3
 8005b16:	f107 0214 	add.w	r2, r7, #20
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <altiMain+0x5b8>)
 8005b1c:	21a5      	movs	r1, #165	; 0xa5
 8005b1e:	f7fd fb63 	bl	80031e8 <lcdPutStr>
		if(bmpData.slpress < minPressure) minPressure = bmpData.slpress;
 8005b22:	4b2d      	ldr	r3, [pc, #180]	; (8005bd8 <altiMain+0x590>)
 8005b24:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b28:	4b3a      	ldr	r3, [pc, #232]	; (8005c14 <altiMain+0x5cc>)
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d503      	bpl.n	8005b40 <altiMain+0x4f8>
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <altiMain+0x590>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <altiMain+0x5cc>)
 8005b3e:	6013      	str	r3, [r2, #0]
		if(bmpData.slpress > maxPressure) maxPressure = bmpData.slpress;
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <altiMain+0x590>)
 8005b42:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b46:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <altiMain+0x5d0>)
 8005b48:	edd3 7a00 	vldr	s15, [r3]
 8005b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b54:	dd03      	ble.n	8005b5e <altiMain+0x516>
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <altiMain+0x590>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4a2f      	ldr	r2, [pc, #188]	; (8005c18 <altiMain+0x5d0>)
 8005b5c:	6013      	str	r3, [r2, #0]
		sprintf(&tmpStr, "%.1fhPa/%.1fhPa", minPressure/100, maxPressure/100);
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <altiMain+0x5cc>)
 8005b60:	edd3 7a00 	vldr	s15, [r3]
 8005b64:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005bdc <altiMain+0x594>
 8005b68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b6c:	ee16 0a90 	vmov	r0, s13
 8005b70:	f7fa fd0a 	bl	8000588 <__aeabi_f2d>
 8005b74:	4604      	mov	r4, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <altiMain+0x5d0>)
 8005b7a:	edd3 7a00 	vldr	s15, [r3]
 8005b7e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005bdc <altiMain+0x594>
 8005b82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b86:	ee16 0a90 	vmov	r0, s13
 8005b8a:	f7fa fcfd 	bl	8000588 <__aeabi_f2d>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	f107 0014 	add.w	r0, r7, #20
 8005b96:	e9cd 2300 	strd	r2, r3, [sp]
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	491f      	ldr	r1, [pc, #124]	; (8005c1c <altiMain+0x5d4>)
 8005ba0:	f00f ffdc 	bl	8015b5c <siprintf>
		lcdPutStr(410-(*(zekton24font.font_Width)*(strlen(tmpStr)+1)), 210, tmpStr, zekton24font);
 8005ba4:	2314      	movs	r3, #20
 8005ba6:	b29c      	uxth	r4, r3
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fb29 	bl	8000204 <strlen>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	fb14 f303 	smulbb	r3, r4, r3
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8005bc2:	b298      	uxth	r0, r3
 8005bc4:	f107 0214 	add.w	r2, r7, #20
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <altiMain+0x5d8>)
 8005bca:	21d2      	movs	r1, #210	; 0xd2
 8005bcc:	f7fd fb0c 	bl	80031e8 <lcdPutStr>
}
 8005bd0:	bf00      	nop
 8005bd2:	3750      	adds	r7, #80	; 0x50
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005bd8:	20002578 	.word	0x20002578
 8005bdc:	42c80000 	.word	0x42c80000
 8005be0:	0801d084 	.word	0x0801d084
 8005be4:	0802a720 	.word	0x0802a720
 8005be8:	cccccccd 	.word	0xcccccccd
 8005bec:	0801d0b4 	.word	0x0801d0b4
 8005bf0:	080250d8 	.word	0x080250d8
 8005bf4:	51eb851f 	.word	0x51eb851f
 8005bf8:	0801d0bc 	.word	0x0801d0bc
 8005bfc:	0801d0c0 	.word	0x0801d0c0
 8005c00:	080227e8 	.word	0x080227e8
 8005c04:	20000004 	.word	0x20000004
 8005c08:	0801d0d4 	.word	0x0801d0d4
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	0801d0e8 	.word	0x0801d0e8
 8005c14:	20005ce8 	.word	0x20005ce8
 8005c18:	20005cec 	.word	0x20005cec
 8005c1c:	0801d0f8 	.word	0x0801d0f8
 8005c20:	08023270 	.word	0x08023270

08005c24 <setRefAltitude>:

void setRefAltitude(void){
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	refAltitude = bmpData.altitude;
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <setRefAltitude+0x18>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <setRefAltitude+0x1c>)
 8005c2e:	6013      	str	r3, [r2, #0]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20002578 	.word	0x20002578
 8005c40:	20005cdc 	.word	0x20005cdc

08005c44 <clearRefAltitude>:
void clearRefAltitude(void){
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
	refAltitude = 0;
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <clearRefAltitude+0x18>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20005cdc 	.word	0x20005cdc

08005c60 <changeAltiMode>:
void changeAltiMode(void){
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <changeAltiMode+0x34>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d107      	bne.n	8005c7c <changeAltiMode+0x1c>
		fixedAltitude = bmpData.altitude;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <changeAltiMode+0x38>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <changeAltiMode+0x3c>)
 8005c72:	6013      	str	r3, [r2, #0]
		altitudeMode = 0;
 8005c74:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <changeAltiMode+0x34>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
	} else {
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
		altitudeMode = 1;
	}
}
 8005c7a:	e006      	b.n	8005c8a <changeAltiMode+0x2a>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <changeAltiMode+0x38>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <changeAltiMode+0x40>)
 8005c82:	6013      	str	r3, [r2, #0]
		altitudeMode = 1;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <changeAltiMode+0x34>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	200000ad 	.word	0x200000ad
 8005c98:	20002578 	.word	0x20002578
 8005c9c:	20000004 	.word	0x20000004
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <increaseAltitude>:
void increaseAltitude(void){
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <increaseAltitude+0x40>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10a      	bne.n	8005cc6 <increaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL += 1;
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <increaseAltitude+0x44>)
 8005cb2:	edd3 7a00 	vldr	s15, [r3]
 8005cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <increaseAltitude+0x44>)
 8005cc0:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude += 1;
	}
}
 8005cc4:	e009      	b.n	8005cda <increaseAltitude+0x36>
		fixedAltitude += 1;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <increaseAltitude+0x48>)
 8005cc8:	edd3 7a00 	vldr	s15, [r3]
 8005ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <increaseAltitude+0x48>)
 8005cd6:	edc3 7a00 	vstr	s15, [r3]
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	200000ad 	.word	0x200000ad
 8005ce8:	20000000 	.word	0x20000000
 8005cec:	20000004 	.word	0x20000004

08005cf0 <decreaseAltitude>:
void decreaseAltitude(void){
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	if(altitudeMode == 1){
 8005cf4:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <decreaseAltitude+0x40>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d10a      	bne.n	8005d12 <decreaseAltitude+0x22>
		BMP_PRESS_CONST_SEA_LEVEL -= 1;
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <decreaseAltitude+0x44>)
 8005cfe:	edd3 7a00 	vldr	s15, [r3]
 8005d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <decreaseAltitude+0x44>)
 8005d0c:	edc3 7a00 	vstr	s15, [r3]
	} else {
		fixedAltitude -= 1;
	}
}
 8005d10:	e009      	b.n	8005d26 <decreaseAltitude+0x36>
		fixedAltitude -= 1;
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <decreaseAltitude+0x48>)
 8005d14:	edd3 7a00 	vldr	s15, [r3]
 8005d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <decreaseAltitude+0x48>)
 8005d22:	edc3 7a00 	vstr	s15, [r3]
}
 8005d26:	bf00      	nop
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	200000ad 	.word	0x200000ad
 8005d34:	20000000 	.word	0x20000000
 8005d38:	20000004 	.word	0x20000004

08005d3c <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <setDefaultClbcks+0x34>)
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <setDefaultClbcks+0x38>)
 8005d44:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005d46:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <setDefaultClbcks+0x3c>)
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <setDefaultClbcks+0x40>)
 8005d4a:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <setDefaultClbcks+0x44>)
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <setDefaultClbcks+0x48>)
 8005d50:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <setDefaultClbcks+0x4c>)
 8005d54:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <setDefaultClbcks+0x50>)
 8005d56:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <setDefaultClbcks+0x54>)
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <setDefaultClbcks+0x58>)
 8005d5c:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <setDefaultClbcks+0x5c>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	611a      	str	r2, [r3, #16]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20002588 	.word	0x20002588
 8005d74:	08002b25 	.word	0x08002b25
 8005d78:	200025d0 	.word	0x200025d0
 8005d7c:	08002b35 	.word	0x08002b35
 8005d80:	200025ac 	.word	0x200025ac
 8005d84:	080062ad 	.word	0x080062ad
 8005d88:	2000263c 	.word	0x2000263c
 8005d8c:	080062f1 	.word	0x080062f1
 8005d90:	200025f4 	.word	0x200025f4
 8005d94:	0800633d 	.word	0x0800633d
 8005d98:	20002618 	.word	0x20002618

08005d9c <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005da0:	f7ff ffcc 	bl	8005d3c <setDefaultClbcks>
}
 8005da4:	bf00      	nop
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	b0b6      	sub	sp, #216	; 0xd8
 8005dae:	af04      	add	r7, sp, #16
	// update data
	bmpData = getBmpData(&bmp180module);
 8005db0:	4c92      	ldr	r4, [pc, #584]	; (8005ffc <baroMain+0x254>)
 8005db2:	463b      	mov	r3, r7
 8005db4:	4992      	ldr	r1, [pc, #584]	; (8006000 <baroMain+0x258>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fb ff92 	bl	8001ce0 <getBmpData>
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	488f      	ldr	r0, [pc, #572]	; (8006004 <baroMain+0x25c>)
 8005dc8:	f004 ff4b 	bl	800ac62 <cbuf_readn>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	488b      	ldr	r0, [pc, #556]	; (8006004 <baroMain+0x25c>)
 8005dd8:	f004 ff43 	bl	800ac62 <cbuf_readn>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8005de4:	2100      	movs	r1, #0
 8005de6:	4888      	ldr	r0, [pc, #544]	; (8006008 <baroMain+0x260>)
 8005de8:	f004 ffe1 	bl	800adae <read_nth_ring_buffer>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8005df2:	2100      	movs	r1, #0
 8005df4:	4884      	ldr	r0, [pc, #528]	; (8006008 <baroMain+0x260>)
 8005df6:	f004 ffda 	bl	800adae <read_nth_ring_buffer>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	char str1[50] = {0};
 8005e00:	2300      	movs	r3, #0
 8005e02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e08:	222e      	movs	r2, #46	; 0x2e
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f00e fd77 	bl	8014900 <memset>
	char str3[50] = {0};
 8005e12:	2300      	movs	r3, #0
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e1a:	222e      	movs	r2, #46	; 0x2e
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f00e fd6e 	bl	8014900 <memset>
	char str4[50] = {0};
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	f107 0318 	add.w	r3, r7, #24
 8005e2c:	222e      	movs	r2, #46	; 0x2e
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f00e fd65 	bl	8014900 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8005e36:	4b71      	ldr	r3, [pc, #452]	; (8005ffc <baroMain+0x254>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa fba4 	bl	8000588 <__aeabi_f2d>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005e48:	4970      	ldr	r1, [pc, #448]	; (800600c <baroMain+0x264>)
 8005e4a:	f00f fe87 	bl	8015b5c <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8005e4e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005e52:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <baroMain+0x268>)
 8005e54:	210e      	movs	r1, #14
 8005e56:	200a      	movs	r0, #10
 8005e58:	f7fd f9c6 	bl	80031e8 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8005e5c:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <baroMain+0x254>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006014 <baroMain+0x26c>
 8005e6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e70:	ee16 0a90 	vmov	r0, s13
 8005e74:	f7fa fb88 	bl	8000588 <__aeabi_f2d>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005e80:	4965      	ldr	r1, [pc, #404]	; (8006018 <baroMain+0x270>)
 8005e82:	f00f fe6b 	bl	8015b5c <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8005e86:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <baroMain+0x268>)
 8005e8c:	211e      	movs	r1, #30
 8005e8e:	200a      	movs	r0, #10
 8005e90:	f7fd f9aa 	bl	80031e8 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005e94:	4b61      	ldr	r3, [pc, #388]	; (800601c <baroMain+0x274>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d124      	bne.n	8005ee6 <baroMain+0x13e>
		sprintf(&str4, "Fixed altitude mode");
 8005e9c:	f107 0314 	add.w	r3, r7, #20
 8005ea0:	495f      	ldr	r1, [pc, #380]	; (8006020 <baroMain+0x278>)
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f00f fe5a 	bl	8015b5c <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8005ea8:	4b54      	ldr	r3, [pc, #336]	; (8005ffc <baroMain+0x254>)
 8005eaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8005eae:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006014 <baroMain+0x26c>
 8005eb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005eb6:	ee16 0a90 	vmov	r0, s13
 8005eba:	f7fa fb65 	bl	8000588 <__aeabi_f2d>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005ec6:	4957      	ldr	r1, [pc, #348]	; (8006024 <baroMain+0x27c>)
 8005ec8:	f00f fe48 	bl	8015b5c <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8005ecc:	4b56      	ldr	r3, [pc, #344]	; (8006028 <baroMain+0x280>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fa fb59 	bl	8000588 <__aeabi_f2d>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005ede:	4953      	ldr	r1, [pc, #332]	; (800602c <baroMain+0x284>)
 8005ee0:	f00f fe3c 	bl	8015b5c <siprintf>
 8005ee4:	e023      	b.n	8005f2e <baroMain+0x186>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8005ee6:	f107 0314 	add.w	r3, r7, #20
 8005eea:	4951      	ldr	r1, [pc, #324]	; (8006030 <baroMain+0x288>)
 8005eec:	4618      	mov	r0, r3
 8005eee:	f00f fe35 	bl	8015b5c <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8005ef2:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <baroMain+0x254>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fb46 	bl	8000588 <__aeabi_f2d>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005f04:	494b      	ldr	r1, [pc, #300]	; (8006034 <baroMain+0x28c>)
 8005f06:	f00f fe29 	bl	8015b5c <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8005f0a:	4b4b      	ldr	r3, [pc, #300]	; (8006038 <baroMain+0x290>)
 8005f0c:	edd3 7a00 	vldr	s15, [r3]
 8005f10:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006014 <baroMain+0x26c>
 8005f14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f18:	ee16 0a90 	vmov	r0, s13
 8005f1c:	f7fa fb34 	bl	8000588 <__aeabi_f2d>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005f28:	4944      	ldr	r1, [pc, #272]	; (800603c <baroMain+0x294>)
 8005f2a:	f00f fe17 	bl	8015b5c <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8005f2e:	f107 0214 	add.w	r2, r7, #20
 8005f32:	4b37      	ldr	r3, [pc, #220]	; (8006010 <baroMain+0x268>)
 8005f34:	2132      	movs	r1, #50	; 0x32
 8005f36:	200a      	movs	r0, #10
 8005f38:	f7fd f956 	bl	80031e8 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8005f3c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005f40:	4b33      	ldr	r3, [pc, #204]	; (8006010 <baroMain+0x268>)
 8005f42:	2142      	movs	r1, #66	; 0x42
 8005f44:	200a      	movs	r0, #10
 8005f46:	f7fd f94f 	bl	80031e8 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8005f4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f4e:	4b30      	ldr	r3, [pc, #192]	; (8006010 <baroMain+0x268>)
 8005f50:	2152      	movs	r1, #82	; 0x52
 8005f52:	200a      	movs	r0, #10
 8005f54:	f7fd f948 	bl	80031e8 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8005f5e:	e041      	b.n	8005fe4 <baroMain+0x23c>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8005f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f64:	4619      	mov	r1, r3
 8005f66:	4827      	ldr	r0, [pc, #156]	; (8006004 <baroMain+0x25c>)
 8005f68:	f004 fe7b 	bl	800ac62 <cbuf_readn>
 8005f6c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8005f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f74:	4619      	mov	r1, r3
 8005f76:	4824      	ldr	r0, [pc, #144]	; (8006008 <baroMain+0x260>)
 8005f78:	f004 ff19 	bl	800adae <read_nth_ring_buffer>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		if(*currB>=maxBaro) maxBaro = *currB;
 8005f82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d804      	bhi.n	8005f9a <baroMain+0x1f2>
 8005f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
		if(*currB<=minBaro) minBaro = *currB;
 8005f9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d304      	bcc.n	8005fb2 <baroMain+0x20a>
 8005fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		if(currT>=maxTemp) maxTemp = currT;
 8005fb2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8005fb6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d303      	bcc.n	8005fc6 <baroMain+0x21e>
 8005fbe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005fc2:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		if(currT<=minTemp) minTemp = currT;
 8005fc6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8005fca:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d803      	bhi.n	8005fda <baroMain+0x232>
 8005fd2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8005fd6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8005fda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8005fe4:	4b08      	ldr	r3, [pc, #32]	; (8006008 <baroMain+0x260>)
 8005fe6:	891b      	ldrh	r3, [r3, #8]
 8005fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d3b7      	bcc.n	8005f60 <baroMain+0x1b8>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <baroMain+0x298>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005ff8:	e0bd      	b.n	8006176 <baroMain+0x3ce>
 8005ffa:	bf00      	nop
 8005ffc:	20002578 	.word	0x20002578
 8006000:	20002534 	.word	0x20002534
 8006004:	20005730 	.word	0x20005730
 8006008:	20005744 	.word	0x20005744
 800600c:	0801d1c0 	.word	0x0801d1c0
 8006010:	0802ca94 	.word	0x0802ca94
 8006014:	42c80000 	.word	0x42c80000
 8006018:	0801d1d8 	.word	0x0801d1d8
 800601c:	20005cf0 	.word	0x20005cf0
 8006020:	0801d1f4 	.word	0x0801d1f4
 8006024:	0801d208 	.word	0x0801d208
 8006028:	20000004 	.word	0x20000004
 800602c:	0801d22c 	.word	0x0801d22c
 8006030:	0801d24c 	.word	0x0801d24c
 8006034:	0801d260 	.word	0x0801d260
 8006038:	20000000 	.word	0x20000000
 800603c:	0801d280 	.word	0x0801d280
 8006040:	200000ae 	.word	0x200000ae
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8006044:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006048:	4a90      	ldr	r2, [pc, #576]	; (800628c <baroMain+0x4e4>)
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	4a90      	ldr	r2, [pc, #576]	; (8006290 <baroMain+0x4e8>)
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <baroMain+0x4ec>)
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	4619      	mov	r1, r3
 800605c:	4b8b      	ldr	r3, [pc, #556]	; (800628c <baroMain+0x4e4>)
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	1acb      	subs	r3, r1, r3
 8006062:	fb92 f3f3 	sdiv	r3, r2, r3
 8006066:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 800606a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800606e:	4619      	mov	r1, r3
 8006070:	4887      	ldr	r0, [pc, #540]	; (8006290 <baroMain+0x4e8>)
 8006072:	f004 fdf6 	bl	800ac62 <cbuf_readn>
 8006076:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 800607a:	f8b7 00bc 	ldrh.w	r0, [r7, #188]	; 0xbc
 800607e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006082:	1c5c      	adds	r4, r3, #1
 8006084:	4b84      	ldr	r3, [pc, #528]	; (8006298 <baroMain+0x4f0>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	461d      	mov	r5, r3
 800608a:	4b83      	ldr	r3, [pc, #524]	; (8006298 <baroMain+0x4f0>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	4b82      	ldr	r3, [pc, #520]	; (800629c <baroMain+0x4f4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	4611      	mov	r1, r2
 800609e:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80060a2:	1a8a      	subs	r2, r1, r2
 80060a4:	fb03 f202 	mul.w	r2, r3, r2
 80060a8:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 80060ac:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80060b0:	1acb      	subs	r3, r1, r3
 80060b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80060b6:	1aea      	subs	r2, r5, r3
 80060b8:	4b77      	ldr	r3, [pc, #476]	; (8006298 <baroMain+0x4f0>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	2302      	movs	r3, #2
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	2301      	movs	r3, #1
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	460b      	mov	r3, r1
 80060cc:	4621      	mov	r1, r4
 80060ce:	f7fd fece 	bl	8003e6e <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 80060d2:	f8b7 50bc 	ldrh.w	r5, [r7, #188]	; 0xbc
 80060d6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80060da:	1c5e      	adds	r6, r3, #1
 80060dc:	4b6e      	ldr	r3, [pc, #440]	; (8006298 <baroMain+0x4f0>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4698      	mov	r8, r3
 80060e2:	4b6d      	ldr	r3, [pc, #436]	; (8006298 <baroMain+0x4f0>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b6c      	ldr	r3, [pc, #432]	; (800629c <baroMain+0x4f4>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	1ad4      	subs	r4, r2, r3
 80060ee:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80060f2:	4619      	mov	r1, r3
 80060f4:	486a      	ldr	r0, [pc, #424]	; (80062a0 <baroMain+0x4f8>)
 80060f6:	f004 fe5a 	bl	800adae <read_nth_ring_buffer>
 80060fa:	4602      	mov	r2, r0
 80060fc:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	fb03 f204 	mul.w	r2, r3, r4
 8006106:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 800610a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800610e:	1acb      	subs	r3, r1, r3
 8006110:	fb92 f3f3 	sdiv	r3, r2, r3
 8006114:	eba8 0203 	sub.w	r2, r8, r3
 8006118:	4b5f      	ldr	r3, [pc, #380]	; (8006298 <baroMain+0x4f0>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	4619      	mov	r1, r3
 800611e:	2300      	movs	r3, #0
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	230e      	movs	r3, #14
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	2301      	movs	r3, #1
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	460b      	mov	r3, r1
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	f7fd fe9d 	bl	8003e6e <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8006134:	4b55      	ldr	r3, [pc, #340]	; (800628c <baroMain+0x4e4>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	4b56      	ldr	r3, [pc, #344]	; (8006294 <baroMain+0x4ec>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	4b56      	ldr	r3, [pc, #344]	; (800629c <baroMain+0x4f4>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	2302      	movs	r3, #2
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2301      	movs	r3, #1
 800614c:	f7fd f94e 	bl	80033ec <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8006150:	4b4e      	ldr	r3, [pc, #312]	; (800628c <baroMain+0x4e4>)
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	4b4f      	ldr	r3, [pc, #316]	; (8006294 <baroMain+0x4ec>)
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	4b4e      	ldr	r3, [pc, #312]	; (8006298 <baroMain+0x4f0>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	2302      	movs	r3, #2
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	2301      	movs	r3, #1
 8006168:	f7fd f940 	bl	80033ec <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 800616c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006170:	3301      	adds	r3, #1
 8006172:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8006176:	4b47      	ldr	r3, [pc, #284]	; (8006294 <baroMain+0x4ec>)
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800617e:	429a      	cmp	r2, r3
 8006180:	f4ff af60 	bcc.w	8006044 <baroMain+0x29c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 8006184:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006190:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006194:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006198:	ee16 0a90 	vmov	r0, s13
 800619c:	f7fa f9f4 	bl	8000588 <__aeabi_f2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	f107 0014 	add.w	r0, r7, #20
 80061a8:	493e      	ldr	r1, [pc, #248]	; (80062a4 <baroMain+0x4fc>)
 80061aa:	f00f fcd7 	bl	8015b5c <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 80061ae:	4b3b      	ldr	r3, [pc, #236]	; (800629c <baroMain+0x4f4>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	3b06      	subs	r3, #6
 80061b4:	b2d9      	uxtb	r1, r3
 80061b6:	f107 0214 	add.w	r2, r7, #20
 80061ba:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <baroMain+0x500>)
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fd f813 	bl	80031e8 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 80061c2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80061d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061d6:	ee16 0a90 	vmov	r0, s13
 80061da:	f7fa f9d5 	bl	8000588 <__aeabi_f2d>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	f107 0014 	add.w	r0, r7, #20
 80061e6:	492f      	ldr	r1, [pc, #188]	; (80062a4 <baroMain+0x4fc>)
 80061e8:	f00f fcb8 	bl	8015b5c <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 80061ec:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <baroMain+0x4f0>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	3b06      	subs	r3, #6
 80061f2:	b2d9      	uxtb	r1, r3
 80061f4:	f107 0214 	add.w	r2, r7, #20
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <baroMain+0x500>)
 80061fa:	2000      	movs	r0, #0
 80061fc:	f7fc fff4 	bl	80031e8 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 8006200:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006210:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006214:	ee16 0a90 	vmov	r0, s13
 8006218:	f7fa f9b6 	bl	8000588 <__aeabi_f2d>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	f107 0014 	add.w	r0, r7, #20
 8006224:	491f      	ldr	r1, [pc, #124]	; (80062a4 <baroMain+0x4fc>)
 8006226:	f00f fc99 	bl	8015b5c <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 800622a:	4b1c      	ldr	r3, [pc, #112]	; (800629c <baroMain+0x4f4>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	3b06      	subs	r3, #6
 8006230:	b2d9      	uxtb	r1, r3
 8006232:	f107 0214 	add.w	r2, r7, #20
 8006236:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <baroMain+0x500>)
 8006238:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800623c:	f7fc ffd4 	bl	80031e8 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 8006240:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006250:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006254:	ee16 0a90 	vmov	r0, s13
 8006258:	f7fa f996 	bl	8000588 <__aeabi_f2d>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	f107 0014 	add.w	r0, r7, #20
 8006264:	490f      	ldr	r1, [pc, #60]	; (80062a4 <baroMain+0x4fc>)
 8006266:	f00f fc79 	bl	8015b5c <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <baroMain+0x4f0>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	3b06      	subs	r3, #6
 8006270:	b2d9      	uxtb	r1, r3
 8006272:	f107 0214 	add.w	r2, r7, #20
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <baroMain+0x500>)
 8006278:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800627c:	f7fc ffb4 	bl	80031e8 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8006280:	bf00      	nop
 8006282:	37c8      	adds	r7, #200	; 0xc8
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800628a:	bf00      	nop
 800628c:	200000ae 	.word	0x200000ae
 8006290:	20005730 	.word	0x20005730
 8006294:	200000b0 	.word	0x200000b0
 8006298:	200000b2 	.word	0x200000b2
 800629c:	200000b3 	.word	0x200000b3
 80062a0:	20005744 	.word	0x20005744
 80062a4:	0801d2a0 	.word	0x0801d2a0
 80062a8:	0802c618 	.word	0x0802c618

080062ac <changeBaroMode>:

void changeBaroMode(void){
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <changeBaroMode+0x34>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <changeBaroMode+0x38>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <changeBaroMode+0x3c>)
 80062be:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <changeBaroMode+0x34>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 80062c6:	e006      	b.n	80062d6 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <changeBaroMode+0x38>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4a07      	ldr	r2, [pc, #28]	; (80062ec <changeBaroMode+0x40>)
 80062ce:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <changeBaroMode+0x34>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20005cf0 	.word	0x20005cf0
 80062e4:	20002578 	.word	0x20002578
 80062e8:	20000000 	.word	0x20000000
 80062ec:	20000004 	.word	0x20000004

080062f0 <addBaro>:
void addBaro(void){
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <addBaro+0x40>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <addBaro+0x22>
			fixedAltitude += 1;
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <addBaro+0x44>)
 80062fe:	edd3 7a00 	vldr	s15, [r3]
 8006302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <addBaro+0x44>)
 800630c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8006310:	e009      	b.n	8006326 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <addBaro+0x48>)
 8006314:	edd3 7a00 	vldr	s15, [r3]
 8006318:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800631c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <addBaro+0x48>)
 8006322:	edc3 7a00 	vstr	s15, [r3]
}
 8006326:	bf00      	nop
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	20005cf0 	.word	0x20005cf0
 8006334:	20000004 	.word	0x20000004
 8006338:	20000000 	.word	0x20000000

0800633c <remBaro>:
void remBaro(void){
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <remBaro+0x40>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <remBaro+0x22>
			fixedAltitude -= 1;
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <remBaro+0x44>)
 800634a:	edd3 7a00 	vldr	s15, [r3]
 800634e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <remBaro+0x44>)
 8006358:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 800635c:	e009      	b.n	8006372 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <remBaro+0x48>)
 8006360:	edd3 7a00 	vldr	s15, [r3]
 8006364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <remBaro+0x48>)
 800636e:	edc3 7a00 	vstr	s15, [r3]
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20005cf0 	.word	0x20005cf0
 8006380:	20000004 	.word	0x20000004
 8006384:	20000000 	.word	0x20000000

08006388 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8006390:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <setupCntxMenu+0x1c>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6013      	str	r3, [r2, #0]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20005cf4 	.word	0x20005cf4

080063a8 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
	hideCntxMenu();
 80063ac:	f000 f87e 	bl	80064ac <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <cntxSelect+0x1c>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <cntxSelect+0x20>)
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	4798      	blx	r3
}
 80063c0:	bf00      	nop
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20005cf2 	.word	0x20005cf2
 80063c8:	20000168 	.word	0x20000168

080063cc <nextItem>:

void nextItem(void){
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <nextItem+0x34>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <nextItem+0x38>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	da06      	bge.n	80063ee <nextItem+0x22>
		cntxPosition++;
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <nextItem+0x34>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <nextItem+0x34>)
 80063ea:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 80063ec:	e002      	b.n	80063f4 <nextItem+0x28>
		cntxPosition = 0;
 80063ee:	4b04      	ldr	r3, [pc, #16]	; (8006400 <nextItem+0x34>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20005cf2 	.word	0x20005cf2
 8006404:	200000b4 	.word	0x200000b4

08006408 <prevItem>:
void prevItem(void){
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <prevItem+0x30>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <prevItem+0x1a>
		cntxPosition--;
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <prevItem+0x30>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3b01      	subs	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <prevItem+0x30>)
 800641e:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8006420:	e005      	b.n	800642e <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <prevItem+0x34>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	3b01      	subs	r3, #1
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <prevItem+0x30>)
 800642c:	701a      	strb	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20005cf2 	.word	0x20005cf2
 800643c:	200000b4 	.word	0x200000b4

08006440 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <setDefaultClbcks+0x34>)
 8006446:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <setDefaultClbcks+0x38>)
 8006448:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <setDefaultClbcks+0x3c>)
 800644c:	4a0c      	ldr	r2, [pc, #48]	; (8006480 <setDefaultClbcks+0x40>)
 800644e:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <setDefaultClbcks+0x3c>)
 8006452:	4a0b      	ldr	r2, [pc, #44]	; (8006480 <setDefaultClbcks+0x40>)
 8006454:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <setDefaultClbcks+0x44>)
 8006458:	4a0b      	ldr	r2, [pc, #44]	; (8006488 <setDefaultClbcks+0x48>)
 800645a:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <setDefaultClbcks+0x4c>)
 800645e:	4a0c      	ldr	r2, [pc, #48]	; (8006490 <setDefaultClbcks+0x50>)
 8006460:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <setDefaultClbcks+0x4c>)
 8006464:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <setDefaultClbcks+0x50>)
 8006466:	61da      	str	r2, [r3, #28]
}
 8006468:	bf00      	nop
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000263c 	.word	0x2000263c
 8006478:	080064ad 	.word	0x080064ad
 800647c:	200025d0 	.word	0x200025d0
 8006480:	08006409 	.word	0x08006409
 8006484:	200025ac 	.word	0x200025ac
 8006488:	080063a9 	.word	0x080063a9
 800648c:	20002588 	.word	0x20002588
 8006490:	080063cd 	.word	0x080063cd

08006494 <showCntxMenu>:

void showCntxMenu(void){
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8006498:	f7ff ffd2 	bl	8006440 <setDefaultClbcks>
	isCntxOpen = 1;
 800649c:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <showCntxMenu+0x14>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20005cf1 	.word	0x20005cf1

080064ac <hideCntxMenu>:
void hideCntxMenu(void){
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 80064b0:	f7fb fd08 	bl	8001ec4 <resetButtonHandlers>
	(*prevClbcks)();
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <hideCntxMenu+0x18>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4798      	blx	r3
	isCntxOpen = 0;
 80064ba:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <hideCntxMenu+0x1c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20005cf4 	.word	0x20005cf4
 80064c8:	20005cf1 	.word	0x20005cf1

080064cc <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 80064d2:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <enableCntxMenu+0xdc>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d062      	beq.n	80065a0 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 80064da:	230e      	movs	r3, #14
 80064dc:	461a      	mov	r2, r3
 80064de:	4b33      	ldr	r3, [pc, #204]	; (80065ac <enableCntxMenu+0xe0>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	330a      	adds	r3, #10
 80064e8:	2200      	movs	r2, #0
 80064ea:	9200      	str	r2, [sp, #0]
 80064ec:	2205      	movs	r2, #5
 80064ee:	21c8      	movs	r1, #200	; 0xc8
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7fd fc97 	bl	8003e24 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 80064f6:	2301      	movs	r3, #1
 80064f8:	2206      	movs	r2, #6
 80064fa:	21c8      	movs	r1, #200	; 0xc8
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7fd fb3b 	bl	8003b78 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 8006502:	230e      	movs	r3, #14
 8006504:	461a      	mov	r2, r3
 8006506:	4b29      	ldr	r3, [pc, #164]	; (80065ac <enableCntxMenu+0xe0>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	f103 020a 	add.w	r2, r3, #10
 8006512:	2301      	movs	r3, #1
 8006514:	21c8      	movs	r1, #200	; 0xc8
 8006516:	2000      	movs	r0, #0
 8006518:	f7fd fb2e 	bl	8003b78 <lcdHLine>
//		create list
		char item[30] = {0};
 800651c:	2300      	movs	r3, #0
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	609a      	str	r2, [r3, #8]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	611a      	str	r2, [r3, #16]
 800652e:	615a      	str	r2, [r3, #20]
 8006530:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 8006532:	2300      	movs	r3, #0
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e018      	b.n	800656a <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 8006538:	7ffb      	ldrb	r3, [r7, #31]
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <enableCntxMenu+0xe4>)
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	461a      	mov	r2, r3
 8006542:	463b      	mov	r3, r7
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f00f fb08 	bl	8015b5c <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 800654c:	220e      	movs	r2, #14
 800654e:	7ffb      	ldrb	r3, [r7, #31]
 8006550:	fb13 f302 	smulbb	r3, r3, r2
 8006554:	b2db      	uxtb	r3, r3
 8006556:	330a      	adds	r3, #10
 8006558:	b2d9      	uxtb	r1, r3
 800655a:	463a      	mov	r2, r7
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <enableCntxMenu+0xe8>)
 800655e:	2005      	movs	r0, #5
 8006560:	f7fc fe42 	bl	80031e8 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 8006564:	7ffb      	ldrb	r3, [r7, #31]
 8006566:	3301      	adds	r3, #1
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <enableCntxMenu+0xe0>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	7ffa      	ldrb	r2, [r7, #31]
 8006570:	429a      	cmp	r2, r3
 8006572:	d3e1      	bcc.n	8006538 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 8006574:	230e      	movs	r3, #14
 8006576:	461a      	mov	r2, r3
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <enableCntxMenu+0xec>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	f103 0208 	add.w	r2, r3, #8
 8006584:	230e      	movs	r3, #14
 8006586:	4619      	mov	r1, r3
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <enableCntxMenu+0xec>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	3308      	adds	r3, #8
 8006594:	2102      	movs	r1, #2
 8006596:	9100      	str	r1, [sp, #0]
 8006598:	21c8      	movs	r1, #200	; 0xc8
 800659a:	2000      	movs	r0, #0
 800659c:	f7fd fc42 	bl	8003e24 <lcdRect>

	}
}
 80065a0:	bf00      	nop
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20005cf1 	.word	0x20005cf1
 80065ac:	200000b4 	.word	0x200000b4
 80065b0:	20000168 	.word	0x20000168
 80065b4:	0802d51c 	.word	0x0802d51c
 80065b8:	20005cf2 	.word	0x20005cf2

080065bc <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
	pageNum++;
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <nextPg+0x1c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <nextPg+0x1c>)
 80065ca:	701a      	strb	r2, [r3, #0]
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20005cf8 	.word	0x20005cf8

080065dc <prevPg>:
void prevPg(void){
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
	pageNum--;
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <prevPg+0x1c>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <prevPg+0x1c>)
 80065ea:	701a      	strb	r2, [r3, #0]
}
 80065ec:	bf00      	nop
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20005cf8 	.word	0x20005cf8

080065fc <syncTime>:
void syncTime(void){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
	if(location.isValid){
 8006600:	4b15      	ldr	r3, [pc, #84]	; (8006658 <syncTime+0x5c>)
 8006602:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8006606:	2b00      	cmp	r3, #0
 8006608:	d023      	beq.n	8006652 <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 800660a:	4b13      	ldr	r3, [pc, #76]	; (8006658 <syncTime+0x5c>)
 800660c:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <syncTime+0x60>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	4413      	add	r3, r2
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <syncTime+0x64>)
 800661c:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 800661e:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <syncTime+0x5c>)
 8006620:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <syncTime+0x64>)
 8006626:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <syncTime+0x5c>)
 800662a:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <syncTime+0x64>)
 8006630:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <syncTime+0x64>)
 8006634:	2200      	movs	r2, #0
 8006636:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <syncTime+0x64>)
 800663a:	2200      	movs	r2, #0
 800663c:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800663e:	2200      	movs	r2, #0
 8006640:	4907      	ldr	r1, [pc, #28]	; (8006660 <syncTime+0x64>)
 8006642:	4808      	ldr	r0, [pc, #32]	; (8006664 <syncTime+0x68>)
 8006644:	f006 ffc8 	bl	800d5d8 <HAL_RTC_SetTime>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <syncTime+0x56>
		{
		Error_Handler();
 800664e:	f7fd ff39 	bl	80044c4 <Error_Handler>
		}
	}
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200055a0 	.word	0x200055a0
 800665c:	20000060 	.word	0x20000060
 8006660:	20005718 	.word	0x20005718
 8006664:	200059c8 	.word	0x200059c8

08006668 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <setDefaultClbcks+0x2c>)
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <setDefaultClbcks+0x30>)
 8006670:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <setDefaultClbcks+0x34>)
 8006674:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <setDefaultClbcks+0x38>)
 8006676:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <setDefaultClbcks+0x3c>)
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <setDefaultClbcks+0x40>)
 800667c:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <setDefaultClbcks+0x44>)
 8006680:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <setDefaultClbcks+0x48>)
 8006682:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 8006684:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <setDefaultClbcks+0x4c>)
 8006686:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <setDefaultClbcks+0x50>)
 8006688:	611a      	str	r2, [r3, #16]
}
 800668a:	bf00      	nop
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	20002588 	.word	0x20002588
 8006698:	08002b25 	.word	0x08002b25
 800669c:	200025d0 	.word	0x200025d0
 80066a0:	08002b35 	.word	0x08002b35
 80066a4:	200025f4 	.word	0x200025f4
 80066a8:	080065bd 	.word	0x080065bd
 80066ac:	2000263c 	.word	0x2000263c
 80066b0:	080065dd 	.word	0x080065dd
 80066b4:	20002618 	.word	0x20002618
 80066b8:	080065fd 	.word	0x080065fd

080066bc <gpsSetup>:

void gpsSetup(void){
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80066c0:	f7ff ffd2 	bl	8006668 <setDefaultClbcks>

}
 80066c4:	bf00      	nop
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <gpsMain>:

void gpsMain(void){
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80066ce:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80066d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80066da:	222f      	movs	r2, #47	; 0x2f
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f00e f90e 	bl	8014900 <memset>

	switch(pageNum){
 80066e4:	4bb2      	ldr	r3, [pc, #712]	; (80069b0 <gpsMain+0x2e8>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <gpsMain+0x2c>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f000 80e7 	beq.w	80068c0 <gpsMain+0x1f8>
 80066f2:	e13e      	b.n	8006972 <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 80066fa:	49ae      	ldr	r1, [pc, #696]	; (80069b4 <gpsMain+0x2ec>)
 80066fc:	48ae      	ldr	r0, [pc, #696]	; (80069b8 <gpsMain+0x2f0>)
 80066fe:	f7fb ff93 	bl	8002628 <getLocation>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 8006708:	4baa      	ldr	r3, [pc, #680]	; (80069b4 <gpsMain+0x2ec>)
 800670a:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 800670e:	4ba9      	ldr	r3, [pc, #676]	; (80069b4 <gpsMain+0x2ec>)
 8006710:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8006714:	4013      	ands	r3, r2
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8095 	beq.w	8006848 <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 800671e:	4ba5      	ldr	r3, [pc, #660]	; (80069b4 <gpsMain+0x2ec>)
 8006720:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006724:	461a      	mov	r2, r3
 8006726:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800672a:	49a4      	ldr	r1, [pc, #656]	; (80069bc <gpsMain+0x2f4>)
 800672c:	4618      	mov	r0, r3
 800672e:	f00f fa15 	bl	8015b5c <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 8006732:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006736:	4ba2      	ldr	r3, [pc, #648]	; (80069c0 <gpsMain+0x2f8>)
 8006738:	21dc      	movs	r1, #220	; 0xdc
 800673a:	20c8      	movs	r0, #200	; 0xc8
 800673c:	f7fc fd54 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8006740:	4b9c      	ldr	r3, [pc, #624]	; (80069b4 <gpsMain+0x2ec>)
 8006742:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006746:	461a      	mov	r2, r3
 8006748:	4b9a      	ldr	r3, [pc, #616]	; (80069b4 <gpsMain+0x2ec>)
 800674a:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800674e:	4619      	mov	r1, r3
 8006750:	4b98      	ldr	r3, [pc, #608]	; (80069b4 <gpsMain+0x2ec>)
 8006752:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006756:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	460b      	mov	r3, r1
 800675e:	4999      	ldr	r1, [pc, #612]	; (80069c4 <gpsMain+0x2fc>)
 8006760:	f00f f9fc 	bl	8015b5c <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8006764:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006768:	4b97      	ldr	r3, [pc, #604]	; (80069c8 <gpsMain+0x300>)
 800676a:	2100      	movs	r1, #0
 800676c:	2000      	movs	r0, #0
 800676e:	f7fc fd3b 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006772:	4b96      	ldr	r3, [pc, #600]	; (80069cc <gpsMain+0x304>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	4b94      	ldr	r3, [pc, #592]	; (80069cc <gpsMain+0x304>)
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	4619      	mov	r1, r3
 800677e:	4b93      	ldr	r3, [pc, #588]	; (80069cc <gpsMain+0x304>)
 8006780:	789b      	ldrb	r3, [r3, #2]
 8006782:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	460b      	mov	r3, r1
 800678a:	4991      	ldr	r1, [pc, #580]	; (80069d0 <gpsMain+0x308>)
 800678c:	f00f f9e6 	bl	8015b5c <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 8006790:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006794:	4b8c      	ldr	r3, [pc, #560]	; (80069c8 <gpsMain+0x300>)
 8006796:	2100      	movs	r1, #0
 8006798:	20dc      	movs	r0, #220	; 0xdc
 800679a:	f7fc fd25 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 800679e:	4b8d      	ldr	r3, [pc, #564]	; (80069d4 <gpsMain+0x30c>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80067a6:	498c      	ldr	r1, [pc, #560]	; (80069d8 <gpsMain+0x310>)
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00f f9d7 	bl	8015b5c <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 80067ae:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80067b2:	4b85      	ldr	r3, [pc, #532]	; (80069c8 <gpsMain+0x300>)
 80067b4:	2114      	movs	r1, #20
 80067b6:	20dc      	movs	r0, #220	; 0xdc
 80067b8:	f7fc fd16 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 80067bc:	4b7d      	ldr	r3, [pc, #500]	; (80069b4 <gpsMain+0x2ec>)
 80067be:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80067c2:	4619      	mov	r1, r3
 80067c4:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <gpsMain+0x2ec>)
 80067c6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80067ca:	461c      	mov	r4, r3
 80067cc:	4b79      	ldr	r3, [pc, #484]	; (80069b4 <gpsMain+0x2ec>)
 80067ce:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80067d2:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80067d6:	e9cd 2300 	strd	r2, r3, [sp]
 80067da:	4623      	mov	r3, r4
 80067dc:	460a      	mov	r2, r1
 80067de:	497f      	ldr	r1, [pc, #508]	; (80069dc <gpsMain+0x314>)
 80067e0:	f00f f9bc 	bl	8015b5c <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 80067e4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80067e8:	4b7d      	ldr	r3, [pc, #500]	; (80069e0 <gpsMain+0x318>)
 80067ea:	2132      	movs	r1, #50	; 0x32
 80067ec:	2000      	movs	r0, #0
 80067ee:	f7fc fcfb 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 80067f2:	4b70      	ldr	r3, [pc, #448]	; (80069b4 <gpsMain+0x2ec>)
 80067f4:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80067f8:	4619      	mov	r1, r3
 80067fa:	4b6e      	ldr	r3, [pc, #440]	; (80069b4 <gpsMain+0x2ec>)
 80067fc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006800:	461c      	mov	r4, r3
 8006802:	4b6c      	ldr	r3, [pc, #432]	; (80069b4 <gpsMain+0x2ec>)
 8006804:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8006808:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800680c:	e9cd 2300 	strd	r2, r3, [sp]
 8006810:	4623      	mov	r3, r4
 8006812:	460a      	mov	r2, r1
 8006814:	4971      	ldr	r1, [pc, #452]	; (80069dc <gpsMain+0x314>)
 8006816:	f00f f9a1 	bl	8015b5c <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 800681a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800681e:	4b70      	ldr	r3, [pc, #448]	; (80069e0 <gpsMain+0x318>)
 8006820:	216e      	movs	r1, #110	; 0x6e
 8006822:	2000      	movs	r0, #0
 8006824:	f7fc fce0 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 8006828:	4b62      	ldr	r3, [pc, #392]	; (80069b4 <gpsMain+0x2ec>)
 800682a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800682e:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8006832:	496c      	ldr	r1, [pc, #432]	; (80069e4 <gpsMain+0x31c>)
 8006834:	f00f f992 	bl	8015b5c <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 8006838:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800683c:	4b6a      	ldr	r3, [pc, #424]	; (80069e8 <gpsMain+0x320>)
 800683e:	21aa      	movs	r1, #170	; 0xaa
 8006840:	2014      	movs	r0, #20
 8006842:	f7fc fcd1 	bl	80031e8 <lcdPutStr>
 8006846:	e029      	b.n	800689c <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8006848:	4b5a      	ldr	r3, [pc, #360]	; (80069b4 <gpsMain+0x2ec>)
 800684a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800684e:	461a      	mov	r2, r3
 8006850:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8006854:	4965      	ldr	r1, [pc, #404]	; (80069ec <gpsMain+0x324>)
 8006856:	4618      	mov	r0, r3
 8006858:	f00f f980 	bl	8015b5c <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 800685c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006860:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <gpsMain+0x300>)
 8006862:	2100      	movs	r1, #0
 8006864:	2000      	movs	r0, #0
 8006866:	f7fc fcbf 	bl	80031e8 <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 800686a:	4b52      	ldr	r3, [pc, #328]	; (80069b4 <gpsMain+0x2ec>)
 800686c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006870:	461a      	mov	r2, r3
 8006872:	4b50      	ldr	r3, [pc, #320]	; (80069b4 <gpsMain+0x2ec>)
 8006874:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8006878:	4619      	mov	r1, r3
 800687a:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <gpsMain+0x2ec>)
 800687c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006880:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	460b      	mov	r3, r1
 8006888:	4959      	ldr	r1, [pc, #356]	; (80069f0 <gpsMain+0x328>)
 800688a:	f00f f967 	bl	8015b5c <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 800688e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8006892:	4b4d      	ldr	r3, [pc, #308]	; (80069c8 <gpsMain+0x300>)
 8006894:	211e      	movs	r1, #30
 8006896:	2000      	movs	r0, #0
 8006898:	f7fc fca6 	bl	80031e8 <lcdPutStr>
		}
		if(locUpdated){
 800689c:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d07f      	beq.n	80069a4 <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 80068a4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80068a8:	4952      	ldr	r1, [pc, #328]	; (80069f4 <gpsMain+0x32c>)
 80068aa:	4618      	mov	r0, r3
 80068ac:	f00f f956 	bl	8015b5c <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 80068b0:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80068b4:	4b42      	ldr	r3, [pc, #264]	; (80069c0 <gpsMain+0x2f8>)
 80068b6:	21dc      	movs	r1, #220	; 0xdc
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7fc fc95 	bl	80031e8 <lcdPutStr>
		}
		break;
 80068be:	e071      	b.n	80069a4 <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 80068c0:	493c      	ldr	r1, [pc, #240]	; (80069b4 <gpsMain+0x2ec>)
 80068c2:	483d      	ldr	r0, [pc, #244]	; (80069b8 <gpsMain+0x2f0>)
 80068c4:	f7fb feb0 	bl	8002628 <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 80068c8:	4b3d      	ldr	r3, [pc, #244]	; (80069c0 <gpsMain+0x2f8>)
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <gpsMain+0x2ec>)
 80068cc:	2119      	movs	r1, #25
 80068ce:	2000      	movs	r0, #0
 80068d0:	f7fc fc8a 	bl	80031e8 <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 80068d4:	4b3a      	ldr	r3, [pc, #232]	; (80069c0 <gpsMain+0x2f8>)
 80068d6:	4a48      	ldr	r2, [pc, #288]	; (80069f8 <gpsMain+0x330>)
 80068d8:	2128      	movs	r1, #40	; 0x28
 80068da:	2000      	movs	r0, #0
 80068dc:	f7fc fc84 	bl	80031e8 <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 80068e0:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <gpsMain+0x2f8>)
 80068e2:	4a46      	ldr	r2, [pc, #280]	; (80069fc <gpsMain+0x334>)
 80068e4:	2137      	movs	r1, #55	; 0x37
 80068e6:	2000      	movs	r0, #0
 80068e8:	f7fc fc7e 	bl	80031e8 <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 80068ec:	4b34      	ldr	r3, [pc, #208]	; (80069c0 <gpsMain+0x2f8>)
 80068ee:	4a44      	ldr	r2, [pc, #272]	; (8006a00 <gpsMain+0x338>)
 80068f0:	2146      	movs	r1, #70	; 0x46
 80068f2:	2000      	movs	r0, #0
 80068f4:	f7fc fc78 	bl	80031e8 <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 80068f8:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <gpsMain+0x2f8>)
 80068fa:	4a42      	ldr	r2, [pc, #264]	; (8006a04 <gpsMain+0x33c>)
 80068fc:	2155      	movs	r1, #85	; 0x55
 80068fe:	2000      	movs	r0, #0
 8006900:	f7fc fc72 	bl	80031e8 <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 8006904:	4b2e      	ldr	r3, [pc, #184]	; (80069c0 <gpsMain+0x2f8>)
 8006906:	4a40      	ldr	r2, [pc, #256]	; (8006a08 <gpsMain+0x340>)
 8006908:	2164      	movs	r1, #100	; 0x64
 800690a:	2000      	movs	r0, #0
 800690c:	f7fc fc6c 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 8006910:	4b2b      	ldr	r3, [pc, #172]	; (80069c0 <gpsMain+0x2f8>)
 8006912:	4a3e      	ldr	r2, [pc, #248]	; (8006a0c <gpsMain+0x344>)
 8006914:	2119      	movs	r1, #25
 8006916:	2064      	movs	r0, #100	; 0x64
 8006918:	f7fc fc66 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 800691c:	4b28      	ldr	r3, [pc, #160]	; (80069c0 <gpsMain+0x2f8>)
 800691e:	4a3c      	ldr	r2, [pc, #240]	; (8006a10 <gpsMain+0x348>)
 8006920:	2128      	movs	r1, #40	; 0x28
 8006922:	2064      	movs	r0, #100	; 0x64
 8006924:	f7fc fc60 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <gpsMain+0x2f8>)
 800692a:	4a3a      	ldr	r2, [pc, #232]	; (8006a14 <gpsMain+0x34c>)
 800692c:	2137      	movs	r1, #55	; 0x37
 800692e:	2064      	movs	r0, #100	; 0x64
 8006930:	f7fc fc5a 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 8006934:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <gpsMain+0x2f8>)
 8006936:	4a38      	ldr	r2, [pc, #224]	; (8006a18 <gpsMain+0x350>)
 8006938:	2146      	movs	r1, #70	; 0x46
 800693a:	2064      	movs	r0, #100	; 0x64
 800693c:	f7fc fc54 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <gpsMain+0x2f8>)
 8006942:	4a36      	ldr	r2, [pc, #216]	; (8006a1c <gpsMain+0x354>)
 8006944:	2155      	movs	r1, #85	; 0x55
 8006946:	2064      	movs	r0, #100	; 0x64
 8006948:	f7fc fc4e 	bl	80031e8 <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 800694c:	4b1c      	ldr	r3, [pc, #112]	; (80069c0 <gpsMain+0x2f8>)
 800694e:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <gpsMain+0x358>)
 8006950:	2164      	movs	r1, #100	; 0x64
 8006952:	2064      	movs	r0, #100	; 0x64
 8006954:	f7fc fc48 	bl	80031e8 <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8006958:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <gpsMain+0x2f8>)
 800695a:	4a32      	ldr	r2, [pc, #200]	; (8006a24 <gpsMain+0x35c>)
 800695c:	2119      	movs	r1, #25
 800695e:	20c8      	movs	r0, #200	; 0xc8
 8006960:	f7fc fc42 	bl	80031e8 <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 8006964:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <gpsMain+0x2f8>)
 8006966:	4a30      	ldr	r2, [pc, #192]	; (8006a28 <gpsMain+0x360>)
 8006968:	2128      	movs	r1, #40	; 0x28
 800696a:	20c8      	movs	r0, #200	; 0xc8
 800696c:	f7fc fc3c 	bl	80031e8 <lcdPutStr>
		break;
 8006970:	e019      	b.n	80069a6 <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 8006972:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006976:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	f240 2255 	movw	r2, #597	; 0x255
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f00d ffba 	bl	8014900 <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 800698c:	463b      	mov	r3, r7
 800698e:	4927      	ldr	r1, [pc, #156]	; (8006a2c <gpsMain+0x364>)
 8006990:	4618      	mov	r0, r3
 8006992:	f00f f974 	bl	8015c7e <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 8006996:	463a      	mov	r2, r7
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <gpsMain+0x2f8>)
 800699a:	2100      	movs	r1, #0
 800699c:	2000      	movs	r0, #0
 800699e:	f7fc fc51 	bl	8003244 <lcdPutStrML>
		break;
 80069a2:	e000      	b.n	80069a6 <gpsMain+0x2de>
		break;
 80069a4:	bf00      	nop





}
 80069a6:	bf00      	nop
 80069a8:	f507 7725 	add.w	r7, r7, #660	; 0x294
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	20005cf8 	.word	0x20005cf8
 80069b4:	200055a0 	.word	0x200055a0
 80069b8:	20005754 	.word	0x20005754
 80069bc:	0801d360 	.word	0x0801d360
 80069c0:	0802dfa4 	.word	0x0802dfa4
 80069c4:	0801d378 	.word	0x0801d378
 80069c8:	0802e420 	.word	0x0802e420
 80069cc:	20005718 	.word	0x20005718
 80069d0:	0801d38c 	.word	0x0801d38c
 80069d4:	20000060 	.word	0x20000060
 80069d8:	0801d3a0 	.word	0x0801d3a0
 80069dc:	0801d3a8 	.word	0x0801d3a8
 80069e0:	08031850 	.word	0x08031850
 80069e4:	0801d3b4 	.word	0x0801d3b4
 80069e8:	0802f9e8 	.word	0x0802f9e8
 80069ec:	0801d3c0 	.word	0x0801d3c0
 80069f0:	0801d3d8 	.word	0x0801d3d8
 80069f4:	0801d3f4 	.word	0x0801d3f4
 80069f8:	200055f6 	.word	0x200055f6
 80069fc:	20005605 	.word	0x20005605
 8006a00:	20005614 	.word	0x20005614
 8006a04:	20005623 	.word	0x20005623
 8006a08:	20005632 	.word	0x20005632
 8006a0c:	20005641 	.word	0x20005641
 8006a10:	20005650 	.word	0x20005650
 8006a14:	2000565f 	.word	0x2000565f
 8006a18:	2000566e 	.word	0x2000566e
 8006a1c:	2000567d 	.word	0x2000567d
 8006a20:	2000568c 	.word	0x2000568c
 8006a24:	2000569b 	.word	0x2000569b
 8006a28:	200056aa 	.word	0x200056aa
 8006a2c:	20005758 	.word	0x20005758

08006a30 <switchLocalView>:
void remDay(){
	testTime.tm_mday--;
	mktime(&testTime);

}
void switchLocalView(void){
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	if(localModuleNum<=3){
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <switchLocalView+0x2c>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d806      	bhi.n	8006a4a <switchLocalView+0x1a>
		localModuleNum++;
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <switchLocalView+0x2c>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <switchLocalView+0x2c>)
 8006a46:	701a      	strb	r2, [r3, #0]
	} else {
		localModuleNum = 0;
	}
}
 8006a48:	e002      	b.n	8006a50 <switchLocalView+0x20>
		localModuleNum = 0;
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <switchLocalView+0x2c>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20005d20 	.word	0x20005d20

08006a60 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <setDefaultClbcks+0x20>)
 8006a66:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <setDefaultClbcks+0x24>)
 8006a68:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <setDefaultClbcks+0x28>)
 8006a6c:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <setDefaultClbcks+0x2c>)
 8006a6e:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &switchLocalView;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <setDefaultClbcks+0x30>)
 8006a72:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <setDefaultClbcks+0x34>)
 8006a74:	611a      	str	r2, [r3, #16]
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20002588 	.word	0x20002588
 8006a84:	08002b25 	.word	0x08002b25
 8006a88:	200025d0 	.word	0x200025d0
 8006a8c:	08002b35 	.word	0x08002b35
 8006a90:	200025ac 	.word	0x200025ac
 8006a94:	08006a31 	.word	0x08006a31

08006a98 <localSetup>:
void localSetup(void){
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006a9c:	f7ff ffe0 	bl	8006a60 <setDefaultClbcks>
}
 8006aa0:	bf00      	nop
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	0000      	movs	r0, r0
	...

08006aa8 <fractionalYear>:
	int8_t timezone;	// [h] east+ west-
	double longitude; 	// [deg]
	double latitude;	// [deg]
};
// fractional year = gamma [rad]
float fractionalYear(struct tm *timeStr, struct local_location *location){
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
	int dayOfTheYear = testTime.tm_yday+1;
 8006ab2:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <fractionalYear+0x68>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
	return (2*M_PI/365)*(dayOfTheYear-1+(timeStr->tm_hour-location->timezone-12)/24);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	f991 1000 	ldrsb.w	r1, [r1]
 8006ac8:	1a5b      	subs	r3, r3, r1
 8006aca:	3b0c      	subs	r3, #12
 8006acc:	4911      	ldr	r1, [pc, #68]	; (8006b14 <fractionalYear+0x6c>)
 8006ace:	fb81 0103 	smull	r0, r1, r1, r3
 8006ad2:	1089      	asrs	r1, r1, #2
 8006ad4:	17db      	asrs	r3, r3, #31
 8006ad6:	1acb      	subs	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7f9 fd42 	bl	8000564 <__aeabi_i2d>
 8006ae0:	a309      	add	r3, pc, #36	; (adr r3, 8006b08 <fractionalYear+0x60>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fda7 	bl	8000638 <__aeabi_dmul>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	f7fa f899 	bl	8000c28 <__aeabi_d2f>
 8006af6:	4603      	mov	r3, r0
 8006af8:	ee07 3a90 	vmov	s15, r3
}
 8006afc:	eeb0 0a67 	vmov.f32	s0, s15
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	d4b3ac9a 	.word	0xd4b3ac9a
 8006b0c:	3f91a099 	.word	0x3f91a099
 8006b10:	20005cfc 	.word	0x20005cfc
 8006b14:	2aaaaaab 	.word	0x2aaaaaab

08006b18 <equationOfTime>:
// equation of time [min]
float equationOfTime(float fyear){
 8006b18:	b5b0      	push	{r4, r5, r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7f9 fd30 	bl	8000588 <__aeabi_f2d>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	ec43 2b10 	vmov	d0, r2, r3
 8006b30:	f013 fb16 	bl	801a160 <cos>
 8006b34:	ec51 0b10 	vmov	r0, r1, d0
 8006b38:	a33f      	add	r3, pc, #252	; (adr r3, 8006c38 <equationOfTime+0x120>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fd7b 	bl	8000638 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	a33d      	add	r3, pc, #244	; (adr r3, 8006c40 <equationOfTime+0x128>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fbbc 	bl	80002cc <__adddf3>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4614      	mov	r4, r2
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7f9 fd13 	bl	8000588 <__aeabi_f2d>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	ec43 2b10 	vmov	d0, r2, r3
 8006b6a:	f013 fb4d 	bl	801a208 <sin>
 8006b6e:	ec51 0b10 	vmov	r0, r1, d0
 8006b72:	a335      	add	r3, pc, #212	; (adr r3, 8006c48 <equationOfTime+0x130>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fd5e 	bl	8000638 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 fba0 	bl	80002c8 <__aeabi_dsub>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	461d      	mov	r5, r3
 8006b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b98:	ee17 0a90 	vmov	r0, s15
 8006b9c:	f7f9 fcf4 	bl	8000588 <__aeabi_f2d>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	ec43 2b10 	vmov	d0, r2, r3
 8006ba8:	f013 fada 	bl	801a160 <cos>
 8006bac:	ec51 0b10 	vmov	r0, r1, d0
 8006bb0:	a327      	add	r3, pc, #156	; (adr r3, 8006c50 <equationOfTime+0x138>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7f9 fd3f 	bl	8000638 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fb81 	bl	80002c8 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006bd6:	ee17 0a90 	vmov	r0, s15
 8006bda:	f7f9 fcd5 	bl	8000588 <__aeabi_f2d>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	ec43 2b10 	vmov	d0, r2, r3
 8006be6:	f013 fb0f 	bl	801a208 <sin>
 8006bea:	ec51 0b10 	vmov	r0, r1, d0
 8006bee:	a31a      	add	r3, pc, #104	; (adr r3, 8006c58 <equationOfTime+0x140>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f7f9 fd20 	bl	8000638 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fb62 	bl	80002c8 <__aeabi_dsub>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	a314      	add	r3, pc, #80	; (adr r3, 8006c60 <equationOfTime+0x148>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fd11 	bl	8000638 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7fa f803 	bl	8000c28 <__aeabi_d2f>
 8006c22:	4603      	mov	r3, r0
 8006c24:	ee07 3a90 	vmov	s15, r3
}
 8006c28:	eeb0 0a67 	vmov.f32	s0, s15
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bdb0      	pop	{r4, r5, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	f3af 8000 	nop.w
 8006c38:	ba2be059 	.word	0xba2be059
 8006c3c:	3f5e9af5 	.word	0x3f5e9af5
 8006c40:	30553261 	.word	0x30553261
 8006c44:	3f13a92a 	.word	0x3f13a92a
 8006c48:	83e8576d 	.word	0x83e8576d
 8006c4c:	3fa06c65 	.word	0x3fa06c65
 8006c50:	183f91e6 	.word	0x183f91e6
 8006c54:	3f8dee78 	.word	0x3f8dee78
 8006c58:	fe260b2d 	.word	0xfe260b2d
 8006c5c:	3fa4ea28 	.word	0x3fa4ea28
 8006c60:	8f5c28f6 	.word	0x8f5c28f6
 8006c64:	406ca5c2 	.word	0x406ca5c2

08006c68 <solarDeclination>:
// solar declination angle [rad]
float solarDeclination(float fyear){
 8006c68:	b5b0      	push	{r4, r5, r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7f9 fc88 	bl	8000588 <__aeabi_f2d>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	ec43 2b10 	vmov	d0, r2, r3
 8006c80:	f013 fa6e 	bl	801a160 <cos>
 8006c84:	ec51 0b10 	vmov	r0, r1, d0
 8006c88:	a359      	add	r3, pc, #356	; (adr r3, 8006df0 <solarDeclination+0x188>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f7f9 fcd3 	bl	8000638 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	a158      	add	r1, pc, #352	; (adr r1, 8006df8 <solarDeclination+0x190>)
 8006c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9c:	f7f9 fb14 	bl	80002c8 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7f9 fc6d 	bl	8000588 <__aeabi_f2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	ec43 2b10 	vmov	d0, r2, r3
 8006cb6:	f013 faa7 	bl	801a208 <sin>
 8006cba:	ec51 0b10 	vmov	r0, r1, d0
 8006cbe:	a350      	add	r3, pc, #320	; (adr r3, 8006e00 <solarDeclination+0x198>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fcb8 	bl	8000638 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 fafc 	bl	80002cc <__adddf3>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ce0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ce4:	ee17 0a90 	vmov	r0, s15
 8006ce8:	f7f9 fc4e 	bl	8000588 <__aeabi_f2d>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	ec43 2b10 	vmov	d0, r2, r3
 8006cf4:	f013 fa34 	bl	801a160 <cos>
 8006cf8:	ec51 0b10 	vmov	r0, r1, d0
 8006cfc:	a342      	add	r3, pc, #264	; (adr r3, 8006e08 <solarDeclination+0x1a0>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 fc99 	bl	8000638 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7f9 fadb 	bl	80002c8 <__aeabi_dsub>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4614      	mov	r4, r2
 8006d18:	461d      	mov	r5, r3
 8006d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006d22:	ee17 0a90 	vmov	r0, s15
 8006d26:	f7f9 fc2f 	bl	8000588 <__aeabi_f2d>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	ec43 2b10 	vmov	d0, r2, r3
 8006d32:	f013 fa69 	bl	801a208 <sin>
 8006d36:	ec51 0b10 	vmov	r0, r1, d0
 8006d3a:	a335      	add	r3, pc, #212	; (adr r3, 8006e10 <solarDeclination+0x1a8>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f7f9 fc7a 	bl	8000638 <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7f9 fabe 	bl	80002cc <__adddf3>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	461d      	mov	r5, r3
 8006d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d5c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d64:	ee17 0a90 	vmov	r0, s15
 8006d68:	f7f9 fc0e 	bl	8000588 <__aeabi_f2d>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	ec43 2b10 	vmov	d0, r2, r3
 8006d74:	f013 f9f4 	bl	801a160 <cos>
 8006d78:	ec51 0b10 	vmov	r0, r1, d0
 8006d7c:	a326      	add	r3, pc, #152	; (adr r3, 8006e18 <solarDeclination+0x1b0>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	f7f9 fc59 	bl	8000638 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fa9b 	bl	80002c8 <__aeabi_dsub>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006da6:	ee17 0a90 	vmov	r0, s15
 8006daa:	f7f9 fbed 	bl	8000588 <__aeabi_f2d>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	ec43 2b10 	vmov	d0, r2, r3
 8006db6:	f013 fa27 	bl	801a208 <sin>
 8006dba:	ec51 0b10 	vmov	r0, r1, d0
 8006dbe:	a318      	add	r3, pc, #96	; (adr r3, 8006e20 <solarDeclination+0x1b8>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fa7c 	bl	80002cc <__adddf3>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f7f9 ff24 	bl	8000c28 <__aeabi_d2f>
 8006de0:	4603      	mov	r3, r0
 8006de2:	ee07 3a90 	vmov	s15, r3
}
 8006de6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bdb0      	pop	{r4, r5, r7, pc}
 8006df0:	8051c9f7 	.word	0x8051c9f7
 8006df4:	3fd99828 	.word	0x3fd99828
 8006df8:	7c0f4517 	.word	0x7c0f4517
 8006dfc:	3f7c560c 	.word	0x3f7c560c
 8006e00:	dd50a88f 	.word	0xdd50a88f
 8006e04:	3fb1fc5c 	.word	0x3fb1fc5c
 8006e08:	cfc829d0 	.word	0xcfc829d0
 8006e0c:	3f7bae46 	.word	0x3f7bae46
 8006e10:	ab324852 	.word	0xab324852
 8006e14:	3f4db877 	.word	0x3f4db877
 8006e18:	d9839475 	.word	0xd9839475
 8006e1c:	3f661804 	.word	0x3f661804
 8006e20:	e646f156 	.word	0xe646f156
 8006e24:	3f583f91 	.word	0x3f583f91

08006e28 <timeOffset>:
// time offset [min]
float timeOffset(struct local_location *location, float fyear){
 8006e28:	b5b0      	push	{r4, r5, r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	ed87 0a00 	vstr	s0, [r7]
	return equationOfTime(fyear)+4*location->longitude-60*location->timezone;
 8006e34:	ed97 0a00 	vldr	s0, [r7]
 8006e38:	f7ff fe6e 	bl	8006b18 <equationOfTime>
 8006e3c:	ee10 3a10 	vmov	r3, s0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7f9 fba1 	bl	8000588 <__aeabi_f2d>
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	4b15      	ldr	r3, [pc, #84]	; (8006eac <timeOffset+0x84>)
 8006e56:	f7f9 fbef 	bl	8000638 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fa33 	bl	80002cc <__adddf3>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4614      	mov	r4, r2
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f993 3000 	ldrsb.w	r3, [r3]
 8006e74:	461a      	mov	r2, r3
 8006e76:	4613      	mov	r3, r2
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7f9 fb70 	bl	8000564 <__aeabi_i2d>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fa1c 	bl	80002c8 <__aeabi_dsub>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	f7f9 fec6 	bl	8000c28 <__aeabi_d2f>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	ee07 3a90 	vmov	s15, r3
}
 8006ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8006eac:	40100000 	.word	0x40100000

08006eb0 <trueSolarTime>:
// true solar time [min]
float trueSolarTime(struct tm *timeStr, float timeOffset){
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	ed87 0a00 	vstr	s0, [r7]
	return timeStr->tm_hour*60+timeStr->tm_min+(float)timeStr->tm_sec/60+timeOffset;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ee4:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006f08 <trueSolarTime+0x58>
 8006ee8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ef0:	edd7 7a00 	vldr	s15, [r7]
 8006ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	42700000 	.word	0x42700000
 8006f0c:	00000000 	.word	0x00000000

08006f10 <solarEventTime>:
//sunrise/sunset/noon times [min]
int solarEventTime(enum SOLAR_EVENT event,struct tm *timeStr, struct local_location *location, float cha){
 8006f10:	b5b0      	push	{r4, r5, r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	ed87 0a00 	vstr	s0, [r7]
 8006f20:	73fb      	strb	r3, [r7, #15]
	float fyear = fractionalYear(timeStr, location);
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	68b8      	ldr	r0, [r7, #8]
 8006f26:	f7ff fdbf 	bl	8006aa8 <fractionalYear>
 8006f2a:	ed87 0a05 	vstr	s0, [r7, #20]
	float eqTime = equationOfTime(fyear);
 8006f2e:	ed97 0a05 	vldr	s0, [r7, #20]
 8006f32:	f7ff fdf1 	bl	8006b18 <equationOfTime>
 8006f36:	ed87 0a04 	vstr	s0, [r7, #16]
	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	switch(event){
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	f000 8093 	beq.w	8007068 <solarEventTime+0x158>
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	f300 80e2 	bgt.w	800710c <solarEventTime+0x1fc>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <solarEventTime+0x42>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d052      	beq.n	8006ff6 <solarEventTime+0xe6>
 8006f50:	e0dc      	b.n	800710c <solarEventTime+0x1fc>
		case SOLAR_SUNRISE:
			return 720-4*(location->longitude+cha*180/M_PI)-eqTime+60*location->timezone;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006f58:	edd7 7a00 	vldr	s15, [r7]
 8006f5c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8007120 <solarEventTime+0x210>
 8006f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f64:	ee17 0a90 	vmov	r0, s15
 8006f68:	f7f9 fb0e 	bl	8000588 <__aeabi_f2d>
 8006f6c:	a36a      	add	r3, pc, #424	; (adr r3, 8007118 <solarEventTime+0x208>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fc8b 	bl	800088c <__aeabi_ddiv>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 f9a5 	bl	80002cc <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	4b65      	ldr	r3, [pc, #404]	; (8007124 <solarEventTime+0x214>)
 8006f90:	f7f9 fb52 	bl	8000638 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	f04f 0000 	mov.w	r0, #0
 8006f9c:	4962      	ldr	r1, [pc, #392]	; (8007128 <solarEventTime+0x218>)
 8006f9e:	f7f9 f993 	bl	80002c8 <__aeabi_dsub>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	461d      	mov	r5, r3
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f7f9 faec 	bl	8000588 <__aeabi_f2d>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 f986 	bl	80002c8 <__aeabi_dsub>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4613      	mov	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7f9 fac5 	bl	8000564 <__aeabi_i2d>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f973 	bl	80002cc <__adddf3>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	f7f9 fdd3 	bl	8000b98 <__aeabi_d2iz>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	e08a      	b.n	800710c <solarEventTime+0x1fc>
		case SOLAR_NOON:
			return 720-4*location->longitude-eqTime+60*location->timezone;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	4b48      	ldr	r3, [pc, #288]	; (8007124 <solarEventTime+0x214>)
 8007002:	f7f9 fb19 	bl	8000638 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	f04f 0000 	mov.w	r0, #0
 800700e:	4946      	ldr	r1, [pc, #280]	; (8007128 <solarEventTime+0x218>)
 8007010:	f7f9 f95a 	bl	80002c8 <__aeabi_dsub>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	6938      	ldr	r0, [r7, #16]
 800701e:	f7f9 fab3 	bl	8000588 <__aeabi_f2d>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 f94d 	bl	80002c8 <__aeabi_dsub>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4614      	mov	r4, r2
 8007034:	461d      	mov	r5, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f993 3000 	ldrsb.w	r3, [r3]
 800703c:	461a      	mov	r2, r3
 800703e:	4613      	mov	r3, r2
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4618      	mov	r0, r3
 8007048:	f7f9 fa8c 	bl	8000564 <__aeabi_i2d>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4620      	mov	r0, r4
 8007052:	4629      	mov	r1, r5
 8007054:	f7f9 f93a 	bl	80002cc <__adddf3>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4610      	mov	r0, r2
 800705e:	4619      	mov	r1, r3
 8007060:	f7f9 fd9a 	bl	8000b98 <__aeabi_d2iz>
 8007064:	4603      	mov	r3, r0
 8007066:	e051      	b.n	800710c <solarEventTime+0x1fc>
		case SOLAR_SUNSET:
			return 720-4*(location->longitude-cha*180/M_PI)-eqTime+60*location->timezone;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800706e:	edd7 7a00 	vldr	s15, [r7]
 8007072:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007120 <solarEventTime+0x210>
 8007076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800707a:	ee17 0a90 	vmov	r0, s15
 800707e:	f7f9 fa83 	bl	8000588 <__aeabi_f2d>
 8007082:	a325      	add	r3, pc, #148	; (adr r3, 8007118 <solarEventTime+0x208>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 fc00 	bl	800088c <__aeabi_ddiv>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4620      	mov	r0, r4
 8007092:	4629      	mov	r1, r5
 8007094:	f7f9 f918 	bl	80002c8 <__aeabi_dsub>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <solarEventTime+0x214>)
 80070a6:	f7f9 fac7 	bl	8000638 <__aeabi_dmul>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	f04f 0000 	mov.w	r0, #0
 80070b2:	491d      	ldr	r1, [pc, #116]	; (8007128 <solarEventTime+0x218>)
 80070b4:	f7f9 f908 	bl	80002c8 <__aeabi_dsub>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4614      	mov	r4, r2
 80070be:	461d      	mov	r5, r3
 80070c0:	6938      	ldr	r0, [r7, #16]
 80070c2:	f7f9 fa61 	bl	8000588 <__aeabi_f2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4620      	mov	r0, r4
 80070cc:	4629      	mov	r1, r5
 80070ce:	f7f9 f8fb 	bl	80002c8 <__aeabi_dsub>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4614      	mov	r4, r2
 80070d8:	461d      	mov	r5, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f993 3000 	ldrsb.w	r3, [r3]
 80070e0:	461a      	mov	r2, r3
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7f9 fa3a 	bl	8000564 <__aeabi_i2d>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4620      	mov	r0, r4
 80070f6:	4629      	mov	r1, r5
 80070f8:	f7f9 f8e8 	bl	80002cc <__adddf3>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	f7f9 fd48 	bl	8000b98 <__aeabi_d2iz>
 8007108:	4603      	mov	r3, r0
 800710a:	e7ff      	b.n	800710c <solarEventTime+0x1fc>
	}
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bdb0      	pop	{r4, r5, r7, pc}
 8007114:	f3af 8000 	nop.w
 8007118:	54442d18 	.word	0x54442d18
 800711c:	400921fb 	.word	0x400921fb
 8007120:	43340000 	.word	0x43340000
 8007124:	40100000 	.word	0x40100000
 8007128:	40868000 	.word	0x40868000
 800712c:	00000000 	.word	0x00000000

08007130 <calcSolarAngles>:

struct solarAngles{
	float za, sa;
};

void calcSolarAngles(struct solarAngles *output, struct tm *timeStr, struct local_location *location){
 8007130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007134:	b08c      	sub	sp, #48	; 0x30
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
	// fractional year = gamma [rad]
	float fyear = fractionalYear(timeStr, location);
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	68b8      	ldr	r0, [r7, #8]
 8007142:	f7ff fcb1 	bl	8006aa8 <fractionalYear>
 8007146:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 800714a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800714e:	f7ff fce3 	bl	8006b18 <equationOfTime>
 8007152:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 8007156:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800715a:	f7ff fd85 	bl	8006c68 <solarDeclination>
 800715e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	float time_off = timeOffset(location, fyear);
 8007162:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fe5e 	bl	8006e28 <timeOffset>
 800716c:	ed87 0a08 	vstr	s0, [r7, #32]
	float tst = trueSolarTime(timeStr, time_off);
 8007170:	ed97 0a08 	vldr	s0, [r7, #32]
 8007174:	68b8      	ldr	r0, [r7, #8]
 8007176:	f7ff fe9b 	bl	8006eb0 <trueSolarTime>
 800717a:	ed87 0a07 	vstr	s0, [r7, #28]
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 800717e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007182:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800718a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8007428 <calcSolarAngles+0x2f8>
 800718e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007192:	edc7 7a06 	vstr	s15, [r7, #24]
	// solar zenith angle = phi [rad]
	float cosphi = sin(location->latitude*M_PI/180)*sin(decl)+cos(location->latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800719c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007420 <calcSolarAngles+0x2f0>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 fa49 	bl	8000638 <__aeabi_dmul>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	4b9e      	ldr	r3, [pc, #632]	; (800742c <calcSolarAngles+0x2fc>)
 80071b4:	f7f9 fb6a 	bl	800088c <__aeabi_ddiv>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	ec43 2b17 	vmov	d7, r2, r3
 80071c0:	eeb0 0a47 	vmov.f32	s0, s14
 80071c4:	eef0 0a67 	vmov.f32	s1, s15
 80071c8:	f013 f81e 	bl	801a208 <sin>
 80071cc:	ec59 8b10 	vmov	r8, r9, d0
 80071d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d2:	f7f9 f9d9 	bl	8000588 <__aeabi_f2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	ec43 2b10 	vmov	d0, r2, r3
 80071de:	f013 f813 	bl	801a208 <sin>
 80071e2:	ec53 2b10 	vmov	r2, r3, d0
 80071e6:	4640      	mov	r0, r8
 80071e8:	4649      	mov	r1, r9
 80071ea:	f7f9 fa25 	bl	8000638 <__aeabi_dmul>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4690      	mov	r8, r2
 80071f4:	4699      	mov	r9, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80071fc:	a388      	add	r3, pc, #544	; (adr r3, 8007420 <calcSolarAngles+0x2f0>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 fa19 	bl	8000638 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4610      	mov	r0, r2
 800720c:	4619      	mov	r1, r3
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	4b86      	ldr	r3, [pc, #536]	; (800742c <calcSolarAngles+0x2fc>)
 8007214:	f7f9 fb3a 	bl	800088c <__aeabi_ddiv>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	ec43 2b17 	vmov	d7, r2, r3
 8007220:	eeb0 0a47 	vmov.f32	s0, s14
 8007224:	eef0 0a67 	vmov.f32	s1, s15
 8007228:	f012 ff9a 	bl	801a160 <cos>
 800722c:	ec5b ab10 	vmov	sl, fp, d0
 8007230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007232:	f7f9 f9a9 	bl	8000588 <__aeabi_f2d>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	ec43 2b10 	vmov	d0, r2, r3
 800723e:	f012 ff8f 	bl	801a160 <cos>
 8007242:	ec53 2b10 	vmov	r2, r3, d0
 8007246:	4650      	mov	r0, sl
 8007248:	4659      	mov	r1, fp
 800724a:	f7f9 f9f5 	bl	8000638 <__aeabi_dmul>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4692      	mov	sl, r2
 8007254:	469b      	mov	fp, r3
 8007256:	69b8      	ldr	r0, [r7, #24]
 8007258:	f7f9 f996 	bl	8000588 <__aeabi_f2d>
 800725c:	a370      	add	r3, pc, #448	; (adr r3, 8007420 <calcSolarAngles+0x2f0>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f9e9 	bl	8000638 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4610      	mov	r0, r2
 800726c:	4619      	mov	r1, r3
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	4b6e      	ldr	r3, [pc, #440]	; (800742c <calcSolarAngles+0x2fc>)
 8007274:	f7f9 fb0a 	bl	800088c <__aeabi_ddiv>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	ec43 2b17 	vmov	d7, r2, r3
 8007280:	eeb0 0a47 	vmov.f32	s0, s14
 8007284:	eef0 0a67 	vmov.f32	s1, s15
 8007288:	f012 ff6a 	bl	801a160 <cos>
 800728c:	ec53 2b10 	vmov	r2, r3, d0
 8007290:	4650      	mov	r0, sl
 8007292:	4659      	mov	r1, fp
 8007294:	f7f9 f9d0 	bl	8000638 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 f814 	bl	80002cc <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	f7f9 fcbc 	bl	8000c28 <__aeabi_d2f>
 80072b0:	4603      	mov	r3, r0
 80072b2:	617b      	str	r3, [r7, #20]
	output->za = acos(cosphi);
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f7f9 f967 	bl	8000588 <__aeabi_f2d>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	ec43 2b10 	vmov	d0, r2, r3
 80072c2:	f013 f82d 	bl	801a320 <acos>
 80072c6:	ec53 2b10 	vmov	r2, r3, d0
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7f9 fcab 	bl	8000c28 <__aeabi_d2f>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]
	float sinphi = sqrt(1-cosphi*cosphi);
 80072d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80072dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072e8:	ee17 0a90 	vmov	r0, s15
 80072ec:	f7f9 f94c 	bl	8000588 <__aeabi_f2d>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	ec43 2b10 	vmov	d0, r2, r3
 80072f8:	f013 f8b6 	bl	801a468 <sqrt>
 80072fc:	ec53 2b10 	vmov	r2, r3, d0
 8007300:	4610      	mov	r0, r2
 8007302:	4619      	mov	r1, r3
 8007304:	f7f9 fc90 	bl	8000c28 <__aeabi_d2f>
 8007308:	4603      	mov	r3, r0
 800730a:	613b      	str	r3, [r7, #16]
	// solar azimuth = theta [rad]
	output->sa = -acos(-(sin(location->latitude*M_PI/180)*cosphi-sin(decl))/(cos(location->latitude*M_PI/180)*sinphi));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007312:	a343      	add	r3, pc, #268	; (adr r3, 8007420 <calcSolarAngles+0x2f0>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f9 f98e 	bl	8000638 <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	4b40      	ldr	r3, [pc, #256]	; (800742c <calcSolarAngles+0x2fc>)
 800732a:	f7f9 faaf 	bl	800088c <__aeabi_ddiv>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	ec43 2b17 	vmov	d7, r2, r3
 8007336:	eeb0 0a47 	vmov.f32	s0, s14
 800733a:	eef0 0a67 	vmov.f32	s1, s15
 800733e:	f012 ff63 	bl	801a208 <sin>
 8007342:	ec59 8b10 	vmov	r8, r9, d0
 8007346:	6978      	ldr	r0, [r7, #20]
 8007348:	f7f9 f91e 	bl	8000588 <__aeabi_f2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f9 f970 	bl	8000638 <__aeabi_dmul>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4690      	mov	r8, r2
 800735e:	4699      	mov	r9, r3
 8007360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007362:	f7f9 f911 	bl	8000588 <__aeabi_f2d>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	ec43 2b10 	vmov	d0, r2, r3
 800736e:	f012 ff4b 	bl	801a208 <sin>
 8007372:	ec53 2b10 	vmov	r2, r3, d0
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f8 ffa5 	bl	80002c8 <__aeabi_dsub>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4614      	mov	r4, r2
 8007384:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800738e:	a324      	add	r3, pc, #144	; (adr r3, 8007420 <calcSolarAngles+0x2f0>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f9 f950 	bl	8000638 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	4b21      	ldr	r3, [pc, #132]	; (800742c <calcSolarAngles+0x2fc>)
 80073a6:	f7f9 fa71 	bl	800088c <__aeabi_ddiv>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	ec43 2b17 	vmov	d7, r2, r3
 80073b2:	eeb0 0a47 	vmov.f32	s0, s14
 80073b6:	eef0 0a67 	vmov.f32	s1, s15
 80073ba:	f012 fed1 	bl	801a160 <cos>
 80073be:	ec59 8b10 	vmov	r8, r9, d0
 80073c2:	6938      	ldr	r0, [r7, #16]
 80073c4:	f7f9 f8e0 	bl	8000588 <__aeabi_f2d>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f9 f932 	bl	8000638 <__aeabi_dmul>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f9 fa56 	bl	800088c <__aeabi_ddiv>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	ec43 2b17 	vmov	d7, r2, r3
 80073e8:	eeb0 0a47 	vmov.f32	s0, s14
 80073ec:	eef0 0a67 	vmov.f32	s1, s15
 80073f0:	f012 ff96 	bl	801a320 <acos>
 80073f4:	ec53 2b10 	vmov	r2, r3, d0
 80073f8:	4610      	mov	r0, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	f7f9 fc14 	bl	8000c28 <__aeabi_d2f>
 8007400:	4603      	mov	r3, r0
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef1 7a67 	vneg.f32	s15, s15
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007410:	bf00      	nop
 8007412:	3730      	adds	r7, #48	; 0x30
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	54442d18 	.word	0x54442d18
 8007424:	400921fb 	.word	0x400921fb
 8007428:	43340000 	.word	0x43340000
 800742c:	40668000 	.word	0x40668000

08007430 <localMain>:



void localMain(void){
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	b0c5      	sub	sp, #276	; 0x114
 8007436:	af08      	add	r7, sp, #32
	testTime.tm_hour = RtcTime.Hours;
 8007438:	4b3e      	ldr	r3, [pc, #248]	; (8007534 <localMain+0x104>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	4b3e      	ldr	r3, [pc, #248]	; (8007538 <localMain+0x108>)
 8007440:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8007442:	4b3c      	ldr	r3, [pc, #240]	; (8007534 <localMain+0x104>)
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	461a      	mov	r2, r3
 8007448:	4b3b      	ldr	r3, [pc, #236]	; (8007538 <localMain+0x108>)
 800744a:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <localMain+0x104>)
 800744e:	789b      	ldrb	r3, [r3, #2]
 8007450:	461a      	mov	r2, r3
 8007452:	4b39      	ldr	r3, [pc, #228]	; (8007538 <localMain+0x108>)
 8007454:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8007456:	4b39      	ldr	r3, [pc, #228]	; (800753c <localMain+0x10c>)
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	461a      	mov	r2, r3
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <localMain+0x108>)
 800745e:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8007460:	4b36      	ldr	r3, [pc, #216]	; (800753c <localMain+0x10c>)
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	3b01      	subs	r3, #1
 8007466:	4a34      	ldr	r2, [pc, #208]	; (8007538 <localMain+0x108>)
 8007468:	6113      	str	r3, [r2, #16]
	testTime.tm_year = RtcDate.Year+100;
 800746a:	4b34      	ldr	r3, [pc, #208]	; (800753c <localMain+0x10c>)
 800746c:	78db      	ldrb	r3, [r3, #3]
 800746e:	3364      	adds	r3, #100	; 0x64
 8007470:	4a31      	ldr	r2, [pc, #196]	; (8007538 <localMain+0x108>)
 8007472:	6153      	str	r3, [r2, #20]
	mktime(&testTime);
 8007474:	4830      	ldr	r0, [pc, #192]	; (8007538 <localMain+0x108>)
 8007476:	f00d fb23 	bl	8014ac0 <mktime>

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 800747a:	4b31      	ldr	r3, [pc, #196]	; (8007540 <localMain+0x110>)
 800747c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007480:	2b00      	cmp	r3, #0
 8007482:	d061      	beq.n	8007548 <localMain+0x118>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 8007484:	4b2e      	ldr	r3, [pc, #184]	; (8007540 <localMain+0x110>)
 8007486:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800748a:	4618      	mov	r0, r3
 800748c:	f7f9 f85a 	bl	8000544 <__aeabi_ui2d>
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <localMain+0x110>)
 8007496:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	4b29      	ldr	r3, [pc, #164]	; (8007544 <localMain+0x114>)
 80074a0:	f7f9 f9f4 	bl	800088c <__aeabi_ddiv>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4620      	mov	r0, r4
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7f8 ff0e 	bl	80002cc <__adddf3>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 80074b8:	4b21      	ldr	r3, [pc, #132]	; (8007540 <localMain+0x110>)
 80074ba:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80074be:	4618      	mov	r0, r3
 80074c0:	f7f9 f840 	bl	8000544 <__aeabi_ui2d>
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <localMain+0x110>)
 80074ca:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <localMain+0x114>)
 80074d4:	f7f9 f9da 	bl	800088c <__aeabi_ddiv>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f8 fef4 	bl	80002cc <__adddf3>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(location.n_s == 'S') longitude = longitude*(-1);
 80074ec:	4b14      	ldr	r3, [pc, #80]	; (8007540 <localMain+0x110>)
 80074ee:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80074f2:	2b53      	cmp	r3, #83	; 0x53
 80074f4:	d10b      	bne.n	800750e <localMain+0xde>
 80074f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007500:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	ed97 7b02 	vldr	d7, [r7, #8]
 800750a:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
		if(location.w_e == 'W') latitude = latitude*(-1);
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <localMain+0x110>)
 8007510:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8007514:	2b57      	cmp	r3, #87	; 0x57
 8007516:	d13f      	bne.n	8007598 <localMain+0x168>
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	603b      	str	r3, [r7, #0]
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	ed97 7b00 	vldr	d7, [r7]
 800752c:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
 8007530:	e032      	b.n	8007598 <localMain+0x168>
 8007532:	bf00      	nop
 8007534:	20005718 	.word	0x20005718
 8007538:	20005cfc 	.word	0x20005cfc
 800753c:	2000572c 	.word	0x2000572c
 8007540:	200055a0 	.word	0x200055a0
 8007544:	404e0000 	.word	0x404e0000
	} else {
		longitude = 17; 	// [deg]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	4be0      	ldr	r3, [pc, #896]	; (80078d0 <localMain+0x4a0>)
 800754e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		latitude = 51;	// [deg]
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	4bdf      	ldr	r3, [pc, #892]	; (80078d4 <localMain+0x4a4>)
 8007558:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
		if(longitude>=0) location.n_s = 'N';
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8007568:	f7f9 faec 	bl	8000b44 <__aeabi_dcmpge>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <localMain+0x14a>
 8007572:	4bd9      	ldr	r3, [pc, #868]	; (80078d8 <localMain+0x4a8>)
 8007574:	224e      	movs	r2, #78	; 0x4e
 8007576:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007586:	f7f9 fadd 	bl	8000b44 <__aeabi_dcmpge>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <localMain+0x168>
 8007590:	4bd1      	ldr	r3, [pc, #836]	; (80078d8 <localMain+0x4a8>)
 8007592:	2245      	movs	r2, #69	; 0x45
 8007594:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	struct local_location myLocation = {GLOBAL_timezone, longitude, latitude};
 8007598:	4bd0      	ldr	r3, [pc, #832]	; (80078dc <localMain+0x4ac>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	b25b      	sxtb	r3, r3
 800759e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80075a2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80075a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80075aa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80075ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	// fractional year = gamma [rad]
	float fyear = fractionalYear(&testTime, &myLocation);
 80075b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075b6:	4619      	mov	r1, r3
 80075b8:	48c9      	ldr	r0, [pc, #804]	; (80078e0 <localMain+0x4b0>)
 80075ba:	f7ff fa75 	bl	8006aa8 <fractionalYear>
 80075be:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
	// equation of time [min]
	float eqtime = equationOfTime(fyear);
 80075c2:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80075c6:	f7ff faa7 	bl	8006b18 <equationOfTime>
 80075ca:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
	// solar declination angle [rad]
	float decl = solarDeclination(fyear);
 80075ce:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80075d2:	f7ff fb49 	bl	8006c68 <solarDeclination>
 80075d6:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc

	float time_off = timeOffset(&myLocation, fyear);
 80075da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075de:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fc20 	bl	8006e28 <timeOffset>
 80075e8:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
	float tst = trueSolarTime(&testTime, time_off);
 80075ec:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 80075f0:	48bb      	ldr	r0, [pc, #748]	; (80078e0 <localMain+0x4b0>)
 80075f2:	f7ff fc5d 	bl	8006eb0 <trueSolarTime>
 80075f6:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80075fa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80075fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007606:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80078e4 <localMain+0x4b4>
 800760a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800760e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8007612:	a3ab      	add	r3, pc, #684	; (adr r3, 80078c0 <localMain+0x490>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800761c:	f7f9 f80c 	bl	8000638 <__aeabi_dmul>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	4bae      	ldr	r3, [pc, #696]	; (80078e8 <localMain+0x4b8>)
 800762e:	f7f9 f92d 	bl	800088c <__aeabi_ddiv>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	ec43 2b17 	vmov	d7, r2, r3
 800763a:	eeb0 0a47 	vmov.f32	s0, s14
 800763e:	eef0 0a67 	vmov.f32	s1, s15
 8007642:	f012 fde1 	bl	801a208 <sin>
 8007646:	ec55 4b10 	vmov	r4, r5, d0
 800764a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800764e:	f7f8 ff9b 	bl	8000588 <__aeabi_f2d>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	ec43 2b10 	vmov	d0, r2, r3
 800765a:	f012 fdd5 	bl	801a208 <sin>
 800765e:	ec53 2b10 	vmov	r2, r3, d0
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f7f8 ffe7 	bl	8000638 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4614      	mov	r4, r2
 8007670:	461d      	mov	r5, r3
 8007672:	a393      	add	r3, pc, #588	; (adr r3, 80078c0 <localMain+0x490>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800767c:	f7f8 ffdc 	bl	8000638 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	4b96      	ldr	r3, [pc, #600]	; (80078e8 <localMain+0x4b8>)
 800768e:	f7f9 f8fd 	bl	800088c <__aeabi_ddiv>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	ec43 2b17 	vmov	d7, r2, r3
 800769a:	eeb0 0a47 	vmov.f32	s0, s14
 800769e:	eef0 0a67 	vmov.f32	s1, s15
 80076a2:	f012 fd5d 	bl	801a160 <cos>
 80076a6:	ec5b ab10 	vmov	sl, fp, d0
 80076aa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80076ae:	f7f8 ff6b 	bl	8000588 <__aeabi_f2d>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	ec43 2b10 	vmov	d0, r2, r3
 80076ba:	f012 fd51 	bl	801a160 <cos>
 80076be:	ec53 2b10 	vmov	r2, r3, d0
 80076c2:	4650      	mov	r0, sl
 80076c4:	4659      	mov	r1, fp
 80076c6:	f7f8 ffb7 	bl	8000638 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4692      	mov	sl, r2
 80076d0:	469b      	mov	fp, r3
 80076d2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80076d6:	f7f8 ff57 	bl	8000588 <__aeabi_f2d>
 80076da:	a379      	add	r3, pc, #484	; (adr r3, 80078c0 <localMain+0x490>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 ffaa 	bl	8000638 <__aeabi_dmul>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	4b7d      	ldr	r3, [pc, #500]	; (80078e8 <localMain+0x4b8>)
 80076f2:	f7f9 f8cb 	bl	800088c <__aeabi_ddiv>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	ec43 2b17 	vmov	d7, r2, r3
 80076fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007702:	eef0 0a67 	vmov.f32	s1, s15
 8007706:	f012 fd2b 	bl	801a160 <cos>
 800770a:	ec53 2b10 	vmov	r2, r3, d0
 800770e:	4650      	mov	r0, sl
 8007710:	4659      	mov	r1, fp
 8007712:	f7f8 ff91 	bl	8000638 <__aeabi_dmul>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 fdd5 	bl	80002cc <__adddf3>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	f7f9 fa7d 	bl	8000c28 <__aeabi_d2f>
 800772e:	4603      	mov	r3, r0
 8007730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float phi = acos(cosphi);
 8007734:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8007738:	f7f8 ff26 	bl	8000588 <__aeabi_f2d>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	ec43 2b10 	vmov	d0, r2, r3
 8007744:	f012 fdec 	bl	801a320 <acos>
 8007748:	ec53 2b10 	vmov	r2, r3, d0
 800774c:	4610      	mov	r0, r2
 800774e:	4619      	mov	r1, r3
 8007750:	f7f9 fa6a 	bl	8000c28 <__aeabi_d2f>
 8007754:	4603      	mov	r3, r0
 8007756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float sinphi = sqrt(1-cosphi*cosphi);
 800775a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800775e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800776a:	ee17 0a90 	vmov	r0, s15
 800776e:	f7f8 ff0b 	bl	8000588 <__aeabi_f2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	ec43 2b10 	vmov	d0, r2, r3
 800777a:	f012 fe75 	bl	801a468 <sqrt>
 800777e:	ec53 2b10 	vmov	r2, r3, d0
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	f7f9 fa4f 	bl	8000c28 <__aeabi_d2f>
 800778a:	4603      	mov	r3, r0
 800778c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8007790:	a34b      	add	r3, pc, #300	; (adr r3, 80078c0 <localMain+0x490>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800779a:	f7f8 ff4d 	bl	8000638 <__aeabi_dmul>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4610      	mov	r0, r2
 80077a4:	4619      	mov	r1, r3
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	4b4f      	ldr	r3, [pc, #316]	; (80078e8 <localMain+0x4b8>)
 80077ac:	f7f9 f86e 	bl	800088c <__aeabi_ddiv>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	ec43 2b17 	vmov	d7, r2, r3
 80077b8:	eeb0 0a47 	vmov.f32	s0, s14
 80077bc:	eef0 0a67 	vmov.f32	s1, s15
 80077c0:	f012 fd22 	bl	801a208 <sin>
 80077c4:	ec55 4b10 	vmov	r4, r5, d0
 80077c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80077cc:	f7f8 fedc 	bl	8000588 <__aeabi_f2d>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f8 ff2e 	bl	8000638 <__aeabi_dmul>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	461d      	mov	r5, r3
 80077e4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80077e8:	f7f8 fece 	bl	8000588 <__aeabi_f2d>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	ec43 2b10 	vmov	d0, r2, r3
 80077f4:	f012 fd08 	bl	801a208 <sin>
 80077f8:	ec53 2b10 	vmov	r2, r3, d0
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fd62 	bl	80002c8 <__aeabi_dsub>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4690      	mov	r8, r2
 800780a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800780e:	a32c      	add	r3, pc, #176	; (adr r3, 80078c0 <localMain+0x490>)
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007818:	f7f8 ff0e 	bl	8000638 <__aeabi_dmul>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <localMain+0x4b8>)
 800782a:	f7f9 f82f 	bl	800088c <__aeabi_ddiv>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	ec43 2b17 	vmov	d7, r2, r3
 8007836:	eeb0 0a47 	vmov.f32	s0, s14
 800783a:	eef0 0a67 	vmov.f32	s1, s15
 800783e:	f012 fc8f 	bl	801a160 <cos>
 8007842:	ec55 4b10 	vmov	r4, r5, d0
 8007846:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800784a:	f7f8 fe9d 	bl	8000588 <__aeabi_f2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f9 f813 	bl	800088c <__aeabi_ddiv>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	ec43 2b17 	vmov	d7, r2, r3
 800786e:	eeb0 0a47 	vmov.f32	s0, s14
 8007872:	eef0 0a67 	vmov.f32	s1, s15
 8007876:	f012 fd53 	bl	801a320 <acos>
 800787a:	ec53 2b10 	vmov	r2, r3, d0
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	f7f9 f9d1 	bl	8000c28 <__aeabi_d2f>
 8007886:	4603      	mov	r3, r0
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef1 7a67 	vneg.f32	s15, s15
 8007890:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
//	calcSolarAngles(&angles, &testTime, &location);
//	float phi = angles.za;
//	float sa = angles.sa;

	// setting for sunrise/sunset zenith angle [rad]
	double zenith = (90+GEOMETRICAL_TWILIGHT_DEG)*M_PI/180;
 8007894:	a30c      	add	r3, pc, #48	; (adr r3, 80078c8 <localMain+0x498>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 800789e:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 80078a2:	f012 fc5d 	bl	801a160 <cos>
 80078a6:	ec55 4b10 	vmov	r4, r5, d0
 80078aa:	a305      	add	r3, pc, #20	; (adr r3, 80078c0 <localMain+0x490>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078b4:	f7f8 fec0 	bl	8000638 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4610      	mov	r0, r2
 80078be:	e015      	b.n	80078ec <localMain+0x4bc>
 80078c0:	54442d18 	.word	0x54442d18
 80078c4:	400921fb 	.word	0x400921fb
 80078c8:	2604e01b 	.word	0x2604e01b
 80078cc:	3ff95d88 	.word	0x3ff95d88
 80078d0:	40310000 	.word	0x40310000
 80078d4:	40498000 	.word	0x40498000
 80078d8:	200055a0 	.word	0x200055a0
 80078dc:	20000060 	.word	0x20000060
 80078e0:	20005cfc 	.word	0x20005cfc
 80078e4:	43340000 	.word	0x43340000
 80078e8:	40668000 	.word	0x40668000
 80078ec:	4619      	mov	r1, r3
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	4b79      	ldr	r3, [pc, #484]	; (8007ad8 <localMain+0x6a8>)
 80078f4:	f7f8 ffca 	bl	800088c <__aeabi_ddiv>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	ec43 2b17 	vmov	d7, r2, r3
 8007900:	eeb0 0a47 	vmov.f32	s0, s14
 8007904:	eef0 0a67 	vmov.f32	s1, s15
 8007908:	f012 fc2a 	bl	801a160 <cos>
 800790c:	ec59 8b10 	vmov	r8, r9, d0
 8007910:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007914:	f7f8 fe38 	bl	8000588 <__aeabi_f2d>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	ec43 2b10 	vmov	d0, r2, r3
 8007920:	f012 fc1e 	bl	801a160 <cos>
 8007924:	ec53 2b10 	vmov	r2, r3, d0
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 ffa8 	bl	800088c <__aeabi_ddiv>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4614      	mov	r4, r2
 8007942:	461d      	mov	r5, r3
 8007944:	a362      	add	r3, pc, #392	; (adr r3, 8007ad0 <localMain+0x6a0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800794e:	f7f8 fe73 	bl	8000638 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4610      	mov	r0, r2
 8007958:	4619      	mov	r1, r3
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	4b5e      	ldr	r3, [pc, #376]	; (8007ad8 <localMain+0x6a8>)
 8007960:	f7f8 ff94 	bl	800088c <__aeabi_ddiv>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	ec43 2b17 	vmov	d7, r2, r3
 800796c:	eeb0 0a47 	vmov.f32	s0, s14
 8007970:	eef0 0a67 	vmov.f32	s1, s15
 8007974:	f012 fca0 	bl	801a2b8 <tan>
 8007978:	ec59 8b10 	vmov	r8, r9, d0
 800797c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007980:	f7f8 fe02 	bl	8000588 <__aeabi_f2d>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	ec43 2b10 	vmov	d0, r2, r3
 800798c:	f012 fc94 	bl	801a2b8 <tan>
 8007990:	ec53 2b10 	vmov	r2, r3, d0
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f8 fe4e 	bl	8000638 <__aeabi_dmul>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4620      	mov	r0, r4
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f8 fc90 	bl	80002c8 <__aeabi_dsub>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	ec43 2b17 	vmov	d7, r2, r3
 80079b0:	eeb0 0a47 	vmov.f32	s0, s14
 80079b4:	eef0 0a67 	vmov.f32	s1, s15
 80079b8:	f012 fcb2 	bl	801a320 <acos>
 80079bc:	ec53 2b10 	vmov	r2, r3, d0
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f7f9 f930 	bl	8000c28 <__aeabi_d2f>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 80079ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079d2:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80079d6:	461a      	mov	r2, r3
 80079d8:	4940      	ldr	r1, [pc, #256]	; (8007adc <localMain+0x6ac>)
 80079da:	2000      	movs	r0, #0
 80079dc:	f7ff fa98 	bl	8006f10 <solarEventTime>
 80079e0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	int sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80079e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079e8:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80079ec:	461a      	mov	r2, r3
 80079ee:	493b      	ldr	r1, [pc, #236]	; (8007adc <localMain+0x6ac>)
 80079f0:	2002      	movs	r0, #2
 80079f2:	f7ff fa8d 	bl	8006f10 <solarEventTime>
 80079f6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	int noon = solarEventTime(SOLAR_NOON, &testTime, &myLocation, cha);
 80079fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079fe:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8007a02:	461a      	mov	r2, r3
 8007a04:	4935      	ldr	r1, [pc, #212]	; (8007adc <localMain+0x6ac>)
 8007a06:	2001      	movs	r0, #1
 8007a08:	f7ff fa82 	bl	8006f10 <solarEventTime>
 8007a0c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	struct sunEventsTimes suntimes = {sunrise, sunset, noon};
 8007a10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a14:	647b      	str	r3, [r7, #68]	; 0x44
 8007a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a20:	64fb      	str	r3, [r7, #76]	; 0x4c


	double saDeg;
	if(sha>180) saDeg = -sa*180/M_PI;
 8007a22:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007a26:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007ae0 <localMain+0x6b0>
 8007a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	dd15      	ble.n	8007a60 <localMain+0x630>
 8007a34:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007a38:	eef1 7a67 	vneg.f32	s15, s15
 8007a3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007ae0 <localMain+0x6b0>
 8007a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a44:	ee17 0a90 	vmov	r0, s15
 8007a48:	f7f8 fd9e 	bl	8000588 <__aeabi_f2d>
 8007a4c:	a320      	add	r3, pc, #128	; (adr r3, 8007ad0 <localMain+0x6a0>)
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f7f8 ff1b 	bl	800088c <__aeabi_ddiv>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8007a5e:	e01b      	b.n	8007a98 <localMain+0x668>
	else saDeg = 360+sa*180/M_PI;
 8007a60:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007a64:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007ae0 <localMain+0x6b0>
 8007a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a6c:	ee17 0a90 	vmov	r0, s15
 8007a70:	f7f8 fd8a 	bl	8000588 <__aeabi_f2d>
 8007a74:	a316      	add	r3, pc, #88	; (adr r3, 8007ad0 <localMain+0x6a0>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 ff07 	bl	800088c <__aeabi_ddiv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <localMain+0x6b4>)
 8007a8c:	f7f8 fc1e 	bl	80002cc <__adddf3>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

	char textBuffer[50] = {0};
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	222e      	movs	r2, #46	; 0x2e
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f00c ff2b 	bl	8014900 <memset>

	switch(localModuleNum){
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <localMain+0x6b8>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	f200 86ab 	bhi.w	800880a <localMain+0x13da>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <localMain+0x68c>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007aed 	.word	0x08007aed
 8007ac0:	08007cd5 	.word	0x08007cd5
 8007ac4:	0800855d 	.word	0x0800855d
 8007ac8:	080086d5 	.word	0x080086d5
 8007acc:	08008729 	.word	0x08008729
 8007ad0:	54442d18 	.word	0x54442d18
 8007ad4:	400921fb 	.word	0x400921fb
 8007ad8:	40668000 	.word	0x40668000
 8007adc:	20005cfc 	.word	0x20005cfc
 8007ae0:	43340000 	.word	0x43340000
 8007ae4:	40768000 	.word	0x40768000
 8007ae8:	20005d20 	.word	0x20005d20
	case 0:{
		uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8007aec:	4b6e      	ldr	r3, [pc, #440]	; (8007ca8 <localMain+0x878>)
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	1d9a      	adds	r2, r3, #6
 8007af2:	4b6e      	ldr	r3, [pc, #440]	; (8007cac <localMain+0x87c>)
 8007af4:	fb83 1302 	smull	r1, r3, r3, r2
 8007af8:	4413      	add	r3, r2
 8007afa:	1099      	asrs	r1, r3, #2
 8007afc:	17d3      	asrs	r3, r2, #31
 8007afe:	1ac9      	subs	r1, r1, r3
 8007b00:	460b      	mov	r3, r1
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	1a5b      	subs	r3, r3, r1
 8007b06:	1ad1      	subs	r1, r2, r3
 8007b08:	b2cb      	uxtb	r3, r1
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8007b10:	4b65      	ldr	r3, [pc, #404]	; (8007ca8 <localMain+0x878>)
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f103 0208 	add.w	r2, r3, #8
 8007b18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	4a63      	ldr	r2, [pc, #396]	; (8007cac <localMain+0x87c>)
 8007b20:	fb82 1203 	smull	r1, r2, r2, r3
 8007b24:	441a      	add	r2, r3
 8007b26:	1092      	asrs	r2, r2, #2
 8007b28:	17db      	asrs	r3, r3, #31
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		sprintf(&textBuffer, "%s week %d day %d", asctime(&testTime), weekOfTheYear, testTime.tm_yday+1);
 8007b30:	485d      	ldr	r0, [pc, #372]	; (8007ca8 <localMain+0x878>)
 8007b32:	f00c fe1d 	bl	8014770 <asctime>
 8007b36:	4601      	mov	r1, r0
 8007b38:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8007b3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ca8 <localMain+0x878>)
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	f107 0010 	add.w	r0, r7, #16
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	460a      	mov	r2, r1
 8007b4c:	4958      	ldr	r1, [pc, #352]	; (8007cb0 <localMain+0x880>)
 8007b4e:	f00e f805 	bl	8015b5c <siprintf>
		lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8007b52:	f107 0210 	add.w	r2, r7, #16
 8007b56:	4b57      	ldr	r3, [pc, #348]	; (8007cb4 <localMain+0x884>)
 8007b58:	210a      	movs	r1, #10
 8007b5a:	200a      	movs	r0, #10
 8007b5c:	f7fb fb44 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", 90-phi*180/M_PI);
 8007b60:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007b64:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8007cb8 <localMain+0x888>
 8007b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b6c:	ee17 0a90 	vmov	r0, s15
 8007b70:	f7f8 fd0a 	bl	8000588 <__aeabi_f2d>
 8007b74:	a34a      	add	r3, pc, #296	; (adr r3, 8007ca0 <localMain+0x870>)
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f7f8 fe87 	bl	800088c <__aeabi_ddiv>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	494d      	ldr	r1, [pc, #308]	; (8007cbc <localMain+0x88c>)
 8007b88:	f7f8 fb9e 	bl	80002c8 <__aeabi_dsub>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	f107 0010 	add.w	r0, r7, #16
 8007b94:	494a      	ldr	r1, [pc, #296]	; (8007cc0 <localMain+0x890>)
 8007b96:	f00d ffe1 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 66, textBuffer, zekton45font);
 8007b9a:	2322      	movs	r3, #34	; 0x22
 8007b9c:	b29c      	uxth	r4, r3
 8007b9e:	f107 0310 	add.w	r3, r7, #16
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7f8 fb2e 	bl	8000204 <strlen>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	3301      	adds	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	fb14 f303 	smulbb	r3, r4, r3
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8007bb8:	b298      	uxth	r0, r3
 8007bba:	f107 0210 	add.w	r2, r7, #16
 8007bbe:	4b41      	ldr	r3, [pc, #260]	; (8007cc4 <localMain+0x894>)
 8007bc0:	2142      	movs	r1, #66	; 0x42
 8007bc2:	f7fb fb11 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02.3f`", saDeg);
 8007bc6:	f107 0010 	add.w	r0, r7, #16
 8007bca:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007bce:	493c      	ldr	r1, [pc, #240]	; (8007cc0 <localMain+0x890>)
 8007bd0:	f00d ffc4 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 115, textBuffer, zekton45font);
 8007bd4:	2322      	movs	r3, #34	; 0x22
 8007bd6:	b29c      	uxth	r4, r3
 8007bd8:	f107 0310 	add.w	r3, r7, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7f8 fb11 	bl	8000204 <strlen>
 8007be2:	4603      	mov	r3, r0
 8007be4:	3301      	adds	r3, #1
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	fb14 f303 	smulbb	r3, r4, r3
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8007bf2:	b298      	uxth	r0, r3
 8007bf4:	f107 0210 	add.w	r2, r7, #16
 8007bf8:	4b32      	ldr	r3, [pc, #200]	; (8007cc4 <localMain+0x894>)
 8007bfa:	2173      	movs	r1, #115	; 0x73
 8007bfc:	f7fb faf4 	bl	80031e8 <lcdPutStr>

		sprintf(&textBuffer, "%c%.3f %c%.3f, day length:%02dh %02dmin", location.n_s, latitude, location.w_e, longitude, (sunset-sunrise)/60, (sunset-sunrise)%60);
 8007c00:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <localMain+0x898>)
 8007c02:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8007c06:	461e      	mov	r6, r3
 8007c08:	4b2f      	ldr	r3, [pc, #188]	; (8007cc8 <localMain+0x898>)
 8007c0a:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8007c0e:	461d      	mov	r5, r3
 8007c10:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <localMain+0x89c>)
 8007c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8007c20:	441a      	add	r2, r3
 8007c22:	1152      	asrs	r2, r2, #5
 8007c24:	17db      	asrs	r3, r3, #31
 8007c26:	1ad0      	subs	r0, r2, r3
 8007c28:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007c2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <localMain+0x89c>)
 8007c34:	fb83 1302 	smull	r1, r3, r3, r2
 8007c38:	4413      	add	r3, r2
 8007c3a:	1159      	asrs	r1, r3, #5
 8007c3c:	17d3      	asrs	r3, r2, #31
 8007c3e:	1ac9      	subs	r1, r1, r3
 8007c40:	460b      	mov	r3, r1
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	1a5b      	subs	r3, r3, r1
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	1ad1      	subs	r1, r2, r3
 8007c4a:	f107 0410 	add.w	r4, r7, #16
 8007c4e:	9107      	str	r1, [sp, #28]
 8007c50:	9006      	str	r0, [sp, #24]
 8007c52:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8007c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c5a:	9502      	str	r5, [sp, #8]
 8007c5c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007c60:	e9cd 2300 	strd	r2, r3, [sp]
 8007c64:	4632      	mov	r2, r6
 8007c66:	491a      	ldr	r1, [pc, #104]	; (8007cd0 <localMain+0x8a0>)
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f00d ff77 	bl	8015b5c <siprintf>
		lcdPutStr(10, 25, textBuffer, font_12_zekton);
 8007c6e:	f107 0210 	add.w	r2, r7, #16
 8007c72:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <localMain+0x884>)
 8007c74:	2119      	movs	r1, #25
 8007c76:	200a      	movs	r0, #10
 8007c78:	f7fb fab6 	bl	80031e8 <lcdPutStr>

		drawSunlightGraph(200, 10, 399-10, 50, &suntimes, &myLocation);
 8007c7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2332      	movs	r3, #50	; 0x32
 8007c8a:	f240 1285 	movw	r2, #389	; 0x185
 8007c8e:	210a      	movs	r1, #10
 8007c90:	20c8      	movs	r0, #200	; 0xc8
 8007c92:	f000 fdc9 	bl	8008828 <drawSunlightGraph>
		break;
 8007c96:	f000 bdb8 	b.w	800880a <localMain+0x13da>
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	54442d18 	.word	0x54442d18
 8007ca4:	400921fb 	.word	0x400921fb
 8007ca8:	20005cfc 	.word	0x20005cfc
 8007cac:	92492493 	.word	0x92492493
 8007cb0:	0801d4c0 	.word	0x0801d4c0
 8007cb4:	08037314 	.word	0x08037314
 8007cb8:	43340000 	.word	0x43340000
 8007cbc:	40568000 	.word	0x40568000
 8007cc0:	0801d4d4 	.word	0x0801d4d4
 8007cc4:	0803a68c 	.word	0x0803a68c
 8007cc8:	200055a0 	.word	0x200055a0
 8007ccc:	88888889 	.word	0x88888889
 8007cd0:	0801d4dc 	.word	0x0801d4dc
		}
	case 1:
		sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8007cd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd8:	4ae1      	ldr	r2, [pc, #900]	; (8008060 <localMain+0xc30>)
 8007cda:	fb82 1203 	smull	r1, r2, r2, r3
 8007cde:	441a      	add	r2, r3
 8007ce0:	1152      	asrs	r2, r2, #5
 8007ce2:	17db      	asrs	r3, r3, #31
 8007ce4:	1ad4      	subs	r4, r2, r3
 8007ce6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007cea:	4bdd      	ldr	r3, [pc, #884]	; (8008060 <localMain+0xc30>)
 8007cec:	fb83 1302 	smull	r1, r3, r3, r2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	1159      	asrs	r1, r3, #5
 8007cf4:	17d3      	asrs	r3, r2, #31
 8007cf6:	1ac9      	subs	r1, r1, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	1a5b      	subs	r3, r3, r1
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	1ad1      	subs	r1, r2, r3
 8007d02:	f107 0010 	add.w	r0, r7, #16
 8007d06:	460b      	mov	r3, r1
 8007d08:	4622      	mov	r2, r4
 8007d0a:	49d6      	ldr	r1, [pc, #856]	; (8008064 <localMain+0xc34>)
 8007d0c:	f00d ff26 	bl	8015b5c <siprintf>
		lcdPutStr(10, 10, textBuffer, zekton24font);
 8007d10:	f107 0210 	add.w	r2, r7, #16
 8007d14:	4bd4      	ldr	r3, [pc, #848]	; (8008068 <localMain+0xc38>)
 8007d16:	210a      	movs	r1, #10
 8007d18:	200a      	movs	r0, #10
 8007d1a:	f7fb fa65 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "SUNRISE");
 8007d1e:	f107 0310 	add.w	r3, r7, #16
 8007d22:	49d2      	ldr	r1, [pc, #840]	; (800806c <localMain+0xc3c>)
 8007d24:	4618      	mov	r0, r3
 8007d26:	f00d ff19 	bl	8015b5c <siprintf>
		lcdPutStr(10, 35, textBuffer, font_12_zekton);
 8007d2a:	f107 0210 	add.w	r2, r7, #16
 8007d2e:	4bd0      	ldr	r3, [pc, #832]	; (8008070 <localMain+0xc40>)
 8007d30:	2123      	movs	r1, #35	; 0x23
 8007d32:	200a      	movs	r0, #10
 8007d34:	f7fb fa58 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8007d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d3c:	4ac8      	ldr	r2, [pc, #800]	; (8008060 <localMain+0xc30>)
 8007d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	1152      	asrs	r2, r2, #5
 8007d46:	17db      	asrs	r3, r3, #31
 8007d48:	1ad4      	subs	r4, r2, r3
 8007d4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007d4e:	4bc4      	ldr	r3, [pc, #784]	; (8008060 <localMain+0xc30>)
 8007d50:	fb83 1302 	smull	r1, r3, r3, r2
 8007d54:	4413      	add	r3, r2
 8007d56:	1159      	asrs	r1, r3, #5
 8007d58:	17d3      	asrs	r3, r2, #31
 8007d5a:	1ac9      	subs	r1, r1, r3
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	1a5b      	subs	r3, r3, r1
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	1ad1      	subs	r1, r2, r3
 8007d66:	f107 0010 	add.w	r0, r7, #16
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	49bd      	ldr	r1, [pc, #756]	; (8008064 <localMain+0xc34>)
 8007d70:	f00d fef4 	bl	8015b5c <siprintf>
		lcdPutStr(200-(*(zekton24font.font_Width)*(strlen(textBuffer)))/2, 10, textBuffer, zekton24font);
 8007d74:	2314      	movs	r3, #20
 8007d76:	461c      	mov	r4, r3
 8007d78:	f107 0310 	add.w	r3, r7, #16
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7f8 fa41 	bl	8000204 <strlen>
 8007d82:	4603      	mov	r3, r0
 8007d84:	fb04 f303 	mul.w	r3, r4, r3
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007d90:	b298      	uxth	r0, r3
 8007d92:	f107 0210 	add.w	r2, r7, #16
 8007d96:	4bb4      	ldr	r3, [pc, #720]	; (8008068 <localMain+0xc38>)
 8007d98:	210a      	movs	r1, #10
 8007d9a:	f7fb fa25 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "NOON");
 8007d9e:	f107 0310 	add.w	r3, r7, #16
 8007da2:	49b4      	ldr	r1, [pc, #720]	; (8008074 <localMain+0xc44>)
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00d fed9 	bl	8015b5c <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 35, textBuffer, font_12_zekton);
 8007daa:	2309      	movs	r3, #9
 8007dac:	461c      	mov	r4, r3
 8007dae:	f107 0310 	add.w	r3, r7, #16
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7f8 fa26 	bl	8000204 <strlen>
 8007db8:	4603      	mov	r3, r0
 8007dba:	fb04 f303 	mul.w	r3, r4, r3
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007dc6:	b298      	uxth	r0, r3
 8007dc8:	f107 0210 	add.w	r2, r7, #16
 8007dcc:	4ba8      	ldr	r3, [pc, #672]	; (8008070 <localMain+0xc40>)
 8007dce:	2123      	movs	r1, #35	; 0x23
 8007dd0:	f7fb fa0a 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8007dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dd8:	4aa1      	ldr	r2, [pc, #644]	; (8008060 <localMain+0xc30>)
 8007dda:	fb82 1203 	smull	r1, r2, r2, r3
 8007dde:	441a      	add	r2, r3
 8007de0:	1152      	asrs	r2, r2, #5
 8007de2:	17db      	asrs	r3, r3, #31
 8007de4:	1ad4      	subs	r4, r2, r3
 8007de6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007dea:	4b9d      	ldr	r3, [pc, #628]	; (8008060 <localMain+0xc30>)
 8007dec:	fb83 1302 	smull	r1, r3, r3, r2
 8007df0:	4413      	add	r3, r2
 8007df2:	1159      	asrs	r1, r3, #5
 8007df4:	17d3      	asrs	r3, r2, #31
 8007df6:	1ac9      	subs	r1, r1, r3
 8007df8:	460b      	mov	r3, r1
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	1a5b      	subs	r3, r3, r1
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	1ad1      	subs	r1, r2, r3
 8007e02:	f107 0010 	add.w	r0, r7, #16
 8007e06:	460b      	mov	r3, r1
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4996      	ldr	r1, [pc, #600]	; (8008064 <localMain+0xc34>)
 8007e0c:	f00d fea6 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 10, textBuffer, zekton24font);
 8007e10:	2314      	movs	r3, #20
 8007e12:	b29c      	uxth	r4, r3
 8007e14:	f107 0310 	add.w	r3, r7, #16
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7f8 f9f3 	bl	8000204 <strlen>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	fb14 f303 	smulbb	r3, r4, r3
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007e2c:	b298      	uxth	r0, r3
 8007e2e:	f107 0210 	add.w	r2, r7, #16
 8007e32:	4b8d      	ldr	r3, [pc, #564]	; (8008068 <localMain+0xc38>)
 8007e34:	210a      	movs	r1, #10
 8007e36:	f7fb f9d7 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "SUNSET");
 8007e3a:	f107 0310 	add.w	r3, r7, #16
 8007e3e:	498e      	ldr	r1, [pc, #568]	; (8008078 <localMain+0xc48>)
 8007e40:	4618      	mov	r0, r3
 8007e42:	f00d fe8b 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 8007e46:	2309      	movs	r3, #9
 8007e48:	b29c      	uxth	r4, r3
 8007e4a:	f107 0310 	add.w	r3, r7, #16
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7f8 f9d8 	bl	8000204 <strlen>
 8007e54:	4603      	mov	r3, r0
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	fb14 f303 	smulbb	r3, r4, r3
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8007e62:	b298      	uxth	r0, r3
 8007e64:	f107 0210 	add.w	r2, r7, #16
 8007e68:	4b81      	ldr	r3, [pc, #516]	; (8008070 <localMain+0xc40>)
 8007e6a:	2123      	movs	r1, #35	; 0x23
 8007e6c:	f7fb f9bc 	bl	80031e8 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		double zenith = (90+CIVIL_TWILIGHT_DEG)*M_PI/180;
 8007e70:	a377      	add	r3, pc, #476	; (adr r3, 8008050 <localMain+0xc20>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8007e7a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8007e7e:	f012 f96f 	bl	801a160 <cos>
 8007e82:	ec55 4b10 	vmov	r4, r5, d0
 8007e86:	a374      	add	r3, pc, #464	; (adr r3, 8008058 <localMain+0xc28>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e90:	f7f8 fbd2 	bl	8000638 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	4b76      	ldr	r3, [pc, #472]	; (800807c <localMain+0xc4c>)
 8007ea2:	f7f8 fcf3 	bl	800088c <__aeabi_ddiv>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	ec43 2b17 	vmov	d7, r2, r3
 8007eae:	eeb0 0a47 	vmov.f32	s0, s14
 8007eb2:	eef0 0a67 	vmov.f32	s1, s15
 8007eb6:	f012 f953 	bl	801a160 <cos>
 8007eba:	ec59 8b10 	vmov	r8, r9, d0
 8007ebe:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007ec2:	f7f8 fb61 	bl	8000588 <__aeabi_f2d>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	ec43 2b10 	vmov	d0, r2, r3
 8007ece:	f012 f947 	bl	801a160 <cos>
 8007ed2:	ec53 2b10 	vmov	r2, r3, d0
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 fbad 	bl	8000638 <__aeabi_dmul>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7f8 fcd1 	bl	800088c <__aeabi_ddiv>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461d      	mov	r5, r3
 8007ef2:	a359      	add	r3, pc, #356	; (adr r3, 8008058 <localMain+0xc28>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007efc:	f7f8 fb9c 	bl	8000638 <__aeabi_dmul>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4610      	mov	r0, r2
 8007f06:	4619      	mov	r1, r3
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	4b5b      	ldr	r3, [pc, #364]	; (800807c <localMain+0xc4c>)
 8007f0e:	f7f8 fcbd 	bl	800088c <__aeabi_ddiv>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	ec43 2b17 	vmov	d7, r2, r3
 8007f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8007f1e:	eef0 0a67 	vmov.f32	s1, s15
 8007f22:	f012 f9c9 	bl	801a2b8 <tan>
 8007f26:	ec59 8b10 	vmov	r8, r9, d0
 8007f2a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007f2e:	f7f8 fb2b 	bl	8000588 <__aeabi_f2d>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	ec43 2b10 	vmov	d0, r2, r3
 8007f3a:	f012 f9bd 	bl	801a2b8 <tan>
 8007f3e:	ec53 2b10 	vmov	r2, r3, d0
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 fb77 	bl	8000638 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 f9b9 	bl	80002c8 <__aeabi_dsub>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	ec43 2b17 	vmov	d7, r2, r3
 8007f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8007f62:	eef0 0a67 	vmov.f32	s1, s15
 8007f66:	f012 f9db 	bl	801a320 <acos>
 8007f6a:	ec53 2b10 	vmov	r2, r3, d0
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4619      	mov	r1, r3
 8007f72:	f7f8 fe59 	bl	8000c28 <__aeabi_d2f>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int civil_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 8007f7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f80:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007f84:	461a      	mov	r2, r3
 8007f86:	493e      	ldr	r1, [pc, #248]	; (8008080 <localMain+0xc50>)
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f7fe ffc1 	bl	8006f10 <solarEventTime>
 8007f8e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		int civil_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 8007f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f96:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4938      	ldr	r1, [pc, #224]	; (8008080 <localMain+0xc50>)
 8007f9e:	2002      	movs	r0, #2
 8007fa0:	f7fe ffb6 	bl	8006f10 <solarEventTime>
 8007fa4:	67f8      	str	r0, [r7, #124]	; 0x7c
		sprintf(&textBuffer, "CIVIL");
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	4936      	ldr	r1, [pc, #216]	; (8008084 <localMain+0xc54>)
 8007fac:	4618      	mov	r0, r3
 8007fae:	f00d fdd5 	bl	8015b5c <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 80, textBuffer, font_12_zekton);
 8007fb2:	2309      	movs	r3, #9
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	f107 0310 	add.w	r3, r7, #16
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7f8 f922 	bl	8000204 <strlen>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	fb04 f303 	mul.w	r3, r4, r3
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8007fce:	b298      	uxth	r0, r3
 8007fd0:	f107 0210 	add.w	r2, r7, #16
 8007fd4:	4b26      	ldr	r3, [pc, #152]	; (8008070 <localMain+0xc40>)
 8007fd6:	2150      	movs	r1, #80	; 0x50
 8007fd8:	f7fb f906 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunrise/60, civil_sunrise%60);
 8007fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fe0:	4a1f      	ldr	r2, [pc, #124]	; (8008060 <localMain+0xc30>)
 8007fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8007fe6:	441a      	add	r2, r3
 8007fe8:	1152      	asrs	r2, r2, #5
 8007fea:	17db      	asrs	r3, r3, #31
 8007fec:	1ad4      	subs	r4, r2, r3
 8007fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <localMain+0xc30>)
 8007ff4:	fb83 1302 	smull	r1, r3, r3, r2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	1159      	asrs	r1, r3, #5
 8007ffc:	17d3      	asrs	r3, r2, #31
 8007ffe:	1ac9      	subs	r1, r1, r3
 8008000:	460b      	mov	r3, r1
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	1a5b      	subs	r3, r3, r1
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	1ad1      	subs	r1, r2, r3
 800800a:	f107 0010 	add.w	r0, r7, #16
 800800e:	460b      	mov	r3, r1
 8008010:	4622      	mov	r2, r4
 8008012:	4914      	ldr	r1, [pc, #80]	; (8008064 <localMain+0xc34>)
 8008014:	f00d fda2 	bl	8015b5c <siprintf>
		lcdPutStr(10, 80, textBuffer, zekton24font);
 8008018:	f107 0210 	add.w	r2, r7, #16
 800801c:	4b12      	ldr	r3, [pc, #72]	; (8008068 <localMain+0xc38>)
 800801e:	2150      	movs	r1, #80	; 0x50
 8008020:	200a      	movs	r0, #10
 8008022:	f7fb f8e1 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", civil_sunset/60, civil_sunset%60);
 8008026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008028:	4a0d      	ldr	r2, [pc, #52]	; (8008060 <localMain+0xc30>)
 800802a:	fb82 1203 	smull	r1, r2, r2, r3
 800802e:	441a      	add	r2, r3
 8008030:	1152      	asrs	r2, r2, #5
 8008032:	17db      	asrs	r3, r3, #31
 8008034:	1ad4      	subs	r4, r2, r3
 8008036:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008038:	4b09      	ldr	r3, [pc, #36]	; (8008060 <localMain+0xc30>)
 800803a:	fb83 1302 	smull	r1, r3, r3, r2
 800803e:	4413      	add	r3, r2
 8008040:	1159      	asrs	r1, r3, #5
 8008042:	17d3      	asrs	r3, r2, #31
 8008044:	1ac9      	subs	r1, r1, r3
 8008046:	460b      	mov	r3, r1
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	e01d      	b.n	8008088 <localMain+0xc58>
 800804c:	f3af 8000 	nop.w
 8008050:	f37bebd5 	.word	0xf37bebd5
 8008054:	3ffacee9 	.word	0x3ffacee9
 8008058:	54442d18 	.word	0x54442d18
 800805c:	400921fb 	.word	0x400921fb
 8008060:	88888889 	.word	0x88888889
 8008064:	0801d504 	.word	0x0801d504
 8008068:	08038824 	.word	0x08038824
 800806c:	0801d510 	.word	0x0801d510
 8008070:	08037314 	.word	0x08037314
 8008074:	0801d518 	.word	0x0801d518
 8008078:	0801d520 	.word	0x0801d520
 800807c:	40668000 	.word	0x40668000
 8008080:	20005cfc 	.word	0x20005cfc
 8008084:	0801d528 	.word	0x0801d528
 8008088:	1a5b      	subs	r3, r3, r1
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	1ad1      	subs	r1, r2, r3
 800808e:	f107 0010 	add.w	r0, r7, #16
 8008092:	460b      	mov	r3, r1
 8008094:	4622      	mov	r2, r4
 8008096:	49e2      	ldr	r1, [pc, #904]	; (8008420 <localMain+0xff0>)
 8008098:	f00d fd60 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 80, textBuffer, zekton24font);
 800809c:	2314      	movs	r3, #20
 800809e:	b29c      	uxth	r4, r3
 80080a0:	f107 0310 	add.w	r3, r7, #16
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7f8 f8ad 	bl	8000204 <strlen>
 80080aa:	4603      	mov	r3, r0
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	fb14 f303 	smulbb	r3, r4, r3
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80080b8:	b298      	uxth	r0, r3
 80080ba:	f107 0210 	add.w	r2, r7, #16
 80080be:	4bd9      	ldr	r3, [pc, #868]	; (8008424 <localMain+0xff4>)
 80080c0:	2150      	movs	r1, #80	; 0x50
 80080c2:	f7fb f891 	bl	80031e8 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+NAUTICAL_TWILIGHT_DEG)*M_PI/180;
 80080c6:	a3d0      	add	r3, pc, #832	; (adr r3, 8008408 <localMain+0xfd8>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 80080d0:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80080d4:	f012 f844 	bl	801a160 <cos>
 80080d8:	ec55 4b10 	vmov	r4, r5, d0
 80080dc:	a3cc      	add	r3, pc, #816	; (adr r3, 8008410 <localMain+0xfe0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080e6:	f7f8 faa7 	bl	8000638 <__aeabi_dmul>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	4bcc      	ldr	r3, [pc, #816]	; (8008428 <localMain+0xff8>)
 80080f8:	f7f8 fbc8 	bl	800088c <__aeabi_ddiv>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	ec43 2b17 	vmov	d7, r2, r3
 8008104:	eeb0 0a47 	vmov.f32	s0, s14
 8008108:	eef0 0a67 	vmov.f32	s1, s15
 800810c:	f012 f828 	bl	801a160 <cos>
 8008110:	ec59 8b10 	vmov	r8, r9, d0
 8008114:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008118:	f7f8 fa36 	bl	8000588 <__aeabi_f2d>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	ec43 2b10 	vmov	d0, r2, r3
 8008124:	f012 f81c 	bl	801a160 <cos>
 8008128:	ec53 2b10 	vmov	r2, r3, d0
 800812c:	4640      	mov	r0, r8
 800812e:	4649      	mov	r1, r9
 8008130:	f7f8 fa82 	bl	8000638 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 fba6 	bl	800088c <__aeabi_ddiv>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	a3b1      	add	r3, pc, #708	; (adr r3, 8008410 <localMain+0xfe0>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008152:	f7f8 fa71 	bl	8000638 <__aeabi_dmul>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	4bb1      	ldr	r3, [pc, #708]	; (8008428 <localMain+0xff8>)
 8008164:	f7f8 fb92 	bl	800088c <__aeabi_ddiv>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	ec43 2b17 	vmov	d7, r2, r3
 8008170:	eeb0 0a47 	vmov.f32	s0, s14
 8008174:	eef0 0a67 	vmov.f32	s1, s15
 8008178:	f012 f89e 	bl	801a2b8 <tan>
 800817c:	ec59 8b10 	vmov	r8, r9, d0
 8008180:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008184:	f7f8 fa00 	bl	8000588 <__aeabi_f2d>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	ec43 2b10 	vmov	d0, r2, r3
 8008190:	f012 f892 	bl	801a2b8 <tan>
 8008194:	ec53 2b10 	vmov	r2, r3, d0
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 fa4c 	bl	8000638 <__aeabi_dmul>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 f88e 	bl	80002c8 <__aeabi_dsub>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	ec43 2b17 	vmov	d7, r2, r3
 80081b4:	eeb0 0a47 	vmov.f32	s0, s14
 80081b8:	eef0 0a67 	vmov.f32	s1, s15
 80081bc:	f012 f8b0 	bl	801a320 <acos>
 80081c0:	ec53 2b10 	vmov	r2, r3, d0
 80081c4:	4610      	mov	r0, r2
 80081c6:	4619      	mov	r1, r3
 80081c8:	f7f8 fd2e 	bl	8000c28 <__aeabi_d2f>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int naut_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 80081d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081d6:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80081da:	461a      	mov	r2, r3
 80081dc:	4993      	ldr	r1, [pc, #588]	; (800842c <localMain+0xffc>)
 80081de:	2000      	movs	r0, #0
 80081e0:	f7fe fe96 	bl	8006f10 <solarEventTime>
 80081e4:	67b8      	str	r0, [r7, #120]	; 0x78
		int naut_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80081e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081ea:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80081ee:	461a      	mov	r2, r3
 80081f0:	498e      	ldr	r1, [pc, #568]	; (800842c <localMain+0xffc>)
 80081f2:	2002      	movs	r0, #2
 80081f4:	f7fe fe8c 	bl	8006f10 <solarEventTime>
 80081f8:	6778      	str	r0, [r7, #116]	; 0x74
		sprintf(&textBuffer, "NAUTICAL");
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	498c      	ldr	r1, [pc, #560]	; (8008430 <localMain+0x1000>)
 8008200:	4618      	mov	r0, r3
 8008202:	f00d fcab 	bl	8015b5c <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 120, textBuffer, font_12_zekton);
 8008206:	2309      	movs	r3, #9
 8008208:	461c      	mov	r4, r3
 800820a:	f107 0310 	add.w	r3, r7, #16
 800820e:	4618      	mov	r0, r3
 8008210:	f7f7 fff8 	bl	8000204 <strlen>
 8008214:	4603      	mov	r3, r0
 8008216:	fb04 f303 	mul.w	r3, r4, r3
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8008222:	b298      	uxth	r0, r3
 8008224:	f107 0210 	add.w	r2, r7, #16
 8008228:	4b82      	ldr	r3, [pc, #520]	; (8008434 <localMain+0x1004>)
 800822a:	2178      	movs	r1, #120	; 0x78
 800822c:	f7fa ffdc 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunrise/60, naut_sunrise%60);
 8008230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008232:	4a81      	ldr	r2, [pc, #516]	; (8008438 <localMain+0x1008>)
 8008234:	fb82 1203 	smull	r1, r2, r2, r3
 8008238:	441a      	add	r2, r3
 800823a:	1152      	asrs	r2, r2, #5
 800823c:	17db      	asrs	r3, r3, #31
 800823e:	1ad4      	subs	r4, r2, r3
 8008240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008242:	4b7d      	ldr	r3, [pc, #500]	; (8008438 <localMain+0x1008>)
 8008244:	fb83 1302 	smull	r1, r3, r3, r2
 8008248:	4413      	add	r3, r2
 800824a:	1159      	asrs	r1, r3, #5
 800824c:	17d3      	asrs	r3, r2, #31
 800824e:	1ac9      	subs	r1, r1, r3
 8008250:	460b      	mov	r3, r1
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a5b      	subs	r3, r3, r1
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	1ad1      	subs	r1, r2, r3
 800825a:	f107 0010 	add.w	r0, r7, #16
 800825e:	460b      	mov	r3, r1
 8008260:	4622      	mov	r2, r4
 8008262:	496f      	ldr	r1, [pc, #444]	; (8008420 <localMain+0xff0>)
 8008264:	f00d fc7a 	bl	8015b5c <siprintf>
		lcdPutStr(10, 120, textBuffer, zekton24font);
 8008268:	f107 0210 	add.w	r2, r7, #16
 800826c:	4b6d      	ldr	r3, [pc, #436]	; (8008424 <localMain+0xff4>)
 800826e:	2178      	movs	r1, #120	; 0x78
 8008270:	200a      	movs	r0, #10
 8008272:	f7fa ffb9 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", naut_sunset/60, naut_sunset%60);
 8008276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008278:	4a6f      	ldr	r2, [pc, #444]	; (8008438 <localMain+0x1008>)
 800827a:	fb82 1203 	smull	r1, r2, r2, r3
 800827e:	441a      	add	r2, r3
 8008280:	1152      	asrs	r2, r2, #5
 8008282:	17db      	asrs	r3, r3, #31
 8008284:	1ad4      	subs	r4, r2, r3
 8008286:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008288:	4b6b      	ldr	r3, [pc, #428]	; (8008438 <localMain+0x1008>)
 800828a:	fb83 1302 	smull	r1, r3, r3, r2
 800828e:	4413      	add	r3, r2
 8008290:	1159      	asrs	r1, r3, #5
 8008292:	17d3      	asrs	r3, r2, #31
 8008294:	1ac9      	subs	r1, r1, r3
 8008296:	460b      	mov	r3, r1
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	1a5b      	subs	r3, r3, r1
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	1ad1      	subs	r1, r2, r3
 80082a0:	f107 0010 	add.w	r0, r7, #16
 80082a4:	460b      	mov	r3, r1
 80082a6:	4622      	mov	r2, r4
 80082a8:	495d      	ldr	r1, [pc, #372]	; (8008420 <localMain+0xff0>)
 80082aa:	f00d fc57 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 120, textBuffer, zekton24font);
 80082ae:	2314      	movs	r3, #20
 80082b0:	b29c      	uxth	r4, r3
 80082b2:	f107 0310 	add.w	r3, r7, #16
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f7 ffa4 	bl	8000204 <strlen>
 80082bc:	4603      	mov	r3, r0
 80082be:	b29b      	uxth	r3, r3
 80082c0:	fb14 f303 	smulbb	r3, r4, r3
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80082ca:	b298      	uxth	r0, r3
 80082cc:	f107 0210 	add.w	r2, r7, #16
 80082d0:	4b54      	ldr	r3, [pc, #336]	; (8008424 <localMain+0xff4>)
 80082d2:	2178      	movs	r1, #120	; 0x78
 80082d4:	f7fa ff88 	bl	80031e8 <lcdPutStr>

		// setting for sunrise/sunset zenith angle [rad]
		zenith = (90+ASTRONOMICAL_TWILIGHT_DEG)*M_PI/180;
 80082d8:	a34f      	add	r3, pc, #316	; (adr r3, 8008418 <localMain+0xfe8>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		// calculated hour angle [rad]
		cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 80082e2:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80082e6:	f011 ff3b 	bl	801a160 <cos>
 80082ea:	ec55 4b10 	vmov	r4, r5, d0
 80082ee:	a348      	add	r3, pc, #288	; (adr r3, 8008410 <localMain+0xfe0>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082f8:	f7f8 f99e 	bl	8000638 <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	4b47      	ldr	r3, [pc, #284]	; (8008428 <localMain+0xff8>)
 800830a:	f7f8 fabf 	bl	800088c <__aeabi_ddiv>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	ec43 2b17 	vmov	d7, r2, r3
 8008316:	eeb0 0a47 	vmov.f32	s0, s14
 800831a:	eef0 0a67 	vmov.f32	s1, s15
 800831e:	f011 ff1f 	bl	801a160 <cos>
 8008322:	ec59 8b10 	vmov	r8, r9, d0
 8008326:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800832a:	f7f8 f92d 	bl	8000588 <__aeabi_f2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	ec43 2b10 	vmov	d0, r2, r3
 8008336:	f011 ff13 	bl	801a160 <cos>
 800833a:	ec53 2b10 	vmov	r2, r3, d0
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 f979 	bl	8000638 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4620      	mov	r0, r4
 800834c:	4629      	mov	r1, r5
 800834e:	f7f8 fa9d 	bl	800088c <__aeabi_ddiv>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4614      	mov	r4, r2
 8008358:	461d      	mov	r5, r3
 800835a:	a32d      	add	r3, pc, #180	; (adr r3, 8008410 <localMain+0xfe0>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008364:	f7f8 f968 	bl	8000638 <__aeabi_dmul>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4610      	mov	r0, r2
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	4b2c      	ldr	r3, [pc, #176]	; (8008428 <localMain+0xff8>)
 8008376:	f7f8 fa89 	bl	800088c <__aeabi_ddiv>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	ec43 2b17 	vmov	d7, r2, r3
 8008382:	eeb0 0a47 	vmov.f32	s0, s14
 8008386:	eef0 0a67 	vmov.f32	s1, s15
 800838a:	f011 ff95 	bl	801a2b8 <tan>
 800838e:	ec59 8b10 	vmov	r8, r9, d0
 8008392:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008396:	f7f8 f8f7 	bl	8000588 <__aeabi_f2d>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	ec43 2b10 	vmov	d0, r2, r3
 80083a2:	f011 ff89 	bl	801a2b8 <tan>
 80083a6:	ec53 2b10 	vmov	r2, r3, d0
 80083aa:	4640      	mov	r0, r8
 80083ac:	4649      	mov	r1, r9
 80083ae:	f7f8 f943 	bl	8000638 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f7 ff85 	bl	80002c8 <__aeabi_dsub>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	ec43 2b17 	vmov	d7, r2, r3
 80083c6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ca:	eef0 0a67 	vmov.f32	s1, s15
 80083ce:	f011 ffa7 	bl	801a320 <acos>
 80083d2:	ec53 2b10 	vmov	r2, r3, d0
 80083d6:	4610      	mov	r0, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	f7f8 fc25 	bl	8000c28 <__aeabi_d2f>
 80083de:	4603      	mov	r3, r0
 80083e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		//sunrise/sunset/noon times [min]
		int astro_sunrise = solarEventTime(SOLAR_SUNRISE, &testTime, &myLocation, cha);
 80083e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083e8:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80083ec:	461a      	mov	r2, r3
 80083ee:	490f      	ldr	r1, [pc, #60]	; (800842c <localMain+0xffc>)
 80083f0:	2000      	movs	r0, #0
 80083f2:	f7fe fd8d 	bl	8006f10 <solarEventTime>
 80083f6:	6738      	str	r0, [r7, #112]	; 0x70
		int astro_sunset = solarEventTime(SOLAR_SUNSET, &testTime, &myLocation, cha);
 80083f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083fc:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8008400:	461a      	mov	r2, r3
 8008402:	e01b      	b.n	800843c <localMain+0x100c>
 8008404:	f3af 8000 	nop.w
 8008408:	92b3aa92 	.word	0x92b3aa92
 800840c:	3ffc7bd8 	.word	0x3ffc7bd8
 8008410:	54442d18 	.word	0x54442d18
 8008414:	400921fb 	.word	0x400921fb
 8008418:	31eb6950 	.word	0x31eb6950
 800841c:	3ffe28c7 	.word	0x3ffe28c7
 8008420:	0801d504 	.word	0x0801d504
 8008424:	08038824 	.word	0x08038824
 8008428:	40668000 	.word	0x40668000
 800842c:	20005cfc 	.word	0x20005cfc
 8008430:	0801d530 	.word	0x0801d530
 8008434:	08037314 	.word	0x08037314
 8008438:	88888889 	.word	0x88888889
 800843c:	49ac      	ldr	r1, [pc, #688]	; (80086f0 <localMain+0x12c0>)
 800843e:	2002      	movs	r0, #2
 8008440:	f7fe fd66 	bl	8006f10 <solarEventTime>
 8008444:	66f8      	str	r0, [r7, #108]	; 0x6c
		sprintf(&textBuffer, "ASTRONOMICAL");
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	49aa      	ldr	r1, [pc, #680]	; (80086f4 <localMain+0x12c4>)
 800844c:	4618      	mov	r0, r3
 800844e:	f00d fb85 	bl	8015b5c <siprintf>
		lcdPutStr(200-(*(font_12_zekton.font_Width)*(strlen(textBuffer)))/2, 160, textBuffer, font_12_zekton);
 8008452:	2309      	movs	r3, #9
 8008454:	461c      	mov	r4, r3
 8008456:	f107 0310 	add.w	r3, r7, #16
 800845a:	4618      	mov	r0, r3
 800845c:	f7f7 fed2 	bl	8000204 <strlen>
 8008460:	4603      	mov	r3, r0
 8008462:	fb04 f303 	mul.w	r3, r4, r3
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	b29b      	uxth	r3, r3
 800846a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800846e:	b298      	uxth	r0, r3
 8008470:	f107 0210 	add.w	r2, r7, #16
 8008474:	4ba0      	ldr	r3, [pc, #640]	; (80086f8 <localMain+0x12c8>)
 8008476:	21a0      	movs	r1, #160	; 0xa0
 8008478:	f7fa feb6 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunrise/60, astro_sunrise%60);
 800847c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800847e:	4a9f      	ldr	r2, [pc, #636]	; (80086fc <localMain+0x12cc>)
 8008480:	fb82 1203 	smull	r1, r2, r2, r3
 8008484:	441a      	add	r2, r3
 8008486:	1152      	asrs	r2, r2, #5
 8008488:	17db      	asrs	r3, r3, #31
 800848a:	1ad4      	subs	r4, r2, r3
 800848c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800848e:	4b9b      	ldr	r3, [pc, #620]	; (80086fc <localMain+0x12cc>)
 8008490:	fb83 1302 	smull	r1, r3, r3, r2
 8008494:	4413      	add	r3, r2
 8008496:	1159      	asrs	r1, r3, #5
 8008498:	17d3      	asrs	r3, r2, #31
 800849a:	1ac9      	subs	r1, r1, r3
 800849c:	460b      	mov	r3, r1
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	1a5b      	subs	r3, r3, r1
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	1ad1      	subs	r1, r2, r3
 80084a6:	f107 0010 	add.w	r0, r7, #16
 80084aa:	460b      	mov	r3, r1
 80084ac:	4622      	mov	r2, r4
 80084ae:	4994      	ldr	r1, [pc, #592]	; (8008700 <localMain+0x12d0>)
 80084b0:	f00d fb54 	bl	8015b5c <siprintf>
		lcdPutStr(10, 160, textBuffer, zekton24font);
 80084b4:	f107 0210 	add.w	r2, r7, #16
 80084b8:	4b92      	ldr	r3, [pc, #584]	; (8008704 <localMain+0x12d4>)
 80084ba:	21a0      	movs	r1, #160	; 0xa0
 80084bc:	200a      	movs	r0, #10
 80084be:	f7fa fe93 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02d:%02d", astro_sunset/60, astro_sunset%60);
 80084c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c4:	4a8d      	ldr	r2, [pc, #564]	; (80086fc <localMain+0x12cc>)
 80084c6:	fb82 1203 	smull	r1, r2, r2, r3
 80084ca:	441a      	add	r2, r3
 80084cc:	1152      	asrs	r2, r2, #5
 80084ce:	17db      	asrs	r3, r3, #31
 80084d0:	1ad4      	subs	r4, r2, r3
 80084d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084d4:	4b89      	ldr	r3, [pc, #548]	; (80086fc <localMain+0x12cc>)
 80084d6:	fb83 1302 	smull	r1, r3, r3, r2
 80084da:	4413      	add	r3, r2
 80084dc:	1159      	asrs	r1, r3, #5
 80084de:	17d3      	asrs	r3, r2, #31
 80084e0:	1ac9      	subs	r1, r1, r3
 80084e2:	460b      	mov	r3, r1
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	1a5b      	subs	r3, r3, r1
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	1ad1      	subs	r1, r2, r3
 80084ec:	f107 0010 	add.w	r0, r7, #16
 80084f0:	460b      	mov	r3, r1
 80084f2:	4622      	mov	r2, r4
 80084f4:	4982      	ldr	r1, [pc, #520]	; (8008700 <localMain+0x12d0>)
 80084f6:	f00d fb31 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 80084fa:	2314      	movs	r3, #20
 80084fc:	b29c      	uxth	r4, r3
 80084fe:	f107 0310 	add.w	r3, r7, #16
 8008502:	4618      	mov	r0, r3
 8008504:	f7f7 fe7e 	bl	8000204 <strlen>
 8008508:	4603      	mov	r3, r0
 800850a:	b29b      	uxth	r3, r3
 800850c:	fb14 f303 	smulbb	r3, r4, r3
 8008510:	b29b      	uxth	r3, r3
 8008512:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008516:	b298      	uxth	r0, r3
 8008518:	f107 0210 	add.w	r2, r7, #16
 800851c:	4b79      	ldr	r3, [pc, #484]	; (8008704 <localMain+0x12d4>)
 800851e:	21a0      	movs	r1, #160	; 0xa0
 8008520:	f7fa fe62 	bl	80031e8 <lcdPutStr>


		sprintf(&textBuffer, "SUNSET");
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	4977      	ldr	r1, [pc, #476]	; (8008708 <localMain+0x12d8>)
 800852a:	4618      	mov	r0, r3
 800852c:	f00d fb16 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(font_12_zekton.font_Width)*(strlen(textBuffer))), 35, textBuffer, font_12_zekton);
 8008530:	2309      	movs	r3, #9
 8008532:	b29c      	uxth	r4, r3
 8008534:	f107 0310 	add.w	r3, r7, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f7f7 fe63 	bl	8000204 <strlen>
 800853e:	4603      	mov	r3, r0
 8008540:	b29b      	uxth	r3, r3
 8008542:	fb14 f303 	smulbb	r3, r4, r3
 8008546:	b29b      	uxth	r3, r3
 8008548:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800854c:	b298      	uxth	r0, r3
 800854e:	f107 0210 	add.w	r2, r7, #16
 8008552:	4b69      	ldr	r3, [pc, #420]	; (80086f8 <localMain+0x12c8>)
 8008554:	2123      	movs	r1, #35	; 0x23
 8008556:	f7fa fe47 	bl	80031e8 <lcdPutStr>
		break;
 800855a:	e156      	b.n	800880a <localMain+0x13da>
	case 2:
	{
		double perc = (testTime.tm_hour*60+testTime.tm_min+(double)testTime.tm_sec/60-sunrise)*100/(sunset-sunrise);
 800855c:	4b64      	ldr	r3, [pc, #400]	; (80086f0 <localMain+0x12c0>)
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	4613      	mov	r3, r2
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	461a      	mov	r2, r3
 800856a:	4b61      	ldr	r3, [pc, #388]	; (80086f0 <localMain+0x12c0>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4413      	add	r3, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7f7 fff7 	bl	8000564 <__aeabi_i2d>
 8008576:	4604      	mov	r4, r0
 8008578:	460d      	mov	r5, r1
 800857a:	4b5d      	ldr	r3, [pc, #372]	; (80086f0 <localMain+0x12c0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f7f7 fff0 	bl	8000564 <__aeabi_i2d>
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	4b60      	ldr	r3, [pc, #384]	; (800870c <localMain+0x12dc>)
 800858a:	f7f8 f97f 	bl	800088c <__aeabi_ddiv>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4620      	mov	r0, r4
 8008594:	4629      	mov	r1, r5
 8008596:	f7f7 fe99 	bl	80002cc <__adddf3>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	461d      	mov	r5, r3
 80085a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80085a6:	f7f7 ffdd 	bl	8000564 <__aeabi_i2d>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f7 fe89 	bl	80002c8 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4610      	mov	r0, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	4b53      	ldr	r3, [pc, #332]	; (8008710 <localMain+0x12e0>)
 80085c4:	f7f8 f838 	bl	8000638 <__aeabi_dmul>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	461d      	mov	r5, r3
 80085d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80085d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffc2 	bl	8000564 <__aeabi_i2d>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f8 f950 	bl	800088c <__aeabi_ddiv>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		sprintf(&textBuffer, "percentage daylight:");
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	4946      	ldr	r1, [pc, #280]	; (8008714 <localMain+0x12e4>)
 80085fa:	4618      	mov	r0, r3
 80085fc:	f00d faae 	bl	8015b5c <siprintf>
		lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 8008600:	f107 0210 	add.w	r2, r7, #16
 8008604:	4b44      	ldr	r3, [pc, #272]	; (8008718 <localMain+0x12e8>)
 8008606:	2174      	movs	r1, #116	; 0x74
 8008608:	200a      	movs	r0, #10
 800860a:	f7fa fded 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%2.3f%%", perc);
 800860e:	f107 0010 	add.w	r0, r7, #16
 8008612:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008616:	4941      	ldr	r1, [pc, #260]	; (800871c <localMain+0x12ec>)
 8008618:	f00d faa0 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 116, textBuffer, zekton24font);
 800861c:	2314      	movs	r3, #20
 800861e:	b29c      	uxth	r4, r3
 8008620:	f107 0310 	add.w	r3, r7, #16
 8008624:	4618      	mov	r0, r3
 8008626:	f7f7 fded 	bl	8000204 <strlen>
 800862a:	4603      	mov	r3, r0
 800862c:	b29b      	uxth	r3, r3
 800862e:	fb14 f303 	smulbb	r3, r4, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8008638:	b298      	uxth	r0, r3
 800863a:	f107 0210 	add.w	r2, r7, #16
 800863e:	4b31      	ldr	r3, [pc, #196]	; (8008704 <localMain+0x12d4>)
 8008640:	2174      	movs	r1, #116	; 0x74
 8008642:	f7fa fdd1 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "day length:");
 8008646:	f107 0310 	add.w	r3, r7, #16
 800864a:	4935      	ldr	r1, [pc, #212]	; (8008720 <localMain+0x12f0>)
 800864c:	4618      	mov	r0, r3
 800864e:	f00d fa85 	bl	8015b5c <siprintf>
		lcdPutStr(10, 160, textBuffer, font_12_zekton_bold);
 8008652:	f107 0210 	add.w	r2, r7, #16
 8008656:	4b30      	ldr	r3, [pc, #192]	; (8008718 <localMain+0x12e8>)
 8008658:	21a0      	movs	r1, #160	; 0xa0
 800865a:	200a      	movs	r0, #10
 800865c:	f7fa fdc4 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "%02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8008660:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	4a24      	ldr	r2, [pc, #144]	; (80086fc <localMain+0x12cc>)
 800866c:	fb82 1203 	smull	r1, r2, r2, r3
 8008670:	441a      	add	r2, r3
 8008672:	1152      	asrs	r2, r2, #5
 8008674:	17db      	asrs	r3, r3, #31
 8008676:	1ad4      	subs	r4, r2, r3
 8008678:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800867c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008680:	1ad2      	subs	r2, r2, r3
 8008682:	4b1e      	ldr	r3, [pc, #120]	; (80086fc <localMain+0x12cc>)
 8008684:	fb83 1302 	smull	r1, r3, r3, r2
 8008688:	4413      	add	r3, r2
 800868a:	1159      	asrs	r1, r3, #5
 800868c:	17d3      	asrs	r3, r2, #31
 800868e:	1ac9      	subs	r1, r1, r3
 8008690:	460b      	mov	r3, r1
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	1a5b      	subs	r3, r3, r1
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	1ad1      	subs	r1, r2, r3
 800869a:	f107 0010 	add.w	r0, r7, #16
 800869e:	460b      	mov	r3, r1
 80086a0:	4622      	mov	r2, r4
 80086a2:	4920      	ldr	r1, [pc, #128]	; (8008724 <localMain+0x12f4>)
 80086a4:	f00d fa5a 	bl	8015b5c <siprintf>
		lcdPutStr(390-(*(zekton24font.font_Width)*(strlen(textBuffer))), 160, textBuffer, zekton24font);
 80086a8:	2314      	movs	r3, #20
 80086aa:	b29c      	uxth	r4, r3
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f7 fda7 	bl	8000204 <strlen>
 80086b6:	4603      	mov	r3, r0
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	fb14 f303 	smulbb	r3, r4, r3
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80086c4:	b298      	uxth	r0, r3
 80086c6:	f107 0210 	add.w	r2, r7, #16
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <localMain+0x12d4>)
 80086cc:	21a0      	movs	r1, #160	; 0xa0
 80086ce:	f7fa fd8b 	bl	80031e8 <lcdPutStr>
		break;
 80086d2:	e09a      	b.n	800880a <localMain+0x13da>
	}
	case 3:

		drawSunlightGraph(120, 5, 395, 160, &suntimes, &myLocation);
 80086d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	23a0      	movs	r3, #160	; 0xa0
 80086e2:	f240 128b 	movw	r2, #395	; 0x18b
 80086e6:	2105      	movs	r1, #5
 80086e8:	2078      	movs	r0, #120	; 0x78
 80086ea:	f000 f89d 	bl	8008828 <drawSunlightGraph>
		break;
 80086ee:	e08c      	b.n	800880a <localMain+0x13da>
 80086f0:	20005cfc 	.word	0x20005cfc
 80086f4:	0801d53c 	.word	0x0801d53c
 80086f8:	08037314 	.word	0x08037314
 80086fc:	88888889 	.word	0x88888889
 8008700:	0801d504 	.word	0x0801d504
 8008704:	08038824 	.word	0x08038824
 8008708:	0801d520 	.word	0x0801d520
 800870c:	404e0000 	.word	0x404e0000
 8008710:	40590000 	.word	0x40590000
 8008714:	0801d54c 	.word	0x0801d54c
 8008718:	08037d9c 	.word	0x08037d9c
 800871c:	0801d564 	.word	0x0801d564
 8008720:	0801d56c 	.word	0x0801d56c
 8008724:	0801d578 	.word	0x0801d578
	case 4:{
		sprintf(&textBuffer, "18250d");
 8008728:	f107 0310 	add.w	r3, r7, #16
 800872c:	4939      	ldr	r1, [pc, #228]	; (8008814 <localMain+0x13e4>)
 800872e:	4618      	mov	r0, r3
 8008730:	f00d fa14 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 30, textBuffer, zekton45font);
 8008734:	2322      	movs	r3, #34	; 0x22
 8008736:	b29c      	uxth	r4, r3
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	4618      	mov	r0, r3
 800873e:	f7f7 fd61 	bl	8000204 <strlen>
 8008742:	4603      	mov	r3, r0
 8008744:	3301      	adds	r3, #1
 8008746:	b29b      	uxth	r3, r3
 8008748:	fb14 f303 	smulbb	r3, r4, r3
 800874c:	b29b      	uxth	r3, r3
 800874e:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 8008752:	b298      	uxth	r0, r3
 8008754:	f107 0210 	add.w	r2, r7, #16
 8008758:	4b2f      	ldr	r3, [pc, #188]	; (8008818 <localMain+0x13e8>)
 800875a:	211e      	movs	r1, #30
 800875c:	f7fa fd44 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "20h");
 8008760:	f107 0310 	add.w	r3, r7, #16
 8008764:	492d      	ldr	r1, [pc, #180]	; (800881c <localMain+0x13ec>)
 8008766:	4618      	mov	r0, r3
 8008768:	f00d f9f8 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 80, textBuffer, zekton45font);
 800876c:	2322      	movs	r3, #34	; 0x22
 800876e:	b29c      	uxth	r4, r3
 8008770:	f107 0310 	add.w	r3, r7, #16
 8008774:	4618      	mov	r0, r3
 8008776:	f7f7 fd45 	bl	8000204 <strlen>
 800877a:	4603      	mov	r3, r0
 800877c:	3301      	adds	r3, #1
 800877e:	b29b      	uxth	r3, r3
 8008780:	fb14 f303 	smulbb	r3, r4, r3
 8008784:	b29b      	uxth	r3, r3
 8008786:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800878a:	b298      	uxth	r0, r3
 800878c:	f107 0210 	add.w	r2, r7, #16
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <localMain+0x13e8>)
 8008792:	2150      	movs	r1, #80	; 0x50
 8008794:	f7fa fd28 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "54min");
 8008798:	f107 0310 	add.w	r3, r7, #16
 800879c:	4920      	ldr	r1, [pc, #128]	; (8008820 <localMain+0x13f0>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f00d f9dc 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 130, textBuffer, zekton45font);
 80087a4:	2322      	movs	r3, #34	; 0x22
 80087a6:	b29c      	uxth	r4, r3
 80087a8:	f107 0310 	add.w	r3, r7, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f7 fd29 	bl	8000204 <strlen>
 80087b2:	4603      	mov	r3, r0
 80087b4:	3301      	adds	r3, #1
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	fb14 f303 	smulbb	r3, r4, r3
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80087c2:	b298      	uxth	r0, r3
 80087c4:	f107 0210 	add.w	r2, r7, #16
 80087c8:	4b13      	ldr	r3, [pc, #76]	; (8008818 <localMain+0x13e8>)
 80087ca:	2182      	movs	r1, #130	; 0x82
 80087cc:	f7fa fd0c 	bl	80031e8 <lcdPutStr>
		sprintf(&textBuffer, "12s");
 80087d0:	f107 0310 	add.w	r3, r7, #16
 80087d4:	4913      	ldr	r1, [pc, #76]	; (8008824 <localMain+0x13f4>)
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00d f9c0 	bl	8015b5c <siprintf>
		lcdPutStr(420-(*(zekton45font.font_Width)*(strlen(textBuffer)+1)), 180, textBuffer, zekton45font);
 80087dc:	2322      	movs	r3, #34	; 0x22
 80087de:	b29c      	uxth	r4, r3
 80087e0:	f107 0310 	add.w	r3, r7, #16
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7f7 fd0d 	bl	8000204 <strlen>
 80087ea:	4603      	mov	r3, r0
 80087ec:	3301      	adds	r3, #1
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	fb14 f303 	smulbb	r3, r4, r3
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 80087fa:	b298      	uxth	r0, r3
 80087fc:	f107 0210 	add.w	r2, r7, #16
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <localMain+0x13e8>)
 8008802:	21b4      	movs	r1, #180	; 0xb4
 8008804:	f7fa fcf0 	bl	80031e8 <lcdPutStr>

		break;
 8008808:	bf00      	nop
		}
	}
}
 800880a:	bf00      	nop
 800880c:	37f4      	adds	r7, #244	; 0xf4
 800880e:	46bd      	mov	sp, r7
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	0801d588 	.word	0x0801d588
 8008818:	0803a68c 	.word	0x0803a68c
 800881c:	0801d590 	.word	0x0801d590
 8008820:	0801d594 	.word	0x0801d594
 8008824:	0801d59c 	.word	0x0801d59c

08008828 <drawSunlightGraph>:

void drawSunlightGraph(uint8_t yPos, uint16_t x1, uint16_t x2, uint8_t height, struct sunEventsTimes *suntimes, struct local_location *location){
 8008828:	b5b0      	push	{r4, r5, r7, lr}
 800882a:	b0a2      	sub	sp, #136	; 0x88
 800882c:	af02      	add	r7, sp, #8
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	461a      	mov	r2, r3
 8008836:	4623      	mov	r3, r4
 8008838:	71fb      	strb	r3, [r7, #7]
 800883a:	4603      	mov	r3, r0
 800883c:	80bb      	strh	r3, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	807b      	strh	r3, [r7, #2]
 8008842:	4613      	mov	r3, r2
 8008844:	71bb      	strb	r3, [r7, #6]
	lcdHLine(x1,x2,yPos,1);
 8008846:	88b8      	ldrh	r0, [r7, #4]
 8008848:	8879      	ldrh	r1, [r7, #2]
 800884a:	79fa      	ldrb	r2, [r7, #7]
 800884c:	2301      	movs	r3, #1
 800884e:	f7fb f993 	bl	8003b78 <lcdHLine>
	lcdVLine(x1, yPos-2, yPos+2, 1);
 8008852:	88b8      	ldrh	r0, [r7, #4]
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	1e99      	subs	r1, r3, #2
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	1c9a      	adds	r2, r3, #2
 800885c:	2301      	movs	r3, #1
 800885e:	f7fa fd43 	bl	80032e8 <lcdVLine>
	lcdVLine(x2, yPos-2, yPos+2, 1);
 8008862:	8878      	ldrh	r0, [r7, #2]
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	1e99      	subs	r1, r3, #2
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	1c9a      	adds	r2, r3, #2
 800886c:	2301      	movs	r3, #1
 800886e:	f7fa fd3b 	bl	80032e8 <lcdVLine>

	uint16_t scaleXrise = x1+(x2-x1+1)*suntimes->sunrise/(24*60-0);
 8008872:	887a      	ldrh	r2, [r7, #2]
 8008874:	88bb      	ldrh	r3, [r7, #4]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	3301      	adds	r3, #1
 800887a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	4ab0      	ldr	r2, [pc, #704]	; (8008b48 <drawSunlightGraph+0x320>)
 8008886:	fb82 1203 	smull	r1, r2, r2, r3
 800888a:	441a      	add	r2, r3
 800888c:	1292      	asrs	r2, r2, #10
 800888e:	17db      	asrs	r3, r3, #31
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	b29a      	uxth	r2, r3
 8008894:	88bb      	ldrh	r3, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t scaleXset = x1+(x2-x1+1)*suntimes->sunset/(24*60-0);
 800889c:	887a      	ldrh	r2, [r7, #2]
 800889e:	88bb      	ldrh	r3, [r7, #4]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	3301      	adds	r3, #1
 80088a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80088a8:	6892      	ldr	r2, [r2, #8]
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	4aa6      	ldr	r2, [pc, #664]	; (8008b48 <drawSunlightGraph+0x320>)
 80088b0:	fb82 1203 	smull	r1, r2, r2, r3
 80088b4:	441a      	add	r2, r3
 80088b6:	1292      	asrs	r2, r2, #10
 80088b8:	17db      	asrs	r3, r3, #31
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	b29a      	uxth	r2, r3
 80088be:	88bb      	ldrh	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t scaleXnoon = x1+(x2-x1+1)*suntimes->noon/(24*60-0);
 80088c6:	887a      	ldrh	r2, [r7, #2]
 80088c8:	88bb      	ldrh	r3, [r7, #4]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80088d2:	6852      	ldr	r2, [r2, #4]
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	4a9b      	ldr	r2, [pc, #620]	; (8008b48 <drawSunlightGraph+0x320>)
 80088da:	fb82 1203 	smull	r1, r2, r2, r3
 80088de:	441a      	add	r2, r3
 80088e0:	1292      	asrs	r2, r2, #10
 80088e2:	17db      	asrs	r3, r3, #31
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	88bb      	ldrh	r3, [r7, #4]
 80088ea:	4413      	add	r3, r2
 80088ec:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint16_t scaleXnow = x1+(x2-x1+1)*(testTime.tm_hour*60+testTime.tm_min)/(24*60-0);
 80088f0:	887a      	ldrh	r2, [r7, #2]
 80088f2:	88bb      	ldrh	r3, [r7, #4]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	4b94      	ldr	r3, [pc, #592]	; (8008b4c <drawSunlightGraph+0x324>)
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	461a      	mov	r2, r3
 8008906:	4b91      	ldr	r3, [pc, #580]	; (8008b4c <drawSunlightGraph+0x324>)
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	4413      	add	r3, r2
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	4a8d      	ldr	r2, [pc, #564]	; (8008b48 <drawSunlightGraph+0x320>)
 8008912:	fb82 1203 	smull	r1, r2, r2, r3
 8008916:	441a      	add	r2, r3
 8008918:	1292      	asrs	r2, r2, #10
 800891a:	17db      	asrs	r3, r3, #31
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	b29a      	uxth	r2, r3
 8008920:	88bb      	ldrh	r3, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	lcdVLine(scaleXrise, yPos-5, yPos+5, 2);
 8008928:	f8b7 007c 	ldrh.w	r0, [r7, #124]	; 0x7c
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	1f59      	subs	r1, r3, #5
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	1d5a      	adds	r2, r3, #5
 8008934:	2302      	movs	r3, #2
 8008936:	f7fa fcd7 	bl	80032e8 <lcdVLine>
	lcdVLine(scaleXset, yPos, yPos+5, 2);
 800893a:	f8b7 007a 	ldrh.w	r0, [r7, #122]	; 0x7a
 800893e:	79f9      	ldrb	r1, [r7, #7]
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	1d5a      	adds	r2, r3, #5
 8008944:	2302      	movs	r3, #2
 8008946:	f7fa fccf 	bl	80032e8 <lcdVLine>
	lcdVLine(scaleXnoon, yPos-5, yPos+5, 2);
 800894a:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	1f59      	subs	r1, r3, #5
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	1d5a      	adds	r2, r3, #5
 8008956:	2302      	movs	r3, #2
 8008958:	f7fa fcc6 	bl	80032e8 <lcdVLine>
//	lcdVLine(scaleXnow, yPos-10, yPos+10, 2);

	char textBuffer[50] = {0};
 800895c:	2300      	movs	r3, #0
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008964:	222e      	movs	r2, #46	; 0x2e
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f00b ffc9 	bl	8014900 <memset>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunrise/60, suntimes->sunrise%60);
 800896e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a76      	ldr	r2, [pc, #472]	; (8008b50 <drawSunlightGraph+0x328>)
 8008976:	fb82 1203 	smull	r1, r2, r2, r3
 800897a:	441a      	add	r2, r3
 800897c:	1152      	asrs	r2, r2, #5
 800897e:	17db      	asrs	r3, r3, #31
 8008980:	1ad4      	subs	r4, r2, r3
 8008982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b71      	ldr	r3, [pc, #452]	; (8008b50 <drawSunlightGraph+0x328>)
 800898a:	fb83 1302 	smull	r1, r3, r3, r2
 800898e:	4413      	add	r3, r2
 8008990:	1159      	asrs	r1, r3, #5
 8008992:	17d3      	asrs	r3, r2, #31
 8008994:	1ac9      	subs	r1, r1, r3
 8008996:	460b      	mov	r3, r1
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	1a5b      	subs	r3, r3, r1
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	1ad1      	subs	r1, r2, r3
 80089a0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80089a4:	460b      	mov	r3, r1
 80089a6:	4622      	mov	r2, r4
 80089a8:	496a      	ldr	r1, [pc, #424]	; (8008b54 <drawSunlightGraph+0x32c>)
 80089aa:	f00d f8d7 	bl	8015b5c <siprintf>
	lcdPutStr(scaleXrise-42, yPos-15, textBuffer, smallestFont);
 80089ae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80089b2:	3b2a      	subs	r3, #42	; 0x2a
 80089b4:	b298      	uxth	r0, r3
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	3b0f      	subs	r3, #15
 80089ba:	b2d9      	uxtb	r1, r3
 80089bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80089c0:	4b65      	ldr	r3, [pc, #404]	; (8008b58 <drawSunlightGraph+0x330>)
 80089c2:	f7fa fc11 	bl	80031e8 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->sunset/60, suntimes->sunset%60);
 80089c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	4a60      	ldr	r2, [pc, #384]	; (8008b50 <drawSunlightGraph+0x328>)
 80089ce:	fb82 1203 	smull	r1, r2, r2, r3
 80089d2:	441a      	add	r2, r3
 80089d4:	1152      	asrs	r2, r2, #5
 80089d6:	17db      	asrs	r3, r3, #31
 80089d8:	1ad4      	subs	r4, r2, r3
 80089da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	4b5b      	ldr	r3, [pc, #364]	; (8008b50 <drawSunlightGraph+0x328>)
 80089e2:	fb83 1302 	smull	r1, r3, r3, r2
 80089e6:	4413      	add	r3, r2
 80089e8:	1159      	asrs	r1, r3, #5
 80089ea:	17d3      	asrs	r3, r2, #31
 80089ec:	1ac9      	subs	r1, r1, r3
 80089ee:	460b      	mov	r3, r1
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	1a5b      	subs	r3, r3, r1
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	1ad1      	subs	r1, r2, r3
 80089f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80089fc:	460b      	mov	r3, r1
 80089fe:	4622      	mov	r2, r4
 8008a00:	4954      	ldr	r1, [pc, #336]	; (8008b54 <drawSunlightGraph+0x32c>)
 8008a02:	f00d f8ab 	bl	8015b5c <siprintf>
	lcdPutStr(scaleXset-19, yPos+5, textBuffer, smallestFont);
 8008a06:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a0a:	3b13      	subs	r3, #19
 8008a0c:	b298      	uxth	r0, r3
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	3305      	adds	r3, #5
 8008a12:	b2d9      	uxtb	r1, r3
 8008a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008a18:	4b4f      	ldr	r3, [pc, #316]	; (8008b58 <drawSunlightGraph+0x330>)
 8008a1a:	f7fa fbe5 	bl	80031e8 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", suntimes->noon/60, suntimes->noon%60);
 8008a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4a4a      	ldr	r2, [pc, #296]	; (8008b50 <drawSunlightGraph+0x328>)
 8008a26:	fb82 1203 	smull	r1, r2, r2, r3
 8008a2a:	441a      	add	r2, r3
 8008a2c:	1152      	asrs	r2, r2, #5
 8008a2e:	17db      	asrs	r3, r3, #31
 8008a30:	1ad4      	subs	r4, r2, r3
 8008a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	4b45      	ldr	r3, [pc, #276]	; (8008b50 <drawSunlightGraph+0x328>)
 8008a3a:	fb83 1302 	smull	r1, r3, r3, r2
 8008a3e:	4413      	add	r3, r2
 8008a40:	1159      	asrs	r1, r3, #5
 8008a42:	17d3      	asrs	r3, r2, #31
 8008a44:	1ac9      	subs	r1, r1, r3
 8008a46:	460b      	mov	r3, r1
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	1a5b      	subs	r3, r3, r1
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	1ad1      	subs	r1, r2, r3
 8008a50:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a54:	460b      	mov	r3, r1
 8008a56:	4622      	mov	r2, r4
 8008a58:	493e      	ldr	r1, [pc, #248]	; (8008b54 <drawSunlightGraph+0x32c>)
 8008a5a:	f00d f87f 	bl	8015b5c <siprintf>
	lcdPutStr(scaleXnoon+4, yPos-15, textBuffer, smallestFont);
 8008a5e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008a62:	3304      	adds	r3, #4
 8008a64:	b298      	uxth	r0, r3
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	3b0f      	subs	r3, #15
 8008a6a:	b2d9      	uxtb	r1, r3
 8008a6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008a70:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <drawSunlightGraph+0x330>)
 8008a72:	f7fa fbb9 	bl	80031e8 <lcdPutStr>
	struct solarAngles angles = {0,0};
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
	struct tm myTime;
	myTime = testTime;
 8008a82:	4b32      	ldr	r3, [pc, #200]	; (8008b4c <drawSunlightGraph+0x324>)
 8008a84:	f107 040c 	add.w	r4, r7, #12
 8008a88:	461d      	mov	r5, r3
 8008a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	6023      	str	r3, [r4, #0]
	int sunElev;

	calcSolarAngles(&angles, &testTime, location);
 8008a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a9e:	492b      	ldr	r1, [pc, #172]	; (8008b4c <drawSunlightGraph+0x324>)
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fb45 	bl	8007130 <calcSolarAngles>
	sunElev = (90-angles.za*180/M_PI)*height/90;
 8008aa6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008aaa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008b5c <drawSunlightGraph+0x334>
 8008aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ab2:	ee17 0a90 	vmov	r0, s15
 8008ab6:	f7f7 fd67 	bl	8000588 <__aeabi_f2d>
 8008aba:	a321      	add	r3, pc, #132	; (adr r3, 8008b40 <drawSunlightGraph+0x318>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fee4 	bl	800088c <__aeabi_ddiv>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	f04f 0000 	mov.w	r0, #0
 8008acc:	4924      	ldr	r1, [pc, #144]	; (8008b60 <drawSunlightGraph+0x338>)
 8008ace:	f7f7 fbfb 	bl	80002c8 <__aeabi_dsub>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461d      	mov	r5, r3
 8008ada:	79bb      	ldrb	r3, [r7, #6]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fd41 	bl	8000564 <__aeabi_i2d>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7f7 fda5 	bl	8000638 <__aeabi_dmul>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <drawSunlightGraph+0x338>)
 8008afc:	f7f7 fec6 	bl	800088c <__aeabi_ddiv>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	f7f8 f846 	bl	8000b98 <__aeabi_d2iz>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	673b      	str	r3, [r7, #112]	; 0x70
	lcdRect(scaleXnow-1, scaleXnow+1, yPos-sunElev-1, yPos-sunElev+1, 1);
 8008b10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008b14:	1e58      	subs	r0, r3, #1
 8008b16:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008b1a:	1c59      	adds	r1, r3, #1
 8008b1c:	79fa      	ldrb	r2, [r7, #7]
 8008b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	1e5c      	subs	r4, r3, #1
 8008b24:	79fa      	ldrb	r2, [r7, #7]
 8008b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	9200      	str	r2, [sp, #0]
 8008b30:	4622      	mov	r2, r4
 8008b32:	f7fb f977 	bl	8003e24 <lcdRect>

	for(uint16_t pix = x1; pix <= x2; pix+=3){
 8008b36:	88bb      	ldrh	r3, [r7, #4]
 8008b38:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008b3c:	e099      	b.n	8008c72 <drawSunlightGraph+0x44a>
 8008b3e:	bf00      	nop
 8008b40:	54442d18 	.word	0x54442d18
 8008b44:	400921fb 	.word	0x400921fb
 8008b48:	b60b60b7 	.word	0xb60b60b7
 8008b4c:	20005cfc 	.word	0x20005cfc
 8008b50:	88888889 	.word	0x88888889
 8008b54:	0801d504 	.word	0x0801d504
 8008b58:	08036e98 	.word	0x08036e98
 8008b5c:	43340000 	.word	0x43340000
 8008b60:	40568000 	.word	0x40568000
		uint16_t min_sum = (pix-x1)*24*60/(x2-x1);
 8008b64:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008b68:	88bb      	ldrh	r3, [r7, #4]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8008b70:	fb03 f202 	mul.w	r2, r3, r2
 8008b74:	8879      	ldrh	r1, [r7, #2]
 8008b76:	88bb      	ldrh	r3, [r7, #4]
 8008b78:	1acb      	subs	r3, r1, r3
 8008b7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8008b7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		uint8_t hrs = min_sum/60;
 8008b82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b86:	4a42      	ldr	r2, [pc, #264]	; (8008c90 <drawSunlightGraph+0x468>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	095b      	lsrs	r3, r3, #5
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		uint8_t min = min_sum%60;
 8008b94:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8008b98:	4b3d      	ldr	r3, [pc, #244]	; (8008c90 <drawSunlightGraph+0x468>)
 8008b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9e:	0959      	lsrs	r1, r3, #5
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	1a5b      	subs	r3, r3, r1
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		myTime.tm_hour = hrs;
 8008bb0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8008bb4:	617b      	str	r3, [r7, #20]
		myTime.tm_min = min;
 8008bb6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008bba:	613b      	str	r3, [r7, #16]
		calcSolarAngles(&angles, &myTime, location);
 8008bbc:	f107 010c 	add.w	r1, r7, #12
 8008bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fab1 	bl	8007130 <calcSolarAngles>
		sunElev = (90-angles.za*180/M_PI)*height/90;
 8008bce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008bd2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008c94 <drawSunlightGraph+0x46c>
 8008bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bda:	ee17 0a90 	vmov	r0, s15
 8008bde:	f7f7 fcd3 	bl	8000588 <__aeabi_f2d>
 8008be2:	a329      	add	r3, pc, #164	; (adr r3, 8008c88 <drawSunlightGraph+0x460>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fe50 	bl	800088c <__aeabi_ddiv>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	f04f 0000 	mov.w	r0, #0
 8008bf4:	4928      	ldr	r1, [pc, #160]	; (8008c98 <drawSunlightGraph+0x470>)
 8008bf6:	f7f7 fb67 	bl	80002c8 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4614      	mov	r4, r2
 8008c00:	461d      	mov	r5, r3
 8008c02:	79bb      	ldrb	r3, [r7, #6]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f7 fcad 	bl	8000564 <__aeabi_i2d>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fd11 	bl	8000638 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <drawSunlightGraph+0x470>)
 8008c24:	f7f7 fe32 	bl	800088c <__aeabi_ddiv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f7f7 ffb2 	bl	8000b98 <__aeabi_d2iz>
 8008c34:	4603      	mov	r3, r0
 8008c36:	673b      	str	r3, [r7, #112]	; 0x70
		lcdPutPix(pix, yPos-sunElev, 1);
 8008c38:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008c3c:	79fa      	ldrb	r2, [r7, #7]
 8008c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2201      	movs	r2, #1
 8008c44:	4619      	mov	r1, r3
 8008c46:	f7fa f8e3 	bl	8002e10 <lcdPutPix>
		if(pix < scaleXnow) lcdVLine(pix, yPos-sunElev, yPos, 1);
 8008c4a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008c4e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d208      	bcs.n	8008c68 <drawSunlightGraph+0x440>
 8008c56:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8008c5a:	79fa      	ldrb	r2, [r7, #7]
 8008c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c5e:	1ad1      	subs	r1, r2, r3
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	2301      	movs	r3, #1
 8008c64:	f7fa fb40 	bl	80032e8 <lcdVLine>
	for(uint16_t pix = x1; pix <= x2; pix+=3){
 8008c68:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008c6c:	3303      	adds	r3, #3
 8008c6e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008c72:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008c76:	887b      	ldrh	r3, [r7, #2]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	f67f af73 	bls.w	8008b64 <drawSunlightGraph+0x33c>
	}
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	3780      	adds	r7, #128	; 0x80
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bdb0      	pop	{r4, r5, r7, pc}
 8008c88:	54442d18 	.word	0x54442d18
 8008c8c:	400921fb 	.word	0x400921fb
 8008c90:	88888889 	.word	0x88888889
 8008c94:	43340000 	.word	0x43340000
 8008c98:	40568000 	.word	0x40568000

08008c9c <prevPage>:
#include "screenTest.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <prevPage+0x30>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <prevPage+0x1a>
		currentPage--;
 8008ca8:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <prevPage+0x30>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <prevPage+0x30>)
 8008cb2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8008cb4:	e005      	b.n	8008cc2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8008cb6:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <prevPage+0x34>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <prevPage+0x30>)
 8008cc0:	701a      	strb	r2, [r3, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20005d21 	.word	0x20005d21
 8008cd0:	200000b5 	.word	0x200000b5

08008cd4 <nextPage>:
void nextPage(void){
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8008cd8:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <nextPage+0x34>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <nextPage+0x38>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	da06      	bge.n	8008cf6 <nextPage+0x22>
		currentPage++;
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <nextPage+0x34>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <nextPage+0x34>)
 8008cf2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8008cf4:	e002      	b.n	8008cfc <nextPage+0x28>
		currentPage=0;
 8008cf6:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <nextPage+0x34>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20005d21 	.word	0x20005d21
 8008d0c:	200000b5 	.word	0x200000b5

08008d10 <showPage1>:

void showPage1(void){
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b092      	sub	sp, #72	; 0x48
 8008d14:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8008d16:	2300      	movs	r3, #0
 8008d18:	623b      	str	r3, [r7, #32]
 8008d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	605a      	str	r2, [r3, #4]
 8008d24:	609a      	str	r2, [r3, #8]
 8008d26:	60da      	str	r2, [r3, #12]
 8008d28:	611a      	str	r2, [r3, #16]
 8008d2a:	615a      	str	r2, [r3, #20]
 8008d2c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8008d2e:	2300      	movs	r3, #0
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	609a      	str	r2, [r3, #8]
 8008d3c:	60da      	str	r2, [r3, #12]
 8008d3e:	611a      	str	r2, [r3, #16]
 8008d40:	615a      	str	r2, [r3, #20]
 8008d42:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8008d44:	4b17      	ldr	r3, [pc, #92]	; (8008da4 <showPage1+0x94>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <showPage1+0x94>)
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <showPage1+0x94>)
 8008d52:	789b      	ldrb	r3, [r3, #2]
 8008d54:	4638      	mov	r0, r7
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4913      	ldr	r1, [pc, #76]	; (8008da8 <showPage1+0x98>)
 8008d5c:	f00c fefe 	bl	8015b5c <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8008d60:	463a      	mov	r2, r7
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <showPage1+0x9c>)
 8008d64:	210b      	movs	r1, #11
 8008d66:	200e      	movs	r0, #14
 8008d68:	f7fa fa3e 	bl	80031e8 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	2227      	movs	r2, #39	; 0x27
 8008d70:	2106      	movs	r1, #6
 8008d72:	2001      	movs	r0, #1
 8008d74:	f7fa fab8 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8008d78:	2301      	movs	r3, #1
 8008d7a:	2228      	movs	r2, #40	; 0x28
 8008d7c:	2105      	movs	r1, #5
 8008d7e:	2002      	movs	r0, #2
 8008d80:	f7fa fab2 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8008d84:	2301      	movs	r3, #1
 8008d86:	2228      	movs	r2, #40	; 0x28
 8008d88:	2105      	movs	r1, #5
 8008d8a:	2003      	movs	r0, #3
 8008d8c:	f7fa faac 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8008d90:	2301      	movs	r3, #1
 8008d92:	2227      	movs	r2, #39	; 0x27
 8008d94:	2106      	movs	r1, #6
 8008d96:	2004      	movs	r0, #4
 8008d98:	f7fa faa6 	bl	80032e8 <lcdVLine>
}
 8008d9c:	bf00      	nop
 8008d9e:	3740      	adds	r7, #64	; 0x40
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20005718 	.word	0x20005718
 8008da8:	0801d658 	.word	0x0801d658
 8008dac:	080447cc 	.word	0x080447cc

08008db0 <showPage2>:
void showPage2(void){
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008db6:	2300      	movs	r3, #0
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	1d3b      	adds	r3, r7, #4
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
 8008dc4:	60da      	str	r2, [r3, #12]
 8008dc6:	611a      	str	r2, [r3, #16]
 8008dc8:	615a      	str	r2, [r3, #20]
 8008dca:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8008dcc:	463b      	mov	r3, r7
 8008dce:	4913      	ldr	r1, [pc, #76]	; (8008e1c <showPage2+0x6c>)
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f00c fec3 	bl	8015b5c <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 8008dd6:	463a      	mov	r2, r7
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <showPage2+0x70>)
 8008dda:	2132      	movs	r1, #50	; 0x32
 8008ddc:	200e      	movs	r0, #14
 8008dde:	f7fa fa03 	bl	80031e8 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8008de2:	2301      	movs	r3, #1
 8008de4:	224e      	movs	r2, #78	; 0x4e
 8008de6:	212d      	movs	r1, #45	; 0x2d
 8008de8:	2001      	movs	r0, #1
 8008dea:	f7fa fa7d 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8008dee:	2301      	movs	r3, #1
 8008df0:	224f      	movs	r2, #79	; 0x4f
 8008df2:	212c      	movs	r1, #44	; 0x2c
 8008df4:	2002      	movs	r0, #2
 8008df6:	f7fa fa77 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	224f      	movs	r2, #79	; 0x4f
 8008dfe:	212c      	movs	r1, #44	; 0x2c
 8008e00:	2003      	movs	r0, #3
 8008e02:	f7fa fa71 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8008e06:	2301      	movs	r3, #1
 8008e08:	224e      	movs	r2, #78	; 0x4e
 8008e0a:	212d      	movs	r1, #45	; 0x2d
 8008e0c:	2004      	movs	r0, #4
 8008e0e:	f7fa fa6b 	bl	80032e8 <lcdVLine>
}
 8008e12:	bf00      	nop
 8008e14:	3720      	adds	r7, #32
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0801d668 	.word	0x0801d668
 8008e20:	080447cc 	.word	0x080447cc

08008e24 <showPage3>:
void showPage3(void){
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	603b      	str	r3, [r7, #0]
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	611a      	str	r2, [r3, #16]
 8008e3c:	615a      	str	r2, [r3, #20]
 8008e3e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8008e40:	463b      	mov	r3, r7
 8008e42:	4913      	ldr	r1, [pc, #76]	; (8008e90 <showPage3+0x6c>)
 8008e44:	4618      	mov	r0, r3
 8008e46:	f00c fe89 	bl	8015b5c <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <showPage3+0x70>)
 8008e4e:	2100      	movs	r1, #0
 8008e50:	2000      	movs	r0, #0
 8008e52:	f7fa f9c9 	bl	80031e8 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008e56:	2301      	movs	r3, #1
 8008e58:	2275      	movs	r2, #117	; 0x75
 8008e5a:	2154      	movs	r1, #84	; 0x54
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	f7fa fa43 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008e62:	2301      	movs	r3, #1
 8008e64:	2276      	movs	r2, #118	; 0x76
 8008e66:	2153      	movs	r1, #83	; 0x53
 8008e68:	2002      	movs	r0, #2
 8008e6a:	f7fa fa3d 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8008e6e:	2301      	movs	r3, #1
 8008e70:	2276      	movs	r2, #118	; 0x76
 8008e72:	2153      	movs	r1, #83	; 0x53
 8008e74:	2003      	movs	r0, #3
 8008e76:	f7fa fa37 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	2275      	movs	r2, #117	; 0x75
 8008e7e:	2154      	movs	r1, #84	; 0x54
 8008e80:	2004      	movs	r0, #4
 8008e82:	f7fa fa31 	bl	80032e8 <lcdVLine>
}
 8008e86:	bf00      	nop
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	0801d66c 	.word	0x0801d66c
 8008e94:	080447cc 	.word	0x080447cc

08008e98 <showPage4>:
void showPage4(void){
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	1d3b      	adds	r3, r7, #4
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	605a      	str	r2, [r3, #4]
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	611a      	str	r2, [r3, #16]
 8008eb0:	615a      	str	r2, [r3, #20]
 8008eb2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	4913      	ldr	r1, [pc, #76]	; (8008f04 <showPage4+0x6c>)
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00c fe4f 	bl	8015b5c <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8008ebe:	463a      	mov	r2, r7
 8008ec0:	4b11      	ldr	r3, [pc, #68]	; (8008f08 <showPage4+0x70>)
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7fa f98f 	bl	80031e8 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8008eca:	2301      	movs	r3, #1
 8008ecc:	229c      	movs	r2, #156	; 0x9c
 8008ece:	217b      	movs	r1, #123	; 0x7b
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	f7fa fa09 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	229d      	movs	r2, #157	; 0x9d
 8008eda:	217a      	movs	r1, #122	; 0x7a
 8008edc:	2002      	movs	r0, #2
 8008ede:	f7fa fa03 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	229d      	movs	r2, #157	; 0x9d
 8008ee6:	217a      	movs	r1, #122	; 0x7a
 8008ee8:	2003      	movs	r0, #3
 8008eea:	f7fa f9fd 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8008eee:	2301      	movs	r3, #1
 8008ef0:	229c      	movs	r2, #156	; 0x9c
 8008ef2:	217b      	movs	r1, #123	; 0x7b
 8008ef4:	2004      	movs	r0, #4
 8008ef6:	f7fa f9f7 	bl	80032e8 <lcdVLine>
}
 8008efa:	bf00      	nop
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	0801d678 	.word	0x0801d678
 8008f08:	080447cc 	.word	0x080447cc

08008f0c <showPage5>:
void showPage5(void){
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8008f12:	2300      	movs	r3, #0
 8008f14:	603b      	str	r3, [r7, #0]
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	609a      	str	r2, [r3, #8]
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	611a      	str	r2, [r3, #16]
 8008f24:	615a      	str	r2, [r3, #20]
 8008f26:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8008f28:	463b      	mov	r3, r7
 8008f2a:	4925      	ldr	r1, [pc, #148]	; (8008fc0 <showPage5+0xb4>)
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f00c fe15 	bl	8015b5c <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8008f32:	463a      	mov	r2, r7
 8008f34:	4b23      	ldr	r3, [pc, #140]	; (8008fc4 <showPage5+0xb8>)
 8008f36:	2100      	movs	r1, #0
 8008f38:	200a      	movs	r0, #10
 8008f3a:	f7fa f955 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <showPage5+0xbc>)
 8008f42:	210f      	movs	r1, #15
 8008f44:	200a      	movs	r0, #10
 8008f46:	f7fa f94f 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	4b1f      	ldr	r3, [pc, #124]	; (8008fcc <showPage5+0xc0>)
 8008f4e:	2132      	movs	r1, #50	; 0x32
 8008f50:	200a      	movs	r0, #10
 8008f52:	f7fa f949 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8008f56:	463a      	mov	r2, r7
 8008f58:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <showPage5+0xc4>)
 8008f5a:	213c      	movs	r1, #60	; 0x3c
 8008f5c:	200a      	movs	r0, #10
 8008f5e:	f7fa f943 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 8008f62:	463a      	mov	r2, r7
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <showPage5+0xc8>)
 8008f66:	215a      	movs	r1, #90	; 0x5a
 8008f68:	200a      	movs	r0, #10
 8008f6a:	f7fa f93d 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8008f6e:	463a      	mov	r2, r7
 8008f70:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <showPage5+0xcc>)
 8008f72:	2178      	movs	r1, #120	; 0x78
 8008f74:	200a      	movs	r0, #10
 8008f76:	f7fa f937 	bl	80031e8 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <showPage5+0xd0>)
 8008f7e:	2196      	movs	r1, #150	; 0x96
 8008f80:	200a      	movs	r0, #10
 8008f82:	f7fa f931 	bl	80031e8 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8008f86:	2301      	movs	r3, #1
 8008f88:	22c3      	movs	r2, #195	; 0xc3
 8008f8a:	21a2      	movs	r1, #162	; 0xa2
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f7fa f9ab 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8008f92:	2301      	movs	r3, #1
 8008f94:	22c4      	movs	r2, #196	; 0xc4
 8008f96:	21a1      	movs	r1, #161	; 0xa1
 8008f98:	2002      	movs	r0, #2
 8008f9a:	f7fa f9a5 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	22c4      	movs	r2, #196	; 0xc4
 8008fa2:	21a1      	movs	r1, #161	; 0xa1
 8008fa4:	2003      	movs	r0, #3
 8008fa6:	f7fa f99f 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8008faa:	2301      	movs	r3, #1
 8008fac:	22c3      	movs	r2, #195	; 0xc3
 8008fae:	21a2      	movs	r1, #162	; 0xa2
 8008fb0:	2004      	movs	r0, #4
 8008fb2:	f7fa f999 	bl	80032e8 <lcdVLine>
}
 8008fb6:	bf00      	nop
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0801d684 	.word	0x0801d684
 8008fc4:	080426bc 	.word	0x080426bc
 8008fc8:	08043204 	.word	0x08043204
 8008fcc:	0803fcd4 	.word	0x0803fcd4
 8008fd0:	08040150 	.word	0x08040150
 8008fd4:	080411ac 	.word	0x080411ac
 8008fd8:	08041c34 	.word	0x08041c34
 8008fdc:	080447cc 	.word	0x080447cc

08008fe0 <showPage6>:
void showPage6(void){
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	22ea      	movs	r2, #234	; 0xea
 8008fea:	21c9      	movs	r1, #201	; 0xc9
 8008fec:	2001      	movs	r0, #1
 8008fee:	f7fa f97b 	bl	80032e8 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	22eb      	movs	r2, #235	; 0xeb
 8008ff6:	21c8      	movs	r1, #200	; 0xc8
 8008ff8:	2002      	movs	r0, #2
 8008ffa:	f7fa f975 	bl	80032e8 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8008ffe:	2301      	movs	r3, #1
 8009000:	22eb      	movs	r2, #235	; 0xeb
 8009002:	21c8      	movs	r1, #200	; 0xc8
 8009004:	2003      	movs	r0, #3
 8009006:	f7fa f96f 	bl	80032e8 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800900a:	2301      	movs	r3, #1
 800900c:	22ea      	movs	r2, #234	; 0xea
 800900e:	21c9      	movs	r1, #201	; 0xc9
 8009010:	2004      	movs	r0, #4
 8009012:	f7fa f969 	bl	80032e8 <lcdVLine>
		lcdRect(0,399,25,80,1);
 8009016:	2301      	movs	r3, #1
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	2350      	movs	r3, #80	; 0x50
 800901c:	2219      	movs	r2, #25
 800901e:	f240 118f 	movw	r1, #399	; 0x18f
 8009022:	2000      	movs	r0, #0
 8009024:	f7fa fefe 	bl	8003e24 <lcdRect>
		lcdRect(0,399,120,180,1);
 8009028:	2301      	movs	r3, #1
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	23b4      	movs	r3, #180	; 0xb4
 800902e:	2278      	movs	r2, #120	; 0x78
 8009030:	f240 118f 	movw	r1, #399	; 0x18f
 8009034:	2000      	movs	r0, #0
 8009036:	f7fa fef5 	bl	8003e24 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 800903a:	2301      	movs	r3, #1
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	2300      	movs	r3, #0
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	2303      	movs	r3, #3
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	2332      	movs	r3, #50	; 0x32
 8009048:	220a      	movs	r2, #10
 800904a:	2132      	movs	r1, #50	; 0x32
 800904c:	200a      	movs	r0, #10
 800904e:	f7fa ff0e 	bl	8003e6e <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8009052:	2301      	movs	r3, #1
 8009054:	9302      	str	r3, [sp, #8]
 8009056:	2301      	movs	r3, #1
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	2303      	movs	r3, #3
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2332      	movs	r3, #50	; 0x32
 8009060:	220a      	movs	r2, #10
 8009062:	2164      	movs	r1, #100	; 0x64
 8009064:	203c      	movs	r0, #60	; 0x3c
 8009066:	f7fa ff02 	bl	8003e6e <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 800906a:	2301      	movs	r3, #1
 800906c:	9302      	str	r3, [sp, #8]
 800906e:	2302      	movs	r3, #2
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	2303      	movs	r3, #3
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2332      	movs	r3, #50	; 0x32
 8009078:	220a      	movs	r2, #10
 800907a:	2196      	movs	r1, #150	; 0x96
 800907c:	206e      	movs	r0, #110	; 0x6e
 800907e:	f7fa fef6 	bl	8003e6e <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8009082:	2301      	movs	r3, #1
 8009084:	9302      	str	r3, [sp, #8]
 8009086:	2303      	movs	r3, #3
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	2303      	movs	r3, #3
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	2332      	movs	r3, #50	; 0x32
 8009090:	220a      	movs	r2, #10
 8009092:	21c8      	movs	r1, #200	; 0xc8
 8009094:	20a0      	movs	r0, #160	; 0xa0
 8009096:	f7fa feea 	bl	8003e6e <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 800909a:	2301      	movs	r3, #1
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	2304      	movs	r3, #4
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	2303      	movs	r3, #3
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2332      	movs	r3, #50	; 0x32
 80090a8:	220a      	movs	r2, #10
 80090aa:	21fa      	movs	r1, #250	; 0xfa
 80090ac:	20d2      	movs	r0, #210	; 0xd2
 80090ae:	f7fa fede 	bl	8003e6e <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 80090b2:	2301      	movs	r3, #1
 80090b4:	9302      	str	r3, [sp, #8]
 80090b6:	2305      	movs	r3, #5
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	2303      	movs	r3, #3
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	2332      	movs	r3, #50	; 0x32
 80090c0:	220a      	movs	r2, #10
 80090c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80090c6:	f44f 7082 	mov.w	r0, #260	; 0x104
 80090ca:	f7fa fed0 	bl	8003e6e <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 80090ce:	2301      	movs	r3, #1
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	2306      	movs	r3, #6
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	2303      	movs	r3, #3
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	2332      	movs	r3, #50	; 0x32
 80090dc:	220a      	movs	r2, #10
 80090de:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80090e2:	f44f 709b 	mov.w	r0, #310	; 0x136
 80090e6:	f7fa fec2 	bl	8003e6e <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 80090ea:	2301      	movs	r3, #1
 80090ec:	9302      	str	r3, [sp, #8]
 80090ee:	2307      	movs	r3, #7
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	2303      	movs	r3, #3
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2364      	movs	r3, #100	; 0x64
 80090f8:	223c      	movs	r2, #60	; 0x3c
 80090fa:	2132      	movs	r1, #50	; 0x32
 80090fc:	200a      	movs	r0, #10
 80090fe:	f7fa feb6 	bl	8003e6e <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8009102:	2301      	movs	r3, #1
 8009104:	9302      	str	r3, [sp, #8]
 8009106:	2308      	movs	r3, #8
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	2303      	movs	r3, #3
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	2364      	movs	r3, #100	; 0x64
 8009110:	223c      	movs	r2, #60	; 0x3c
 8009112:	2164      	movs	r1, #100	; 0x64
 8009114:	203c      	movs	r0, #60	; 0x3c
 8009116:	f7fa feaa 	bl	8003e6e <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 800911a:	2301      	movs	r3, #1
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	2309      	movs	r3, #9
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	2303      	movs	r3, #3
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	2364      	movs	r3, #100	; 0x64
 8009128:	223c      	movs	r2, #60	; 0x3c
 800912a:	2196      	movs	r1, #150	; 0x96
 800912c:	206e      	movs	r0, #110	; 0x6e
 800912e:	f7fa fe9e 	bl	8003e6e <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8009132:	2301      	movs	r3, #1
 8009134:	9302      	str	r3, [sp, #8]
 8009136:	230a      	movs	r3, #10
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	2303      	movs	r3, #3
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	2364      	movs	r3, #100	; 0x64
 8009140:	223c      	movs	r2, #60	; 0x3c
 8009142:	21c8      	movs	r1, #200	; 0xc8
 8009144:	20a0      	movs	r0, #160	; 0xa0
 8009146:	f7fa fe92 	bl	8003e6e <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 800914a:	2301      	movs	r3, #1
 800914c:	9302      	str	r3, [sp, #8]
 800914e:	230b      	movs	r3, #11
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	2303      	movs	r3, #3
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	2364      	movs	r3, #100	; 0x64
 8009158:	223c      	movs	r2, #60	; 0x3c
 800915a:	21fa      	movs	r1, #250	; 0xfa
 800915c:	20d2      	movs	r0, #210	; 0xd2
 800915e:	f7fa fe86 	bl	8003e6e <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8009162:	2301      	movs	r3, #1
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	230c      	movs	r3, #12
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	2303      	movs	r3, #3
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	2364      	movs	r3, #100	; 0x64
 8009170:	223c      	movs	r2, #60	; 0x3c
 8009172:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009176:	f44f 7082 	mov.w	r0, #260	; 0x104
 800917a:	f7fa fe78 	bl	8003e6e <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 800917e:	2301      	movs	r3, #1
 8009180:	9302      	str	r3, [sp, #8]
 8009182:	230d      	movs	r3, #13
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	2303      	movs	r3, #3
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	2364      	movs	r3, #100	; 0x64
 800918c:	223c      	movs	r2, #60	; 0x3c
 800918e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8009192:	f44f 709b 	mov.w	r0, #310	; 0x136
 8009196:	f7fa fe6a 	bl	8003e6e <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 800919a:	2301      	movs	r3, #1
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	230e      	movs	r3, #14
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	2303      	movs	r3, #3
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	2396      	movs	r3, #150	; 0x96
 80091a8:	226e      	movs	r2, #110	; 0x6e
 80091aa:	2132      	movs	r1, #50	; 0x32
 80091ac:	200a      	movs	r0, #10
 80091ae:	f7fa fe5e 	bl	8003e6e <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 80091b2:	2301      	movs	r3, #1
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	230f      	movs	r3, #15
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	2303      	movs	r3, #3
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2396      	movs	r3, #150	; 0x96
 80091c0:	226e      	movs	r2, #110	; 0x6e
 80091c2:	2164      	movs	r1, #100	; 0x64
 80091c4:	203c      	movs	r0, #60	; 0x3c
 80091c6:	f7fa fe52 	bl	8003e6e <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 80091ca:	2301      	movs	r3, #1
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	2310      	movs	r3, #16
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2303      	movs	r3, #3
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2396      	movs	r3, #150	; 0x96
 80091d8:	226e      	movs	r2, #110	; 0x6e
 80091da:	2196      	movs	r1, #150	; 0x96
 80091dc:	206e      	movs	r0, #110	; 0x6e
 80091de:	f7fa fe46 	bl	8003e6e <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 80091e2:	2301      	movs	r3, #1
 80091e4:	9302      	str	r3, [sp, #8]
 80091e6:	2311      	movs	r3, #17
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	2303      	movs	r3, #3
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	2396      	movs	r3, #150	; 0x96
 80091f0:	226e      	movs	r2, #110	; 0x6e
 80091f2:	21c8      	movs	r1, #200	; 0xc8
 80091f4:	20a0      	movs	r0, #160	; 0xa0
 80091f6:	f7fa fe3a 	bl	8003e6e <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 80091fa:	2301      	movs	r3, #1
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	2312      	movs	r3, #18
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	2303      	movs	r3, #3
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	2396      	movs	r3, #150	; 0x96
 8009208:	226e      	movs	r2, #110	; 0x6e
 800920a:	21fa      	movs	r1, #250	; 0xfa
 800920c:	20d2      	movs	r0, #210	; 0xd2
 800920e:	f7fa fe2e 	bl	8003e6e <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8009212:	2301      	movs	r3, #1
 8009214:	9302      	str	r3, [sp, #8]
 8009216:	2313      	movs	r3, #19
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	2303      	movs	r3, #3
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	2396      	movs	r3, #150	; 0x96
 8009220:	226e      	movs	r2, #110	; 0x6e
 8009222:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009226:	f44f 7082 	mov.w	r0, #260	; 0x104
 800922a:	f7fa fe20 	bl	8003e6e <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 800922e:	2301      	movs	r3, #1
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	2314      	movs	r3, #20
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	2303      	movs	r3, #3
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	2396      	movs	r3, #150	; 0x96
 800923c:	226e      	movs	r2, #110	; 0x6e
 800923e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8009242:	f44f 709b 	mov.w	r0, #310	; 0x136
 8009246:	f7fa fe12 	bl	8003e6e <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 800924a:	2304      	movs	r3, #4
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	2301      	movs	r3, #1
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	23c8      	movs	r3, #200	; 0xc8
 8009254:	22a0      	movs	r2, #160	; 0xa0
 8009256:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800925a:	200a      	movs	r0, #10
 800925c:	f7fa fe07 	bl	8003e6e <lcdRect2>
}
 8009260:	bf00      	nop
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <showPage>:

void showPage(uint8_t pageNum){
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	2b05      	cmp	r3, #5
 8009276:	d821      	bhi.n	80092bc <showPage+0x54>
 8009278:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <showPage+0x18>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	08009299 	.word	0x08009299
 8009284:	0800929f 	.word	0x0800929f
 8009288:	080092a5 	.word	0x080092a5
 800928c:	080092ab 	.word	0x080092ab
 8009290:	080092b1 	.word	0x080092b1
 8009294:	080092b7 	.word	0x080092b7
	case 0:
		showPage1();
 8009298:	f7ff fd3a 	bl	8008d10 <showPage1>
		break;
 800929c:	e00e      	b.n	80092bc <showPage+0x54>
	case 1:
		showPage2();
 800929e:	f7ff fd87 	bl	8008db0 <showPage2>
		break;
 80092a2:	e00b      	b.n	80092bc <showPage+0x54>
	case 2:
		showPage3();
 80092a4:	f7ff fdbe 	bl	8008e24 <showPage3>
		break;
 80092a8:	e008      	b.n	80092bc <showPage+0x54>
	case 3:
		showPage4();
 80092aa:	f7ff fdf5 	bl	8008e98 <showPage4>
		break;
 80092ae:	e005      	b.n	80092bc <showPage+0x54>
	case 4:
		showPage5();
 80092b0:	f7ff fe2c 	bl	8008f0c <showPage5>
		break;
 80092b4:	e002      	b.n	80092bc <showPage+0x54>
	case 5:
		showPage6();
 80092b6:	f7ff fe93 	bl	8008fe0 <showPage6>
		break;
 80092ba:	bf00      	nop
	}
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <setDefaultClbcks+0x28>)
 80092ca:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <setDefaultClbcks+0x2c>)
 80092cc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80092ce:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <setDefaultClbcks+0x30>)
 80092d0:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <setDefaultClbcks+0x34>)
 80092d2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <setDefaultClbcks+0x38>)
 80092d6:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <setDefaultClbcks+0x3c>)
 80092d8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 80092da:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <setDefaultClbcks+0x40>)
 80092dc:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <setDefaultClbcks+0x44>)
 80092de:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20002588 	.word	0x20002588
 80092f0:	08002b25 	.word	0x08002b25
 80092f4:	200025d0 	.word	0x200025d0
 80092f8:	08002b35 	.word	0x08002b35
 80092fc:	2000263c 	.word	0x2000263c
 8009300:	08008c9d 	.word	0x08008c9d
 8009304:	200025f4 	.word	0x200025f4
 8009308:	08008cd5 	.word	0x08008cd5

0800930c <screentestSetup>:


void screentestSetup(void){
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009310:	f7ff ffd8 	bl	80092c4 <setDefaultClbcks>
}
 8009314:	bf00      	nop
 8009316:	bd80      	pop	{r7, pc}

08009318 <screentestMain>:

void screentestMain(void){
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 800931e:	2300      	movs	r3, #0
 8009320:	603b      	str	r3, [r7, #0]
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	605a      	str	r2, [r3, #4]
 800932a:	609a      	str	r2, [r3, #8]
 800932c:	60da      	str	r2, [r3, #12]
 800932e:	611a      	str	r2, [r3, #16]
 8009330:	615a      	str	r2, [r3, #20]
 8009332:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <screentestMain+0x30>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff ff95 	bl	8009268 <showPage>

}
 800933e:	bf00      	nop
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20005d21 	.word	0x20005d21

0800934c <setDefaultClbcks>:
#include "sdcardModule.h"
#include "contextMenu.h"
#include "fonts/fonts.h"
#include "File_Handling.h"

static void setDefaultClbcks(void){
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
	// module callbacks
//	btn_B2.onSinglePressHandler = &showCntxMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <setDefaultClbcks+0x1c>)
 8009352:	4a06      	ldr	r2, [pc, #24]	; (800936c <setDefaultClbcks+0x20>)
 8009354:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009356:	4b06      	ldr	r3, [pc, #24]	; (8009370 <setDefaultClbcks+0x24>)
 8009358:	4a06      	ldr	r2, [pc, #24]	; (8009374 <setDefaultClbcks+0x28>)
 800935a:	611a      	str	r2, [r3, #16]
}
 800935c:	bf00      	nop
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20002588 	.word	0x20002588
 800936c:	08002b25 	.word	0x08002b25
 8009370:	200025d0 	.word	0x200025d0
 8009374:	08002b35 	.word	0x08002b35

08009378 <sdcardSetup>:
//static const struct ContextAction action2 = {"Unmount SD card", &setDateAction};
//static const struct ContextAction action3 = {"Customize", &setTimeAction};
//static const struct ContextAction action4 = {"Lock", &setTimeAction};
//static const struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void sdcardSetup(void){
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800937c:	f7ff ffe6 	bl	800934c <setDefaultClbcks>
//	setupCntxMenu(&setDefaultClbcks);
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8009380:	bf00      	nop
 8009382:	bd80      	pop	{r7, pc}

08009384 <sdcardMain>:
void sdcardMain(void){
 8009384:	b580      	push	{r7, lr}
 8009386:	b0a8      	sub	sp, #160	; 0xa0
 8009388:	af00      	add	r7, sp, #0
	char title[50] = {0};
 800938a:	2300      	movs	r3, #0
 800938c:	667b      	str	r3, [r7, #100]	; 0x64
 800938e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009392:	222e      	movs	r2, #46	; 0x2e
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f00b fab2 	bl	8014900 <memset>
	sprintf(&title, "SD card explorer");
 800939c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093a0:	492f      	ldr	r1, [pc, #188]	; (8009460 <sdcardMain+0xdc>)
 80093a2:	4618      	mov	r0, r3
 80093a4:	f00c fbda 	bl	8015b5c <siprintf>
	lcdPutStr(0, 0, title, smallestFont);
 80093a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80093ac:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <sdcardMain+0xe0>)
 80093ae:	2100      	movs	r1, #0
 80093b0:	2000      	movs	r0, #0
 80093b2:	f7f9 ff19 	bl	80031e8 <lcdPutStr>
	char freeTotal[50];
	Check_SD_Space(&freeTotal);
 80093b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f8 f8d8 	bl	8001570 <Check_SD_Space>
	sprintf(&title, "Free/total space: %s [kB]", freeTotal);
 80093c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80093c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093c8:	4927      	ldr	r1, [pc, #156]	; (8009468 <sdcardMain+0xe4>)
 80093ca:	4618      	mov	r0, r3
 80093cc:	f00c fbc6 	bl	8015b5c <siprintf>
	lcdPutStr(0, 12, title, smallestFont);
 80093d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80093d4:	4b23      	ldr	r3, [pc, #140]	; (8009464 <sdcardMain+0xe0>)
 80093d6:	210c      	movs	r1, #12
 80093d8:	2000      	movs	r0, #0
 80093da:	f7f9 ff05 	bl	80031e8 <lcdPutStr>

    DIR dir;
	UINT i;
	char *path = malloc(20*sizeof (char));
 80093de:	2014      	movs	r0, #20
 80093e0:	f00b fa70 	bl	80148c4 <malloc>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sprintf (path, "%s","/");
 80093ea:	4a20      	ldr	r2, [pc, #128]	; (800946c <sdcardMain+0xe8>)
 80093ec:	4920      	ldr	r1, [pc, #128]	; (8009470 <sdcardMain+0xec>)
 80093ee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80093f2:	f00c fbb3 	bl	8015b5c <siprintf>
    f_opendir(&dir, path);                       /* Open the directory */
 80093f6:	463b      	mov	r3, r7
 80093f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80093fc:	4618      	mov	r0, r3
 80093fe:	f00a fe8a 	bl	8014116 <f_opendir>
	for(uint8_t i = 1; i<10; i++){
 8009402:	2301      	movs	r3, #1
 8009404:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8009408:	e01a      	b.n	8009440 <sdcardMain+0xbc>
		Scan_SD_my(&dir, &title);
 800940a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800940e:	463b      	mov	r3, r7
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f7 fe42 	bl	800109c <Scan_SD_my>
		lcdPutStr(0, 12+i*12, title, smallestFont);
 8009418:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800941c:	3301      	adds	r3, #1
 800941e:	b2db      	uxtb	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	0052      	lsls	r2, r2, #1
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	b2d9      	uxtb	r1, r3
 800942a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <sdcardMain+0xe0>)
 8009430:	2000      	movs	r0, #0
 8009432:	f7f9 fed9 	bl	80031e8 <lcdPutStr>
	for(uint8_t i = 1; i<10; i++){
 8009436:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800943a:	3301      	adds	r3, #1
 800943c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8009440:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009444:	2b09      	cmp	r3, #9
 8009446:	d9e0      	bls.n	800940a <sdcardMain+0x86>
	}
	f_closedir(&dir);
 8009448:	463b      	mov	r3, r7
 800944a:	4618      	mov	r0, r3
 800944c:	f00a fed6 	bl	80141fc <f_closedir>
    free(path);
 8009450:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009454:	f00b fa3e 	bl	80148d4 <free>

//	lcdPutStr(0,60, fileText, smallestFont);
//	lcdRefresh();
//	enableCntxMenu();
}
 8009458:	bf00      	nop
 800945a:	37a0      	adds	r7, #160	; 0xa0
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	0801d74c 	.word	0x0801d74c
 8009464:	08046634 	.word	0x08046634
 8009468:	0801d760 	.word	0x0801d760
 800946c:	0801d77c 	.word	0x0801d77c
 8009470:	0801d780 	.word	0x0801d780

08009474 <addOne>:

static const menuConfig_t menuConfig = {10, 30, 200, 380, MENU_SHOW_SCROLL, 4, MENU_WRAPPING_ENABLED, zekton21font, 24};

void enterMenu(menuList_t *selectedMenu);

void addOne(void){
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
	counter++;
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <addOne+0x1c>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	3301      	adds	r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	4b03      	ldr	r3, [pc, #12]	; (8009490 <addOne+0x1c>)
 8009482:	701a      	strb	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20005d22 	.word	0x20005d22

08009494 <incMenuPosition>:
menuList_t *activeMenu = &settingsMenu;
void enterMenu(menuList_t *selectedMenu){
	activeMenu = selectedMenu;
}

void incMenuPosition(void){
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
	if(settingsMenu.currentPosition<(menuConfig.itemNum-1)){
 8009498:	4b10      	ldr	r3, [pc, #64]	; (80094dc <incMenuPosition+0x48>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	2304      	movs	r3, #4
 80094a0:	3b01      	subs	r3, #1
 80094a2:	429a      	cmp	r2, r3
 80094a4:	da06      	bge.n	80094b4 <incMenuPosition+0x20>
		settingsMenu.currentPosition++;
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <incMenuPosition+0x48>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <incMenuPosition+0x48>)
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e005      	b.n	80094c0 <incMenuPosition+0x2c>
	} else {
		if(menuConfig.wrappingEnabled) settingsMenu.currentPosition=0;
 80094b4:	2301      	movs	r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <incMenuPosition+0x2c>
 80094ba:	4b08      	ldr	r3, [pc, #32]	; (80094dc <incMenuPosition+0x48>)
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
	}
	btn_BB.onSinglePressHandler = menuItemArray[settingsMenu.currentPosition]->action;
 80094c0:	4b06      	ldr	r3, [pc, #24]	; (80094dc <incMenuPosition+0x48>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <incMenuPosition+0x4c>)
 80094c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4a05      	ldr	r2, [pc, #20]	; (80094e4 <incMenuPosition+0x50>)
 80094d0:	6113      	str	r3, [r2, #16]
}
 80094d2:	bf00      	nop
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	200000e8 	.word	0x200000e8
 80094e0:	200000d8 	.word	0x200000d8
 80094e4:	200025ac 	.word	0x200025ac

080094e8 <decMenuPosition>:
void decMenuPosition(void){
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
	if(settingsMenu.currentPosition>0){
 80094ec:	4b10      	ldr	r3, [pc, #64]	; (8009530 <decMenuPosition+0x48>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d006      	beq.n	8009502 <decMenuPosition+0x1a>
		settingsMenu.currentPosition--;
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <decMenuPosition+0x48>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <decMenuPosition+0x48>)
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	e007      	b.n	8009512 <decMenuPosition+0x2a>
	} else {
		if(menuConfig.wrappingEnabled) settingsMenu.currentPosition=menuConfig.itemNum-1;
 8009502:	2301      	movs	r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <decMenuPosition+0x2a>
 8009508:	2304      	movs	r3, #4
 800950a:	3b01      	subs	r3, #1
 800950c:	b2da      	uxtb	r2, r3
 800950e:	4b08      	ldr	r3, [pc, #32]	; (8009530 <decMenuPosition+0x48>)
 8009510:	701a      	strb	r2, [r3, #0]
	}
	btn_BB.onSinglePressHandler = menuItemArray[settingsMenu.currentPosition]->action;
 8009512:	4b07      	ldr	r3, [pc, #28]	; (8009530 <decMenuPosition+0x48>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <decMenuPosition+0x4c>)
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a05      	ldr	r2, [pc, #20]	; (8009538 <decMenuPosition+0x50>)
 8009522:	6113      	str	r3, [r2, #16]
}
 8009524:	bf00      	nop
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	200000e8 	.word	0x200000e8
 8009534:	200000d8 	.word	0x200000d8
 8009538:	200025ac 	.word	0x200025ac

0800953c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <setDefaultClbcks+0x30>)
 8009542:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <setDefaultClbcks+0x34>)
 8009544:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <setDefaultClbcks+0x38>)
 8009548:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <setDefaultClbcks+0x3c>)
 800954a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &decMenuPosition;
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <setDefaultClbcks+0x40>)
 800954e:	4a0c      	ldr	r2, [pc, #48]	; (8009580 <setDefaultClbcks+0x44>)
 8009550:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &incMenuPosition;
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <setDefaultClbcks+0x48>)
 8009554:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <setDefaultClbcks+0x4c>)
 8009556:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = settingsMenu.actionClbk;
 8009558:	4b0c      	ldr	r3, [pc, #48]	; (800958c <setDefaultClbcks+0x50>)
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4a0c      	ldr	r2, [pc, #48]	; (8009590 <setDefaultClbcks+0x54>)
 800955e:	6113      	str	r3, [r2, #16]
}
 8009560:	bf00      	nop
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20002588 	.word	0x20002588
 8009570:	08002b25 	.word	0x08002b25
 8009574:	200025d0 	.word	0x200025d0
 8009578:	08002b35 	.word	0x08002b35
 800957c:	2000263c 	.word	0x2000263c
 8009580:	080094e9 	.word	0x080094e9
 8009584:	200025f4 	.word	0x200025f4
 8009588:	08009495 	.word	0x08009495
 800958c:	200000e8 	.word	0x200000e8
 8009590:	200025ac 	.word	0x200025ac

08009594 <drawMenuItem>:

void drawMenuItem(menuItem_t *item, uint8_t isActive, uint16_t x, uint16_t y){
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b08f      	sub	sp, #60	; 0x3c
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	4608      	mov	r0, r1
 800959e:	4611      	mov	r1, r2
 80095a0:	461a      	mov	r2, r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	72fb      	strb	r3, [r7, #11]
 80095a6:	460b      	mov	r3, r1
 80095a8:	813b      	strh	r3, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
	char tempStr[30] = {0};
 80095ae:	2300      	movs	r3, #0
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	f107 0314 	add.w	r3, r7, #20
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	605a      	str	r2, [r3, #4]
 80095bc:	609a      	str	r2, [r3, #8]
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	611a      	str	r2, [r3, #16]
 80095c2:	615a      	str	r2, [r3, #20]
 80095c4:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, item->label);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	f107 0310 	add.w	r3, r7, #16
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f00c fac3 	bl	8015b5c <siprintf>
	lcdPutStr(x+2, y+2, tempStr, menuConfig.font);
 80095d6:	893b      	ldrh	r3, [r7, #8]
 80095d8:	3302      	adds	r3, #2
 80095da:	b298      	uxth	r0, r3
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	3302      	adds	r3, #2
 80095e2:	b2d9      	uxtb	r1, r3
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <drawMenuItem+0x88>)
 80095e6:	f107 0210 	add.w	r2, r7, #16
 80095ea:	f7f9 fdfd 	bl	80031e8 <lcdPutStr>
	if(isActive){
 80095ee:	7afb      	ldrb	r3, [r7, #11]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <drawMenuItem+0x7e>
		lcdRect(x, x+menuConfig.width-8, y, y+menuConfig.listItemHeight, 2);
 80095f4:	8938      	ldrh	r0, [r7, #8]
 80095f6:	893b      	ldrh	r3, [r7, #8]
 80095f8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80095fc:	4413      	add	r3, r2
 80095fe:	f1a3 0108 	sub.w	r1, r3, #8
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	88fb      	ldrh	r3, [r7, #6]
 8009606:	2418      	movs	r4, #24
 8009608:	4423      	add	r3, r4
 800960a:	2402      	movs	r4, #2
 800960c:	9400      	str	r4, [sp, #0]
 800960e:	f7fa fc09 	bl	8003e24 <lcdRect>
	}
}
 8009612:	bf00      	nop
 8009614:	3734      	adds	r7, #52	; 0x34
 8009616:	46bd      	mov	sp, r7
 8009618:	bd90      	pop	{r4, r7, pc}
 800961a:	bf00      	nop
 800961c:	08047b0c 	.word	0x08047b0c

08009620 <drawMenu>:
void drawMenu(menuList_t *menu, uint16_t x, uint16_t y){
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b089      	sub	sp, #36	; 0x24
 8009624:	af02      	add	r7, sp, #8
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	807b      	strh	r3, [r7, #2]
 800962c:	4613      	mov	r3, r2
 800962e:	803b      	strh	r3, [r7, #0]
	uint8_t fittingItemCount = menuConfig.height/menuConfig.listItemHeight;
 8009630:	23c8      	movs	r3, #200	; 0xc8
 8009632:	461a      	mov	r2, r3
 8009634:	2318      	movs	r3, #24
 8009636:	fb92 f3f3 	sdiv	r3, r2, r3
 800963a:	75bb      	strb	r3, [r7, #22]
	if(menuConfig.showScroll & (menuConfig.itemNum > fittingItemCount)){
 800963c:	2301      	movs	r3, #1
 800963e:	4619      	mov	r1, r3
 8009640:	2204      	movs	r2, #4
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	4293      	cmp	r3, r2
 8009646:	bf34      	ite	cc
 8009648:	2301      	movcc	r3, #1
 800964a:	2300      	movcs	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	400b      	ands	r3, r1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01f      	beq.n	8009694 <drawMenu+0x74>
		uint16_t barXstart = menuConfig.x+menuConfig.width-2;
 8009654:	220a      	movs	r2, #10
 8009656:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800965a:	4413      	add	r3, r2
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b02      	subs	r3, #2
 8009660:	82bb      	strh	r3, [r7, #20]
		uint16_t barXend = menuConfig.x+menuConfig.width;
 8009662:	220a      	movs	r2, #10
 8009664:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8009668:	4413      	add	r3, r2
 800966a:	827b      	strh	r3, [r7, #18]
		uint16_t scrollBarHeight = (fittingItemCount)*menuConfig.height/menuConfig.itemNum;
 800966c:	7dbb      	ldrb	r3, [r7, #22]
 800966e:	22c8      	movs	r2, #200	; 0xc8
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	2204      	movs	r2, #4
 8009676:	fb93 f3f2 	sdiv	r3, r3, r2
 800967a:	823b      	strh	r3, [r7, #16]
		lcdRect(barXstart, barXend, menuConfig.y, scrollBarHeight+menuConfig.y, 1);
 800967c:	8ab8      	ldrh	r0, [r7, #20]
 800967e:	8a79      	ldrh	r1, [r7, #18]
 8009680:	231e      	movs	r3, #30
 8009682:	461c      	mov	r4, r3
 8009684:	8a3b      	ldrh	r3, [r7, #16]
 8009686:	221e      	movs	r2, #30
 8009688:	4413      	add	r3, r2
 800968a:	2201      	movs	r2, #1
 800968c:	9200      	str	r2, [sp, #0]
 800968e:	4622      	mov	r2, r4
 8009690:	f7fa fbc8 	bl	8003e24 <lcdRect>
	}
	for(uint8_t i = 0; i < menuConfig.itemNum; i++){
 8009694:	2300      	movs	r3, #0
 8009696:	75fb      	strb	r3, [r7, #23]
 8009698:	e020      	b.n	80096dc <drawMenu+0xbc>
		menuItem_t *item = menu->items[0];
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	60fb      	str	r3, [r7, #12]
		drawMenuItem(menuItemArray[i], i==menu->currentPosition, x, y+(menuConfig.listItemHeight+1)*i);
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	4a13      	ldr	r2, [pc, #76]	; (80096f0 <drawMenu+0xd0>)
 80096a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	7dfa      	ldrb	r2, [r7, #23]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	4619      	mov	r1, r3
 80096ba:	2318      	movs	r3, #24
 80096bc:	3301      	adds	r3, #1
 80096be:	b29a      	uxth	r2, r3
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	fb12 f303 	smulbb	r3, r2, r3
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	883b      	ldrh	r3, [r7, #0]
 80096cc:	4413      	add	r3, r2
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	887a      	ldrh	r2, [r7, #2]
 80096d2:	f7ff ff5f 	bl	8009594 <drawMenuItem>
	for(uint8_t i = 0; i < menuConfig.itemNum; i++){
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	3301      	adds	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
 80096dc:	2204      	movs	r2, #4
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d3da      	bcc.n	800969a <drawMenu+0x7a>
	}
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd90      	pop	{r4, r7, pc}
 80096ee:	bf00      	nop
 80096f0:	200000d8 	.word	0x200000d8

080096f4 <settingsSetup>:



void settingsSetup(void){
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80096f8:	f7ff ff20 	bl	800953c <setDefaultClbcks>

}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}

08009700 <settingsMain>:

void settingsMain(void){
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af00      	add	r7, sp, #0
	drawMenu(activeMenu, 10, 30);
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <settingsMain+0x68>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	221e      	movs	r2, #30
 800970c:	210a      	movs	r1, #10
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff ff86 	bl	8009620 <drawMenu>
	char tempStr[30] = {0};
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	605a      	str	r2, [r3, #4]
 8009720:	609a      	str	r2, [r3, #8]
 8009722:	60da      	str	r2, [r3, #12]
 8009724:	611a      	str	r2, [r3, #16]
 8009726:	615a      	str	r2, [r3, #20]
 8009728:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings will be shown");
 800972a:	463b      	mov	r3, r7
 800972c:	490f      	ldr	r1, [pc, #60]	; (800976c <settingsMain+0x6c>)
 800972e:	4618      	mov	r0, r3
 8009730:	f00c fa14 	bl	8015b5c <siprintf>
	lcdPutStr(0, 0, tempStr, font_13_calibri);
 8009734:	463a      	mov	r2, r7
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <settingsMain+0x70>)
 8009738:	2100      	movs	r1, #0
 800973a:	2000      	movs	r0, #0
 800973c:	f7f9 fd54 	bl	80031e8 <lcdPutStr>
	sprintf(&tempStr, "cnt:%d", counter);
 8009740:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <settingsMain+0x74>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	463b      	mov	r3, r7
 8009748:	490b      	ldr	r1, [pc, #44]	; (8009778 <settingsMain+0x78>)
 800974a:	4618      	mov	r0, r3
 800974c:	f00c fa06 	bl	8015b5c <siprintf>
	lcdPutStr(310, 0, tempStr, font_13_calibri);
 8009750:	463a      	mov	r2, r7
 8009752:	4b07      	ldr	r3, [pc, #28]	; (8009770 <settingsMain+0x70>)
 8009754:	2100      	movs	r1, #0
 8009756:	f44f 709b 	mov.w	r0, #310	; 0x136
 800975a:	f7f9 fd45 	bl	80031e8 <lcdPutStr>

}
 800975e:	bf00      	nop
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000110 	.word	0x20000110
 800976c:	0801d89c 	.word	0x0801d89c
 8009770:	08046ab0 	.word	0x08046ab0
 8009774:	20005d22 	.word	0x20005d22
 8009778:	0801d8b4 	.word	0x0801d8b4

0800977c <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
	stwStart();
 8009780:	f7fb f8d2 	bl	8004928 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8009784:	4b03      	ldr	r3, [pc, #12]	; (8009794 <startStopwatch+0x18>)
 8009786:	4a04      	ldr	r2, [pc, #16]	; (8009798 <startStopwatch+0x1c>)
 8009788:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 800978a:	4b04      	ldr	r3, [pc, #16]	; (800979c <startStopwatch+0x20>)
 800978c:	4a04      	ldr	r2, [pc, #16]	; (80097a0 <startStopwatch+0x24>)
 800978e:	611a      	str	r2, [r3, #16]
}
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200025ac 	.word	0x200025ac
 8009798:	080097a5 	.word	0x080097a5
 800979c:	20002618 	.word	0x20002618
 80097a0:	080097e5 	.word	0x080097e5

080097a4 <stopStopwatch>:
void stopStopwatch(){
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
	stwStop();
 80097a8:	f7fb f8e4 	bl	8004974 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <stopStopwatch+0x18>)
 80097ae:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <stopStopwatch+0x1c>)
 80097b0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 80097b2:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <stopStopwatch+0x20>)
 80097b4:	4a04      	ldr	r2, [pc, #16]	; (80097c8 <stopStopwatch+0x24>)
 80097b6:	611a      	str	r2, [r3, #16]
}
 80097b8:	bf00      	nop
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200025ac 	.word	0x200025ac
 80097c0:	0800977d 	.word	0x0800977d
 80097c4:	20002618 	.word	0x20002618
 80097c8:	080097cd 	.word	0x080097cd

080097cc <resetStopwatch>:
void resetStopwatch(){
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
	stwClear();
 80097d0:	f7fb f8e0 	bl	8004994 <stwClear>
	stwT.clear();
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <resetStopwatch+0x14>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	4798      	blx	r3
}
 80097da:	bf00      	nop
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000070 	.word	0x20000070

080097e4 <saveStopwatch>:
void saveStopwatch(){
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
	stwSave();
 80097e8:	f7fb f8e8 	bl	80049bc <stwSave>
}
 80097ec:	bf00      	nop
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 80097f4:	4b10      	ldr	r3, [pc, #64]	; (8009838 <setDefaultClbcks+0x48>)
 80097f6:	4a11      	ldr	r2, [pc, #68]	; (800983c <setDefaultClbcks+0x4c>)
 80097f8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 80097fa:	4b11      	ldr	r3, [pc, #68]	; (8009840 <setDefaultClbcks+0x50>)
 80097fc:	4a11      	ldr	r2, [pc, #68]	; (8009844 <setDefaultClbcks+0x54>)
 80097fe:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009800:	4b11      	ldr	r3, [pc, #68]	; (8009848 <setDefaultClbcks+0x58>)
 8009802:	4a12      	ldr	r2, [pc, #72]	; (800984c <setDefaultClbcks+0x5c>)
 8009804:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <setDefaultClbcks+0x60>)
 8009808:	78db      	ldrb	r3, [r3, #3]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <setDefaultClbcks+0x64>)
 8009816:	4a10      	ldr	r2, [pc, #64]	; (8009858 <setDefaultClbcks+0x68>)
 8009818:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <setDefaultClbcks+0x6c>)
 800981c:	4a10      	ldr	r2, [pc, #64]	; (8009860 <setDefaultClbcks+0x70>)
 800981e:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8009820:	e005      	b.n	800982e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <setDefaultClbcks+0x64>)
 8009824:	4a0f      	ldr	r2, [pc, #60]	; (8009864 <setDefaultClbcks+0x74>)
 8009826:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <setDefaultClbcks+0x6c>)
 800982a:	4a0f      	ldr	r2, [pc, #60]	; (8009868 <setDefaultClbcks+0x78>)
 800982c:	611a      	str	r2, [r3, #16]
}
 800982e:	bf00      	nop
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	2000263c 	.word	0x2000263c
 800983c:	08002b45 	.word	0x08002b45
 8009840:	20002588 	.word	0x20002588
 8009844:	08002b25 	.word	0x08002b25
 8009848:	200025d0 	.word	0x200025d0
 800984c:	08002b35 	.word	0x08002b35
 8009850:	20005ac4 	.word	0x20005ac4
 8009854:	200025ac 	.word	0x200025ac
 8009858:	080097a5 	.word	0x080097a5
 800985c:	20002618 	.word	0x20002618
 8009860:	080097e5 	.word	0x080097e5
 8009864:	0800977d 	.word	0x0800977d
 8009868:	080097cd 	.word	0x080097cd

0800986c <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	099b      	lsrs	r3, r3, #6
 8009878:	4a22      	ldr	r2, [pc, #136]	; (8009904 <convertTicks+0x98>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8009880:	b2db      	uxtb	r3, r3
 8009882:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	0993      	lsrs	r3, r2, #6
 8009888:	491e      	ldr	r1, [pc, #120]	; (8009904 <convertTicks+0x98>)
 800988a:	fba1 1303 	umull	r1, r3, r1, r3
 800988e:	089b      	lsrs	r3, r3, #2
 8009890:	491d      	ldr	r1, [pc, #116]	; (8009908 <convertTicks+0x9c>)
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	4a1c      	ldr	r2, [pc, #112]	; (800990c <convertTicks+0xa0>)
 800989a:	fba2 2303 	umull	r2, r3, r2, r3
 800989e:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4b19      	ldr	r3, [pc, #100]	; (800990c <convertTicks+0xa0>)
 80098a8:	fba3 1302 	umull	r1, r3, r3, r2
 80098ac:	09db      	lsrs	r3, r3, #7
 80098ae:	f241 7170 	movw	r1, #6000	; 0x1770
 80098b2:	fb01 f303 	mul.w	r3, r1, r3
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	4a15      	ldr	r2, [pc, #84]	; (8009910 <convertTicks+0xa4>)
 80098ba:	fba2 2303 	umull	r2, r3, r2, r3
 80098be:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	72bb      	strb	r3, [r7, #10]
		ticks%100
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4b12      	ldr	r3, [pc, #72]	; (8009910 <convertTicks+0xa4>)
 80098c8:	fba3 1302 	umull	r1, r3, r3, r2
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	2164      	movs	r1, #100	; 0x64
 80098d0:	fb01 f303 	mul.w	r3, r1, r3
 80098d4:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	2300      	movs	r3, #0
 80098e0:	7b3a      	ldrb	r2, [r7, #12]
 80098e2:	f362 0307 	bfi	r3, r2, #0, #8
 80098e6:	7b7a      	ldrb	r2, [r7, #13]
 80098e8:	f362 230f 	bfi	r3, r2, #8, #8
 80098ec:	7bba      	ldrb	r2, [r7, #14]
 80098ee:	f362 4317 	bfi	r3, r2, #16, #8
 80098f2:	7bfa      	ldrb	r2, [r7, #15]
 80098f4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	002e9a77 	.word	0x002e9a77
 8009908:	00057e40 	.word	0x00057e40
 800990c:	057619f1 	.word	0x057619f1
 8009910:	51eb851f 	.word	0x51eb851f

08009914 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af02      	add	r7, sp, #8
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 800991e:	793b      	ldrb	r3, [r7, #4]
 8009920:	4619      	mov	r1, r3
 8009922:	797b      	ldrb	r3, [r7, #5]
 8009924:	4618      	mov	r0, r3
 8009926:	79bb      	ldrb	r3, [r7, #6]
 8009928:	79fa      	ldrb	r2, [r7, #7]
 800992a:	9201      	str	r2, [sp, #4]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4603      	mov	r3, r0
 8009930:	460a      	mov	r2, r1
 8009932:	4904      	ldr	r1, [pc, #16]	; (8009944 <stwString+0x30>)
 8009934:	6838      	ldr	r0, [r7, #0]
 8009936:	f00c f911 	bl	8015b5c <siprintf>
	return str;
 800993a:	683b      	ldr	r3, [r7, #0]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	0801d974 	.word	0x0801d974

08009948 <updateStopwatch>:
void updateStopwatch(void){
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 800994c:	4b22      	ldr	r3, [pc, #136]	; (80099d8 <updateStopwatch+0x90>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009954:	4a21      	ldr	r2, [pc, #132]	; (80099dc <updateStopwatch+0x94>)
 8009956:	fb82 1203 	smull	r1, r2, r2, r3
 800995a:	441a      	add	r2, r3
 800995c:	12d2      	asrs	r2, r2, #11
 800995e:	17db      	asrs	r3, r3, #31
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	b2da      	uxtb	r2, r3
 8009964:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <updateStopwatch+0x98>)
 8009966:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 8009968:	4b1b      	ldr	r3, [pc, #108]	; (80099d8 <updateStopwatch+0x90>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009970:	461a      	mov	r2, r3
 8009972:	4b1a      	ldr	r3, [pc, #104]	; (80099dc <updateStopwatch+0x94>)
 8009974:	fb83 1302 	smull	r1, r3, r3, r2
 8009978:	4413      	add	r3, r2
 800997a:	12d9      	asrs	r1, r3, #11
 800997c:	17d3      	asrs	r3, r2, #31
 800997e:	1acb      	subs	r3, r1, r3
 8009980:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	4a16      	ldr	r2, [pc, #88]	; (80099e4 <updateStopwatch+0x9c>)
 800998c:	fb82 1203 	smull	r1, r2, r2, r3
 8009990:	441a      	add	r2, r3
 8009992:	1152      	asrs	r2, r2, #5
 8009994:	17db      	asrs	r3, r3, #31
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <updateStopwatch+0x98>)
 800999c:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 800999e:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <updateStopwatch+0x90>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80099a6:	461a      	mov	r2, r3
 80099a8:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <updateStopwatch+0x9c>)
 80099aa:	fb83 1302 	smull	r1, r3, r3, r2
 80099ae:	4413      	add	r3, r2
 80099b0:	1159      	asrs	r1, r3, #5
 80099b2:	17d3      	asrs	r3, r2, #31
 80099b4:	1ac9      	subs	r1, r1, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	1ad1      	subs	r1, r2, r3
 80099c0:	b2ca      	uxtb	r2, r1
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <updateStopwatch+0x98>)
 80099c4:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 80099c6:	f7fb f809 	bl	80049dc <getStw>
 80099ca:	4603      	mov	r3, r0
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <updateStopwatch+0x98>)
 80099d0:	70da      	strb	r2, [r3, #3]
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20005ac4 	.word	0x20005ac4
 80099dc:	91a2b3c5 	.word	0x91a2b3c5
 80099e0:	20005d24 	.word	0x20005d24
 80099e4:	88888889 	.word	0x88888889

080099e8 <stwSetup>:

void stwSetup(void){
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80099ec:	f7ff ff00 	bl	80097f0 <setDefaultClbcks>
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b091      	sub	sp, #68	; 0x44
 80099f8:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80099fa:	2300      	movs	r3, #0
 80099fc:	623b      	str	r3, [r7, #32]
 80099fe:	2300      	movs	r3, #0
 8009a00:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8009a02:	4b83      	ldr	r3, [pc, #524]	; (8009c10 <stwMain+0x21c>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	4b81      	ldr	r3, [pc, #516]	; (8009c10 <stwMain+0x21c>)
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	f107 0020 	add.w	r0, r7, #32
 8009a10:	4980      	ldr	r1, [pc, #512]	; (8009c14 <stwMain+0x220>)
 8009a12:	f00c f8a3 	bl	8015b5c <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8009a16:	2314      	movs	r3, #20
 8009a18:	b29c      	uxth	r4, r3
 8009a1a:	f107 0320 	add.w	r3, r7, #32
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fbf0 	bl	8000204 <strlen>
 8009a24:	4603      	mov	r3, r0
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	fb14 f303 	smulbb	r3, r4, r3
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8009a32:	b298      	uxth	r0, r3
 8009a34:	f107 0220 	add.w	r2, r7, #32
 8009a38:	4b77      	ldr	r3, [pc, #476]	; (8009c18 <stwMain+0x224>)
 8009a3a:	210a      	movs	r1, #10
 8009a3c:	f7f9 fbd4 	bl	80031e8 <lcdPutStr>

	char tempStr2[30] = {0};
 8009a40:	2300      	movs	r3, #0
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	605a      	str	r2, [r3, #4]
 8009a4c:	609a      	str	r2, [r3, #8]
 8009a4e:	60da      	str	r2, [r3, #12]
 8009a50:	611a      	str	r2, [r3, #16]
 8009a52:	615a      	str	r2, [r3, #20]
 8009a54:	831a      	strh	r2, [r3, #24]
	sprintf(&guiPos, "Stopwatch");
 8009a56:	f107 0320 	add.w	r3, r7, #32
 8009a5a:	4970      	ldr	r1, [pc, #448]	; (8009c1c <stwMain+0x228>)
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f00c f87d 	bl	8015b5c <siprintf>
	lcdPutStr(10, 10, guiPos, zekton24font);
 8009a62:	f107 0220 	add.w	r2, r7, #32
 8009a66:	4b6c      	ldr	r3, [pc, #432]	; (8009c18 <stwMain+0x224>)
 8009a68:	210a      	movs	r1, #10
 8009a6a:	200a      	movs	r0, #10
 8009a6c:	f7f9 fbbc 	bl	80031e8 <lcdPutStr>

	updateStopwatch();
 8009a70:	f7ff ff6a 	bl	8009948 <updateStopwatch>

	if(stw_val.hours != 0){
 8009a74:	4b6a      	ldr	r3, [pc, #424]	; (8009c20 <stwMain+0x22c>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <stwMain+0x98>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8009a7c:	4b68      	ldr	r3, [pc, #416]	; (8009c20 <stwMain+0x22c>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	461a      	mov	r2, r3
 8009a82:	463b      	mov	r3, r7
 8009a84:	4967      	ldr	r1, [pc, #412]	; (8009c24 <stwMain+0x230>)
 8009a86:	4618      	mov	r0, r3
 8009a88:	f00c f868 	bl	8015b5c <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8009a8c:	463a      	mov	r2, r7
 8009a8e:	4b62      	ldr	r3, [pc, #392]	; (8009c18 <stwMain+0x224>)
 8009a90:	215f      	movs	r1, #95	; 0x5f
 8009a92:	2014      	movs	r0, #20
 8009a94:	f7f9 fba8 	bl	80031e8 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8009a98:	4b61      	ldr	r3, [pc, #388]	; (8009c20 <stwMain+0x22c>)
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4b60      	ldr	r3, [pc, #384]	; (8009c20 <stwMain+0x22c>)
 8009aa0:	789b      	ldrb	r3, [r3, #2]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4b5e      	ldr	r3, [pc, #376]	; (8009c20 <stwMain+0x22c>)
 8009aa6:	78db      	ldrb	r3, [r3, #3]
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	460b      	mov	r3, r1
 8009aae:	495e      	ldr	r1, [pc, #376]	; (8009c28 <stwMain+0x234>)
 8009ab0:	f00c f854 	bl	8015b5c <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8009ab4:	2322      	movs	r3, #34	; 0x22
 8009ab6:	b29c      	uxth	r4, r3
 8009ab8:	463b      	mov	r3, r7
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f6 fba2 	bl	8000204 <strlen>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	fb14 f303 	smulbb	r3, r4, r3
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009ace:	b298      	uxth	r0, r3
 8009ad0:	463a      	mov	r2, r7
 8009ad2:	4b56      	ldr	r3, [pc, #344]	; (8009c2c <stwMain+0x238>)
 8009ad4:	214c      	movs	r1, #76	; 0x4c
 8009ad6:	f7f9 fb87 	bl	80031e8 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8009ada:	2300      	movs	r3, #0
 8009adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ae0:	e08b      	b.n	8009bfa <stwMain+0x206>
		if(stwT.stwArray[i] != 0){
 8009ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ae6:	4a52      	ldr	r2, [pc, #328]	; (8009c30 <stwMain+0x23c>)
 8009ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d07f      	beq.n	8009bf0 <stwMain+0x1fc>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8009af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	463b      	mov	r3, r7
 8009af8:	494e      	ldr	r1, [pc, #312]	; (8009c34 <stwMain+0x240>)
 8009afa:	4618      	mov	r0, r3
 8009afc:	f00c f82e 	bl	8015b5c <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8009b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	3b7e      	subs	r3, #126	; 0x7e
 8009b0a:	b2d9      	uxtb	r1, r3
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	; (8009c38 <stwMain+0x244>)
 8009b10:	2000      	movs	r0, #0
 8009b12:	f7f9 fb69 	bl	80031e8 <lcdPutStr>
			if(i>0){
 8009b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d022      	beq.n	8009b64 <stwMain+0x170>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 8009b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	3b7e      	subs	r3, #126	; 0x7e
 8009b28:	b2dc      	uxtb	r4, r3
 8009b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b2e:	4a40      	ldr	r2, [pc, #256]	; (8009c30 <stwMain+0x23c>)
 8009b30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	493d      	ldr	r1, [pc, #244]	; (8009c30 <stwMain+0x23c>)
 8009b3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fe92 	bl	800986c <convertTicks>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b52:	f7ff fedf 	bl	8009914 <stwString>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b37      	ldr	r3, [pc, #220]	; (8009c38 <stwMain+0x244>)
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	2037      	movs	r0, #55	; 0x37
 8009b5e:	f7f9 fb43 	bl	80031e8 <lcdPutStr>
 8009b62:	e01a      	b.n	8009b9a <stwMain+0x1a6>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8009b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	3b7e      	subs	r3, #126	; 0x7e
 8009b6e:	b2dc      	uxtb	r4, r3
 8009b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b74:	4a2e      	ldr	r2, [pc, #184]	; (8009c30 <stwMain+0x23c>)
 8009b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fe76 	bl	800986c <convertTicks>
 8009b80:	4603      	mov	r3, r0
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b84:	463b      	mov	r3, r7
 8009b86:	4619      	mov	r1, r3
 8009b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b8a:	f7ff fec3 	bl	8009914 <stwString>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b29      	ldr	r3, [pc, #164]	; (8009c38 <stwMain+0x244>)
 8009b92:	4621      	mov	r1, r4
 8009b94:	2037      	movs	r0, #55	; 0x37
 8009b96:	f7f9 fb27 	bl	80031e8 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	4927      	ldr	r1, [pc, #156]	; (8009c3c <stwMain+0x248>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f00b ffdc 	bl	8015b5c <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 8009ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	3b7e      	subs	r3, #126	; 0x7e
 8009bae:	b2d9      	uxtb	r1, r3
 8009bb0:	463a      	mov	r2, r7
 8009bb2:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <stwMain+0x244>)
 8009bb4:	20a5      	movs	r0, #165	; 0xa5
 8009bb6:	f7f9 fb17 	bl	80031e8 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8009bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	3b7e      	subs	r3, #126	; 0x7e
 8009bc4:	b2dc      	uxtb	r4, r3
 8009bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bca:	4a19      	ldr	r2, [pc, #100]	; (8009c30 <stwMain+0x23c>)
 8009bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fe4b 	bl	800986c <convertTicks>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8009bda:	463b      	mov	r3, r7
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be0:	f7ff fe98 	bl	8009914 <stwString>
 8009be4:	4602      	mov	r2, r0
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <stwMain+0x244>)
 8009be8:	4621      	mov	r1, r4
 8009bea:	20e1      	movs	r0, #225	; 0xe1
 8009bec:	f7f9 fafc 	bl	80031e8 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8009bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bfe:	2b06      	cmp	r3, #6
 8009c00:	f67f af6f 	bls.w	8009ae2 <stwMain+0xee>
		}
	}
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	373c      	adds	r7, #60	; 0x3c
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20005718 	.word	0x20005718
 8009c14:	0801d988 	.word	0x0801d988
 8009c18:	0804955c 	.word	0x0804955c
 8009c1c:	0801d994 	.word	0x0801d994
 8009c20:	20005d24 	.word	0x20005d24
 8009c24:	0801d9a0 	.word	0x0801d9a0
 8009c28:	0801d9a8 	.word	0x0801d9a8
 8009c2c:	0804b3c4 	.word	0x0804b3c4
 8009c30:	20000070 	.word	0x20000070
 8009c34:	0801d9b8 	.word	0x0801d9b8
 8009c38:	08048ad4 	.word	0x08048ad4
 8009c3c:	0801d9c0 	.word	0x0801d9c0

08009c40 <startPauseTimer>:
#include "fonts/fonts.h"

extern 	countdown_t countDown1;


void startPauseTimer(void){
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
	if(countDown1.isRunning){
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <startPauseTimer+0x20>)
 8009c46:	791b      	ldrb	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <startPauseTimer+0x14>
		pauseTimer(&countDown1);
 8009c4c:	4804      	ldr	r0, [pc, #16]	; (8009c60 <startPauseTimer+0x20>)
 8009c4e:	f7f8 fa7f 	bl	8002150 <pauseTimer>
	} else {
		startTimer(&countDown1);
	}
}
 8009c52:	e002      	b.n	8009c5a <startPauseTimer+0x1a>
		startTimer(&countDown1);
 8009c54:	4802      	ldr	r0, [pc, #8]	; (8009c60 <startPauseTimer+0x20>)
 8009c56:	f7f8 fa6e 	bl	8002136 <startTimer>
}
 8009c5a:	bf00      	nop
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000068 	.word	0x20000068

08009c64 <resetTim>:
void resetTim(void){
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
	resetTimer(&countDown1);
 8009c68:	4802      	ldr	r0, [pc, #8]	; (8009c74 <resetTim+0x10>)
 8009c6a:	f7f8 fa7e 	bl	800216a <resetTimer>
}
 8009c6e:	bf00      	nop
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000068 	.word	0x20000068

08009c78 <setTim>:
void setTim(void){
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
	setTimer(&countDown1, 5*60);
 8009c7c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009c80:	4802      	ldr	r0, [pc, #8]	; (8009c8c <setTim+0x14>)
 8009c82:	f7f8 fa43 	bl	800210c <setTimer>
}
 8009c86:	bf00      	nop
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000068 	.word	0x20000068

08009c90 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <setDefaultClbcks+0x2c>)
 8009c96:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <setDefaultClbcks+0x30>)
 8009c98:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <setDefaultClbcks+0x34>)
 8009c9c:	4a0a      	ldr	r2, [pc, #40]	; (8009cc8 <setDefaultClbcks+0x38>)
 8009c9e:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &startPauseTimer;
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <setDefaultClbcks+0x3c>)
 8009ca2:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <setDefaultClbcks+0x40>)
 8009ca4:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &setTim;
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <setDefaultClbcks+0x44>)
 8009ca8:	4a0b      	ldr	r2, [pc, #44]	; (8009cd8 <setDefaultClbcks+0x48>)
 8009caa:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetTim;
 8009cac:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <setDefaultClbcks+0x4c>)
 8009cae:	4a0c      	ldr	r2, [pc, #48]	; (8009ce0 <setDefaultClbcks+0x50>)
 8009cb0:	611a      	str	r2, [r3, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20002588 	.word	0x20002588
 8009cc0:	08002b25 	.word	0x08002b25
 8009cc4:	200025d0 	.word	0x200025d0
 8009cc8:	08002b35 	.word	0x08002b35
 8009ccc:	200025ac 	.word	0x200025ac
 8009cd0:	08009c41 	.word	0x08009c41
 8009cd4:	200025f4 	.word	0x200025f4
 8009cd8:	08009c79 	.word	0x08009c79
 8009cdc:	20002618 	.word	0x20002618
 8009ce0:	08009c65 	.word	0x08009c65

08009ce4 <timerSetup>:

void timerSetup(void){
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009ce8:	f7ff ffd2 	bl	8009c90 <setDefaultClbcks>
}
 8009cec:	bf00      	nop
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <timerMain>:

void timerMain(void){
 8009cf0:	b5b0      	push	{r4, r5, r7, lr}
 8009cf2:	b094      	sub	sp, #80	; 0x50
 8009cf4:	af04      	add	r7, sp, #16
	char tempStr[51] = {0};
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	f107 030c 	add.w	r3, r7, #12
 8009cfe:	222f      	movs	r2, #47	; 0x2f
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f00a fdfc 	bl	8014900 <memset>
	sprintf(&tempStr, "Timer");
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	4986      	ldr	r1, [pc, #536]	; (8009f28 <timerMain+0x238>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f00b ff24 	bl	8015b5c <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 8009d14:	f107 0208 	add.w	r2, r7, #8
 8009d18:	4b84      	ldr	r3, [pc, #528]	; (8009f2c <timerMain+0x23c>)
 8009d1a:	210a      	movs	r1, #10
 8009d1c:	200a      	movs	r0, #10
 8009d1e:	f7f9 fa63 	bl	80031e8 <lcdPutStr>

	char guiPos[6] = {0};
 8009d22:	2300      	movs	r3, #0
 8009d24:	603b      	str	r3, [r7, #0]
 8009d26:	2300      	movs	r3, #0
 8009d28:	80bb      	strh	r3, [r7, #4]
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8009d2a:	4b81      	ldr	r3, [pc, #516]	; (8009f30 <timerMain+0x240>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4b7f      	ldr	r3, [pc, #508]	; (8009f30 <timerMain+0x240>)
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	4638      	mov	r0, r7
 8009d36:	497f      	ldr	r1, [pc, #508]	; (8009f34 <timerMain+0x244>)
 8009d38:	f00b ff10 	bl	8015b5c <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8009d3c:	2314      	movs	r3, #20
 8009d3e:	b29c      	uxth	r4, r3
 8009d40:	463b      	mov	r3, r7
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f6 fa5e 	bl	8000204 <strlen>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	fb14 f303 	smulbb	r3, r4, r3
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8009d56:	b298      	uxth	r0, r3
 8009d58:	463a      	mov	r2, r7
 8009d5a:	4b74      	ldr	r3, [pc, #464]	; (8009f2c <timerMain+0x23c>)
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	f7f9 fa43 	bl	80031e8 <lcdPutStr>

	sprintf(&tempStr, "%02dh %02d'%02d\"", countDown1.remainingSec/3600, (countDown1.remainingSec%3600)/60, countDown1.remainingSec%60);
 8009d62:	4b75      	ldr	r3, [pc, #468]	; (8009f38 <timerMain+0x248>)
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	4a75      	ldr	r2, [pc, #468]	; (8009f3c <timerMain+0x24c>)
 8009d68:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6c:	0adb      	lsrs	r3, r3, #11
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	461c      	mov	r4, r3
 8009d72:	4b71      	ldr	r3, [pc, #452]	; (8009f38 <timerMain+0x248>)
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	4a71      	ldr	r2, [pc, #452]	; (8009f3c <timerMain+0x24c>)
 8009d78:	fba2 1203 	umull	r1, r2, r2, r3
 8009d7c:	0ad2      	lsrs	r2, r2, #11
 8009d7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009d82:	fb01 f202 	mul.w	r2, r1, r2
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	4a6d      	ldr	r2, [pc, #436]	; (8009f40 <timerMain+0x250>)
 8009d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	461d      	mov	r5, r3
 8009d96:	4b68      	ldr	r3, [pc, #416]	; (8009f38 <timerMain+0x248>)
 8009d98:	885a      	ldrh	r2, [r3, #2]
 8009d9a:	4b69      	ldr	r3, [pc, #420]	; (8009f40 <timerMain+0x250>)
 8009d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009da0:	0959      	lsrs	r1, r3, #5
 8009da2:	460b      	mov	r3, r1
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	1a5b      	subs	r3, r3, r1
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f107 0008 	add.w	r0, r7, #8
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	462b      	mov	r3, r5
 8009db6:	4622      	mov	r2, r4
 8009db8:	4962      	ldr	r1, [pc, #392]	; (8009f44 <timerMain+0x254>)
 8009dba:	f00b fecf 	bl	8015b5c <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr)), 76, tempStr, zekton45font);
 8009dbe:	2322      	movs	r3, #34	; 0x22
 8009dc0:	b29c      	uxth	r4, r3
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f6 fa1c 	bl	8000204 <strlen>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	fb14 f303 	smulbb	r3, r4, r3
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009dda:	b298      	uxth	r0, r3
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	4b59      	ldr	r3, [pc, #356]	; (8009f48 <timerMain+0x258>)
 8009de2:	214c      	movs	r1, #76	; 0x4c
 8009de4:	f7f9 fa00 	bl	80031e8 <lcdPutStr>
	sprintf(&tempStr, "%02dh %02d'%02d\"", countDown1.setpoint/3600, (countDown1.setpoint%3600)/60, countDown1.setpoint%60);
 8009de8:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <timerMain+0x248>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	4a53      	ldr	r2, [pc, #332]	; (8009f3c <timerMain+0x24c>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	0adb      	lsrs	r3, r3, #11
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	461c      	mov	r4, r3
 8009df8:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <timerMain+0x248>)
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	4a4f      	ldr	r2, [pc, #316]	; (8009f3c <timerMain+0x24c>)
 8009dfe:	fba2 1203 	umull	r1, r2, r2, r3
 8009e02:	0ad2      	lsrs	r2, r2, #11
 8009e04:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009e08:	fb01 f202 	mul.w	r2, r1, r2
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	4a4b      	ldr	r2, [pc, #300]	; (8009f40 <timerMain+0x250>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	095b      	lsrs	r3, r3, #5
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461d      	mov	r5, r3
 8009e1c:	4b46      	ldr	r3, [pc, #280]	; (8009f38 <timerMain+0x248>)
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	4b47      	ldr	r3, [pc, #284]	; (8009f40 <timerMain+0x250>)
 8009e22:	fba3 1302 	umull	r1, r3, r3, r2
 8009e26:	0959      	lsrs	r1, r3, #5
 8009e28:	460b      	mov	r3, r1
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	1a5b      	subs	r3, r3, r1
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f107 0008 	add.w	r0, r7, #8
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4941      	ldr	r1, [pc, #260]	; (8009f44 <timerMain+0x254>)
 8009e40:	f00b fe8c 	bl	8015b5c <siprintf>
	lcdPutStr(20, 165, tempStr, font_12_zekton);
 8009e44:	f107 0208 	add.w	r2, r7, #8
 8009e48:	4b40      	ldr	r3, [pc, #256]	; (8009f4c <timerMain+0x25c>)
 8009e4a:	21a5      	movs	r1, #165	; 0xa5
 8009e4c:	2014      	movs	r0, #20
 8009e4e:	f7f9 f9cb 	bl	80031e8 <lcdPutStr>
	if(countDown1.isRunning){
 8009e52:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <timerMain+0x248>)
 8009e54:	791b      	ldrb	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01b      	beq.n	8009e92 <timerMain+0x1a2>
		sprintf(&tempStr, "running");
 8009e5a:	f107 0308 	add.w	r3, r7, #8
 8009e5e:	493c      	ldr	r1, [pc, #240]	; (8009f50 <timerMain+0x260>)
 8009e60:	4618      	mov	r0, r3
 8009e62:	f00b fe7b 	bl	8015b5c <siprintf>
		lcdPutStr(380-(*(font_12_zekton.font_Width)*strlen(tempStr)), 165, tempStr, font_12_zekton);
 8009e66:	2309      	movs	r3, #9
 8009e68:	b29c      	uxth	r4, r3
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f6 f9c8 	bl	8000204 <strlen>
 8009e74:	4603      	mov	r3, r0
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	fb14 f303 	smulbb	r3, r4, r3
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009e82:	b298      	uxth	r0, r3
 8009e84:	f107 0208 	add.w	r2, r7, #8
 8009e88:	4b30      	ldr	r3, [pc, #192]	; (8009f4c <timerMain+0x25c>)
 8009e8a:	21a5      	movs	r1, #165	; 0xa5
 8009e8c:	f7f9 f9ac 	bl	80031e8 <lcdPutStr>
 8009e90:	e01a      	b.n	8009ec8 <timerMain+0x1d8>
	} else {
		sprintf(&tempStr, "paused");
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	492f      	ldr	r1, [pc, #188]	; (8009f54 <timerMain+0x264>)
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f00b fe5f 	bl	8015b5c <siprintf>
		lcdPutStr(380-(*(font_12_zekton.font_Width)*strlen(tempStr)), 165, tempStr, font_12_zekton);
 8009e9e:	2309      	movs	r3, #9
 8009ea0:	b29c      	uxth	r4, r3
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f6 f9ac 	bl	8000204 <strlen>
 8009eac:	4603      	mov	r3, r0
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	fb14 f303 	smulbb	r3, r4, r3
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8009eba:	b298      	uxth	r0, r3
 8009ebc:	f107 0208 	add.w	r2, r7, #8
 8009ec0:	4b22      	ldr	r3, [pc, #136]	; (8009f4c <timerMain+0x25c>)
 8009ec2:	21a5      	movs	r1, #165	; 0xa5
 8009ec4:	f7f9 f990 	bl	80031e8 <lcdPutStr>
	}

	lcdRect2(20, 400-20, 140, 160, 1, 0, 1);
 8009ec8:	2301      	movs	r3, #1
 8009eca:	9302      	str	r3, [sp, #8]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	23a0      	movs	r3, #160	; 0xa0
 8009ed6:	228c      	movs	r2, #140	; 0x8c
 8009ed8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8009edc:	2014      	movs	r0, #20
 8009ede:	f7f9 ffc6 	bl	8003e6e <lcdRect2>
	// 22 - 400-22
	uint16_t barx = 22+((countDown1.setpoint-countDown1.remainingSec)*(400-22-22))/countDown1.setpoint;
 8009ee2:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <timerMain+0x248>)
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <timerMain+0x248>)
 8009eea:	885b      	ldrh	r3, [r3, #2]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <timerMain+0x248>)
 8009ef8:	8812      	ldrh	r2, [r2, #0]
 8009efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3316      	adds	r3, #22
 8009f02:	87fb      	strh	r3, [r7, #62]	; 0x3e
	lcdRect2(barx, 400-22, 142, 158, 1, 6, 0);
 8009f04:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8009f06:	2300      	movs	r3, #0
 8009f08:	9302      	str	r3, [sp, #8]
 8009f0a:	2306      	movs	r3, #6
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	2301      	movs	r3, #1
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	239e      	movs	r3, #158	; 0x9e
 8009f14:	228e      	movs	r2, #142	; 0x8e
 8009f16:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009f1a:	f7f9 ffa8 	bl	8003e6e <lcdRect2>
}
 8009f1e:	bf00      	nop
 8009f20:	3740      	adds	r7, #64	; 0x40
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bdb0      	pop	{r4, r5, r7, pc}
 8009f26:	bf00      	nop
 8009f28:	0801da80 	.word	0x0801da80
 8009f2c:	08051494 	.word	0x08051494
 8009f30:	20005718 	.word	0x20005718
 8009f34:	0801da88 	.word	0x0801da88
 8009f38:	20000068 	.word	0x20000068
 8009f3c:	91a2b3c5 	.word	0x91a2b3c5
 8009f40:	88888889 	.word	0x88888889
 8009f44:	0801da94 	.word	0x0801da94
 8009f48:	080532fc 	.word	0x080532fc
 8009f4c:	08050a0c 	.word	0x08050a0c
 8009f50:	0801daa8 	.word	0x0801daa8
 8009f54:	0801dab0 	.word	0x0801dab0

08009f58 <setDefaultClbcks>:
#include "contextMenu.h"

// fonts
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <setDefaultClbcks+0x20>)
 8009f5e:	4a07      	ldr	r2, [pc, #28]	; (8009f7c <setDefaultClbcks+0x24>)
 8009f60:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8009f62:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <setDefaultClbcks+0x28>)
 8009f64:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <setDefaultClbcks+0x2c>)
 8009f66:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <setDefaultClbcks+0x30>)
 8009f6a:	4a08      	ldr	r2, [pc, #32]	; (8009f8c <setDefaultClbcks+0x34>)
 8009f6c:	611a      	str	r2, [r3, #16]
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20002618 	.word	0x20002618
 8009f7c:	08006495 	.word	0x08006495
 8009f80:	20002588 	.word	0x20002588
 8009f84:	08002b25 	.word	0x08002b25
 8009f88:	200025d0 	.word	0x200025d0
 8009f8c:	08002b35 	.word	0x08002b35

08009f90 <setTimeAction>:

static void setTimeAction(void){
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8009f94:	4802      	ldr	r0, [pc, #8]	; (8009fa0 <setTimeAction+0x10>)
 8009f96:	f7f8 fde1 	bl	8002b5c <guiApplyView>
}
 8009f9a:	bf00      	nop
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000218 	.word	0x20000218

08009fa4 <setDateAction>:
static void setDateAction(void){
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8009fa8:	4802      	ldr	r0, [pc, #8]	; (8009fb4 <setDateAction+0x10>)
 8009faa:	f7f8 fdd7 	bl	8002b5c <guiApplyView>
}
 8009fae:	bf00      	nop
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200001e4 	.word	0x200001e4

08009fb8 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8009fbc:	f7ff ffcc 	bl	8009f58 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8009fc0:	4802      	ldr	r0, [pc, #8]	; (8009fcc <faceSetup+0x14>)
 8009fc2:	f7fc f9e1 	bl	8006388 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8009fc6:	bf00      	nop
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	08009f59 	.word	0x08009f59

08009fd0 <faceMain>:

void faceMain(void){
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b0b1      	sub	sp, #196	; 0xc4
 8009fd4:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	609a      	str	r2, [r3, #8]
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	611a      	str	r2, [r3, #16]
 8009fec:	615a      	str	r2, [r3, #20]
 8009fee:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8009ff0:	4b83      	ldr	r3, [pc, #524]	; (800a200 <faceMain+0x230>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7f6 fac7 	bl	8000588 <__aeabi_f2d>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800a002:	4980      	ldr	r1, [pc, #512]	; (800a204 <faceMain+0x234>)
 800a004:	f00b fdaa 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 800a008:	2314      	movs	r3, #20
 800a00a:	b29c      	uxth	r4, r3
 800a00c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a010:	4618      	mov	r0, r3
 800a012:	f7f6 f8f7 	bl	8000204 <strlen>
 800a016:	4603      	mov	r3, r0
 800a018:	f1c3 030d 	rsb	r3, r3, #13
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	fb14 f303 	smulbb	r3, r4, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	3323      	adds	r3, #35	; 0x23
 800a026:	b298      	uxth	r0, r3
 800a028:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800a02c:	4b76      	ldr	r3, [pc, #472]	; (800a208 <faceMain+0x238>)
 800a02e:	210e      	movs	r1, #14
 800a030:	f7f9 f8da 	bl	80031e8 <lcdPutStr>
	char baroStr[30] = {0};
 800a034:	2300      	movs	r3, #0
 800a036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a03a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	605a      	str	r2, [r3, #4]
 800a044:	609a      	str	r2, [r3, #8]
 800a046:	60da      	str	r2, [r3, #12]
 800a048:	611a      	str	r2, [r3, #16]
 800a04a:	615a      	str	r2, [r3, #20]
 800a04c:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 800a04e:	4b6c      	ldr	r3, [pc, #432]	; (800a200 <faceMain+0x230>)
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800a20c <faceMain+0x23c>
 800a05e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a062:	ee16 0a90 	vmov	r0, s13
 800a066:	f7f6 fa8f 	bl	8000588 <__aeabi_f2d>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800a072:	4967      	ldr	r1, [pc, #412]	; (800a210 <faceMain+0x240>)
 800a074:	f00b fd72 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 800a078:	2314      	movs	r3, #20
 800a07a:	b29c      	uxth	r4, r3
 800a07c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a080:	4618      	mov	r0, r3
 800a082:	f7f6 f8bf 	bl	8000204 <strlen>
 800a086:	4603      	mov	r3, r0
 800a088:	f1c3 030d 	rsb	r3, r3, #13
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	fb14 f303 	smulbb	r3, r4, r3
 800a092:	b29b      	uxth	r3, r3
 800a094:	3323      	adds	r3, #35	; 0x23
 800a096:	b298      	uxth	r0, r3
 800a098:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800a09c:	4b5a      	ldr	r3, [pc, #360]	; (800a208 <faceMain+0x238>)
 800a09e:	212a      	movs	r1, #42	; 0x2a
 800a0a0:	f7f9 f8a2 	bl	80031e8 <lcdPutStr>

	char fracStr[30] = {0};
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	663b      	str	r3, [r7, #96]	; 0x60
 800a0a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	605a      	str	r2, [r3, #4]
 800a0b2:	609a      	str	r2, [r3, #8]
 800a0b4:	60da      	str	r2, [r3, #12]
 800a0b6:	611a      	str	r2, [r3, #16]
 800a0b8:	615a      	str	r2, [r3, #20]
 800a0ba:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 800a0bc:	2300      	movs	r3, #0
 800a0be:	643b      	str	r3, [r7, #64]	; 0x40
 800a0c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	605a      	str	r2, [r3, #4]
 800a0ca:	609a      	str	r2, [r3, #8]
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	611a      	str	r2, [r3, #16]
 800a0d0:	615a      	str	r2, [r3, #20]
 800a0d2:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	623b      	str	r3, [r7, #32]
 800a0d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	605a      	str	r2, [r3, #4]
 800a0e2:	609a      	str	r2, [r3, #8]
 800a0e4:	60da      	str	r2, [r3, #12]
 800a0e6:	611a      	str	r2, [r3, #16]
 800a0e8:	615a      	str	r2, [r3, #20]
 800a0ea:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 800a0ec:	4b49      	ldr	r3, [pc, #292]	; (800a214 <faceMain+0x244>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0f6:	4948      	ldr	r1, [pc, #288]	; (800a218 <faceMain+0x248>)
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f00b fd2f 	bl	8015b5c <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800a0fe:	4b45      	ldr	r3, [pc, #276]	; (800a214 <faceMain+0x244>)
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	461a      	mov	r2, r3
 800a104:	f107 0320 	add.w	r3, r7, #32
 800a108:	4943      	ldr	r1, [pc, #268]	; (800a218 <faceMain+0x248>)
 800a10a:	4618      	mov	r0, r3
 800a10c:	f00b fd26 	bl	8015b5c <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 800a110:	4b40      	ldr	r3, [pc, #256]	; (800a214 <faceMain+0x244>)
 800a112:	789b      	ldrb	r3, [r3, #2]
 800a114:	461a      	mov	r2, r3
 800a116:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a11a:	493f      	ldr	r1, [pc, #252]	; (800a218 <faceMain+0x248>)
 800a11c:	4618      	mov	r0, r3
 800a11e:	f00b fd1d 	bl	8015b5c <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800a122:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a126:	4b3d      	ldr	r3, [pc, #244]	; (800a21c <faceMain+0x24c>)
 800a128:	214c      	movs	r1, #76	; 0x4c
 800a12a:	2014      	movs	r0, #20
 800a12c:	f7f9 f85c 	bl	80031e8 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 800a130:	f107 0220 	add.w	r2, r7, #32
 800a134:	4b39      	ldr	r3, [pc, #228]	; (800a21c <faceMain+0x24c>)
 800a136:	214c      	movs	r1, #76	; 0x4c
 800a138:	20aa      	movs	r0, #170	; 0xaa
 800a13a:	f7f9 f855 	bl	80031e8 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 800a13e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a142:	4b37      	ldr	r3, [pc, #220]	; (800a220 <faceMain+0x250>)
 800a144:	214c      	movs	r1, #76	; 0x4c
 800a146:	f240 103b 	movw	r0, #315	; 0x13b
 800a14a:	f7f9 f84d 	bl	80031e8 <lcdPutStr>

	char buffString[30] = {0};
 800a14e:	2300      	movs	r3, #0
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	1d3b      	adds	r3, r7, #4
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	605a      	str	r2, [r3, #4]
 800a15a:	609a      	str	r2, [r3, #8]
 800a15c:	60da      	str	r2, [r3, #12]
 800a15e:	611a      	str	r2, [r3, #16]
 800a160:	615a      	str	r2, [r3, #20]
 800a162:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800a164:	463b      	mov	r3, r7
 800a166:	492f      	ldr	r1, [pc, #188]	; (800a224 <faceMain+0x254>)
 800a168:	4618      	mov	r0, r3
 800a16a:	f00b fcf7 	bl	8015b5c <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 800a16e:	4b2e      	ldr	r3, [pc, #184]	; (800a228 <faceMain+0x258>)
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	461a      	mov	r2, r3
 800a174:	4b2d      	ldr	r3, [pc, #180]	; (800a22c <faceMain+0x25c>)
 800a176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a17a:	4b2b      	ldr	r3, [pc, #172]	; (800a228 <faceMain+0x258>)
 800a17c:	78db      	ldrb	r3, [r3, #3]
 800a17e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a182:	4638      	mov	r0, r7
 800a184:	492a      	ldr	r1, [pc, #168]	; (800a230 <faceMain+0x260>)
 800a186:	f00b fce9 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800a18a:	2314      	movs	r3, #20
 800a18c:	b29c      	uxth	r4, r3
 800a18e:	463b      	mov	r3, r7
 800a190:	4618      	mov	r0, r3
 800a192:	f7f6 f837 	bl	8000204 <strlen>
 800a196:	4603      	mov	r3, r0
 800a198:	f1c3 030d 	rsb	r3, r3, #13
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	fb14 f303 	smulbb	r3, r4, r3
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3323      	adds	r3, #35	; 0x23
 800a1a6:	b298      	uxth	r0, r3
 800a1a8:	463a      	mov	r2, r7
 800a1aa:	4b17      	ldr	r3, [pc, #92]	; (800a208 <faceMain+0x238>)
 800a1ac:	21ae      	movs	r1, #174	; 0xae
 800a1ae:	f7f9 f81b 	bl	80031e8 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 800a1b2:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <faceMain+0x258>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <faceMain+0x264>)
 800a1ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1be:	4b1a      	ldr	r3, [pc, #104]	; (800a228 <faceMain+0x258>)
 800a1c0:	789b      	ldrb	r3, [r3, #2]
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	491a      	ldr	r1, [pc, #104]	; (800a230 <faceMain+0x260>)
 800a1c6:	f00b fcc9 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800a1ca:	2314      	movs	r3, #20
 800a1cc:	b29c      	uxth	r4, r3
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7f6 f817 	bl	8000204 <strlen>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f1c3 030d 	rsb	r3, r3, #13
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	fb14 f303 	smulbb	r3, r4, r3
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	3323      	adds	r3, #35	; 0x23
 800a1e6:	b298      	uxth	r0, r3
 800a1e8:	463a      	mov	r2, r7
 800a1ea:	4b07      	ldr	r3, [pc, #28]	; (800a208 <faceMain+0x238>)
 800a1ec:	21ca      	movs	r1, #202	; 0xca
 800a1ee:	f7f8 fffb 	bl	80031e8 <lcdPutStr>

	enableCntxMenu();
 800a1f2:	f7fc f96b 	bl	80064cc <enableCntxMenu>
}
 800a1f6:	bf00      	nop
 800a1f8:	37c4      	adds	r7, #196	; 0xc4
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20002578 	.word	0x20002578
 800a204:	0801db70 	.word	0x0801db70
 800a208:	08058944 	.word	0x08058944
 800a20c:	42c80000 	.word	0x42c80000
 800a210:	0801db78 	.word	0x0801db78
 800a214:	20005718 	.word	0x20005718
 800a218:	0801db84 	.word	0x0801db84
 800a21c:	0805fdf4 	.word	0x0805fdf4
 800a220:	0805a7ac 	.word	0x0805a7ac
 800a224:	0801db8c 	.word	0x0801db8c
 800a228:	2000572c 	.word	0x2000572c
 800a22c:	20000134 	.word	0x20000134
 800a230:	0801db9c 	.word	0x0801db9c
 800a234:	20000114 	.word	0x20000114

0800a238 <setDefaultClbcks>:

#include "worldtimeModule.h"
#include "fonts/fonts.h"
#include "icons/icons_small.h"

static void setDefaultClbcks(void){
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
	btn_BA.onSinglePressHandler = &nextScreen;
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <setDefaultClbcks+0x1c>)
 800a23e:	4a06      	ldr	r2, [pc, #24]	; (800a258 <setDefaultClbcks+0x20>)
 800a240:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <setDefaultClbcks+0x24>)
 800a244:	4a06      	ldr	r2, [pc, #24]	; (800a260 <setDefaultClbcks+0x28>)
 800a246:	611a      	str	r2, [r3, #16]
}
 800a248:	bf00      	nop
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20002588 	.word	0x20002588
 800a258:	08002b25 	.word	0x08002b25
 800a25c:	200025d0 	.word	0x200025d0
 800a260:	08002b35 	.word	0x08002b35

0800a264 <worldtimeSetup>:

void worldtimeSetup(void){
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a268:	f7ff ffe6 	bl	800a238 <setDefaultClbcks>
}
 800a26c:	bf00      	nop
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <worldtimeMain>:

void worldtimeMain(void){
 800a270:	b590      	push	{r4, r7, lr}
 800a272:	b091      	sub	sp, #68	; 0x44
 800a274:	af00      	add	r7, sp, #0
	char tempStr[51] = {0};
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	f107 0310 	add.w	r3, r7, #16
 800a27e:	222f      	movs	r2, #47	; 0x2f
 800a280:	2100      	movs	r1, #0
 800a282:	4618      	mov	r0, r3
 800a284:	f00a fb3c 	bl	8014900 <memset>
	sprintf(&tempStr, "World time");
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	492f      	ldr	r1, [pc, #188]	; (800a34c <worldtimeMain+0xdc>)
 800a28e:	4618      	mov	r0, r3
 800a290:	f00b fc64 	bl	8015b5c <siprintf>
	lcdPutStr(10, 10, tempStr, zekton24font);
 800a294:	f107 020c 	add.w	r2, r7, #12
 800a298:	4b2d      	ldr	r3, [pc, #180]	; (800a350 <worldtimeMain+0xe0>)
 800a29a:	210a      	movs	r1, #10
 800a29c:	200a      	movs	r0, #10
 800a29e:	f7f8 ffa3 	bl	80031e8 <lcdPutStr>
	lcdPutIcon(10, 40, wrldMap);
 800a2a2:	4a2c      	ldr	r2, [pc, #176]	; (800a354 <worldtimeMain+0xe4>)
 800a2a4:	2128      	movs	r1, #40	; 0x28
 800a2a6:	200a      	movs	r0, #10
 800a2a8:	f7f8 fed6 	bl	8003058 <lcdPutIcon>

	lcdVLine(100, 40, 40+99, 2);
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	228b      	movs	r2, #139	; 0x8b
 800a2b0:	2128      	movs	r1, #40	; 0x28
 800a2b2:	2064      	movs	r0, #100	; 0x64
 800a2b4:	f7f9 f818 	bl	80032e8 <lcdVLine>
	lcdHLine(10, 210, 60, 2);
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	223c      	movs	r2, #60	; 0x3c
 800a2bc:	21d2      	movs	r1, #210	; 0xd2
 800a2be:	200a      	movs	r0, #10
 800a2c0:	f7f9 fc5a 	bl	8003b78 <lcdHLine>

	char guiPos[6] = {0};
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	813b      	strh	r3, [r7, #8]
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 800a2cc:	4b22      	ldr	r3, [pc, #136]	; (800a358 <worldtimeMain+0xe8>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b21      	ldr	r3, [pc, #132]	; (800a358 <worldtimeMain+0xe8>)
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	1d38      	adds	r0, r7, #4
 800a2d8:	4920      	ldr	r1, [pc, #128]	; (800a35c <worldtimeMain+0xec>)
 800a2da:	f00b fc3f 	bl	8015b5c <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 800a2de:	2314      	movs	r3, #20
 800a2e0:	b29c      	uxth	r4, r3
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7f5 ff8d 	bl	8000204 <strlen>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	fb14 f303 	smulbb	r3, r4, r3
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800a2f8:	b298      	uxth	r0, r3
 800a2fa:	1d3a      	adds	r2, r7, #4
 800a2fc:	4b14      	ldr	r3, [pc, #80]	; (800a350 <worldtimeMain+0xe0>)
 800a2fe:	210a      	movs	r1, #10
 800a300:	f7f8 ff72 	bl	80031e8 <lcdPutStr>

	lcdPutStr(10, 150, "UTC+00", zekton45font);
 800a304:	4b16      	ldr	r3, [pc, #88]	; (800a360 <worldtimeMain+0xf0>)
 800a306:	4a17      	ldr	r2, [pc, #92]	; (800a364 <worldtimeMain+0xf4>)
 800a308:	2196      	movs	r1, #150	; 0x96
 800a30a:	200a      	movs	r0, #10
 800a30c:	f7f8 ff6c 	bl	80031e8 <lcdPutStr>
	lcdPutStr(220, 90, "UTC", zekton45font);
 800a310:	4b13      	ldr	r3, [pc, #76]	; (800a360 <worldtimeMain+0xf0>)
 800a312:	4a15      	ldr	r2, [pc, #84]	; (800a368 <worldtimeMain+0xf8>)
 800a314:	215a      	movs	r1, #90	; 0x5a
 800a316:	20dc      	movs	r0, #220	; 0xdc
 800a318:	f7f8 ff66 	bl	80031e8 <lcdPutStr>

	sprintf(&tempStr, "%02d:%02d", RtcTime.Hours-GLOBAL_timezone, RtcTime.Minutes);
 800a31c:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <worldtimeMain+0xe8>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	4b12      	ldr	r3, [pc, #72]	; (800a36c <worldtimeMain+0xfc>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <worldtimeMain+0xe8>)
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	f107 000c 	add.w	r0, r7, #12
 800a330:	490a      	ldr	r1, [pc, #40]	; (800a35c <worldtimeMain+0xec>)
 800a332:	f00b fc13 	bl	8015b5c <siprintf>
	lcdPutStr(220, 40, tempStr, zekton45font);
 800a336:	f107 020c 	add.w	r2, r7, #12
 800a33a:	4b09      	ldr	r3, [pc, #36]	; (800a360 <worldtimeMain+0xf0>)
 800a33c:	2128      	movs	r1, #40	; 0x28
 800a33e:	20dc      	movs	r0, #220	; 0xdc
 800a340:	f7f8 ff52 	bl	80031e8 <lcdPutStr>
}
 800a344:	bf00      	nop
 800a346:	3744      	adds	r7, #68	; 0x44
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd90      	pop	{r4, r7, pc}
 800a34c:	0801dc5c 	.word	0x0801dc5c
 800a350:	08061d7c 	.word	0x08061d7c
 800a354:	0806922c 	.word	0x0806922c
 800a358:	20005718 	.word	0x20005718
 800a35c:	0801dc68 	.word	0x0801dc68
 800a360:	08063be4 	.word	0x08063be4
 800a364:	0801dc74 	.word	0x0801dc74
 800a368:	0801dc7c 	.word	0x0801dc7c
 800a36c:	20000060 	.word	0x20000060

0800a370 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 800a374:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <setDefaultClbcks+0x34>)
 800a376:	4a0c      	ldr	r2, [pc, #48]	; (800a3a8 <setDefaultClbcks+0x38>)
 800a378:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <setDefaultClbcks+0x3c>)
 800a37c:	4a0c      	ldr	r2, [pc, #48]	; (800a3b0 <setDefaultClbcks+0x40>)
 800a37e:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800a380:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <setDefaultClbcks+0x44>)
 800a382:	4a0d      	ldr	r2, [pc, #52]	; (800a3b8 <setDefaultClbcks+0x48>)
 800a384:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800a386:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <setDefaultClbcks+0x4c>)
 800a388:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <setDefaultClbcks+0x50>)
 800a38a:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <setDefaultClbcks+0x54>)
 800a38e:	4a0e      	ldr	r2, [pc, #56]	; (800a3c8 <setDefaultClbcks+0x58>)
 800a390:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800a392:	4b0e      	ldr	r3, [pc, #56]	; (800a3cc <setDefaultClbcks+0x5c>)
 800a394:	4a0e      	ldr	r2, [pc, #56]	; (800a3d0 <setDefaultClbcks+0x60>)
 800a396:	611a      	str	r2, [r3, #16]
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	2000263c 	.word	0x2000263c
 800a3a8:	0800a6e1 	.word	0x0800a6e1
 800a3ac:	20002618 	.word	0x20002618
 800a3b0:	0800a5a1 	.word	0x0800a5a1
 800a3b4:	200025f4 	.word	0x200025f4
 800a3b8:	0800a6ed 	.word	0x0800a6ed
 800a3bc:	20002588 	.word	0x20002588
 800a3c0:	0800a659 	.word	0x0800a659
 800a3c4:	200025ac 	.word	0x200025ac
 800a3c8:	0800a571 	.word	0x0800a571
 800a3cc:	200025d0 	.word	0x200025d0
 800a3d0:	0800a5d1 	.word	0x0800a5d1

0800a3d4 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a3d8:	f7ff ffca 	bl	800a370 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <dateInputSetup+0x24>)
 800a3de:	789a      	ldrb	r2, [r3, #2]
 800a3e0:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <dateInputSetup+0x28>)
 800a3e2:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 800a3e4:	4b04      	ldr	r3, [pc, #16]	; (800a3f8 <dateInputSetup+0x24>)
 800a3e6:	785a      	ldrb	r2, [r3, #1]
 800a3e8:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <dateInputSetup+0x28>)
 800a3ea:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 800a3ec:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <dateInputSetup+0x24>)
 800a3ee:	78da      	ldrb	r2, [r3, #3]
 800a3f0:	4b02      	ldr	r3, [pc, #8]	; (800a3fc <dateInputSetup+0x28>)
 800a3f2:	709a      	strb	r2, [r3, #2]
}
 800a3f4:	bf00      	nop
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	2000572c 	.word	0x2000572c
 800a3fc:	20005d2c 	.word	0x20005d2c

0800a400 <dateInputMain>:

void dateInputMain(void){
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b089      	sub	sp, #36	; 0x24
 800a404:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 800a406:	2300      	movs	r3, #0
 800a408:	603b      	str	r3, [r7, #0]
 800a40a:	1d3b      	adds	r3, r7, #4
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	609a      	str	r2, [r3, #8]
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	611a      	str	r2, [r3, #16]
 800a418:	615a      	str	r2, [r3, #20]
 800a41a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800a41c:	463b      	mov	r3, r7
 800a41e:	494a      	ldr	r1, [pc, #296]	; (800a548 <dateInputMain+0x148>)
 800a420:	4618      	mov	r0, r3
 800a422:	f00b fb9b 	bl	8015b5c <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 800a426:	4b49      	ldr	r3, [pc, #292]	; (800a54c <dateInputMain+0x14c>)
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	461a      	mov	r2, r3
 800a42c:	4b48      	ldr	r3, [pc, #288]	; (800a550 <dateInputMain+0x150>)
 800a42e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a432:	4b46      	ldr	r3, [pc, #280]	; (800a54c <dateInputMain+0x14c>)
 800a434:	789b      	ldrb	r3, [r3, #2]
 800a436:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a43a:	4638      	mov	r0, r7
 800a43c:	4945      	ldr	r1, [pc, #276]	; (800a554 <dateInputMain+0x154>)
 800a43e:	f00b fb8d 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800a442:	2314      	movs	r3, #20
 800a444:	b29c      	uxth	r4, r3
 800a446:	463b      	mov	r3, r7
 800a448:	4618      	mov	r0, r3
 800a44a:	f7f5 fedb 	bl	8000204 <strlen>
 800a44e:	4603      	mov	r3, r0
 800a450:	f1c3 030d 	rsb	r3, r3, #13
 800a454:	b29b      	uxth	r3, r3
 800a456:	fb14 f303 	smulbb	r3, r4, r3
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3323      	adds	r3, #35	; 0x23
 800a45e:	b298      	uxth	r0, r3
 800a460:	463a      	mov	r2, r7
 800a462:	4b3d      	ldr	r3, [pc, #244]	; (800a558 <dateInputMain+0x158>)
 800a464:	21ae      	movs	r1, #174	; 0xae
 800a466:	f7f8 febf 	bl	80031e8 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 800a46a:	4b38      	ldr	r3, [pc, #224]	; (800a54c <dateInputMain+0x14c>)
 800a46c:	7818      	ldrb	r0, [r3, #0]
 800a46e:	4b37      	ldr	r3, [pc, #220]	; (800a54c <dateInputMain+0x14c>)
 800a470:	7859      	ldrb	r1, [r3, #1]
 800a472:	4b36      	ldr	r3, [pc, #216]	; (800a54c <dateInputMain+0x14c>)
 800a474:	789b      	ldrb	r3, [r3, #2]
 800a476:	b29b      	uxth	r3, r3
 800a478:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	f000 fcb6 	bl	800adf0 <zellerCongruence>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	4b34      	ldr	r3, [pc, #208]	; (800a55c <dateInputMain+0x15c>)
 800a48a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a48e:	4b2f      	ldr	r3, [pc, #188]	; (800a54c <dateInputMain+0x14c>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	4638      	mov	r0, r7
 800a494:	492f      	ldr	r1, [pc, #188]	; (800a554 <dateInputMain+0x154>)
 800a496:	f00b fb61 	bl	8015b5c <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 800a49a:	2314      	movs	r3, #20
 800a49c:	b29c      	uxth	r4, r3
 800a49e:	463b      	mov	r3, r7
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7f5 feaf 	bl	8000204 <strlen>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f1c3 030d 	rsb	r3, r3, #13
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	fb14 f303 	smulbb	r3, r4, r3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3323      	adds	r3, #35	; 0x23
 800a4b6:	b298      	uxth	r0, r3
 800a4b8:	463a      	mov	r2, r7
 800a4ba:	4b27      	ldr	r3, [pc, #156]	; (800a558 <dateInputMain+0x158>)
 800a4bc:	21ca      	movs	r1, #202	; 0xca
 800a4be:	f7f8 fe93 	bl	80031e8 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 800a4c2:	4b27      	ldr	r3, [pc, #156]	; (800a560 <dateInputMain+0x160>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4b26      	ldr	r3, [pc, #152]	; (800a564 <dateInputMain+0x164>)
 800a4ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	4b23      	ldr	r3, [pc, #140]	; (800a560 <dateInputMain+0x160>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4b23      	ldr	r3, [pc, #140]	; (800a564 <dateInputMain+0x164>)
 800a4d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4b20      	ldr	r3, [pc, #128]	; (800a560 <dateInputMain+0x160>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4b20      	ldr	r3, [pc, #128]	; (800a568 <dateInputMain+0x168>)
 800a4e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a4ea:	18d1      	adds	r1, r2, r3
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <dateInputMain+0x160>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <dateInputMain+0x16c>)
 800a4f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f7f9 fb3c 	bl	8003b78 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 800a500:	4b17      	ldr	r3, [pc, #92]	; (800a560 <dateInputMain+0x160>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	4b17      	ldr	r3, [pc, #92]	; (800a564 <dateInputMain+0x164>)
 800a508:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a50c:	4618      	mov	r0, r3
 800a50e:	4b14      	ldr	r3, [pc, #80]	; (800a560 <dateInputMain+0x160>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	4b13      	ldr	r3, [pc, #76]	; (800a564 <dateInputMain+0x164>)
 800a516:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a51a:	461a      	mov	r2, r3
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <dateInputMain+0x160>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	4619      	mov	r1, r3
 800a522:	4b11      	ldr	r3, [pc, #68]	; (800a568 <dateInputMain+0x168>)
 800a524:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a528:	18d1      	adds	r1, r2, r3
 800a52a:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <dateInputMain+0x160>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <dateInputMain+0x16c>)
 800a532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	2301      	movs	r3, #1
 800a53a:	f7f9 fb1d 	bl	8003b78 <lcdHLine>
}
 800a53e:	bf00      	nop
 800a540:	3724      	adds	r7, #36	; 0x24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd90      	pop	{r4, r7, pc}
 800a546:	bf00      	nop
 800a548:	0801dd38 	.word	0x0801dd38
 800a54c:	20005d2c 	.word	0x20005d2c
 800a550:	20000198 	.word	0x20000198
 800a554:	0801dd48 	.word	0x0801dd48
 800a558:	08069be0 	.word	0x08069be0
 800a55c:	20000178 	.word	0x20000178
 800a560:	20005d28 	.word	0x20005d28
 800a564:	200001cc 	.word	0x200001cc
 800a568:	200001dc 	.word	0x200001dc
 800a56c:	200001d4 	.word	0x200001d4

0800a570 <cursorNext>:

static void cursorNext(void){
 800a570:	b480      	push	{r7}
 800a572:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 800a574:	4b09      	ldr	r3, [pc, #36]	; (800a59c <cursorNext+0x2c>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d806      	bhi.n	800a58a <cursorNext+0x1a>
 800a57c:	4b07      	ldr	r3, [pc, #28]	; (800a59c <cursorNext+0x2c>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <cursorNext+0x2c>)
 800a586:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 800a588:	e002      	b.n	800a590 <cursorNext+0x20>
	else curPosition = 0;
 800a58a:	4b04      	ldr	r3, [pc, #16]	; (800a59c <cursorNext+0x2c>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
}
 800a590:	bf00      	nop
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20005d28 	.word	0x20005d28

0800a5a0 <cursorPrev>:
static void cursorPrev(void){
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <cursorPrev+0x2c>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d006      	beq.n	800a5ba <cursorPrev+0x1a>
 800a5ac:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <cursorPrev+0x2c>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <cursorPrev+0x2c>)
 800a5b6:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 800a5b8:	e002      	b.n	800a5c0 <cursorPrev+0x20>
	else curPosition = 2;
 800a5ba:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <cursorPrev+0x2c>)
 800a5bc:	2202      	movs	r2, #2
 800a5be:	701a      	strb	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20005d28 	.word	0x20005d28

0800a5d0 <increment>:
static void increment(void){
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a5d4:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <increment+0x80>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d024      	beq.n	800a626 <increment+0x56>
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	dc31      	bgt.n	800a644 <increment+0x74>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <increment+0x1a>
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d00f      	beq.n	800a608 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 800a5e8:	e02c      	b.n	800a644 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 800a5ea:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <increment+0x84>)
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	2b0b      	cmp	r3, #11
 800a5f0:	d806      	bhi.n	800a600 <increment+0x30>
 800a5f2:	4b18      	ldr	r3, [pc, #96]	; (800a654 <increment+0x84>)
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4b16      	ldr	r3, [pc, #88]	; (800a654 <increment+0x84>)
 800a5fc:	705a      	strb	r2, [r3, #1]
			break;
 800a5fe:	e021      	b.n	800a644 <increment+0x74>
			else valDatePos[1] = 1;
 800a600:	4b14      	ldr	r3, [pc, #80]	; (800a654 <increment+0x84>)
 800a602:	2201      	movs	r2, #1
 800a604:	705a      	strb	r2, [r3, #1]
			break;
 800a606:	e01d      	b.n	800a644 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 800a608:	4b12      	ldr	r3, [pc, #72]	; (800a654 <increment+0x84>)
 800a60a:	789b      	ldrb	r3, [r3, #2]
 800a60c:	2b63      	cmp	r3, #99	; 0x63
 800a60e:	d806      	bhi.n	800a61e <increment+0x4e>
 800a610:	4b10      	ldr	r3, [pc, #64]	; (800a654 <increment+0x84>)
 800a612:	789b      	ldrb	r3, [r3, #2]
 800a614:	3301      	adds	r3, #1
 800a616:	b2da      	uxtb	r2, r3
 800a618:	4b0e      	ldr	r3, [pc, #56]	; (800a654 <increment+0x84>)
 800a61a:	709a      	strb	r2, [r3, #2]
			break;
 800a61c:	e012      	b.n	800a644 <increment+0x74>
			else valDatePos[2] = 0;
 800a61e:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <increment+0x84>)
 800a620:	2200      	movs	r2, #0
 800a622:	709a      	strb	r2, [r3, #2]
			break;
 800a624:	e00e      	b.n	800a644 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 800a626:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <increment+0x84>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2b1e      	cmp	r3, #30
 800a62c:	d806      	bhi.n	800a63c <increment+0x6c>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <increment+0x84>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	4b07      	ldr	r3, [pc, #28]	; (800a654 <increment+0x84>)
 800a638:	701a      	strb	r2, [r3, #0]
			break;
 800a63a:	e002      	b.n	800a642 <increment+0x72>
			else valDatePos[0] = 1;
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <increment+0x84>)
 800a63e:	2201      	movs	r2, #1
 800a640:	701a      	strb	r2, [r3, #0]
			break;
 800a642:	bf00      	nop
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20005d28 	.word	0x20005d28
 800a654:	20005d2c 	.word	0x20005d2c

0800a658 <decrement>:
static void decrement(void){
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <decrement+0x80>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d024      	beq.n	800a6ae <decrement+0x56>
 800a664:	2b02      	cmp	r3, #2
 800a666:	dc31      	bgt.n	800a6cc <decrement+0x74>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <decrement+0x1a>
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d00f      	beq.n	800a690 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 800a670:	e02c      	b.n	800a6cc <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 800a672:	4b1a      	ldr	r3, [pc, #104]	; (800a6dc <decrement+0x84>)
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d006      	beq.n	800a688 <decrement+0x30>
 800a67a:	4b18      	ldr	r3, [pc, #96]	; (800a6dc <decrement+0x84>)
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	3b01      	subs	r3, #1
 800a680:	b2da      	uxtb	r2, r3
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <decrement+0x84>)
 800a684:	705a      	strb	r2, [r3, #1]
				break;
 800a686:	e021      	b.n	800a6cc <decrement+0x74>
				else valDatePos[1] = 12;
 800a688:	4b14      	ldr	r3, [pc, #80]	; (800a6dc <decrement+0x84>)
 800a68a:	220c      	movs	r2, #12
 800a68c:	705a      	strb	r2, [r3, #1]
				break;
 800a68e:	e01d      	b.n	800a6cc <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 800a690:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <decrement+0x84>)
 800a692:	789b      	ldrb	r3, [r3, #2]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d006      	beq.n	800a6a6 <decrement+0x4e>
 800a698:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <decrement+0x84>)
 800a69a:	789b      	ldrb	r3, [r3, #2]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <decrement+0x84>)
 800a6a2:	709a      	strb	r2, [r3, #2]
				break;
 800a6a4:	e012      	b.n	800a6cc <decrement+0x74>
				else valDatePos[2] = 100;
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <decrement+0x84>)
 800a6a8:	2264      	movs	r2, #100	; 0x64
 800a6aa:	709a      	strb	r2, [r3, #2]
				break;
 800a6ac:	e00e      	b.n	800a6cc <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <decrement+0x84>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d906      	bls.n	800a6c4 <decrement+0x6c>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <decrement+0x84>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <decrement+0x84>)
 800a6c0:	701a      	strb	r2, [r3, #0]
				break;
 800a6c2:	e002      	b.n	800a6ca <decrement+0x72>
				else valDatePos[0] = 31;
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <decrement+0x84>)
 800a6c6:	221f      	movs	r2, #31
 800a6c8:	701a      	strb	r2, [r3, #0]
				break;
 800a6ca:	bf00      	nop
}
 800a6cc:	bf00      	nop
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20005d28 	.word	0x20005d28
 800a6dc:	20005d2c 	.word	0x20005d2c

0800a6e0 <exitScr>:
static void exitScr(void){
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
	applySelectedScreen();
 800a6e4:	f7f8 fa50 	bl	8002b88 <applySelectedScreen>
}
 800a6e8:	bf00      	nop
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <accept>:
static void accept(void){
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 800a6f0:	4b15      	ldr	r3, [pc, #84]	; (800a748 <accept+0x5c>)
 800a6f2:	785a      	ldrb	r2, [r3, #1]
 800a6f4:	4b15      	ldr	r3, [pc, #84]	; (800a74c <accept+0x60>)
 800a6f6:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 800a6f8:	4b13      	ldr	r3, [pc, #76]	; (800a748 <accept+0x5c>)
 800a6fa:	781a      	ldrb	r2, [r3, #0]
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <accept+0x60>)
 800a6fe:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 800a700:	4b11      	ldr	r3, [pc, #68]	; (800a748 <accept+0x5c>)
 800a702:	789a      	ldrb	r2, [r3, #2]
 800a704:	4b11      	ldr	r3, [pc, #68]	; (800a74c <accept+0x60>)
 800a706:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <accept+0x5c>)
 800a70a:	7818      	ldrb	r0, [r3, #0]
 800a70c:	4b0e      	ldr	r3, [pc, #56]	; (800a748 <accept+0x5c>)
 800a70e:	7859      	ldrb	r1, [r3, #1]
 800a710:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <accept+0x5c>)
 800a712:	789b      	ldrb	r3, [r3, #2]
 800a714:	b29b      	uxth	r3, r3
 800a716:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	461a      	mov	r2, r3
 800a71e:	f000 fb67 	bl	800adf0 <zellerCongruence>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	4b09      	ldr	r3, [pc, #36]	; (800a74c <accept+0x60>)
 800a728:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800a72a:	2200      	movs	r2, #0
 800a72c:	4907      	ldr	r1, [pc, #28]	; (800a74c <accept+0x60>)
 800a72e:	4808      	ldr	r0, [pc, #32]	; (800a750 <accept+0x64>)
 800a730:	f003 f84a 	bl	800d7c8 <HAL_RTC_SetDate>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <accept+0x52>
	{
	Error_Handler();
 800a73a:	f7f9 fec3 	bl	80044c4 <Error_Handler>
	}
	exitScr();
 800a73e:	f7ff ffcf 	bl	800a6e0 <exitScr>
}
 800a742:	bf00      	nop
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20005d2c 	.word	0x20005d2c
 800a74c:	2000572c 	.word	0x2000572c
 800a750:	200059c8 	.word	0x200059c8

0800a754 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 800a758:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <setDefaultClbcks+0x34>)
 800a75a:	4a0c      	ldr	r2, [pc, #48]	; (800a78c <setDefaultClbcks+0x38>)
 800a75c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 800a75e:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <setDefaultClbcks+0x3c>)
 800a760:	4a0c      	ldr	r2, [pc, #48]	; (800a794 <setDefaultClbcks+0x40>)
 800a762:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <setDefaultClbcks+0x44>)
 800a766:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <setDefaultClbcks+0x48>)
 800a768:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800a76a:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <setDefaultClbcks+0x4c>)
 800a76c:	4a0d      	ldr	r2, [pc, #52]	; (800a7a4 <setDefaultClbcks+0x50>)
 800a76e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 800a770:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <setDefaultClbcks+0x54>)
 800a772:	4a0e      	ldr	r2, [pc, #56]	; (800a7ac <setDefaultClbcks+0x58>)
 800a774:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800a776:	4b0e      	ldr	r3, [pc, #56]	; (800a7b0 <setDefaultClbcks+0x5c>)
 800a778:	4a0e      	ldr	r2, [pc, #56]	; (800a7b4 <setDefaultClbcks+0x60>)
 800a77a:	611a      	str	r2, [r3, #16]
}
 800a77c:	bf00      	nop
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	2000263c 	.word	0x2000263c
 800a78c:	0800aad9 	.word	0x0800aad9
 800a790:	20002618 	.word	0x20002618
 800a794:	0800a91d 	.word	0x0800a91d
 800a798:	200025f4 	.word	0x200025f4
 800a79c:	0800aae5 	.word	0x0800aae5
 800a7a0:	20002588 	.word	0x20002588
 800a7a4:	0800aa09 	.word	0x0800aa09
 800a7a8:	200025ac 	.word	0x200025ac
 800a7ac:	0800a8ed 	.word	0x0800a8ed
 800a7b0:	200025d0 	.word	0x200025d0
 800a7b4:	0800a94d 	.word	0x0800a94d

0800a7b8 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800a7bc:	f7ff ffca 	bl	800a754 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <timeInputSetup+0x24>)
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <timeInputSetup+0x28>)
 800a7c6:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <timeInputSetup+0x24>)
 800a7ca:	785a      	ldrb	r2, [r3, #1]
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <timeInputSetup+0x28>)
 800a7ce:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 800a7d0:	4b02      	ldr	r3, [pc, #8]	; (800a7dc <timeInputSetup+0x24>)
 800a7d2:	789a      	ldrb	r2, [r3, #2]
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <timeInputSetup+0x28>)
 800a7d6:	709a      	strb	r2, [r3, #2]
}
 800a7d8:	bf00      	nop
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	20005718 	.word	0x20005718
 800a7e0:	20005d30 	.word	0x20005d30

0800a7e4 <timeInputMain>:

void timeInputMain(void){
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	1d3b      	adds	r3, r7, #4
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	605a      	str	r2, [r3, #4]
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	60da      	str	r2, [r3, #12]
 800a7fa:	611a      	str	r2, [r3, #16]
 800a7fc:	615a      	str	r2, [r3, #20]
 800a7fe:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 800a800:	4b33      	ldr	r3, [pc, #204]	; (800a8d0 <timeInputMain+0xec>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	463b      	mov	r3, r7
 800a808:	4932      	ldr	r1, [pc, #200]	; (800a8d4 <timeInputMain+0xf0>)
 800a80a:	4618      	mov	r0, r3
 800a80c:	f00b f9a6 	bl	8015b5c <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 800a810:	463a      	mov	r2, r7
 800a812:	4b31      	ldr	r3, [pc, #196]	; (800a8d8 <timeInputMain+0xf4>)
 800a814:	214c      	movs	r1, #76	; 0x4c
 800a816:	2014      	movs	r0, #20
 800a818:	f7f8 fce6 	bl	80031e8 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 800a81c:	4b2c      	ldr	r3, [pc, #176]	; (800a8d0 <timeInputMain+0xec>)
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	461a      	mov	r2, r3
 800a822:	463b      	mov	r3, r7
 800a824:	492b      	ldr	r1, [pc, #172]	; (800a8d4 <timeInputMain+0xf0>)
 800a826:	4618      	mov	r0, r3
 800a828:	f00b f998 	bl	8015b5c <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 800a82c:	463a      	mov	r2, r7
 800a82e:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <timeInputMain+0xf4>)
 800a830:	214c      	movs	r1, #76	; 0x4c
 800a832:	20aa      	movs	r0, #170	; 0xaa
 800a834:	f7f8 fcd8 	bl	80031e8 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 800a838:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <timeInputMain+0xf8>)
 800a83a:	789b      	ldrb	r3, [r3, #2]
 800a83c:	461a      	mov	r2, r3
 800a83e:	463b      	mov	r3, r7
 800a840:	4924      	ldr	r1, [pc, #144]	; (800a8d4 <timeInputMain+0xf0>)
 800a842:	4618      	mov	r0, r3
 800a844:	f00b f98a 	bl	8015b5c <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 800a848:	463a      	mov	r2, r7
 800a84a:	4b25      	ldr	r3, [pc, #148]	; (800a8e0 <timeInputMain+0xfc>)
 800a84c:	214c      	movs	r1, #76	; 0x4c
 800a84e:	f240 103b 	movw	r0, #315	; 0x13b
 800a852:	f7f8 fcc9 	bl	80031e8 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 800a856:	4b23      	ldr	r3, [pc, #140]	; (800a8e4 <timeInputMain+0x100>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b22      	ldr	r3, [pc, #136]	; (800a8e8 <timeInputMain+0x104>)
 800a85e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a862:	4618      	mov	r0, r3
 800a864:	4b1f      	ldr	r3, [pc, #124]	; (800a8e4 <timeInputMain+0x100>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	4b1f      	ldr	r3, [pc, #124]	; (800a8e8 <timeInputMain+0x104>)
 800a86c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a870:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a874:	2301      	movs	r3, #1
 800a876:	22af      	movs	r2, #175	; 0xaf
 800a878:	f7f9 f97e 	bl	8003b78 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 800a87c:	4b19      	ldr	r3, [pc, #100]	; (800a8e4 <timeInputMain+0x100>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	4b19      	ldr	r3, [pc, #100]	; (800a8e8 <timeInputMain+0x104>)
 800a884:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a888:	4618      	mov	r0, r3
 800a88a:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <timeInputMain+0x100>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <timeInputMain+0x104>)
 800a892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a896:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a89a:	2301      	movs	r3, #1
 800a89c:	22b0      	movs	r2, #176	; 0xb0
 800a89e:	f7f9 f96b 	bl	8003b78 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 800a8a2:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <timeInputMain+0x100>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <timeInputMain+0x104>)
 800a8aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <timeInputMain+0x100>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <timeInputMain+0x104>)
 800a8b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a8bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	22b1      	movs	r2, #177	; 0xb1
 800a8c4:	f7f9 f958 	bl	8003b78 <lcdHLine>
}
 800a8c8:	bf00      	nop
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20005d30 	.word	0x20005d30
 800a8d4:	0801de08 	.word	0x0801de08
 800a8d8:	08071090 	.word	0x08071090
 800a8dc:	20005718 	.word	0x20005718
 800a8e0:	0806ba48 	.word	0x0806ba48
 800a8e4:	20005d2f 	.word	0x20005d2f
 800a8e8:	2000020c 	.word	0x2000020c

0800a8ec <cursorNext>:

static void cursorNext(void){
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 800a8f0:	4b09      	ldr	r3, [pc, #36]	; (800a918 <cursorNext+0x2c>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d806      	bhi.n	800a906 <cursorNext+0x1a>
 800a8f8:	4b07      	ldr	r3, [pc, #28]	; (800a918 <cursorNext+0x2c>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <cursorNext+0x2c>)
 800a902:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 800a904:	e002      	b.n	800a90c <cursorNext+0x20>
	else curPosition = 0;
 800a906:	4b04      	ldr	r3, [pc, #16]	; (800a918 <cursorNext+0x2c>)
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]
}
 800a90c:	bf00      	nop
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	20005d2f 	.word	0x20005d2f

0800a91c <cursorPrev>:
static void cursorPrev(void){
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800a920:	4b09      	ldr	r3, [pc, #36]	; (800a948 <cursorPrev+0x2c>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d006      	beq.n	800a936 <cursorPrev+0x1a>
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <cursorPrev+0x2c>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <cursorPrev+0x2c>)
 800a932:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 800a934:	e002      	b.n	800a93c <cursorPrev+0x20>
	else curPosition = 4;
 800a936:	4b04      	ldr	r3, [pc, #16]	; (800a948 <cursorPrev+0x2c>)
 800a938:	2204      	movs	r2, #4
 800a93a:	701a      	strb	r2, [r3, #0]
}
 800a93c:	bf00      	nop
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	20005d2f 	.word	0x20005d2f

0800a94c <increment>:
static void increment(void){
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
	switch(curPosition){
 800a950:	4b2b      	ldr	r3, [pc, #172]	; (800aa00 <increment+0xb4>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b04      	cmp	r3, #4
 800a956:	d84d      	bhi.n	800a9f4 <increment+0xa8>
 800a958:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <increment+0x14>)
 800a95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95e:	bf00      	nop
 800a960:	0800a975 	.word	0x0800a975
 800a964:	0800a993 	.word	0x0800a993
 800a968:	0800a9b1 	.word	0x0800a9b1
 800a96c:	0800a9cf 	.word	0x0800a9cf
 800a970:	0800a9ed 	.word	0x0800a9ed
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 800a974:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <increment+0xb8>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b0c      	cmp	r3, #12
 800a97a:	d806      	bhi.n	800a98a <increment+0x3e>
 800a97c:	4b21      	ldr	r3, [pc, #132]	; (800aa04 <increment+0xb8>)
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	330a      	adds	r3, #10
 800a982:	b2da      	uxtb	r2, r3
 800a984:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <increment+0xb8>)
 800a986:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 800a988:	e034      	b.n	800a9f4 <increment+0xa8>
			else valTimePos[0] = 20;
 800a98a:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <increment+0xb8>)
 800a98c:	2214      	movs	r2, #20
 800a98e:	701a      	strb	r2, [r3, #0]
			break;
 800a990:	e030      	b.n	800a9f4 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <increment+0xb8>)
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b17      	cmp	r3, #23
 800a998:	d806      	bhi.n	800a9a8 <increment+0x5c>
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <increment+0xb8>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <increment+0xb8>)
 800a9a4:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 800a9a6:	e025      	b.n	800a9f4 <increment+0xa8>
			else valTimePos[0] = 0;
 800a9a8:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <increment+0xb8>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
			break;
 800a9ae:	e021      	b.n	800a9f4 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 800a9b0:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <increment+0xb8>)
 800a9b2:	785b      	ldrb	r3, [r3, #1]
 800a9b4:	2b30      	cmp	r3, #48	; 0x30
 800a9b6:	d806      	bhi.n	800a9c6 <increment+0x7a>
 800a9b8:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <increment+0xb8>)
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	330a      	adds	r3, #10
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	4b10      	ldr	r3, [pc, #64]	; (800aa04 <increment+0xb8>)
 800a9c2:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800a9c4:	e016      	b.n	800a9f4 <increment+0xa8>
			else valTimePos[1] = 0;
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <increment+0xb8>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	705a      	strb	r2, [r3, #1]
			break;
 800a9cc:	e012      	b.n	800a9f4 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <increment+0xb8>)
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b3a      	cmp	r3, #58	; 0x3a
 800a9d4:	d806      	bhi.n	800a9e4 <increment+0x98>
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <increment+0xb8>)
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <increment+0xb8>)
 800a9e0:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800a9e2:	e007      	b.n	800a9f4 <increment+0xa8>
			else valTimePos[1] = 0;
 800a9e4:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <increment+0xb8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	705a      	strb	r2, [r3, #1]
			break;
 800a9ea:	e003      	b.n	800a9f4 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <increment+0xb8>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	709a      	strb	r2, [r3, #2]
			break;
 800a9f2:	bf00      	nop
	}
}
 800a9f4:	bf00      	nop
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20005d2f 	.word	0x20005d2f
 800aa04:	20005d30 	.word	0x20005d30

0800aa08 <decrement>:
static void decrement(void){
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800aa0c:	4b2e      	ldr	r3, [pc, #184]	; (800aac8 <decrement+0xc0>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d857      	bhi.n	800aac4 <decrement+0xbc>
 800aa14:	a201      	add	r2, pc, #4	; (adr r2, 800aa1c <decrement+0x14>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aa31 	.word	0x0800aa31
 800aa20:	0800aa4f 	.word	0x0800aa4f
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa8b 	.word	0x0800aa8b
 800aa2c:	0800aaa9 	.word	0x0800aaa9
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 800aa30:	4b26      	ldr	r3, [pc, #152]	; (800aacc <decrement+0xc4>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b09      	cmp	r3, #9
 800aa36:	d906      	bls.n	800aa46 <decrement+0x3e>
 800aa38:	4b24      	ldr	r3, [pc, #144]	; (800aacc <decrement+0xc4>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	3b0a      	subs	r3, #10
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	4b22      	ldr	r3, [pc, #136]	; (800aacc <decrement+0xc4>)
 800aa42:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 800aa44:	e03e      	b.n	800aac4 <decrement+0xbc>
				else valTimePos[0] = 0;
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <decrement+0xc4>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
				break;
 800aa4c:	e03a      	b.n	800aac4 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 800aa4e:	4b1f      	ldr	r3, [pc, #124]	; (800aacc <decrement+0xc4>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d006      	beq.n	800aa64 <decrement+0x5c>
 800aa56:	4b1d      	ldr	r3, [pc, #116]	; (800aacc <decrement+0xc4>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <decrement+0xc4>)
 800aa60:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 800aa62:	e02f      	b.n	800aac4 <decrement+0xbc>
				else valTimePos[0] = 23;
 800aa64:	4b19      	ldr	r3, [pc, #100]	; (800aacc <decrement+0xc4>)
 800aa66:	2217      	movs	r2, #23
 800aa68:	701a      	strb	r2, [r3, #0]
				break;
 800aa6a:	e02b      	b.n	800aac4 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 800aa6c:	4b17      	ldr	r3, [pc, #92]	; (800aacc <decrement+0xc4>)
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d906      	bls.n	800aa82 <decrement+0x7a>
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <decrement+0xc4>)
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	3b0a      	subs	r3, #10
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	4b13      	ldr	r3, [pc, #76]	; (800aacc <decrement+0xc4>)
 800aa7e:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 800aa80:	e020      	b.n	800aac4 <decrement+0xbc>
				else valTimePos[1] = 0;
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <decrement+0xc4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	705a      	strb	r2, [r3, #1]
				break;
 800aa88:	e01c      	b.n	800aac4 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 800aa8a:	4b10      	ldr	r3, [pc, #64]	; (800aacc <decrement+0xc4>)
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d006      	beq.n	800aaa0 <decrement+0x98>
 800aa92:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <decrement+0xc4>)
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <decrement+0xc4>)
 800aa9c:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 800aa9e:	e011      	b.n	800aac4 <decrement+0xbc>
				else valTimePos[1] = 59;
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <decrement+0xc4>)
 800aaa2:	223b      	movs	r2, #59	; 0x3b
 800aaa4:	705a      	strb	r2, [r3, #1]
				break;
 800aaa6:	e00d      	b.n	800aac4 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 800aaa8:	4b09      	ldr	r3, [pc, #36]	; (800aad0 <decrement+0xc8>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800aaae:	2200      	movs	r2, #0
 800aab0:	4907      	ldr	r1, [pc, #28]	; (800aad0 <decrement+0xc8>)
 800aab2:	4808      	ldr	r0, [pc, #32]	; (800aad4 <decrement+0xcc>)
 800aab4:	f002 fd90 	bl	800d5d8 <HAL_RTC_SetTime>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <decrement+0xba>
					{
						Error_Handler();
 800aabe:	f7f9 fd01 	bl	80044c4 <Error_Handler>
					}
				break;
 800aac2:	bf00      	nop
		}
}
 800aac4:	bf00      	nop
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20005d2f 	.word	0x20005d2f
 800aacc:	20005d30 	.word	0x20005d30
 800aad0:	20005718 	.word	0x20005718
 800aad4:	200059c8 	.word	0x200059c8

0800aad8 <exitScr>:
static void exitScr(void){
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
	applySelectedScreen();
 800aadc:	f7f8 f854 	bl	8002b88 <applySelectedScreen>
}
 800aae0:	bf00      	nop
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <accept>:
static void accept(void){
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 800aae8:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <accept+0x3c>)
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <accept+0x40>)
 800aaee:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <accept+0x3c>)
 800aaf2:	785a      	ldrb	r2, [r3, #1]
 800aaf4:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <accept+0x40>)
 800aaf6:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <accept+0x40>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <accept+0x40>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800ab04:	2200      	movs	r2, #0
 800ab06:	4907      	ldr	r1, [pc, #28]	; (800ab24 <accept+0x40>)
 800ab08:	4807      	ldr	r0, [pc, #28]	; (800ab28 <accept+0x44>)
 800ab0a:	f002 fd65 	bl	800d5d8 <HAL_RTC_SetTime>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <accept+0x34>
	{
	Error_Handler();
 800ab14:	f7f9 fcd6 	bl	80044c4 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 800ab18:	f7ff ffde 	bl	800aad8 <exitScr>
}
 800ab1c:	bf00      	nop
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20005d30 	.word	0x20005d30
 800ab24:	20005718 	.word	0x20005718
 800ab28:	200059c8 	.word	0x200059c8

0800ab2c <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	88fa      	ldrh	r2, [r7, #6]
 800ab44:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	895b      	ldrh	r3, [r3, #10]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	4618      	mov	r0, r3
 800ab54:	f009 feb6 	bl	80148c4 <malloc>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2201      	movs	r2, #1
 800ab76:	741a      	strb	r2, [r3, #16]
}
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	891a      	ldrh	r2, [r3, #8]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	895b      	ldrh	r3, [r3, #10]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	bf0c      	ite	eq
 800ab94:	2301      	moveq	r3, #1
 800ab96:	2300      	movne	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ffe5 	bl	800ab80 <cbuf_isFull>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d02a      	beq.n	800ac12 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	88db      	ldrh	r3, [r3, #6]
 800abc4:	4619      	mov	r1, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	fb01 f303 	mul.w	r3, r1, r3
 800abce:	18d0      	adds	r0, r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	461a      	mov	r2, r3
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	f009 fe84 	bl	80148e4 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	88db      	ldrh	r3, [r3, #6]
 800abe0:	3301      	adds	r3, #1
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	8952      	ldrh	r2, [r2, #10]
 800abe6:	fb93 f1f2 	sdiv	r1, r3, r2
 800abea:	fb01 f202 	mul.w	r2, r1, r2
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	3301      	adds	r3, #1
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	8952      	ldrh	r2, [r2, #10]
 800ac00:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac04:	fb01 f202 	mul.w	r2, r1, r2
 800ac08:	1a9b      	subs	r3, r3, r2
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 800ac10:	e023      	b.n	800ac5a <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	88db      	ldrh	r3, [r3, #6]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	fb01 f303 	mul.w	r3, r1, r3
 800ac24:	18d0      	adds	r0, r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	f009 fe59 	bl	80148e4 <memcpy>
		b->elemNum++;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	891b      	ldrh	r3, [r3, #8]
 800ac36:	3301      	adds	r3, #1
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	88db      	ldrh	r3, [r3, #6]
 800ac42:	3301      	adds	r3, #1
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	8952      	ldrh	r2, [r2, #10]
 800ac48:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac4c:	fb01 f202 	mul.w	r2, r1, r2
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	80da      	strh	r2, [r3, #6]
		return 1;
 800ac58:	2301      	movs	r3, #1
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	889a      	ldrh	r2, [r3, #4]
 800ac72:	887b      	ldrh	r3, [r7, #2]
 800ac74:	4413      	add	r3, r2
 800ac76:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	895a      	ldrh	r2, [r3, #10]
 800ac7c:	887b      	ldrh	r3, [r7, #2]
 800ac7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac82:	fb01 f202 	mul.w	r2, r1, r2
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	887b      	ldrh	r3, [r7, #2]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	68c9      	ldr	r1, [r1, #12]
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	4413      	add	r3, r2
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	887a      	ldrh	r2, [r7, #2]
 800acb6:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	895b      	ldrh	r3, [r3, #10]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f009 fe00 	bl	80148c4 <malloc>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	731a      	strb	r2, [r3, #12]
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	891a      	ldrh	r2, [r3, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	895b      	ldrh	r3, [r3, #10]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	bf0c      	ite	eq
 800ad00:	2301      	moveq	r3, #1
 800ad02:	2300      	movne	r3, #0
 800ad04:	b2db      	uxtb	r3, r3
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff ffe5 	bl	800acec <ring_buffer_full>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d022      	beq.n	800ad6e <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	88db      	ldrh	r3, [r3, #6]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	88db      	ldrh	r3, [r3, #6]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	8952      	ldrh	r2, [r2, #10]
 800ad42:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad46:	fb01 f202 	mul.w	r2, r1, r2
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	889b      	ldrh	r3, [r3, #4]
 800ad56:	3301      	adds	r3, #1
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	8952      	ldrh	r2, [r2, #10]
 800ad5c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad60:	fb01 f202 	mul.w	r2, r1, r2
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 800ad6c:	e01b      	b.n	800ada6 <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	88db      	ldrh	r3, [r3, #6]
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	891b      	ldrh	r3, [r3, #8]
 800ad82:	3301      	adds	r3, #1
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	88db      	ldrh	r3, [r3, #6]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	8952      	ldrh	r2, [r2, #10]
 800ad94:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad98:	fb01 f202 	mul.w	r2, r1, r2
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	80da      	strh	r2, [r3, #6]
		return 1;
 800ada4:	2301      	movs	r3, #1
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	807b      	strh	r3, [r7, #2]
	position += b->head;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	889a      	ldrh	r2, [r3, #4]
 800adbe:	887b      	ldrh	r3, [r7, #2]
 800adc0:	4413      	add	r3, r2
 800adc2:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	895a      	ldrh	r2, [r3, #10]
 800adc8:	887b      	ldrh	r3, [r7, #2]
 800adca:	fbb3 f1f2 	udiv	r1, r3, r2
 800adce:	fb01 f202 	mul.w	r2, r1, r2
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	887b      	ldrh	r3, [r7, #2]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	681b      	ldr	r3, [r3, #0]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	71fb      	strb	r3, [r7, #7]
 800adfa:	460b      	mov	r3, r1
 800adfc:	71bb      	strb	r3, [r7, #6]
 800adfe:	4613      	mov	r3, r2
 800ae00:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 800ae02:	79bb      	ldrb	r3, [r7, #6]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d104      	bne.n	800ae12 <zellerCongruence+0x22>
	        month = 13;
 800ae08:	230d      	movs	r3, #13
 800ae0a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800ae0c:	88bb      	ldrh	r3, [r7, #4]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 800ae12:	79bb      	ldrb	r3, [r7, #6]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d104      	bne.n	800ae22 <zellerCongruence+0x32>
	        month = 14;
 800ae18:	230e      	movs	r3, #14
 800ae1a:	71bb      	strb	r3, [r7, #6]
	        year--;
 800ae1c:	88bb      	ldrh	r3, [r7, #4]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800ae26:	79bb      	ldrb	r3, [r7, #6]
 800ae28:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 800ae2a:	88bb      	ldrh	r3, [r7, #4]
 800ae2c:	4a29      	ldr	r2, [pc, #164]	; (800aed4 <zellerCongruence+0xe4>)
 800ae2e:	fba2 1203 	umull	r1, r2, r2, r3
 800ae32:	0952      	lsrs	r2, r2, #5
 800ae34:	2164      	movs	r1, #100	; 0x64
 800ae36:	fb01 f202 	mul.w	r2, r1, r2
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 800ae40:	88bb      	ldrh	r3, [r7, #4]
 800ae42:	4a24      	ldr	r2, [pc, #144]	; (800aed4 <zellerCongruence+0xe4>)
 800ae44:	fba2 2303 	umull	r2, r3, r2, r3
 800ae48:	095b      	lsrs	r3, r3, #5
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800ae4e:	7bf9      	ldrb	r1, [r7, #15]
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	4613      	mov	r3, r2
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	4a1e      	ldr	r2, [pc, #120]	; (800aed8 <zellerCongruence+0xe8>)
 800ae60:	fb82 0203 	smull	r0, r2, r2, r3
 800ae64:	1052      	asrs	r2, r2, #1
 800ae66:	17db      	asrs	r3, r3, #31
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	18ca      	adds	r2, r1, r3
 800ae6c:	7b7b      	ldrb	r3, [r7, #13]
 800ae6e:	4413      	add	r3, r2
 800ae70:	7b7a      	ldrb	r2, [r7, #13]
 800ae72:	0892      	lsrs	r2, r2, #2
 800ae74:	b2d2      	uxtb	r2, r2
 800ae76:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 800ae78:	7b3a      	ldrb	r2, [r7, #12]
 800ae7a:	0892      	lsrs	r2, r2, #2
 800ae7c:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800ae7e:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 800ae80:	7b3a      	ldrb	r2, [r7, #12]
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800ae88:	440b      	add	r3, r1
 800ae8a:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <zellerCongruence+0xec>)
 800ae90:	fb83 1302 	smull	r1, r3, r3, r2
 800ae94:	4413      	add	r3, r2
 800ae96:	1099      	asrs	r1, r3, #2
 800ae98:	17d3      	asrs	r3, r2, #31
 800ae9a:	1ac9      	subs	r1, r1, r3
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	1a5b      	subs	r3, r3, r1
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	1d5a      	adds	r2, r3, #5
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <zellerCongruence+0xec>)
 800aeac:	fb83 1302 	smull	r1, r3, r3, r2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	1099      	asrs	r1, r3, #2
 800aeb4:	17d3      	asrs	r3, r2, #31
 800aeb6:	1ac9      	subs	r1, r1, r3
 800aeb8:	460b      	mov	r3, r1
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	1a5b      	subs	r3, r3, r1
 800aebe:	1ad1      	subs	r1, r2, r3
 800aec0:	b2cb      	uxtb	r3, r1
 800aec2:	3301      	adds	r3, #1
 800aec4:	b2db      	uxtb	r3, r3
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	51eb851f 	.word	0x51eb851f
 800aed8:	66666667 	.word	0x66666667
 800aedc:	92492493 	.word	0x92492493

0800aee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800aee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aee4:	480d      	ldr	r0, [pc, #52]	; (800af1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aee6:	490e      	ldr	r1, [pc, #56]	; (800af20 <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 800aee8:	4a0e      	ldr	r2, [pc, #56]	; (800af24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800aeea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aeec:	e002      	b.n	800aef4 <LoopCopyDataInit>

0800aeee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aeee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aef2:	3304      	adds	r3, #4

0800aef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aef8:	d3f9      	bcc.n	800aeee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aefa:	4a0b      	ldr	r2, [pc, #44]	; (800af28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aefc:	4c0b      	ldr	r4, [pc, #44]	; (800af2c <LoopFillZerobss+0x26>)
  movs r3, #0
 800aefe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af00:	e001      	b.n	800af06 <LoopFillZerobss>

0800af02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af04:	3204      	adds	r2, #4

0800af06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af08:	d3fb      	bcc.n	800af02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800af0a:	f7f9 fe37 	bl	8004b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af0e:	f009 fcb5 	bl	801487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af12:	f7f9 f889 	bl	8004028 <main>
  bx  lr    
 800af16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800af18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800af1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af20:	20000480 	.word	0x20000480
                                         ldr r2, =_sidata
 800af24:	08073900 	.word	0x08073900
  ldr r2, =_sbss
 800af28:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 800af2c:	20005dac 	.word	0x20005dac

0800af30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af30:	e7fe      	b.n	800af30 <ADC_IRQHandler>
	...

0800af34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800af38:	4b0e      	ldr	r3, [pc, #56]	; (800af74 <HAL_Init+0x40>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a0d      	ldr	r2, [pc, #52]	; (800af74 <HAL_Init+0x40>)
 800af3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <HAL_Init+0x40>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a0a      	ldr	r2, [pc, #40]	; (800af74 <HAL_Init+0x40>)
 800af4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800af50:	4b08      	ldr	r3, [pc, #32]	; (800af74 <HAL_Init+0x40>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a07      	ldr	r2, [pc, #28]	; (800af74 <HAL_Init+0x40>)
 800af56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af5c:	2003      	movs	r0, #3
 800af5e:	f000 f94f 	bl	800b200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800af62:	2000      	movs	r0, #0
 800af64:	f000 f808 	bl	800af78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800af68:	f7f9 fc1a 	bl	80047a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	40023c00 	.word	0x40023c00

0800af78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800af80:	4b12      	ldr	r3, [pc, #72]	; (800afcc <HAL_InitTick+0x54>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <HAL_InitTick+0x58>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af92:	fbb2 f3f3 	udiv	r3, r2, r3
 800af96:	4618      	mov	r0, r3
 800af98:	f000 f967 	bl	800b26a <HAL_SYSTICK_Config>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e00e      	b.n	800afc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b0f      	cmp	r3, #15
 800afaa:	d80a      	bhi.n	800afc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800afac:	2200      	movs	r2, #0
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	f000 f92f 	bl	800b216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800afb8:	4a06      	ldr	r2, [pc, #24]	; (800afd4 <HAL_InitTick+0x5c>)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e000      	b.n	800afc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	200000a8 	.word	0x200000a8
 800afd0:	20000244 	.word	0x20000244
 800afd4:	20000240 	.word	0x20000240

0800afd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <HAL_IncTick+0x20>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	461a      	mov	r2, r3
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <HAL_IncTick+0x24>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4413      	add	r3, r2
 800afe8:	4a04      	ldr	r2, [pc, #16]	; (800affc <HAL_IncTick+0x24>)
 800afea:	6013      	str	r3, [r2, #0]
}
 800afec:	bf00      	nop
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	20000244 	.word	0x20000244
 800affc:	20005d34 	.word	0x20005d34

0800b000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
  return uwTick;
 800b004:	4b03      	ldr	r3, [pc, #12]	; (800b014 <HAL_GetTick+0x14>)
 800b006:	681b      	ldr	r3, [r3, #0]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20005d34 	.word	0x20005d34

0800b018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b020:	f7ff ffee 	bl	800b000 <HAL_GetTick>
 800b024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d005      	beq.n	800b03e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b032:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <HAL_Delay+0x44>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b03e:	bf00      	nop
 800b040:	f7ff ffde 	bl	800b000 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d8f7      	bhi.n	800b040 <HAL_Delay+0x28>
  {
  }
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000244 	.word	0x20000244

0800b060 <__NVIC_SetPriorityGrouping>:
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b070:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <__NVIC_SetPriorityGrouping+0x44>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b07c:	4013      	ands	r3, r2
 800b07e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b092:	4a04      	ldr	r2, [pc, #16]	; (800b0a4 <__NVIC_SetPriorityGrouping+0x44>)
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	60d3      	str	r3, [r2, #12]
}
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	e000ed00 	.word	0xe000ed00

0800b0a8 <__NVIC_GetPriorityGrouping>:
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0ac:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <__NVIC_GetPriorityGrouping+0x18>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	0a1b      	lsrs	r3, r3, #8
 800b0b2:	f003 0307 	and.w	r3, r3, #7
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	e000ed00 	.word	0xe000ed00

0800b0c4 <__NVIC_EnableIRQ>:
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	db0b      	blt.n	800b0ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	f003 021f 	and.w	r2, r3, #31
 800b0dc:	4907      	ldr	r1, [pc, #28]	; (800b0fc <__NVIC_EnableIRQ+0x38>)
 800b0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e2:	095b      	lsrs	r3, r3, #5
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	fa00 f202 	lsl.w	r2, r0, r2
 800b0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	e000e100 	.word	0xe000e100

0800b100 <__NVIC_SetPriority>:
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b10c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b110:	2b00      	cmp	r3, #0
 800b112:	db0a      	blt.n	800b12a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	490c      	ldr	r1, [pc, #48]	; (800b14c <__NVIC_SetPriority+0x4c>)
 800b11a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11e:	0112      	lsls	r2, r2, #4
 800b120:	b2d2      	uxtb	r2, r2
 800b122:	440b      	add	r3, r1
 800b124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b128:	e00a      	b.n	800b140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	4908      	ldr	r1, [pc, #32]	; (800b150 <__NVIC_SetPriority+0x50>)
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	3b04      	subs	r3, #4
 800b138:	0112      	lsls	r2, r2, #4
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	440b      	add	r3, r1
 800b13e:	761a      	strb	r2, [r3, #24]
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	e000e100 	.word	0xe000e100
 800b150:	e000ed00 	.word	0xe000ed00

0800b154 <NVIC_EncodePriority>:
{
 800b154:	b480      	push	{r7}
 800b156:	b089      	sub	sp, #36	; 0x24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	f1c3 0307 	rsb	r3, r3, #7
 800b16e:	2b04      	cmp	r3, #4
 800b170:	bf28      	it	cs
 800b172:	2304      	movcs	r3, #4
 800b174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	3304      	adds	r3, #4
 800b17a:	2b06      	cmp	r3, #6
 800b17c:	d902      	bls.n	800b184 <NVIC_EncodePriority+0x30>
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	3b03      	subs	r3, #3
 800b182:	e000      	b.n	800b186 <NVIC_EncodePriority+0x32>
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b188:	f04f 32ff 	mov.w	r2, #4294967295
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	fa02 f303 	lsl.w	r3, r2, r3
 800b192:	43da      	mvns	r2, r3
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	401a      	ands	r2, r3
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b19c:	f04f 31ff 	mov.w	r1, #4294967295
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a6:	43d9      	mvns	r1, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1ac:	4313      	orrs	r3, r2
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3724      	adds	r7, #36	; 0x24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <SysTick_Config>:
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1cc:	d301      	bcc.n	800b1d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e00f      	b.n	800b1f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1d2:	4a0a      	ldr	r2, [pc, #40]	; (800b1fc <SysTick_Config+0x40>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1da:	210f      	movs	r1, #15
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	f7ff ff8e 	bl	800b100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <SysTick_Config+0x40>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1ea:	4b04      	ldr	r3, [pc, #16]	; (800b1fc <SysTick_Config+0x40>)
 800b1ec:	2207      	movs	r2, #7
 800b1ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	e000e010 	.word	0xe000e010

0800b200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff ff29 	bl	800b060 <__NVIC_SetPriorityGrouping>
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b216:	b580      	push	{r7, lr}
 800b218:	b086      	sub	sp, #24
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	4603      	mov	r3, r0
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b228:	f7ff ff3e 	bl	800b0a8 <__NVIC_GetPriorityGrouping>
 800b22c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	6978      	ldr	r0, [r7, #20]
 800b234:	f7ff ff8e 	bl	800b154 <NVIC_EncodePriority>
 800b238:	4602      	mov	r2, r0
 800b23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff ff5d 	bl	800b100 <__NVIC_SetPriority>
}
 800b246:	bf00      	nop
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b082      	sub	sp, #8
 800b252:	af00      	add	r7, sp, #0
 800b254:	4603      	mov	r3, r0
 800b256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff ff31 	bl	800b0c4 <__NVIC_EnableIRQ>
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff ffa2 	bl	800b1bc <SysTick_Config>
 800b278:	4603      	mov	r3, r0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b086      	sub	sp, #24
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b298:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_DMA_Start_IT+0x26>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e040      	b.n	800b32a <HAL_DMA_Start_IT+0xa8>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d12f      	bne.n	800b31c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f82e 	bl	800b332 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2da:	223f      	movs	r2, #63	; 0x3f
 800b2dc:	409a      	lsls	r2, r3
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f042 0216 	orr.w	r2, r2, #22
 800b2f0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f042 0208 	orr.w	r2, r2, #8
 800b308:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f042 0201 	orr.w	r2, r2, #1
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	e005      	b.n	800b328 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b324:	2302      	movs	r3, #2
 800b326:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b332:	b480      	push	{r7}
 800b334:	b085      	sub	sp, #20
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b34e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	2b40      	cmp	r3, #64	; 0x40
 800b35e:	d108      	bne.n	800b372 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b370:	e007      	b.n	800b382 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	60da      	str	r2, [r3, #12]
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b390:	b480      	push	{r7}
 800b392:	b089      	sub	sp, #36	; 0x24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	61fb      	str	r3, [r7, #28]
 800b3aa:	e177      	b.n	800b69c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	f040 8166 	bne.w	800b696 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d005      	beq.n	800b3e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d130      	bne.n	800b444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	43db      	mvns	r3, r3
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68da      	ldr	r2, [r3, #12]
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	fa02 f303 	lsl.w	r3, r2, r3
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	4313      	orrs	r3, r2
 800b40a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	69ba      	ldr	r2, [r7, #24]
 800b410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b418:	2201      	movs	r2, #1
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	fa02 f303 	lsl.w	r3, r2, r3
 800b420:	43db      	mvns	r3, r3
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	4013      	ands	r3, r2
 800b426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	f003 0201 	and.w	r2, r3, #1
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	fa02 f303 	lsl.w	r3, r2, r3
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69ba      	ldr	r2, [r7, #24]
 800b442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	d017      	beq.n	800b480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	2203      	movs	r2, #3
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	43db      	mvns	r3, r3
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	4013      	ands	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	fa02 f303 	lsl.w	r3, r2, r3
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	4313      	orrs	r3, r2
 800b478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f003 0303 	and.w	r3, r3, #3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d123      	bne.n	800b4d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	08da      	lsrs	r2, r3, #3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3208      	adds	r2, #8
 800b494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	220f      	movs	r2, #15
 800b4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	69ba      	ldr	r2, [r7, #24]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	691a      	ldr	r2, [r3, #16]
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	08da      	lsrs	r2, r3, #3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3208      	adds	r2, #8
 800b4ce:	69b9      	ldr	r1, [r7, #24]
 800b4d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	2203      	movs	r2, #3
 800b4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e4:	43db      	mvns	r3, r3
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f003 0203 	and.w	r2, r3, #3
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 80c0 	beq.w	800b696 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b516:	2300      	movs	r3, #0
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	4b66      	ldr	r3, [pc, #408]	; (800b6b4 <HAL_GPIO_Init+0x324>)
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	4a65      	ldr	r2, [pc, #404]	; (800b6b4 <HAL_GPIO_Init+0x324>)
 800b520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b524:	6453      	str	r3, [r2, #68]	; 0x44
 800b526:	4b63      	ldr	r3, [pc, #396]	; (800b6b4 <HAL_GPIO_Init+0x324>)
 800b528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b532:	4a61      	ldr	r2, [pc, #388]	; (800b6b8 <HAL_GPIO_Init+0x328>)
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	089b      	lsrs	r3, r3, #2
 800b538:	3302      	adds	r3, #2
 800b53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b53e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	220f      	movs	r2, #15
 800b54a:	fa02 f303 	lsl.w	r3, r2, r3
 800b54e:	43db      	mvns	r3, r3
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	4013      	ands	r3, r2
 800b554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a58      	ldr	r2, [pc, #352]	; (800b6bc <HAL_GPIO_Init+0x32c>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d037      	beq.n	800b5ce <HAL_GPIO_Init+0x23e>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a57      	ldr	r2, [pc, #348]	; (800b6c0 <HAL_GPIO_Init+0x330>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d031      	beq.n	800b5ca <HAL_GPIO_Init+0x23a>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a56      	ldr	r2, [pc, #344]	; (800b6c4 <HAL_GPIO_Init+0x334>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d02b      	beq.n	800b5c6 <HAL_GPIO_Init+0x236>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a55      	ldr	r2, [pc, #340]	; (800b6c8 <HAL_GPIO_Init+0x338>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d025      	beq.n	800b5c2 <HAL_GPIO_Init+0x232>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a54      	ldr	r2, [pc, #336]	; (800b6cc <HAL_GPIO_Init+0x33c>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d01f      	beq.n	800b5be <HAL_GPIO_Init+0x22e>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a53      	ldr	r2, [pc, #332]	; (800b6d0 <HAL_GPIO_Init+0x340>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d019      	beq.n	800b5ba <HAL_GPIO_Init+0x22a>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a52      	ldr	r2, [pc, #328]	; (800b6d4 <HAL_GPIO_Init+0x344>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d013      	beq.n	800b5b6 <HAL_GPIO_Init+0x226>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a51      	ldr	r2, [pc, #324]	; (800b6d8 <HAL_GPIO_Init+0x348>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00d      	beq.n	800b5b2 <HAL_GPIO_Init+0x222>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a50      	ldr	r2, [pc, #320]	; (800b6dc <HAL_GPIO_Init+0x34c>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d007      	beq.n	800b5ae <HAL_GPIO_Init+0x21e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a4f      	ldr	r2, [pc, #316]	; (800b6e0 <HAL_GPIO_Init+0x350>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d101      	bne.n	800b5aa <HAL_GPIO_Init+0x21a>
 800b5a6:	2309      	movs	r3, #9
 800b5a8:	e012      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	e010      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5ae:	2308      	movs	r3, #8
 800b5b0:	e00e      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5b2:	2307      	movs	r3, #7
 800b5b4:	e00c      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5b6:	2306      	movs	r3, #6
 800b5b8:	e00a      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5ba:	2305      	movs	r3, #5
 800b5bc:	e008      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5be:	2304      	movs	r3, #4
 800b5c0:	e006      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e004      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e002      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <HAL_GPIO_Init+0x240>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	69fa      	ldr	r2, [r7, #28]
 800b5d2:	f002 0203 	and.w	r2, r2, #3
 800b5d6:	0092      	lsls	r2, r2, #2
 800b5d8:	4093      	lsls	r3, r2
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b5e0:	4935      	ldr	r1, [pc, #212]	; (800b6b8 <HAL_GPIO_Init+0x328>)
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	089b      	lsrs	r3, r3, #2
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b5ee:	4b3d      	ldr	r3, [pc, #244]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	43db      	mvns	r3, r3
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	4313      	orrs	r3, r2
 800b610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b612:	4a34      	ldr	r2, [pc, #208]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b618:	4b32      	ldr	r3, [pc, #200]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	43db      	mvns	r3, r3
 800b622:	69ba      	ldr	r2, [r7, #24]
 800b624:	4013      	ands	r3, r2
 800b626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	4313      	orrs	r3, r2
 800b63a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b63c:	4a29      	ldr	r2, [pc, #164]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b642:	4b28      	ldr	r3, [pc, #160]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	43db      	mvns	r3, r3
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	4013      	ands	r3, r2
 800b650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d003      	beq.n	800b666 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b666:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b66c:	4b1d      	ldr	r3, [pc, #116]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	43db      	mvns	r3, r3
 800b676:	69ba      	ldr	r2, [r7, #24]
 800b678:	4013      	ands	r3, r2
 800b67a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b690:	4a14      	ldr	r2, [pc, #80]	; (800b6e4 <HAL_GPIO_Init+0x354>)
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	3301      	adds	r3, #1
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	2b0f      	cmp	r3, #15
 800b6a0:	f67f ae84 	bls.w	800b3ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	3724      	adds	r7, #36	; 0x24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	40023800 	.word	0x40023800
 800b6b8:	40013800 	.word	0x40013800
 800b6bc:	40020000 	.word	0x40020000
 800b6c0:	40020400 	.word	0x40020400
 800b6c4:	40020800 	.word	0x40020800
 800b6c8:	40020c00 	.word	0x40020c00
 800b6cc:	40021000 	.word	0x40021000
 800b6d0:	40021400 	.word	0x40021400
 800b6d4:	40021800 	.word	0x40021800
 800b6d8:	40021c00 	.word	0x40021c00
 800b6dc:	40022000 	.word	0x40022000
 800b6e0:	40022400 	.word	0x40022400
 800b6e4:	40013c00 	.word	0x40013c00

0800b6e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	691a      	ldr	r2, [r3, #16]
 800b6f8:	887b      	ldrh	r3, [r7, #2]
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
 800b704:	e001      	b.n	800b70a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	807b      	strh	r3, [r7, #2]
 800b724:	4613      	mov	r3, r2
 800b726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b728:	787b      	ldrb	r3, [r7, #1]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b72e:	887a      	ldrh	r2, [r7, #2]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b734:	e003      	b.n	800b73e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b736:	887b      	ldrh	r3, [r7, #2]
 800b738:	041a      	lsls	r2, r3, #16
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	619a      	str	r2, [r3, #24]
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b75c:	887a      	ldrh	r2, [r7, #2]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4013      	ands	r3, r2
 800b762:	041a      	lsls	r2, r3, #16
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	43d9      	mvns	r1, r3
 800b768:	887b      	ldrh	r3, [r7, #2]
 800b76a:	400b      	ands	r3, r1
 800b76c:	431a      	orrs	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	619a      	str	r2, [r3, #24]
}
 800b772:	bf00      	nop
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b78a:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b78c:	695a      	ldr	r2, [r3, #20]
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	4013      	ands	r3, r2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d006      	beq.n	800b7a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b796:	4a05      	ldr	r2, [pc, #20]	; (800b7ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b798:	88fb      	ldrh	r3, [r7, #6]
 800b79a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b79c:	88fb      	ldrh	r3, [r7, #6]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f806 	bl	800b7b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	40013c00 	.word	0x40013c00

0800b7b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e12b      	b.n	800ba32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f7 fa62 	bl	8002cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2224      	movs	r2, #36	; 0x24
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0201 	bic.w	r2, r2, #1
 800b80a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b81a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b82a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b82c:	f001 fc76 	bl	800d11c <HAL_RCC_GetPCLK1Freq>
 800b830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	4a81      	ldr	r2, [pc, #516]	; (800ba3c <HAL_I2C_Init+0x274>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d807      	bhi.n	800b84c <HAL_I2C_Init+0x84>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4a80      	ldr	r2, [pc, #512]	; (800ba40 <HAL_I2C_Init+0x278>)
 800b840:	4293      	cmp	r3, r2
 800b842:	bf94      	ite	ls
 800b844:	2301      	movls	r3, #1
 800b846:	2300      	movhi	r3, #0
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	e006      	b.n	800b85a <HAL_I2C_Init+0x92>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4a7d      	ldr	r2, [pc, #500]	; (800ba44 <HAL_I2C_Init+0x27c>)
 800b850:	4293      	cmp	r3, r2
 800b852:	bf94      	ite	ls
 800b854:	2301      	movls	r3, #1
 800b856:	2300      	movhi	r3, #0
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e0e7      	b.n	800ba32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4a78      	ldr	r2, [pc, #480]	; (800ba48 <HAL_I2C_Init+0x280>)
 800b866:	fba2 2303 	umull	r2, r3, r2, r3
 800b86a:	0c9b      	lsrs	r3, r3, #18
 800b86c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	430a      	orrs	r2, r1
 800b880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a6a      	ldr	r2, [pc, #424]	; (800ba3c <HAL_I2C_Init+0x274>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d802      	bhi.n	800b89c <HAL_I2C_Init+0xd4>
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	3301      	adds	r3, #1
 800b89a:	e009      	b.n	800b8b0 <HAL_I2C_Init+0xe8>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b8a2:	fb02 f303 	mul.w	r3, r2, r3
 800b8a6:	4a69      	ldr	r2, [pc, #420]	; (800ba4c <HAL_I2C_Init+0x284>)
 800b8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ac:	099b      	lsrs	r3, r3, #6
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b8c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	495c      	ldr	r1, [pc, #368]	; (800ba3c <HAL_I2C_Init+0x274>)
 800b8cc:	428b      	cmp	r3, r1
 800b8ce:	d819      	bhi.n	800b904 <HAL_I2C_Init+0x13c>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	1e59      	subs	r1, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b8de:	1c59      	adds	r1, r3, #1
 800b8e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b8e4:	400b      	ands	r3, r1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00a      	beq.n	800b900 <HAL_I2C_Init+0x138>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1e59      	subs	r1, r3, #1
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8fe:	e051      	b.n	800b9a4 <HAL_I2C_Init+0x1dc>
 800b900:	2304      	movs	r3, #4
 800b902:	e04f      	b.n	800b9a4 <HAL_I2C_Init+0x1dc>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d111      	bne.n	800b930 <HAL_I2C_Init+0x168>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1e58      	subs	r0, r3, #1
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6859      	ldr	r1, [r3, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	440b      	add	r3, r1
 800b91a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b91e:	3301      	adds	r3, #1
 800b920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b924:	2b00      	cmp	r3, #0
 800b926:	bf0c      	ite	eq
 800b928:	2301      	moveq	r3, #1
 800b92a:	2300      	movne	r3, #0
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	e012      	b.n	800b956 <HAL_I2C_Init+0x18e>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	1e58      	subs	r0, r3, #1
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6859      	ldr	r1, [r3, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	440b      	add	r3, r1
 800b93e:	0099      	lsls	r1, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	fbb0 f3f3 	udiv	r3, r0, r3
 800b946:	3301      	adds	r3, #1
 800b948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bf0c      	ite	eq
 800b950:	2301      	moveq	r3, #1
 800b952:	2300      	movne	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <HAL_I2C_Init+0x196>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e022      	b.n	800b9a4 <HAL_I2C_Init+0x1dc>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10e      	bne.n	800b984 <HAL_I2C_Init+0x1bc>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	1e58      	subs	r0, r3, #1
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6859      	ldr	r1, [r3, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	440b      	add	r3, r1
 800b974:	fbb0 f3f3 	udiv	r3, r0, r3
 800b978:	3301      	adds	r3, #1
 800b97a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b97e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b982:	e00f      	b.n	800b9a4 <HAL_I2C_Init+0x1dc>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	1e58      	subs	r0, r3, #1
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6859      	ldr	r1, [r3, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	440b      	add	r3, r1
 800b992:	0099      	lsls	r1, r3, #2
 800b994:	440b      	add	r3, r1
 800b996:	fbb0 f3f3 	udiv	r3, r0, r3
 800b99a:	3301      	adds	r3, #1
 800b99c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	6809      	ldr	r1, [r1, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69da      	ldr	r2, [r3, #28]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b9d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	6911      	ldr	r1, [r2, #16]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	68d2      	ldr	r2, [r2, #12]
 800b9de:	4311      	orrs	r1, r2
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	6812      	ldr	r2, [r2, #0]
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695a      	ldr	r2, [r3, #20]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f042 0201 	orr.w	r2, r2, #1
 800ba12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	000186a0 	.word	0x000186a0
 800ba40:	001e847f 	.word	0x001e847f
 800ba44:	003d08ff 	.word	0x003d08ff
 800ba48:	431bde83 	.word	0x431bde83
 800ba4c:	10624dd3 	.word	0x10624dd3

0800ba50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4603      	mov	r3, r0
 800ba60:	817b      	strh	r3, [r7, #10]
 800ba62:	460b      	mov	r3, r1
 800ba64:	813b      	strh	r3, [r7, #8]
 800ba66:	4613      	mov	r3, r2
 800ba68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba6a:	f7ff fac9 	bl	800b000 <HAL_GetTick>
 800ba6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b20      	cmp	r3, #32
 800ba7a:	f040 80d9 	bne.w	800bc30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	2319      	movs	r3, #25
 800ba84:	2201      	movs	r2, #1
 800ba86:	496d      	ldr	r1, [pc, #436]	; (800bc3c <HAL_I2C_Mem_Write+0x1ec>)
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fc7f 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ba94:	2302      	movs	r3, #2
 800ba96:	e0cc      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <HAL_I2C_Mem_Write+0x56>
 800baa2:	2302      	movs	r3, #2
 800baa4:	e0c5      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d007      	beq.n	800bacc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2221      	movs	r2, #33	; 0x21
 800bae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2240      	movs	r2, #64	; 0x40
 800bae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6a3a      	ldr	r2, [r7, #32]
 800baf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bafc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4a4d      	ldr	r2, [pc, #308]	; (800bc40 <HAL_I2C_Mem_Write+0x1f0>)
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb0e:	88f8      	ldrh	r0, [r7, #6]
 800bb10:	893a      	ldrh	r2, [r7, #8]
 800bb12:	8979      	ldrh	r1, [r7, #10]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 fab6 	bl	800c090 <I2C_RequestMemoryWrite>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d052      	beq.n	800bbd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e081      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fd00 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00d      	beq.n	800bb5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d107      	bne.n	800bb56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	e06b      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	781a      	ldrb	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	f003 0304 	and.w	r3, r3, #4
 800bb94:	2b04      	cmp	r3, #4
 800bb96:	d11b      	bne.n	800bbd0 <HAL_I2C_Mem_Write+0x180>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d017      	beq.n	800bbd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	781a      	ldrb	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1aa      	bne.n	800bb2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 fcec 	bl	800c5ba <I2C_WaitOnBTFFlagUntilTimeout>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00d      	beq.n	800bc04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbec:	2b04      	cmp	r3, #4
 800bbee:	d107      	bne.n	800bc00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e016      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e000      	b.n	800bc32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bc30:	2302      	movs	r3, #2
  }
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	00100002 	.word	0x00100002
 800bc40:	ffff0000 	.word	0xffff0000

0800bc44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08c      	sub	sp, #48	; 0x30
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	461a      	mov	r2, r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	817b      	strh	r3, [r7, #10]
 800bc56:	460b      	mov	r3, r1
 800bc58:	813b      	strh	r3, [r7, #8]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bc5e:	f7ff f9cf 	bl	800b000 <HAL_GetTick>
 800bc62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b20      	cmp	r3, #32
 800bc6e:	f040 8208 	bne.w	800c082 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	2319      	movs	r3, #25
 800bc78:	2201      	movs	r2, #1
 800bc7a:	497b      	ldr	r1, [pc, #492]	; (800be68 <HAL_I2C_Mem_Read+0x224>)
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 fb85 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e1fb      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d101      	bne.n	800bc9a <HAL_I2C_Mem_Read+0x56>
 800bc96:	2302      	movs	r3, #2
 800bc98:	e1f4      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d007      	beq.n	800bcc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0201 	orr.w	r2, r2, #1
 800bcbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2222      	movs	r2, #34	; 0x22
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2240      	movs	r2, #64	; 0x40
 800bcdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bcf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4a5b      	ldr	r2, [pc, #364]	; (800be6c <HAL_I2C_Mem_Read+0x228>)
 800bd00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd02:	88f8      	ldrh	r0, [r7, #6]
 800bd04:	893a      	ldrh	r2, [r7, #8]
 800bd06:	8979      	ldrh	r1, [r7, #10]
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	4603      	mov	r3, r0
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 fa52 	bl	800c1bc <I2C_RequestMemoryRead>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e1b0      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d113      	bne.n	800bd52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	623b      	str	r3, [r7, #32]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	623b      	str	r3, [r7, #32]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	623b      	str	r3, [r7, #32]
 800bd3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	e184      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d11b      	bne.n	800bd92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61fb      	str	r3, [r7, #28]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	61fb      	str	r3, [r7, #28]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	61fb      	str	r3, [r7, #28]
 800bd7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	e164      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d11b      	bne.n	800bdd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bda8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdba:	2300      	movs	r3, #0
 800bdbc:	61bb      	str	r3, [r7, #24]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	61bb      	str	r3, [r7, #24]
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	e144      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	617b      	str	r3, [r7, #20]
 800bde6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bde8:	e138      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	f200 80f1 	bhi.w	800bfd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d123      	bne.n	800be44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 fc1b 	bl	800c63c <I2C_WaitOnRXNEFlagUntilTimeout>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e139      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691a      	ldr	r2, [r3, #16]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	3b01      	subs	r3, #1
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be42:	e10b      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d14e      	bne.n	800beea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	2200      	movs	r2, #0
 800be54:	4906      	ldr	r1, [pc, #24]	; (800be70 <HAL_I2C_Mem_Read+0x22c>)
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 fa98 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e10e      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
 800be66:	bf00      	nop
 800be68:	00100002 	.word	0x00100002
 800be6c:	ffff0000 	.word	0xffff0000
 800be70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691a      	ldr	r2, [r3, #16]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea0:	3b01      	subs	r3, #1
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beac:	b29b      	uxth	r3, r3
 800beae:	3b01      	subs	r3, #1
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bed2:	3b01      	subs	r3, #1
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bede:	b29b      	uxth	r3, r3
 800bee0:	3b01      	subs	r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bee8:	e0b8      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	2200      	movs	r2, #0
 800bef2:	4966      	ldr	r1, [pc, #408]	; (800c08c <HAL_I2C_Mem_Read+0x448>)
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 fa49 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0bf      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	494f      	ldr	r1, [pc, #316]	; (800c08c <HAL_I2C_Mem_Read+0x448>)
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 fa1b 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e091      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	691a      	ldr	r2, [r3, #16]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	691a      	ldr	r2, [r3, #16]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfd4:	e042      	b.n	800c05c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f000 fb2e 	bl	800c63c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e04c      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	691a      	ldr	r2, [r3, #16]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	b2d2      	uxtb	r2, r2
 800bff6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c012:	b29b      	uxth	r3, r3
 800c014:	3b01      	subs	r3, #1
 800c016:	b29a      	uxth	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f003 0304 	and.w	r3, r3, #4
 800c026:	2b04      	cmp	r3, #4
 800c028:	d118      	bne.n	800c05c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	b2d2      	uxtb	r2, r2
 800c036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c046:	3b01      	subs	r3, #1
 800c048:	b29a      	uxth	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c060:	2b00      	cmp	r3, #0
 800c062:	f47f aec2 	bne.w	800bdea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2220      	movs	r2, #32
 800c06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	e000      	b.n	800c084 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c082:	2302      	movs	r3, #2
  }
}
 800c084:	4618      	mov	r0, r3
 800c086:	3728      	adds	r7, #40	; 0x28
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	00010004 	.word	0x00010004

0800c090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af02      	add	r7, sp, #8
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4603      	mov	r3, r0
 800c0a0:	817b      	strh	r3, [r7, #10]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	813b      	strh	r3, [r7, #8]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f000 f960 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00d      	beq.n	800c0ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e0:	d103      	bne.n	800c0ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e05f      	b.n	800c1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c0ee:	897b      	ldrh	r3, [r7, #10]
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c0fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	6a3a      	ldr	r2, [r7, #32]
 800c102:	492d      	ldr	r1, [pc, #180]	; (800c1b8 <I2C_RequestMemoryWrite+0x128>)
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f998 	bl	800c43a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e04c      	b.n	800c1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c12c:	6a39      	ldr	r1, [r7, #32]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 fa02 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00d      	beq.n	800c156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13e:	2b04      	cmp	r3, #4
 800c140:	d107      	bne.n	800c152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e02b      	b.n	800c1ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d105      	bne.n	800c168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c15c:	893b      	ldrh	r3, [r7, #8]
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	611a      	str	r2, [r3, #16]
 800c166:	e021      	b.n	800c1ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c168:	893b      	ldrh	r3, [r7, #8]
 800c16a:	0a1b      	lsrs	r3, r3, #8
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c178:	6a39      	ldr	r1, [r7, #32]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 f9dc 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00d      	beq.n	800c1a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d107      	bne.n	800c19e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c19c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e005      	b.n	800c1ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c1a2:	893b      	ldrh	r3, [r7, #8]
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	00010002 	.word	0x00010002

0800c1bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	817b      	strh	r3, [r7, #10]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	813b      	strh	r3, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f000 f8c2 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00d      	beq.n	800c22a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c21c:	d103      	bne.n	800c226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c224:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e0aa      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c22a:	897b      	ldrh	r3, [r7, #10]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	461a      	mov	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	6a3a      	ldr	r2, [r7, #32]
 800c23e:	4952      	ldr	r1, [pc, #328]	; (800c388 <I2C_RequestMemoryRead+0x1cc>)
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f8fa 	bl	800c43a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e097      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c250:	2300      	movs	r3, #0
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	617b      	str	r3, [r7, #20]
 800c264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c268:	6a39      	ldr	r1, [r7, #32]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 f964 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00d      	beq.n	800c292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d107      	bne.n	800c28e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c28c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e076      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d105      	bne.n	800c2a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c298:	893b      	ldrh	r3, [r7, #8]
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	611a      	str	r2, [r3, #16]
 800c2a2:	e021      	b.n	800c2e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c2a4:	893b      	ldrh	r3, [r7, #8]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b4:	6a39      	ldr	r1, [r7, #32]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 f93e 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00d      	beq.n	800c2de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d107      	bne.n	800c2da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e050      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c2de:	893b      	ldrh	r3, [r7, #8]
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ea:	6a39      	ldr	r1, [r7, #32]
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 f923 	bl	800c538 <I2C_WaitOnTXEFlagUntilTimeout>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00d      	beq.n	800c314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d107      	bne.n	800c310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c30e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e035      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f82b 	bl	800c38c <I2C_WaitOnFlagUntilTimeout>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00d      	beq.n	800c358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34a:	d103      	bne.n	800c354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	e013      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c358:	897b      	ldrh	r3, [r7, #10]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f043 0301 	orr.w	r3, r3, #1
 800c360:	b2da      	uxtb	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	6a3a      	ldr	r2, [r7, #32]
 800c36c:	4906      	ldr	r1, [pc, #24]	; (800c388 <I2C_RequestMemoryRead+0x1cc>)
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 f863 	bl	800c43a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e000      	b.n	800c380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	00010002 	.word	0x00010002

0800c38c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	4613      	mov	r3, r2
 800c39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c39c:	e025      	b.n	800c3ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a4:	d021      	beq.n	800c3ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3a6:	f7fe fe2b 	bl	800b000 <HAL_GetTick>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d302      	bcc.n	800c3bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d116      	bne.n	800c3ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d6:	f043 0220 	orr.w	r2, r3, #32
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e023      	b.n	800c432 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	0c1b      	lsrs	r3, r3, #16
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d10d      	bne.n	800c410 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	43da      	mvns	r2, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	4013      	ands	r3, r2
 800c400:	b29b      	uxth	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	bf0c      	ite	eq
 800c406:	2301      	moveq	r3, #1
 800c408:	2300      	movne	r3, #0
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	461a      	mov	r2, r3
 800c40e:	e00c      	b.n	800c42a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	43da      	mvns	r2, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	4013      	ands	r3, r2
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	bf0c      	ite	eq
 800c422:	2301      	moveq	r3, #1
 800c424:	2300      	movne	r3, #0
 800c426:	b2db      	uxtb	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d0b6      	beq.n	800c39e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
 800c446:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c448:	e051      	b.n	800c4ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c458:	d123      	bne.n	800c4a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c472:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2220      	movs	r2, #32
 800c47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48e:	f043 0204 	orr.w	r2, r3, #4
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e046      	b.n	800c530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a8:	d021      	beq.n	800c4ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4aa:	f7fe fda9 	bl	800b000 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d302      	bcc.n	800c4c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d116      	bne.n	800c4ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4da:	f043 0220 	orr.w	r2, r3, #32
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e020      	b.n	800c530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	0c1b      	lsrs	r3, r3, #16
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d10c      	bne.n	800c512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	43da      	mvns	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	4013      	ands	r3, r2
 800c504:	b29b      	uxth	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	bf14      	ite	ne
 800c50a:	2301      	movne	r3, #1
 800c50c:	2300      	moveq	r3, #0
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	e00b      	b.n	800c52a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	43da      	mvns	r2, r3
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	4013      	ands	r3, r2
 800c51e:	b29b      	uxth	r3, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	bf14      	ite	ne
 800c524:	2301      	movne	r3, #1
 800c526:	2300      	moveq	r3, #0
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d18d      	bne.n	800c44a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c544:	e02d      	b.n	800c5a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 f8ce 	bl	800c6e8 <I2C_IsAcknowledgeFailed>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e02d      	b.n	800c5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d021      	beq.n	800c5a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c55e:	f7fe fd4f 	bl	800b000 <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d302      	bcc.n	800c574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d116      	bne.n	800c5a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58e:	f043 0220 	orr.w	r2, r3, #32
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e007      	b.n	800c5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ac:	2b80      	cmp	r3, #128	; 0x80
 800c5ae:	d1ca      	bne.n	800c546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b084      	sub	sp, #16
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	60f8      	str	r0, [r7, #12]
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c5c6:	e02d      	b.n	800c624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 f88d 	bl	800c6e8 <I2C_IsAcknowledgeFailed>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e02d      	b.n	800c634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	d021      	beq.n	800c624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5e0:	f7fe fd0e 	bl	800b000 <HAL_GetTick>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d302      	bcc.n	800c5f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d116      	bne.n	800c624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c610:	f043 0220 	orr.w	r2, r3, #32
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e007      	b.n	800c634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	f003 0304 	and.w	r3, r3, #4
 800c62e:	2b04      	cmp	r3, #4
 800c630:	d1ca      	bne.n	800c5c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c648:	e042      	b.n	800c6d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	f003 0310 	and.w	r3, r3, #16
 800c654:	2b10      	cmp	r3, #16
 800c656:	d119      	bne.n	800c68c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f06f 0210 	mvn.w	r2, #16
 800c660:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2220      	movs	r2, #32
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e029      	b.n	800c6e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c68c:	f7fe fcb8 	bl	800b000 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d116      	bne.n	800c6d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6bc:	f043 0220 	orr.w	r2, r3, #32
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e007      	b.n	800c6e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6da:	2b40      	cmp	r3, #64	; 0x40
 800c6dc:	d1b5      	bne.n	800c64a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6fe:	d11b      	bne.n	800c738 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c708:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2220      	movs	r2, #32
 800c714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c724:	f043 0204 	orr.w	r2, r3, #4
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	e000      	b.n	800c73a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b20      	cmp	r3, #32
 800c75a:	d129      	bne.n	800c7b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2224      	movs	r2, #36	; 0x24
 800c760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0201 	bic.w	r2, r2, #1
 800c772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f022 0210 	bic.w	r2, r2, #16
 800c782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	430a      	orrs	r2, r1
 800c792:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f042 0201 	orr.w	r2, r2, #1
 800c7a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	e000      	b.n	800c7b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800c7b0:	2302      	movs	r3, #2
  }
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	d12a      	bne.n	800c82e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2224      	movs	r2, #36	; 0x24
 800c7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 0201 	bic.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800c7f8:	89fb      	ldrh	r3, [r7, #14]
 800c7fa:	f023 030f 	bic.w	r3, r3, #15
 800c7fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	b29a      	uxth	r2, r3
 800c804:	89fb      	ldrh	r3, [r7, #14]
 800c806:	4313      	orrs	r3, r2
 800c808:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	89fa      	ldrh	r2, [r7, #14]
 800c810:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f042 0201 	orr.w	r2, r2, #1
 800c820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2220      	movs	r2, #32
 800c826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e000      	b.n	800c830 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800c82e:	2302      	movs	r3, #2
  }
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e267      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b00      	cmp	r3, #0
 800c858:	d075      	beq.n	800c946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c85a:	4b88      	ldr	r3, [pc, #544]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f003 030c 	and.w	r3, r3, #12
 800c862:	2b04      	cmp	r3, #4
 800c864:	d00c      	beq.n	800c880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c866:	4b85      	ldr	r3, [pc, #532]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d112      	bne.n	800c898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c872:	4b82      	ldr	r3, [pc, #520]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c87a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c87e:	d10b      	bne.n	800c898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c880:	4b7e      	ldr	r3, [pc, #504]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d05b      	beq.n	800c944 <HAL_RCC_OscConfig+0x108>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d157      	bne.n	800c944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e242      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8a0:	d106      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x74>
 800c8a2:	4b76      	ldr	r3, [pc, #472]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a75      	ldr	r2, [pc, #468]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	e01d      	b.n	800c8ec <HAL_RCC_OscConfig+0xb0>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8b8:	d10c      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x98>
 800c8ba:	4b70      	ldr	r3, [pc, #448]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a6f      	ldr	r2, [pc, #444]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	4b6d      	ldr	r3, [pc, #436]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a6c      	ldr	r2, [pc, #432]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	e00b      	b.n	800c8ec <HAL_RCC_OscConfig+0xb0>
 800c8d4:	4b69      	ldr	r3, [pc, #420]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a68      	ldr	r2, [pc, #416]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	4b66      	ldr	r3, [pc, #408]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a65      	ldr	r2, [pc, #404]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c8e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d013      	beq.n	800c91c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8f4:	f7fe fb84 	bl	800b000 <HAL_GetTick>
 800c8f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8fa:	e008      	b.n	800c90e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c8fc:	f7fe fb80 	bl	800b000 <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	2b64      	cmp	r3, #100	; 0x64
 800c908:	d901      	bls.n	800c90e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c90a:	2303      	movs	r3, #3
 800c90c:	e207      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c90e:	4b5b      	ldr	r3, [pc, #364]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0f0      	beq.n	800c8fc <HAL_RCC_OscConfig+0xc0>
 800c91a:	e014      	b.n	800c946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c91c:	f7fe fb70 	bl	800b000 <HAL_GetTick>
 800c920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c922:	e008      	b.n	800c936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c924:	f7fe fb6c 	bl	800b000 <HAL_GetTick>
 800c928:	4602      	mov	r2, r0
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	2b64      	cmp	r3, #100	; 0x64
 800c930:	d901      	bls.n	800c936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c932:	2303      	movs	r3, #3
 800c934:	e1f3      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c936:	4b51      	ldr	r3, [pc, #324]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f0      	bne.n	800c924 <HAL_RCC_OscConfig+0xe8>
 800c942:	e000      	b.n	800c946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d063      	beq.n	800ca1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c952:	4b4a      	ldr	r3, [pc, #296]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f003 030c 	and.w	r3, r3, #12
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c95e:	4b47      	ldr	r3, [pc, #284]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c966:	2b08      	cmp	r3, #8
 800c968:	d11c      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c96a:	4b44      	ldr	r3, [pc, #272]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d116      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c976:	4b41      	ldr	r3, [pc, #260]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0302 	and.w	r3, r3, #2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <HAL_RCC_OscConfig+0x152>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d001      	beq.n	800c98e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e1c7      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c98e:	4b3b      	ldr	r3, [pc, #236]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	4937      	ldr	r1, [pc, #220]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c9a2:	e03a      	b.n	800ca1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d020      	beq.n	800c9ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c9ac:	4b34      	ldr	r3, [pc, #208]	; (800ca80 <HAL_RCC_OscConfig+0x244>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9b2:	f7fe fb25 	bl	800b000 <HAL_GetTick>
 800c9b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9b8:	e008      	b.n	800c9cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9ba:	f7fe fb21 	bl	800b000 <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d901      	bls.n	800c9cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e1a8      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9cc:	4b2b      	ldr	r3, [pc, #172]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d0f0      	beq.n	800c9ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9d8:	4b28      	ldr	r3, [pc, #160]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	4925      	ldr	r1, [pc, #148]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	600b      	str	r3, [r1, #0]
 800c9ec:	e015      	b.n	800ca1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c9ee:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <HAL_RCC_OscConfig+0x244>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9f4:	f7fe fb04 	bl	800b000 <HAL_GetTick>
 800c9f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c9fa:	e008      	b.n	800ca0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9fc:	f7fe fb00 	bl	800b000 <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d901      	bls.n	800ca0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e187      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ca0e:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1f0      	bne.n	800c9fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0308 	and.w	r3, r3, #8
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d036      	beq.n	800ca94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d016      	beq.n	800ca5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca2e:	4b15      	ldr	r3, [pc, #84]	; (800ca84 <HAL_RCC_OscConfig+0x248>)
 800ca30:	2201      	movs	r2, #1
 800ca32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca34:	f7fe fae4 	bl	800b000 <HAL_GetTick>
 800ca38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca3a:	e008      	b.n	800ca4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca3c:	f7fe fae0 	bl	800b000 <HAL_GetTick>
 800ca40:	4602      	mov	r2, r0
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d901      	bls.n	800ca4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e167      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca4e:	4b0b      	ldr	r3, [pc, #44]	; (800ca7c <HAL_RCC_OscConfig+0x240>)
 800ca50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca52:	f003 0302 	and.w	r3, r3, #2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0f0      	beq.n	800ca3c <HAL_RCC_OscConfig+0x200>
 800ca5a:	e01b      	b.n	800ca94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca5c:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <HAL_RCC_OscConfig+0x248>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca62:	f7fe facd 	bl	800b000 <HAL_GetTick>
 800ca66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca68:	e00e      	b.n	800ca88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca6a:	f7fe fac9 	bl	800b000 <HAL_GetTick>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d907      	bls.n	800ca88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e150      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
 800ca7c:	40023800 	.word	0x40023800
 800ca80:	42470000 	.word	0x42470000
 800ca84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca88:	4b88      	ldr	r3, [pc, #544]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800ca8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1ea      	bne.n	800ca6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f000 8097 	beq.w	800cbd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800caa2:	2300      	movs	r3, #0
 800caa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800caa6:	4b81      	ldr	r3, [pc, #516]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10f      	bne.n	800cad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cab2:	2300      	movs	r3, #0
 800cab4:	60bb      	str	r3, [r7, #8]
 800cab6:	4b7d      	ldr	r3, [pc, #500]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caba:	4a7c      	ldr	r2, [pc, #496]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cabc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cac0:	6413      	str	r3, [r2, #64]	; 0x40
 800cac2:	4b7a      	ldr	r3, [pc, #488]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caca:	60bb      	str	r3, [r7, #8]
 800cacc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cace:	2301      	movs	r3, #1
 800cad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cad2:	4b77      	ldr	r3, [pc, #476]	; (800ccb0 <HAL_RCC_OscConfig+0x474>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d118      	bne.n	800cb10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cade:	4b74      	ldr	r3, [pc, #464]	; (800ccb0 <HAL_RCC_OscConfig+0x474>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a73      	ldr	r2, [pc, #460]	; (800ccb0 <HAL_RCC_OscConfig+0x474>)
 800cae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800caea:	f7fe fa89 	bl	800b000 <HAL_GetTick>
 800caee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800caf0:	e008      	b.n	800cb04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800caf2:	f7fe fa85 	bl	800b000 <HAL_GetTick>
 800caf6:	4602      	mov	r2, r0
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d901      	bls.n	800cb04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e10c      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb04:	4b6a      	ldr	r3, [pc, #424]	; (800ccb0 <HAL_RCC_OscConfig+0x474>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0f0      	beq.n	800caf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d106      	bne.n	800cb26 <HAL_RCC_OscConfig+0x2ea>
 800cb18:	4b64      	ldr	r3, [pc, #400]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb1c:	4a63      	ldr	r2, [pc, #396]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb1e:	f043 0301 	orr.w	r3, r3, #1
 800cb22:	6713      	str	r3, [r2, #112]	; 0x70
 800cb24:	e01c      	b.n	800cb60 <HAL_RCC_OscConfig+0x324>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	2b05      	cmp	r3, #5
 800cb2c:	d10c      	bne.n	800cb48 <HAL_RCC_OscConfig+0x30c>
 800cb2e:	4b5f      	ldr	r3, [pc, #380]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb32:	4a5e      	ldr	r2, [pc, #376]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb34:	f043 0304 	orr.w	r3, r3, #4
 800cb38:	6713      	str	r3, [r2, #112]	; 0x70
 800cb3a:	4b5c      	ldr	r3, [pc, #368]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3e:	4a5b      	ldr	r2, [pc, #364]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb40:	f043 0301 	orr.w	r3, r3, #1
 800cb44:	6713      	str	r3, [r2, #112]	; 0x70
 800cb46:	e00b      	b.n	800cb60 <HAL_RCC_OscConfig+0x324>
 800cb48:	4b58      	ldr	r3, [pc, #352]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb4c:	4a57      	ldr	r2, [pc, #348]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb4e:	f023 0301 	bic.w	r3, r3, #1
 800cb52:	6713      	str	r3, [r2, #112]	; 0x70
 800cb54:	4b55      	ldr	r3, [pc, #340]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb58:	4a54      	ldr	r2, [pc, #336]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb5a:	f023 0304 	bic.w	r3, r3, #4
 800cb5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d015      	beq.n	800cb94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb68:	f7fe fa4a 	bl	800b000 <HAL_GetTick>
 800cb6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb6e:	e00a      	b.n	800cb86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb70:	f7fe fa46 	bl	800b000 <HAL_GetTick>
 800cb74:	4602      	mov	r2, r0
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d901      	bls.n	800cb86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e0cb      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb86:	4b49      	ldr	r3, [pc, #292]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0ee      	beq.n	800cb70 <HAL_RCC_OscConfig+0x334>
 800cb92:	e014      	b.n	800cbbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb94:	f7fe fa34 	bl	800b000 <HAL_GetTick>
 800cb98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb9a:	e00a      	b.n	800cbb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb9c:	f7fe fa30 	bl	800b000 <HAL_GetTick>
 800cba0:	4602      	mov	r2, r0
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e0b5      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cbb2:	4b3e      	ldr	r3, [pc, #248]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1ee      	bne.n	800cb9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d105      	bne.n	800cbd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cbc4:	4b39      	ldr	r3, [pc, #228]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc8:	4a38      	ldr	r2, [pc, #224]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cbca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cbce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 80a1 	beq.w	800cd1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cbda:	4b34      	ldr	r3, [pc, #208]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f003 030c 	and.w	r3, r3, #12
 800cbe2:	2b08      	cmp	r3, #8
 800cbe4:	d05c      	beq.n	800cca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d141      	bne.n	800cc72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbee:	4b31      	ldr	r3, [pc, #196]	; (800ccb4 <HAL_RCC_OscConfig+0x478>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbf4:	f7fe fa04 	bl	800b000 <HAL_GetTick>
 800cbf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbfa:	e008      	b.n	800cc0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbfc:	f7fe fa00 	bl	800b000 <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d901      	bls.n	800cc0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	e087      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc0e:	4b27      	ldr	r3, [pc, #156]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1f0      	bne.n	800cbfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69da      	ldr	r2, [r3, #28]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	019b      	lsls	r3, r3, #6
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc30:	085b      	lsrs	r3, r3, #1
 800cc32:	3b01      	subs	r3, #1
 800cc34:	041b      	lsls	r3, r3, #16
 800cc36:	431a      	orrs	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	061b      	lsls	r3, r3, #24
 800cc3e:	491b      	ldr	r1, [pc, #108]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cc40:	4313      	orrs	r3, r2
 800cc42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc44:	4b1b      	ldr	r3, [pc, #108]	; (800ccb4 <HAL_RCC_OscConfig+0x478>)
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc4a:	f7fe f9d9 	bl	800b000 <HAL_GetTick>
 800cc4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc50:	e008      	b.n	800cc64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cc52:	f7fe f9d5 	bl	800b000 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e05c      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc64:	4b11      	ldr	r3, [pc, #68]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0f0      	beq.n	800cc52 <HAL_RCC_OscConfig+0x416>
 800cc70:	e054      	b.n	800cd1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc72:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <HAL_RCC_OscConfig+0x478>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc78:	f7fe f9c2 	bl	800b000 <HAL_GetTick>
 800cc7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc7e:	e008      	b.n	800cc92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cc80:	f7fe f9be 	bl	800b000 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d901      	bls.n	800cc92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e045      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc92:	4b06      	ldr	r3, [pc, #24]	; (800ccac <HAL_RCC_OscConfig+0x470>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f0      	bne.n	800cc80 <HAL_RCC_OscConfig+0x444>
 800cc9e:	e03d      	b.n	800cd1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d107      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e038      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
 800ccac:	40023800 	.word	0x40023800
 800ccb0:	40007000 	.word	0x40007000
 800ccb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ccb8:	4b1b      	ldr	r3, [pc, #108]	; (800cd28 <HAL_RCC_OscConfig+0x4ec>)
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d028      	beq.n	800cd18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d121      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d11a      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cce8:	4013      	ands	r3, r2
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ccee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d111      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfe:	085b      	lsrs	r3, r3, #1
 800cd00:	3b01      	subs	r3, #1
 800cd02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d107      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d001      	beq.n	800cd1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e000      	b.n	800cd1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	40023800 	.word	0x40023800

0800cd2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e0cc      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cd40:	4b68      	ldr	r3, [pc, #416]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f003 030f 	and.w	r3, r3, #15
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d90c      	bls.n	800cd68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd4e:	4b65      	ldr	r3, [pc, #404]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	b2d2      	uxtb	r2, r2
 800cd54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd56:	4b63      	ldr	r3, [pc, #396]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 030f 	and.w	r3, r3, #15
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d001      	beq.n	800cd68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e0b8      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0302 	and.w	r3, r3, #2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d020      	beq.n	800cdb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0304 	and.w	r3, r3, #4
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d005      	beq.n	800cd8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cd80:	4b59      	ldr	r3, [pc, #356]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	4a58      	ldr	r2, [pc, #352]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cd8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 0308 	and.w	r3, r3, #8
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d005      	beq.n	800cda4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cd98:	4b53      	ldr	r3, [pc, #332]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	4a52      	ldr	r2, [pc, #328]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cda2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cda4:	4b50      	ldr	r3, [pc, #320]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	494d      	ldr	r1, [pc, #308]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d044      	beq.n	800ce4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d107      	bne.n	800cdda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdca:	4b47      	ldr	r3, [pc, #284]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d119      	bne.n	800ce0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e07f      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d003      	beq.n	800cdea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cde6:	2b03      	cmp	r3, #3
 800cde8:	d107      	bne.n	800cdfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdea:	4b3f      	ldr	r3, [pc, #252]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e06f      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdfa:	4b3b      	ldr	r3, [pc, #236]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 0302 	and.w	r3, r3, #2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e067      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ce0a:	4b37      	ldr	r3, [pc, #220]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	f023 0203 	bic.w	r2, r3, #3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	4934      	ldr	r1, [pc, #208]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ce1c:	f7fe f8f0 	bl	800b000 <HAL_GetTick>
 800ce20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ce22:	e00a      	b.n	800ce3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce24:	f7fe f8ec 	bl	800b000 <HAL_GetTick>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d901      	bls.n	800ce3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e04f      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ce3a:	4b2b      	ldr	r3, [pc, #172]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f003 020c 	and.w	r2, r3, #12
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d1eb      	bne.n	800ce24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ce4c:	4b25      	ldr	r3, [pc, #148]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 030f 	and.w	r3, r3, #15
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d20c      	bcs.n	800ce74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce5a:	4b22      	ldr	r3, [pc, #136]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce62:	4b20      	ldr	r3, [pc, #128]	; (800cee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f003 030f 	and.w	r3, r3, #15
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d001      	beq.n	800ce74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e032      	b.n	800ceda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d008      	beq.n	800ce92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ce80:	4b19      	ldr	r3, [pc, #100]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	4916      	ldr	r1, [pc, #88]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0308 	and.w	r3, r3, #8
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d009      	beq.n	800ceb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	490e      	ldr	r1, [pc, #56]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ceb2:	f000 f821 	bl	800cef8 <HAL_RCC_GetSysClockFreq>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	091b      	lsrs	r3, r3, #4
 800cebe:	f003 030f 	and.w	r3, r3, #15
 800cec2:	490a      	ldr	r1, [pc, #40]	; (800ceec <HAL_RCC_ClockConfig+0x1c0>)
 800cec4:	5ccb      	ldrb	r3, [r1, r3]
 800cec6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceca:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <HAL_RCC_ClockConfig+0x1c4>)
 800cecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <HAL_RCC_ClockConfig+0x1c8>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe f850 	bl	800af78 <HAL_InitTick>

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	40023c00 	.word	0x40023c00
 800cee8:	40023800 	.word	0x40023800
 800ceec:	0801fee0 	.word	0x0801fee0
 800cef0:	200000a8 	.word	0x200000a8
 800cef4:	20000240 	.word	0x20000240

0800cef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cefc:	b094      	sub	sp, #80	; 0x50
 800cefe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cf00:	2300      	movs	r3, #0
 800cf02:	647b      	str	r3, [r7, #68]	; 0x44
 800cf04:	2300      	movs	r3, #0
 800cf06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf08:	2300      	movs	r3, #0
 800cf0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cf10:	4b79      	ldr	r3, [pc, #484]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f003 030c 	and.w	r3, r3, #12
 800cf18:	2b08      	cmp	r3, #8
 800cf1a:	d00d      	beq.n	800cf38 <HAL_RCC_GetSysClockFreq+0x40>
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	f200 80e1 	bhi.w	800d0e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <HAL_RCC_GetSysClockFreq+0x34>
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	d003      	beq.n	800cf32 <HAL_RCC_GetSysClockFreq+0x3a>
 800cf2a:	e0db      	b.n	800d0e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cf2c:	4b73      	ldr	r3, [pc, #460]	; (800d0fc <HAL_RCC_GetSysClockFreq+0x204>)
 800cf2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cf30:	e0db      	b.n	800d0ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cf32:	4b73      	ldr	r3, [pc, #460]	; (800d100 <HAL_RCC_GetSysClockFreq+0x208>)
 800cf34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cf36:	e0d8      	b.n	800d0ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cf38:	4b6f      	ldr	r3, [pc, #444]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf42:	4b6d      	ldr	r3, [pc, #436]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d063      	beq.n	800d016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf4e:	4b6a      	ldr	r3, [pc, #424]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	099b      	lsrs	r3, r3, #6
 800cf54:	2200      	movs	r2, #0
 800cf56:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf58:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf60:	633b      	str	r3, [r7, #48]	; 0x30
 800cf62:	2300      	movs	r3, #0
 800cf64:	637b      	str	r3, [r7, #52]	; 0x34
 800cf66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	f04f 0000 	mov.w	r0, #0
 800cf72:	f04f 0100 	mov.w	r1, #0
 800cf76:	0159      	lsls	r1, r3, #5
 800cf78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf7c:	0150      	lsls	r0, r2, #5
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4621      	mov	r1, r4
 800cf84:	1a51      	subs	r1, r2, r1
 800cf86:	6139      	str	r1, [r7, #16]
 800cf88:	4629      	mov	r1, r5
 800cf8a:	eb63 0301 	sbc.w	r3, r3, r1
 800cf8e:	617b      	str	r3, [r7, #20]
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf9c:	4659      	mov	r1, fp
 800cf9e:	018b      	lsls	r3, r1, #6
 800cfa0:	4651      	mov	r1, sl
 800cfa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cfa6:	4651      	mov	r1, sl
 800cfa8:	018a      	lsls	r2, r1, #6
 800cfaa:	4651      	mov	r1, sl
 800cfac:	ebb2 0801 	subs.w	r8, r2, r1
 800cfb0:	4659      	mov	r1, fp
 800cfb2:	eb63 0901 	sbc.w	r9, r3, r1
 800cfb6:	f04f 0200 	mov.w	r2, #0
 800cfba:	f04f 0300 	mov.w	r3, #0
 800cfbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfca:	4690      	mov	r8, r2
 800cfcc:	4699      	mov	r9, r3
 800cfce:	4623      	mov	r3, r4
 800cfd0:	eb18 0303 	adds.w	r3, r8, r3
 800cfd4:	60bb      	str	r3, [r7, #8]
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	eb49 0303 	adc.w	r3, r9, r3
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cfea:	4629      	mov	r1, r5
 800cfec:	024b      	lsls	r3, r1, #9
 800cfee:	4621      	mov	r1, r4
 800cff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cff4:	4621      	mov	r1, r4
 800cff6:	024a      	lsls	r2, r1, #9
 800cff8:	4610      	mov	r0, r2
 800cffa:	4619      	mov	r1, r3
 800cffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffe:	2200      	movs	r2, #0
 800d000:	62bb      	str	r3, [r7, #40]	; 0x28
 800d002:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d008:	f7f3 fe5e 	bl	8000cc8 <__aeabi_uldivmod>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4613      	mov	r3, r2
 800d012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d014:	e058      	b.n	800d0c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d016:	4b38      	ldr	r3, [pc, #224]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	099b      	lsrs	r3, r3, #6
 800d01c:	2200      	movs	r2, #0
 800d01e:	4618      	mov	r0, r3
 800d020:	4611      	mov	r1, r2
 800d022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d026:	623b      	str	r3, [r7, #32]
 800d028:	2300      	movs	r3, #0
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
 800d02c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d030:	4642      	mov	r2, r8
 800d032:	464b      	mov	r3, r9
 800d034:	f04f 0000 	mov.w	r0, #0
 800d038:	f04f 0100 	mov.w	r1, #0
 800d03c:	0159      	lsls	r1, r3, #5
 800d03e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d042:	0150      	lsls	r0, r2, #5
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4641      	mov	r1, r8
 800d04a:	ebb2 0a01 	subs.w	sl, r2, r1
 800d04e:	4649      	mov	r1, r9
 800d050:	eb63 0b01 	sbc.w	fp, r3, r1
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	f04f 0300 	mov.w	r3, #0
 800d05c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d068:	ebb2 040a 	subs.w	r4, r2, sl
 800d06c:	eb63 050b 	sbc.w	r5, r3, fp
 800d070:	f04f 0200 	mov.w	r2, #0
 800d074:	f04f 0300 	mov.w	r3, #0
 800d078:	00eb      	lsls	r3, r5, #3
 800d07a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d07e:	00e2      	lsls	r2, r4, #3
 800d080:	4614      	mov	r4, r2
 800d082:	461d      	mov	r5, r3
 800d084:	4643      	mov	r3, r8
 800d086:	18e3      	adds	r3, r4, r3
 800d088:	603b      	str	r3, [r7, #0]
 800d08a:	464b      	mov	r3, r9
 800d08c:	eb45 0303 	adc.w	r3, r5, r3
 800d090:	607b      	str	r3, [r7, #4]
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	f04f 0300 	mov.w	r3, #0
 800d09a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d09e:	4629      	mov	r1, r5
 800d0a0:	028b      	lsls	r3, r1, #10
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	028a      	lsls	r2, r1, #10
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	61fa      	str	r2, [r7, #28]
 800d0b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0bc:	f7f3 fe04 	bl	8000cc8 <__aeabi_uldivmod>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	; (800d0f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	0c1b      	lsrs	r3, r3, #16
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800d0d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d0e2:	e002      	b.n	800d0ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d0e4:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <HAL_RCC_GetSysClockFreq+0x204>)
 800d0e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d0e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d0ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3750      	adds	r7, #80	; 0x50
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0f6:	bf00      	nop
 800d0f8:	40023800 	.word	0x40023800
 800d0fc:	00f42400 	.word	0x00f42400
 800d100:	007a1200 	.word	0x007a1200

0800d104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d108:	4b03      	ldr	r3, [pc, #12]	; (800d118 <HAL_RCC_GetHCLKFreq+0x14>)
 800d10a:	681b      	ldr	r3, [r3, #0]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	200000a8 	.word	0x200000a8

0800d11c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d120:	f7ff fff0 	bl	800d104 <HAL_RCC_GetHCLKFreq>
 800d124:	4602      	mov	r2, r0
 800d126:	4b05      	ldr	r3, [pc, #20]	; (800d13c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	0a9b      	lsrs	r3, r3, #10
 800d12c:	f003 0307 	and.w	r3, r3, #7
 800d130:	4903      	ldr	r1, [pc, #12]	; (800d140 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d132:	5ccb      	ldrb	r3, [r1, r3]
 800d134:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d138:	4618      	mov	r0, r3
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	40023800 	.word	0x40023800
 800d140:	0801fef0 	.word	0x0801fef0

0800d144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d148:	f7ff ffdc 	bl	800d104 <HAL_RCC_GetHCLKFreq>
 800d14c:	4602      	mov	r2, r0
 800d14e:	4b05      	ldr	r3, [pc, #20]	; (800d164 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	0b5b      	lsrs	r3, r3, #13
 800d154:	f003 0307 	and.w	r3, r3, #7
 800d158:	4903      	ldr	r1, [pc, #12]	; (800d168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d15a:	5ccb      	ldrb	r3, [r1, r3]
 800d15c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d160:	4618      	mov	r0, r3
 800d162:	bd80      	pop	{r7, pc}
 800d164:	40023800 	.word	0x40023800
 800d168:	0801fef0 	.word	0x0801fef0

0800d16c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d174:	2300      	movs	r3, #0
 800d176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800d178:	2300      	movs	r3, #0
 800d17a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d190:	2b00      	cmp	r3, #0
 800d192:	d105      	bne.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d075      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1a0:	4b91      	ldr	r3, [pc, #580]	; (800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d1a6:	f7fd ff2b 	bl	800b000 <HAL_GetTick>
 800d1aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1ac:	e008      	b.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d1ae:	f7fd ff27 	bl	800b000 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d901      	bls.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	e189      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1c0:	4b8a      	ldr	r3, [pc, #552]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1f0      	bne.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d009      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	019a      	lsls	r2, r3, #6
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	071b      	lsls	r3, r3, #28
 800d1e4:	4981      	ldr	r1, [pc, #516]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f003 0302 	and.w	r3, r3, #2
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01f      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d1f8:	4b7c      	ldr	r3, [pc, #496]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1fe:	0f1b      	lsrs	r3, r3, #28
 800d200:	f003 0307 	and.w	r3, r3, #7
 800d204:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	019a      	lsls	r2, r3, #6
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	061b      	lsls	r3, r3, #24
 800d212:	431a      	orrs	r2, r3
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	071b      	lsls	r3, r3, #28
 800d218:	4974      	ldr	r1, [pc, #464]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d220:	4b72      	ldr	r3, [pc, #456]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d226:	f023 021f 	bic.w	r2, r3, #31
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69db      	ldr	r3, [r3, #28]
 800d22e:	3b01      	subs	r3, #1
 800d230:	496e      	ldr	r1, [pc, #440]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d232:	4313      	orrs	r3, r2
 800d234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00d      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	019a      	lsls	r2, r3, #6
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	061b      	lsls	r3, r3, #24
 800d250:	431a      	orrs	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	071b      	lsls	r3, r3, #28
 800d258:	4964      	ldr	r1, [pc, #400]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d260:	4b61      	ldr	r3, [pc, #388]	; (800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800d262:	2201      	movs	r2, #1
 800d264:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d266:	f7fd fecb 	bl	800b000 <HAL_GetTick>
 800d26a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d26c:	e008      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d26e:	f7fd fec7 	bl	800b000 <HAL_GetTick>
 800d272:	4602      	mov	r2, r0
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d901      	bls.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e129      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d280:	4b5a      	ldr	r3, [pc, #360]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d0f0      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d105      	bne.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d079      	beq.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d2a4:	4b52      	ldr	r3, [pc, #328]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d2aa:	f7fd fea9 	bl	800b000 <HAL_GetTick>
 800d2ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2b0:	e008      	b.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d2b2:	f7fd fea5 	bl	800b000 <HAL_GetTick>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d901      	bls.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e107      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2c4:	4b49      	ldr	r3, [pc, #292]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d0:	d0ef      	beq.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f003 0304 	and.w	r3, r3, #4
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d020      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d2de:	4b43      	ldr	r3, [pc, #268]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e4:	0f1b      	lsrs	r3, r3, #28
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	019a      	lsls	r2, r3, #6
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	061b      	lsls	r3, r3, #24
 800d2f8:	431a      	orrs	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	071b      	lsls	r3, r3, #28
 800d2fe:	493b      	ldr	r1, [pc, #236]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d300:	4313      	orrs	r3, r2
 800d302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d306:	4b39      	ldr	r3, [pc, #228]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d30c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6a1b      	ldr	r3, [r3, #32]
 800d314:	3b01      	subs	r3, #1
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	4934      	ldr	r1, [pc, #208]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 0308 	and.w	r3, r3, #8
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d01e      	beq.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d32c:	4b2f      	ldr	r3, [pc, #188]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d332:	0e1b      	lsrs	r3, r3, #24
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	019a      	lsls	r2, r3, #6
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	061b      	lsls	r3, r3, #24
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	071b      	lsls	r3, r3, #28
 800d34c:	4927      	ldr	r1, [pc, #156]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d354:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d35a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	4922      	ldr	r1, [pc, #136]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d364:	4313      	orrs	r3, r2
 800d366:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d36a:	4b21      	ldr	r3, [pc, #132]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d370:	f7fd fe46 	bl	800b000 <HAL_GetTick>
 800d374:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d376:	e008      	b.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d378:	f7fd fe42 	bl	800b000 <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	2b02      	cmp	r3, #2
 800d384:	d901      	bls.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e0a4      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d38a:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d396:	d1ef      	bne.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 808b 	beq.w	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ae:	4a0f      	ldr	r2, [pc, #60]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3b4:	6413      	str	r3, [r2, #64]	; 0x40
 800d3b6:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a0b      	ldr	r2, [pc, #44]	; (800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800d3c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3ce:	f7fd fe17 	bl	800b000 <HAL_GetTick>
 800d3d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d3d4:	e010      	b.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d3d6:	f7fd fe13 	bl	800b000 <HAL_GetTick>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d909      	bls.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e075      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800d3e8:	42470068 	.word	0x42470068
 800d3ec:	40023800 	.word	0x40023800
 800d3f0:	42470070 	.word	0x42470070
 800d3f4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d3f8:	4b38      	ldr	r3, [pc, #224]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d400:	2b00      	cmp	r3, #0
 800d402:	d0e8      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d404:	4b36      	ldr	r3, [pc, #216]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d40c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d02f      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d028      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d422:	4b2f      	ldr	r3, [pc, #188]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d42a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d42c:	4b2d      	ldr	r3, [pc, #180]	; (800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d42e:	2201      	movs	r2, #1
 800d430:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d432:	4b2c      	ldr	r3, [pc, #176]	; (800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d438:	4a29      	ldr	r2, [pc, #164]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d43e:	4b28      	ldr	r3, [pc, #160]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b01      	cmp	r3, #1
 800d448:	d114      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d44a:	f7fd fdd9 	bl	800b000 <HAL_GetTick>
 800d44e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d450:	e00a      	b.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d452:	f7fd fdd5 	bl	800b000 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d460:	4293      	cmp	r3, r2
 800d462:	d901      	bls.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e035      	b.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46c:	f003 0302 	and.w	r3, r3, #2
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0ee      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d47c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d480:	d10d      	bne.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800d482:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d496:	4912      	ldr	r1, [pc, #72]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	608b      	str	r3, [r1, #8]
 800d49c:	e005      	b.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800d49e:	4b10      	ldr	r3, [pc, #64]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	4a0f      	ldr	r2, [pc, #60]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d4a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d4a8:	6093      	str	r3, [r2, #8]
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d4ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4b6:	490a      	ldr	r1, [pc, #40]	; (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d4ce:	4b06      	ldr	r3, [pc, #24]	; (800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800d4d0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	40007000 	.word	0x40007000
 800d4e0:	40023800 	.word	0x40023800
 800d4e4:	42470e40 	.word	0x42470e40
 800d4e8:	424711e0 	.word	0x424711e0

0800d4ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e066      	b.n	800d5d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7f5b      	ldrb	r3, [r3, #29]
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d105      	bne.n	800d518 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7f7 f814 	bl	8004540 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2202      	movs	r2, #2
 800d51c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	22ca      	movs	r2, #202	; 0xca
 800d524:	625a      	str	r2, [r3, #36]	; 0x24
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2253      	movs	r2, #83	; 0x53
 800d52c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fa45 	bl	800d9be <RTC_EnterInitMode>
 800d534:	4603      	mov	r3, r0
 800d536:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d12c      	bne.n	800d598 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	6812      	ldr	r2, [r2, #0]
 800d548:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d550:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6899      	ldr	r1, [r3, #8]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	431a      	orrs	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	430a      	orrs	r2, r1
 800d56e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	68d2      	ldr	r2, [r2, #12]
 800d578:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6919      	ldr	r1, [r3, #16]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	041a      	lsls	r2, r3, #16
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fa4c 	bl	800da2c <RTC_ExitInitMode>
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d113      	bne.n	800d5c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d5ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	699a      	ldr	r2, [r3, #24]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	430a      	orrs	r2, r1
 800d5be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	22ff      	movs	r2, #255	; 0xff
 800d5cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d5d8:	b590      	push	{r4, r7, lr}
 800d5da:	b087      	sub	sp, #28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	7f1b      	ldrb	r3, [r3, #28]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d101      	bne.n	800d5f4 <HAL_RTC_SetTime+0x1c>
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	e087      	b.n	800d704 <HAL_RTC_SetTime+0x12c>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2202      	movs	r2, #2
 800d5fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d126      	bne.n	800d654 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2200      	movs	r2, #0
 800d618:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 fa29 	bl	800da76 <RTC_ByteToBcd2>
 800d624:	4603      	mov	r3, r0
 800d626:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	785b      	ldrb	r3, [r3, #1]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 fa22 	bl	800da76 <RTC_ByteToBcd2>
 800d632:	4603      	mov	r3, r0
 800d634:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d636:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	789b      	ldrb	r3, [r3, #2]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 fa1a 	bl	800da76 <RTC_ByteToBcd2>
 800d642:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d644:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	78db      	ldrb	r3, [r3, #3]
 800d64c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d64e:	4313      	orrs	r3, r2
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	e018      	b.n	800d686 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d102      	bne.n	800d668 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2200      	movs	r2, #0
 800d666:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	785b      	ldrb	r3, [r3, #1]
 800d672:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d674:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d67a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	78db      	ldrb	r3, [r3, #3]
 800d680:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d682:	4313      	orrs	r3, r2
 800d684:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	22ca      	movs	r2, #202	; 0xca
 800d68c:	625a      	str	r2, [r3, #36]	; 0x24
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2253      	movs	r2, #83	; 0x53
 800d694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 f991 	bl	800d9be <RTC_EnterInitMode>
 800d69c:	4603      	mov	r3, r0
 800d69e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d6a0:	7cfb      	ldrb	r3, [r7, #19]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d120      	bne.n	800d6e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d6b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d6b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d6c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6899      	ldr	r1, [r3, #8]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	68da      	ldr	r2, [r3, #12]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 f9a4 	bl	800da2c <RTC_ExitInitMode>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d6e8:	7cfb      	ldrb	r3, [r7, #19]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d102      	bne.n	800d6f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	22ff      	movs	r2, #255	; 0xff
 800d6fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	771a      	strb	r2, [r3, #28]

  return status;
 800d702:	7cfb      	ldrb	r3, [r7, #19]
}
 800d704:	4618      	mov	r0, r3
 800d706:	371c      	adds	r7, #28
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd90      	pop	{r4, r7, pc}

0800d70c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d718:	2300      	movs	r3, #0
 800d71a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d73e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d742:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	0c1b      	lsrs	r3, r3, #16
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	0d9b      	lsrs	r3, r3, #22
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d11a      	bne.n	800d7be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 f98f 	bl	800dab0 <RTC_Bcd2ToByte>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	785b      	ldrb	r3, [r3, #1]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f986 	bl	800dab0 <RTC_Bcd2ToByte>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	789b      	ldrb	r3, [r3, #2]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f97d 	bl	800dab0 <RTC_Bcd2ToByte>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d7c8:	b590      	push	{r4, r7, lr}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	7f1b      	ldrb	r3, [r3, #28]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d101      	bne.n	800d7e4 <HAL_RTC_SetDate+0x1c>
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	e071      	b.n	800d8c8 <HAL_RTC_SetDate+0x100>
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10e      	bne.n	800d814 <HAL_RTC_SetDate+0x4c>
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	785b      	ldrb	r3, [r3, #1]
 800d7fa:	f003 0310 	and.w	r3, r3, #16
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d008      	beq.n	800d814 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	785b      	ldrb	r3, [r3, #1]
 800d806:	f023 0310 	bic.w	r3, r3, #16
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	330a      	adds	r3, #10
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d11c      	bne.n	800d854 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	78db      	ldrb	r3, [r3, #3]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f929 	bl	800da76 <RTC_ByteToBcd2>
 800d824:	4603      	mov	r3, r0
 800d826:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	785b      	ldrb	r3, [r3, #1]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 f922 	bl	800da76 <RTC_ByteToBcd2>
 800d832:	4603      	mov	r3, r0
 800d834:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d836:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	789b      	ldrb	r3, [r3, #2]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 f91a 	bl	800da76 <RTC_ByteToBcd2>
 800d842:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d844:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d84e:	4313      	orrs	r3, r2
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	e00e      	b.n	800d872 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	78db      	ldrb	r3, [r3, #3]
 800d858:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	785b      	ldrb	r3, [r3, #1]
 800d85e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d860:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d866:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	22ca      	movs	r2, #202	; 0xca
 800d878:	625a      	str	r2, [r3, #36]	; 0x24
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2253      	movs	r2, #83	; 0x53
 800d880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 f89b 	bl	800d9be <RTC_EnterInitMode>
 800d888:	4603      	mov	r3, r0
 800d88a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d88c:	7cfb      	ldrb	r3, [r7, #19]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10c      	bne.n	800d8ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d89c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 f8c2 	bl	800da2c <RTC_ExitInitMode>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d8ac:	7cfb      	ldrb	r3, [r7, #19]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d102      	bne.n	800d8b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	22ff      	movs	r2, #255	; 0xff
 800d8be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	771a      	strb	r2, [r3, #28]

  return status;
 800d8c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	371c      	adds	r7, #28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd90      	pop	{r4, r7, pc}

0800d8d0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d8ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d8ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	0a1b      	lsrs	r3, r3, #8
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	b2da      	uxtb	r2, r3
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d912:	b2da      	uxtb	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	0b5b      	lsrs	r3, r3, #13
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0307 	and.w	r3, r3, #7
 800d922:	b2da      	uxtb	r2, r3
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11a      	bne.n	800d964 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	78db      	ldrb	r3, [r3, #3]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 f8bc 	bl	800dab0 <RTC_Bcd2ToByte>
 800d938:	4603      	mov	r3, r0
 800d93a:	461a      	mov	r2, r3
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	785b      	ldrb	r3, [r3, #1]
 800d944:	4618      	mov	r0, r3
 800d946:	f000 f8b3 	bl	800dab0 <RTC_Bcd2ToByte>
 800d94a:	4603      	mov	r3, r0
 800d94c:	461a      	mov	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	789b      	ldrb	r3, [r3, #2]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f8aa 	bl	800dab0 <RTC_Bcd2ToByte>
 800d95c:	4603      	mov	r3, r0
 800d95e:	461a      	mov	r2, r3
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d976:	2300      	movs	r3, #0
 800d978:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d988:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d98a:	f7fd fb39 	bl	800b000 <HAL_GetTick>
 800d98e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d990:	e009      	b.n	800d9a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d992:	f7fd fb35 	bl	800b000 <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9a0:	d901      	bls.n	800d9a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e007      	b.n	800d9b6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	f003 0320 	and.w	r3, r3, #32
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0ee      	beq.n	800d992 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d122      	bne.n	800da22 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68da      	ldr	r2, [r3, #12]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d9ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d9ec:	f7fd fb08 	bl	800b000 <HAL_GetTick>
 800d9f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d9f2:	e00c      	b.n	800da0e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d9f4:	f7fd fb04 	bl	800b000 <HAL_GetTick>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da02:	d904      	bls.n	800da0e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2204      	movs	r2, #4
 800da08:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <RTC_EnterInitMode+0x64>
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d1e8      	bne.n	800d9f4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800da22:	7bfb      	ldrb	r3, [r7, #15]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f003 0320 	and.w	r3, r3, #32
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10a      	bne.n	800da6c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff ff89 	bl	800d96e <HAL_RTC_WaitForSynchro>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d004      	beq.n	800da6c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2204      	movs	r2, #4
 800da66:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800da76:	b480      	push	{r7}
 800da78:	b085      	sub	sp, #20
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	4603      	mov	r3, r0
 800da7e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800da84:	e005      	b.n	800da92 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	3301      	adds	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800da8c:	79fb      	ldrb	r3, [r7, #7]
 800da8e:	3b0a      	subs	r3, #10
 800da90:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	2b09      	cmp	r3, #9
 800da96:	d8f6      	bhi.n	800da86 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	011b      	lsls	r3, r3, #4
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	b2db      	uxtb	r3, r3
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3714      	adds	r7, #20
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	091b      	lsrs	r3, r3, #4
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	461a      	mov	r2, r3
 800dac6:	0092      	lsls	r2, r2, #2
 800dac8:	4413      	add	r3, r2
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	f003 030f 	and.w	r3, r3, #15
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	4413      	add	r3, r2
 800dada:	b2db      	uxtb	r3, r3
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e022      	b.n	800db40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d105      	bne.n	800db12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7f6 fd61 	bl	80045d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2203      	movs	r2, #3
 800db16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f814 	bl	800db48 <HAL_SD_InitCard>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e00a      	b.n	800db40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800db48:	b5b0      	push	{r4, r5, r7, lr}
 800db4a:	b08e      	sub	sp, #56	; 0x38
 800db4c:	af04      	add	r7, sp, #16
 800db4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800db50:	2300      	movs	r3, #0
 800db52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800db54:	2300      	movs	r3, #0
 800db56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800db58:	2300      	movs	r3, #0
 800db5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800db5c:	2300      	movs	r3, #0
 800db5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800db60:	2300      	movs	r3, #0
 800db62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800db64:	2376      	movs	r3, #118	; 0x76
 800db66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681d      	ldr	r5, [r3, #0]
 800db6c:	466c      	mov	r4, sp
 800db6e:	f107 0314 	add.w	r3, r7, #20
 800db72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db7a:	f107 0308 	add.w	r3, r7, #8
 800db7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db80:	4628      	mov	r0, r5
 800db82:	f002 ffb9 	bl	8010af8 <SDIO_Init>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800db8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e04f      	b.n	800dc38 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800db98:	4b29      	ldr	r3, [pc, #164]	; (800dc40 <HAL_SD_InitCard+0xf8>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f002 fff1 	bl	8010b8a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800dba8:	4b25      	ldr	r3, [pc, #148]	; (800dc40 <HAL_SD_InitCard+0xf8>)
 800dbaa:	2201      	movs	r2, #1
 800dbac:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800dbae:	2002      	movs	r0, #2
 800dbb0:	f7fd fa32 	bl	800b018 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fe69 	bl	800e88c <SD_PowerON>
 800dbba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00b      	beq.n	800dbda <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	431a      	orrs	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e02e      	b.n	800dc38 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fd88 	bl	800e6f0 <SD_InitCard>
 800dbe0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00b      	beq.n	800dc00 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	431a      	orrs	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e01b      	b.n	800dc38 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f003 f850 	bl	8010cae <SDMMC_CmdBlockLength>
 800dc0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00f      	beq.n	800dc36 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a0a      	ldr	r2, [pc, #40]	; (800dc44 <HAL_SD_InitCard+0xfc>)
 800dc1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	431a      	orrs	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3728      	adds	r7, #40	; 0x28
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bdb0      	pop	{r4, r5, r7, pc}
 800dc40:	422580a0 	.word	0x422580a0
 800dc44:	004005ff 	.word	0x004005ff

0800dc48 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b092      	sub	sp, #72	; 0x48
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc56:	f7fd f9d3 	bl	800b000 <HAL_GetTick>
 800dc5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d107      	bne.n	800dc7a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e1bd      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	f040 81b0 	bne.w	800dfe8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dc8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	441a      	add	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d907      	bls.n	800dcac <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e1a4      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d002      	beq.n	800dcca <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc6:	025b      	lsls	r3, r3, #9
 800dcc8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcca:	f04f 33ff 	mov.w	r3, #4294967295
 800dcce:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	025b      	lsls	r3, r3, #9
 800dcd4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dcd6:	2390      	movs	r3, #144	; 0x90
 800dcd8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dcda:	2302      	movs	r3, #2
 800dcdc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dcde:	2300      	movs	r3, #0
 800dce0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800dce2:	2301      	movs	r3, #1
 800dce4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f107 0214 	add.w	r2, r7, #20
 800dcee:	4611      	mov	r1, r2
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f002 ffb0 	bl	8010c56 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d90a      	bls.n	800dd12 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2202      	movs	r2, #2
 800dd00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f003 f814 	bl	8010d36 <SDMMC_CmdReadMultiBlock>
 800dd0e:	6478      	str	r0, [r7, #68]	; 0x44
 800dd10:	e009      	b.n	800dd26 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2201      	movs	r2, #1
 800dd16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f002 ffe7 	bl	8010cf2 <SDMMC_CmdReadSingleBlock>
 800dd24:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d012      	beq.n	800dd52 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a7a      	ldr	r2, [pc, #488]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2201      	movs	r2, #1
 800dd44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e151      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800dd56:	e061      	b.n	800de1c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d03c      	beq.n	800dde0 <HAL_SD_ReadBlocks+0x198>
 800dd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d039      	beq.n	800dde0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd70:	e033      	b.n	800ddda <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f002 fee9 	bl	8010b4e <SDIO_ReadFIFO>
 800dd7c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd88:	3301      	adds	r3, #1
 800dd8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	0a1b      	lsrs	r3, r3, #8
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800dd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd9e:	3301      	adds	r3, #1
 800dda0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800dda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda4:	3b01      	subs	r3, #1
 800dda6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	0c1b      	lsrs	r3, r3, #16
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800ddb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ddbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc0:	0e1b      	lsrs	r3, r3, #24
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	3301      	adds	r3, #1
 800ddcc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800ddd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	643b      	str	r3, [r7, #64]	; 0x40
 800ddda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	d9c8      	bls.n	800dd72 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800dde0:	f7fd f90e 	bl	800b000 <HAL_GetTick>
 800dde4:	4602      	mov	r2, r0
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d902      	bls.n	800ddf6 <HAL_SD_ReadBlocks+0x1ae>
 800ddf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d112      	bne.n	800de1c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a48      	ldr	r2, [pc, #288]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800ddfc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2201      	movs	r2, #1
 800de0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	e0ec      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de22:	f240 332a 	movw	r3, #810	; 0x32a
 800de26:	4013      	ands	r3, r2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d095      	beq.n	800dd58 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de36:	2b00      	cmp	r3, #0
 800de38:	d022      	beq.n	800de80 <HAL_SD_ReadBlocks+0x238>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d91f      	bls.n	800de80 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de44:	2b03      	cmp	r3, #3
 800de46:	d01b      	beq.n	800de80 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f002 ffd9 	bl	8010e04 <SDMMC_CmdStopTransfer>
 800de52:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800de54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de56:	2b00      	cmp	r3, #0
 800de58:	d012      	beq.n	800de80 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a2f      	ldr	r2, [pc, #188]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800de60:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de68:	431a      	orrs	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e0ba      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de86:	f003 0308 	and.w	r3, r3, #8
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d012      	beq.n	800deb4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a22      	ldr	r2, [pc, #136]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800de94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9a:	f043 0208 	orr.w	r2, r3, #8
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2201      	movs	r2, #1
 800dea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0a0      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deba:	f003 0302 	and.w	r3, r3, #2
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d012      	beq.n	800dee8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a15      	ldr	r2, [pc, #84]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dece:	f043 0202 	orr.w	r2, r3, #2
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2201      	movs	r2, #1
 800deda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e086      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deee:	f003 0320 	and.w	r3, r3, #32
 800def2:	2b00      	cmp	r3, #0
 800def4:	d063      	beq.n	800dfbe <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a08      	ldr	r2, [pc, #32]	; (800df1c <HAL_SD_ReadBlocks+0x2d4>)
 800defc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df02:	f043 0220 	orr.w	r2, r3, #32
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e06c      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
 800df1c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	f002 fe12 	bl	8010b4e <SDIO_ReadFIFO>
 800df2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800df34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df36:	3301      	adds	r3, #1
 800df38:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800df3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3c:	3b01      	subs	r3, #1
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	0a1b      	lsrs	r3, r3, #8
 800df44:	b2da      	uxtb	r2, r3
 800df46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800df4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df4c:	3301      	adds	r3, #1
 800df4e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800df50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df52:	3b01      	subs	r3, #1
 800df54:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	0c1b      	lsrs	r3, r3, #16
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800df60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df62:	3301      	adds	r3, #1
 800df64:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800df66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df68:	3b01      	subs	r3, #1
 800df6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	0e1b      	lsrs	r3, r3, #24
 800df70:	b2da      	uxtb	r2, r3
 800df72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df74:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800df76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df78:	3301      	adds	r3, #1
 800df7a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800df7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df7e:	3b01      	subs	r3, #1
 800df80:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800df82:	f7fd f83d 	bl	800b000 <HAL_GetTick>
 800df86:	4602      	mov	r2, r0
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df8e:	429a      	cmp	r2, r3
 800df90:	d902      	bls.n	800df98 <HAL_SD_ReadBlocks+0x350>
 800df92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df94:	2b00      	cmp	r3, #0
 800df96:	d112      	bne.n	800dfbe <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a18      	ldr	r2, [pc, #96]	; (800e000 <HAL_SD_ReadBlocks+0x3b8>)
 800df9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e01b      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <HAL_SD_ReadBlocks+0x38a>
 800dfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1a6      	bne.n	800df20 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfda:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e006      	b.n	800dff6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dff4:	2301      	movs	r3, #1
  }
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3748      	adds	r7, #72	; 0x48
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	004005ff 	.word	0x004005ff

0800e004 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b092      	sub	sp, #72	; 0x48
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e012:	f7fc fff5 	bl	800b000 <HAL_GetTick>
 800e016:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d107      	bne.n	800e036 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	e166      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	2b01      	cmp	r3, #1
 800e040:	f040 8159 	bne.w	800e2f6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	441a      	add	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e054:	429a      	cmp	r2, r3
 800e056:	d907      	bls.n	800e068 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e14d      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2203      	movs	r2, #3
 800e06c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2200      	movs	r2, #0
 800e076:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d002      	beq.n	800e086 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	025b      	lsls	r3, r3, #9
 800e084:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e086:	f04f 33ff 	mov.w	r3, #4294967295
 800e08a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	025b      	lsls	r3, r3, #9
 800e090:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e092:	2390      	movs	r3, #144	; 0x90
 800e094:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e096:	2300      	movs	r3, #0
 800e098:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f107 0218 	add.w	r2, r7, #24
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f002 fdd2 	bl	8010c56 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d90a      	bls.n	800e0ce <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f002 fe7a 	bl	8010dbe <SDMMC_CmdWriteMultiBlock>
 800e0ca:	6478      	str	r0, [r7, #68]	; 0x44
 800e0cc:	e009      	b.n	800e0e2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2210      	movs	r2, #16
 800e0d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f002 fe4d 	bl	8010d7a <SDMMC_CmdWriteSingleBlock>
 800e0e0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d012      	beq.n	800e10e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a87      	ldr	r2, [pc, #540]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e0ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e0fa      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e112:	e065      	b.n	800e1e0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d040      	beq.n	800e1a4 <HAL_SD_WriteBlocks+0x1a0>
 800e122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e124:	2b00      	cmp	r3, #0
 800e126:	d03d      	beq.n	800e1a4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e128:	2300      	movs	r3, #0
 800e12a:	643b      	str	r3, [r7, #64]	; 0x40
 800e12c:	e037      	b.n	800e19e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800e12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e136:	3301      	adds	r3, #1
 800e138:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13c:	3b01      	subs	r3, #1
 800e13e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	021a      	lsls	r2, r3, #8
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	4313      	orrs	r3, r2
 800e14a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14e:	3301      	adds	r3, #1
 800e150:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e154:	3b01      	subs	r3, #1
 800e156:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	041a      	lsls	r2, r3, #16
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	4313      	orrs	r3, r2
 800e162:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e166:	3301      	adds	r3, #1
 800e168:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e16c:	3b01      	subs	r3, #1
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	061a      	lsls	r2, r3, #24
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	4313      	orrs	r3, r2
 800e17a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17e:	3301      	adds	r3, #1
 800e180:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e184:	3b01      	subs	r3, #1
 800e186:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f107 0214 	add.w	r2, r7, #20
 800e190:	4611      	mov	r1, r2
 800e192:	4618      	mov	r0, r3
 800e194:	f002 fce8 	bl	8010b68 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19a:	3301      	adds	r3, #1
 800e19c:	643b      	str	r3, [r7, #64]	; 0x40
 800e19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a0:	2b07      	cmp	r3, #7
 800e1a2:	d9c4      	bls.n	800e12e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e1a4:	f7fc ff2c 	bl	800b000 <HAL_GetTick>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d902      	bls.n	800e1ba <HAL_SD_WriteBlocks+0x1b6>
 800e1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d112      	bne.n	800e1e0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a53      	ldr	r2, [pc, #332]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e1c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	e091      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1e6:	f240 331a 	movw	r3, #794	; 0x31a
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d091      	beq.n	800e114 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d022      	beq.n	800e244 <HAL_SD_WriteBlocks+0x240>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d91f      	bls.n	800e244 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d01b      	beq.n	800e244 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4618      	mov	r0, r3
 800e212:	f002 fdf7 	bl	8010e04 <SDMMC_CmdStopTransfer>
 800e216:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d012      	beq.n	800e244 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a3a      	ldr	r2, [pc, #232]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e224:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e22c:	431a      	orrs	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e05f      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24a:	f003 0308 	and.w	r3, r3, #8
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d012      	beq.n	800e278 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a2d      	ldr	r2, [pc, #180]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25e:	f043 0208 	orr.w	r2, r3, #8
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	e045      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27e:	f003 0302 	and.w	r3, r3, #2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d012      	beq.n	800e2ac <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a20      	ldr	r2, [pc, #128]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e28c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e292:	f043 0202 	orr.w	r2, r3, #2
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e02b      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b2:	f003 0310 	and.w	r3, r3, #16
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d012      	beq.n	800e2e0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a13      	ldr	r2, [pc, #76]	; (800e30c <HAL_SD_WriteBlocks+0x308>)
 800e2c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	f043 0210 	orr.w	r2, r3, #16
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e011      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2e8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e006      	b.n	800e304 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
  }
}
 800e304:	4618      	mov	r0, r3
 800e306:	3748      	adds	r7, #72	; 0x48
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	004005ff 	.word	0x004005ff

0800e310 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e31e:	0f9b      	lsrs	r3, r3, #30
 800e320:	b2da      	uxtb	r2, r3
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e32a:	0e9b      	lsrs	r3, r3, #26
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	f003 030f 	and.w	r3, r3, #15
 800e332:	b2da      	uxtb	r2, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33c:	0e1b      	lsrs	r3, r3, #24
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	f003 0303 	and.w	r3, r3, #3
 800e344:	b2da      	uxtb	r2, r3
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34e:	0c1b      	lsrs	r3, r3, #16
 800e350:	b2da      	uxtb	r2, r3
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e35a:	0a1b      	lsrs	r3, r3, #8
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e366:	b2da      	uxtb	r2, r3
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e370:	0d1b      	lsrs	r3, r3, #20
 800e372:	b29a      	uxth	r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e37c:	0c1b      	lsrs	r3, r3, #16
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	f003 030f 	and.w	r3, r3, #15
 800e384:	b2da      	uxtb	r2, r3
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e38e:	0bdb      	lsrs	r3, r3, #15
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a0:	0b9b      	lsrs	r3, r3, #14
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3b2:	0b5b      	lsrs	r3, r3, #13
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3c4:	0b1b      	lsrs	r3, r3, #12
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	f003 0301 	and.w	r3, r3, #1
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d163      	bne.n	800e4a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3e4:	009a      	lsls	r2, r3, #2
 800e3e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e3f0:	0f92      	lsrs	r2, r2, #30
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3fc:	0edb      	lsrs	r3, r3, #27
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	f003 0307 	and.w	r3, r3, #7
 800e404:	b2da      	uxtb	r2, r3
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e40e:	0e1b      	lsrs	r3, r3, #24
 800e410:	b2db      	uxtb	r3, r3
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	b2da      	uxtb	r2, r3
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e420:	0d5b      	lsrs	r3, r3, #21
 800e422:	b2db      	uxtb	r3, r3
 800e424:	f003 0307 	and.w	r3, r3, #7
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e432:	0c9b      	lsrs	r3, r3, #18
 800e434:	b2db      	uxtb	r3, r3
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e444:	0bdb      	lsrs	r3, r3, #15
 800e446:	b2db      	uxtb	r3, r3
 800e448:	f003 0307 	and.w	r3, r3, #7
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	1c5a      	adds	r2, r3, #1
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	7e1b      	ldrb	r3, [r3, #24]
 800e460:	b2db      	uxtb	r3, r3
 800e462:	f003 0307 	and.w	r3, r3, #7
 800e466:	3302      	adds	r3, #2
 800e468:	2201      	movs	r2, #1
 800e46a:	fa02 f303 	lsl.w	r3, r2, r3
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e472:	fb03 f202 	mul.w	r2, r3, r2
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	7a1b      	ldrb	r3, [r3, #8]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f003 030f 	and.w	r3, r3, #15
 800e484:	2201      	movs	r2, #1
 800e486:	409a      	lsls	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e494:	0a52      	lsrs	r2, r2, #9
 800e496:	fb03 f202 	mul.w	r2, r3, r2
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4a4:	661a      	str	r2, [r3, #96]	; 0x60
 800e4a6:	e031      	b.n	800e50c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d11d      	bne.n	800e4ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4b4:	041b      	lsls	r3, r3, #16
 800e4b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4be:	0c1b      	lsrs	r3, r3, #16
 800e4c0:	431a      	orrs	r2, r3
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	029a      	lsls	r2, r3, #10
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	661a      	str	r2, [r3, #96]	; 0x60
 800e4ea:	e00f      	b.n	800e50c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a58      	ldr	r2, [pc, #352]	; (800e654 <HAL_SD_GetCardCSD+0x344>)
 800e4f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e508:	2301      	movs	r3, #1
 800e50a:	e09d      	b.n	800e648 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e510:	0b9b      	lsrs	r3, r3, #14
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e522:	09db      	lsrs	r3, r3, #7
 800e524:	b2db      	uxtb	r3, r3
 800e526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e544:	0fdb      	lsrs	r3, r3, #31
 800e546:	b2da      	uxtb	r2, r3
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e550:	0f5b      	lsrs	r3, r3, #29
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f003 0303 	and.w	r3, r3, #3
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e562:	0e9b      	lsrs	r3, r3, #26
 800e564:	b2db      	uxtb	r3, r3
 800e566:	f003 0307 	and.w	r3, r3, #7
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e574:	0d9b      	lsrs	r3, r3, #22
 800e576:	b2db      	uxtb	r3, r3
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e586:	0d5b      	lsrs	r3, r3, #21
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a2:	0c1b      	lsrs	r3, r3, #16
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b6:	0bdb      	lsrs	r3, r3, #15
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ca:	0b9b      	lsrs	r3, r3, #14
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5de:	0b5b      	lsrs	r3, r3, #13
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	f003 0301 	and.w	r3, r3, #1
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f2:	0b1b      	lsrs	r3, r3, #12
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e606:	0a9b      	lsrs	r3, r3, #10
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	f003 0303 	and.w	r3, r3, #3
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	0a1b      	lsrs	r3, r3, #8
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0303 	and.w	r3, r3, #3
 800e622:	b2da      	uxtb	r2, r3
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e62e:	085b      	lsrs	r3, r3, #1
 800e630:	b2db      	uxtb	r3, r3
 800e632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e636:	b2da      	uxtb	r2, r3
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	004005ff 	.word	0x004005ff

0800e658 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e6bc:	f107 030c 	add.w	r3, r7, #12
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f970 	bl	800e9a8 <SD_SendStatus>
 800e6c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	431a      	orrs	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	0a5b      	lsrs	r3, r3, #9
 800e6e0:	f003 030f 	and.w	r3, r3, #15
 800e6e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e6e6:	693b      	ldr	r3, [r7, #16]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e6f0:	b5b0      	push	{r4, r5, r7, lr}
 800e6f2:	b094      	sub	sp, #80	; 0x50
 800e6f4:	af04      	add	r7, sp, #16
 800e6f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4618      	mov	r0, r3
 800e702:	f002 fa50 	bl	8010ba6 <SDIO_GetPowerState>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e70c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e710:	e0b8      	b.n	800e884 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e716:	2b03      	cmp	r3, #3
 800e718:	d02f      	beq.n	800e77a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f002 fc37 	bl	8010f92 <SDMMC_CmdSendCID>
 800e724:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <SD_InitCard+0x40>
    {
      return errorstate;
 800e72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72e:	e0a9      	b.n	800e884 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2100      	movs	r1, #0
 800e736:	4618      	mov	r0, r3
 800e738:	f002 fa7a 	bl	8010c30 <SDIO_GetResponse>
 800e73c:	4602      	mov	r2, r0
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2104      	movs	r1, #4
 800e748:	4618      	mov	r0, r3
 800e74a:	f002 fa71 	bl	8010c30 <SDIO_GetResponse>
 800e74e:	4602      	mov	r2, r0
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2108      	movs	r1, #8
 800e75a:	4618      	mov	r0, r3
 800e75c:	f002 fa68 	bl	8010c30 <SDIO_GetResponse>
 800e760:	4602      	mov	r2, r0
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	210c      	movs	r1, #12
 800e76c:	4618      	mov	r0, r3
 800e76e:	f002 fa5f 	bl	8010c30 <SDIO_GetResponse>
 800e772:	4602      	mov	r2, r0
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d00d      	beq.n	800e79e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f107 020e 	add.w	r2, r7, #14
 800e78a:	4611      	mov	r1, r2
 800e78c:	4618      	mov	r0, r3
 800e78e:	f002 fc3d 	bl	801100c <SDMMC_CmdSetRelAdd>
 800e792:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <SD_InitCard+0xae>
    {
      return errorstate;
 800e79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79c:	e072      	b.n	800e884 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d036      	beq.n	800e814 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e7a6:	89fb      	ldrh	r3, [r7, #14]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7b6:	041b      	lsls	r3, r3, #16
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f002 fc07 	bl	8010fce <SDMMC_CmdSendCSD>
 800e7c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <SD_InitCard+0xdc>
    {
      return errorstate;
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ca:	e05b      	b.n	800e884 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f002 fa2c 	bl	8010c30 <SDIO_GetResponse>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2104      	movs	r1, #4
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f002 fa23 	bl	8010c30 <SDIO_GetResponse>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2108      	movs	r1, #8
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f002 fa1a 	bl	8010c30 <SDIO_GetResponse>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	210c      	movs	r1, #12
 800e808:	4618      	mov	r0, r3
 800e80a:	f002 fa11 	bl	8010c30 <SDIO_GetResponse>
 800e80e:	4602      	mov	r2, r0
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2104      	movs	r1, #4
 800e81a:	4618      	mov	r0, r3
 800e81c:	f002 fa08 	bl	8010c30 <SDIO_GetResponse>
 800e820:	4603      	mov	r3, r0
 800e822:	0d1a      	lsrs	r2, r3, #20
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e828:	f107 0310 	add.w	r3, r7, #16
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff fd6e 	bl	800e310 <HAL_SD_GetCardCSD>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e83a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e83e:	e021      	b.n	800e884 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6819      	ldr	r1, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e848:	041b      	lsls	r3, r3, #16
 800e84a:	2200      	movs	r2, #0
 800e84c:	461c      	mov	r4, r3
 800e84e:	4615      	mov	r5, r2
 800e850:	4622      	mov	r2, r4
 800e852:	462b      	mov	r3, r5
 800e854:	4608      	mov	r0, r1
 800e856:	f002 faf7 	bl	8010e48 <SDMMC_CmdSelDesel>
 800e85a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <SD_InitCard+0x176>
  {
    return errorstate;
 800e862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e864:	e00e      	b.n	800e884 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681d      	ldr	r5, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	466c      	mov	r4, sp
 800e86e:	f103 0210 	add.w	r2, r3, #16
 800e872:	ca07      	ldmia	r2, {r0, r1, r2}
 800e874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e878:	3304      	adds	r3, #4
 800e87a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e87c:	4628      	mov	r0, r5
 800e87e:	f002 f93b 	bl	8010af8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3740      	adds	r7, #64	; 0x40
 800e888:	46bd      	mov	sp, r7
 800e88a:	bdb0      	pop	{r4, r5, r7, pc}

0800e88c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	617b      	str	r3, [r7, #20]
 800e89c:	2300      	movs	r3, #0
 800e89e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f002 faf2 	bl	8010e8e <SDMMC_CmdGoIdleState>
 800e8aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	e072      	b.n	800e99c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f002 fb05 	bl	8010eca <SDMMC_CmdOperCond>
 800e8c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00d      	beq.n	800e8e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f002 fadb 	bl	8010e8e <SDMMC_CmdGoIdleState>
 800e8d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <SD_PowerON+0x5e>
    {
      return errorstate;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	e05b      	b.n	800e99c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d137      	bne.n	800e962 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f002 fb05 	bl	8010f08 <SDMMC_CmdAppCommand>
 800e8fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d02d      	beq.n	800e962 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e90a:	e047      	b.n	800e99c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2100      	movs	r1, #0
 800e912:	4618      	mov	r0, r3
 800e914:	f002 faf8 	bl	8010f08 <SDMMC_CmdAppCommand>
 800e918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <SD_PowerON+0x98>
    {
      return errorstate;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	e03b      	b.n	800e99c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	491e      	ldr	r1, [pc, #120]	; (800e9a4 <SD_PowerON+0x118>)
 800e92a:	4618      	mov	r0, r3
 800e92c:	f002 fb0e 	bl	8010f4c <SDMMC_CmdAppOperCommand>
 800e930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e93c:	e02e      	b.n	800e99c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2100      	movs	r1, #0
 800e944:	4618      	mov	r0, r3
 800e946:	f002 f973 	bl	8010c30 <SDIO_GetResponse>
 800e94a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	0fdb      	lsrs	r3, r3, #31
 800e950:	2b01      	cmp	r3, #1
 800e952:	d101      	bne.n	800e958 <SD_PowerON+0xcc>
 800e954:	2301      	movs	r3, #1
 800e956:	e000      	b.n	800e95a <SD_PowerON+0xce>
 800e958:	2300      	movs	r3, #0
 800e95a:	613b      	str	r3, [r7, #16]

    count++;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	3301      	adds	r3, #1
 800e960:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e968:	4293      	cmp	r3, r2
 800e96a:	d802      	bhi.n	800e972 <SD_PowerON+0xe6>
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d0cc      	beq.n	800e90c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e978:	4293      	cmp	r3, r2
 800e97a:	d902      	bls.n	800e982 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e97c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e980:	e00c      	b.n	800e99c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d003      	beq.n	800e994 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	645a      	str	r2, [r3, #68]	; 0x44
 800e992:	e002      	b.n	800e99a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	c1100000 	.word	0xc1100000

0800e9a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9bc:	e018      	b.n	800e9f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9c6:	041b      	lsls	r3, r3, #16
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	f002 fb3f 	bl	801104e <SDMMC_CmdSendStatus>
 800e9d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	e009      	b.n	800e9f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f002 f924 	bl	8010c30 <SDIO_GetResponse>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e07b      	b.n	800eb02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d108      	bne.n	800ea24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea1a:	d009      	beq.n	800ea30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	61da      	str	r2, [r3, #28]
 800ea22:	e005      	b.n	800ea30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d106      	bne.n	800ea50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7f5 fe60 	bl	8004710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2202      	movs	r2, #2
 800ea54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea82:	431a      	orrs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	695b      	ldr	r3, [r3, #20]
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	431a      	orrs	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eaa0:	431a      	orrs	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6a1b      	ldr	r3, [r3, #32]
 800eab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eab4:	ea42 0103 	orr.w	r1, r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eabc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	430a      	orrs	r2, r1
 800eac6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	0c1b      	lsrs	r3, r3, #16
 800eace:	f003 0104 	and.w	r1, r3, #4
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead6:	f003 0210 	and.w	r2, r3, #16
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	69da      	ldr	r2, [r3, #28]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eaf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b088      	sub	sp, #32
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	60f8      	str	r0, [r7, #12]
 800eb12:	60b9      	str	r1, [r7, #8]
 800eb14:	603b      	str	r3, [r7, #0]
 800eb16:	4613      	mov	r3, r2
 800eb18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d101      	bne.n	800eb2c <HAL_SPI_Transmit+0x22>
 800eb28:	2302      	movs	r3, #2
 800eb2a:	e126      	b.n	800ed7a <HAL_SPI_Transmit+0x270>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb34:	f7fc fa64 	bl	800b000 <HAL_GetTick>
 800eb38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eb3a:	88fb      	ldrh	r3, [r7, #6]
 800eb3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d002      	beq.n	800eb50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eb4a:	2302      	movs	r3, #2
 800eb4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb4e:	e10b      	b.n	800ed68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <HAL_SPI_Transmit+0x52>
 800eb56:	88fb      	ldrh	r3, [r7, #6]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb60:	e102      	b.n	800ed68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2203      	movs	r2, #3
 800eb66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	88fa      	ldrh	r2, [r7, #6]
 800eb7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	88fa      	ldrh	r2, [r7, #6]
 800eb80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2200      	movs	r2, #0
 800eb86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eba8:	d10f      	bne.n	800ebca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ebc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebd4:	2b40      	cmp	r3, #64	; 0x40
 800ebd6:	d007      	beq.n	800ebe8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebf0:	d14b      	bne.n	800ec8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <HAL_SPI_Transmit+0xf6>
 800ebfa:	8afb      	ldrh	r3, [r7, #22]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d13e      	bne.n	800ec7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec04:	881a      	ldrh	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec10:	1c9a      	adds	r2, r3, #2
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ec24:	e02b      	b.n	800ec7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	f003 0302 	and.w	r3, r3, #2
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d112      	bne.n	800ec5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec38:	881a      	ldrh	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec44:	1c9a      	adds	r2, r3, #2
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	3b01      	subs	r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	86da      	strh	r2, [r3, #54]	; 0x36
 800ec58:	e011      	b.n	800ec7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec5a:	f7fc f9d1 	bl	800b000 <HAL_GetTick>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d803      	bhi.n	800ec72 <HAL_SPI_Transmit+0x168>
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec70:	d102      	bne.n	800ec78 <HAL_SPI_Transmit+0x16e>
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d102      	bne.n	800ec7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ec78:	2303      	movs	r3, #3
 800ec7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ec7c:	e074      	b.n	800ed68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1ce      	bne.n	800ec26 <HAL_SPI_Transmit+0x11c>
 800ec88:	e04c      	b.n	800ed24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <HAL_SPI_Transmit+0x18e>
 800ec92:	8afb      	ldrh	r3, [r7, #22]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d140      	bne.n	800ed1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	330c      	adds	r3, #12
 800eca2:	7812      	ldrb	r2, [r2, #0]
 800eca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ecbe:	e02c      	b.n	800ed1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	f003 0302 	and.w	r3, r3, #2
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d113      	bne.n	800ecf6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	330c      	adds	r3, #12
 800ecd8:	7812      	ldrb	r2, [r2, #0]
 800ecda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	3b01      	subs	r3, #1
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	86da      	strh	r2, [r3, #54]	; 0x36
 800ecf4:	e011      	b.n	800ed1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecf6:	f7fc f983 	bl	800b000 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	683a      	ldr	r2, [r7, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d803      	bhi.n	800ed0e <HAL_SPI_Transmit+0x204>
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0c:	d102      	bne.n	800ed14 <HAL_SPI_Transmit+0x20a>
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d102      	bne.n	800ed1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ed18:	e026      	b.n	800ed68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1cd      	bne.n	800ecc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed24:	69ba      	ldr	r2, [r7, #24]
 800ed26:	6839      	ldr	r1, [r7, #0]
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f000 f8b3 	bl	800ee94 <SPI_EndRxTxTransaction>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2220      	movs	r2, #32
 800ed38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10a      	bne.n	800ed58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed42:	2300      	movs	r3, #0
 800ed44:	613b      	str	r3, [r7, #16]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	613b      	str	r3, [r7, #16]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	613b      	str	r3, [r7, #16]
 800ed56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	77fb      	strb	r3, [r7, #31]
 800ed64:	e000      	b.n	800ed68 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ed66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed78:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3720      	adds	r7, #32
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
	...

0800ed84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	603b      	str	r3, [r7, #0]
 800ed90:	4613      	mov	r3, r2
 800ed92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ed94:	f7fc f934 	bl	800b000 <HAL_GetTick>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9c:	1a9b      	subs	r3, r3, r2
 800ed9e:	683a      	ldr	r2, [r7, #0]
 800eda0:	4413      	add	r3, r2
 800eda2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eda4:	f7fc f92c 	bl	800b000 <HAL_GetTick>
 800eda8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800edaa:	4b39      	ldr	r3, [pc, #228]	; (800ee90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	015b      	lsls	r3, r3, #5
 800edb0:	0d1b      	lsrs	r3, r3, #20
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	fb02 f303 	mul.w	r3, r2, r3
 800edb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800edba:	e054      	b.n	800ee66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc2:	d050      	beq.n	800ee66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800edc4:	f7fc f91c 	bl	800b000 <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	69fa      	ldr	r2, [r7, #28]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d902      	bls.n	800edda <SPI_WaitFlagStateUntilTimeout+0x56>
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d13d      	bne.n	800ee56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ede8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edf2:	d111      	bne.n	800ee18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edfc:	d004      	beq.n	800ee08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee06:	d107      	bne.n	800ee18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee20:	d10f      	bne.n	800ee42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2201      	movs	r2, #1
 800ee46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ee52:	2303      	movs	r3, #3
 800ee54:	e017      	b.n	800ee86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	3b01      	subs	r3, #1
 800ee64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689a      	ldr	r2, [r3, #8]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4013      	ands	r3, r2
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	bf0c      	ite	eq
 800ee76:	2301      	moveq	r3, #1
 800ee78:	2300      	movne	r3, #0
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d19b      	bne.n	800edbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	200000a8 	.word	0x200000a8

0800ee94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eea0:	4b1b      	ldr	r3, [pc, #108]	; (800ef10 <SPI_EndRxTxTransaction+0x7c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a1b      	ldr	r2, [pc, #108]	; (800ef14 <SPI_EndRxTxTransaction+0x80>)
 800eea6:	fba2 2303 	umull	r2, r3, r2, r3
 800eeaa:	0d5b      	lsrs	r3, r3, #21
 800eeac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eeb0:	fb02 f303 	mul.w	r3, r2, r3
 800eeb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eebe:	d112      	bne.n	800eee6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2200      	movs	r2, #0
 800eec8:	2180      	movs	r1, #128	; 0x80
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f7ff ff5a 	bl	800ed84 <SPI_WaitFlagStateUntilTimeout>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d016      	beq.n	800ef04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeda:	f043 0220 	orr.w	r2, r3, #32
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eee2:	2303      	movs	r3, #3
 800eee4:	e00f      	b.n	800ef06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00a      	beq.n	800ef02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	3b01      	subs	r3, #1
 800eef0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eefc:	2b80      	cmp	r3, #128	; 0x80
 800eefe:	d0f2      	beq.n	800eee6 <SPI_EndRxTxTransaction+0x52>
 800ef00:	e000      	b.n	800ef04 <SPI_EndRxTxTransaction+0x70>
        break;
 800ef02:	bf00      	nop
  }

  return HAL_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	200000a8 	.word	0x200000a8
 800ef14:	165e9f81 	.word	0x165e9f81

0800ef18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d101      	bne.n	800ef2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	e041      	b.n	800efae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7f5 ff8a 	bl	8004e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2202      	movs	r2, #2
 800ef48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3304      	adds	r3, #4
 800ef54:	4619      	mov	r1, r3
 800ef56:	4610      	mov	r0, r2
 800ef58:	f000 fca8 	bl	800f8ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d001      	beq.n	800efd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800efcc:	2301      	movs	r3, #1
 800efce:	e04e      	b.n	800f06e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2202      	movs	r2, #2
 800efd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68da      	ldr	r2, [r3, #12]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a23      	ldr	r2, [pc, #140]	; (800f07c <HAL_TIM_Base_Start_IT+0xc4>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d022      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800effa:	d01d      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a1f      	ldr	r2, [pc, #124]	; (800f080 <HAL_TIM_Base_Start_IT+0xc8>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d018      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a1e      	ldr	r2, [pc, #120]	; (800f084 <HAL_TIM_Base_Start_IT+0xcc>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d013      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a1c      	ldr	r2, [pc, #112]	; (800f088 <HAL_TIM_Base_Start_IT+0xd0>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d00e      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a1b      	ldr	r2, [pc, #108]	; (800f08c <HAL_TIM_Base_Start_IT+0xd4>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d009      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a19      	ldr	r2, [pc, #100]	; (800f090 <HAL_TIM_Base_Start_IT+0xd8>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d004      	beq.n	800f038 <HAL_TIM_Base_Start_IT+0x80>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a18      	ldr	r2, [pc, #96]	; (800f094 <HAL_TIM_Base_Start_IT+0xdc>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d111      	bne.n	800f05c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b06      	cmp	r3, #6
 800f048:	d010      	beq.n	800f06c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0201 	orr.w	r2, r2, #1
 800f058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f05a:	e007      	b.n	800f06c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f042 0201 	orr.w	r2, r2, #1
 800f06a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3714      	adds	r7, #20
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	40010000 	.word	0x40010000
 800f080:	40000400 	.word	0x40000400
 800f084:	40000800 	.word	0x40000800
 800f088:	40000c00 	.word	0x40000c00
 800f08c:	40010400 	.word	0x40010400
 800f090:	40014000 	.word	0x40014000
 800f094:	40001800 	.word	0x40001800

0800f098 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68da      	ldr	r2, [r3, #12]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f022 0201 	bic.w	r2, r2, #1
 800f0ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6a1a      	ldr	r2, [r3, #32]
 800f0b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10f      	bne.n	800f0e0 <HAL_TIM_Base_Stop_IT+0x48>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6a1a      	ldr	r2, [r3, #32]
 800f0c6:	f240 4344 	movw	r3, #1092	; 0x444
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d107      	bne.n	800f0e0 <HAL_TIM_Base_Stop_IT+0x48>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f022 0201 	bic.w	r2, r2, #1
 800f0de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b082      	sub	sp, #8
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	e041      	b.n	800f18c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f839 	bl	800f194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2202      	movs	r2, #2
 800f126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	3304      	adds	r3, #4
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f000 fbb9 	bl	800f8ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2201      	movs	r2, #1
 800f146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2201      	movs	r2, #1
 800f14e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2201      	movs	r2, #1
 800f156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2201      	movs	r2, #1
 800f15e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2201      	movs	r2, #1
 800f16e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2201      	movs	r2, #1
 800f17e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d109      	bne.n	800f1cc <HAL_TIM_PWM_Start+0x24>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	bf14      	ite	ne
 800f1c4:	2301      	movne	r3, #1
 800f1c6:	2300      	moveq	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	e022      	b.n	800f212 <HAL_TIM_PWM_Start+0x6a>
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2b04      	cmp	r3, #4
 800f1d0:	d109      	bne.n	800f1e6 <HAL_TIM_PWM_Start+0x3e>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	bf14      	ite	ne
 800f1de:	2301      	movne	r3, #1
 800f1e0:	2300      	moveq	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	e015      	b.n	800f212 <HAL_TIM_PWM_Start+0x6a>
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2b08      	cmp	r3, #8
 800f1ea:	d109      	bne.n	800f200 <HAL_TIM_PWM_Start+0x58>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	bf14      	ite	ne
 800f1f8:	2301      	movne	r3, #1
 800f1fa:	2300      	moveq	r3, #0
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	e008      	b.n	800f212 <HAL_TIM_PWM_Start+0x6a>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b01      	cmp	r3, #1
 800f20a:	bf14      	ite	ne
 800f20c:	2301      	movne	r3, #1
 800f20e:	2300      	moveq	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	e07c      	b.n	800f314 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d104      	bne.n	800f22a <HAL_TIM_PWM_Start+0x82>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2202      	movs	r2, #2
 800f224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f228:	e013      	b.n	800f252 <HAL_TIM_PWM_Start+0xaa>
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	d104      	bne.n	800f23a <HAL_TIM_PWM_Start+0x92>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2202      	movs	r2, #2
 800f234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f238:	e00b      	b.n	800f252 <HAL_TIM_PWM_Start+0xaa>
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d104      	bne.n	800f24a <HAL_TIM_PWM_Start+0xa2>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2202      	movs	r2, #2
 800f244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f248:	e003      	b.n	800f252 <HAL_TIM_PWM_Start+0xaa>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2202      	movs	r2, #2
 800f24e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2201      	movs	r2, #1
 800f258:	6839      	ldr	r1, [r7, #0]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 fe10 	bl	800fe80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a2d      	ldr	r2, [pc, #180]	; (800f31c <HAL_TIM_PWM_Start+0x174>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d004      	beq.n	800f274 <HAL_TIM_PWM_Start+0xcc>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a2c      	ldr	r2, [pc, #176]	; (800f320 <HAL_TIM_PWM_Start+0x178>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d101      	bne.n	800f278 <HAL_TIM_PWM_Start+0xd0>
 800f274:	2301      	movs	r3, #1
 800f276:	e000      	b.n	800f27a <HAL_TIM_PWM_Start+0xd2>
 800f278:	2300      	movs	r3, #0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d007      	beq.n	800f28e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f28c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	4a22      	ldr	r2, [pc, #136]	; (800f31c <HAL_TIM_PWM_Start+0x174>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d022      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2a0:	d01d      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a1f      	ldr	r2, [pc, #124]	; (800f324 <HAL_TIM_PWM_Start+0x17c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d018      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a1d      	ldr	r2, [pc, #116]	; (800f328 <HAL_TIM_PWM_Start+0x180>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d013      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a1c      	ldr	r2, [pc, #112]	; (800f32c <HAL_TIM_PWM_Start+0x184>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d00e      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a16      	ldr	r2, [pc, #88]	; (800f320 <HAL_TIM_PWM_Start+0x178>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d009      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a18      	ldr	r2, [pc, #96]	; (800f330 <HAL_TIM_PWM_Start+0x188>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d004      	beq.n	800f2de <HAL_TIM_PWM_Start+0x136>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a16      	ldr	r2, [pc, #88]	; (800f334 <HAL_TIM_PWM_Start+0x18c>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d111      	bne.n	800f302 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	f003 0307 	and.w	r3, r3, #7
 800f2e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2b06      	cmp	r3, #6
 800f2ee:	d010      	beq.n	800f312 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f042 0201 	orr.w	r2, r2, #1
 800f2fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f300:	e007      	b.n	800f312 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f042 0201 	orr.w	r2, r2, #1
 800f310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	40010000 	.word	0x40010000
 800f320:	40010400 	.word	0x40010400
 800f324:	40000400 	.word	0x40000400
 800f328:	40000800 	.word	0x40000800
 800f32c:	40000c00 	.word	0x40000c00
 800f330:	40014000 	.word	0x40014000
 800f334:	40001800 	.word	0x40001800

0800f338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	f003 0302 	and.w	r3, r3, #2
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	d122      	bne.n	800f394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	f003 0302 	and.w	r3, r3, #2
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d11b      	bne.n	800f394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f06f 0202 	mvn.w	r2, #2
 800f364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	f003 0303 	and.w	r3, r3, #3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fa77 	bl	800f86e <HAL_TIM_IC_CaptureCallback>
 800f380:	e005      	b.n	800f38e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fa69 	bl	800f85a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fa7a 	bl	800f882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	f003 0304 	and.w	r3, r3, #4
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	d122      	bne.n	800f3e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	f003 0304 	and.w	r3, r3, #4
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	d11b      	bne.n	800f3e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f06f 0204 	mvn.w	r2, #4
 800f3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	699b      	ldr	r3, [r3, #24]
 800f3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fa4d 	bl	800f86e <HAL_TIM_IC_CaptureCallback>
 800f3d4:	e005      	b.n	800f3e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fa3f 	bl	800f85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fa50 	bl	800f882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	f003 0308 	and.w	r3, r3, #8
 800f3f2:	2b08      	cmp	r3, #8
 800f3f4:	d122      	bne.n	800f43c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	f003 0308 	and.w	r3, r3, #8
 800f400:	2b08      	cmp	r3, #8
 800f402:	d11b      	bne.n	800f43c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f06f 0208 	mvn.w	r2, #8
 800f40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2204      	movs	r2, #4
 800f412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	69db      	ldr	r3, [r3, #28]
 800f41a:	f003 0303 	and.w	r3, r3, #3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fa23 	bl	800f86e <HAL_TIM_IC_CaptureCallback>
 800f428:	e005      	b.n	800f436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fa15 	bl	800f85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fa26 	bl	800f882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	f003 0310 	and.w	r3, r3, #16
 800f446:	2b10      	cmp	r3, #16
 800f448:	d122      	bne.n	800f490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	f003 0310 	and.w	r3, r3, #16
 800f454:	2b10      	cmp	r3, #16
 800f456:	d11b      	bne.n	800f490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f06f 0210 	mvn.w	r2, #16
 800f460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2208      	movs	r2, #8
 800f466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	69db      	ldr	r3, [r3, #28]
 800f46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f472:	2b00      	cmp	r3, #0
 800f474:	d003      	beq.n	800f47e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f9f9 	bl	800f86e <HAL_TIM_IC_CaptureCallback>
 800f47c:	e005      	b.n	800f48a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 f9eb 	bl	800f85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 f9fc 	bl	800f882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	f003 0301 	and.w	r3, r3, #1
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d10e      	bne.n	800f4bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d107      	bne.n	800f4bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f06f 0201 	mvn.w	r2, #1
 800f4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7f4 ff2c 	bl	8004314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4c6:	2b80      	cmp	r3, #128	; 0x80
 800f4c8:	d10e      	bne.n	800f4e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4d4:	2b80      	cmp	r3, #128	; 0x80
 800f4d6:	d107      	bne.n	800f4e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fdca 	bl	801007c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f2:	2b40      	cmp	r3, #64	; 0x40
 800f4f4:	d10e      	bne.n	800f514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f500:	2b40      	cmp	r3, #64	; 0x40
 800f502:	d107      	bne.n	800f514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f9c1 	bl	800f896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	f003 0320 	and.w	r3, r3, #32
 800f51e:	2b20      	cmp	r3, #32
 800f520:	d10e      	bne.n	800f540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	f003 0320 	and.w	r3, r3, #32
 800f52c:	2b20      	cmp	r3, #32
 800f52e:	d107      	bne.n	800f540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f06f 0220 	mvn.w	r2, #32
 800f538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fd94 	bl	8010068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d101      	bne.n	800f566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f562:	2302      	movs	r3, #2
 800f564:	e0ae      	b.n	800f6c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2201      	movs	r2, #1
 800f56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b0c      	cmp	r3, #12
 800f572:	f200 809f 	bhi.w	800f6b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f576:	a201      	add	r2, pc, #4	; (adr r2, 800f57c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f5b1 	.word	0x0800f5b1
 800f580:	0800f6b5 	.word	0x0800f6b5
 800f584:	0800f6b5 	.word	0x0800f6b5
 800f588:	0800f6b5 	.word	0x0800f6b5
 800f58c:	0800f5f1 	.word	0x0800f5f1
 800f590:	0800f6b5 	.word	0x0800f6b5
 800f594:	0800f6b5 	.word	0x0800f6b5
 800f598:	0800f6b5 	.word	0x0800f6b5
 800f59c:	0800f633 	.word	0x0800f633
 800f5a0:	0800f6b5 	.word	0x0800f6b5
 800f5a4:	0800f6b5 	.word	0x0800f6b5
 800f5a8:	0800f6b5 	.word	0x0800f6b5
 800f5ac:	0800f673 	.word	0x0800f673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 fa18 	bl	800f9ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	699a      	ldr	r2, [r3, #24]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f042 0208 	orr.w	r2, r2, #8
 800f5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f022 0204 	bic.w	r2, r2, #4
 800f5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	6999      	ldr	r1, [r3, #24]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	691a      	ldr	r2, [r3, #16]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	619a      	str	r2, [r3, #24]
      break;
 800f5ee:	e064      	b.n	800f6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 fa68 	bl	800facc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	699a      	ldr	r2, [r3, #24]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	699a      	ldr	r2, [r3, #24]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	6999      	ldr	r1, [r3, #24]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	021a      	lsls	r2, r3, #8
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	430a      	orrs	r2, r1
 800f62e:	619a      	str	r2, [r3, #24]
      break;
 800f630:	e043      	b.n	800f6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 fabd 	bl	800fbb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	69da      	ldr	r2, [r3, #28]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f042 0208 	orr.w	r2, r2, #8
 800f64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	69da      	ldr	r2, [r3, #28]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f022 0204 	bic.w	r2, r2, #4
 800f65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	69d9      	ldr	r1, [r3, #28]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	691a      	ldr	r2, [r3, #16]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	430a      	orrs	r2, r1
 800f66e:	61da      	str	r2, [r3, #28]
      break;
 800f670:	e023      	b.n	800f6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	68b9      	ldr	r1, [r7, #8]
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 fb11 	bl	800fca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	69da      	ldr	r2, [r3, #28]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	69da      	ldr	r2, [r3, #28]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	69d9      	ldr	r1, [r3, #28]
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	691b      	ldr	r3, [r3, #16]
 800f6a8:	021a      	lsls	r2, r3, #8
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	61da      	str	r2, [r3, #28]
      break;
 800f6b2:	e002      	b.n	800f6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f6b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d101      	bne.n	800f6e8 <HAL_TIM_ConfigClockSource+0x1c>
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	e0b4      	b.n	800f852 <HAL_TIM_ConfigClockSource+0x186>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2202      	movs	r2, #2
 800f6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f70e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f720:	d03e      	beq.n	800f7a0 <HAL_TIM_ConfigClockSource+0xd4>
 800f722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f726:	f200 8087 	bhi.w	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f72e:	f000 8086 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x172>
 800f732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f736:	d87f      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f738:	2b70      	cmp	r3, #112	; 0x70
 800f73a:	d01a      	beq.n	800f772 <HAL_TIM_ConfigClockSource+0xa6>
 800f73c:	2b70      	cmp	r3, #112	; 0x70
 800f73e:	d87b      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f740:	2b60      	cmp	r3, #96	; 0x60
 800f742:	d050      	beq.n	800f7e6 <HAL_TIM_ConfigClockSource+0x11a>
 800f744:	2b60      	cmp	r3, #96	; 0x60
 800f746:	d877      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f748:	2b50      	cmp	r3, #80	; 0x50
 800f74a:	d03c      	beq.n	800f7c6 <HAL_TIM_ConfigClockSource+0xfa>
 800f74c:	2b50      	cmp	r3, #80	; 0x50
 800f74e:	d873      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f750:	2b40      	cmp	r3, #64	; 0x40
 800f752:	d058      	beq.n	800f806 <HAL_TIM_ConfigClockSource+0x13a>
 800f754:	2b40      	cmp	r3, #64	; 0x40
 800f756:	d86f      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f758:	2b30      	cmp	r3, #48	; 0x30
 800f75a:	d064      	beq.n	800f826 <HAL_TIM_ConfigClockSource+0x15a>
 800f75c:	2b30      	cmp	r3, #48	; 0x30
 800f75e:	d86b      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f760:	2b20      	cmp	r3, #32
 800f762:	d060      	beq.n	800f826 <HAL_TIM_ConfigClockSource+0x15a>
 800f764:	2b20      	cmp	r3, #32
 800f766:	d867      	bhi.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d05c      	beq.n	800f826 <HAL_TIM_ConfigClockSource+0x15a>
 800f76c:	2b10      	cmp	r3, #16
 800f76e:	d05a      	beq.n	800f826 <HAL_TIM_ConfigClockSource+0x15a>
 800f770:	e062      	b.n	800f838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	6899      	ldr	r1, [r3, #8]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	685a      	ldr	r2, [r3, #4]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	f000 fb5d 	bl	800fe40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	609a      	str	r2, [r3, #8]
      break;
 800f79e:	e04f      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	6899      	ldr	r1, [r3, #8]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	f000 fb46 	bl	800fe40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	689a      	ldr	r2, [r3, #8]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f7c2:	609a      	str	r2, [r3, #8]
      break;
 800f7c4:	e03c      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	6859      	ldr	r1, [r3, #4]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	f000 faba 	bl	800fd4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2150      	movs	r1, #80	; 0x50
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f000 fb13 	bl	800fe0a <TIM_ITRx_SetConfig>
      break;
 800f7e4:	e02c      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6818      	ldr	r0, [r3, #0]
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	6859      	ldr	r1, [r3, #4]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	f000 fad9 	bl	800fdaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2160      	movs	r1, #96	; 0x60
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 fb03 	bl	800fe0a <TIM_ITRx_SetConfig>
      break;
 800f804:	e01c      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6818      	ldr	r0, [r3, #0]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	6859      	ldr	r1, [r3, #4]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	461a      	mov	r2, r3
 800f814:	f000 fa9a 	bl	800fd4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2140      	movs	r1, #64	; 0x40
 800f81e:	4618      	mov	r0, r3
 800f820:	f000 faf3 	bl	800fe0a <TIM_ITRx_SetConfig>
      break;
 800f824:	e00c      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4619      	mov	r1, r3
 800f830:	4610      	mov	r0, r2
 800f832:	f000 faea 	bl	800fe0a <TIM_ITRx_SetConfig>
      break;
 800f836:	e003      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f838:	2301      	movs	r3, #1
 800f83a:	73fb      	strb	r3, [r7, #15]
      break;
 800f83c:	e000      	b.n	800f840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f83e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f850:	7bfb      	ldrb	r3, [r7, #15]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b083      	sub	sp, #12
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f862:	bf00      	nop
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f876:	bf00      	nop
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f88a:	bf00      	nop
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f896:	b480      	push	{r7}
 800f898:	b083      	sub	sp, #12
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f89e:	bf00      	nop
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
	...

0800f8ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a40      	ldr	r2, [pc, #256]	; (800f9c0 <TIM_Base_SetConfig+0x114>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d013      	beq.n	800f8ec <TIM_Base_SetConfig+0x40>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ca:	d00f      	beq.n	800f8ec <TIM_Base_SetConfig+0x40>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a3d      	ldr	r2, [pc, #244]	; (800f9c4 <TIM_Base_SetConfig+0x118>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d00b      	beq.n	800f8ec <TIM_Base_SetConfig+0x40>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a3c      	ldr	r2, [pc, #240]	; (800f9c8 <TIM_Base_SetConfig+0x11c>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d007      	beq.n	800f8ec <TIM_Base_SetConfig+0x40>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a3b      	ldr	r2, [pc, #236]	; (800f9cc <TIM_Base_SetConfig+0x120>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d003      	beq.n	800f8ec <TIM_Base_SetConfig+0x40>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4a3a      	ldr	r2, [pc, #232]	; (800f9d0 <TIM_Base_SetConfig+0x124>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d108      	bne.n	800f8fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a2f      	ldr	r2, [pc, #188]	; (800f9c0 <TIM_Base_SetConfig+0x114>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d02b      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f90c:	d027      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a2c      	ldr	r2, [pc, #176]	; (800f9c4 <TIM_Base_SetConfig+0x118>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d023      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a2b      	ldr	r2, [pc, #172]	; (800f9c8 <TIM_Base_SetConfig+0x11c>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d01f      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a2a      	ldr	r2, [pc, #168]	; (800f9cc <TIM_Base_SetConfig+0x120>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d01b      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a29      	ldr	r2, [pc, #164]	; (800f9d0 <TIM_Base_SetConfig+0x124>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d017      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a28      	ldr	r2, [pc, #160]	; (800f9d4 <TIM_Base_SetConfig+0x128>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d013      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a27      	ldr	r2, [pc, #156]	; (800f9d8 <TIM_Base_SetConfig+0x12c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d00f      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a26      	ldr	r2, [pc, #152]	; (800f9dc <TIM_Base_SetConfig+0x130>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d00b      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a25      	ldr	r2, [pc, #148]	; (800f9e0 <TIM_Base_SetConfig+0x134>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d007      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a24      	ldr	r2, [pc, #144]	; (800f9e4 <TIM_Base_SetConfig+0x138>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d003      	beq.n	800f95e <TIM_Base_SetConfig+0xb2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a23      	ldr	r2, [pc, #140]	; (800f9e8 <TIM_Base_SetConfig+0x13c>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d108      	bne.n	800f970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	695b      	ldr	r3, [r3, #20]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	689a      	ldr	r2, [r3, #8]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a0a      	ldr	r2, [pc, #40]	; (800f9c0 <TIM_Base_SetConfig+0x114>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d003      	beq.n	800f9a4 <TIM_Base_SetConfig+0xf8>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a0c      	ldr	r2, [pc, #48]	; (800f9d0 <TIM_Base_SetConfig+0x124>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d103      	bne.n	800f9ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	691a      	ldr	r2, [r3, #16]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	615a      	str	r2, [r3, #20]
}
 800f9b2:	bf00      	nop
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	40010000 	.word	0x40010000
 800f9c4:	40000400 	.word	0x40000400
 800f9c8:	40000800 	.word	0x40000800
 800f9cc:	40000c00 	.word	0x40000c00
 800f9d0:	40010400 	.word	0x40010400
 800f9d4:	40014000 	.word	0x40014000
 800f9d8:	40014400 	.word	0x40014400
 800f9dc:	40014800 	.word	0x40014800
 800f9e0:	40001800 	.word	0x40001800
 800f9e4:	40001c00 	.word	0x40001c00
 800f9e8:	40002000 	.word	0x40002000

0800f9ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b087      	sub	sp, #28
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	f023 0201 	bic.w	r2, r3, #1
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f023 0303 	bic.w	r3, r3, #3
 800fa22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f023 0302 	bic.w	r3, r3, #2
 800fa34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a20      	ldr	r2, [pc, #128]	; (800fac4 <TIM_OC1_SetConfig+0xd8>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d003      	beq.n	800fa50 <TIM_OC1_SetConfig+0x64>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a1f      	ldr	r2, [pc, #124]	; (800fac8 <TIM_OC1_SetConfig+0xdc>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d10c      	bne.n	800fa6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	f023 0308 	bic.w	r3, r3, #8
 800fa56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	f023 0304 	bic.w	r3, r3, #4
 800fa68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a15      	ldr	r2, [pc, #84]	; (800fac4 <TIM_OC1_SetConfig+0xd8>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d003      	beq.n	800fa7a <TIM_OC1_SetConfig+0x8e>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a14      	ldr	r2, [pc, #80]	; (800fac8 <TIM_OC1_SetConfig+0xdc>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d111      	bne.n	800fa9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	693a      	ldr	r2, [r7, #16]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	697a      	ldr	r2, [r7, #20]
 800fab6:	621a      	str	r2, [r3, #32]
}
 800fab8:	bf00      	nop
 800faba:	371c      	adds	r7, #28
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	40010000 	.word	0x40010000
 800fac8:	40010400 	.word	0x40010400

0800facc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	f023 0210 	bic.w	r2, r3, #16
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fafa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	021b      	lsls	r3, r3, #8
 800fb0a:	68fa      	ldr	r2, [r7, #12]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	f023 0320 	bic.w	r3, r3, #32
 800fb16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	011b      	lsls	r3, r3, #4
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4a22      	ldr	r2, [pc, #136]	; (800fbb0 <TIM_OC2_SetConfig+0xe4>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d003      	beq.n	800fb34 <TIM_OC2_SetConfig+0x68>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a21      	ldr	r2, [pc, #132]	; (800fbb4 <TIM_OC2_SetConfig+0xe8>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d10d      	bne.n	800fb50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	011b      	lsls	r3, r3, #4
 800fb42:	697a      	ldr	r2, [r7, #20]
 800fb44:	4313      	orrs	r3, r2
 800fb46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a17      	ldr	r2, [pc, #92]	; (800fbb0 <TIM_OC2_SetConfig+0xe4>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d003      	beq.n	800fb60 <TIM_OC2_SetConfig+0x94>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <TIM_OC2_SetConfig+0xe8>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d113      	bne.n	800fb88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	695b      	ldr	r3, [r3, #20]
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	693a      	ldr	r2, [r7, #16]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	699b      	ldr	r3, [r3, #24]
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	4313      	orrs	r3, r2
 800fb86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	685a      	ldr	r2, [r3, #4]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	621a      	str	r2, [r3, #32]
}
 800fba2:	bf00      	nop
 800fba4:	371c      	adds	r7, #28
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	40010000 	.word	0x40010000
 800fbb4:	40010400 	.word	0x40010400

0800fbb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b087      	sub	sp, #28
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a1b      	ldr	r3, [r3, #32]
 800fbc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f023 0303 	bic.w	r3, r3, #3
 800fbee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	021b      	lsls	r3, r3, #8
 800fc08:	697a      	ldr	r2, [r7, #20]
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a21      	ldr	r2, [pc, #132]	; (800fc98 <TIM_OC3_SetConfig+0xe0>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d003      	beq.n	800fc1e <TIM_OC3_SetConfig+0x66>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4a20      	ldr	r2, [pc, #128]	; (800fc9c <TIM_OC3_SetConfig+0xe4>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d10d      	bne.n	800fc3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	021b      	lsls	r3, r3, #8
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a16      	ldr	r2, [pc, #88]	; (800fc98 <TIM_OC3_SetConfig+0xe0>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d003      	beq.n	800fc4a <TIM_OC3_SetConfig+0x92>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a15      	ldr	r2, [pc, #84]	; (800fc9c <TIM_OC3_SetConfig+0xe4>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d113      	bne.n	800fc72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	011b      	lsls	r3, r3, #4
 800fc60:	693a      	ldr	r2, [r7, #16]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	011b      	lsls	r3, r3, #4
 800fc6c:	693a      	ldr	r2, [r7, #16]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	621a      	str	r2, [r3, #32]
}
 800fc8c:	bf00      	nop
 800fc8e:	371c      	adds	r7, #28
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	40010000 	.word	0x40010000
 800fc9c:	40010400 	.word	0x40010400

0800fca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b087      	sub	sp, #28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
 800fcae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	69db      	ldr	r3, [r3, #28]
 800fcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	021b      	lsls	r3, r3, #8
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	031b      	lsls	r3, r3, #12
 800fcf2:	693a      	ldr	r2, [r7, #16]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	4a12      	ldr	r2, [pc, #72]	; (800fd44 <TIM_OC4_SetConfig+0xa4>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d003      	beq.n	800fd08 <TIM_OC4_SetConfig+0x68>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4a11      	ldr	r2, [pc, #68]	; (800fd48 <TIM_OC4_SetConfig+0xa8>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d109      	bne.n	800fd1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	695b      	ldr	r3, [r3, #20]
 800fd14:	019b      	lsls	r3, r3, #6
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	697a      	ldr	r2, [r7, #20]
 800fd20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	621a      	str	r2, [r3, #32]
}
 800fd36:	bf00      	nop
 800fd38:	371c      	adds	r7, #28
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop
 800fd44:	40010000 	.word	0x40010000
 800fd48:	40010400 	.word	0x40010400

0800fd4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a1b      	ldr	r3, [r3, #32]
 800fd5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6a1b      	ldr	r3, [r3, #32]
 800fd62:	f023 0201 	bic.w	r2, r3, #1
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	699b      	ldr	r3, [r3, #24]
 800fd6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	011b      	lsls	r3, r3, #4
 800fd7c:	693a      	ldr	r2, [r7, #16]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	f023 030a 	bic.w	r3, r3, #10
 800fd88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	693a      	ldr	r2, [r7, #16]
 800fd96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	621a      	str	r2, [r3, #32]
}
 800fd9e:	bf00      	nop
 800fda0:	371c      	adds	r7, #28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr

0800fdaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdaa:	b480      	push	{r7}
 800fdac:	b087      	sub	sp, #28
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	60f8      	str	r0, [r7, #12]
 800fdb2:	60b9      	str	r1, [r7, #8]
 800fdb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6a1b      	ldr	r3, [r3, #32]
 800fdba:	f023 0210 	bic.w	r2, r3, #16
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	699b      	ldr	r3, [r3, #24]
 800fdc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	031b      	lsls	r3, r3, #12
 800fdda:	697a      	ldr	r2, [r7, #20]
 800fddc:	4313      	orrs	r3, r2
 800fdde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fde6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	011b      	lsls	r3, r3, #4
 800fdec:	693a      	ldr	r2, [r7, #16]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	693a      	ldr	r2, [r7, #16]
 800fdfc:	621a      	str	r2, [r3, #32]
}
 800fdfe:	bf00      	nop
 800fe00:	371c      	adds	r7, #28
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe0a:	b480      	push	{r7}
 800fe0c:	b085      	sub	sp, #20
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	f043 0307 	orr.w	r3, r3, #7
 800fe2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	609a      	str	r2, [r3, #8]
}
 800fe34:	bf00      	nop
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b087      	sub	sp, #28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	021a      	lsls	r2, r3, #8
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	431a      	orrs	r2, r3
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	697a      	ldr	r2, [r7, #20]
 800fe72:	609a      	str	r2, [r3, #8]
}
 800fe74:	bf00      	nop
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b087      	sub	sp, #28
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	f003 031f 	and.w	r3, r3, #31
 800fe92:	2201      	movs	r2, #1
 800fe94:	fa02 f303 	lsl.w	r3, r2, r3
 800fe98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6a1a      	ldr	r2, [r3, #32]
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	43db      	mvns	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6a1a      	ldr	r2, [r3, #32]
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	f003 031f 	and.w	r3, r3, #31
 800feb2:	6879      	ldr	r1, [r7, #4]
 800feb4:	fa01 f303 	lsl.w	r3, r1, r3
 800feb8:	431a      	orrs	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	621a      	str	r2, [r3, #32]
}
 800febe:	bf00      	nop
 800fec0:	371c      	adds	r7, #28
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
	...

0800fecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d101      	bne.n	800fee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fee0:	2302      	movs	r3, #2
 800fee2:	e05a      	b.n	800ff9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2202      	movs	r2, #2
 800fef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a21      	ldr	r2, [pc, #132]	; (800ffa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d022      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff30:	d01d      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a1d      	ldr	r2, [pc, #116]	; (800ffac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d018      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a1b      	ldr	r2, [pc, #108]	; (800ffb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d013      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a1a      	ldr	r2, [pc, #104]	; (800ffb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d00e      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a18      	ldr	r2, [pc, #96]	; (800ffb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d009      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a17      	ldr	r2, [pc, #92]	; (800ffbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d004      	beq.n	800ff6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4a15      	ldr	r2, [pc, #84]	; (800ffc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d10c      	bne.n	800ff88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	40010000 	.word	0x40010000
 800ffac:	40000400 	.word	0x40000400
 800ffb0:	40000800 	.word	0x40000800
 800ffb4:	40000c00 	.word	0x40000c00
 800ffb8:	40010400 	.word	0x40010400
 800ffbc:	40014000 	.word	0x40014000
 800ffc0:	40001800 	.word	0x40001800

0800ffc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d101      	bne.n	800ffe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e03d      	b.n	801005c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	4313      	orrs	r3, r2
 800fff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	4313      	orrs	r3, r2
 8010002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	4313      	orrs	r3, r2
 8010010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4313      	orrs	r3, r2
 801001e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	4313      	orrs	r3, r2
 801002c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	695b      	ldr	r3, [r3, #20]
 8010038:	4313      	orrs	r3, r2
 801003a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	e03f      	b.n	8010122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d106      	bne.n	80100bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7f5 f826 	bl	8005108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2224      	movs	r2, #36	; 0x24
 80100c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 fa9b 	bl	8010610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	691a      	ldr	r2, [r3, #16]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	695a      	ldr	r2, [r3, #20]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	68da      	ldr	r2, [r3, #12]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2220      	movs	r2, #32
 8010114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2220      	movs	r2, #32
 801011c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b084      	sub	sp, #16
 801012e:	af00      	add	r7, sp, #0
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	4613      	mov	r3, r2
 8010136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b20      	cmp	r3, #32
 8010142:	d11d      	bne.n	8010180 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <HAL_UART_Receive_DMA+0x26>
 801014a:	88fb      	ldrh	r3, [r7, #6]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d101      	bne.n	8010154 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010150:	2301      	movs	r3, #1
 8010152:	e016      	b.n	8010182 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801015a:	2b01      	cmp	r3, #1
 801015c:	d101      	bne.n	8010162 <HAL_UART_Receive_DMA+0x38>
 801015e:	2302      	movs	r3, #2
 8010160:	e00f      	b.n	8010182 <HAL_UART_Receive_DMA+0x58>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2201      	movs	r2, #1
 8010166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010170:	88fb      	ldrh	r3, [r7, #6]
 8010172:	461a      	mov	r2, r3
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f000 f920 	bl	80103bc <UART_Start_Receive_DMA>
 801017c:	4603      	mov	r3, r0
 801017e:	e000      	b.n	8010182 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010180:	2302      	movs	r3, #2
  }
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801018a:	b480      	push	{r7}
 801018c:	b083      	sub	sp, #12
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010192:	bf00      	nop
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801019e:	b480      	push	{r7}
 80101a0:	b083      	sub	sp, #12
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80101a6:	bf00      	nop
 80101a8:	370c      	adds	r7, #12
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	460b      	mov	r3, r1
 80101bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80101be:	bf00      	nop
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b09c      	sub	sp, #112	; 0x70
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d172      	bne.n	80102cc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80101e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101e8:	2200      	movs	r2, #0
 80101ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	330c      	adds	r3, #12
 80101f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101f6:	e853 3f00 	ldrex	r3, [r3]
 80101fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80101fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010202:	66bb      	str	r3, [r7, #104]	; 0x68
 8010204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	330c      	adds	r3, #12
 801020a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801020c:	65ba      	str	r2, [r7, #88]	; 0x58
 801020e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010214:	e841 2300 	strex	r3, r2, [r1]
 8010218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801021a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1e5      	bne.n	80101ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3314      	adds	r3, #20
 8010226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	e853 3f00 	ldrex	r3, [r3]
 801022e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010232:	f023 0301 	bic.w	r3, r3, #1
 8010236:	667b      	str	r3, [r7, #100]	; 0x64
 8010238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	3314      	adds	r3, #20
 801023e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010240:	647a      	str	r2, [r7, #68]	; 0x44
 8010242:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010248:	e841 2300 	strex	r3, r2, [r1]
 801024c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801024e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e5      	bne.n	8010220 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	3314      	adds	r3, #20
 801025a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025e:	e853 3f00 	ldrex	r3, [r3]
 8010262:	623b      	str	r3, [r7, #32]
   return(result);
 8010264:	6a3b      	ldr	r3, [r7, #32]
 8010266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801026a:	663b      	str	r3, [r7, #96]	; 0x60
 801026c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	3314      	adds	r3, #20
 8010272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010274:	633a      	str	r2, [r7, #48]	; 0x30
 8010276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801027a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801027c:	e841 2300 	strex	r3, r2, [r1]
 8010280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1e5      	bne.n	8010254 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801028a:	2220      	movs	r2, #32
 801028c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010294:	2b01      	cmp	r3, #1
 8010296:	d119      	bne.n	80102cc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	330c      	adds	r3, #12
 801029e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	e853 3f00 	ldrex	r3, [r3]
 80102a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f023 0310 	bic.w	r3, r3, #16
 80102ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	330c      	adds	r3, #12
 80102b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102b8:	61fa      	str	r2, [r7, #28]
 80102ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102bc:	69b9      	ldr	r1, [r7, #24]
 80102be:	69fa      	ldr	r2, [r7, #28]
 80102c0:	e841 2300 	strex	r3, r2, [r1]
 80102c4:	617b      	str	r3, [r7, #20]
   return(result);
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1e5      	bne.n	8010298 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d106      	bne.n	80102e2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80102d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80102d8:	4619      	mov	r1, r3
 80102da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102dc:	f7ff ff69 	bl	80101b2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80102e0:	e002      	b.n	80102e8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80102e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102e4:	f7f4 f8d8 	bl	8004498 <HAL_UART_RxCpltCallback>
}
 80102e8:	bf00      	nop
 80102ea:	3770      	adds	r7, #112	; 0x70
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010302:	2b01      	cmp	r3, #1
 8010304:	d108      	bne.n	8010318 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801030a:	085b      	lsrs	r3, r3, #1
 801030c:	b29b      	uxth	r3, r3
 801030e:	4619      	mov	r1, r3
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f7ff ff4e 	bl	80101b2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010316:	e002      	b.n	801031e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7ff ff36 	bl	801018a <HAL_UART_RxHalfCpltCallback>
}
 801031e:	bf00      	nop
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b084      	sub	sp, #16
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801032e:	2300      	movs	r3, #0
 8010330:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010336:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	695b      	ldr	r3, [r3, #20]
 801033e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010342:	2b80      	cmp	r3, #128	; 0x80
 8010344:	bf0c      	ite	eq
 8010346:	2301      	moveq	r3, #1
 8010348:	2300      	movne	r3, #0
 801034a:	b2db      	uxtb	r3, r3
 801034c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010354:	b2db      	uxtb	r3, r3
 8010356:	2b21      	cmp	r3, #33	; 0x21
 8010358:	d108      	bne.n	801036c <UART_DMAError+0x46>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d005      	beq.n	801036c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2200      	movs	r2, #0
 8010364:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010366:	68b8      	ldr	r0, [r7, #8]
 8010368:	f000 f8c6 	bl	80104f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010376:	2b40      	cmp	r3, #64	; 0x40
 8010378:	bf0c      	ite	eq
 801037a:	2301      	moveq	r3, #1
 801037c:	2300      	movne	r3, #0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b22      	cmp	r3, #34	; 0x22
 801038c:	d108      	bne.n	80103a0 <UART_DMAError+0x7a>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d005      	beq.n	80103a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2200      	movs	r2, #0
 8010398:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801039a:	68b8      	ldr	r0, [r7, #8]
 801039c:	f000 f8d4 	bl	8010548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a4:	f043 0210 	orr.w	r2, r3, #16
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103ac:	68b8      	ldr	r0, [r7, #8]
 80103ae:	f7ff fef6 	bl	801019e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103b2:	bf00      	nop
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
	...

080103bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b098      	sub	sp, #96	; 0x60
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	4613      	mov	r3, r2
 80103c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	88fa      	ldrh	r2, [r7, #6]
 80103d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2222      	movs	r2, #34	; 0x22
 80103e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e8:	4a40      	ldr	r2, [pc, #256]	; (80104ec <UART_Start_Receive_DMA+0x130>)
 80103ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f0:	4a3f      	ldr	r2, [pc, #252]	; (80104f0 <UART_Start_Receive_DMA+0x134>)
 80103f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f8:	4a3e      	ldr	r2, [pc, #248]	; (80104f4 <UART_Start_Receive_DMA+0x138>)
 80103fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010400:	2200      	movs	r2, #0
 8010402:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010404:	f107 0308 	add.w	r3, r7, #8
 8010408:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	3304      	adds	r3, #4
 8010414:	4619      	mov	r1, r3
 8010416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	88fb      	ldrh	r3, [r7, #6]
 801041c:	f7fa ff31 	bl	800b282 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010420:	2300      	movs	r3, #0
 8010422:	613b      	str	r3, [r7, #16]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	613b      	str	r3, [r7, #16]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	613b      	str	r3, [r7, #16]
 8010434:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d019      	beq.n	801047a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	330c      	adds	r3, #12
 801044c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010450:	e853 3f00 	ldrex	r3, [r3]
 8010454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801045c:	65bb      	str	r3, [r7, #88]	; 0x58
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	330c      	adds	r3, #12
 8010464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010466:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010468:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801046c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801046e:	e841 2300 	strex	r3, r2, [r1]
 8010472:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1e5      	bne.n	8010446 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3314      	adds	r3, #20
 8010480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010484:	e853 3f00 	ldrex	r3, [r3]
 8010488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	f043 0301 	orr.w	r3, r3, #1
 8010490:	657b      	str	r3, [r7, #84]	; 0x54
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3314      	adds	r3, #20
 8010498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801049a:	63ba      	str	r2, [r7, #56]	; 0x38
 801049c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801049e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80104a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104a2:	e841 2300 	strex	r3, r2, [r1]
 80104a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1e5      	bne.n	801047a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	3314      	adds	r3, #20
 80104b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	617b      	str	r3, [r7, #20]
   return(result);
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104c4:	653b      	str	r3, [r7, #80]	; 0x50
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3314      	adds	r3, #20
 80104cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104ce:	627a      	str	r2, [r7, #36]	; 0x24
 80104d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d2:	6a39      	ldr	r1, [r7, #32]
 80104d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104d6:	e841 2300 	strex	r3, r2, [r1]
 80104da:	61fb      	str	r3, [r7, #28]
   return(result);
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1e5      	bne.n	80104ae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3760      	adds	r7, #96	; 0x60
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	080101cb 	.word	0x080101cb
 80104f0:	080102f1 	.word	0x080102f1
 80104f4:	08010327 	.word	0x08010327

080104f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b089      	sub	sp, #36	; 0x24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	330c      	adds	r3, #12
 8010506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	e853 3f00 	ldrex	r3, [r3]
 801050e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	330c      	adds	r3, #12
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	61ba      	str	r2, [r7, #24]
 8010522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010524:	6979      	ldr	r1, [r7, #20]
 8010526:	69ba      	ldr	r2, [r7, #24]
 8010528:	e841 2300 	strex	r3, r2, [r1]
 801052c:	613b      	str	r3, [r7, #16]
   return(result);
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e5      	bne.n	8010500 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2220      	movs	r2, #32
 8010538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801053c:	bf00      	nop
 801053e:	3724      	adds	r7, #36	; 0x24
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010548:	b480      	push	{r7}
 801054a:	b095      	sub	sp, #84	; 0x54
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	330c      	adds	r3, #12
 8010556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055a:	e853 3f00 	ldrex	r3, [r3]
 801055e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	330c      	adds	r3, #12
 801056e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010570:	643a      	str	r2, [r7, #64]	; 0x40
 8010572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010578:	e841 2300 	strex	r3, r2, [r1]
 801057c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1e5      	bne.n	8010550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3314      	adds	r3, #20
 801058a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	e853 3f00 	ldrex	r3, [r3]
 8010592:	61fb      	str	r3, [r7, #28]
   return(result);
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	f023 0301 	bic.w	r3, r3, #1
 801059a:	64bb      	str	r3, [r7, #72]	; 0x48
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3314      	adds	r3, #20
 80105a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ac:	e841 2300 	strex	r3, r2, [r1]
 80105b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1e5      	bne.n	8010584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d119      	bne.n	80105f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	330c      	adds	r3, #12
 80105c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	f023 0310 	bic.w	r3, r3, #16
 80105d6:	647b      	str	r3, [r7, #68]	; 0x44
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	330c      	adds	r3, #12
 80105de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105e0:	61ba      	str	r2, [r7, #24]
 80105e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6979      	ldr	r1, [r7, #20]
 80105e6:	69ba      	ldr	r2, [r7, #24]
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	613b      	str	r3, [r7, #16]
   return(result);
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e5      	bne.n	80105c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2220      	movs	r2, #32
 80105f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010602:	bf00      	nop
 8010604:	3754      	adds	r7, #84	; 0x54
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
	...

08010610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010614:	b0c0      	sub	sp, #256	; 0x100
 8010616:	af00      	add	r7, sp, #0
 8010618:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801061c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801062c:	68d9      	ldr	r1, [r3, #12]
 801062e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	ea40 0301 	orr.w	r3, r0, r1
 8010638:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801063a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801063e:	689a      	ldr	r2, [r3, #8]
 8010640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	431a      	orrs	r2, r3
 8010648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	431a      	orrs	r2, r3
 8010650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010654:	69db      	ldr	r3, [r3, #28]
 8010656:	4313      	orrs	r3, r2
 8010658:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801065c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010668:	f021 010c 	bic.w	r1, r1, #12
 801066c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010676:	430b      	orrs	r3, r1
 8010678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801067a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	695b      	ldr	r3, [r3, #20]
 8010682:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801068a:	6999      	ldr	r1, [r3, #24]
 801068c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	ea40 0301 	orr.w	r3, r0, r1
 8010696:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	4b8f      	ldr	r3, [pc, #572]	; (80108dc <UART_SetConfig+0x2cc>)
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d005      	beq.n	80106b0 <UART_SetConfig+0xa0>
 80106a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	4b8d      	ldr	r3, [pc, #564]	; (80108e0 <UART_SetConfig+0x2d0>)
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d104      	bne.n	80106ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80106b0:	f7fc fd48 	bl	800d144 <HAL_RCC_GetPCLK2Freq>
 80106b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80106b8:	e003      	b.n	80106c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80106ba:	f7fc fd2f 	bl	800d11c <HAL_RCC_GetPCLK1Freq>
 80106be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80106c6:	69db      	ldr	r3, [r3, #28]
 80106c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106cc:	f040 810c 	bne.w	80108e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80106d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80106d4:	2200      	movs	r2, #0
 80106d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80106da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80106de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80106e2:	4622      	mov	r2, r4
 80106e4:	462b      	mov	r3, r5
 80106e6:	1891      	adds	r1, r2, r2
 80106e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80106ea:	415b      	adcs	r3, r3
 80106ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80106f2:	4621      	mov	r1, r4
 80106f4:	eb12 0801 	adds.w	r8, r2, r1
 80106f8:	4629      	mov	r1, r5
 80106fa:	eb43 0901 	adc.w	r9, r3, r1
 80106fe:	f04f 0200 	mov.w	r2, #0
 8010702:	f04f 0300 	mov.w	r3, #0
 8010706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801070a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801070e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010712:	4690      	mov	r8, r2
 8010714:	4699      	mov	r9, r3
 8010716:	4623      	mov	r3, r4
 8010718:	eb18 0303 	adds.w	r3, r8, r3
 801071c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010720:	462b      	mov	r3, r5
 8010722:	eb49 0303 	adc.w	r3, r9, r3
 8010726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801072a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010736:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801073a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801073e:	460b      	mov	r3, r1
 8010740:	18db      	adds	r3, r3, r3
 8010742:	653b      	str	r3, [r7, #80]	; 0x50
 8010744:	4613      	mov	r3, r2
 8010746:	eb42 0303 	adc.w	r3, r2, r3
 801074a:	657b      	str	r3, [r7, #84]	; 0x54
 801074c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010754:	f7f0 fab8 	bl	8000cc8 <__aeabi_uldivmod>
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	4b61      	ldr	r3, [pc, #388]	; (80108e4 <UART_SetConfig+0x2d4>)
 801075e:	fba3 2302 	umull	r2, r3, r3, r2
 8010762:	095b      	lsrs	r3, r3, #5
 8010764:	011c      	lsls	r4, r3, #4
 8010766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801076a:	2200      	movs	r2, #0
 801076c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010770:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010774:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010778:	4642      	mov	r2, r8
 801077a:	464b      	mov	r3, r9
 801077c:	1891      	adds	r1, r2, r2
 801077e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010780:	415b      	adcs	r3, r3
 8010782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010788:	4641      	mov	r1, r8
 801078a:	eb12 0a01 	adds.w	sl, r2, r1
 801078e:	4649      	mov	r1, r9
 8010790:	eb43 0b01 	adc.w	fp, r3, r1
 8010794:	f04f 0200 	mov.w	r2, #0
 8010798:	f04f 0300 	mov.w	r3, #0
 801079c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80107a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80107a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80107a8:	4692      	mov	sl, r2
 80107aa:	469b      	mov	fp, r3
 80107ac:	4643      	mov	r3, r8
 80107ae:	eb1a 0303 	adds.w	r3, sl, r3
 80107b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80107b6:	464b      	mov	r3, r9
 80107b8:	eb4b 0303 	adc.w	r3, fp, r3
 80107bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80107c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80107cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80107d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80107d4:	460b      	mov	r3, r1
 80107d6:	18db      	adds	r3, r3, r3
 80107d8:	643b      	str	r3, [r7, #64]	; 0x40
 80107da:	4613      	mov	r3, r2
 80107dc:	eb42 0303 	adc.w	r3, r2, r3
 80107e0:	647b      	str	r3, [r7, #68]	; 0x44
 80107e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80107e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80107ea:	f7f0 fa6d 	bl	8000cc8 <__aeabi_uldivmod>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	4611      	mov	r1, r2
 80107f4:	4b3b      	ldr	r3, [pc, #236]	; (80108e4 <UART_SetConfig+0x2d4>)
 80107f6:	fba3 2301 	umull	r2, r3, r3, r1
 80107fa:	095b      	lsrs	r3, r3, #5
 80107fc:	2264      	movs	r2, #100	; 0x64
 80107fe:	fb02 f303 	mul.w	r3, r2, r3
 8010802:	1acb      	subs	r3, r1, r3
 8010804:	00db      	lsls	r3, r3, #3
 8010806:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801080a:	4b36      	ldr	r3, [pc, #216]	; (80108e4 <UART_SetConfig+0x2d4>)
 801080c:	fba3 2302 	umull	r2, r3, r3, r2
 8010810:	095b      	lsrs	r3, r3, #5
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010818:	441c      	add	r4, r3
 801081a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801081e:	2200      	movs	r2, #0
 8010820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010824:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010828:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801082c:	4642      	mov	r2, r8
 801082e:	464b      	mov	r3, r9
 8010830:	1891      	adds	r1, r2, r2
 8010832:	63b9      	str	r1, [r7, #56]	; 0x38
 8010834:	415b      	adcs	r3, r3
 8010836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801083c:	4641      	mov	r1, r8
 801083e:	1851      	adds	r1, r2, r1
 8010840:	6339      	str	r1, [r7, #48]	; 0x30
 8010842:	4649      	mov	r1, r9
 8010844:	414b      	adcs	r3, r1
 8010846:	637b      	str	r3, [r7, #52]	; 0x34
 8010848:	f04f 0200 	mov.w	r2, #0
 801084c:	f04f 0300 	mov.w	r3, #0
 8010850:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010854:	4659      	mov	r1, fp
 8010856:	00cb      	lsls	r3, r1, #3
 8010858:	4651      	mov	r1, sl
 801085a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801085e:	4651      	mov	r1, sl
 8010860:	00ca      	lsls	r2, r1, #3
 8010862:	4610      	mov	r0, r2
 8010864:	4619      	mov	r1, r3
 8010866:	4603      	mov	r3, r0
 8010868:	4642      	mov	r2, r8
 801086a:	189b      	adds	r3, r3, r2
 801086c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010870:	464b      	mov	r3, r9
 8010872:	460a      	mov	r2, r1
 8010874:	eb42 0303 	adc.w	r3, r2, r3
 8010878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801087c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010888:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801088c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010890:	460b      	mov	r3, r1
 8010892:	18db      	adds	r3, r3, r3
 8010894:	62bb      	str	r3, [r7, #40]	; 0x28
 8010896:	4613      	mov	r3, r2
 8010898:	eb42 0303 	adc.w	r3, r2, r3
 801089c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801089e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80108a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80108a6:	f7f0 fa0f 	bl	8000cc8 <__aeabi_uldivmod>
 80108aa:	4602      	mov	r2, r0
 80108ac:	460b      	mov	r3, r1
 80108ae:	4b0d      	ldr	r3, [pc, #52]	; (80108e4 <UART_SetConfig+0x2d4>)
 80108b0:	fba3 1302 	umull	r1, r3, r3, r2
 80108b4:	095b      	lsrs	r3, r3, #5
 80108b6:	2164      	movs	r1, #100	; 0x64
 80108b8:	fb01 f303 	mul.w	r3, r1, r3
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	00db      	lsls	r3, r3, #3
 80108c0:	3332      	adds	r3, #50	; 0x32
 80108c2:	4a08      	ldr	r2, [pc, #32]	; (80108e4 <UART_SetConfig+0x2d4>)
 80108c4:	fba2 2303 	umull	r2, r3, r2, r3
 80108c8:	095b      	lsrs	r3, r3, #5
 80108ca:	f003 0207 	and.w	r2, r3, #7
 80108ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4422      	add	r2, r4
 80108d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80108d8:	e105      	b.n	8010ae6 <UART_SetConfig+0x4d6>
 80108da:	bf00      	nop
 80108dc:	40011000 	.word	0x40011000
 80108e0:	40011400 	.word	0x40011400
 80108e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80108e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108ec:	2200      	movs	r2, #0
 80108ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80108f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80108f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80108fa:	4642      	mov	r2, r8
 80108fc:	464b      	mov	r3, r9
 80108fe:	1891      	adds	r1, r2, r2
 8010900:	6239      	str	r1, [r7, #32]
 8010902:	415b      	adcs	r3, r3
 8010904:	627b      	str	r3, [r7, #36]	; 0x24
 8010906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801090a:	4641      	mov	r1, r8
 801090c:	1854      	adds	r4, r2, r1
 801090e:	4649      	mov	r1, r9
 8010910:	eb43 0501 	adc.w	r5, r3, r1
 8010914:	f04f 0200 	mov.w	r2, #0
 8010918:	f04f 0300 	mov.w	r3, #0
 801091c:	00eb      	lsls	r3, r5, #3
 801091e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010922:	00e2      	lsls	r2, r4, #3
 8010924:	4614      	mov	r4, r2
 8010926:	461d      	mov	r5, r3
 8010928:	4643      	mov	r3, r8
 801092a:	18e3      	adds	r3, r4, r3
 801092c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010930:	464b      	mov	r3, r9
 8010932:	eb45 0303 	adc.w	r3, r5, r3
 8010936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801093a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	2200      	movs	r2, #0
 8010942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801094a:	f04f 0200 	mov.w	r2, #0
 801094e:	f04f 0300 	mov.w	r3, #0
 8010952:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8010956:	4629      	mov	r1, r5
 8010958:	008b      	lsls	r3, r1, #2
 801095a:	4621      	mov	r1, r4
 801095c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010960:	4621      	mov	r1, r4
 8010962:	008a      	lsls	r2, r1, #2
 8010964:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010968:	f7f0 f9ae 	bl	8000cc8 <__aeabi_uldivmod>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	4b60      	ldr	r3, [pc, #384]	; (8010af4 <UART_SetConfig+0x4e4>)
 8010972:	fba3 2302 	umull	r2, r3, r3, r2
 8010976:	095b      	lsrs	r3, r3, #5
 8010978:	011c      	lsls	r4, r3, #4
 801097a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801097e:	2200      	movs	r2, #0
 8010980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010984:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010988:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801098c:	4642      	mov	r2, r8
 801098e:	464b      	mov	r3, r9
 8010990:	1891      	adds	r1, r2, r2
 8010992:	61b9      	str	r1, [r7, #24]
 8010994:	415b      	adcs	r3, r3
 8010996:	61fb      	str	r3, [r7, #28]
 8010998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801099c:	4641      	mov	r1, r8
 801099e:	1851      	adds	r1, r2, r1
 80109a0:	6139      	str	r1, [r7, #16]
 80109a2:	4649      	mov	r1, r9
 80109a4:	414b      	adcs	r3, r1
 80109a6:	617b      	str	r3, [r7, #20]
 80109a8:	f04f 0200 	mov.w	r2, #0
 80109ac:	f04f 0300 	mov.w	r3, #0
 80109b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80109b4:	4659      	mov	r1, fp
 80109b6:	00cb      	lsls	r3, r1, #3
 80109b8:	4651      	mov	r1, sl
 80109ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80109be:	4651      	mov	r1, sl
 80109c0:	00ca      	lsls	r2, r1, #3
 80109c2:	4610      	mov	r0, r2
 80109c4:	4619      	mov	r1, r3
 80109c6:	4603      	mov	r3, r0
 80109c8:	4642      	mov	r2, r8
 80109ca:	189b      	adds	r3, r3, r2
 80109cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109d0:	464b      	mov	r3, r9
 80109d2:	460a      	mov	r2, r1
 80109d4:	eb42 0303 	adc.w	r3, r2, r3
 80109d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80109e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80109e8:	f04f 0200 	mov.w	r2, #0
 80109ec:	f04f 0300 	mov.w	r3, #0
 80109f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80109f4:	4649      	mov	r1, r9
 80109f6:	008b      	lsls	r3, r1, #2
 80109f8:	4641      	mov	r1, r8
 80109fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80109fe:	4641      	mov	r1, r8
 8010a00:	008a      	lsls	r2, r1, #2
 8010a02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010a06:	f7f0 f95f 	bl	8000cc8 <__aeabi_uldivmod>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4b39      	ldr	r3, [pc, #228]	; (8010af4 <UART_SetConfig+0x4e4>)
 8010a10:	fba3 1302 	umull	r1, r3, r3, r2
 8010a14:	095b      	lsrs	r3, r3, #5
 8010a16:	2164      	movs	r1, #100	; 0x64
 8010a18:	fb01 f303 	mul.w	r3, r1, r3
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	011b      	lsls	r3, r3, #4
 8010a20:	3332      	adds	r3, #50	; 0x32
 8010a22:	4a34      	ldr	r2, [pc, #208]	; (8010af4 <UART_SetConfig+0x4e4>)
 8010a24:	fba2 2303 	umull	r2, r3, r2, r3
 8010a28:	095b      	lsrs	r3, r3, #5
 8010a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a2e:	441c      	add	r4, r3
 8010a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a34:	2200      	movs	r2, #0
 8010a36:	673b      	str	r3, [r7, #112]	; 0x70
 8010a38:	677a      	str	r2, [r7, #116]	; 0x74
 8010a3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010a3e:	4642      	mov	r2, r8
 8010a40:	464b      	mov	r3, r9
 8010a42:	1891      	adds	r1, r2, r2
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	415b      	adcs	r3, r3
 8010a48:	60fb      	str	r3, [r7, #12]
 8010a4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a4e:	4641      	mov	r1, r8
 8010a50:	1851      	adds	r1, r2, r1
 8010a52:	6039      	str	r1, [r7, #0]
 8010a54:	4649      	mov	r1, r9
 8010a56:	414b      	adcs	r3, r1
 8010a58:	607b      	str	r3, [r7, #4]
 8010a5a:	f04f 0200 	mov.w	r2, #0
 8010a5e:	f04f 0300 	mov.w	r3, #0
 8010a62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010a66:	4659      	mov	r1, fp
 8010a68:	00cb      	lsls	r3, r1, #3
 8010a6a:	4651      	mov	r1, sl
 8010a6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010a70:	4651      	mov	r1, sl
 8010a72:	00ca      	lsls	r2, r1, #3
 8010a74:	4610      	mov	r0, r2
 8010a76:	4619      	mov	r1, r3
 8010a78:	4603      	mov	r3, r0
 8010a7a:	4642      	mov	r2, r8
 8010a7c:	189b      	adds	r3, r3, r2
 8010a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a80:	464b      	mov	r3, r9
 8010a82:	460a      	mov	r2, r1
 8010a84:	eb42 0303 	adc.w	r3, r2, r3
 8010a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	2200      	movs	r2, #0
 8010a92:	663b      	str	r3, [r7, #96]	; 0x60
 8010a94:	667a      	str	r2, [r7, #100]	; 0x64
 8010a96:	f04f 0200 	mov.w	r2, #0
 8010a9a:	f04f 0300 	mov.w	r3, #0
 8010a9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	008b      	lsls	r3, r1, #2
 8010aa6:	4641      	mov	r1, r8
 8010aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010aac:	4641      	mov	r1, r8
 8010aae:	008a      	lsls	r2, r1, #2
 8010ab0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010ab4:	f7f0 f908 	bl	8000cc8 <__aeabi_uldivmod>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	460b      	mov	r3, r1
 8010abc:	4b0d      	ldr	r3, [pc, #52]	; (8010af4 <UART_SetConfig+0x4e4>)
 8010abe:	fba3 1302 	umull	r1, r3, r3, r2
 8010ac2:	095b      	lsrs	r3, r3, #5
 8010ac4:	2164      	movs	r1, #100	; 0x64
 8010ac6:	fb01 f303 	mul.w	r3, r1, r3
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	011b      	lsls	r3, r3, #4
 8010ace:	3332      	adds	r3, #50	; 0x32
 8010ad0:	4a08      	ldr	r2, [pc, #32]	; (8010af4 <UART_SetConfig+0x4e4>)
 8010ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ad6:	095b      	lsrs	r3, r3, #5
 8010ad8:	f003 020f 	and.w	r2, r3, #15
 8010adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4422      	add	r2, r4
 8010ae4:	609a      	str	r2, [r3, #8]
}
 8010ae6:	bf00      	nop
 8010ae8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010aec:	46bd      	mov	sp, r7
 8010aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010af2:	bf00      	nop
 8010af4:	51eb851f 	.word	0x51eb851f

08010af8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010af8:	b084      	sub	sp, #16
 8010afa:	b480      	push	{r7}
 8010afc:	b085      	sub	sp, #20
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	f107 001c 	add.w	r0, r7, #28
 8010b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010b0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010b10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010b12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010b16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010b1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010b1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010b22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	4313      	orrs	r3, r2
 8010b28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	431a      	orrs	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	b004      	add	sp, #16
 8010b4c:	4770      	bx	lr

08010b4e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010b4e:	b480      	push	{r7}
 8010b50:	b083      	sub	sp, #12
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2203      	movs	r2, #3
 8010b96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010ba6:	b480      	push	{r7}
 8010ba8:	b083      	sub	sp, #12
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f003 0303 	and.w	r3, r3, #3
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b085      	sub	sp, #20
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010be0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010be6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010bec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010bfc:	f023 030f 	bic.w	r3, r3, #15
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	431a      	orrs	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3714      	adds	r7, #20
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b083      	sub	sp, #12
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	b2db      	uxtb	r3, r3
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b085      	sub	sp, #20
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3314      	adds	r3, #20
 8010c3e:	461a      	mov	r2, r3
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	4413      	add	r3, r2
 8010c44:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
}  
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	685a      	ldr	r2, [r3, #4]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010c82:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010c88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c94:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	431a      	orrs	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010ca0:	2300      	movs	r3, #0

}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3714      	adds	r7, #20
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b088      	sub	sp, #32
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010cbc:	2310      	movs	r3, #16
 8010cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cc0:	2340      	movs	r3, #64	; 0x40
 8010cc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ccc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cce:	f107 0308 	add.w	r3, r7, #8
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff ff74 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cde:	2110      	movs	r1, #16
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 f9d7 	bl	8011094 <SDMMC_GetCmdResp1>
 8010ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ce8:	69fb      	ldr	r3, [r7, #28]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3720      	adds	r7, #32
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b088      	sub	sp, #32
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010d00:	2311      	movs	r3, #17
 8010d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d04:	2340      	movs	r3, #64	; 0x40
 8010d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d12:	f107 0308 	add.w	r3, r7, #8
 8010d16:	4619      	mov	r1, r3
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff ff52 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d22:	2111      	movs	r1, #17
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f9b5 	bl	8011094 <SDMMC_GetCmdResp1>
 8010d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d2c:	69fb      	ldr	r3, [r7, #28]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3720      	adds	r7, #32
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b088      	sub	sp, #32
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010d44:	2312      	movs	r3, #18
 8010d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d48:	2340      	movs	r3, #64	; 0x40
 8010d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d56:	f107 0308 	add.w	r3, r7, #8
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff ff30 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d66:	2112      	movs	r1, #18
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f000 f993 	bl	8011094 <SDMMC_GetCmdResp1>
 8010d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d70:	69fb      	ldr	r3, [r7, #28]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3720      	adds	r7, #32
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b088      	sub	sp, #32
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010d88:	2318      	movs	r3, #24
 8010d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010d8c:	2340      	movs	r3, #64	; 0x40
 8010d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010d90:	2300      	movs	r3, #0
 8010d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010d9a:	f107 0308 	add.w	r3, r7, #8
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff ff0e 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010daa:	2118      	movs	r1, #24
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 f971 	bl	8011094 <SDMMC_GetCmdResp1>
 8010db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010db4:	69fb      	ldr	r3, [r7, #28]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3720      	adds	r7, #32
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b088      	sub	sp, #32
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010dcc:	2319      	movs	r3, #25
 8010dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010dd0:	2340      	movs	r3, #64	; 0x40
 8010dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010dde:	f107 0308 	add.w	r3, r7, #8
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff feec 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dee:	2119      	movs	r1, #25
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f94f 	bl	8011094 <SDMMC_GetCmdResp1>
 8010df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010df8:	69fb      	ldr	r3, [r7, #28]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3720      	adds	r7, #32
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
	...

08010e04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b088      	sub	sp, #32
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010e10:	230c      	movs	r3, #12
 8010e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e14:	2340      	movs	r3, #64	; 0x40
 8010e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e22:	f107 0308 	add.w	r3, r7, #8
 8010e26:	4619      	mov	r1, r3
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff feca 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010e2e:	4a05      	ldr	r2, [pc, #20]	; (8010e44 <SDMMC_CmdStopTransfer+0x40>)
 8010e30:	210c      	movs	r1, #12
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f92e 	bl	8011094 <SDMMC_GetCmdResp1>
 8010e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e3a:	69fb      	ldr	r3, [r7, #28]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3720      	adds	r7, #32
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	05f5e100 	.word	0x05f5e100

08010e48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b08a      	sub	sp, #40	; 0x28
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010e58:	2307      	movs	r3, #7
 8010e5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e5c:	2340      	movs	r3, #64	; 0x40
 8010e5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e60:	2300      	movs	r3, #0
 8010e62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e6a:	f107 0310 	add.w	r3, r7, #16
 8010e6e:	4619      	mov	r1, r3
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f7ff fea6 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e7a:	2107      	movs	r1, #7
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 f909 	bl	8011094 <SDMMC_GetCmdResp1>
 8010e82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3728      	adds	r7, #40	; 0x28
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b088      	sub	sp, #32
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010e96:	2300      	movs	r3, #0
 8010e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010eac:	f107 0308 	add.w	r3, r7, #8
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7ff fe85 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 fb23 	bl	8011504 <SDMMC_GetCmdError>
 8010ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ec0:	69fb      	ldr	r3, [r7, #28]
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3720      	adds	r7, #32
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b088      	sub	sp, #32
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010ed2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010ed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010ed8:	2308      	movs	r3, #8
 8010eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ee8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010eea:	f107 0308 	add.w	r3, r7, #8
 8010eee:	4619      	mov	r1, r3
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7ff fe66 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fab6 	bl	8011468 <SDMMC_GetCmdResp7>
 8010efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010efe:	69fb      	ldr	r3, [r7, #28]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3720      	adds	r7, #32
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b088      	sub	sp, #32
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010f16:	2337      	movs	r3, #55	; 0x37
 8010f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f1a:	2340      	movs	r3, #64	; 0x40
 8010f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f28:	f107 0308 	add.w	r3, r7, #8
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f7ff fe47 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f38:	2137      	movs	r1, #55	; 0x37
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f8aa 	bl	8011094 <SDMMC_GetCmdResp1>
 8010f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f42:	69fb      	ldr	r3, [r7, #28]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3720      	adds	r7, #32
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010f62:	2329      	movs	r3, #41	; 0x29
 8010f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f66:	2340      	movs	r3, #64	; 0x40
 8010f68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f74:	f107 0308 	add.w	r3, r7, #8
 8010f78:	4619      	mov	r1, r3
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7ff fe21 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 f9bd 	bl	8011300 <SDMMC_GetCmdResp3>
 8010f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f88:	69fb      	ldr	r3, [r7, #28]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3720      	adds	r7, #32
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b088      	sub	sp, #32
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010f9e:	2302      	movs	r3, #2
 8010fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010fa2:	23c0      	movs	r3, #192	; 0xc0
 8010fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010fb0:	f107 0308 	add.w	r3, r7, #8
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7ff fe03 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f957 	bl	8011270 <SDMMC_GetCmdResp2>
 8010fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fc4:	69fb      	ldr	r3, [r7, #28]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3720      	adds	r7, #32
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b088      	sub	sp, #32
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010fdc:	2309      	movs	r3, #9
 8010fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010fe0:	23c0      	movs	r3, #192	; 0xc0
 8010fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010fee:	f107 0308 	add.w	r3, r7, #8
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff fde4 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 f938 	bl	8011270 <SDMMC_GetCmdResp2>
 8011000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011002:	69fb      	ldr	r3, [r7, #28]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3720      	adds	r7, #32
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011016:	2300      	movs	r3, #0
 8011018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801101a:	2303      	movs	r3, #3
 801101c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801101e:	2340      	movs	r3, #64	; 0x40
 8011020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011022:	2300      	movs	r3, #0
 8011024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801102a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4619      	mov	r1, r3
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7ff fdc5 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	2103      	movs	r1, #3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 f99d 	bl	801137c <SDMMC_GetCmdResp6>
 8011042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011044:	69fb      	ldr	r3, [r7, #28]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3720      	adds	r7, #32
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b088      	sub	sp, #32
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
 8011056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801105c:	230d      	movs	r3, #13
 801105e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011060:	2340      	movs	r3, #64	; 0x40
 8011062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011064:	2300      	movs	r3, #0
 8011066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801106c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801106e:	f107 0308 	add.w	r3, r7, #8
 8011072:	4619      	mov	r1, r3
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff fda4 	bl	8010bc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801107a:	f241 3288 	movw	r2, #5000	; 0x1388
 801107e:	210d      	movs	r1, #13
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 f807 	bl	8011094 <SDMMC_GetCmdResp1>
 8011086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011088:	69fb      	ldr	r3, [r7, #28]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3720      	adds	r7, #32
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b088      	sub	sp, #32
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	460b      	mov	r3, r1
 801109e:	607a      	str	r2, [r7, #4]
 80110a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80110a2:	4b70      	ldr	r3, [pc, #448]	; (8011264 <SDMMC_GetCmdResp1+0x1d0>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	4a70      	ldr	r2, [pc, #448]	; (8011268 <SDMMC_GetCmdResp1+0x1d4>)
 80110a8:	fba2 2303 	umull	r2, r3, r2, r3
 80110ac:	0a5a      	lsrs	r2, r3, #9
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	fb02 f303 	mul.w	r3, r2, r3
 80110b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	1e5a      	subs	r2, r3, #1
 80110ba:	61fa      	str	r2, [r7, #28]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d102      	bne.n	80110c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110c4:	e0c9      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d0ef      	beq.n	80110b6 <SDMMC_GetCmdResp1+0x22>
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1ea      	bne.n	80110b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d004      	beq.n	80110f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2204      	movs	r2, #4
 80110f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110f2:	2304      	movs	r3, #4
 80110f4:	e0b1      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d004      	beq.n	801110c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2201      	movs	r2, #1
 8011106:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011108:	2301      	movs	r3, #1
 801110a:	e0a6      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	22c5      	movs	r2, #197	; 0xc5
 8011110:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f7ff fd7f 	bl	8010c16 <SDIO_GetCommandResponse>
 8011118:	4603      	mov	r3, r0
 801111a:	461a      	mov	r2, r3
 801111c:	7afb      	ldrb	r3, [r7, #11]
 801111e:	4293      	cmp	r3, r2
 8011120:	d001      	beq.n	8011126 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011122:	2301      	movs	r3, #1
 8011124:	e099      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011126:	2100      	movs	r1, #0
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7ff fd81 	bl	8010c30 <SDIO_GetResponse>
 801112e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	4b4e      	ldr	r3, [pc, #312]	; (801126c <SDMMC_GetCmdResp1+0x1d8>)
 8011134:	4013      	ands	r3, r2
 8011136:	2b00      	cmp	r3, #0
 8011138:	d101      	bne.n	801113e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801113a:	2300      	movs	r3, #0
 801113c:	e08d      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2b00      	cmp	r3, #0
 8011142:	da02      	bge.n	801114a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011148:	e087      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011150:	2b00      	cmp	r3, #0
 8011152:	d001      	beq.n	8011158 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011154:	2340      	movs	r3, #64	; 0x40
 8011156:	e080      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801115e:	2b00      	cmp	r3, #0
 8011160:	d001      	beq.n	8011166 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011162:	2380      	movs	r3, #128	; 0x80
 8011164:	e079      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011174:	e071      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011184:	e069      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011194:	e061      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801119c:	2b00      	cmp	r3, #0
 801119e:	d002      	beq.n	80111a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80111a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111a4:	e059      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80111b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111b4:	e051      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d002      	beq.n	80111c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111c4:	e049      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80111d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80111d4:	e041      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d002      	beq.n	80111e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80111e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111e4:	e039      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d002      	beq.n	80111f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80111f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80111f4:	e031      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011204:	e029      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011210:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011214:	e021      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011224:	e019      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011234:	e011      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d002      	beq.n	8011246 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011240:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011244:	e009      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	f003 0308 	and.w	r3, r3, #8
 801124c:	2b00      	cmp	r3, #0
 801124e:	d002      	beq.n	8011256 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011250:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011254:	e001      	b.n	801125a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801125a:	4618      	mov	r0, r3
 801125c:	3720      	adds	r7, #32
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	200000a8 	.word	0x200000a8
 8011268:	10624dd3 	.word	0x10624dd3
 801126c:	fdffe008 	.word	0xfdffe008

08011270 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011278:	4b1f      	ldr	r3, [pc, #124]	; (80112f8 <SDMMC_GetCmdResp2+0x88>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4a1f      	ldr	r2, [pc, #124]	; (80112fc <SDMMC_GetCmdResp2+0x8c>)
 801127e:	fba2 2303 	umull	r2, r3, r2, r3
 8011282:	0a5b      	lsrs	r3, r3, #9
 8011284:	f241 3288 	movw	r2, #5000	; 0x1388
 8011288:	fb02 f303 	mul.w	r3, r2, r3
 801128c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	1e5a      	subs	r2, r3, #1
 8011292:	60fa      	str	r2, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d102      	bne.n	801129e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801129c:	e026      	b.n	80112ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0ef      	beq.n	801128e <SDMMC_GetCmdResp2+0x1e>
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d1ea      	bne.n	801128e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112bc:	f003 0304 	and.w	r3, r3, #4
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2204      	movs	r2, #4
 80112c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112ca:	2304      	movs	r3, #4
 80112cc:	e00e      	b.n	80112ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	f003 0301 	and.w	r3, r3, #1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d004      	beq.n	80112e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2201      	movs	r2, #1
 80112de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112e0:	2301      	movs	r3, #1
 80112e2:	e003      	b.n	80112ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	22c5      	movs	r2, #197	; 0xc5
 80112e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3714      	adds	r7, #20
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr
 80112f8:	200000a8 	.word	0x200000a8
 80112fc:	10624dd3 	.word	0x10624dd3

08011300 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011308:	4b1a      	ldr	r3, [pc, #104]	; (8011374 <SDMMC_GetCmdResp3+0x74>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a1a      	ldr	r2, [pc, #104]	; (8011378 <SDMMC_GetCmdResp3+0x78>)
 801130e:	fba2 2303 	umull	r2, r3, r2, r3
 8011312:	0a5b      	lsrs	r3, r3, #9
 8011314:	f241 3288 	movw	r2, #5000	; 0x1388
 8011318:	fb02 f303 	mul.w	r3, r2, r3
 801131c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	1e5a      	subs	r2, r3, #1
 8011322:	60fa      	str	r2, [r7, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d102      	bne.n	801132e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801132c:	e01b      	b.n	8011366 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011332:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0ef      	beq.n	801131e <SDMMC_GetCmdResp3+0x1e>
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1ea      	bne.n	801131e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801134c:	f003 0304 	and.w	r3, r3, #4
 8011350:	2b00      	cmp	r3, #0
 8011352:	d004      	beq.n	801135e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2204      	movs	r2, #4
 8011358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801135a:	2304      	movs	r3, #4
 801135c:	e003      	b.n	8011366 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	22c5      	movs	r2, #197	; 0xc5
 8011362:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	200000a8 	.word	0x200000a8
 8011378:	10624dd3 	.word	0x10624dd3

0801137c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	460b      	mov	r3, r1
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801138a:	4b35      	ldr	r3, [pc, #212]	; (8011460 <SDMMC_GetCmdResp6+0xe4>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a35      	ldr	r2, [pc, #212]	; (8011464 <SDMMC_GetCmdResp6+0xe8>)
 8011390:	fba2 2303 	umull	r2, r3, r2, r3
 8011394:	0a5b      	lsrs	r3, r3, #9
 8011396:	f241 3288 	movw	r2, #5000	; 0x1388
 801139a:	fb02 f303 	mul.w	r3, r2, r3
 801139e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	1e5a      	subs	r2, r3, #1
 80113a4:	61fa      	str	r2, [r7, #28]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d102      	bne.n	80113b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113ae:	e052      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d0ef      	beq.n	80113a0 <SDMMC_GetCmdResp6+0x24>
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d1ea      	bne.n	80113a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ce:	f003 0304 	and.w	r3, r3, #4
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d004      	beq.n	80113e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2204      	movs	r2, #4
 80113da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113dc:	2304      	movs	r3, #4
 80113de:	e03a      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e4:	f003 0301 	and.w	r3, r3, #1
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d004      	beq.n	80113f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2201      	movs	r2, #1
 80113f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80113f2:	2301      	movs	r3, #1
 80113f4:	e02f      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff fc0d 	bl	8010c16 <SDIO_GetCommandResponse>
 80113fc:	4603      	mov	r3, r0
 80113fe:	461a      	mov	r2, r3
 8011400:	7afb      	ldrb	r3, [r7, #11]
 8011402:	4293      	cmp	r3, r2
 8011404:	d001      	beq.n	801140a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011406:	2301      	movs	r3, #1
 8011408:	e025      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	22c5      	movs	r2, #197	; 0xc5
 801140e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011410:	2100      	movs	r1, #0
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f7ff fc0c 	bl	8010c30 <SDIO_GetResponse>
 8011418:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011420:	2b00      	cmp	r3, #0
 8011422:	d106      	bne.n	8011432 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	0c1b      	lsrs	r3, r3, #16
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801142e:	2300      	movs	r3, #0
 8011430:	e011      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011440:	e009      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011450:	e001      	b.n	8011456 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011456:	4618      	mov	r0, r3
 8011458:	3720      	adds	r7, #32
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	200000a8 	.word	0x200000a8
 8011464:	10624dd3 	.word	0x10624dd3

08011468 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011470:	4b22      	ldr	r3, [pc, #136]	; (80114fc <SDMMC_GetCmdResp7+0x94>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a22      	ldr	r2, [pc, #136]	; (8011500 <SDMMC_GetCmdResp7+0x98>)
 8011476:	fba2 2303 	umull	r2, r3, r2, r3
 801147a:	0a5b      	lsrs	r3, r3, #9
 801147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011480:	fb02 f303 	mul.w	r3, r2, r3
 8011484:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	1e5a      	subs	r2, r3, #1
 801148a:	60fa      	str	r2, [r7, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011490:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011494:	e02c      	b.n	80114f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801149a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d0ef      	beq.n	8011486 <SDMMC_GetCmdResp7+0x1e>
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d1ea      	bne.n	8011486 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114b4:	f003 0304 	and.w	r3, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d004      	beq.n	80114c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2204      	movs	r2, #4
 80114c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114c2:	2304      	movs	r3, #4
 80114c4:	e014      	b.n	80114f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d004      	beq.n	80114dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2201      	movs	r2, #1
 80114d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114d8:	2301      	movs	r3, #1
 80114da:	e009      	b.n	80114f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d002      	beq.n	80114ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2240      	movs	r2, #64	; 0x40
 80114ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80114ee:	2300      	movs	r3, #0
  
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3714      	adds	r7, #20
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr
 80114fc:	200000a8 	.word	0x200000a8
 8011500:	10624dd3 	.word	0x10624dd3

08011504 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801150c:	4b11      	ldr	r3, [pc, #68]	; (8011554 <SDMMC_GetCmdError+0x50>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4a11      	ldr	r2, [pc, #68]	; (8011558 <SDMMC_GetCmdError+0x54>)
 8011512:	fba2 2303 	umull	r2, r3, r2, r3
 8011516:	0a5b      	lsrs	r3, r3, #9
 8011518:	f241 3288 	movw	r2, #5000	; 0x1388
 801151c:	fb02 f303 	mul.w	r3, r2, r3
 8011520:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	1e5a      	subs	r2, r3, #1
 8011526:	60fa      	str	r2, [r7, #12]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d102      	bne.n	8011532 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801152c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011530:	e009      	b.n	8011546 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801153a:	2b00      	cmp	r3, #0
 801153c:	d0f1      	beq.n	8011522 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	22c5      	movs	r2, #197	; 0xc5
 8011542:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	200000a8 	.word	0x200000a8
 8011558:	10624dd3 	.word	0x10624dd3

0801155c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011560:	4904      	ldr	r1, [pc, #16]	; (8011574 <MX_FATFS_Init+0x18>)
 8011562:	4805      	ldr	r0, [pc, #20]	; (8011578 <MX_FATFS_Init+0x1c>)
 8011564:	f003 f8f4 	bl	8014750 <FATFS_LinkDriver>
 8011568:	4603      	mov	r3, r0
 801156a:	461a      	mov	r2, r3
 801156c:	4b03      	ldr	r3, [pc, #12]	; (801157c <MX_FATFS_Init+0x20>)
 801156e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011570:	bf00      	nop
 8011572:	bd80      	pop	{r7, pc}
 8011574:	20005d3c 	.word	0x20005d3c
 8011578:	08072f88 	.word	0x08072f88
 801157c:	20005d38 	.word	0x20005d38

08011580 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011580:	b480      	push	{r7}
 8011582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011584:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011586:	4618      	mov	r0, r3
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011596:	2300      	movs	r3, #0
 8011598:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801159a:	f000 f86b 	bl	8011674 <BSP_SD_IsDetected>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d001      	beq.n	80115a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80115a4:	2301      	movs	r3, #1
 80115a6:	e005      	b.n	80115b4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80115a8:	4804      	ldr	r0, [pc, #16]	; (80115bc <BSP_SD_Init+0x2c>)
 80115aa:	f7fc fa9d 	bl	800dae8 <HAL_SD_Init>
 80115ae:	4603      	mov	r3, r0
 80115b0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80115b2:	79fb      	ldrb	r3, [r7, #7]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	200059e8 	.word	0x200059e8

080115c0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b088      	sub	sp, #32
 80115c4:	af02      	add	r7, sp, #8
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
 80115cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	68ba      	ldr	r2, [r7, #8]
 80115da:	68f9      	ldr	r1, [r7, #12]
 80115dc:	4806      	ldr	r0, [pc, #24]	; (80115f8 <BSP_SD_ReadBlocks+0x38>)
 80115de:	f7fc fb33 	bl	800dc48 <HAL_SD_ReadBlocks>
 80115e2:	4603      	mov	r3, r0
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d001      	beq.n	80115ec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80115ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	200059e8 	.word	0x200059e8

080115fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b088      	sub	sp, #32
 8011600:	af02      	add	r7, sp, #8
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
 8011608:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801160a:	2300      	movs	r3, #0
 801160c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	68f9      	ldr	r1, [r7, #12]
 8011618:	4806      	ldr	r0, [pc, #24]	; (8011634 <BSP_SD_WriteBlocks+0x38>)
 801161a:	f7fc fcf3 	bl	800e004 <HAL_SD_WriteBlocks>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d001      	beq.n	8011628 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011628:	7dfb      	ldrb	r3, [r7, #23]
}
 801162a:	4618      	mov	r0, r3
 801162c:	3718      	adds	r7, #24
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	200059e8 	.word	0x200059e8

08011638 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801163c:	4805      	ldr	r0, [pc, #20]	; (8011654 <BSP_SD_GetCardState+0x1c>)
 801163e:	f7fd f837 	bl	800e6b0 <HAL_SD_GetCardState>
 8011642:	4603      	mov	r3, r0
 8011644:	2b04      	cmp	r3, #4
 8011646:	bf14      	ite	ne
 8011648:	2301      	movne	r3, #1
 801164a:	2300      	moveq	r3, #0
 801164c:	b2db      	uxtb	r3, r3
}
 801164e:	4618      	mov	r0, r3
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	200059e8 	.word	0x200059e8

08011658 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011660:	6879      	ldr	r1, [r7, #4]
 8011662:	4803      	ldr	r0, [pc, #12]	; (8011670 <BSP_SD_GetCardInfo+0x18>)
 8011664:	f7fc fff8 	bl	800e658 <HAL_SD_GetCardInfo>
}
 8011668:	bf00      	nop
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	200059e8 	.word	0x200059e8

08011674 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801167a:	2301      	movs	r3, #1
 801167c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	b2db      	uxtb	r3, r3
}
 8011682:	4618      	mov	r0, r3
 8011684:	370c      	adds	r7, #12
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
	...

08011690 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801169a:	4b0b      	ldr	r3, [pc, #44]	; (80116c8 <SD_CheckStatus+0x38>)
 801169c:	2201      	movs	r2, #1
 801169e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80116a0:	f7ff ffca 	bl	8011638 <BSP_SD_GetCardState>
 80116a4:	4603      	mov	r3, r0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d107      	bne.n	80116ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80116aa:	4b07      	ldr	r3, [pc, #28]	; (80116c8 <SD_CheckStatus+0x38>)
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	f023 0301 	bic.w	r3, r3, #1
 80116b4:	b2da      	uxtb	r2, r3
 80116b6:	4b04      	ldr	r3, [pc, #16]	; (80116c8 <SD_CheckStatus+0x38>)
 80116b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80116ba:	4b03      	ldr	r3, [pc, #12]	; (80116c8 <SD_CheckStatus+0x38>)
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	b2db      	uxtb	r3, r3
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	20000245 	.word	0x20000245

080116cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80116d6:	4b0b      	ldr	r3, [pc, #44]	; (8011704 <SD_initialize+0x38>)
 80116d8:	2201      	movs	r2, #1
 80116da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80116dc:	f7ff ff58 	bl	8011590 <BSP_SD_Init>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d107      	bne.n	80116f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80116e6:	79fb      	ldrb	r3, [r7, #7]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff ffd1 	bl	8011690 <SD_CheckStatus>
 80116ee:	4603      	mov	r3, r0
 80116f0:	461a      	mov	r2, r3
 80116f2:	4b04      	ldr	r3, [pc, #16]	; (8011704 <SD_initialize+0x38>)
 80116f4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80116f6:	4b03      	ldr	r3, [pc, #12]	; (8011704 <SD_initialize+0x38>)
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	b2db      	uxtb	r3, r3
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	20000245 	.word	0x20000245

08011708 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	4618      	mov	r0, r3
 8011716:	f7ff ffbb 	bl	8011690 <SD_CheckStatus>
 801171a:	4603      	mov	r3, r0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b086      	sub	sp, #24
 8011728:	af00      	add	r7, sp, #0
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
 801172e:	603b      	str	r3, [r7, #0]
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011734:	2301      	movs	r3, #1
 8011736:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011738:	f04f 33ff 	mov.w	r3, #4294967295
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	6879      	ldr	r1, [r7, #4]
 8011740:	68b8      	ldr	r0, [r7, #8]
 8011742:	f7ff ff3d 	bl	80115c0 <BSP_SD_ReadBlocks>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d107      	bne.n	801175c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801174c:	bf00      	nop
 801174e:	f7ff ff73 	bl	8011638 <BSP_SD_GetCardState>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d1fa      	bne.n	801174e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011758:	2300      	movs	r3, #0
 801175a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801175c:	7dfb      	ldrb	r3, [r7, #23]
}
 801175e:	4618      	mov	r0, r3
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b086      	sub	sp, #24
 801176a:	af00      	add	r7, sp, #0
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]
 8011772:	4603      	mov	r3, r0
 8011774:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801177a:	f04f 33ff 	mov.w	r3, #4294967295
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	6879      	ldr	r1, [r7, #4]
 8011782:	68b8      	ldr	r0, [r7, #8]
 8011784:	f7ff ff3a 	bl	80115fc <BSP_SD_WriteBlocks>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d107      	bne.n	801179e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801178e:	bf00      	nop
 8011790:	f7ff ff52 	bl	8011638 <BSP_SD_GetCardState>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1fa      	bne.n	8011790 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b08c      	sub	sp, #48	; 0x30
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	4603      	mov	r3, r0
 80117b0:	603a      	str	r2, [r7, #0]
 80117b2:	71fb      	strb	r3, [r7, #7]
 80117b4:	460b      	mov	r3, r1
 80117b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80117b8:	2301      	movs	r3, #1
 80117ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80117be:	4b25      	ldr	r3, [pc, #148]	; (8011854 <SD_ioctl+0xac>)
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <SD_ioctl+0x28>
 80117cc:	2303      	movs	r3, #3
 80117ce:	e03c      	b.n	801184a <SD_ioctl+0xa2>

  switch (cmd)
 80117d0:	79bb      	ldrb	r3, [r7, #6]
 80117d2:	2b03      	cmp	r3, #3
 80117d4:	d834      	bhi.n	8011840 <SD_ioctl+0x98>
 80117d6:	a201      	add	r2, pc, #4	; (adr r2, 80117dc <SD_ioctl+0x34>)
 80117d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117dc:	080117ed 	.word	0x080117ed
 80117e0:	080117f5 	.word	0x080117f5
 80117e4:	0801180d 	.word	0x0801180d
 80117e8:	08011827 	.word	0x08011827
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80117ec:	2300      	movs	r3, #0
 80117ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80117f2:	e028      	b.n	8011846 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80117f4:	f107 030c 	add.w	r3, r7, #12
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff ff2d 	bl	8011658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80117fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801180a:	e01c      	b.n	8011846 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801180c:	f107 030c 	add.w	r3, r7, #12
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff ff21 	bl	8011658 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011818:	b29a      	uxth	r2, r3
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801181e:	2300      	movs	r3, #0
 8011820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011824:	e00f      	b.n	8011846 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011826:	f107 030c 	add.w	r3, r7, #12
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff ff14 	bl	8011658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011832:	0a5a      	lsrs	r2, r3, #9
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011838:	2300      	movs	r3, #0
 801183a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801183e:	e002      	b.n	8011846 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011840:	2304      	movs	r3, #4
 8011842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801184a:	4618      	mov	r0, r3
 801184c:	3730      	adds	r7, #48	; 0x30
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	20000245 	.word	0x20000245

08011858 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	4603      	mov	r3, r0
 8011860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011862:	79fb      	ldrb	r3, [r7, #7]
 8011864:	4a08      	ldr	r2, [pc, #32]	; (8011888 <disk_status+0x30>)
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	4413      	add	r3, r2
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	79fa      	ldrb	r2, [r7, #7]
 8011870:	4905      	ldr	r1, [pc, #20]	; (8011888 <disk_status+0x30>)
 8011872:	440a      	add	r2, r1
 8011874:	7a12      	ldrb	r2, [r2, #8]
 8011876:	4610      	mov	r0, r2
 8011878:	4798      	blx	r3
 801187a:	4603      	mov	r3, r0
 801187c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	20005d68 	.word	0x20005d68

0801188c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011896:	2300      	movs	r3, #0
 8011898:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	4a0d      	ldr	r2, [pc, #52]	; (80118d4 <disk_initialize+0x48>)
 801189e:	5cd3      	ldrb	r3, [r2, r3]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d111      	bne.n	80118c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80118a4:	79fb      	ldrb	r3, [r7, #7]
 80118a6:	4a0b      	ldr	r2, [pc, #44]	; (80118d4 <disk_initialize+0x48>)
 80118a8:	2101      	movs	r1, #1
 80118aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80118ac:	79fb      	ldrb	r3, [r7, #7]
 80118ae:	4a09      	ldr	r2, [pc, #36]	; (80118d4 <disk_initialize+0x48>)
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	4413      	add	r3, r2
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	79fa      	ldrb	r2, [r7, #7]
 80118ba:	4906      	ldr	r1, [pc, #24]	; (80118d4 <disk_initialize+0x48>)
 80118bc:	440a      	add	r2, r1
 80118be:	7a12      	ldrb	r2, [r2, #8]
 80118c0:	4610      	mov	r0, r2
 80118c2:	4798      	blx	r3
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3710      	adds	r7, #16
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	20005d68 	.word	0x20005d68

080118d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118d8:	b590      	push	{r4, r7, lr}
 80118da:	b087      	sub	sp, #28
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60b9      	str	r1, [r7, #8]
 80118e0:	607a      	str	r2, [r7, #4]
 80118e2:	603b      	str	r3, [r7, #0]
 80118e4:	4603      	mov	r3, r0
 80118e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
 80118ea:	4a0a      	ldr	r2, [pc, #40]	; (8011914 <disk_read+0x3c>)
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	689c      	ldr	r4, [r3, #8]
 80118f4:	7bfb      	ldrb	r3, [r7, #15]
 80118f6:	4a07      	ldr	r2, [pc, #28]	; (8011914 <disk_read+0x3c>)
 80118f8:	4413      	add	r3, r2
 80118fa:	7a18      	ldrb	r0, [r3, #8]
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	47a0      	blx	r4
 8011904:	4603      	mov	r3, r0
 8011906:	75fb      	strb	r3, [r7, #23]
  return res;
 8011908:	7dfb      	ldrb	r3, [r7, #23]
}
 801190a:	4618      	mov	r0, r3
 801190c:	371c      	adds	r7, #28
 801190e:	46bd      	mov	sp, r7
 8011910:	bd90      	pop	{r4, r7, pc}
 8011912:	bf00      	nop
 8011914:	20005d68 	.word	0x20005d68

08011918 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011918:	b590      	push	{r4, r7, lr}
 801191a:	b087      	sub	sp, #28
 801191c:	af00      	add	r7, sp, #0
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
 8011922:	603b      	str	r3, [r7, #0]
 8011924:	4603      	mov	r3, r0
 8011926:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011928:	7bfb      	ldrb	r3, [r7, #15]
 801192a:	4a0a      	ldr	r2, [pc, #40]	; (8011954 <disk_write+0x3c>)
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	68dc      	ldr	r4, [r3, #12]
 8011934:	7bfb      	ldrb	r3, [r7, #15]
 8011936:	4a07      	ldr	r2, [pc, #28]	; (8011954 <disk_write+0x3c>)
 8011938:	4413      	add	r3, r2
 801193a:	7a18      	ldrb	r0, [r3, #8]
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	68b9      	ldr	r1, [r7, #8]
 8011942:	47a0      	blx	r4
 8011944:	4603      	mov	r3, r0
 8011946:	75fb      	strb	r3, [r7, #23]
  return res;
 8011948:	7dfb      	ldrb	r3, [r7, #23]
}
 801194a:	4618      	mov	r0, r3
 801194c:	371c      	adds	r7, #28
 801194e:	46bd      	mov	sp, r7
 8011950:	bd90      	pop	{r4, r7, pc}
 8011952:	bf00      	nop
 8011954:	20005d68 	.word	0x20005d68

08011958 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	603a      	str	r2, [r7, #0]
 8011962:	71fb      	strb	r3, [r7, #7]
 8011964:	460b      	mov	r3, r1
 8011966:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	4a09      	ldr	r2, [pc, #36]	; (8011990 <disk_ioctl+0x38>)
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	691b      	ldr	r3, [r3, #16]
 8011974:	79fa      	ldrb	r2, [r7, #7]
 8011976:	4906      	ldr	r1, [pc, #24]	; (8011990 <disk_ioctl+0x38>)
 8011978:	440a      	add	r2, r1
 801197a:	7a10      	ldrb	r0, [r2, #8]
 801197c:	79b9      	ldrb	r1, [r7, #6]
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	4798      	blx	r3
 8011982:	4603      	mov	r3, r0
 8011984:	73fb      	strb	r3, [r7, #15]
  return res;
 8011986:	7bfb      	ldrb	r3, [r7, #15]
}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	20005d68 	.word	0x20005d68

08011994 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	3301      	adds	r3, #1
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80119a4:	89fb      	ldrh	r3, [r7, #14]
 80119a6:	021b      	lsls	r3, r3, #8
 80119a8:	b21a      	sxth	r2, r3
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	b21b      	sxth	r3, r3
 80119b0:	4313      	orrs	r3, r2
 80119b2:	b21b      	sxth	r3, r3
 80119b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80119b6:	89fb      	ldrh	r3, [r7, #14]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3714      	adds	r7, #20
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80119c4:	b480      	push	{r7}
 80119c6:	b085      	sub	sp, #20
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	3303      	adds	r3, #3
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	021b      	lsls	r3, r3, #8
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	3202      	adds	r2, #2
 80119dc:	7812      	ldrb	r2, [r2, #0]
 80119de:	4313      	orrs	r3, r2
 80119e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	021b      	lsls	r3, r3, #8
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	3201      	adds	r2, #1
 80119ea:	7812      	ldrb	r2, [r2, #0]
 80119ec:	4313      	orrs	r3, r2
 80119ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	021b      	lsls	r3, r3, #8
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	7812      	ldrb	r2, [r2, #0]
 80119f8:	4313      	orrs	r3, r2
 80119fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80119fc:	68fb      	ldr	r3, [r7, #12]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b083      	sub	sp, #12
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	460b      	mov	r3, r1
 8011a14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	1c5a      	adds	r2, r3, #1
 8011a1a:	607a      	str	r2, [r7, #4]
 8011a1c:	887a      	ldrh	r2, [r7, #2]
 8011a1e:	b2d2      	uxtb	r2, r2
 8011a20:	701a      	strb	r2, [r3, #0]
 8011a22:	887b      	ldrh	r3, [r7, #2]
 8011a24:	0a1b      	lsrs	r3, r3, #8
 8011a26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	1c5a      	adds	r2, r3, #1
 8011a2c:	607a      	str	r2, [r7, #4]
 8011a2e:	887a      	ldrh	r2, [r7, #2]
 8011a30:	b2d2      	uxtb	r2, r2
 8011a32:	701a      	strb	r2, [r3, #0]
}
 8011a34:	bf00      	nop
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr

08011a40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	1c5a      	adds	r2, r3, #1
 8011a4e:	607a      	str	r2, [r7, #4]
 8011a50:	683a      	ldr	r2, [r7, #0]
 8011a52:	b2d2      	uxtb	r2, r2
 8011a54:	701a      	strb	r2, [r3, #0]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	0a1b      	lsrs	r3, r3, #8
 8011a5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	1c5a      	adds	r2, r3, #1
 8011a60:	607a      	str	r2, [r7, #4]
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	b2d2      	uxtb	r2, r2
 8011a66:	701a      	strb	r2, [r3, #0]
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	0a1b      	lsrs	r3, r3, #8
 8011a6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	1c5a      	adds	r2, r3, #1
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	683a      	ldr	r2, [r7, #0]
 8011a76:	b2d2      	uxtb	r2, r2
 8011a78:	701a      	strb	r2, [r3, #0]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	0a1b      	lsrs	r3, r3, #8
 8011a7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	1c5a      	adds	r2, r3, #1
 8011a84:	607a      	str	r2, [r7, #4]
 8011a86:	683a      	ldr	r2, [r7, #0]
 8011a88:	b2d2      	uxtb	r2, r2
 8011a8a:	701a      	strb	r2, [r3, #0]
}
 8011a8c:	bf00      	nop
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a98:	b480      	push	{r7}
 8011a9a:	b087      	sub	sp, #28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00d      	beq.n	8011ace <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011ab2:	693a      	ldr	r2, [r7, #16]
 8011ab4:	1c53      	adds	r3, r2, #1
 8011ab6:	613b      	str	r3, [r7, #16]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	1c59      	adds	r1, r3, #1
 8011abc:	6179      	str	r1, [r7, #20]
 8011abe:	7812      	ldrb	r2, [r2, #0]
 8011ac0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1f1      	bne.n	8011ab2 <mem_cpy+0x1a>
	}
}
 8011ace:	bf00      	nop
 8011ad0:	371c      	adds	r7, #28
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad8:	4770      	bx	lr

08011ada <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011ada:	b480      	push	{r7}
 8011adc:	b087      	sub	sp, #28
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	60f8      	str	r0, [r7, #12]
 8011ae2:	60b9      	str	r1, [r7, #8]
 8011ae4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	617a      	str	r2, [r7, #20]
 8011af0:	68ba      	ldr	r2, [r7, #8]
 8011af2:	b2d2      	uxtb	r2, r2
 8011af4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	3b01      	subs	r3, #1
 8011afa:	607b      	str	r3, [r7, #4]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1f3      	bne.n	8011aea <mem_set+0x10>
}
 8011b02:	bf00      	nop
 8011b04:	bf00      	nop
 8011b06:	371c      	adds	r7, #28
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011b10:	b480      	push	{r7}
 8011b12:	b089      	sub	sp, #36	; 0x24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	61fb      	str	r3, [r7, #28]
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011b24:	2300      	movs	r3, #0
 8011b26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	1c5a      	adds	r2, r3, #1
 8011b2c:	61fa      	str	r2, [r7, #28]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	4619      	mov	r1, r3
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	1c5a      	adds	r2, r3, #1
 8011b36:	61ba      	str	r2, [r7, #24]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	1acb      	subs	r3, r1, r3
 8011b3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	607b      	str	r3, [r7, #4]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d002      	beq.n	8011b50 <mem_cmp+0x40>
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d0eb      	beq.n	8011b28 <mem_cmp+0x18>

	return r;
 8011b50:	697b      	ldr	r3, [r7, #20]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3724      	adds	r7, #36	; 0x24
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr

08011b5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b5e:	b480      	push	{r7}
 8011b60:	b083      	sub	sp, #12
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b68:	e002      	b.n	8011b70 <chk_chr+0x12>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	607b      	str	r3, [r7, #4]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d005      	beq.n	8011b84 <chk_chr+0x26>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d1f2      	bne.n	8011b6a <chk_chr+0xc>
	return *str;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	781b      	ldrb	r3, [r3, #0]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	60bb      	str	r3, [r7, #8]
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e029      	b.n	8011bfc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011ba8:	4a27      	ldr	r2, [pc, #156]	; (8011c48 <chk_lock+0xb4>)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	011b      	lsls	r3, r3, #4
 8011bae:	4413      	add	r3, r2
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d01d      	beq.n	8011bf2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bb6:	4a24      	ldr	r2, [pc, #144]	; (8011c48 <chk_lock+0xb4>)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	011b      	lsls	r3, r3, #4
 8011bbc:	4413      	add	r3, r2
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d116      	bne.n	8011bf6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011bc8:	4a1f      	ldr	r2, [pc, #124]	; (8011c48 <chk_lock+0xb4>)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	011b      	lsls	r3, r3, #4
 8011bce:	4413      	add	r3, r2
 8011bd0:	3304      	adds	r3, #4
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d10c      	bne.n	8011bf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011bdc:	4a1a      	ldr	r2, [pc, #104]	; (8011c48 <chk_lock+0xb4>)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	011b      	lsls	r3, r3, #4
 8011be2:	4413      	add	r3, r2
 8011be4:	3308      	adds	r3, #8
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d102      	bne.n	8011bf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011bf0:	e007      	b.n	8011c02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	60fb      	str	r3, [r7, #12]
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d9d2      	bls.n	8011ba8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	d109      	bne.n	8011c1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d102      	bne.n	8011c14 <chk_lock+0x80>
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2b02      	cmp	r3, #2
 8011c12:	d101      	bne.n	8011c18 <chk_lock+0x84>
 8011c14:	2300      	movs	r3, #0
 8011c16:	e010      	b.n	8011c3a <chk_lock+0xa6>
 8011c18:	2312      	movs	r3, #18
 8011c1a:	e00e      	b.n	8011c3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d108      	bne.n	8011c34 <chk_lock+0xa0>
 8011c22:	4a09      	ldr	r2, [pc, #36]	; (8011c48 <chk_lock+0xb4>)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	4413      	add	r3, r2
 8011c2a:	330c      	adds	r3, #12
 8011c2c:	881b      	ldrh	r3, [r3, #0]
 8011c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c32:	d101      	bne.n	8011c38 <chk_lock+0xa4>
 8011c34:	2310      	movs	r3, #16
 8011c36:	e000      	b.n	8011c3a <chk_lock+0xa6>
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3714      	adds	r7, #20
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop
 8011c48:	20005d48 	.word	0x20005d48

08011c4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c52:	2300      	movs	r3, #0
 8011c54:	607b      	str	r3, [r7, #4]
 8011c56:	e002      	b.n	8011c5e <enq_lock+0x12>
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	607b      	str	r3, [r7, #4]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d806      	bhi.n	8011c72 <enq_lock+0x26>
 8011c64:	4a09      	ldr	r2, [pc, #36]	; (8011c8c <enq_lock+0x40>)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	011b      	lsls	r3, r3, #4
 8011c6a:	4413      	add	r3, r2
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d1f2      	bne.n	8011c58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b02      	cmp	r3, #2
 8011c76:	bf14      	ite	ne
 8011c78:	2301      	movne	r3, #1
 8011c7a:	2300      	moveq	r3, #0
 8011c7c:	b2db      	uxtb	r3, r3
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	370c      	adds	r7, #12
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	20005d48 	.word	0x20005d48

08011c90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	e01f      	b.n	8011ce0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011ca0:	4a41      	ldr	r2, [pc, #260]	; (8011da8 <inc_lock+0x118>)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	011b      	lsls	r3, r3, #4
 8011ca6:	4413      	add	r3, r2
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d113      	bne.n	8011cda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011cb2:	4a3d      	ldr	r2, [pc, #244]	; (8011da8 <inc_lock+0x118>)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	4413      	add	r3, r2
 8011cba:	3304      	adds	r3, #4
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d109      	bne.n	8011cda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011cc6:	4a38      	ldr	r2, [pc, #224]	; (8011da8 <inc_lock+0x118>)
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	011b      	lsls	r3, r3, #4
 8011ccc:	4413      	add	r3, r2
 8011cce:	3308      	adds	r3, #8
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d006      	beq.n	8011ce8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d9dc      	bls.n	8011ca0 <inc_lock+0x10>
 8011ce6:	e000      	b.n	8011cea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011ce8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	d132      	bne.n	8011d56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	60fb      	str	r3, [r7, #12]
 8011cf4:	e002      	b.n	8011cfc <inc_lock+0x6c>
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	60fb      	str	r3, [r7, #12]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d806      	bhi.n	8011d10 <inc_lock+0x80>
 8011d02:	4a29      	ldr	r2, [pc, #164]	; (8011da8 <inc_lock+0x118>)
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	011b      	lsls	r3, r3, #4
 8011d08:	4413      	add	r3, r2
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1f2      	bne.n	8011cf6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d101      	bne.n	8011d1a <inc_lock+0x8a>
 8011d16:	2300      	movs	r3, #0
 8011d18:	e040      	b.n	8011d9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	4922      	ldr	r1, [pc, #136]	; (8011da8 <inc_lock+0x118>)
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	011b      	lsls	r3, r3, #4
 8011d24:	440b      	add	r3, r1
 8011d26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	689a      	ldr	r2, [r3, #8]
 8011d2c:	491e      	ldr	r1, [pc, #120]	; (8011da8 <inc_lock+0x118>)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	011b      	lsls	r3, r3, #4
 8011d32:	440b      	add	r3, r1
 8011d34:	3304      	adds	r3, #4
 8011d36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	695a      	ldr	r2, [r3, #20]
 8011d3c:	491a      	ldr	r1, [pc, #104]	; (8011da8 <inc_lock+0x118>)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	011b      	lsls	r3, r3, #4
 8011d42:	440b      	add	r3, r1
 8011d44:	3308      	adds	r3, #8
 8011d46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d48:	4a17      	ldr	r2, [pc, #92]	; (8011da8 <inc_lock+0x118>)
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	011b      	lsls	r3, r3, #4
 8011d4e:	4413      	add	r3, r2
 8011d50:	330c      	adds	r3, #12
 8011d52:	2200      	movs	r2, #0
 8011d54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d009      	beq.n	8011d70 <inc_lock+0xe0>
 8011d5c:	4a12      	ldr	r2, [pc, #72]	; (8011da8 <inc_lock+0x118>)
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	011b      	lsls	r3, r3, #4
 8011d62:	4413      	add	r3, r2
 8011d64:	330c      	adds	r3, #12
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d001      	beq.n	8011d70 <inc_lock+0xe0>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	e015      	b.n	8011d9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d108      	bne.n	8011d88 <inc_lock+0xf8>
 8011d76:	4a0c      	ldr	r2, [pc, #48]	; (8011da8 <inc_lock+0x118>)
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	011b      	lsls	r3, r3, #4
 8011d7c:	4413      	add	r3, r2
 8011d7e:	330c      	adds	r3, #12
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	3301      	adds	r3, #1
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	e001      	b.n	8011d8c <inc_lock+0xfc>
 8011d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d8c:	4906      	ldr	r1, [pc, #24]	; (8011da8 <inc_lock+0x118>)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	440b      	add	r3, r1
 8011d94:	330c      	adds	r3, #12
 8011d96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	3301      	adds	r3, #1
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3714      	adds	r7, #20
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr
 8011da8:	20005d48 	.word	0x20005d48

08011dac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	607b      	str	r3, [r7, #4]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d825      	bhi.n	8011e0c <dec_lock+0x60>
		n = Files[i].ctr;
 8011dc0:	4a17      	ldr	r2, [pc, #92]	; (8011e20 <dec_lock+0x74>)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	011b      	lsls	r3, r3, #4
 8011dc6:	4413      	add	r3, r2
 8011dc8:	330c      	adds	r3, #12
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011dce:	89fb      	ldrh	r3, [r7, #14]
 8011dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dd4:	d101      	bne.n	8011dda <dec_lock+0x2e>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011dda:	89fb      	ldrh	r3, [r7, #14]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d002      	beq.n	8011de6 <dec_lock+0x3a>
 8011de0:	89fb      	ldrh	r3, [r7, #14]
 8011de2:	3b01      	subs	r3, #1
 8011de4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011de6:	4a0e      	ldr	r2, [pc, #56]	; (8011e20 <dec_lock+0x74>)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	011b      	lsls	r3, r3, #4
 8011dec:	4413      	add	r3, r2
 8011dee:	330c      	adds	r3, #12
 8011df0:	89fa      	ldrh	r2, [r7, #14]
 8011df2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011df4:	89fb      	ldrh	r3, [r7, #14]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d105      	bne.n	8011e06 <dec_lock+0x5a>
 8011dfa:	4a09      	ldr	r2, [pc, #36]	; (8011e20 <dec_lock+0x74>)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	011b      	lsls	r3, r3, #4
 8011e00:	4413      	add	r3, r2
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	737b      	strb	r3, [r7, #13]
 8011e0a:	e001      	b.n	8011e10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e0c:	2302      	movs	r3, #2
 8011e0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e10:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	20005d48 	.word	0x20005d48

08011e24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	e010      	b.n	8011e54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e32:	4a0d      	ldr	r2, [pc, #52]	; (8011e68 <clear_lock+0x44>)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	011b      	lsls	r3, r3, #4
 8011e38:	4413      	add	r3, r2
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d105      	bne.n	8011e4e <clear_lock+0x2a>
 8011e42:	4a09      	ldr	r2, [pc, #36]	; (8011e68 <clear_lock+0x44>)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	4413      	add	r3, r2
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	3301      	adds	r3, #1
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d9eb      	bls.n	8011e32 <clear_lock+0xe>
	}
}
 8011e5a:	bf00      	nop
 8011e5c:	bf00      	nop
 8011e5e:	3714      	adds	r7, #20
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr
 8011e68:	20005d48 	.word	0x20005d48

08011e6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b086      	sub	sp, #24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	78db      	ldrb	r3, [r3, #3]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d034      	beq.n	8011eea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	7858      	ldrb	r0, [r3, #1]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011e90:	2301      	movs	r3, #1
 8011e92:	697a      	ldr	r2, [r7, #20]
 8011e94:	f7ff fd40 	bl	8011918 <disk_write>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d002      	beq.n	8011ea4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	73fb      	strb	r3, [r7, #15]
 8011ea2:	e022      	b.n	8011eea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eae:	697a      	ldr	r2, [r7, #20]
 8011eb0:	1ad2      	subs	r2, r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	69db      	ldr	r3, [r3, #28]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d217      	bcs.n	8011eea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	789b      	ldrb	r3, [r3, #2]
 8011ebe:	613b      	str	r3, [r7, #16]
 8011ec0:	e010      	b.n	8011ee4 <sync_window+0x78>
					wsect += fs->fsize;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	69db      	ldr	r3, [r3, #28]
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	4413      	add	r3, r2
 8011eca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	7858      	ldrb	r0, [r3, #1]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	697a      	ldr	r2, [r7, #20]
 8011eda:	f7ff fd1d 	bl	8011918 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	613b      	str	r3, [r7, #16]
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d8eb      	bhi.n	8011ec2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3718      	adds	r7, #24
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011efe:	2300      	movs	r3, #0
 8011f00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f06:	683a      	ldr	r2, [r7, #0]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d01b      	beq.n	8011f44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff ffad 	bl	8011e6c <sync_window>
 8011f12:	4603      	mov	r3, r0
 8011f14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d113      	bne.n	8011f44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7858      	ldrb	r0, [r3, #1]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f26:	2301      	movs	r3, #1
 8011f28:	683a      	ldr	r2, [r7, #0]
 8011f2a:	f7ff fcd5 	bl	80118d8 <disk_read>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d004      	beq.n	8011f3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f34:	f04f 33ff 	mov.w	r3, #4294967295
 8011f38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7ff ff87 	bl	8011e6c <sync_window>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d159      	bne.n	801201c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	2b03      	cmp	r3, #3
 8011f6e:	d149      	bne.n	8012004 <sync_fs+0xb4>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	791b      	ldrb	r3, [r3, #4]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d145      	bne.n	8012004 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	899b      	ldrh	r3, [r3, #12]
 8011f82:	461a      	mov	r2, r3
 8011f84:	2100      	movs	r1, #0
 8011f86:	f7ff fda8 	bl	8011ada <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	3334      	adds	r3, #52	; 0x34
 8011f8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011f92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7ff fd37 	bl	8011a0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	3334      	adds	r3, #52	; 0x34
 8011fa0:	4921      	ldr	r1, [pc, #132]	; (8012028 <sync_fs+0xd8>)
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7ff fd4c 	bl	8011a40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3334      	adds	r3, #52	; 0x34
 8011fac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011fb0:	491e      	ldr	r1, [pc, #120]	; (801202c <sync_fs+0xdc>)
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fd44 	bl	8011a40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	3334      	adds	r3, #52	; 0x34
 8011fbc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	695b      	ldr	r3, [r3, #20]
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	4610      	mov	r0, r2
 8011fc8:	f7ff fd3a 	bl	8011a40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	3334      	adds	r3, #52	; 0x34
 8011fd0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	691b      	ldr	r3, [r3, #16]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f7ff fd30 	bl	8011a40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6a1b      	ldr	r3, [r3, #32]
 8011fe4:	1c5a      	adds	r2, r3, #1
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	7858      	ldrb	r0, [r3, #1]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	f7ff fc8d 	bl	8011918 <disk_write>
			fs->fsi_flag = 0;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	785b      	ldrb	r3, [r3, #1]
 8012008:	2200      	movs	r2, #0
 801200a:	2100      	movs	r1, #0
 801200c:	4618      	mov	r0, r3
 801200e:	f7ff fca3 	bl	8011958 <disk_ioctl>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d001      	beq.n	801201c <sync_fs+0xcc>
 8012018:	2301      	movs	r3, #1
 801201a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801201c:	7bfb      	ldrb	r3, [r7, #15]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	41615252 	.word	0x41615252
 801202c:	61417272 	.word	0x61417272

08012030 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	3b02      	subs	r3, #2
 801203e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	3b02      	subs	r3, #2
 8012046:	683a      	ldr	r2, [r7, #0]
 8012048:	429a      	cmp	r2, r3
 801204a:	d301      	bcc.n	8012050 <clust2sect+0x20>
 801204c:	2300      	movs	r3, #0
 801204e:	e008      	b.n	8012062 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	895b      	ldrh	r3, [r3, #10]
 8012054:	461a      	mov	r2, r3
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	fb03 f202 	mul.w	r2, r3, r2
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012060:	4413      	add	r3, r2
}
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr

0801206e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801206e:	b580      	push	{r7, lr}
 8012070:	b086      	sub	sp, #24
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d904      	bls.n	801208e <get_fat+0x20>
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	699b      	ldr	r3, [r3, #24]
 8012088:	683a      	ldr	r2, [r7, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	d302      	bcc.n	8012094 <get_fat+0x26>
		val = 1;	/* Internal error */
 801208e:	2301      	movs	r3, #1
 8012090:	617b      	str	r3, [r7, #20]
 8012092:	e0bb      	b.n	801220c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012094:	f04f 33ff 	mov.w	r3, #4294967295
 8012098:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b03      	cmp	r3, #3
 80120a0:	f000 8083 	beq.w	80121aa <get_fat+0x13c>
 80120a4:	2b03      	cmp	r3, #3
 80120a6:	f300 80a7 	bgt.w	80121f8 <get_fat+0x18a>
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d002      	beq.n	80120b4 <get_fat+0x46>
 80120ae:	2b02      	cmp	r3, #2
 80120b0:	d056      	beq.n	8012160 <get_fat+0xf2>
 80120b2:	e0a1      	b.n	80121f8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	60fb      	str	r3, [r7, #12]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	085b      	lsrs	r3, r3, #1
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	4413      	add	r3, r2
 80120c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	899b      	ldrh	r3, [r3, #12]
 80120ca:	4619      	mov	r1, r3
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80120d2:	4413      	add	r3, r2
 80120d4:	4619      	mov	r1, r3
 80120d6:	6938      	ldr	r0, [r7, #16]
 80120d8:	f7ff ff0c 	bl	8011ef4 <move_window>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f040 808d 	bne.w	80121fe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	1c5a      	adds	r2, r3, #1
 80120e8:	60fa      	str	r2, [r7, #12]
 80120ea:	693a      	ldr	r2, [r7, #16]
 80120ec:	8992      	ldrh	r2, [r2, #12]
 80120ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80120f2:	fb01 f202 	mul.w	r2, r1, r2
 80120f6:	1a9b      	subs	r3, r3, r2
 80120f8:	693a      	ldr	r2, [r7, #16]
 80120fa:	4413      	add	r3, r2
 80120fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012100:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	899b      	ldrh	r3, [r3, #12]
 801210a:	4619      	mov	r1, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012112:	4413      	add	r3, r2
 8012114:	4619      	mov	r1, r3
 8012116:	6938      	ldr	r0, [r7, #16]
 8012118:	f7ff feec 	bl	8011ef4 <move_window>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d16f      	bne.n	8012202 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	899b      	ldrh	r3, [r3, #12]
 8012126:	461a      	mov	r2, r3
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	fbb3 f1f2 	udiv	r1, r3, r2
 801212e:	fb01 f202 	mul.w	r2, r1, r2
 8012132:	1a9b      	subs	r3, r3, r2
 8012134:	693a      	ldr	r2, [r7, #16]
 8012136:	4413      	add	r3, r2
 8012138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801213c:	021b      	lsls	r3, r3, #8
 801213e:	461a      	mov	r2, r3
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	4313      	orrs	r3, r2
 8012144:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	f003 0301 	and.w	r3, r3, #1
 801214c:	2b00      	cmp	r3, #0
 801214e:	d002      	beq.n	8012156 <get_fat+0xe8>
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	091b      	lsrs	r3, r3, #4
 8012154:	e002      	b.n	801215c <get_fat+0xee>
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801215c:	617b      	str	r3, [r7, #20]
			break;
 801215e:	e055      	b.n	801220c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	899b      	ldrh	r3, [r3, #12]
 8012168:	085b      	lsrs	r3, r3, #1
 801216a:	b29b      	uxth	r3, r3
 801216c:	4619      	mov	r1, r3
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	fbb3 f3f1 	udiv	r3, r3, r1
 8012174:	4413      	add	r3, r2
 8012176:	4619      	mov	r1, r3
 8012178:	6938      	ldr	r0, [r7, #16]
 801217a:	f7ff febb 	bl	8011ef4 <move_window>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d140      	bne.n	8012206 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	005b      	lsls	r3, r3, #1
 801218e:	693a      	ldr	r2, [r7, #16]
 8012190:	8992      	ldrh	r2, [r2, #12]
 8012192:	fbb3 f0f2 	udiv	r0, r3, r2
 8012196:	fb00 f202 	mul.w	r2, r0, r2
 801219a:	1a9b      	subs	r3, r3, r2
 801219c:	440b      	add	r3, r1
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff fbf8 	bl	8011994 <ld_word>
 80121a4:	4603      	mov	r3, r0
 80121a6:	617b      	str	r3, [r7, #20]
			break;
 80121a8:	e030      	b.n	801220c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	899b      	ldrh	r3, [r3, #12]
 80121b2:	089b      	lsrs	r3, r3, #2
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	4619      	mov	r1, r3
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80121be:	4413      	add	r3, r2
 80121c0:	4619      	mov	r1, r3
 80121c2:	6938      	ldr	r0, [r7, #16]
 80121c4:	f7ff fe96 	bl	8011ef4 <move_window>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d11d      	bne.n	801220a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	693a      	ldr	r2, [r7, #16]
 80121da:	8992      	ldrh	r2, [r2, #12]
 80121dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80121e0:	fb00 f202 	mul.w	r2, r0, r2
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	440b      	add	r3, r1
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff fbeb 	bl	80119c4 <ld_dword>
 80121ee:	4603      	mov	r3, r0
 80121f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80121f4:	617b      	str	r3, [r7, #20]
			break;
 80121f6:	e009      	b.n	801220c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80121f8:	2301      	movs	r3, #1
 80121fa:	617b      	str	r3, [r7, #20]
 80121fc:	e006      	b.n	801220c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121fe:	bf00      	nop
 8012200:	e004      	b.n	801220c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012202:	bf00      	nop
 8012204:	e002      	b.n	801220c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012206:	bf00      	nop
 8012208:	e000      	b.n	801220c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801220a:	bf00      	nop
		}
	}

	return val;
 801220c:	697b      	ldr	r3, [r7, #20]
}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012216:	b590      	push	{r4, r7, lr}
 8012218:	b089      	sub	sp, #36	; 0x24
 801221a:	af00      	add	r7, sp, #0
 801221c:	60f8      	str	r0, [r7, #12]
 801221e:	60b9      	str	r1, [r7, #8]
 8012220:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012222:	2302      	movs	r3, #2
 8012224:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	2b01      	cmp	r3, #1
 801222a:	f240 8102 	bls.w	8012432 <put_fat+0x21c>
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	699b      	ldr	r3, [r3, #24]
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	429a      	cmp	r2, r3
 8012236:	f080 80fc 	bcs.w	8012432 <put_fat+0x21c>
		switch (fs->fs_type) {
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2b03      	cmp	r3, #3
 8012240:	f000 80b6 	beq.w	80123b0 <put_fat+0x19a>
 8012244:	2b03      	cmp	r3, #3
 8012246:	f300 80fd 	bgt.w	8012444 <put_fat+0x22e>
 801224a:	2b01      	cmp	r3, #1
 801224c:	d003      	beq.n	8012256 <put_fat+0x40>
 801224e:	2b02      	cmp	r3, #2
 8012250:	f000 8083 	beq.w	801235a <put_fat+0x144>
 8012254:	e0f6      	b.n	8012444 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	61bb      	str	r3, [r7, #24]
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	085b      	lsrs	r3, r3, #1
 801225e:	69ba      	ldr	r2, [r7, #24]
 8012260:	4413      	add	r3, r2
 8012262:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	899b      	ldrh	r3, [r3, #12]
 801226c:	4619      	mov	r1, r3
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	fbb3 f3f1 	udiv	r3, r3, r1
 8012274:	4413      	add	r3, r2
 8012276:	4619      	mov	r1, r3
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	f7ff fe3b 	bl	8011ef4 <move_window>
 801227e:	4603      	mov	r3, r0
 8012280:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012282:	7ffb      	ldrb	r3, [r7, #31]
 8012284:	2b00      	cmp	r3, #0
 8012286:	f040 80d6 	bne.w	8012436 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	1c5a      	adds	r2, r3, #1
 8012294:	61ba      	str	r2, [r7, #24]
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	8992      	ldrh	r2, [r2, #12]
 801229a:	fbb3 f0f2 	udiv	r0, r3, r2
 801229e:	fb00 f202 	mul.w	r2, r0, r2
 80122a2:	1a9b      	subs	r3, r3, r2
 80122a4:	440b      	add	r3, r1
 80122a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d00d      	beq.n	80122ce <put_fat+0xb8>
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	b25b      	sxtb	r3, r3
 80122b8:	f003 030f 	and.w	r3, r3, #15
 80122bc:	b25a      	sxtb	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	011b      	lsls	r3, r3, #4
 80122c4:	b25b      	sxtb	r3, r3
 80122c6:	4313      	orrs	r3, r2
 80122c8:	b25b      	sxtb	r3, r3
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	e001      	b.n	80122d2 <put_fat+0xbc>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	697a      	ldr	r2, [r7, #20]
 80122d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2201      	movs	r2, #1
 80122da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	899b      	ldrh	r3, [r3, #12]
 80122e4:	4619      	mov	r1, r3
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80122ec:	4413      	add	r3, r2
 80122ee:	4619      	mov	r1, r3
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	f7ff fdff 	bl	8011ef4 <move_window>
 80122f6:	4603      	mov	r3, r0
 80122f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122fa:	7ffb      	ldrb	r3, [r7, #31]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f040 809c 	bne.w	801243a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	899b      	ldrh	r3, [r3, #12]
 801230c:	461a      	mov	r2, r3
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	fbb3 f0f2 	udiv	r0, r3, r2
 8012314:	fb00 f202 	mul.w	r2, r0, r2
 8012318:	1a9b      	subs	r3, r3, r2
 801231a:	440b      	add	r3, r1
 801231c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	f003 0301 	and.w	r3, r3, #1
 8012324:	2b00      	cmp	r3, #0
 8012326:	d003      	beq.n	8012330 <put_fat+0x11a>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	091b      	lsrs	r3, r3, #4
 801232c:	b2db      	uxtb	r3, r3
 801232e:	e00e      	b.n	801234e <put_fat+0x138>
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	b25b      	sxtb	r3, r3
 8012336:	f023 030f 	bic.w	r3, r3, #15
 801233a:	b25a      	sxtb	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	0a1b      	lsrs	r3, r3, #8
 8012340:	b25b      	sxtb	r3, r3
 8012342:	f003 030f 	and.w	r3, r3, #15
 8012346:	b25b      	sxtb	r3, r3
 8012348:	4313      	orrs	r3, r2
 801234a:	b25b      	sxtb	r3, r3
 801234c:	b2db      	uxtb	r3, r3
 801234e:	697a      	ldr	r2, [r7, #20]
 8012350:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2201      	movs	r2, #1
 8012356:	70da      	strb	r2, [r3, #3]
			break;
 8012358:	e074      	b.n	8012444 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	899b      	ldrh	r3, [r3, #12]
 8012362:	085b      	lsrs	r3, r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	4619      	mov	r1, r3
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	fbb3 f3f1 	udiv	r3, r3, r1
 801236e:	4413      	add	r3, r2
 8012370:	4619      	mov	r1, r3
 8012372:	68f8      	ldr	r0, [r7, #12]
 8012374:	f7ff fdbe 	bl	8011ef4 <move_window>
 8012378:	4603      	mov	r3, r0
 801237a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801237c:	7ffb      	ldrb	r3, [r7, #31]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d15d      	bne.n	801243e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	8992      	ldrh	r2, [r2, #12]
 8012390:	fbb3 f0f2 	udiv	r0, r3, r2
 8012394:	fb00 f202 	mul.w	r2, r0, r2
 8012398:	1a9b      	subs	r3, r3, r2
 801239a:	440b      	add	r3, r1
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	b292      	uxth	r2, r2
 80123a0:	4611      	mov	r1, r2
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ff fb31 	bl	8011a0a <st_word>
			fs->wflag = 1;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2201      	movs	r2, #1
 80123ac:	70da      	strb	r2, [r3, #3]
			break;
 80123ae:	e049      	b.n	8012444 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	899b      	ldrh	r3, [r3, #12]
 80123b8:	089b      	lsrs	r3, r3, #2
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	4619      	mov	r1, r3
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c4:	4413      	add	r3, r2
 80123c6:	4619      	mov	r1, r3
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f7ff fd93 	bl	8011ef4 <move_window>
 80123ce:	4603      	mov	r3, r0
 80123d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80123d2:	7ffb      	ldrb	r3, [r7, #31]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d134      	bne.n	8012442 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	8992      	ldrh	r2, [r2, #12]
 80123ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80123f0:	fb00 f202 	mul.w	r2, r0, r2
 80123f4:	1a9b      	subs	r3, r3, r2
 80123f6:	440b      	add	r3, r1
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7ff fae3 	bl	80119c4 <ld_dword>
 80123fe:	4603      	mov	r3, r0
 8012400:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012404:	4323      	orrs	r3, r4
 8012406:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	8992      	ldrh	r2, [r2, #12]
 8012416:	fbb3 f0f2 	udiv	r0, r3, r2
 801241a:	fb00 f202 	mul.w	r2, r0, r2
 801241e:	1a9b      	subs	r3, r3, r2
 8012420:	440b      	add	r3, r1
 8012422:	6879      	ldr	r1, [r7, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	f7ff fb0b 	bl	8011a40 <st_dword>
			fs->wflag = 1;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2201      	movs	r2, #1
 801242e:	70da      	strb	r2, [r3, #3]
			break;
 8012430:	e008      	b.n	8012444 <put_fat+0x22e>
		}
	}
 8012432:	bf00      	nop
 8012434:	e006      	b.n	8012444 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012436:	bf00      	nop
 8012438:	e004      	b.n	8012444 <put_fat+0x22e>
			if (res != FR_OK) break;
 801243a:	bf00      	nop
 801243c:	e002      	b.n	8012444 <put_fat+0x22e>
			if (res != FR_OK) break;
 801243e:	bf00      	nop
 8012440:	e000      	b.n	8012444 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012442:	bf00      	nop
	return res;
 8012444:	7ffb      	ldrb	r3, [r7, #31]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3724      	adds	r7, #36	; 0x24
 801244a:	46bd      	mov	sp, r7
 801244c:	bd90      	pop	{r4, r7, pc}

0801244e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b088      	sub	sp, #32
 8012452:	af00      	add	r7, sp, #0
 8012454:	60f8      	str	r0, [r7, #12]
 8012456:	60b9      	str	r1, [r7, #8]
 8012458:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801245a:	2300      	movs	r3, #0
 801245c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d904      	bls.n	8012474 <remove_chain+0x26>
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	699b      	ldr	r3, [r3, #24]
 801246e:	68ba      	ldr	r2, [r7, #8]
 8012470:	429a      	cmp	r2, r3
 8012472:	d301      	bcc.n	8012478 <remove_chain+0x2a>
 8012474:	2302      	movs	r3, #2
 8012476:	e04b      	b.n	8012510 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00c      	beq.n	8012498 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801247e:	f04f 32ff 	mov.w	r2, #4294967295
 8012482:	6879      	ldr	r1, [r7, #4]
 8012484:	69b8      	ldr	r0, [r7, #24]
 8012486:	f7ff fec6 	bl	8012216 <put_fat>
 801248a:	4603      	mov	r3, r0
 801248c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801248e:	7ffb      	ldrb	r3, [r7, #31]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d001      	beq.n	8012498 <remove_chain+0x4a>
 8012494:	7ffb      	ldrb	r3, [r7, #31]
 8012496:	e03b      	b.n	8012510 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f7ff fde7 	bl	801206e <get_fat>
 80124a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d031      	beq.n	801250c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d101      	bne.n	80124b2 <remove_chain+0x64>
 80124ae:	2302      	movs	r3, #2
 80124b0:	e02e      	b.n	8012510 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b8:	d101      	bne.n	80124be <remove_chain+0x70>
 80124ba:	2301      	movs	r3, #1
 80124bc:	e028      	b.n	8012510 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80124be:	2200      	movs	r2, #0
 80124c0:	68b9      	ldr	r1, [r7, #8]
 80124c2:	69b8      	ldr	r0, [r7, #24]
 80124c4:	f7ff fea7 	bl	8012216 <put_fat>
 80124c8:	4603      	mov	r3, r0
 80124ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80124cc:	7ffb      	ldrb	r3, [r7, #31]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <remove_chain+0x88>
 80124d2:	7ffb      	ldrb	r3, [r7, #31]
 80124d4:	e01c      	b.n	8012510 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80124d6:	69bb      	ldr	r3, [r7, #24]
 80124d8:	695a      	ldr	r2, [r3, #20]
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	699b      	ldr	r3, [r3, #24]
 80124de:	3b02      	subs	r3, #2
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d20b      	bcs.n	80124fc <remove_chain+0xae>
			fs->free_clst++;
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	1c5a      	adds	r2, r3, #1
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	791b      	ldrb	r3, [r3, #4]
 80124f2:	f043 0301 	orr.w	r3, r3, #1
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	699b      	ldr	r3, [r3, #24]
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	429a      	cmp	r2, r3
 8012508:	d3c6      	bcc.n	8012498 <remove_chain+0x4a>
 801250a:	e000      	b.n	801250e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801250c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801250e:	2300      	movs	r3, #0
}
 8012510:	4618      	mov	r0, r3
 8012512:	3720      	adds	r7, #32
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b088      	sub	sp, #32
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d10d      	bne.n	801254a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	691b      	ldr	r3, [r3, #16]
 8012532:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d004      	beq.n	8012544 <create_chain+0x2c>
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	699b      	ldr	r3, [r3, #24]
 801253e:	69ba      	ldr	r2, [r7, #24]
 8012540:	429a      	cmp	r2, r3
 8012542:	d31b      	bcc.n	801257c <create_chain+0x64>
 8012544:	2301      	movs	r3, #1
 8012546:	61bb      	str	r3, [r7, #24]
 8012548:	e018      	b.n	801257c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff fd8e 	bl	801206e <get_fat>
 8012552:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b01      	cmp	r3, #1
 8012558:	d801      	bhi.n	801255e <create_chain+0x46>
 801255a:	2301      	movs	r3, #1
 801255c:	e070      	b.n	8012640 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012564:	d101      	bne.n	801256a <create_chain+0x52>
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	e06a      	b.n	8012640 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	429a      	cmp	r2, r3
 8012572:	d201      	bcs.n	8012578 <create_chain+0x60>
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	e063      	b.n	8012640 <create_chain+0x128>
		scl = clst;
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	3301      	adds	r3, #1
 8012584:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	69fa      	ldr	r2, [r7, #28]
 801258c:	429a      	cmp	r2, r3
 801258e:	d307      	bcc.n	80125a0 <create_chain+0x88>
				ncl = 2;
 8012590:	2302      	movs	r3, #2
 8012592:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012594:	69fa      	ldr	r2, [r7, #28]
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	429a      	cmp	r2, r3
 801259a:	d901      	bls.n	80125a0 <create_chain+0x88>
 801259c:	2300      	movs	r3, #0
 801259e:	e04f      	b.n	8012640 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80125a0:	69f9      	ldr	r1, [r7, #28]
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff fd63 	bl	801206e <get_fat>
 80125a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00e      	beq.n	80125ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	d003      	beq.n	80125be <create_chain+0xa6>
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125bc:	d101      	bne.n	80125c2 <create_chain+0xaa>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	e03e      	b.n	8012640 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80125c2:	69fa      	ldr	r2, [r7, #28]
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d1da      	bne.n	8012580 <create_chain+0x68>
 80125ca:	2300      	movs	r3, #0
 80125cc:	e038      	b.n	8012640 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80125ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80125d0:	f04f 32ff 	mov.w	r2, #4294967295
 80125d4:	69f9      	ldr	r1, [r7, #28]
 80125d6:	6938      	ldr	r0, [r7, #16]
 80125d8:	f7ff fe1d 	bl	8012216 <put_fat>
 80125dc:	4603      	mov	r3, r0
 80125de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d109      	bne.n	80125fa <create_chain+0xe2>
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d006      	beq.n	80125fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80125ec:	69fa      	ldr	r2, [r7, #28]
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	6938      	ldr	r0, [r7, #16]
 80125f2:	f7ff fe10 	bl	8012216 <put_fat>
 80125f6:	4603      	mov	r3, r0
 80125f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d116      	bne.n	801262e <create_chain+0x116>
		fs->last_clst = ncl;
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	69fa      	ldr	r2, [r7, #28]
 8012604:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	695a      	ldr	r2, [r3, #20]
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	3b02      	subs	r3, #2
 8012610:	429a      	cmp	r2, r3
 8012612:	d804      	bhi.n	801261e <create_chain+0x106>
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	1e5a      	subs	r2, r3, #1
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	791b      	ldrb	r3, [r3, #4]
 8012622:	f043 0301 	orr.w	r3, r3, #1
 8012626:	b2da      	uxtb	r2, r3
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	711a      	strb	r2, [r3, #4]
 801262c:	e007      	b.n	801263e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d102      	bne.n	801263a <create_chain+0x122>
 8012634:	f04f 33ff 	mov.w	r3, #4294967295
 8012638:	e000      	b.n	801263c <create_chain+0x124>
 801263a:	2301      	movs	r3, #1
 801263c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801263e:	69fb      	ldr	r3, [r7, #28]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3720      	adds	r7, #32
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012648:	b480      	push	{r7}
 801264a:	b087      	sub	sp, #28
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265c:	3304      	adds	r3, #4
 801265e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	899b      	ldrh	r3, [r3, #12]
 8012664:	461a      	mov	r2, r3
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	fbb3 f3f2 	udiv	r3, r3, r2
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	8952      	ldrh	r2, [r2, #10]
 8012670:	fbb3 f3f2 	udiv	r3, r3, r2
 8012674:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	1d1a      	adds	r2, r3, #4
 801267a:	613a      	str	r2, [r7, #16]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d101      	bne.n	801268a <clmt_clust+0x42>
 8012686:	2300      	movs	r3, #0
 8012688:	e010      	b.n	80126ac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	429a      	cmp	r2, r3
 8012690:	d307      	bcc.n	80126a2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012692:	697a      	ldr	r2, [r7, #20]
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	617b      	str	r3, [r7, #20]
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	3304      	adds	r3, #4
 801269e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126a0:	e7e9      	b.n	8012676 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80126a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	4413      	add	r3, r2
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	371c      	adds	r7, #28
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b086      	sub	sp, #24
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80126ce:	d204      	bcs.n	80126da <dir_sdi+0x22>
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	f003 031f 	and.w	r3, r3, #31
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <dir_sdi+0x26>
		return FR_INT_ERR;
 80126da:	2302      	movs	r3, #2
 80126dc:	e071      	b.n	80127c2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d106      	bne.n	80126fe <dir_sdi+0x46>
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	2b02      	cmp	r3, #2
 80126f6:	d902      	bls.n	80126fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10c      	bne.n	801271e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	095b      	lsrs	r3, r3, #5
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	8912      	ldrh	r2, [r2, #8]
 801270c:	4293      	cmp	r3, r2
 801270e:	d301      	bcc.n	8012714 <dir_sdi+0x5c>
 8012710:	2302      	movs	r3, #2
 8012712:	e056      	b.n	80127c2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	61da      	str	r2, [r3, #28]
 801271c:	e02d      	b.n	801277a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	895b      	ldrh	r3, [r3, #10]
 8012722:	461a      	mov	r2, r3
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	899b      	ldrh	r3, [r3, #12]
 8012728:	fb02 f303 	mul.w	r3, r2, r3
 801272c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801272e:	e019      	b.n	8012764 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6979      	ldr	r1, [r7, #20]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff fc9a 	bl	801206e <get_fat>
 801273a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012742:	d101      	bne.n	8012748 <dir_sdi+0x90>
 8012744:	2301      	movs	r3, #1
 8012746:	e03c      	b.n	80127c2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d904      	bls.n	8012758 <dir_sdi+0xa0>
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	699b      	ldr	r3, [r3, #24]
 8012752:	697a      	ldr	r2, [r7, #20]
 8012754:	429a      	cmp	r2, r3
 8012756:	d301      	bcc.n	801275c <dir_sdi+0xa4>
 8012758:	2302      	movs	r3, #2
 801275a:	e032      	b.n	80127c2 <dir_sdi+0x10a>
			ofs -= csz;
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	1ad3      	subs	r3, r2, r3
 8012762:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012764:	683a      	ldr	r2, [r7, #0]
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	429a      	cmp	r2, r3
 801276a:	d2e1      	bcs.n	8012730 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801276c:	6979      	ldr	r1, [r7, #20]
 801276e:	6938      	ldr	r0, [r7, #16]
 8012770:	f7ff fc5e 	bl	8012030 <clust2sect>
 8012774:	4602      	mov	r2, r0
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	697a      	ldr	r2, [r7, #20]
 801277e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	69db      	ldr	r3, [r3, #28]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d101      	bne.n	801278c <dir_sdi+0xd4>
 8012788:	2302      	movs	r3, #2
 801278a:	e01a      	b.n	80127c2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	69da      	ldr	r2, [r3, #28]
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	899b      	ldrh	r3, [r3, #12]
 8012794:	4619      	mov	r1, r3
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	fbb3 f3f1 	udiv	r3, r3, r1
 801279c:	441a      	add	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	899b      	ldrh	r3, [r3, #12]
 80127ac:	461a      	mov	r2, r3
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80127b4:	fb00 f202 	mul.w	r2, r0, r2
 80127b8:	1a9b      	subs	r3, r3, r2
 80127ba:	18ca      	adds	r2, r1, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3718      	adds	r7, #24
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}

080127ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b086      	sub	sp, #24
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
 80127d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	695b      	ldr	r3, [r3, #20]
 80127de:	3320      	adds	r3, #32
 80127e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	69db      	ldr	r3, [r3, #28]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d003      	beq.n	80127f2 <dir_next+0x28>
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80127f0:	d301      	bcc.n	80127f6 <dir_next+0x2c>
 80127f2:	2304      	movs	r3, #4
 80127f4:	e0bb      	b.n	801296e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	899b      	ldrh	r3, [r3, #12]
 80127fa:	461a      	mov	r2, r3
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8012802:	fb01 f202 	mul.w	r2, r1, r2
 8012806:	1a9b      	subs	r3, r3, r2
 8012808:	2b00      	cmp	r3, #0
 801280a:	f040 809d 	bne.w	8012948 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	69db      	ldr	r3, [r3, #28]
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d10b      	bne.n	8012838 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	095b      	lsrs	r3, r3, #5
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	8912      	ldrh	r2, [r2, #8]
 8012828:	4293      	cmp	r3, r2
 801282a:	f0c0 808d 	bcc.w	8012948 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	61da      	str	r2, [r3, #28]
 8012834:	2304      	movs	r3, #4
 8012836:	e09a      	b.n	801296e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	899b      	ldrh	r3, [r3, #12]
 801283c:	461a      	mov	r2, r3
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	fbb3 f3f2 	udiv	r3, r3, r2
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	8952      	ldrh	r2, [r2, #10]
 8012848:	3a01      	subs	r2, #1
 801284a:	4013      	ands	r3, r2
 801284c:	2b00      	cmp	r3, #0
 801284e:	d17b      	bne.n	8012948 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	4619      	mov	r1, r3
 8012858:	4610      	mov	r0, r2
 801285a:	f7ff fc08 	bl	801206e <get_fat>
 801285e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	2b01      	cmp	r3, #1
 8012864:	d801      	bhi.n	801286a <dir_next+0xa0>
 8012866:	2302      	movs	r3, #2
 8012868:	e081      	b.n	801296e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012870:	d101      	bne.n	8012876 <dir_next+0xac>
 8012872:	2301      	movs	r3, #1
 8012874:	e07b      	b.n	801296e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	699b      	ldr	r3, [r3, #24]
 801287a:	697a      	ldr	r2, [r7, #20]
 801287c:	429a      	cmp	r2, r3
 801287e:	d359      	bcc.n	8012934 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d104      	bne.n	8012890 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2200      	movs	r2, #0
 801288a:	61da      	str	r2, [r3, #28]
 801288c:	2304      	movs	r3, #4
 801288e:	e06e      	b.n	801296e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	4619      	mov	r1, r3
 8012898:	4610      	mov	r0, r2
 801289a:	f7ff fe3d 	bl	8012518 <create_chain>
 801289e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d101      	bne.n	80128aa <dir_next+0xe0>
 80128a6:	2307      	movs	r3, #7
 80128a8:	e061      	b.n	801296e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d101      	bne.n	80128b4 <dir_next+0xea>
 80128b0:	2302      	movs	r3, #2
 80128b2:	e05c      	b.n	801296e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ba:	d101      	bne.n	80128c0 <dir_next+0xf6>
 80128bc:	2301      	movs	r3, #1
 80128be:	e056      	b.n	801296e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f7ff fad3 	bl	8011e6c <sync_window>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d001      	beq.n	80128d0 <dir_next+0x106>
 80128cc:	2301      	movs	r3, #1
 80128ce:	e04e      	b.n	801296e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	899b      	ldrh	r3, [r3, #12]
 80128da:	461a      	mov	r2, r3
 80128dc:	2100      	movs	r1, #0
 80128de:	f7ff f8fc 	bl	8011ada <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80128e2:	2300      	movs	r3, #0
 80128e4:	613b      	str	r3, [r7, #16]
 80128e6:	6979      	ldr	r1, [r7, #20]
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f7ff fba1 	bl	8012030 <clust2sect>
 80128ee:	4602      	mov	r2, r0
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	631a      	str	r2, [r3, #48]	; 0x30
 80128f4:	e012      	b.n	801291c <dir_next+0x152>
						fs->wflag = 1;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2201      	movs	r2, #1
 80128fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7ff fab5 	bl	8011e6c <sync_window>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d001      	beq.n	801290c <dir_next+0x142>
 8012908:	2301      	movs	r3, #1
 801290a:	e030      	b.n	801296e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	3301      	adds	r3, #1
 8012910:	613b      	str	r3, [r7, #16]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012916:	1c5a      	adds	r2, r3, #1
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	631a      	str	r2, [r3, #48]	; 0x30
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	895b      	ldrh	r3, [r3, #10]
 8012920:	461a      	mov	r2, r3
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	4293      	cmp	r3, r2
 8012926:	d3e6      	bcc.n	80128f6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	1ad2      	subs	r2, r2, r3
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	697a      	ldr	r2, [r7, #20]
 8012938:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801293a:	6979      	ldr	r1, [r7, #20]
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff fb77 	bl	8012030 <clust2sect>
 8012942:	4602      	mov	r2, r0
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	899b      	ldrh	r3, [r3, #12]
 8012958:	461a      	mov	r2, r3
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012960:	fb00 f202 	mul.w	r2, r0, r2
 8012964:	1a9b      	subs	r3, r3, r2
 8012966:	18ca      	adds	r2, r1, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3718      	adds	r7, #24
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012976:	b580      	push	{r7, lr}
 8012978:	b086      	sub	sp, #24
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
 801297e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012986:	2100      	movs	r1, #0
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ff fe95 	bl	80126b8 <dir_sdi>
 801298e:	4603      	mov	r3, r0
 8012990:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012992:	7dfb      	ldrb	r3, [r7, #23]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d12b      	bne.n	80129f0 <dir_alloc+0x7a>
		n = 0;
 8012998:	2300      	movs	r3, #0
 801299a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	69db      	ldr	r3, [r3, #28]
 80129a0:	4619      	mov	r1, r3
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f7ff faa6 	bl	8011ef4 <move_window>
 80129a8:	4603      	mov	r3, r0
 80129aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80129ac:	7dfb      	ldrb	r3, [r7, #23]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d11d      	bne.n	80129ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6a1b      	ldr	r3, [r3, #32]
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	2be5      	cmp	r3, #229	; 0xe5
 80129ba:	d004      	beq.n	80129c6 <dir_alloc+0x50>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6a1b      	ldr	r3, [r3, #32]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d107      	bne.n	80129d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	3301      	adds	r3, #1
 80129ca:	613b      	str	r3, [r7, #16]
 80129cc:	693a      	ldr	r2, [r7, #16]
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d102      	bne.n	80129da <dir_alloc+0x64>
 80129d4:	e00c      	b.n	80129f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80129d6:	2300      	movs	r3, #0
 80129d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80129da:	2101      	movs	r1, #1
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff fef4 	bl	80127ca <dir_next>
 80129e2:	4603      	mov	r3, r0
 80129e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80129e6:	7dfb      	ldrb	r3, [r7, #23]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d0d7      	beq.n	801299c <dir_alloc+0x26>
 80129ec:	e000      	b.n	80129f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80129ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80129f0:	7dfb      	ldrb	r3, [r7, #23]
 80129f2:	2b04      	cmp	r3, #4
 80129f4:	d101      	bne.n	80129fa <dir_alloc+0x84>
 80129f6:	2307      	movs	r3, #7
 80129f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3718      	adds	r7, #24
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	331a      	adds	r3, #26
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fe ffbe 	bl	8011994 <ld_word>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	2b03      	cmp	r3, #3
 8012a22:	d109      	bne.n	8012a38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	3314      	adds	r3, #20
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fe ffb3 	bl	8011994 <ld_word>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	041b      	lsls	r3, r3, #16
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	4313      	orrs	r3, r2
 8012a36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012a38:	68fb      	ldr	r3, [r7, #12]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b084      	sub	sp, #16
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	60f8      	str	r0, [r7, #12]
 8012a4a:	60b9      	str	r1, [r7, #8]
 8012a4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	331a      	adds	r3, #26
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	b292      	uxth	r2, r2
 8012a56:	4611      	mov	r1, r2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fe ffd6 	bl	8011a0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d109      	bne.n	8012a7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	f103 0214 	add.w	r2, r3, #20
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	0c1b      	lsrs	r3, r3, #16
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4619      	mov	r1, r3
 8012a74:	4610      	mov	r0, r2
 8012a76:	f7fe ffc8 	bl	8011a0a <st_word>
	}
}
 8012a7a:	bf00      	nop
 8012a7c:	3710      	adds	r7, #16
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012a82:	b580      	push	{r7, lr}
 8012a84:	b086      	sub	sp, #24
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
 8012a8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012a8c:	2304      	movs	r3, #4
 8012a8e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012a96:	e03c      	b.n	8012b12 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	69db      	ldr	r3, [r3, #28]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6938      	ldr	r0, [r7, #16]
 8012aa0:	f7ff fa28 	bl	8011ef4 <move_window>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d136      	bne.n	8012b1c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6a1b      	ldr	r3, [r3, #32]
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012ab6:	7bfb      	ldrb	r3, [r7, #15]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d102      	bne.n	8012ac2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012abc:	2304      	movs	r3, #4
 8012abe:	75fb      	strb	r3, [r7, #23]
 8012ac0:	e031      	b.n	8012b26 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6a1b      	ldr	r3, [r3, #32]
 8012ac6:	330b      	adds	r3, #11
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ace:	73bb      	strb	r3, [r7, #14]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	7bba      	ldrb	r2, [r7, #14]
 8012ad4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
 8012ad8:	2be5      	cmp	r3, #229	; 0xe5
 8012ada:	d011      	beq.n	8012b00 <dir_read+0x7e>
 8012adc:	7bfb      	ldrb	r3, [r7, #15]
 8012ade:	2b2e      	cmp	r3, #46	; 0x2e
 8012ae0:	d00e      	beq.n	8012b00 <dir_read+0x7e>
 8012ae2:	7bbb      	ldrb	r3, [r7, #14]
 8012ae4:	2b0f      	cmp	r3, #15
 8012ae6:	d00b      	beq.n	8012b00 <dir_read+0x7e>
 8012ae8:	7bbb      	ldrb	r3, [r7, #14]
 8012aea:	f023 0320 	bic.w	r3, r3, #32
 8012aee:	2b08      	cmp	r3, #8
 8012af0:	bf0c      	ite	eq
 8012af2:	2301      	moveq	r3, #1
 8012af4:	2300      	movne	r3, #0
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	461a      	mov	r2, r3
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d00f      	beq.n	8012b20 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012b00:	2100      	movs	r1, #0
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7ff fe61 	bl	80127ca <dir_next>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b0c:	7dfb      	ldrb	r3, [r7, #23]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d108      	bne.n	8012b24 <dir_read+0xa2>
	while (dp->sect) {
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	69db      	ldr	r3, [r3, #28]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1be      	bne.n	8012a98 <dir_read+0x16>
 8012b1a:	e004      	b.n	8012b26 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012b1c:	bf00      	nop
 8012b1e:	e002      	b.n	8012b26 <dir_read+0xa4>
				break;
 8012b20:	bf00      	nop
 8012b22:	e000      	b.n	8012b26 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012b24:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <dir_read+0xb0>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	61da      	str	r2, [r3, #28]
	return res;
 8012b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3718      	adds	r7, #24
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7ff fdb3 	bl	80126b8 <dir_sdi>
 8012b52:	4603      	mov	r3, r0
 8012b54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012b56:	7dfb      	ldrb	r3, [r7, #23]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <dir_find+0x24>
 8012b5c:	7dfb      	ldrb	r3, [r7, #23]
 8012b5e:	e03e      	b.n	8012bde <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	69db      	ldr	r3, [r3, #28]
 8012b64:	4619      	mov	r1, r3
 8012b66:	6938      	ldr	r0, [r7, #16]
 8012b68:	f7ff f9c4 	bl	8011ef4 <move_window>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b70:	7dfb      	ldrb	r3, [r7, #23]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d12f      	bne.n	8012bd6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a1b      	ldr	r3, [r3, #32]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012b7e:	7bfb      	ldrb	r3, [r7, #15]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d102      	bne.n	8012b8a <dir_find+0x4e>
 8012b84:	2304      	movs	r3, #4
 8012b86:	75fb      	strb	r3, [r7, #23]
 8012b88:	e028      	b.n	8012bdc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6a1b      	ldr	r3, [r3, #32]
 8012b8e:	330b      	adds	r3, #11
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6a1b      	ldr	r3, [r3, #32]
 8012ba0:	330b      	adds	r3, #11
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	f003 0308 	and.w	r3, r3, #8
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10a      	bne.n	8012bc2 <dir_find+0x86>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6a18      	ldr	r0, [r3, #32]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	3324      	adds	r3, #36	; 0x24
 8012bb4:	220b      	movs	r2, #11
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	f7fe ffaa 	bl	8011b10 <mem_cmp>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00b      	beq.n	8012bda <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff fe00 	bl	80127ca <dir_next>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012bce:	7dfb      	ldrb	r3, [r7, #23]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d0c5      	beq.n	8012b60 <dir_find+0x24>
 8012bd4:	e002      	b.n	8012bdc <dir_find+0xa0>
		if (res != FR_OK) break;
 8012bd6:	bf00      	nop
 8012bd8:	e000      	b.n	8012bdc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012bda:	bf00      	nop

	return res;
 8012bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3718      	adds	r7, #24
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012be6:	b580      	push	{r7, lr}
 8012be8:	b084      	sub	sp, #16
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f7ff febd 	bl	8012976 <dir_alloc>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d11c      	bne.n	8012c40 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	69db      	ldr	r3, [r3, #28]
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	68b8      	ldr	r0, [r7, #8]
 8012c0e:	f7ff f971 	bl	8011ef4 <move_window>
 8012c12:	4603      	mov	r3, r0
 8012c14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012c16:	7bfb      	ldrb	r3, [r7, #15]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d111      	bne.n	8012c40 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a1b      	ldr	r3, [r3, #32]
 8012c20:	2220      	movs	r2, #32
 8012c22:	2100      	movs	r1, #0
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7fe ff58 	bl	8011ada <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6a18      	ldr	r0, [r3, #32]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	3324      	adds	r3, #36	; 0x24
 8012c32:	220b      	movs	r2, #11
 8012c34:	4619      	mov	r1, r3
 8012c36:	f7fe ff2f 	bl	8011a98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b086      	sub	sp, #24
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2200      	movs	r2, #0
 8012c58:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	69db      	ldr	r3, [r3, #28]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d04e      	beq.n	8012d00 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	613b      	str	r3, [r7, #16]
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012c6a:	e021      	b.n	8012cb0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6a1a      	ldr	r2, [r3, #32]
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	1c59      	adds	r1, r3, #1
 8012c74:	6179      	str	r1, [r7, #20]
 8012c76:	4413      	add	r3, r2
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012c7c:	7bfb      	ldrb	r3, [r7, #15]
 8012c7e:	2b20      	cmp	r3, #32
 8012c80:	d100      	bne.n	8012c84 <get_fileinfo+0x3a>
 8012c82:	e015      	b.n	8012cb0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012c84:	7bfb      	ldrb	r3, [r7, #15]
 8012c86:	2b05      	cmp	r3, #5
 8012c88:	d101      	bne.n	8012c8e <get_fileinfo+0x44>
 8012c8a:	23e5      	movs	r3, #229	; 0xe5
 8012c8c:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	2b09      	cmp	r3, #9
 8012c92:	d106      	bne.n	8012ca2 <get_fileinfo+0x58>
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	1c5a      	adds	r2, r3, #1
 8012c98:	613a      	str	r2, [r7, #16]
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	222e      	movs	r2, #46	; 0x2e
 8012ca0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	1c5a      	adds	r2, r3, #1
 8012ca6:	613a      	str	r2, [r7, #16]
 8012ca8:	683a      	ldr	r2, [r7, #0]
 8012caa:	4413      	add	r3, r2
 8012cac:	7bfa      	ldrb	r2, [r7, #15]
 8012cae:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	2b0a      	cmp	r3, #10
 8012cb4:	d9da      	bls.n	8012c6c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012cb6:	683a      	ldr	r2, [r7, #0]
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	4413      	add	r3, r2
 8012cbc:	3309      	adds	r3, #9
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6a1b      	ldr	r3, [r3, #32]
 8012cc6:	7ada      	ldrb	r2, [r3, #11]
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6a1b      	ldr	r3, [r3, #32]
 8012cd0:	331c      	adds	r3, #28
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fe fe76 	bl	80119c4 <ld_dword>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6a1b      	ldr	r3, [r3, #32]
 8012ce2:	3316      	adds	r3, #22
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7fe fe6d 	bl	80119c4 <ld_dword>
 8012cea:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	b29a      	uxth	r2, r3
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	80da      	strh	r2, [r3, #6]
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	0c1b      	lsrs	r3, r3, #16
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	809a      	strh	r2, [r3, #4]
 8012cfe:	e000      	b.n	8012d02 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012d00:	bf00      	nop
}
 8012d02:	3718      	adds	r7, #24
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	60fb      	str	r3, [r7, #12]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	3324      	adds	r3, #36	; 0x24
 8012d1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012d1e:	220b      	movs	r2, #11
 8012d20:	2120      	movs	r1, #32
 8012d22:	68b8      	ldr	r0, [r7, #8]
 8012d24:	f7fe fed9 	bl	8011ada <mem_set>
	si = i = 0; ni = 8;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	613b      	str	r3, [r7, #16]
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	61fb      	str	r3, [r7, #28]
 8012d30:	2308      	movs	r3, #8
 8012d32:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	1c5a      	adds	r2, r3, #1
 8012d38:	61fa      	str	r2, [r7, #28]
 8012d3a:	68fa      	ldr	r2, [r7, #12]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012d42:	7efb      	ldrb	r3, [r7, #27]
 8012d44:	2b20      	cmp	r3, #32
 8012d46:	d94e      	bls.n	8012de6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012d48:	7efb      	ldrb	r3, [r7, #27]
 8012d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8012d4c:	d006      	beq.n	8012d5c <create_name+0x54>
 8012d4e:	7efb      	ldrb	r3, [r7, #27]
 8012d50:	2b5c      	cmp	r3, #92	; 0x5c
 8012d52:	d110      	bne.n	8012d76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012d54:	e002      	b.n	8012d5c <create_name+0x54>
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	61fb      	str	r3, [r7, #28]
 8012d5c:	68fa      	ldr	r2, [r7, #12]
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	4413      	add	r3, r2
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	2b2f      	cmp	r3, #47	; 0x2f
 8012d66:	d0f6      	beq.n	8012d56 <create_name+0x4e>
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	2b5c      	cmp	r3, #92	; 0x5c
 8012d72:	d0f0      	beq.n	8012d56 <create_name+0x4e>
			break;
 8012d74:	e038      	b.n	8012de8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012d76:	7efb      	ldrb	r3, [r7, #27]
 8012d78:	2b2e      	cmp	r3, #46	; 0x2e
 8012d7a:	d003      	beq.n	8012d84 <create_name+0x7c>
 8012d7c:	693a      	ldr	r2, [r7, #16]
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d30c      	bcc.n	8012d9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	2b0b      	cmp	r3, #11
 8012d88:	d002      	beq.n	8012d90 <create_name+0x88>
 8012d8a:	7efb      	ldrb	r3, [r7, #27]
 8012d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d8e:	d001      	beq.n	8012d94 <create_name+0x8c>
 8012d90:	2306      	movs	r3, #6
 8012d92:	e044      	b.n	8012e1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012d94:	2308      	movs	r3, #8
 8012d96:	613b      	str	r3, [r7, #16]
 8012d98:	230b      	movs	r3, #11
 8012d9a:	617b      	str	r3, [r7, #20]
			continue;
 8012d9c:	e022      	b.n	8012de4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012d9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	da04      	bge.n	8012db0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012da6:	7efb      	ldrb	r3, [r7, #27]
 8012da8:	3b80      	subs	r3, #128	; 0x80
 8012daa:	4a1f      	ldr	r2, [pc, #124]	; (8012e28 <create_name+0x120>)
 8012dac:	5cd3      	ldrb	r3, [r2, r3]
 8012dae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012db0:	7efb      	ldrb	r3, [r7, #27]
 8012db2:	4619      	mov	r1, r3
 8012db4:	481d      	ldr	r0, [pc, #116]	; (8012e2c <create_name+0x124>)
 8012db6:	f7fe fed2 	bl	8011b5e <chk_chr>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d001      	beq.n	8012dc4 <create_name+0xbc>
 8012dc0:	2306      	movs	r3, #6
 8012dc2:	e02c      	b.n	8012e1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012dc4:	7efb      	ldrb	r3, [r7, #27]
 8012dc6:	2b60      	cmp	r3, #96	; 0x60
 8012dc8:	d905      	bls.n	8012dd6 <create_name+0xce>
 8012dca:	7efb      	ldrb	r3, [r7, #27]
 8012dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8012dce:	d802      	bhi.n	8012dd6 <create_name+0xce>
 8012dd0:	7efb      	ldrb	r3, [r7, #27]
 8012dd2:	3b20      	subs	r3, #32
 8012dd4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	1c5a      	adds	r2, r3, #1
 8012dda:	613a      	str	r2, [r7, #16]
 8012ddc:	68ba      	ldr	r2, [r7, #8]
 8012dde:	4413      	add	r3, r2
 8012de0:	7efa      	ldrb	r2, [r7, #27]
 8012de2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012de4:	e7a6      	b.n	8012d34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012de6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	441a      	add	r2, r3
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <create_name+0xf4>
 8012df8:	2306      	movs	r3, #6
 8012dfa:	e010      	b.n	8012e1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	2be5      	cmp	r3, #229	; 0xe5
 8012e02:	d102      	bne.n	8012e0a <create_name+0x102>
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	2205      	movs	r2, #5
 8012e08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012e0a:	7efb      	ldrb	r3, [r7, #27]
 8012e0c:	2b20      	cmp	r3, #32
 8012e0e:	d801      	bhi.n	8012e14 <create_name+0x10c>
 8012e10:	2204      	movs	r2, #4
 8012e12:	e000      	b.n	8012e16 <create_name+0x10e>
 8012e14:	2200      	movs	r2, #0
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	330b      	adds	r3, #11
 8012e1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012e1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3720      	adds	r7, #32
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	08072f9c 	.word	0x08072f9c
 8012e2c:	0801de10 	.word	0x0801de10

08012e30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012e44:	e002      	b.n	8012e4c <follow_path+0x1c>
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	603b      	str	r3, [r7, #0]
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	2b2f      	cmp	r3, #47	; 0x2f
 8012e52:	d0f8      	beq.n	8012e46 <follow_path+0x16>
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	2b5c      	cmp	r3, #92	; 0x5c
 8012e5a:	d0f4      	beq.n	8012e46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b1f      	cmp	r3, #31
 8012e68:	d80a      	bhi.n	8012e80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2280      	movs	r2, #128	; 0x80
 8012e6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012e72:	2100      	movs	r1, #0
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f7ff fc1f 	bl	80126b8 <dir_sdi>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	75fb      	strb	r3, [r7, #23]
 8012e7e:	e048      	b.n	8012f12 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e80:	463b      	mov	r3, r7
 8012e82:	4619      	mov	r1, r3
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7ff ff3f 	bl	8012d08 <create_name>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012e8e:	7dfb      	ldrb	r3, [r7, #23]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d139      	bne.n	8012f08 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff fe51 	bl	8012b3c <dir_find>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ea4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012ea6:	7dfb      	ldrb	r3, [r7, #23]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d00a      	beq.n	8012ec2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
 8012eae:	2b04      	cmp	r3, #4
 8012eb0:	d12c      	bne.n	8012f0c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012eb2:	7afb      	ldrb	r3, [r7, #11]
 8012eb4:	f003 0304 	and.w	r3, r3, #4
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d127      	bne.n	8012f0c <follow_path+0xdc>
 8012ebc:	2305      	movs	r3, #5
 8012ebe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012ec0:	e024      	b.n	8012f0c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ec2:	7afb      	ldrb	r3, [r7, #11]
 8012ec4:	f003 0304 	and.w	r3, r3, #4
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d121      	bne.n	8012f10 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	799b      	ldrb	r3, [r3, #6]
 8012ed0:	f003 0310 	and.w	r3, r3, #16
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d102      	bne.n	8012ede <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012ed8:	2305      	movs	r3, #5
 8012eda:	75fb      	strb	r3, [r7, #23]
 8012edc:	e019      	b.n	8012f12 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	695b      	ldr	r3, [r3, #20]
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	8992      	ldrh	r2, [r2, #12]
 8012eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ef0:	fb00 f202 	mul.w	r2, r0, r2
 8012ef4:	1a9b      	subs	r3, r3, r2
 8012ef6:	440b      	add	r3, r1
 8012ef8:	4619      	mov	r1, r3
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f7ff fd82 	bl	8012a04 <ld_clust>
 8012f00:	4602      	mov	r2, r0
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012f06:	e7bb      	b.n	8012e80 <follow_path+0x50>
			if (res != FR_OK) break;
 8012f08:	bf00      	nop
 8012f0a:	e002      	b.n	8012f12 <follow_path+0xe2>
				break;
 8012f0c:	bf00      	nop
 8012f0e:	e000      	b.n	8012f12 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012f10:	bf00      	nop
			}
		}
	}

	return res;
 8012f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b087      	sub	sp, #28
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012f24:	f04f 33ff 	mov.w	r3, #4294967295
 8012f28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d031      	beq.n	8012f96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	617b      	str	r3, [r7, #20]
 8012f38:	e002      	b.n	8012f40 <get_ldnumber+0x24>
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	617b      	str	r3, [r7, #20]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	2b20      	cmp	r3, #32
 8012f46:	d903      	bls.n	8012f50 <get_ldnumber+0x34>
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	2b3a      	cmp	r3, #58	; 0x3a
 8012f4e:	d1f4      	bne.n	8012f3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b3a      	cmp	r3, #58	; 0x3a
 8012f56:	d11c      	bne.n	8012f92 <get_ldnumber+0x76>
			tp = *path;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	1c5a      	adds	r2, r3, #1
 8012f62:	60fa      	str	r2, [r7, #12]
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	3b30      	subs	r3, #48	; 0x30
 8012f68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	2b09      	cmp	r3, #9
 8012f6e:	d80e      	bhi.n	8012f8e <get_ldnumber+0x72>
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d10a      	bne.n	8012f8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d107      	bne.n	8012f8e <get_ldnumber+0x72>
					vol = (int)i;
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	3301      	adds	r3, #1
 8012f86:	617b      	str	r3, [r7, #20]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	697a      	ldr	r2, [r7, #20]
 8012f8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	e002      	b.n	8012f98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012f92:	2300      	movs	r3, #0
 8012f94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012f96:	693b      	ldr	r3, [r7, #16]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	371c      	adds	r7, #28
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr

08012fa4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	70da      	strb	r2, [r3, #3]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012fbc:	6839      	ldr	r1, [r7, #0]
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7fe ff98 	bl	8011ef4 <move_window>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d001      	beq.n	8012fce <check_fs+0x2a>
 8012fca:	2304      	movs	r3, #4
 8012fcc:	e038      	b.n	8013040 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	3334      	adds	r3, #52	; 0x34
 8012fd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fe fcdc 	bl	8011994 <ld_word>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	461a      	mov	r2, r3
 8012fe0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d001      	beq.n	8012fec <check_fs+0x48>
 8012fe8:	2303      	movs	r3, #3
 8012fea:	e029      	b.n	8013040 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ff2:	2be9      	cmp	r3, #233	; 0xe9
 8012ff4:	d009      	beq.n	801300a <check_fs+0x66>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ffc:	2beb      	cmp	r3, #235	; 0xeb
 8012ffe:	d11e      	bne.n	801303e <check_fs+0x9a>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013006:	2b90      	cmp	r3, #144	; 0x90
 8013008:	d119      	bne.n	801303e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	3334      	adds	r3, #52	; 0x34
 801300e:	3336      	adds	r3, #54	; 0x36
 8013010:	4618      	mov	r0, r3
 8013012:	f7fe fcd7 	bl	80119c4 <ld_dword>
 8013016:	4603      	mov	r3, r0
 8013018:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801301c:	4a0a      	ldr	r2, [pc, #40]	; (8013048 <check_fs+0xa4>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d101      	bne.n	8013026 <check_fs+0x82>
 8013022:	2300      	movs	r3, #0
 8013024:	e00c      	b.n	8013040 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	3334      	adds	r3, #52	; 0x34
 801302a:	3352      	adds	r3, #82	; 0x52
 801302c:	4618      	mov	r0, r3
 801302e:	f7fe fcc9 	bl	80119c4 <ld_dword>
 8013032:	4603      	mov	r3, r0
 8013034:	4a05      	ldr	r2, [pc, #20]	; (801304c <check_fs+0xa8>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d101      	bne.n	801303e <check_fs+0x9a>
 801303a:	2300      	movs	r3, #0
 801303c:	e000      	b.n	8013040 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801303e:	2302      	movs	r3, #2
}
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	00544146 	.word	0x00544146
 801304c:	33544146 	.word	0x33544146

08013050 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b096      	sub	sp, #88	; 0x58
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	4613      	mov	r3, r2
 801305c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	2200      	movs	r2, #0
 8013062:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f7ff ff59 	bl	8012f1c <get_ldnumber>
 801306a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801306e:	2b00      	cmp	r3, #0
 8013070:	da01      	bge.n	8013076 <find_volume+0x26>
 8013072:	230b      	movs	r3, #11
 8013074:	e262      	b.n	801353c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013076:	4a9f      	ldr	r2, [pc, #636]	; (80132f4 <find_volume+0x2a4>)
 8013078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801307e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	2b00      	cmp	r3, #0
 8013084:	d101      	bne.n	801308a <find_volume+0x3a>
 8013086:	230c      	movs	r3, #12
 8013088:	e258      	b.n	801353c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801308e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013090:	79fb      	ldrb	r3, [r7, #7]
 8013092:	f023 0301 	bic.w	r3, r3, #1
 8013096:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01a      	beq.n	80130d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80130a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a2:	785b      	ldrb	r3, [r3, #1]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7fe fbd7 	bl	8011858 <disk_status>
 80130aa:	4603      	mov	r3, r0
 80130ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80130b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130b4:	f003 0301 	and.w	r3, r3, #1
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d10c      	bne.n	80130d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80130bc:	79fb      	ldrb	r3, [r7, #7]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d007      	beq.n	80130d2 <find_volume+0x82>
 80130c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130c6:	f003 0304 	and.w	r3, r3, #4
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80130ce:	230a      	movs	r3, #10
 80130d0:	e234      	b.n	801353c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80130d2:	2300      	movs	r3, #0
 80130d4:	e232      	b.n	801353c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	2200      	movs	r2, #0
 80130da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80130dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130de:	b2da      	uxtb	r2, r3
 80130e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	785b      	ldrb	r3, [r3, #1]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7fe fbcf 	bl	801188c <disk_initialize>
 80130ee:	4603      	mov	r3, r0
 80130f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80130f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013100:	2303      	movs	r3, #3
 8013102:	e21b      	b.n	801353c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013104:	79fb      	ldrb	r3, [r7, #7]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d007      	beq.n	801311a <find_volume+0xca>
 801310a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801310e:	f003 0304 	and.w	r3, r3, #4
 8013112:	2b00      	cmp	r3, #0
 8013114:	d001      	beq.n	801311a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013116:	230a      	movs	r3, #10
 8013118:	e210      	b.n	801353c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311c:	7858      	ldrb	r0, [r3, #1]
 801311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013120:	330c      	adds	r3, #12
 8013122:	461a      	mov	r2, r3
 8013124:	2102      	movs	r1, #2
 8013126:	f7fe fc17 	bl	8011958 <disk_ioctl>
 801312a:	4603      	mov	r3, r0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d001      	beq.n	8013134 <find_volume+0xe4>
 8013130:	2301      	movs	r3, #1
 8013132:	e203      	b.n	801353c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	899b      	ldrh	r3, [r3, #12]
 8013138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801313c:	d80d      	bhi.n	801315a <find_volume+0x10a>
 801313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013140:	899b      	ldrh	r3, [r3, #12]
 8013142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013146:	d308      	bcc.n	801315a <find_volume+0x10a>
 8013148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314a:	899b      	ldrh	r3, [r3, #12]
 801314c:	461a      	mov	r2, r3
 801314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013150:	899b      	ldrh	r3, [r3, #12]
 8013152:	3b01      	subs	r3, #1
 8013154:	4013      	ands	r3, r2
 8013156:	2b00      	cmp	r3, #0
 8013158:	d001      	beq.n	801315e <find_volume+0x10e>
 801315a:	2301      	movs	r3, #1
 801315c:	e1ee      	b.n	801353c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801315e:	2300      	movs	r3, #0
 8013160:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013166:	f7ff ff1d 	bl	8012fa4 <check_fs>
 801316a:	4603      	mov	r3, r0
 801316c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013174:	2b02      	cmp	r3, #2
 8013176:	d149      	bne.n	801320c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013178:	2300      	movs	r3, #0
 801317a:	643b      	str	r3, [r7, #64]	; 0x40
 801317c:	e01e      	b.n	80131bc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013180:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013186:	011b      	lsls	r3, r3, #4
 8013188:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801318c:	4413      	add	r3, r2
 801318e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	3304      	adds	r3, #4
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d006      	beq.n	80131a8 <find_volume+0x158>
 801319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319c:	3308      	adds	r3, #8
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fe fc10 	bl	80119c4 <ld_dword>
 80131a4:	4602      	mov	r2, r0
 80131a6:	e000      	b.n	80131aa <find_volume+0x15a>
 80131a8:	2200      	movs	r2, #0
 80131aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	3358      	adds	r3, #88	; 0x58
 80131b0:	443b      	add	r3, r7
 80131b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80131b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131b8:	3301      	adds	r3, #1
 80131ba:	643b      	str	r3, [r7, #64]	; 0x40
 80131bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131be:	2b03      	cmp	r3, #3
 80131c0:	d9dd      	bls.n	801317e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80131c2:	2300      	movs	r3, #0
 80131c4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80131c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <find_volume+0x182>
 80131cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ce:	3b01      	subs	r3, #1
 80131d0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80131d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	3358      	adds	r3, #88	; 0x58
 80131d8:	443b      	add	r3, r7
 80131da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80131de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80131e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d005      	beq.n	80131f2 <find_volume+0x1a2>
 80131e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131ea:	f7ff fedb 	bl	8012fa4 <check_fs>
 80131ee:	4603      	mov	r3, r0
 80131f0:	e000      	b.n	80131f4 <find_volume+0x1a4>
 80131f2:	2303      	movs	r3, #3
 80131f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80131f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d905      	bls.n	801320c <find_volume+0x1bc>
 8013200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013202:	3301      	adds	r3, #1
 8013204:	643b      	str	r3, [r7, #64]	; 0x40
 8013206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013208:	2b03      	cmp	r3, #3
 801320a:	d9e2      	bls.n	80131d2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801320c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013210:	2b04      	cmp	r3, #4
 8013212:	d101      	bne.n	8013218 <find_volume+0x1c8>
 8013214:	2301      	movs	r3, #1
 8013216:	e191      	b.n	801353c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801321c:	2b01      	cmp	r3, #1
 801321e:	d901      	bls.n	8013224 <find_volume+0x1d4>
 8013220:	230d      	movs	r3, #13
 8013222:	e18b      	b.n	801353c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013226:	3334      	adds	r3, #52	; 0x34
 8013228:	330b      	adds	r3, #11
 801322a:	4618      	mov	r0, r3
 801322c:	f7fe fbb2 	bl	8011994 <ld_word>
 8013230:	4603      	mov	r3, r0
 8013232:	461a      	mov	r2, r3
 8013234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013236:	899b      	ldrh	r3, [r3, #12]
 8013238:	429a      	cmp	r2, r3
 801323a:	d001      	beq.n	8013240 <find_volume+0x1f0>
 801323c:	230d      	movs	r3, #13
 801323e:	e17d      	b.n	801353c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013242:	3334      	adds	r3, #52	; 0x34
 8013244:	3316      	adds	r3, #22
 8013246:	4618      	mov	r0, r3
 8013248:	f7fe fba4 	bl	8011994 <ld_word>
 801324c:	4603      	mov	r3, r0
 801324e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <find_volume+0x214>
 8013256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013258:	3334      	adds	r3, #52	; 0x34
 801325a:	3324      	adds	r3, #36	; 0x24
 801325c:	4618      	mov	r0, r3
 801325e:	f7fe fbb1 	bl	80119c4 <ld_dword>
 8013262:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013268:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	789b      	ldrb	r3, [r3, #2]
 8013278:	2b01      	cmp	r3, #1
 801327a:	d005      	beq.n	8013288 <find_volume+0x238>
 801327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327e:	789b      	ldrb	r3, [r3, #2]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d001      	beq.n	8013288 <find_volume+0x238>
 8013284:	230d      	movs	r3, #13
 8013286:	e159      	b.n	801353c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328a:	789b      	ldrb	r3, [r3, #2]
 801328c:	461a      	mov	r2, r3
 801328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013290:	fb02 f303 	mul.w	r3, r2, r3
 8013294:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801329c:	b29a      	uxth	r2, r3
 801329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80132a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a4:	895b      	ldrh	r3, [r3, #10]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d008      	beq.n	80132bc <find_volume+0x26c>
 80132aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ac:	895b      	ldrh	r3, [r3, #10]
 80132ae:	461a      	mov	r2, r3
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	895b      	ldrh	r3, [r3, #10]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	4013      	ands	r3, r2
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d001      	beq.n	80132c0 <find_volume+0x270>
 80132bc:	230d      	movs	r3, #13
 80132be:	e13d      	b.n	801353c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80132c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c2:	3334      	adds	r3, #52	; 0x34
 80132c4:	3311      	adds	r3, #17
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fe fb64 	bl	8011994 <ld_word>
 80132cc:	4603      	mov	r3, r0
 80132ce:	461a      	mov	r2, r3
 80132d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80132d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d6:	891b      	ldrh	r3, [r3, #8]
 80132d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132da:	8992      	ldrh	r2, [r2, #12]
 80132dc:	0952      	lsrs	r2, r2, #5
 80132de:	b292      	uxth	r2, r2
 80132e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80132e4:	fb01 f202 	mul.w	r2, r1, r2
 80132e8:	1a9b      	subs	r3, r3, r2
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <find_volume+0x2a8>
 80132f0:	230d      	movs	r3, #13
 80132f2:	e123      	b.n	801353c <find_volume+0x4ec>
 80132f4:	20005d40 	.word	0x20005d40

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80132f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fa:	3334      	adds	r3, #52	; 0x34
 80132fc:	3313      	adds	r3, #19
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fe fb48 	bl	8011994 <ld_word>
 8013304:	4603      	mov	r3, r0
 8013306:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801330a:	2b00      	cmp	r3, #0
 801330c:	d106      	bne.n	801331c <find_volume+0x2cc>
 801330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013310:	3334      	adds	r3, #52	; 0x34
 8013312:	3320      	adds	r3, #32
 8013314:	4618      	mov	r0, r3
 8013316:	f7fe fb55 	bl	80119c4 <ld_dword>
 801331a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331e:	3334      	adds	r3, #52	; 0x34
 8013320:	330e      	adds	r3, #14
 8013322:	4618      	mov	r0, r3
 8013324:	f7fe fb36 	bl	8011994 <ld_word>
 8013328:	4603      	mov	r3, r0
 801332a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801332c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801332e:	2b00      	cmp	r3, #0
 8013330:	d101      	bne.n	8013336 <find_volume+0x2e6>
 8013332:	230d      	movs	r3, #13
 8013334:	e102      	b.n	801353c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013336:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801333a:	4413      	add	r3, r2
 801333c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801333e:	8911      	ldrh	r1, [r2, #8]
 8013340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013342:	8992      	ldrh	r2, [r2, #12]
 8013344:	0952      	lsrs	r2, r2, #5
 8013346:	b292      	uxth	r2, r2
 8013348:	fbb1 f2f2 	udiv	r2, r1, r2
 801334c:	b292      	uxth	r2, r2
 801334e:	4413      	add	r3, r2
 8013350:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013356:	429a      	cmp	r2, r3
 8013358:	d201      	bcs.n	801335e <find_volume+0x30e>
 801335a:	230d      	movs	r3, #13
 801335c:	e0ee      	b.n	801353c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801335e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013366:	8952      	ldrh	r2, [r2, #10]
 8013368:	fbb3 f3f2 	udiv	r3, r3, r2
 801336c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <find_volume+0x328>
 8013374:	230d      	movs	r3, #13
 8013376:	e0e1      	b.n	801353c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8013378:	2303      	movs	r3, #3
 801337a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013380:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013384:	4293      	cmp	r3, r2
 8013386:	d802      	bhi.n	801338e <find_volume+0x33e>
 8013388:	2302      	movs	r3, #2
 801338a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013390:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013394:	4293      	cmp	r3, r2
 8013396:	d802      	bhi.n	801339e <find_volume+0x34e>
 8013398:	2301      	movs	r3, #1
 801339a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a0:	1c9a      	adds	r2, r3, #2
 80133a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80133a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133aa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80133ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80133ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b0:	441a      	add	r2, r3
 80133b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80133b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	441a      	add	r2, r3
 80133bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133be:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80133c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133c4:	2b03      	cmp	r3, #3
 80133c6:	d11e      	bne.n	8013406 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80133c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ca:	3334      	adds	r3, #52	; 0x34
 80133cc:	332a      	adds	r3, #42	; 0x2a
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fae0 	bl	8011994 <ld_word>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d001      	beq.n	80133de <find_volume+0x38e>
 80133da:	230d      	movs	r3, #13
 80133dc:	e0ae      	b.n	801353c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80133de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e0:	891b      	ldrh	r3, [r3, #8]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d001      	beq.n	80133ea <find_volume+0x39a>
 80133e6:	230d      	movs	r3, #13
 80133e8:	e0a8      	b.n	801353c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80133ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ec:	3334      	adds	r3, #52	; 0x34
 80133ee:	332c      	adds	r3, #44	; 0x2c
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fe fae7 	bl	80119c4 <ld_dword>
 80133f6:	4602      	mov	r2, r0
 80133f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80133fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	647b      	str	r3, [r7, #68]	; 0x44
 8013404:	e01f      	b.n	8013446 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d101      	bne.n	8013412 <find_volume+0x3c2>
 801340e:	230d      	movs	r3, #13
 8013410:	e094      	b.n	801353c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013418:	441a      	add	r2, r3
 801341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801341c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801341e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013422:	2b02      	cmp	r3, #2
 8013424:	d103      	bne.n	801342e <find_volume+0x3de>
 8013426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013428:	699b      	ldr	r3, [r3, #24]
 801342a:	005b      	lsls	r3, r3, #1
 801342c:	e00a      	b.n	8013444 <find_volume+0x3f4>
 801342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013430:	699a      	ldr	r2, [r3, #24]
 8013432:	4613      	mov	r3, r2
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	4413      	add	r3, r2
 8013438:	085a      	lsrs	r2, r3, #1
 801343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801343c:	699b      	ldr	r3, [r3, #24]
 801343e:	f003 0301 	and.w	r3, r3, #1
 8013442:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013444:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013448:	69da      	ldr	r2, [r3, #28]
 801344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344c:	899b      	ldrh	r3, [r3, #12]
 801344e:	4619      	mov	r1, r3
 8013450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013452:	440b      	add	r3, r1
 8013454:	3b01      	subs	r3, #1
 8013456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013458:	8989      	ldrh	r1, [r1, #12]
 801345a:	fbb3 f3f1 	udiv	r3, r3, r1
 801345e:	429a      	cmp	r2, r3
 8013460:	d201      	bcs.n	8013466 <find_volume+0x416>
 8013462:	230d      	movs	r3, #13
 8013464:	e06a      	b.n	801353c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013468:	f04f 32ff 	mov.w	r2, #4294967295
 801346c:	615a      	str	r2, [r3, #20]
 801346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013470:	695a      	ldr	r2, [r3, #20]
 8013472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013474:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013478:	2280      	movs	r2, #128	; 0x80
 801347a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801347c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013480:	2b03      	cmp	r3, #3
 8013482:	d149      	bne.n	8013518 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013486:	3334      	adds	r3, #52	; 0x34
 8013488:	3330      	adds	r3, #48	; 0x30
 801348a:	4618      	mov	r0, r3
 801348c:	f7fe fa82 	bl	8011994 <ld_word>
 8013490:	4603      	mov	r3, r0
 8013492:	2b01      	cmp	r3, #1
 8013494:	d140      	bne.n	8013518 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013498:	3301      	adds	r3, #1
 801349a:	4619      	mov	r1, r3
 801349c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801349e:	f7fe fd29 	bl	8011ef4 <move_window>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d137      	bne.n	8013518 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80134a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134aa:	2200      	movs	r2, #0
 80134ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80134ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b0:	3334      	adds	r3, #52	; 0x34
 80134b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fe fa6c 	bl	8011994 <ld_word>
 80134bc:	4603      	mov	r3, r0
 80134be:	461a      	mov	r2, r3
 80134c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d127      	bne.n	8013518 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80134c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ca:	3334      	adds	r3, #52	; 0x34
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe fa79 	bl	80119c4 <ld_dword>
 80134d2:	4603      	mov	r3, r0
 80134d4:	4a1b      	ldr	r2, [pc, #108]	; (8013544 <find_volume+0x4f4>)
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d11e      	bne.n	8013518 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80134da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134dc:	3334      	adds	r3, #52	; 0x34
 80134de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fe fa6e 	bl	80119c4 <ld_dword>
 80134e8:	4603      	mov	r3, r0
 80134ea:	4a17      	ldr	r2, [pc, #92]	; (8013548 <find_volume+0x4f8>)
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d113      	bne.n	8013518 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80134f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f2:	3334      	adds	r3, #52	; 0x34
 80134f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe fa63 	bl	80119c4 <ld_dword>
 80134fe:	4602      	mov	r2, r0
 8013500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013502:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013506:	3334      	adds	r3, #52	; 0x34
 8013508:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801350c:	4618      	mov	r0, r3
 801350e:	f7fe fa59 	bl	80119c4 <ld_dword>
 8013512:	4602      	mov	r2, r0
 8013514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013516:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801351e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013520:	4b0a      	ldr	r3, [pc, #40]	; (801354c <find_volume+0x4fc>)
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	3301      	adds	r3, #1
 8013526:	b29a      	uxth	r2, r3
 8013528:	4b08      	ldr	r3, [pc, #32]	; (801354c <find_volume+0x4fc>)
 801352a:	801a      	strh	r2, [r3, #0]
 801352c:	4b07      	ldr	r3, [pc, #28]	; (801354c <find_volume+0x4fc>)
 801352e:	881a      	ldrh	r2, [r3, #0]
 8013530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013532:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013536:	f7fe fc75 	bl	8011e24 <clear_lock>
#endif
	return FR_OK;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3758      	adds	r7, #88	; 0x58
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	41615252 	.word	0x41615252
 8013548:	61417272 	.word	0x61417272
 801354c:	20005d44 	.word	0x20005d44

08013550 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801355a:	2309      	movs	r3, #9
 801355c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d01c      	beq.n	801359e <validate+0x4e>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d018      	beq.n	801359e <validate+0x4e>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d013      	beq.n	801359e <validate+0x4e>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	889a      	ldrh	r2, [r3, #4]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	88db      	ldrh	r3, [r3, #6]
 8013580:	429a      	cmp	r2, r3
 8013582:	d10c      	bne.n	801359e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	785b      	ldrb	r3, [r3, #1]
 801358a:	4618      	mov	r0, r3
 801358c:	f7fe f964 	bl	8011858 <disk_status>
 8013590:	4603      	mov	r3, r0
 8013592:	f003 0301 	and.w	r3, r3, #1
 8013596:	2b00      	cmp	r3, #0
 8013598:	d101      	bne.n	801359e <validate+0x4e>
			res = FR_OK;
 801359a:	2300      	movs	r3, #0
 801359c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801359e:	7bfb      	ldrb	r3, [r7, #15]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d102      	bne.n	80135aa <validate+0x5a>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	e000      	b.n	80135ac <validate+0x5c>
 80135aa:	2300      	movs	r3, #0
 80135ac:	683a      	ldr	r2, [r7, #0]
 80135ae:	6013      	str	r3, [r2, #0]
	return res;
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
	...

080135bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b088      	sub	sp, #32
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	4613      	mov	r3, r2
 80135c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80135ce:	f107 0310 	add.w	r3, r7, #16
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fca2 	bl	8012f1c <get_ldnumber>
 80135d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80135da:	69fb      	ldr	r3, [r7, #28]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	da01      	bge.n	80135e4 <f_mount+0x28>
 80135e0:	230b      	movs	r3, #11
 80135e2:	e02b      	b.n	801363c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80135e4:	4a17      	ldr	r2, [pc, #92]	; (8013644 <f_mount+0x88>)
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d005      	beq.n	8013600 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80135f4:	69b8      	ldr	r0, [r7, #24]
 80135f6:	f7fe fc15 	bl	8011e24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	2200      	movs	r2, #0
 80135fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d002      	beq.n	801360c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2200      	movs	r2, #0
 801360a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	490d      	ldr	r1, [pc, #52]	; (8013644 <f_mount+0x88>)
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <f_mount+0x66>
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d001      	beq.n	8013626 <f_mount+0x6a>
 8013622:	2300      	movs	r3, #0
 8013624:	e00a      	b.n	801363c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013626:	f107 010c 	add.w	r1, r7, #12
 801362a:	f107 0308 	add.w	r3, r7, #8
 801362e:	2200      	movs	r2, #0
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff fd0d 	bl	8013050 <find_volume>
 8013636:	4603      	mov	r3, r0
 8013638:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801363a:	7dfb      	ldrb	r3, [r7, #23]
}
 801363c:	4618      	mov	r0, r3
 801363e:	3720      	adds	r7, #32
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	20005d40 	.word	0x20005d40

08013648 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b098      	sub	sp, #96	; 0x60
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	4613      	mov	r3, r2
 8013654:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <f_open+0x18>
 801365c:	2309      	movs	r3, #9
 801365e:	e1bb      	b.n	80139d8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013660:	79fb      	ldrb	r3, [r7, #7]
 8013662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013666:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013668:	79fa      	ldrb	r2, [r7, #7]
 801366a:	f107 0110 	add.w	r1, r7, #16
 801366e:	f107 0308 	add.w	r3, r7, #8
 8013672:	4618      	mov	r0, r3
 8013674:	f7ff fcec 	bl	8013050 <find_volume>
 8013678:	4603      	mov	r3, r0
 801367a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801367e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013682:	2b00      	cmp	r3, #0
 8013684:	f040 819f 	bne.w	80139c6 <f_open+0x37e>
		dj.obj.fs = fs;
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	f107 0314 	add.w	r3, r7, #20
 8013692:	4611      	mov	r1, r2
 8013694:	4618      	mov	r0, r3
 8013696:	f7ff fbcb 	bl	8012e30 <follow_path>
 801369a:	4603      	mov	r3, r0
 801369c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80136a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d11a      	bne.n	80136de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80136a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80136ac:	b25b      	sxtb	r3, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	da03      	bge.n	80136ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80136b2:	2306      	movs	r3, #6
 80136b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80136b8:	e011      	b.n	80136de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136ba:	79fb      	ldrb	r3, [r7, #7]
 80136bc:	f023 0301 	bic.w	r3, r3, #1
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	bf14      	ite	ne
 80136c4:	2301      	movne	r3, #1
 80136c6:	2300      	moveq	r3, #0
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	461a      	mov	r2, r3
 80136cc:	f107 0314 	add.w	r3, r7, #20
 80136d0:	4611      	mov	r1, r2
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7fe fa5e 	bl	8011b94 <chk_lock>
 80136d8:	4603      	mov	r3, r0
 80136da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80136de:	79fb      	ldrb	r3, [r7, #7]
 80136e0:	f003 031c 	and.w	r3, r3, #28
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d07f      	beq.n	80137e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80136e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d017      	beq.n	8013720 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80136f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136f4:	2b04      	cmp	r3, #4
 80136f6:	d10e      	bne.n	8013716 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80136f8:	f7fe faa8 	bl	8011c4c <enq_lock>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d006      	beq.n	8013710 <f_open+0xc8>
 8013702:	f107 0314 	add.w	r3, r7, #20
 8013706:	4618      	mov	r0, r3
 8013708:	f7ff fa6d 	bl	8012be6 <dir_register>
 801370c:	4603      	mov	r3, r0
 801370e:	e000      	b.n	8013712 <f_open+0xca>
 8013710:	2312      	movs	r3, #18
 8013712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013716:	79fb      	ldrb	r3, [r7, #7]
 8013718:	f043 0308 	orr.w	r3, r3, #8
 801371c:	71fb      	strb	r3, [r7, #7]
 801371e:	e010      	b.n	8013742 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013720:	7ebb      	ldrb	r3, [r7, #26]
 8013722:	f003 0311 	and.w	r3, r3, #17
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <f_open+0xea>
					res = FR_DENIED;
 801372a:	2307      	movs	r3, #7
 801372c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013730:	e007      	b.n	8013742 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013732:	79fb      	ldrb	r3, [r7, #7]
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	2b00      	cmp	r3, #0
 801373a:	d002      	beq.n	8013742 <f_open+0xfa>
 801373c:	2308      	movs	r3, #8
 801373e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013746:	2b00      	cmp	r3, #0
 8013748:	d168      	bne.n	801381c <f_open+0x1d4>
 801374a:	79fb      	ldrb	r3, [r7, #7]
 801374c:	f003 0308 	and.w	r3, r3, #8
 8013750:	2b00      	cmp	r3, #0
 8013752:	d063      	beq.n	801381c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013754:	f7fd ff14 	bl	8011580 <get_fattime>
 8013758:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801375a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801375c:	330e      	adds	r3, #14
 801375e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013760:	4618      	mov	r0, r3
 8013762:	f7fe f96d 	bl	8011a40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013768:	3316      	adds	r3, #22
 801376a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801376c:	4618      	mov	r0, r3
 801376e:	f7fe f967 	bl	8011a40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013774:	330b      	adds	r3, #11
 8013776:	2220      	movs	r2, #32
 8013778:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801377e:	4611      	mov	r1, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff f93f 	bl	8012a04 <ld_clust>
 8013786:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801378c:	2200      	movs	r2, #0
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff f957 	bl	8012a42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013796:	331c      	adds	r3, #28
 8013798:	2100      	movs	r1, #0
 801379a:	4618      	mov	r0, r3
 801379c:	f7fe f950 	bl	8011a40 <st_dword>
					fs->wflag = 1;
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	2201      	movs	r2, #1
 80137a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80137a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d037      	beq.n	801381c <f_open+0x1d4>
						dw = fs->winsect;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80137b2:	f107 0314 	add.w	r3, r7, #20
 80137b6:	2200      	movs	r2, #0
 80137b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fe fe47 	bl	801244e <remove_chain>
 80137c0:	4603      	mov	r3, r0
 80137c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80137c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d126      	bne.n	801381c <f_open+0x1d4>
							res = move_window(fs, dw);
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fe fb8e 	bl	8011ef4 <move_window>
 80137d8:	4603      	mov	r3, r0
 80137da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137e2:	3a01      	subs	r2, #1
 80137e4:	611a      	str	r2, [r3, #16]
 80137e6:	e019      	b.n	801381c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80137e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d115      	bne.n	801381c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80137f0:	7ebb      	ldrb	r3, [r7, #26]
 80137f2:	f003 0310 	and.w	r3, r3, #16
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d003      	beq.n	8013802 <f_open+0x1ba>
					res = FR_NO_FILE;
 80137fa:	2304      	movs	r3, #4
 80137fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013800:	e00c      	b.n	801381c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013802:	79fb      	ldrb	r3, [r7, #7]
 8013804:	f003 0302 	and.w	r3, r3, #2
 8013808:	2b00      	cmp	r3, #0
 801380a:	d007      	beq.n	801381c <f_open+0x1d4>
 801380c:	7ebb      	ldrb	r3, [r7, #26]
 801380e:	f003 0301 	and.w	r3, r3, #1
 8013812:	2b00      	cmp	r3, #0
 8013814:	d002      	beq.n	801381c <f_open+0x1d4>
						res = FR_DENIED;
 8013816:	2307      	movs	r3, #7
 8013818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801381c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013820:	2b00      	cmp	r3, #0
 8013822:	d128      	bne.n	8013876 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013824:	79fb      	ldrb	r3, [r7, #7]
 8013826:	f003 0308 	and.w	r3, r3, #8
 801382a:	2b00      	cmp	r3, #0
 801382c:	d003      	beq.n	8013836 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801382e:	79fb      	ldrb	r3, [r7, #7]
 8013830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013834:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	f023 0301 	bic.w	r3, r3, #1
 801384a:	2b00      	cmp	r3, #0
 801384c:	bf14      	ite	ne
 801384e:	2301      	movne	r3, #1
 8013850:	2300      	moveq	r3, #0
 8013852:	b2db      	uxtb	r3, r3
 8013854:	461a      	mov	r2, r3
 8013856:	f107 0314 	add.w	r3, r7, #20
 801385a:	4611      	mov	r1, r2
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe fa17 	bl	8011c90 <inc_lock>
 8013862:	4602      	mov	r2, r0
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d102      	bne.n	8013876 <f_open+0x22e>
 8013870:	2302      	movs	r3, #2
 8013872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801387a:	2b00      	cmp	r3, #0
 801387c:	f040 80a3 	bne.w	80139c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013884:	4611      	mov	r1, r2
 8013886:	4618      	mov	r0, r3
 8013888:	f7ff f8bc 	bl	8012a04 <ld_clust>
 801388c:	4602      	mov	r2, r0
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013894:	331c      	adds	r3, #28
 8013896:	4618      	mov	r0, r3
 8013898:	f7fe f894 	bl	80119c4 <ld_dword>
 801389c:	4602      	mov	r2, r0
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2200      	movs	r2, #0
 80138a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80138a8:	693a      	ldr	r2, [r7, #16]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	88da      	ldrh	r2, [r3, #6]
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	79fa      	ldrb	r2, [r7, #7]
 80138ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2200      	movs	r2, #0
 80138c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2200      	movs	r2, #0
 80138c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2200      	movs	r2, #0
 80138cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	3330      	adds	r3, #48	; 0x30
 80138d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80138d6:	2100      	movs	r1, #0
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fe f8fe 	bl	8011ada <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80138de:	79fb      	ldrb	r3, [r7, #7]
 80138e0:	f003 0320 	and.w	r3, r3, #32
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d06e      	beq.n	80139c6 <f_open+0x37e>
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d06a      	beq.n	80139c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	68da      	ldr	r2, [r3, #12]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	895b      	ldrh	r3, [r3, #10]
 80138fc:	461a      	mov	r2, r3
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	899b      	ldrh	r3, [r3, #12]
 8013902:	fb02 f303 	mul.w	r3, r2, r3
 8013906:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	657b      	str	r3, [r7, #84]	; 0x54
 8013914:	e016      	b.n	8013944 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801391a:	4618      	mov	r0, r3
 801391c:	f7fe fba7 	bl	801206e <get_fat>
 8013920:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013924:	2b01      	cmp	r3, #1
 8013926:	d802      	bhi.n	801392e <f_open+0x2e6>
 8013928:	2302      	movs	r3, #2
 801392a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801392e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013934:	d102      	bne.n	801393c <f_open+0x2f4>
 8013936:	2301      	movs	r3, #1
 8013938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801393c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	657b      	str	r3, [r7, #84]	; 0x54
 8013944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013948:	2b00      	cmp	r3, #0
 801394a:	d103      	bne.n	8013954 <f_open+0x30c>
 801394c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801394e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013950:	429a      	cmp	r2, r3
 8013952:	d8e0      	bhi.n	8013916 <f_open+0x2ce>
				}
				fp->clust = clst;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013958:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801395a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801395e:	2b00      	cmp	r3, #0
 8013960:	d131      	bne.n	80139c6 <f_open+0x37e>
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	899b      	ldrh	r3, [r3, #12]
 8013966:	461a      	mov	r2, r3
 8013968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801396a:	fbb3 f1f2 	udiv	r1, r3, r2
 801396e:	fb01 f202 	mul.w	r2, r1, r2
 8013972:	1a9b      	subs	r3, r3, r2
 8013974:	2b00      	cmp	r3, #0
 8013976:	d026      	beq.n	80139c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801397c:	4618      	mov	r0, r3
 801397e:	f7fe fb57 	bl	8012030 <clust2sect>
 8013982:	6478      	str	r0, [r7, #68]	; 0x44
 8013984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013986:	2b00      	cmp	r3, #0
 8013988:	d103      	bne.n	8013992 <f_open+0x34a>
						res = FR_INT_ERR;
 801398a:	2302      	movs	r3, #2
 801398c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013990:	e019      	b.n	80139c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	899b      	ldrh	r3, [r3, #12]
 8013996:	461a      	mov	r2, r3
 8013998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801399a:	fbb3 f2f2 	udiv	r2, r3, r2
 801399e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139a0:	441a      	add	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	7858      	ldrb	r0, [r3, #1]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	6a1a      	ldr	r2, [r3, #32]
 80139b4:	2301      	movs	r3, #1
 80139b6:	f7fd ff8f 	bl	80118d8 <disk_read>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <f_open+0x37e>
 80139c0:	2301      	movs	r3, #1
 80139c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80139c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d002      	beq.n	80139d4 <f_open+0x38c>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2200      	movs	r2, #0
 80139d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80139d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3760      	adds	r7, #96	; 0x60
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b08e      	sub	sp, #56	; 0x38
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	607a      	str	r2, [r7, #4]
 80139ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2200      	movs	r2, #0
 80139f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f107 0214 	add.w	r2, r7, #20
 80139fe:	4611      	mov	r1, r2
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff fda5 	bl	8013550 <validate>
 8013a06:	4603      	mov	r3, r0
 8013a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d107      	bne.n	8013a24 <f_read+0x44>
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	7d5b      	ldrb	r3, [r3, #21]
 8013a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <f_read+0x4a>
 8013a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a28:	e135      	b.n	8013c96 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7d1b      	ldrb	r3, [r3, #20]
 8013a2e:	f003 0301 	and.w	r3, r3, #1
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d101      	bne.n	8013a3a <f_read+0x5a>
 8013a36:	2307      	movs	r3, #7
 8013a38:	e12d      	b.n	8013c96 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	68da      	ldr	r2, [r3, #12]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	699b      	ldr	r3, [r3, #24]
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	6a3b      	ldr	r3, [r7, #32]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	f240 811e 	bls.w	8013c8c <f_read+0x2ac>
 8013a50:	6a3b      	ldr	r3, [r7, #32]
 8013a52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013a54:	e11a      	b.n	8013c8c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	699b      	ldr	r3, [r3, #24]
 8013a5a:	697a      	ldr	r2, [r7, #20]
 8013a5c:	8992      	ldrh	r2, [r2, #12]
 8013a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a62:	fb01 f202 	mul.w	r2, r1, r2
 8013a66:	1a9b      	subs	r3, r3, r2
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f040 80d5 	bne.w	8013c18 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	699b      	ldr	r3, [r3, #24]
 8013a72:	697a      	ldr	r2, [r7, #20]
 8013a74:	8992      	ldrh	r2, [r2, #12]
 8013a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a7a:	697a      	ldr	r2, [r7, #20]
 8013a7c:	8952      	ldrh	r2, [r2, #10]
 8013a7e:	3a01      	subs	r2, #1
 8013a80:	4013      	ands	r3, r2
 8013a82:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d12f      	bne.n	8013aea <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	699b      	ldr	r3, [r3, #24]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d103      	bne.n	8013a9a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	633b      	str	r3, [r7, #48]	; 0x30
 8013a98:	e013      	b.n	8013ac2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d007      	beq.n	8013ab2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	699b      	ldr	r3, [r3, #24]
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f7fe fdcd 	bl	8012648 <clmt_clust>
 8013aae:	6338      	str	r0, [r7, #48]	; 0x30
 8013ab0:	e007      	b.n	8013ac2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	69db      	ldr	r3, [r3, #28]
 8013ab8:	4619      	mov	r1, r3
 8013aba:	4610      	mov	r0, r2
 8013abc:	f7fe fad7 	bl	801206e <get_fat>
 8013ac0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d804      	bhi.n	8013ad2 <f_read+0xf2>
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2202      	movs	r2, #2
 8013acc:	755a      	strb	r2, [r3, #21]
 8013ace:	2302      	movs	r3, #2
 8013ad0:	e0e1      	b.n	8013c96 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad8:	d104      	bne.n	8013ae4 <f_read+0x104>
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2201      	movs	r2, #1
 8013ade:	755a      	strb	r2, [r3, #21]
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	e0d8      	b.n	8013c96 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ae8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013aea:	697a      	ldr	r2, [r7, #20]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	69db      	ldr	r3, [r3, #28]
 8013af0:	4619      	mov	r1, r3
 8013af2:	4610      	mov	r0, r2
 8013af4:	f7fe fa9c 	bl	8012030 <clust2sect>
 8013af8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013afa:	69bb      	ldr	r3, [r7, #24]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d104      	bne.n	8013b0a <f_read+0x12a>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2202      	movs	r2, #2
 8013b04:	755a      	strb	r2, [r3, #21]
 8013b06:	2302      	movs	r3, #2
 8013b08:	e0c5      	b.n	8013c96 <f_read+0x2b6>
			sect += csect;
 8013b0a:	69ba      	ldr	r2, [r7, #24]
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	4413      	add	r3, r2
 8013b10:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	899b      	ldrh	r3, [r3, #12]
 8013b16:	461a      	mov	r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d041      	beq.n	8013baa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b26:	69fa      	ldr	r2, [r7, #28]
 8013b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2a:	4413      	add	r3, r2
 8013b2c:	697a      	ldr	r2, [r7, #20]
 8013b2e:	8952      	ldrh	r2, [r2, #10]
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d905      	bls.n	8013b40 <f_read+0x160>
					cc = fs->csize - csect;
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	895b      	ldrh	r3, [r3, #10]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	7858      	ldrb	r0, [r3, #1]
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b46:	69ba      	ldr	r2, [r7, #24]
 8013b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b4a:	f7fd fec5 	bl	80118d8 <disk_read>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d004      	beq.n	8013b5e <f_read+0x17e>
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2201      	movs	r2, #1
 8013b58:	755a      	strb	r2, [r3, #21]
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e09b      	b.n	8013c96 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	7d1b      	ldrb	r3, [r3, #20]
 8013b62:	b25b      	sxtb	r3, r3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	da18      	bge.n	8013b9a <f_read+0x1ba>
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	6a1a      	ldr	r2, [r3, #32]
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d911      	bls.n	8013b9a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	6a1a      	ldr	r2, [r3, #32]
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	1ad3      	subs	r3, r2, r3
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	8992      	ldrh	r2, [r2, #12]
 8013b82:	fb02 f303 	mul.w	r3, r2, r3
 8013b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b88:	18d0      	adds	r0, r2, r3
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	899b      	ldrh	r3, [r3, #12]
 8013b94:	461a      	mov	r2, r3
 8013b96:	f7fd ff7f 	bl	8011a98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	899b      	ldrh	r3, [r3, #12]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba2:	fb02 f303 	mul.w	r3, r2, r3
 8013ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013ba8:	e05c      	b.n	8013c64 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6a1b      	ldr	r3, [r3, #32]
 8013bae:	69ba      	ldr	r2, [r7, #24]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d02e      	beq.n	8013c12 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	7d1b      	ldrb	r3, [r3, #20]
 8013bb8:	b25b      	sxtb	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	da18      	bge.n	8013bf0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	7858      	ldrb	r0, [r3, #1]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6a1a      	ldr	r2, [r3, #32]
 8013bcc:	2301      	movs	r3, #1
 8013bce:	f7fd fea3 	bl	8011918 <disk_write>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d004      	beq.n	8013be2 <f_read+0x202>
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	755a      	strb	r2, [r3, #21]
 8013bde:	2301      	movs	r3, #1
 8013be0:	e059      	b.n	8013c96 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	7d1b      	ldrb	r3, [r3, #20]
 8013be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bea:	b2da      	uxtb	r2, r3
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	7858      	ldrb	r0, [r3, #1]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	69ba      	ldr	r2, [r7, #24]
 8013bfe:	f7fd fe6b 	bl	80118d8 <disk_read>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d004      	beq.n	8013c12 <f_read+0x232>
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	755a      	strb	r2, [r3, #21]
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e041      	b.n	8013c96 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	69ba      	ldr	r2, [r7, #24]
 8013c16:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	899b      	ldrh	r3, [r3, #12]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	699b      	ldr	r3, [r3, #24]
 8013c22:	697a      	ldr	r2, [r7, #20]
 8013c24:	8992      	ldrh	r2, [r2, #12]
 8013c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c2a:	fb01 f202 	mul.w	r2, r1, r2
 8013c2e:	1a9b      	subs	r3, r3, r2
 8013c30:	1ac3      	subs	r3, r0, r3
 8013c32:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d901      	bls.n	8013c40 <f_read+0x260>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	699b      	ldr	r3, [r3, #24]
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	8992      	ldrh	r2, [r2, #12]
 8013c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c52:	fb00 f202 	mul.w	r2, r0, r2
 8013c56:	1a9b      	subs	r3, r3, r2
 8013c58:	440b      	add	r3, r1
 8013c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c60:	f7fd ff1a 	bl	8011a98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c68:	4413      	add	r3, r2
 8013c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	699a      	ldr	r2, [r3, #24]
 8013c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c72:	441a      	add	r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	619a      	str	r2, [r3, #24]
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7e:	441a      	add	r2, r3
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	f47f aee1 	bne.w	8013a56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3738      	adds	r7, #56	; 0x38
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b08c      	sub	sp, #48	; 0x30
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	60f8      	str	r0, [r7, #12]
 8013ca6:	60b9      	str	r1, [r7, #8]
 8013ca8:	607a      	str	r2, [r7, #4]
 8013caa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f107 0210 	add.w	r2, r7, #16
 8013cbc:	4611      	mov	r1, r2
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7ff fc46 	bl	8013550 <validate>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d107      	bne.n	8013ce2 <f_write+0x44>
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	7d5b      	ldrb	r3, [r3, #21]
 8013cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d002      	beq.n	8013ce8 <f_write+0x4a>
 8013ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ce6:	e16a      	b.n	8013fbe <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	7d1b      	ldrb	r3, [r3, #20]
 8013cec:	f003 0302 	and.w	r3, r3, #2
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d101      	bne.n	8013cf8 <f_write+0x5a>
 8013cf4:	2307      	movs	r3, #7
 8013cf6:	e162      	b.n	8013fbe <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	699a      	ldr	r2, [r3, #24]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	441a      	add	r2, r3
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	f080 814c 	bcs.w	8013fa2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	699b      	ldr	r3, [r3, #24]
 8013d0e:	43db      	mvns	r3, r3
 8013d10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013d12:	e146      	b.n	8013fa2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	699b      	ldr	r3, [r3, #24]
 8013d18:	693a      	ldr	r2, [r7, #16]
 8013d1a:	8992      	ldrh	r2, [r2, #12]
 8013d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d20:	fb01 f202 	mul.w	r2, r1, r2
 8013d24:	1a9b      	subs	r3, r3, r2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	f040 80f1 	bne.w	8013f0e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	699b      	ldr	r3, [r3, #24]
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	8992      	ldrh	r2, [r2, #12]
 8013d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d38:	693a      	ldr	r2, [r7, #16]
 8013d3a:	8952      	ldrh	r2, [r2, #10]
 8013d3c:	3a01      	subs	r2, #1
 8013d3e:	4013      	ands	r3, r2
 8013d40:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d143      	bne.n	8013dd0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	699b      	ldr	r3, [r3, #24]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10c      	bne.n	8013d6a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	689b      	ldr	r3, [r3, #8]
 8013d54:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d11a      	bne.n	8013d92 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2100      	movs	r1, #0
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fe fbd9 	bl	8012518 <create_chain>
 8013d66:	62b8      	str	r0, [r7, #40]	; 0x28
 8013d68:	e013      	b.n	8013d92 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d007      	beq.n	8013d82 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	699b      	ldr	r3, [r3, #24]
 8013d76:	4619      	mov	r1, r3
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	f7fe fc65 	bl	8012648 <clmt_clust>
 8013d7e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013d80:	e007      	b.n	8013d92 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	69db      	ldr	r3, [r3, #28]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	4610      	mov	r0, r2
 8013d8c:	f7fe fbc4 	bl	8012518 <create_chain>
 8013d90:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 8109 	beq.w	8013fac <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	d104      	bne.n	8013daa <f_write+0x10c>
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2202      	movs	r2, #2
 8013da4:	755a      	strb	r2, [r3, #21]
 8013da6:	2302      	movs	r3, #2
 8013da8:	e109      	b.n	8013fbe <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013db0:	d104      	bne.n	8013dbc <f_write+0x11e>
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2201      	movs	r2, #1
 8013db6:	755a      	strb	r2, [r3, #21]
 8013db8:	2301      	movs	r3, #1
 8013dba:	e100      	b.n	8013fbe <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dc0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	689b      	ldr	r3, [r3, #8]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <f_write+0x132>
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	7d1b      	ldrb	r3, [r3, #20]
 8013dd4:	b25b      	sxtb	r3, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	da18      	bge.n	8013e0c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	7858      	ldrb	r0, [r3, #1]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6a1a      	ldr	r2, [r3, #32]
 8013de8:	2301      	movs	r3, #1
 8013dea:	f7fd fd95 	bl	8011918 <disk_write>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d004      	beq.n	8013dfe <f_write+0x160>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2201      	movs	r2, #1
 8013df8:	755a      	strb	r2, [r3, #21]
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e0df      	b.n	8013fbe <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	7d1b      	ldrb	r3, [r3, #20]
 8013e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e06:	b2da      	uxtb	r2, r3
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013e0c:	693a      	ldr	r2, [r7, #16]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	69db      	ldr	r3, [r3, #28]
 8013e12:	4619      	mov	r1, r3
 8013e14:	4610      	mov	r0, r2
 8013e16:	f7fe f90b 	bl	8012030 <clust2sect>
 8013e1a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d104      	bne.n	8013e2c <f_write+0x18e>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2202      	movs	r2, #2
 8013e26:	755a      	strb	r2, [r3, #21]
 8013e28:	2302      	movs	r3, #2
 8013e2a:	e0c8      	b.n	8013fbe <f_write+0x320>
			sect += csect;
 8013e2c:	697a      	ldr	r2, [r7, #20]
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	4413      	add	r3, r2
 8013e32:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	899b      	ldrh	r3, [r3, #12]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e40:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013e42:	6a3b      	ldr	r3, [r7, #32]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d043      	beq.n	8013ed0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013e48:	69ba      	ldr	r2, [r7, #24]
 8013e4a:	6a3b      	ldr	r3, [r7, #32]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	693a      	ldr	r2, [r7, #16]
 8013e50:	8952      	ldrh	r2, [r2, #10]
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d905      	bls.n	8013e62 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	895b      	ldrh	r3, [r3, #10]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	7858      	ldrb	r0, [r3, #1]
 8013e66:	6a3b      	ldr	r3, [r7, #32]
 8013e68:	697a      	ldr	r2, [r7, #20]
 8013e6a:	69f9      	ldr	r1, [r7, #28]
 8013e6c:	f7fd fd54 	bl	8011918 <disk_write>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d004      	beq.n	8013e80 <f_write+0x1e2>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	755a      	strb	r2, [r3, #21]
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e09e      	b.n	8013fbe <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	6a1a      	ldr	r2, [r3, #32]
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	6a3a      	ldr	r2, [r7, #32]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d918      	bls.n	8013ec0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6a1a      	ldr	r2, [r3, #32]
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	8992      	ldrh	r2, [r2, #12]
 8013ea0:	fb02 f303 	mul.w	r3, r2, r3
 8013ea4:	69fa      	ldr	r2, [r7, #28]
 8013ea6:	18d1      	adds	r1, r2, r3
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	899b      	ldrh	r3, [r3, #12]
 8013eac:	461a      	mov	r2, r3
 8013eae:	f7fd fdf3 	bl	8011a98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	7d1b      	ldrb	r3, [r3, #20]
 8013eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	899b      	ldrh	r3, [r3, #12]
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	6a3b      	ldr	r3, [r7, #32]
 8013ec8:	fb02 f303 	mul.w	r3, r2, r3
 8013ecc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013ece:	e04b      	b.n	8013f68 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	6a1b      	ldr	r3, [r3, #32]
 8013ed4:	697a      	ldr	r2, [r7, #20]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d016      	beq.n	8013f08 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	699a      	ldr	r2, [r3, #24]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d210      	bcs.n	8013f08 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	7858      	ldrb	r0, [r3, #1]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	697a      	ldr	r2, [r7, #20]
 8013ef4:	f7fd fcf0 	bl	80118d8 <disk_read>
 8013ef8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d004      	beq.n	8013f08 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2201      	movs	r2, #1
 8013f02:	755a      	strb	r2, [r3, #21]
 8013f04:	2301      	movs	r3, #1
 8013f06:	e05a      	b.n	8013fbe <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	899b      	ldrh	r3, [r3, #12]
 8013f12:	4618      	mov	r0, r3
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	699b      	ldr	r3, [r3, #24]
 8013f18:	693a      	ldr	r2, [r7, #16]
 8013f1a:	8992      	ldrh	r2, [r2, #12]
 8013f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f20:	fb01 f202 	mul.w	r2, r1, r2
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	1ac3      	subs	r3, r0, r3
 8013f28:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d901      	bls.n	8013f36 <f_write+0x298>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	699b      	ldr	r3, [r3, #24]
 8013f40:	693a      	ldr	r2, [r7, #16]
 8013f42:	8992      	ldrh	r2, [r2, #12]
 8013f44:	fbb3 f0f2 	udiv	r0, r3, r2
 8013f48:	fb00 f202 	mul.w	r2, r0, r2
 8013f4c:	1a9b      	subs	r3, r3, r2
 8013f4e:	440b      	add	r3, r1
 8013f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f52:	69f9      	ldr	r1, [r7, #28]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fd fd9f 	bl	8011a98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	7d1b      	ldrb	r3, [r3, #20]
 8013f5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013f68:	69fa      	ldr	r2, [r7, #28]
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	4413      	add	r3, r2
 8013f6e:	61fb      	str	r3, [r7, #28]
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	699a      	ldr	r2, [r3, #24]
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	441a      	add	r2, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	619a      	str	r2, [r3, #24]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	68da      	ldr	r2, [r3, #12]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	699b      	ldr	r3, [r3, #24]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	bf38      	it	cc
 8013f88:	461a      	movcc	r2, r3
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	60da      	str	r2, [r3, #12]
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f94:	441a      	add	r2, r3
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	601a      	str	r2, [r3, #0]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9e:	1ad3      	subs	r3, r2, r3
 8013fa0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f47f aeb5 	bne.w	8013d14 <f_write+0x76>
 8013faa:	e000      	b.n	8013fae <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013fac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	7d1b      	ldrb	r3, [r3, #20]
 8013fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fb6:	b2da      	uxtb	r2, r3
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3730      	adds	r7, #48	; 0x30
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b086      	sub	sp, #24
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f107 0208 	add.w	r2, r7, #8
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7ff faba 	bl	8013550 <validate>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013fe0:	7dfb      	ldrb	r3, [r7, #23]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d168      	bne.n	80140b8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	7d1b      	ldrb	r3, [r3, #20]
 8013fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d062      	beq.n	80140b8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	7d1b      	ldrb	r3, [r3, #20]
 8013ff6:	b25b      	sxtb	r3, r3
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	da15      	bge.n	8014028 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	7858      	ldrb	r0, [r3, #1]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6a1a      	ldr	r2, [r3, #32]
 801400a:	2301      	movs	r3, #1
 801400c:	f7fd fc84 	bl	8011918 <disk_write>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	d001      	beq.n	801401a <f_sync+0x54>
 8014016:	2301      	movs	r3, #1
 8014018:	e04f      	b.n	80140ba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	7d1b      	ldrb	r3, [r3, #20]
 801401e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014022:	b2da      	uxtb	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014028:	f7fd faaa 	bl	8011580 <get_fattime>
 801402c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801402e:	68ba      	ldr	r2, [r7, #8]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014034:	4619      	mov	r1, r3
 8014036:	4610      	mov	r0, r2
 8014038:	f7fd ff5c 	bl	8011ef4 <move_window>
 801403c:	4603      	mov	r3, r0
 801403e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014040:	7dfb      	ldrb	r3, [r7, #23]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d138      	bne.n	80140b8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801404a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	330b      	adds	r3, #11
 8014050:	781a      	ldrb	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	330b      	adds	r3, #11
 8014056:	f042 0220 	orr.w	r2, r2, #32
 801405a:	b2d2      	uxtb	r2, r2
 801405c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6818      	ldr	r0, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	689b      	ldr	r3, [r3, #8]
 8014066:	461a      	mov	r2, r3
 8014068:	68f9      	ldr	r1, [r7, #12]
 801406a:	f7fe fcea 	bl	8012a42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f103 021c 	add.w	r2, r3, #28
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	68db      	ldr	r3, [r3, #12]
 8014078:	4619      	mov	r1, r3
 801407a:	4610      	mov	r0, r2
 801407c:	f7fd fce0 	bl	8011a40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	3316      	adds	r3, #22
 8014084:	6939      	ldr	r1, [r7, #16]
 8014086:	4618      	mov	r0, r3
 8014088:	f7fd fcda 	bl	8011a40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	3312      	adds	r3, #18
 8014090:	2100      	movs	r1, #0
 8014092:	4618      	mov	r0, r3
 8014094:	f7fd fcb9 	bl	8011a0a <st_word>
					fs->wflag = 1;
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	2201      	movs	r2, #1
 801409c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fd ff55 	bl	8011f50 <sync_fs>
 80140a6:	4603      	mov	r3, r0
 80140a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	7d1b      	ldrb	r3, [r3, #20]
 80140ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80140b2:	b2da      	uxtb	r2, r3
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80140b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3718      	adds	r7, #24
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80140c2:	b580      	push	{r7, lr}
 80140c4:	b084      	sub	sp, #16
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff ff7b 	bl	8013fc6 <f_sync>
 80140d0:	4603      	mov	r3, r0
 80140d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80140d4:	7bfb      	ldrb	r3, [r7, #15]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d118      	bne.n	801410c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f107 0208 	add.w	r2, r7, #8
 80140e0:	4611      	mov	r1, r2
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ff fa34 	bl	8013550 <validate>
 80140e8:	4603      	mov	r3, r0
 80140ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80140ec:	7bfb      	ldrb	r3, [r7, #15]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10c      	bne.n	801410c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fd fe58 	bl	8011dac <dec_lock>
 80140fc:	4603      	mov	r3, r0
 80140fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014100:	7bfb      	ldrb	r3, [r7, #15]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d102      	bne.n	801410c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2200      	movs	r2, #0
 801410a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801410c:	7bfb      	ldrb	r3, [r7, #15]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3710      	adds	r7, #16
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b086      	sub	sp, #24
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
 801411e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d101      	bne.n	801412a <f_opendir+0x14>
 8014126:	2309      	movs	r3, #9
 8014128:	e064      	b.n	80141f4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801412e:	f107 010c 	add.w	r1, r7, #12
 8014132:	463b      	mov	r3, r7
 8014134:	2200      	movs	r2, #0
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe ff8a 	bl	8013050 <find_volume>
 801413c:	4603      	mov	r3, r0
 801413e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014140:	7dfb      	ldrb	r3, [r7, #23]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d14f      	bne.n	80141e6 <f_opendir+0xd0>
		obj->fs = fs;
 8014146:	68fa      	ldr	r2, [r7, #12]
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	4619      	mov	r1, r3
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7fe fe6d 	bl	8012e30 <follow_path>
 8014156:	4603      	mov	r3, r0
 8014158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801415a:	7dfb      	ldrb	r3, [r7, #23]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d13d      	bne.n	80141dc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014166:	b25b      	sxtb	r3, r3
 8014168:	2b00      	cmp	r3, #0
 801416a:	db12      	blt.n	8014192 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	799b      	ldrb	r3, [r3, #6]
 8014170:	f003 0310 	and.w	r3, r3, #16
 8014174:	2b00      	cmp	r3, #0
 8014176:	d00a      	beq.n	801418e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6a1b      	ldr	r3, [r3, #32]
 801417e:	4619      	mov	r1, r3
 8014180:	4610      	mov	r0, r2
 8014182:	f7fe fc3f 	bl	8012a04 <ld_clust>
 8014186:	4602      	mov	r2, r0
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	609a      	str	r2, [r3, #8]
 801418c:	e001      	b.n	8014192 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801418e:	2305      	movs	r3, #5
 8014190:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014192:	7dfb      	ldrb	r3, [r7, #23]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d121      	bne.n	80141dc <f_opendir+0xc6>
				obj->id = fs->id;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	88da      	ldrh	r2, [r3, #6]
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80141a0:	2100      	movs	r1, #0
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7fe fa88 	bl	80126b8 <dir_sdi>
 80141a8:	4603      	mov	r3, r0
 80141aa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80141ac:	7dfb      	ldrb	r3, [r7, #23]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d114      	bne.n	80141dc <f_opendir+0xc6>
					if (obj->sclust) {
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00d      	beq.n	80141d6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80141ba:	2100      	movs	r1, #0
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	f7fd fd67 	bl	8011c90 <inc_lock>
 80141c2:	4602      	mov	r2, r0
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	691b      	ldr	r3, [r3, #16]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d105      	bne.n	80141dc <f_opendir+0xc6>
 80141d0:	2312      	movs	r3, #18
 80141d2:	75fb      	strb	r3, [r7, #23]
 80141d4:	e002      	b.n	80141dc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	2200      	movs	r2, #0
 80141da:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80141dc:	7dfb      	ldrb	r3, [r7, #23]
 80141de:	2b04      	cmp	r3, #4
 80141e0:	d101      	bne.n	80141e6 <f_opendir+0xd0>
 80141e2:	2305      	movs	r3, #5
 80141e4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80141e6:	7dfb      	ldrb	r3, [r7, #23]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d002      	beq.n	80141f2 <f_opendir+0xdc>
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	2200      	movs	r2, #0
 80141f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80141f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3718      	adds	r7, #24
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f107 0208 	add.w	r2, r7, #8
 801420a:	4611      	mov	r1, r2
 801420c:	4618      	mov	r0, r3
 801420e:	f7ff f99f 	bl	8013550 <validate>
 8014212:	4603      	mov	r3, r0
 8014214:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014216:	7bfb      	ldrb	r3, [r7, #15]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d110      	bne.n	801423e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	691b      	ldr	r3, [r3, #16]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d006      	beq.n	8014232 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	691b      	ldr	r3, [r3, #16]
 8014228:	4618      	mov	r0, r3
 801422a:	f7fd fdbf 	bl	8011dac <dec_lock>
 801422e:	4603      	mov	r3, r0
 8014230:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014232:	7bfb      	ldrb	r3, [r7, #15]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d102      	bne.n	801423e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2200      	movs	r2, #0
 801423c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f107 0208 	add.w	r2, r7, #8
 8014258:	4611      	mov	r1, r2
 801425a:	4618      	mov	r0, r3
 801425c:	f7ff f978 	bl	8013550 <validate>
 8014260:	4603      	mov	r3, r0
 8014262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014264:	7bfb      	ldrb	r3, [r7, #15]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d126      	bne.n	80142b8 <f_readdir+0x70>
		if (!fno) {
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d106      	bne.n	801427e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014270:	2100      	movs	r1, #0
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7fe fa20 	bl	80126b8 <dir_sdi>
 8014278:	4603      	mov	r3, r0
 801427a:	73fb      	strb	r3, [r7, #15]
 801427c:	e01c      	b.n	80142b8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801427e:	2100      	movs	r1, #0
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7fe fbfe 	bl	8012a82 <dir_read>
 8014286:	4603      	mov	r3, r0
 8014288:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801428a:	7bfb      	ldrb	r3, [r7, #15]
 801428c:	2b04      	cmp	r3, #4
 801428e:	d101      	bne.n	8014294 <f_readdir+0x4c>
 8014290:	2300      	movs	r3, #0
 8014292:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014294:	7bfb      	ldrb	r3, [r7, #15]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d10e      	bne.n	80142b8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801429a:	6839      	ldr	r1, [r7, #0]
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7fe fcd4 	bl	8012c4a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80142a2:	2100      	movs	r1, #0
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7fe fa90 	bl	80127ca <dir_next>
 80142aa:	4603      	mov	r3, r0
 80142ac:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80142ae:	7bfb      	ldrb	r3, [r7, #15]
 80142b0:	2b04      	cmp	r3, #4
 80142b2:	d101      	bne.n	80142b8 <f_readdir+0x70>
 80142b4:	2300      	movs	r3, #0
 80142b6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80142b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3710      	adds	r7, #16
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}

080142c2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b090      	sub	sp, #64	; 0x40
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
 80142ca:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80142cc:	f107 010c 	add.w	r1, r7, #12
 80142d0:	1d3b      	adds	r3, r7, #4
 80142d2:	2200      	movs	r2, #0
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fe febb 	bl	8013050 <find_volume>
 80142da:	4603      	mov	r3, r0
 80142dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80142e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d11f      	bne.n	8014328 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	f107 030c 	add.w	r3, r7, #12
 80142ee:	4611      	mov	r1, r2
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fe fd9d 	bl	8012e30 <follow_path>
 80142f6:	4603      	mov	r3, r0
 80142f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80142fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014300:	2b00      	cmp	r3, #0
 8014302:	d111      	bne.n	8014328 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014304:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014308:	b25b      	sxtb	r3, r3
 801430a:	2b00      	cmp	r3, #0
 801430c:	da03      	bge.n	8014316 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801430e:	2306      	movs	r3, #6
 8014310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014314:	e008      	b.n	8014328 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d005      	beq.n	8014328 <f_stat+0x66>
 801431c:	f107 030c 	add.w	r3, r7, #12
 8014320:	6839      	ldr	r1, [r7, #0]
 8014322:	4618      	mov	r0, r3
 8014324:	f7fe fc91 	bl	8012c4a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801432c:	4618      	mov	r0, r3
 801432e:	3740      	adds	r7, #64	; 0x40
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}

08014334 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b092      	sub	sp, #72	; 0x48
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014340:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014344:	f107 030c 	add.w	r3, r7, #12
 8014348:	2200      	movs	r2, #0
 801434a:	4618      	mov	r0, r3
 801434c:	f7fe fe80 	bl	8013050 <find_volume>
 8014350:	4603      	mov	r3, r0
 8014352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8014356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801435a:	2b00      	cmp	r3, #0
 801435c:	f040 8099 	bne.w	8014492 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8014366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014368:	695a      	ldr	r2, [r3, #20]
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	699b      	ldr	r3, [r3, #24]
 801436e:	3b02      	subs	r3, #2
 8014370:	429a      	cmp	r2, r3
 8014372:	d804      	bhi.n	801437e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014376:	695a      	ldr	r2, [r3, #20]
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	601a      	str	r2, [r3, #0]
 801437c:	e089      	b.n	8014492 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801437e:	2300      	movs	r3, #0
 8014380:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d128      	bne.n	80143dc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801438a:	2302      	movs	r3, #2
 801438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014392:	f107 0314 	add.w	r3, r7, #20
 8014396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014398:	4618      	mov	r0, r3
 801439a:	f7fd fe68 	bl	801206e <get_fat>
 801439e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80143a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143a6:	d103      	bne.n	80143b0 <f_getfree+0x7c>
 80143a8:	2301      	movs	r3, #1
 80143aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80143ae:	e063      	b.n	8014478 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d103      	bne.n	80143be <f_getfree+0x8a>
 80143b6:	2302      	movs	r3, #2
 80143b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80143bc:	e05c      	b.n	8014478 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <f_getfree+0x96>
 80143c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143c6:	3301      	adds	r3, #1
 80143c8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80143ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143cc:	3301      	adds	r3, #1
 80143ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80143d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d2:	699b      	ldr	r3, [r3, #24]
 80143d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d3db      	bcc.n	8014392 <f_getfree+0x5e>
 80143da:	e04d      	b.n	8014478 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	699b      	ldr	r3, [r3, #24]
 80143e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80143e8:	2300      	movs	r3, #0
 80143ea:	637b      	str	r3, [r7, #52]	; 0x34
 80143ec:	2300      	movs	r3, #0
 80143ee:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80143f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d113      	bne.n	801441e <f_getfree+0xea>
							res = move_window(fs, sect++);
 80143f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fa:	1c5a      	adds	r2, r3, #1
 80143fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80143fe:	4619      	mov	r1, r3
 8014400:	f7fd fd78 	bl	8011ef4 <move_window>
 8014404:	4603      	mov	r3, r0
 8014406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801440a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801440e:	2b00      	cmp	r3, #0
 8014410:	d131      	bne.n	8014476 <f_getfree+0x142>
							p = fs->win;
 8014412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014414:	3334      	adds	r3, #52	; 0x34
 8014416:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8014418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801441a:	899b      	ldrh	r3, [r3, #12]
 801441c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	2b02      	cmp	r3, #2
 8014424:	d10f      	bne.n	8014446 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8014426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014428:	f7fd fab4 	bl	8011994 <ld_word>
 801442c:	4603      	mov	r3, r0
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <f_getfree+0x104>
 8014432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014434:	3301      	adds	r3, #1
 8014436:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8014438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443a:	3302      	adds	r3, #2
 801443c:	633b      	str	r3, [r7, #48]	; 0x30
 801443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014440:	3b02      	subs	r3, #2
 8014442:	637b      	str	r3, [r7, #52]	; 0x34
 8014444:	e010      	b.n	8014468 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8014446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014448:	f7fd fabc 	bl	80119c4 <ld_dword>
 801444c:	4603      	mov	r3, r0
 801444e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014452:	2b00      	cmp	r3, #0
 8014454:	d102      	bne.n	801445c <f_getfree+0x128>
 8014456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014458:	3301      	adds	r3, #1
 801445a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	3304      	adds	r3, #4
 8014460:	633b      	str	r3, [r7, #48]	; 0x30
 8014462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014464:	3b04      	subs	r3, #4
 8014466:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8014468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446a:	3b01      	subs	r3, #1
 801446c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1bd      	bne.n	80143f0 <f_getfree+0xbc>
 8014474:	e000      	b.n	8014478 <f_getfree+0x144>
							if (res != FR_OK) break;
 8014476:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801447c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014482:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014486:	791a      	ldrb	r2, [r3, #4]
 8014488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448a:	f042 0201 	orr.w	r2, r2, #1
 801448e:	b2d2      	uxtb	r2, r2
 8014490:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014492:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014496:	4618      	mov	r0, r3
 8014498:	3748      	adds	r7, #72	; 0x48
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}

0801449e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b096      	sub	sp, #88	; 0x58
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80144a6:	f107 0108 	add.w	r1, r7, #8
 80144aa:	1d3b      	adds	r3, r7, #4
 80144ac:	2202      	movs	r2, #2
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fe fdce 	bl	8013050 <find_volume>
 80144b4:	4603      	mov	r3, r0
 80144b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80144be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f040 80f2 	bne.w	80146ac <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	f107 030c 	add.w	r3, r7, #12
 80144ce:	4611      	mov	r1, r2
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7fe fcad 	bl	8012e30 <follow_path>
 80144d6:	4603      	mov	r3, r0
 80144d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80144dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <f_mkdir+0x4c>
 80144e4:	2308      	movs	r3, #8
 80144e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80144ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144ee:	2b04      	cmp	r3, #4
 80144f0:	f040 80dc 	bne.w	80146ac <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80144f4:	f107 030c 	add.w	r3, r7, #12
 80144f8:	2100      	movs	r1, #0
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe f80c 	bl	8012518 <create_chain>
 8014500:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	895b      	ldrh	r3, [r3, #10]
 8014506:	461a      	mov	r2, r3
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	899b      	ldrh	r3, [r3, #12]
 801450c:	fb02 f303 	mul.w	r3, r2, r3
 8014510:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014512:	2300      	movs	r3, #0
 8014514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801451a:	2b00      	cmp	r3, #0
 801451c:	d102      	bne.n	8014524 <f_mkdir+0x86>
 801451e:	2307      	movs	r3, #7
 8014520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014526:	2b01      	cmp	r3, #1
 8014528:	d102      	bne.n	8014530 <f_mkdir+0x92>
 801452a:	2302      	movs	r3, #2
 801452c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014536:	d102      	bne.n	801453e <f_mkdir+0xa0>
 8014538:	2301      	movs	r3, #1
 801453a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801453e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014542:	2b00      	cmp	r3, #0
 8014544:	d106      	bne.n	8014554 <f_mkdir+0xb6>
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	4618      	mov	r0, r3
 801454a:	f7fd fc8f 	bl	8011e6c <sync_window>
 801454e:	4603      	mov	r3, r0
 8014550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014554:	f7fd f814 	bl	8011580 <get_fattime>
 8014558:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801455a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801455e:	2b00      	cmp	r3, #0
 8014560:	d16c      	bne.n	801463c <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014566:	4618      	mov	r0, r3
 8014568:	f7fd fd62 	bl	8012030 <clust2sect>
 801456c:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	3334      	adds	r3, #52	; 0x34
 8014572:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	899b      	ldrh	r3, [r3, #12]
 8014578:	461a      	mov	r2, r3
 801457a:	2100      	movs	r1, #0
 801457c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801457e:	f7fd faac 	bl	8011ada <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014582:	220b      	movs	r2, #11
 8014584:	2120      	movs	r1, #32
 8014586:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014588:	f7fd faa7 	bl	8011ada <mem_set>
					dir[DIR_Name] = '.';
 801458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801458e:	222e      	movs	r2, #46	; 0x2e
 8014590:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014594:	330b      	adds	r3, #11
 8014596:	2210      	movs	r2, #16
 8014598:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801459a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801459c:	3316      	adds	r3, #22
 801459e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fd fa4d 	bl	8011a40 <st_dword>
					st_clust(fs, dir, dcl);
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fe fa48 	bl	8012a42 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80145b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b4:	3320      	adds	r3, #32
 80145b6:	2220      	movs	r2, #32
 80145b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fd fa6c 	bl	8011a98 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80145c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c2:	3321      	adds	r3, #33	; 0x21
 80145c4:	222e      	movs	r2, #46	; 0x2e
 80145c6:	701a      	strb	r2, [r3, #0]
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	2b03      	cmp	r3, #3
 80145d2:	d106      	bne.n	80145e2 <f_mkdir+0x144>
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145da:	429a      	cmp	r2, r3
 80145dc:	d101      	bne.n	80145e2 <f_mkdir+0x144>
 80145de:	2300      	movs	r3, #0
 80145e0:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80145e2:	68b8      	ldr	r0, [r7, #8]
 80145e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145e6:	3320      	adds	r3, #32
 80145e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145ea:	4619      	mov	r1, r3
 80145ec:	f7fe fa29 	bl	8012a42 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	895b      	ldrh	r3, [r3, #10]
 80145f4:	653b      	str	r3, [r7, #80]	; 0x50
 80145f6:	e01c      	b.n	8014632 <f_mkdir+0x194>
					fs->winsect = dsc++;
 80145f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145fa:	1c5a      	adds	r2, r3, #1
 80145fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80145fe:	68ba      	ldr	r2, [r7, #8]
 8014600:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	2201      	movs	r2, #1
 8014606:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	4618      	mov	r0, r3
 801460c:	f7fd fc2e 	bl	8011e6c <sync_window>
 8014610:	4603      	mov	r3, r0
 8014612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801461a:	2b00      	cmp	r3, #0
 801461c:	d10d      	bne.n	801463a <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	899b      	ldrh	r3, [r3, #12]
 8014622:	461a      	mov	r2, r3
 8014624:	2100      	movs	r1, #0
 8014626:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014628:	f7fd fa57 	bl	8011ada <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801462c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801462e:	3b01      	subs	r3, #1
 8014630:	653b      	str	r3, [r7, #80]	; 0x50
 8014632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014634:	2b00      	cmp	r3, #0
 8014636:	d1df      	bne.n	80145f8 <f_mkdir+0x15a>
 8014638:	e000      	b.n	801463c <f_mkdir+0x19e>
					if (res != FR_OK) break;
 801463a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801463c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014640:	2b00      	cmp	r3, #0
 8014642:	d107      	bne.n	8014654 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014644:	f107 030c 	add.w	r3, r7, #12
 8014648:	4618      	mov	r0, r3
 801464a:	f7fe facc 	bl	8012be6 <dir_register>
 801464e:	4603      	mov	r3, r0
 8014650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014658:	2b00      	cmp	r3, #0
 801465a:	d120      	bne.n	801469e <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801465e:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014662:	3316      	adds	r3, #22
 8014664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014666:	4618      	mov	r0, r3
 8014668:	f7fd f9ea 	bl	8011a40 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014672:	4618      	mov	r0, r3
 8014674:	f7fe f9e5 	bl	8012a42 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801467a:	330b      	adds	r3, #11
 801467c:	2210      	movs	r2, #16
 801467e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	2201      	movs	r2, #1
 8014684:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10e      	bne.n	80146ac <f_mkdir+0x20e>
					res = sync_fs(fs);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	4618      	mov	r0, r3
 8014692:	f7fd fc5d 	bl	8011f50 <sync_fs>
 8014696:	4603      	mov	r3, r0
 8014698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801469c:	e006      	b.n	80146ac <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801469e:	f107 030c 	add.w	r3, r7, #12
 80146a2:	2200      	movs	r2, #0
 80146a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fd fed1 	bl	801244e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80146ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3758      	adds	r7, #88	; 0x58
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b087      	sub	sp, #28
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	4613      	mov	r3, r2
 80146c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80146c6:	2301      	movs	r3, #1
 80146c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80146ce:	4b1f      	ldr	r3, [pc, #124]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146d0:	7a5b      	ldrb	r3, [r3, #9]
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d131      	bne.n	801473c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80146d8:	4b1c      	ldr	r3, [pc, #112]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146da:	7a5b      	ldrb	r3, [r3, #9]
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	461a      	mov	r2, r3
 80146e0:	4b1a      	ldr	r3, [pc, #104]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146e2:	2100      	movs	r1, #0
 80146e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80146e6:	4b19      	ldr	r3, [pc, #100]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146e8:	7a5b      	ldrb	r3, [r3, #9]
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	4a17      	ldr	r2, [pc, #92]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80146f6:	4b15      	ldr	r3, [pc, #84]	; (801474c <FATFS_LinkDriverEx+0x94>)
 80146f8:	7a5b      	ldrb	r3, [r3, #9]
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	461a      	mov	r2, r3
 80146fe:	4b13      	ldr	r3, [pc, #76]	; (801474c <FATFS_LinkDriverEx+0x94>)
 8014700:	4413      	add	r3, r2
 8014702:	79fa      	ldrb	r2, [r7, #7]
 8014704:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014706:	4b11      	ldr	r3, [pc, #68]	; (801474c <FATFS_LinkDriverEx+0x94>)
 8014708:	7a5b      	ldrb	r3, [r3, #9]
 801470a:	b2db      	uxtb	r3, r3
 801470c:	1c5a      	adds	r2, r3, #1
 801470e:	b2d1      	uxtb	r1, r2
 8014710:	4a0e      	ldr	r2, [pc, #56]	; (801474c <FATFS_LinkDriverEx+0x94>)
 8014712:	7251      	strb	r1, [r2, #9]
 8014714:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014716:	7dbb      	ldrb	r3, [r7, #22]
 8014718:	3330      	adds	r3, #48	; 0x30
 801471a:	b2da      	uxtb	r2, r3
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	3301      	adds	r3, #1
 8014724:	223a      	movs	r2, #58	; 0x3a
 8014726:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	3302      	adds	r3, #2
 801472c:	222f      	movs	r2, #47	; 0x2f
 801472e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	3303      	adds	r3, #3
 8014734:	2200      	movs	r2, #0
 8014736:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014738:	2300      	movs	r3, #0
 801473a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801473c:	7dfb      	ldrb	r3, [r7, #23]
}
 801473e:	4618      	mov	r0, r3
 8014740:	371c      	adds	r7, #28
 8014742:	46bd      	mov	sp, r7
 8014744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014748:	4770      	bx	lr
 801474a:	bf00      	nop
 801474c:	20005d68 	.word	0x20005d68

08014750 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801475a:	2200      	movs	r2, #0
 801475c:	6839      	ldr	r1, [r7, #0]
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7ff ffaa 	bl	80146b8 <FATFS_LinkDriverEx>
 8014764:	4603      	mov	r3, r0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
	...

08014770 <asctime>:
 8014770:	4b0d      	ldr	r3, [pc, #52]	; (80147a8 <asctime+0x38>)
 8014772:	b570      	push	{r4, r5, r6, lr}
 8014774:	681d      	ldr	r5, [r3, #0]
 8014776:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8014778:	4604      	mov	r4, r0
 801477a:	b976      	cbnz	r6, 801479a <asctime+0x2a>
 801477c:	201a      	movs	r0, #26
 801477e:	f000 f8a1 	bl	80148c4 <malloc>
 8014782:	4602      	mov	r2, r0
 8014784:	6428      	str	r0, [r5, #64]	; 0x40
 8014786:	b920      	cbnz	r0, 8014792 <asctime+0x22>
 8014788:	4b08      	ldr	r3, [pc, #32]	; (80147ac <asctime+0x3c>)
 801478a:	4809      	ldr	r0, [pc, #36]	; (80147b0 <asctime+0x40>)
 801478c:	2137      	movs	r1, #55	; 0x37
 801478e:	f000 f837 	bl	8014800 <__assert_func>
 8014792:	221a      	movs	r2, #26
 8014794:	4631      	mov	r1, r6
 8014796:	f000 f8b3 	bl	8014900 <memset>
 801479a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801479c:	4620      	mov	r0, r4
 801479e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147a2:	f000 b807 	b.w	80147b4 <asctime_r>
 80147a6:	bf00      	nop
 80147a8:	20000248 	.word	0x20000248
 80147ac:	0807301c 	.word	0x0807301c
 80147b0:	08073033 	.word	0x08073033

080147b4 <asctime_r>:
 80147b4:	b510      	push	{r4, lr}
 80147b6:	460c      	mov	r4, r1
 80147b8:	6941      	ldr	r1, [r0, #20]
 80147ba:	6903      	ldr	r3, [r0, #16]
 80147bc:	6982      	ldr	r2, [r0, #24]
 80147be:	b086      	sub	sp, #24
 80147c0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80147c4:	9104      	str	r1, [sp, #16]
 80147c6:	6801      	ldr	r1, [r0, #0]
 80147c8:	9103      	str	r1, [sp, #12]
 80147ca:	6841      	ldr	r1, [r0, #4]
 80147cc:	9102      	str	r1, [sp, #8]
 80147ce:	6881      	ldr	r1, [r0, #8]
 80147d0:	9101      	str	r1, [sp, #4]
 80147d2:	68c1      	ldr	r1, [r0, #12]
 80147d4:	9100      	str	r1, [sp, #0]
 80147d6:	4907      	ldr	r1, [pc, #28]	; (80147f4 <asctime_r+0x40>)
 80147d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80147dc:	440b      	add	r3, r1
 80147de:	4906      	ldr	r1, [pc, #24]	; (80147f8 <asctime_r+0x44>)
 80147e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80147e4:	440a      	add	r2, r1
 80147e6:	4620      	mov	r0, r4
 80147e8:	4904      	ldr	r1, [pc, #16]	; (80147fc <asctime_r+0x48>)
 80147ea:	f001 f9b7 	bl	8015b5c <siprintf>
 80147ee:	4620      	mov	r0, r4
 80147f0:	b006      	add	sp, #24
 80147f2:	bd10      	pop	{r4, pc}
 80147f4:	080730c4 	.word	0x080730c4
 80147f8:	080730af 	.word	0x080730af
 80147fc:	0807308f 	.word	0x0807308f

08014800 <__assert_func>:
 8014800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014802:	4614      	mov	r4, r2
 8014804:	461a      	mov	r2, r3
 8014806:	4b09      	ldr	r3, [pc, #36]	; (801482c <__assert_func+0x2c>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	4605      	mov	r5, r0
 801480c:	68d8      	ldr	r0, [r3, #12]
 801480e:	b14c      	cbz	r4, 8014824 <__assert_func+0x24>
 8014810:	4b07      	ldr	r3, [pc, #28]	; (8014830 <__assert_func+0x30>)
 8014812:	9100      	str	r1, [sp, #0]
 8014814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014818:	4906      	ldr	r1, [pc, #24]	; (8014834 <__assert_func+0x34>)
 801481a:	462b      	mov	r3, r5
 801481c:	f000 f81c 	bl	8014858 <fiprintf>
 8014820:	f002 fca0 	bl	8017164 <abort>
 8014824:	4b04      	ldr	r3, [pc, #16]	; (8014838 <__assert_func+0x38>)
 8014826:	461c      	mov	r4, r3
 8014828:	e7f3      	b.n	8014812 <__assert_func+0x12>
 801482a:	bf00      	nop
 801482c:	20000248 	.word	0x20000248
 8014830:	080730e8 	.word	0x080730e8
 8014834:	080730f5 	.word	0x080730f5
 8014838:	080730ae 	.word	0x080730ae

0801483c <atof>:
 801483c:	2100      	movs	r1, #0
 801483e:	f002 b88d 	b.w	801695c <strtod>

08014842 <atoi>:
 8014842:	220a      	movs	r2, #10
 8014844:	2100      	movs	r1, #0
 8014846:	f002 b975 	b.w	8016b34 <strtol>
	...

0801484c <__errno>:
 801484c:	4b01      	ldr	r3, [pc, #4]	; (8014854 <__errno+0x8>)
 801484e:	6818      	ldr	r0, [r3, #0]
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop
 8014854:	20000248 	.word	0x20000248

08014858 <fiprintf>:
 8014858:	b40e      	push	{r1, r2, r3}
 801485a:	b503      	push	{r0, r1, lr}
 801485c:	4601      	mov	r1, r0
 801485e:	ab03      	add	r3, sp, #12
 8014860:	4805      	ldr	r0, [pc, #20]	; (8014878 <fiprintf+0x20>)
 8014862:	f853 2b04 	ldr.w	r2, [r3], #4
 8014866:	6800      	ldr	r0, [r0, #0]
 8014868:	9301      	str	r3, [sp, #4]
 801486a:	f000 fbcd 	bl	8015008 <_vfiprintf_r>
 801486e:	b002      	add	sp, #8
 8014870:	f85d eb04 	ldr.w	lr, [sp], #4
 8014874:	b003      	add	sp, #12
 8014876:	4770      	bx	lr
 8014878:	20000248 	.word	0x20000248

0801487c <__libc_init_array>:
 801487c:	b570      	push	{r4, r5, r6, lr}
 801487e:	4d0d      	ldr	r5, [pc, #52]	; (80148b4 <__libc_init_array+0x38>)
 8014880:	4c0d      	ldr	r4, [pc, #52]	; (80148b8 <__libc_init_array+0x3c>)
 8014882:	1b64      	subs	r4, r4, r5
 8014884:	10a4      	asrs	r4, r4, #2
 8014886:	2600      	movs	r6, #0
 8014888:	42a6      	cmp	r6, r4
 801488a:	d109      	bne.n	80148a0 <__libc_init_array+0x24>
 801488c:	4d0b      	ldr	r5, [pc, #44]	; (80148bc <__libc_init_array+0x40>)
 801488e:	4c0c      	ldr	r4, [pc, #48]	; (80148c0 <__libc_init_array+0x44>)
 8014890:	f008 f894 	bl	801c9bc <_init>
 8014894:	1b64      	subs	r4, r4, r5
 8014896:	10a4      	asrs	r4, r4, #2
 8014898:	2600      	movs	r6, #0
 801489a:	42a6      	cmp	r6, r4
 801489c:	d105      	bne.n	80148aa <__libc_init_array+0x2e>
 801489e:	bd70      	pop	{r4, r5, r6, pc}
 80148a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80148a4:	4798      	blx	r3
 80148a6:	3601      	adds	r6, #1
 80148a8:	e7ee      	b.n	8014888 <__libc_init_array+0xc>
 80148aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80148ae:	4798      	blx	r3
 80148b0:	3601      	adds	r6, #1
 80148b2:	e7f2      	b.n	801489a <__libc_init_array+0x1e>
 80148b4:	080738f8 	.word	0x080738f8
 80148b8:	080738f8 	.word	0x080738f8
 80148bc:	080738f8 	.word	0x080738f8
 80148c0:	080738fc 	.word	0x080738fc

080148c4 <malloc>:
 80148c4:	4b02      	ldr	r3, [pc, #8]	; (80148d0 <malloc+0xc>)
 80148c6:	4601      	mov	r1, r0
 80148c8:	6818      	ldr	r0, [r3, #0]
 80148ca:	f000 baff 	b.w	8014ecc <_malloc_r>
 80148ce:	bf00      	nop
 80148d0:	20000248 	.word	0x20000248

080148d4 <free>:
 80148d4:	4b02      	ldr	r3, [pc, #8]	; (80148e0 <free+0xc>)
 80148d6:	4601      	mov	r1, r0
 80148d8:	6818      	ldr	r0, [r3, #0]
 80148da:	f000 ba8b 	b.w	8014df4 <_free_r>
 80148de:	bf00      	nop
 80148e0:	20000248 	.word	0x20000248

080148e4 <memcpy>:
 80148e4:	440a      	add	r2, r1
 80148e6:	4291      	cmp	r1, r2
 80148e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80148ec:	d100      	bne.n	80148f0 <memcpy+0xc>
 80148ee:	4770      	bx	lr
 80148f0:	b510      	push	{r4, lr}
 80148f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148fa:	4291      	cmp	r1, r2
 80148fc:	d1f9      	bne.n	80148f2 <memcpy+0xe>
 80148fe:	bd10      	pop	{r4, pc}

08014900 <memset>:
 8014900:	4402      	add	r2, r0
 8014902:	4603      	mov	r3, r0
 8014904:	4293      	cmp	r3, r2
 8014906:	d100      	bne.n	801490a <memset+0xa>
 8014908:	4770      	bx	lr
 801490a:	f803 1b01 	strb.w	r1, [r3], #1
 801490e:	e7f9      	b.n	8014904 <memset+0x4>

08014910 <validate_structure>:
 8014910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014912:	6801      	ldr	r1, [r0, #0]
 8014914:	293b      	cmp	r1, #59	; 0x3b
 8014916:	4604      	mov	r4, r0
 8014918:	d911      	bls.n	801493e <validate_structure+0x2e>
 801491a:	223c      	movs	r2, #60	; 0x3c
 801491c:	4668      	mov	r0, sp
 801491e:	f002 fc39 	bl	8017194 <div>
 8014922:	9a01      	ldr	r2, [sp, #4]
 8014924:	6863      	ldr	r3, [r4, #4]
 8014926:	9900      	ldr	r1, [sp, #0]
 8014928:	2a00      	cmp	r2, #0
 801492a:	440b      	add	r3, r1
 801492c:	6063      	str	r3, [r4, #4]
 801492e:	bfbb      	ittet	lt
 8014930:	323c      	addlt	r2, #60	; 0x3c
 8014932:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014936:	6022      	strge	r2, [r4, #0]
 8014938:	6022      	strlt	r2, [r4, #0]
 801493a:	bfb8      	it	lt
 801493c:	6063      	strlt	r3, [r4, #4]
 801493e:	6861      	ldr	r1, [r4, #4]
 8014940:	293b      	cmp	r1, #59	; 0x3b
 8014942:	d911      	bls.n	8014968 <validate_structure+0x58>
 8014944:	223c      	movs	r2, #60	; 0x3c
 8014946:	4668      	mov	r0, sp
 8014948:	f002 fc24 	bl	8017194 <div>
 801494c:	9a01      	ldr	r2, [sp, #4]
 801494e:	68a3      	ldr	r3, [r4, #8]
 8014950:	9900      	ldr	r1, [sp, #0]
 8014952:	2a00      	cmp	r2, #0
 8014954:	440b      	add	r3, r1
 8014956:	60a3      	str	r3, [r4, #8]
 8014958:	bfbb      	ittet	lt
 801495a:	323c      	addlt	r2, #60	; 0x3c
 801495c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014960:	6062      	strge	r2, [r4, #4]
 8014962:	6062      	strlt	r2, [r4, #4]
 8014964:	bfb8      	it	lt
 8014966:	60a3      	strlt	r3, [r4, #8]
 8014968:	68a1      	ldr	r1, [r4, #8]
 801496a:	2917      	cmp	r1, #23
 801496c:	d911      	bls.n	8014992 <validate_structure+0x82>
 801496e:	2218      	movs	r2, #24
 8014970:	4668      	mov	r0, sp
 8014972:	f002 fc0f 	bl	8017194 <div>
 8014976:	9a01      	ldr	r2, [sp, #4]
 8014978:	68e3      	ldr	r3, [r4, #12]
 801497a:	9900      	ldr	r1, [sp, #0]
 801497c:	2a00      	cmp	r2, #0
 801497e:	440b      	add	r3, r1
 8014980:	60e3      	str	r3, [r4, #12]
 8014982:	bfbb      	ittet	lt
 8014984:	3218      	addlt	r2, #24
 8014986:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801498a:	60a2      	strge	r2, [r4, #8]
 801498c:	60a2      	strlt	r2, [r4, #8]
 801498e:	bfb8      	it	lt
 8014990:	60e3      	strlt	r3, [r4, #12]
 8014992:	6921      	ldr	r1, [r4, #16]
 8014994:	290b      	cmp	r1, #11
 8014996:	d911      	bls.n	80149bc <validate_structure+0xac>
 8014998:	220c      	movs	r2, #12
 801499a:	4668      	mov	r0, sp
 801499c:	f002 fbfa 	bl	8017194 <div>
 80149a0:	9a01      	ldr	r2, [sp, #4]
 80149a2:	6963      	ldr	r3, [r4, #20]
 80149a4:	9900      	ldr	r1, [sp, #0]
 80149a6:	2a00      	cmp	r2, #0
 80149a8:	440b      	add	r3, r1
 80149aa:	6163      	str	r3, [r4, #20]
 80149ac:	bfbb      	ittet	lt
 80149ae:	320c      	addlt	r2, #12
 80149b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80149b4:	6122      	strge	r2, [r4, #16]
 80149b6:	6122      	strlt	r2, [r4, #16]
 80149b8:	bfb8      	it	lt
 80149ba:	6163      	strlt	r3, [r4, #20]
 80149bc:	6963      	ldr	r3, [r4, #20]
 80149be:	0798      	lsls	r0, r3, #30
 80149c0:	d120      	bne.n	8014a04 <validate_structure+0xf4>
 80149c2:	2164      	movs	r1, #100	; 0x64
 80149c4:	fb93 f2f1 	sdiv	r2, r3, r1
 80149c8:	fb01 3212 	mls	r2, r1, r2, r3
 80149cc:	b9e2      	cbnz	r2, 8014a08 <validate_structure+0xf8>
 80149ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80149d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80149d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80149da:	fb02 3311 	mls	r3, r2, r1, r3
 80149de:	2b00      	cmp	r3, #0
 80149e0:	bf14      	ite	ne
 80149e2:	231c      	movne	r3, #28
 80149e4:	231d      	moveq	r3, #29
 80149e6:	68e2      	ldr	r2, [r4, #12]
 80149e8:	2a00      	cmp	r2, #0
 80149ea:	dc0f      	bgt.n	8014a0c <validate_structure+0xfc>
 80149ec:	4f33      	ldr	r7, [pc, #204]	; (8014abc <validate_structure+0x1ac>)
 80149ee:	260b      	movs	r6, #11
 80149f0:	2064      	movs	r0, #100	; 0x64
 80149f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80149f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80149fa:	f1bc 0f00 	cmp.w	ip, #0
 80149fe:	dd31      	ble.n	8014a64 <validate_structure+0x154>
 8014a00:	b003      	add	sp, #12
 8014a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a04:	231c      	movs	r3, #28
 8014a06:	e7ee      	b.n	80149e6 <validate_structure+0xd6>
 8014a08:	231d      	movs	r3, #29
 8014a0a:	e7ec      	b.n	80149e6 <validate_structure+0xd6>
 8014a0c:	4e2b      	ldr	r6, [pc, #172]	; (8014abc <validate_structure+0x1ac>)
 8014a0e:	2700      	movs	r7, #0
 8014a10:	2064      	movs	r0, #100	; 0x64
 8014a12:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014a16:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014a1a:	2a01      	cmp	r2, #1
 8014a1c:	bf14      	ite	ne
 8014a1e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8014a22:	469c      	moveq	ip, r3
 8014a24:	4561      	cmp	r1, ip
 8014a26:	ddeb      	ble.n	8014a00 <validate_structure+0xf0>
 8014a28:	3201      	adds	r2, #1
 8014a2a:	eba1 010c 	sub.w	r1, r1, ip
 8014a2e:	2a0c      	cmp	r2, #12
 8014a30:	60e1      	str	r1, [r4, #12]
 8014a32:	6122      	str	r2, [r4, #16]
 8014a34:	d1ef      	bne.n	8014a16 <validate_structure+0x106>
 8014a36:	6963      	ldr	r3, [r4, #20]
 8014a38:	1c5a      	adds	r2, r3, #1
 8014a3a:	0791      	lsls	r1, r2, #30
 8014a3c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014a40:	d137      	bne.n	8014ab2 <validate_structure+0x1a2>
 8014a42:	fb92 f1f0 	sdiv	r1, r2, r0
 8014a46:	fb00 2211 	mls	r2, r0, r1, r2
 8014a4a:	2a00      	cmp	r2, #0
 8014a4c:	d133      	bne.n	8014ab6 <validate_structure+0x1a6>
 8014a4e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014a52:	fb93 f2f5 	sdiv	r2, r3, r5
 8014a56:	fb05 3312 	mls	r3, r5, r2, r3
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	bf14      	ite	ne
 8014a5e:	231c      	movne	r3, #28
 8014a60:	231d      	moveq	r3, #29
 8014a62:	e7d8      	b.n	8014a16 <validate_structure+0x106>
 8014a64:	6921      	ldr	r1, [r4, #16]
 8014a66:	3901      	subs	r1, #1
 8014a68:	6121      	str	r1, [r4, #16]
 8014a6a:	3101      	adds	r1, #1
 8014a6c:	d114      	bne.n	8014a98 <validate_structure+0x188>
 8014a6e:	6963      	ldr	r3, [r4, #20]
 8014a70:	1e5a      	subs	r2, r3, #1
 8014a72:	0791      	lsls	r1, r2, #30
 8014a74:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014a78:	d117      	bne.n	8014aaa <validate_structure+0x19a>
 8014a7a:	fb92 f1f0 	sdiv	r1, r2, r0
 8014a7e:	fb00 2211 	mls	r2, r0, r1, r2
 8014a82:	b9a2      	cbnz	r2, 8014aae <validate_structure+0x19e>
 8014a84:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014a88:	fb93 f2f5 	sdiv	r2, r3, r5
 8014a8c:	fb05 3312 	mls	r3, r5, r2, r3
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	bf14      	ite	ne
 8014a94:	231c      	movne	r3, #28
 8014a96:	231d      	moveq	r3, #29
 8014a98:	6922      	ldr	r2, [r4, #16]
 8014a9a:	2a01      	cmp	r2, #1
 8014a9c:	bf14      	ite	ne
 8014a9e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014aa2:	461a      	moveq	r2, r3
 8014aa4:	4462      	add	r2, ip
 8014aa6:	60e2      	str	r2, [r4, #12]
 8014aa8:	e7a5      	b.n	80149f6 <validate_structure+0xe6>
 8014aaa:	231c      	movs	r3, #28
 8014aac:	e7f4      	b.n	8014a98 <validate_structure+0x188>
 8014aae:	231d      	movs	r3, #29
 8014ab0:	e7f2      	b.n	8014a98 <validate_structure+0x188>
 8014ab2:	231c      	movs	r3, #28
 8014ab4:	e7af      	b.n	8014a16 <validate_structure+0x106>
 8014ab6:	231d      	movs	r3, #29
 8014ab8:	e7ad      	b.n	8014a16 <validate_structure+0x106>
 8014aba:	bf00      	nop
 8014abc:	08073128 	.word	0x08073128

08014ac0 <mktime>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	b085      	sub	sp, #20
 8014ac6:	4607      	mov	r7, r0
 8014ac8:	f003 ff5e 	bl	8018988 <__gettzinfo>
 8014acc:	4681      	mov	r9, r0
 8014ace:	4638      	mov	r0, r7
 8014ad0:	f7ff ff1e 	bl	8014910 <validate_structure>
 8014ad4:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014ad8:	233c      	movs	r3, #60	; 0x3c
 8014ada:	fb03 4400 	mla	r4, r3, r0, r4
 8014ade:	68b8      	ldr	r0, [r7, #8]
 8014ae0:	4abc      	ldr	r2, [pc, #752]	; (8014dd4 <mktime+0x314>)
 8014ae2:	697e      	ldr	r6, [r7, #20]
 8014ae4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014ae8:	fb03 4400 	mla	r4, r3, r0, r4
 8014aec:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014af4:	3d01      	subs	r5, #1
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	4415      	add	r5, r2
 8014afa:	dd11      	ble.n	8014b20 <mktime+0x60>
 8014afc:	07b1      	lsls	r1, r6, #30
 8014afe:	d10f      	bne.n	8014b20 <mktime+0x60>
 8014b00:	2264      	movs	r2, #100	; 0x64
 8014b02:	fb96 f3f2 	sdiv	r3, r6, r2
 8014b06:	fb02 6313 	mls	r3, r2, r3, r6
 8014b0a:	b943      	cbnz	r3, 8014b1e <mktime+0x5e>
 8014b0c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014b10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8014b18:	fb02 3311 	mls	r3, r2, r1, r3
 8014b1c:	b903      	cbnz	r3, 8014b20 <mktime+0x60>
 8014b1e:	3501      	adds	r5, #1
 8014b20:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014b24:	3310      	adds	r3, #16
 8014b26:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	61fd      	str	r5, [r7, #28]
 8014b2e:	f200 815d 	bhi.w	8014dec <mktime+0x32c>
 8014b32:	2e46      	cmp	r6, #70	; 0x46
 8014b34:	dd71      	ble.n	8014c1a <mktime+0x15a>
 8014b36:	2346      	movs	r3, #70	; 0x46
 8014b38:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014b3c:	2164      	movs	r1, #100	; 0x64
 8014b3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014b42:	079a      	lsls	r2, r3, #30
 8014b44:	d163      	bne.n	8014c0e <mktime+0x14e>
 8014b46:	fb93 f2f1 	sdiv	r2, r3, r1
 8014b4a:	fb01 3212 	mls	r2, r1, r2, r3
 8014b4e:	2a00      	cmp	r2, #0
 8014b50:	d160      	bne.n	8014c14 <mktime+0x154>
 8014b52:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014b56:	fb92 fef0 	sdiv	lr, r2, r0
 8014b5a:	fb00 221e 	mls	r2, r0, lr, r2
 8014b5e:	2a00      	cmp	r2, #0
 8014b60:	bf14      	ite	ne
 8014b62:	4662      	movne	r2, ip
 8014b64:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014b68:	3301      	adds	r3, #1
 8014b6a:	429e      	cmp	r6, r3
 8014b6c:	4415      	add	r5, r2
 8014b6e:	d1e8      	bne.n	8014b42 <mktime+0x82>
 8014b70:	4b99      	ldr	r3, [pc, #612]	; (8014dd8 <mktime+0x318>)
 8014b72:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014b76:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014b7a:	f002 f88f 	bl	8016c9c <__tz_lock>
 8014b7e:	f002 f899 	bl	8016cb4 <_tzset_unlocked>
 8014b82:	4b96      	ldr	r3, [pc, #600]	; (8014ddc <mktime+0x31c>)
 8014b84:	f8d3 b000 	ldr.w	fp, [r3]
 8014b88:	f1bb 0f00 	cmp.w	fp, #0
 8014b8c:	d039      	beq.n	8014c02 <mktime+0x142>
 8014b8e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8014b92:	6978      	ldr	r0, [r7, #20]
 8014b94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014b98:	f1bb 0f01 	cmp.w	fp, #1
 8014b9c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014ba0:	46da      	mov	sl, fp
 8014ba2:	bfa8      	it	ge
 8014ba4:	f04f 0a01 	movge.w	sl, #1
 8014ba8:	4283      	cmp	r3, r0
 8014baa:	d178      	bne.n	8014c9e <mktime+0x1de>
 8014bac:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014bb0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014bb4:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014bb8:	1a5b      	subs	r3, r3, r1
 8014bba:	9302      	str	r3, [sp, #8]
 8014bbc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014bc0:	9303      	str	r3, [sp, #12]
 8014bc2:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014bc6:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014bca:	9301      	str	r3, [sp, #4]
 8014bcc:	ebb3 0c02 	subs.w	ip, r3, r2
 8014bd0:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8014bd4:	4564      	cmp	r4, ip
 8014bd6:	eb78 0300 	sbcs.w	r3, r8, r0
 8014bda:	da66      	bge.n	8014caa <mktime+0x1ea>
 8014bdc:	f8d9 3000 	ldr.w	r3, [r9]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d06f      	beq.n	8014cc4 <mktime+0x204>
 8014be4:	9b02      	ldr	r3, [sp, #8]
 8014be6:	429c      	cmp	r4, r3
 8014be8:	9b03      	ldr	r3, [sp, #12]
 8014bea:	eb78 0303 	sbcs.w	r3, r8, r3
 8014bee:	db03      	blt.n	8014bf8 <mktime+0x138>
 8014bf0:	4564      	cmp	r4, ip
 8014bf2:	eb78 0300 	sbcs.w	r3, r8, r0
 8014bf6:	db6b      	blt.n	8014cd0 <mktime+0x210>
 8014bf8:	f1bb 0f00 	cmp.w	fp, #0
 8014bfc:	f04f 0b00 	mov.w	fp, #0
 8014c00:	da6b      	bge.n	8014cda <mktime+0x21a>
 8014c02:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8014c06:	190c      	adds	r4, r1, r4
 8014c08:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014c0c:	e0a9      	b.n	8014d62 <mktime+0x2a2>
 8014c0e:	f240 126d 	movw	r2, #365	; 0x16d
 8014c12:	e7a9      	b.n	8014b68 <mktime+0xa8>
 8014c14:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014c18:	e7a6      	b.n	8014b68 <mktime+0xa8>
 8014c1a:	d0a9      	beq.n	8014b70 <mktime+0xb0>
 8014c1c:	2345      	movs	r3, #69	; 0x45
 8014c1e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014c22:	2164      	movs	r1, #100	; 0x64
 8014c24:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014c28:	e012      	b.n	8014c50 <mktime+0x190>
 8014c2a:	bb62      	cbnz	r2, 8014c86 <mktime+0x1c6>
 8014c2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c30:	fb01 3212 	mls	r2, r1, r2, r3
 8014c34:	bb52      	cbnz	r2, 8014c8c <mktime+0x1cc>
 8014c36:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014c3a:	fb92 fef0 	sdiv	lr, r2, r0
 8014c3e:	fb00 221e 	mls	r2, r0, lr, r2
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	bf14      	ite	ne
 8014c46:	4662      	movne	r2, ip
 8014c48:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014c4c:	1aad      	subs	r5, r5, r2
 8014c4e:	3b01      	subs	r3, #1
 8014c50:	429e      	cmp	r6, r3
 8014c52:	f003 0203 	and.w	r2, r3, #3
 8014c56:	dbe8      	blt.n	8014c2a <mktime+0x16a>
 8014c58:	b9da      	cbnz	r2, 8014c92 <mktime+0x1d2>
 8014c5a:	2264      	movs	r2, #100	; 0x64
 8014c5c:	fb96 f3f2 	sdiv	r3, r6, r2
 8014c60:	fb02 6313 	mls	r3, r2, r3, r6
 8014c64:	b9c3      	cbnz	r3, 8014c98 <mktime+0x1d8>
 8014c66:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014c6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8014c72:	fb02 3311 	mls	r3, r2, r1, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f240 136d 	movw	r3, #365	; 0x16d
 8014c7c:	bf08      	it	eq
 8014c7e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014c82:	1aed      	subs	r5, r5, r3
 8014c84:	e774      	b.n	8014b70 <mktime+0xb0>
 8014c86:	f240 126d 	movw	r2, #365	; 0x16d
 8014c8a:	e7df      	b.n	8014c4c <mktime+0x18c>
 8014c8c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014c90:	e7dc      	b.n	8014c4c <mktime+0x18c>
 8014c92:	f240 136d 	movw	r3, #365	; 0x16d
 8014c96:	e7f4      	b.n	8014c82 <mktime+0x1c2>
 8014c98:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014c9c:	e7f1      	b.n	8014c82 <mktime+0x1c2>
 8014c9e:	f001 ff53 	bl	8016b48 <__tzcalc_limits>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d182      	bne.n	8014bac <mktime+0xec>
 8014ca6:	46d3      	mov	fp, sl
 8014ca8:	e050      	b.n	8014d4c <mktime+0x28c>
 8014caa:	9b01      	ldr	r3, [sp, #4]
 8014cac:	1a5b      	subs	r3, r3, r1
 8014cae:	9301      	str	r3, [sp, #4]
 8014cb0:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014cb4:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014cb8:	9b01      	ldr	r3, [sp, #4]
 8014cba:	429c      	cmp	r4, r3
 8014cbc:	eb78 030e 	sbcs.w	r3, r8, lr
 8014cc0:	dbf1      	blt.n	8014ca6 <mktime+0x1e6>
 8014cc2:	e78b      	b.n	8014bdc <mktime+0x11c>
 8014cc4:	9b02      	ldr	r3, [sp, #8]
 8014cc6:	429c      	cmp	r4, r3
 8014cc8:	9b03      	ldr	r3, [sp, #12]
 8014cca:	eb78 0303 	sbcs.w	r3, r8, r3
 8014cce:	db8f      	blt.n	8014bf0 <mktime+0x130>
 8014cd0:	f1bb 0f00 	cmp.w	fp, #0
 8014cd4:	db3e      	blt.n	8014d54 <mktime+0x294>
 8014cd6:	f04f 0b01 	mov.w	fp, #1
 8014cda:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014cde:	f1ba 0f01 	cmp.w	sl, #1
 8014ce2:	d133      	bne.n	8014d4c <mktime+0x28c>
 8014ce4:	f1bb 0f00 	cmp.w	fp, #0
 8014ce8:	d04e      	beq.n	8014d88 <mktime+0x2c8>
 8014cea:	1a52      	subs	r2, r2, r1
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	1914      	adds	r4, r2, r4
 8014cf6:	603b      	str	r3, [r7, #0]
 8014cf8:	4638      	mov	r0, r7
 8014cfa:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014cfe:	f7ff fe07 	bl	8014910 <validate_structure>
 8014d02:	68fa      	ldr	r2, [r7, #12]
 8014d04:	ebb2 020a 	subs.w	r2, r2, sl
 8014d08:	d020      	beq.n	8014d4c <mktime+0x28c>
 8014d0a:	2a01      	cmp	r2, #1
 8014d0c:	dc3e      	bgt.n	8014d8c <mktime+0x2cc>
 8014d0e:	1c90      	adds	r0, r2, #2
 8014d10:	bfd8      	it	le
 8014d12:	2201      	movle	r2, #1
 8014d14:	69fb      	ldr	r3, [r7, #28]
 8014d16:	18d3      	adds	r3, r2, r3
 8014d18:	4415      	add	r5, r2
 8014d1a:	d540      	bpl.n	8014d9e <mktime+0x2de>
 8014d1c:	1e73      	subs	r3, r6, #1
 8014d1e:	0799      	lsls	r1, r3, #30
 8014d20:	d137      	bne.n	8014d92 <mktime+0x2d2>
 8014d22:	2264      	movs	r2, #100	; 0x64
 8014d24:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d28:	fb02 3311 	mls	r3, r2, r1, r3
 8014d2c:	bba3      	cbnz	r3, 8014d98 <mktime+0x2d8>
 8014d2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014d32:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014d36:	fb96 f2f3 	sdiv	r2, r6, r3
 8014d3a:	fb03 6612 	mls	r6, r3, r2, r6
 8014d3e:	2e00      	cmp	r6, #0
 8014d40:	f240 136d 	movw	r3, #365	; 0x16d
 8014d44:	bf18      	it	ne
 8014d46:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014d4a:	61fb      	str	r3, [r7, #28]
 8014d4c:	f1bb 0f01 	cmp.w	fp, #1
 8014d50:	f47f af57 	bne.w	8014c02 <mktime+0x142>
 8014d54:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014d58:	190c      	adds	r4, r1, r4
 8014d5a:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014d5e:	f04f 0b01 	mov.w	fp, #1
 8014d62:	f001 ffa1 	bl	8016ca8 <__tz_unlock>
 8014d66:	3504      	adds	r5, #4
 8014d68:	2307      	movs	r3, #7
 8014d6a:	fb95 f3f3 	sdiv	r3, r5, r3
 8014d6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014d72:	1aed      	subs	r5, r5, r3
 8014d74:	bf48      	it	mi
 8014d76:	3507      	addmi	r5, #7
 8014d78:	f8c7 b020 	str.w	fp, [r7, #32]
 8014d7c:	61bd      	str	r5, [r7, #24]
 8014d7e:	4620      	mov	r0, r4
 8014d80:	4641      	mov	r1, r8
 8014d82:	b005      	add	sp, #20
 8014d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d88:	1a8a      	subs	r2, r1, r2
 8014d8a:	e7af      	b.n	8014cec <mktime+0x22c>
 8014d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d90:	e7c0      	b.n	8014d14 <mktime+0x254>
 8014d92:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014d96:	e7d8      	b.n	8014d4a <mktime+0x28a>
 8014d98:	f240 136d 	movw	r3, #365	; 0x16d
 8014d9c:	e7d5      	b.n	8014d4a <mktime+0x28a>
 8014d9e:	07b2      	lsls	r2, r6, #30
 8014da0:	d11e      	bne.n	8014de0 <mktime+0x320>
 8014da2:	2164      	movs	r1, #100	; 0x64
 8014da4:	fb96 f2f1 	sdiv	r2, r6, r1
 8014da8:	fb01 6212 	mls	r2, r1, r2, r6
 8014dac:	b9da      	cbnz	r2, 8014de6 <mktime+0x326>
 8014dae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014db2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014db6:	fb96 f1f2 	sdiv	r1, r6, r2
 8014dba:	fb02 6611 	mls	r6, r2, r1, r6
 8014dbe:	2e00      	cmp	r6, #0
 8014dc0:	f240 126d 	movw	r2, #365	; 0x16d
 8014dc4:	bf08      	it	eq
 8014dc6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	bfa8      	it	ge
 8014dce:	1a9b      	subge	r3, r3, r2
 8014dd0:	e7bb      	b.n	8014d4a <mktime+0x28a>
 8014dd2:	bf00      	nop
 8014dd4:	08073158 	.word	0x08073158
 8014dd8:	00015180 	.word	0x00015180
 8014ddc:	20005d98 	.word	0x20005d98
 8014de0:	f240 126d 	movw	r2, #365	; 0x16d
 8014de4:	e7f1      	b.n	8014dca <mktime+0x30a>
 8014de6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014dea:	e7ee      	b.n	8014dca <mktime+0x30a>
 8014dec:	f04f 34ff 	mov.w	r4, #4294967295
 8014df0:	46a0      	mov	r8, r4
 8014df2:	e7c4      	b.n	8014d7e <mktime+0x2be>

08014df4 <_free_r>:
 8014df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014df6:	2900      	cmp	r1, #0
 8014df8:	d044      	beq.n	8014e84 <_free_r+0x90>
 8014dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014dfe:	9001      	str	r0, [sp, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f1a1 0404 	sub.w	r4, r1, #4
 8014e06:	bfb8      	it	lt
 8014e08:	18e4      	addlt	r4, r4, r3
 8014e0a:	f003 fe6f 	bl	8018aec <__malloc_lock>
 8014e0e:	4a1e      	ldr	r2, [pc, #120]	; (8014e88 <_free_r+0x94>)
 8014e10:	9801      	ldr	r0, [sp, #4]
 8014e12:	6813      	ldr	r3, [r2, #0]
 8014e14:	b933      	cbnz	r3, 8014e24 <_free_r+0x30>
 8014e16:	6063      	str	r3, [r4, #4]
 8014e18:	6014      	str	r4, [r2, #0]
 8014e1a:	b003      	add	sp, #12
 8014e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e20:	f003 be6a 	b.w	8018af8 <__malloc_unlock>
 8014e24:	42a3      	cmp	r3, r4
 8014e26:	d908      	bls.n	8014e3a <_free_r+0x46>
 8014e28:	6825      	ldr	r5, [r4, #0]
 8014e2a:	1961      	adds	r1, r4, r5
 8014e2c:	428b      	cmp	r3, r1
 8014e2e:	bf01      	itttt	eq
 8014e30:	6819      	ldreq	r1, [r3, #0]
 8014e32:	685b      	ldreq	r3, [r3, #4]
 8014e34:	1949      	addeq	r1, r1, r5
 8014e36:	6021      	streq	r1, [r4, #0]
 8014e38:	e7ed      	b.n	8014e16 <_free_r+0x22>
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	b10b      	cbz	r3, 8014e44 <_free_r+0x50>
 8014e40:	42a3      	cmp	r3, r4
 8014e42:	d9fa      	bls.n	8014e3a <_free_r+0x46>
 8014e44:	6811      	ldr	r1, [r2, #0]
 8014e46:	1855      	adds	r5, r2, r1
 8014e48:	42a5      	cmp	r5, r4
 8014e4a:	d10b      	bne.n	8014e64 <_free_r+0x70>
 8014e4c:	6824      	ldr	r4, [r4, #0]
 8014e4e:	4421      	add	r1, r4
 8014e50:	1854      	adds	r4, r2, r1
 8014e52:	42a3      	cmp	r3, r4
 8014e54:	6011      	str	r1, [r2, #0]
 8014e56:	d1e0      	bne.n	8014e1a <_free_r+0x26>
 8014e58:	681c      	ldr	r4, [r3, #0]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	6053      	str	r3, [r2, #4]
 8014e5e:	4421      	add	r1, r4
 8014e60:	6011      	str	r1, [r2, #0]
 8014e62:	e7da      	b.n	8014e1a <_free_r+0x26>
 8014e64:	d902      	bls.n	8014e6c <_free_r+0x78>
 8014e66:	230c      	movs	r3, #12
 8014e68:	6003      	str	r3, [r0, #0]
 8014e6a:	e7d6      	b.n	8014e1a <_free_r+0x26>
 8014e6c:	6825      	ldr	r5, [r4, #0]
 8014e6e:	1961      	adds	r1, r4, r5
 8014e70:	428b      	cmp	r3, r1
 8014e72:	bf04      	itt	eq
 8014e74:	6819      	ldreq	r1, [r3, #0]
 8014e76:	685b      	ldreq	r3, [r3, #4]
 8014e78:	6063      	str	r3, [r4, #4]
 8014e7a:	bf04      	itt	eq
 8014e7c:	1949      	addeq	r1, r1, r5
 8014e7e:	6021      	streq	r1, [r4, #0]
 8014e80:	6054      	str	r4, [r2, #4]
 8014e82:	e7ca      	b.n	8014e1a <_free_r+0x26>
 8014e84:	b003      	add	sp, #12
 8014e86:	bd30      	pop	{r4, r5, pc}
 8014e88:	20005d74 	.word	0x20005d74

08014e8c <sbrk_aligned>:
 8014e8c:	b570      	push	{r4, r5, r6, lr}
 8014e8e:	4e0e      	ldr	r6, [pc, #56]	; (8014ec8 <sbrk_aligned+0x3c>)
 8014e90:	460c      	mov	r4, r1
 8014e92:	6831      	ldr	r1, [r6, #0]
 8014e94:	4605      	mov	r5, r0
 8014e96:	b911      	cbnz	r1, 8014e9e <sbrk_aligned+0x12>
 8014e98:	f000 fe50 	bl	8015b3c <_sbrk_r>
 8014e9c:	6030      	str	r0, [r6, #0]
 8014e9e:	4621      	mov	r1, r4
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f000 fe4b 	bl	8015b3c <_sbrk_r>
 8014ea6:	1c43      	adds	r3, r0, #1
 8014ea8:	d00a      	beq.n	8014ec0 <sbrk_aligned+0x34>
 8014eaa:	1cc4      	adds	r4, r0, #3
 8014eac:	f024 0403 	bic.w	r4, r4, #3
 8014eb0:	42a0      	cmp	r0, r4
 8014eb2:	d007      	beq.n	8014ec4 <sbrk_aligned+0x38>
 8014eb4:	1a21      	subs	r1, r4, r0
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	f000 fe40 	bl	8015b3c <_sbrk_r>
 8014ebc:	3001      	adds	r0, #1
 8014ebe:	d101      	bne.n	8014ec4 <sbrk_aligned+0x38>
 8014ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	bd70      	pop	{r4, r5, r6, pc}
 8014ec8:	20005d78 	.word	0x20005d78

08014ecc <_malloc_r>:
 8014ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed0:	1ccd      	adds	r5, r1, #3
 8014ed2:	f025 0503 	bic.w	r5, r5, #3
 8014ed6:	3508      	adds	r5, #8
 8014ed8:	2d0c      	cmp	r5, #12
 8014eda:	bf38      	it	cc
 8014edc:	250c      	movcc	r5, #12
 8014ede:	2d00      	cmp	r5, #0
 8014ee0:	4607      	mov	r7, r0
 8014ee2:	db01      	blt.n	8014ee8 <_malloc_r+0x1c>
 8014ee4:	42a9      	cmp	r1, r5
 8014ee6:	d905      	bls.n	8014ef4 <_malloc_r+0x28>
 8014ee8:	230c      	movs	r3, #12
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	2600      	movs	r6, #0
 8014eee:	4630      	mov	r0, r6
 8014ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef4:	4e2e      	ldr	r6, [pc, #184]	; (8014fb0 <_malloc_r+0xe4>)
 8014ef6:	f003 fdf9 	bl	8018aec <__malloc_lock>
 8014efa:	6833      	ldr	r3, [r6, #0]
 8014efc:	461c      	mov	r4, r3
 8014efe:	bb34      	cbnz	r4, 8014f4e <_malloc_r+0x82>
 8014f00:	4629      	mov	r1, r5
 8014f02:	4638      	mov	r0, r7
 8014f04:	f7ff ffc2 	bl	8014e8c <sbrk_aligned>
 8014f08:	1c43      	adds	r3, r0, #1
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	d14d      	bne.n	8014faa <_malloc_r+0xde>
 8014f0e:	6834      	ldr	r4, [r6, #0]
 8014f10:	4626      	mov	r6, r4
 8014f12:	2e00      	cmp	r6, #0
 8014f14:	d140      	bne.n	8014f98 <_malloc_r+0xcc>
 8014f16:	6823      	ldr	r3, [r4, #0]
 8014f18:	4631      	mov	r1, r6
 8014f1a:	4638      	mov	r0, r7
 8014f1c:	eb04 0803 	add.w	r8, r4, r3
 8014f20:	f000 fe0c 	bl	8015b3c <_sbrk_r>
 8014f24:	4580      	cmp	r8, r0
 8014f26:	d13a      	bne.n	8014f9e <_malloc_r+0xd2>
 8014f28:	6821      	ldr	r1, [r4, #0]
 8014f2a:	3503      	adds	r5, #3
 8014f2c:	1a6d      	subs	r5, r5, r1
 8014f2e:	f025 0503 	bic.w	r5, r5, #3
 8014f32:	3508      	adds	r5, #8
 8014f34:	2d0c      	cmp	r5, #12
 8014f36:	bf38      	it	cc
 8014f38:	250c      	movcc	r5, #12
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	f7ff ffa5 	bl	8014e8c <sbrk_aligned>
 8014f42:	3001      	adds	r0, #1
 8014f44:	d02b      	beq.n	8014f9e <_malloc_r+0xd2>
 8014f46:	6823      	ldr	r3, [r4, #0]
 8014f48:	442b      	add	r3, r5
 8014f4a:	6023      	str	r3, [r4, #0]
 8014f4c:	e00e      	b.n	8014f6c <_malloc_r+0xa0>
 8014f4e:	6822      	ldr	r2, [r4, #0]
 8014f50:	1b52      	subs	r2, r2, r5
 8014f52:	d41e      	bmi.n	8014f92 <_malloc_r+0xc6>
 8014f54:	2a0b      	cmp	r2, #11
 8014f56:	d916      	bls.n	8014f86 <_malloc_r+0xba>
 8014f58:	1961      	adds	r1, r4, r5
 8014f5a:	42a3      	cmp	r3, r4
 8014f5c:	6025      	str	r5, [r4, #0]
 8014f5e:	bf18      	it	ne
 8014f60:	6059      	strne	r1, [r3, #4]
 8014f62:	6863      	ldr	r3, [r4, #4]
 8014f64:	bf08      	it	eq
 8014f66:	6031      	streq	r1, [r6, #0]
 8014f68:	5162      	str	r2, [r4, r5]
 8014f6a:	604b      	str	r3, [r1, #4]
 8014f6c:	4638      	mov	r0, r7
 8014f6e:	f104 060b 	add.w	r6, r4, #11
 8014f72:	f003 fdc1 	bl	8018af8 <__malloc_unlock>
 8014f76:	f026 0607 	bic.w	r6, r6, #7
 8014f7a:	1d23      	adds	r3, r4, #4
 8014f7c:	1af2      	subs	r2, r6, r3
 8014f7e:	d0b6      	beq.n	8014eee <_malloc_r+0x22>
 8014f80:	1b9b      	subs	r3, r3, r6
 8014f82:	50a3      	str	r3, [r4, r2]
 8014f84:	e7b3      	b.n	8014eee <_malloc_r+0x22>
 8014f86:	6862      	ldr	r2, [r4, #4]
 8014f88:	42a3      	cmp	r3, r4
 8014f8a:	bf0c      	ite	eq
 8014f8c:	6032      	streq	r2, [r6, #0]
 8014f8e:	605a      	strne	r2, [r3, #4]
 8014f90:	e7ec      	b.n	8014f6c <_malloc_r+0xa0>
 8014f92:	4623      	mov	r3, r4
 8014f94:	6864      	ldr	r4, [r4, #4]
 8014f96:	e7b2      	b.n	8014efe <_malloc_r+0x32>
 8014f98:	4634      	mov	r4, r6
 8014f9a:	6876      	ldr	r6, [r6, #4]
 8014f9c:	e7b9      	b.n	8014f12 <_malloc_r+0x46>
 8014f9e:	230c      	movs	r3, #12
 8014fa0:	603b      	str	r3, [r7, #0]
 8014fa2:	4638      	mov	r0, r7
 8014fa4:	f003 fda8 	bl	8018af8 <__malloc_unlock>
 8014fa8:	e7a1      	b.n	8014eee <_malloc_r+0x22>
 8014faa:	6025      	str	r5, [r4, #0]
 8014fac:	e7de      	b.n	8014f6c <_malloc_r+0xa0>
 8014fae:	bf00      	nop
 8014fb0:	20005d74 	.word	0x20005d74

08014fb4 <__sfputc_r>:
 8014fb4:	6893      	ldr	r3, [r2, #8]
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	b410      	push	{r4}
 8014fbc:	6093      	str	r3, [r2, #8]
 8014fbe:	da08      	bge.n	8014fd2 <__sfputc_r+0x1e>
 8014fc0:	6994      	ldr	r4, [r2, #24]
 8014fc2:	42a3      	cmp	r3, r4
 8014fc4:	db01      	blt.n	8014fca <__sfputc_r+0x16>
 8014fc6:	290a      	cmp	r1, #10
 8014fc8:	d103      	bne.n	8014fd2 <__sfputc_r+0x1e>
 8014fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fce:	f001 bff7 	b.w	8016fc0 <__swbuf_r>
 8014fd2:	6813      	ldr	r3, [r2, #0]
 8014fd4:	1c58      	adds	r0, r3, #1
 8014fd6:	6010      	str	r0, [r2, #0]
 8014fd8:	7019      	strb	r1, [r3, #0]
 8014fda:	4608      	mov	r0, r1
 8014fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014fe0:	4770      	bx	lr

08014fe2 <__sfputs_r>:
 8014fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	460f      	mov	r7, r1
 8014fe8:	4614      	mov	r4, r2
 8014fea:	18d5      	adds	r5, r2, r3
 8014fec:	42ac      	cmp	r4, r5
 8014fee:	d101      	bne.n	8014ff4 <__sfputs_r+0x12>
 8014ff0:	2000      	movs	r0, #0
 8014ff2:	e007      	b.n	8015004 <__sfputs_r+0x22>
 8014ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ff8:	463a      	mov	r2, r7
 8014ffa:	4630      	mov	r0, r6
 8014ffc:	f7ff ffda 	bl	8014fb4 <__sfputc_r>
 8015000:	1c43      	adds	r3, r0, #1
 8015002:	d1f3      	bne.n	8014fec <__sfputs_r+0xa>
 8015004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015008 <_vfiprintf_r>:
 8015008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	460d      	mov	r5, r1
 801500e:	b09d      	sub	sp, #116	; 0x74
 8015010:	4614      	mov	r4, r2
 8015012:	4698      	mov	r8, r3
 8015014:	4606      	mov	r6, r0
 8015016:	b118      	cbz	r0, 8015020 <_vfiprintf_r+0x18>
 8015018:	6983      	ldr	r3, [r0, #24]
 801501a:	b90b      	cbnz	r3, 8015020 <_vfiprintf_r+0x18>
 801501c:	f003 f864 	bl	80180e8 <__sinit>
 8015020:	4b89      	ldr	r3, [pc, #548]	; (8015248 <_vfiprintf_r+0x240>)
 8015022:	429d      	cmp	r5, r3
 8015024:	d11b      	bne.n	801505e <_vfiprintf_r+0x56>
 8015026:	6875      	ldr	r5, [r6, #4]
 8015028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801502a:	07d9      	lsls	r1, r3, #31
 801502c:	d405      	bmi.n	801503a <_vfiprintf_r+0x32>
 801502e:	89ab      	ldrh	r3, [r5, #12]
 8015030:	059a      	lsls	r2, r3, #22
 8015032:	d402      	bmi.n	801503a <_vfiprintf_r+0x32>
 8015034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015036:	f003 fcb1 	bl	801899c <__retarget_lock_acquire_recursive>
 801503a:	89ab      	ldrh	r3, [r5, #12]
 801503c:	071b      	lsls	r3, r3, #28
 801503e:	d501      	bpl.n	8015044 <_vfiprintf_r+0x3c>
 8015040:	692b      	ldr	r3, [r5, #16]
 8015042:	b9eb      	cbnz	r3, 8015080 <_vfiprintf_r+0x78>
 8015044:	4629      	mov	r1, r5
 8015046:	4630      	mov	r0, r6
 8015048:	f002 f81e 	bl	8017088 <__swsetup_r>
 801504c:	b1c0      	cbz	r0, 8015080 <_vfiprintf_r+0x78>
 801504e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015050:	07dc      	lsls	r4, r3, #31
 8015052:	d50e      	bpl.n	8015072 <_vfiprintf_r+0x6a>
 8015054:	f04f 30ff 	mov.w	r0, #4294967295
 8015058:	b01d      	add	sp, #116	; 0x74
 801505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801505e:	4b7b      	ldr	r3, [pc, #492]	; (801524c <_vfiprintf_r+0x244>)
 8015060:	429d      	cmp	r5, r3
 8015062:	d101      	bne.n	8015068 <_vfiprintf_r+0x60>
 8015064:	68b5      	ldr	r5, [r6, #8]
 8015066:	e7df      	b.n	8015028 <_vfiprintf_r+0x20>
 8015068:	4b79      	ldr	r3, [pc, #484]	; (8015250 <_vfiprintf_r+0x248>)
 801506a:	429d      	cmp	r5, r3
 801506c:	bf08      	it	eq
 801506e:	68f5      	ldreq	r5, [r6, #12]
 8015070:	e7da      	b.n	8015028 <_vfiprintf_r+0x20>
 8015072:	89ab      	ldrh	r3, [r5, #12]
 8015074:	0598      	lsls	r0, r3, #22
 8015076:	d4ed      	bmi.n	8015054 <_vfiprintf_r+0x4c>
 8015078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801507a:	f003 fc91 	bl	80189a0 <__retarget_lock_release_recursive>
 801507e:	e7e9      	b.n	8015054 <_vfiprintf_r+0x4c>
 8015080:	2300      	movs	r3, #0
 8015082:	9309      	str	r3, [sp, #36]	; 0x24
 8015084:	2320      	movs	r3, #32
 8015086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801508a:	f8cd 800c 	str.w	r8, [sp, #12]
 801508e:	2330      	movs	r3, #48	; 0x30
 8015090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015254 <_vfiprintf_r+0x24c>
 8015094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015098:	f04f 0901 	mov.w	r9, #1
 801509c:	4623      	mov	r3, r4
 801509e:	469a      	mov	sl, r3
 80150a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150a4:	b10a      	cbz	r2, 80150aa <_vfiprintf_r+0xa2>
 80150a6:	2a25      	cmp	r2, #37	; 0x25
 80150a8:	d1f9      	bne.n	801509e <_vfiprintf_r+0x96>
 80150aa:	ebba 0b04 	subs.w	fp, sl, r4
 80150ae:	d00b      	beq.n	80150c8 <_vfiprintf_r+0xc0>
 80150b0:	465b      	mov	r3, fp
 80150b2:	4622      	mov	r2, r4
 80150b4:	4629      	mov	r1, r5
 80150b6:	4630      	mov	r0, r6
 80150b8:	f7ff ff93 	bl	8014fe2 <__sfputs_r>
 80150bc:	3001      	adds	r0, #1
 80150be:	f000 80aa 	beq.w	8015216 <_vfiprintf_r+0x20e>
 80150c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150c4:	445a      	add	r2, fp
 80150c6:	9209      	str	r2, [sp, #36]	; 0x24
 80150c8:	f89a 3000 	ldrb.w	r3, [sl]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f000 80a2 	beq.w	8015216 <_vfiprintf_r+0x20e>
 80150d2:	2300      	movs	r3, #0
 80150d4:	f04f 32ff 	mov.w	r2, #4294967295
 80150d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150dc:	f10a 0a01 	add.w	sl, sl, #1
 80150e0:	9304      	str	r3, [sp, #16]
 80150e2:	9307      	str	r3, [sp, #28]
 80150e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150e8:	931a      	str	r3, [sp, #104]	; 0x68
 80150ea:	4654      	mov	r4, sl
 80150ec:	2205      	movs	r2, #5
 80150ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150f2:	4858      	ldr	r0, [pc, #352]	; (8015254 <_vfiprintf_r+0x24c>)
 80150f4:	f7eb f894 	bl	8000220 <memchr>
 80150f8:	9a04      	ldr	r2, [sp, #16]
 80150fa:	b9d8      	cbnz	r0, 8015134 <_vfiprintf_r+0x12c>
 80150fc:	06d1      	lsls	r1, r2, #27
 80150fe:	bf44      	itt	mi
 8015100:	2320      	movmi	r3, #32
 8015102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015106:	0713      	lsls	r3, r2, #28
 8015108:	bf44      	itt	mi
 801510a:	232b      	movmi	r3, #43	; 0x2b
 801510c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015110:	f89a 3000 	ldrb.w	r3, [sl]
 8015114:	2b2a      	cmp	r3, #42	; 0x2a
 8015116:	d015      	beq.n	8015144 <_vfiprintf_r+0x13c>
 8015118:	9a07      	ldr	r2, [sp, #28]
 801511a:	4654      	mov	r4, sl
 801511c:	2000      	movs	r0, #0
 801511e:	f04f 0c0a 	mov.w	ip, #10
 8015122:	4621      	mov	r1, r4
 8015124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015128:	3b30      	subs	r3, #48	; 0x30
 801512a:	2b09      	cmp	r3, #9
 801512c:	d94e      	bls.n	80151cc <_vfiprintf_r+0x1c4>
 801512e:	b1b0      	cbz	r0, 801515e <_vfiprintf_r+0x156>
 8015130:	9207      	str	r2, [sp, #28]
 8015132:	e014      	b.n	801515e <_vfiprintf_r+0x156>
 8015134:	eba0 0308 	sub.w	r3, r0, r8
 8015138:	fa09 f303 	lsl.w	r3, r9, r3
 801513c:	4313      	orrs	r3, r2
 801513e:	9304      	str	r3, [sp, #16]
 8015140:	46a2      	mov	sl, r4
 8015142:	e7d2      	b.n	80150ea <_vfiprintf_r+0xe2>
 8015144:	9b03      	ldr	r3, [sp, #12]
 8015146:	1d19      	adds	r1, r3, #4
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	9103      	str	r1, [sp, #12]
 801514c:	2b00      	cmp	r3, #0
 801514e:	bfbb      	ittet	lt
 8015150:	425b      	neglt	r3, r3
 8015152:	f042 0202 	orrlt.w	r2, r2, #2
 8015156:	9307      	strge	r3, [sp, #28]
 8015158:	9307      	strlt	r3, [sp, #28]
 801515a:	bfb8      	it	lt
 801515c:	9204      	strlt	r2, [sp, #16]
 801515e:	7823      	ldrb	r3, [r4, #0]
 8015160:	2b2e      	cmp	r3, #46	; 0x2e
 8015162:	d10c      	bne.n	801517e <_vfiprintf_r+0x176>
 8015164:	7863      	ldrb	r3, [r4, #1]
 8015166:	2b2a      	cmp	r3, #42	; 0x2a
 8015168:	d135      	bne.n	80151d6 <_vfiprintf_r+0x1ce>
 801516a:	9b03      	ldr	r3, [sp, #12]
 801516c:	1d1a      	adds	r2, r3, #4
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	9203      	str	r2, [sp, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	bfb8      	it	lt
 8015176:	f04f 33ff 	movlt.w	r3, #4294967295
 801517a:	3402      	adds	r4, #2
 801517c:	9305      	str	r3, [sp, #20]
 801517e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015264 <_vfiprintf_r+0x25c>
 8015182:	7821      	ldrb	r1, [r4, #0]
 8015184:	2203      	movs	r2, #3
 8015186:	4650      	mov	r0, sl
 8015188:	f7eb f84a 	bl	8000220 <memchr>
 801518c:	b140      	cbz	r0, 80151a0 <_vfiprintf_r+0x198>
 801518e:	2340      	movs	r3, #64	; 0x40
 8015190:	eba0 000a 	sub.w	r0, r0, sl
 8015194:	fa03 f000 	lsl.w	r0, r3, r0
 8015198:	9b04      	ldr	r3, [sp, #16]
 801519a:	4303      	orrs	r3, r0
 801519c:	3401      	adds	r4, #1
 801519e:	9304      	str	r3, [sp, #16]
 80151a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151a4:	482c      	ldr	r0, [pc, #176]	; (8015258 <_vfiprintf_r+0x250>)
 80151a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151aa:	2206      	movs	r2, #6
 80151ac:	f7eb f838 	bl	8000220 <memchr>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d03f      	beq.n	8015234 <_vfiprintf_r+0x22c>
 80151b4:	4b29      	ldr	r3, [pc, #164]	; (801525c <_vfiprintf_r+0x254>)
 80151b6:	bb1b      	cbnz	r3, 8015200 <_vfiprintf_r+0x1f8>
 80151b8:	9b03      	ldr	r3, [sp, #12]
 80151ba:	3307      	adds	r3, #7
 80151bc:	f023 0307 	bic.w	r3, r3, #7
 80151c0:	3308      	adds	r3, #8
 80151c2:	9303      	str	r3, [sp, #12]
 80151c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151c6:	443b      	add	r3, r7
 80151c8:	9309      	str	r3, [sp, #36]	; 0x24
 80151ca:	e767      	b.n	801509c <_vfiprintf_r+0x94>
 80151cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80151d0:	460c      	mov	r4, r1
 80151d2:	2001      	movs	r0, #1
 80151d4:	e7a5      	b.n	8015122 <_vfiprintf_r+0x11a>
 80151d6:	2300      	movs	r3, #0
 80151d8:	3401      	adds	r4, #1
 80151da:	9305      	str	r3, [sp, #20]
 80151dc:	4619      	mov	r1, r3
 80151de:	f04f 0c0a 	mov.w	ip, #10
 80151e2:	4620      	mov	r0, r4
 80151e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151e8:	3a30      	subs	r2, #48	; 0x30
 80151ea:	2a09      	cmp	r2, #9
 80151ec:	d903      	bls.n	80151f6 <_vfiprintf_r+0x1ee>
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d0c5      	beq.n	801517e <_vfiprintf_r+0x176>
 80151f2:	9105      	str	r1, [sp, #20]
 80151f4:	e7c3      	b.n	801517e <_vfiprintf_r+0x176>
 80151f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80151fa:	4604      	mov	r4, r0
 80151fc:	2301      	movs	r3, #1
 80151fe:	e7f0      	b.n	80151e2 <_vfiprintf_r+0x1da>
 8015200:	ab03      	add	r3, sp, #12
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	462a      	mov	r2, r5
 8015206:	4b16      	ldr	r3, [pc, #88]	; (8015260 <_vfiprintf_r+0x258>)
 8015208:	a904      	add	r1, sp, #16
 801520a:	4630      	mov	r0, r6
 801520c:	f000 f8cc 	bl	80153a8 <_printf_float>
 8015210:	4607      	mov	r7, r0
 8015212:	1c78      	adds	r0, r7, #1
 8015214:	d1d6      	bne.n	80151c4 <_vfiprintf_r+0x1bc>
 8015216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015218:	07d9      	lsls	r1, r3, #31
 801521a:	d405      	bmi.n	8015228 <_vfiprintf_r+0x220>
 801521c:	89ab      	ldrh	r3, [r5, #12]
 801521e:	059a      	lsls	r2, r3, #22
 8015220:	d402      	bmi.n	8015228 <_vfiprintf_r+0x220>
 8015222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015224:	f003 fbbc 	bl	80189a0 <__retarget_lock_release_recursive>
 8015228:	89ab      	ldrh	r3, [r5, #12]
 801522a:	065b      	lsls	r3, r3, #25
 801522c:	f53f af12 	bmi.w	8015054 <_vfiprintf_r+0x4c>
 8015230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015232:	e711      	b.n	8015058 <_vfiprintf_r+0x50>
 8015234:	ab03      	add	r3, sp, #12
 8015236:	9300      	str	r3, [sp, #0]
 8015238:	462a      	mov	r2, r5
 801523a:	4b09      	ldr	r3, [pc, #36]	; (8015260 <_vfiprintf_r+0x258>)
 801523c:	a904      	add	r1, sp, #16
 801523e:	4630      	mov	r0, r6
 8015240:	f000 fb56 	bl	80158f0 <_printf_i>
 8015244:	e7e4      	b.n	8015210 <_vfiprintf_r+0x208>
 8015246:	bf00      	nop
 8015248:	08073454 	.word	0x08073454
 801524c:	08073474 	.word	0x08073474
 8015250:	08073434 	.word	0x08073434
 8015254:	08073188 	.word	0x08073188
 8015258:	08073192 	.word	0x08073192
 801525c:	080153a9 	.word	0x080153a9
 8015260:	08014fe3 	.word	0x08014fe3
 8015264:	0807318e 	.word	0x0807318e

08015268 <__cvt>:
 8015268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801526c:	ec55 4b10 	vmov	r4, r5, d0
 8015270:	2d00      	cmp	r5, #0
 8015272:	460e      	mov	r6, r1
 8015274:	4619      	mov	r1, r3
 8015276:	462b      	mov	r3, r5
 8015278:	bfbb      	ittet	lt
 801527a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801527e:	461d      	movlt	r5, r3
 8015280:	2300      	movge	r3, #0
 8015282:	232d      	movlt	r3, #45	; 0x2d
 8015284:	700b      	strb	r3, [r1, #0]
 8015286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801528c:	4691      	mov	r9, r2
 801528e:	f023 0820 	bic.w	r8, r3, #32
 8015292:	bfbc      	itt	lt
 8015294:	4622      	movlt	r2, r4
 8015296:	4614      	movlt	r4, r2
 8015298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801529c:	d005      	beq.n	80152aa <__cvt+0x42>
 801529e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80152a2:	d100      	bne.n	80152a6 <__cvt+0x3e>
 80152a4:	3601      	adds	r6, #1
 80152a6:	2102      	movs	r1, #2
 80152a8:	e000      	b.n	80152ac <__cvt+0x44>
 80152aa:	2103      	movs	r1, #3
 80152ac:	ab03      	add	r3, sp, #12
 80152ae:	9301      	str	r3, [sp, #4]
 80152b0:	ab02      	add	r3, sp, #8
 80152b2:	9300      	str	r3, [sp, #0]
 80152b4:	ec45 4b10 	vmov	d0, r4, r5
 80152b8:	4653      	mov	r3, sl
 80152ba:	4632      	mov	r2, r6
 80152bc:	f002 f80c 	bl	80172d8 <_dtoa_r>
 80152c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80152c4:	4607      	mov	r7, r0
 80152c6:	d102      	bne.n	80152ce <__cvt+0x66>
 80152c8:	f019 0f01 	tst.w	r9, #1
 80152cc:	d022      	beq.n	8015314 <__cvt+0xac>
 80152ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80152d2:	eb07 0906 	add.w	r9, r7, r6
 80152d6:	d110      	bne.n	80152fa <__cvt+0x92>
 80152d8:	783b      	ldrb	r3, [r7, #0]
 80152da:	2b30      	cmp	r3, #48	; 0x30
 80152dc:	d10a      	bne.n	80152f4 <__cvt+0x8c>
 80152de:	2200      	movs	r2, #0
 80152e0:	2300      	movs	r3, #0
 80152e2:	4620      	mov	r0, r4
 80152e4:	4629      	mov	r1, r5
 80152e6:	f7eb fc0f 	bl	8000b08 <__aeabi_dcmpeq>
 80152ea:	b918      	cbnz	r0, 80152f4 <__cvt+0x8c>
 80152ec:	f1c6 0601 	rsb	r6, r6, #1
 80152f0:	f8ca 6000 	str.w	r6, [sl]
 80152f4:	f8da 3000 	ldr.w	r3, [sl]
 80152f8:	4499      	add	r9, r3
 80152fa:	2200      	movs	r2, #0
 80152fc:	2300      	movs	r3, #0
 80152fe:	4620      	mov	r0, r4
 8015300:	4629      	mov	r1, r5
 8015302:	f7eb fc01 	bl	8000b08 <__aeabi_dcmpeq>
 8015306:	b108      	cbz	r0, 801530c <__cvt+0xa4>
 8015308:	f8cd 900c 	str.w	r9, [sp, #12]
 801530c:	2230      	movs	r2, #48	; 0x30
 801530e:	9b03      	ldr	r3, [sp, #12]
 8015310:	454b      	cmp	r3, r9
 8015312:	d307      	bcc.n	8015324 <__cvt+0xbc>
 8015314:	9b03      	ldr	r3, [sp, #12]
 8015316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015318:	1bdb      	subs	r3, r3, r7
 801531a:	4638      	mov	r0, r7
 801531c:	6013      	str	r3, [r2, #0]
 801531e:	b004      	add	sp, #16
 8015320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015324:	1c59      	adds	r1, r3, #1
 8015326:	9103      	str	r1, [sp, #12]
 8015328:	701a      	strb	r2, [r3, #0]
 801532a:	e7f0      	b.n	801530e <__cvt+0xa6>

0801532c <__exponent>:
 801532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801532e:	4603      	mov	r3, r0
 8015330:	2900      	cmp	r1, #0
 8015332:	bfb8      	it	lt
 8015334:	4249      	neglt	r1, r1
 8015336:	f803 2b02 	strb.w	r2, [r3], #2
 801533a:	bfb4      	ite	lt
 801533c:	222d      	movlt	r2, #45	; 0x2d
 801533e:	222b      	movge	r2, #43	; 0x2b
 8015340:	2909      	cmp	r1, #9
 8015342:	7042      	strb	r2, [r0, #1]
 8015344:	dd2a      	ble.n	801539c <__exponent+0x70>
 8015346:	f10d 0407 	add.w	r4, sp, #7
 801534a:	46a4      	mov	ip, r4
 801534c:	270a      	movs	r7, #10
 801534e:	46a6      	mov	lr, r4
 8015350:	460a      	mov	r2, r1
 8015352:	fb91 f6f7 	sdiv	r6, r1, r7
 8015356:	fb07 1516 	mls	r5, r7, r6, r1
 801535a:	3530      	adds	r5, #48	; 0x30
 801535c:	2a63      	cmp	r2, #99	; 0x63
 801535e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015366:	4631      	mov	r1, r6
 8015368:	dcf1      	bgt.n	801534e <__exponent+0x22>
 801536a:	3130      	adds	r1, #48	; 0x30
 801536c:	f1ae 0502 	sub.w	r5, lr, #2
 8015370:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015374:	1c44      	adds	r4, r0, #1
 8015376:	4629      	mov	r1, r5
 8015378:	4561      	cmp	r1, ip
 801537a:	d30a      	bcc.n	8015392 <__exponent+0x66>
 801537c:	f10d 0209 	add.w	r2, sp, #9
 8015380:	eba2 020e 	sub.w	r2, r2, lr
 8015384:	4565      	cmp	r5, ip
 8015386:	bf88      	it	hi
 8015388:	2200      	movhi	r2, #0
 801538a:	4413      	add	r3, r2
 801538c:	1a18      	subs	r0, r3, r0
 801538e:	b003      	add	sp, #12
 8015390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015396:	f804 2f01 	strb.w	r2, [r4, #1]!
 801539a:	e7ed      	b.n	8015378 <__exponent+0x4c>
 801539c:	2330      	movs	r3, #48	; 0x30
 801539e:	3130      	adds	r1, #48	; 0x30
 80153a0:	7083      	strb	r3, [r0, #2]
 80153a2:	70c1      	strb	r1, [r0, #3]
 80153a4:	1d03      	adds	r3, r0, #4
 80153a6:	e7f1      	b.n	801538c <__exponent+0x60>

080153a8 <_printf_float>:
 80153a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ac:	ed2d 8b02 	vpush	{d8}
 80153b0:	b08d      	sub	sp, #52	; 0x34
 80153b2:	460c      	mov	r4, r1
 80153b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80153b8:	4616      	mov	r6, r2
 80153ba:	461f      	mov	r7, r3
 80153bc:	4605      	mov	r5, r0
 80153be:	f003 fae7 	bl	8018990 <_localeconv_r>
 80153c2:	f8d0 a000 	ldr.w	sl, [r0]
 80153c6:	4650      	mov	r0, sl
 80153c8:	f7ea ff1c 	bl	8000204 <strlen>
 80153cc:	2300      	movs	r3, #0
 80153ce:	930a      	str	r3, [sp, #40]	; 0x28
 80153d0:	6823      	ldr	r3, [r4, #0]
 80153d2:	9305      	str	r3, [sp, #20]
 80153d4:	f8d8 3000 	ldr.w	r3, [r8]
 80153d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80153dc:	3307      	adds	r3, #7
 80153de:	f023 0307 	bic.w	r3, r3, #7
 80153e2:	f103 0208 	add.w	r2, r3, #8
 80153e6:	f8c8 2000 	str.w	r2, [r8]
 80153ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80153f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80153f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80153fa:	9307      	str	r3, [sp, #28]
 80153fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8015400:	ee08 0a10 	vmov	s16, r0
 8015404:	4b9f      	ldr	r3, [pc, #636]	; (8015684 <_printf_float+0x2dc>)
 8015406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801540a:	f04f 32ff 	mov.w	r2, #4294967295
 801540e:	f7eb fbad 	bl	8000b6c <__aeabi_dcmpun>
 8015412:	bb88      	cbnz	r0, 8015478 <_printf_float+0xd0>
 8015414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015418:	4b9a      	ldr	r3, [pc, #616]	; (8015684 <_printf_float+0x2dc>)
 801541a:	f04f 32ff 	mov.w	r2, #4294967295
 801541e:	f7eb fb87 	bl	8000b30 <__aeabi_dcmple>
 8015422:	bb48      	cbnz	r0, 8015478 <_printf_float+0xd0>
 8015424:	2200      	movs	r2, #0
 8015426:	2300      	movs	r3, #0
 8015428:	4640      	mov	r0, r8
 801542a:	4649      	mov	r1, r9
 801542c:	f7eb fb76 	bl	8000b1c <__aeabi_dcmplt>
 8015430:	b110      	cbz	r0, 8015438 <_printf_float+0x90>
 8015432:	232d      	movs	r3, #45	; 0x2d
 8015434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015438:	4b93      	ldr	r3, [pc, #588]	; (8015688 <_printf_float+0x2e0>)
 801543a:	4894      	ldr	r0, [pc, #592]	; (801568c <_printf_float+0x2e4>)
 801543c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015440:	bf94      	ite	ls
 8015442:	4698      	movls	r8, r3
 8015444:	4680      	movhi	r8, r0
 8015446:	2303      	movs	r3, #3
 8015448:	6123      	str	r3, [r4, #16]
 801544a:	9b05      	ldr	r3, [sp, #20]
 801544c:	f023 0204 	bic.w	r2, r3, #4
 8015450:	6022      	str	r2, [r4, #0]
 8015452:	f04f 0900 	mov.w	r9, #0
 8015456:	9700      	str	r7, [sp, #0]
 8015458:	4633      	mov	r3, r6
 801545a:	aa0b      	add	r2, sp, #44	; 0x2c
 801545c:	4621      	mov	r1, r4
 801545e:	4628      	mov	r0, r5
 8015460:	f000 f9d8 	bl	8015814 <_printf_common>
 8015464:	3001      	adds	r0, #1
 8015466:	f040 8090 	bne.w	801558a <_printf_float+0x1e2>
 801546a:	f04f 30ff 	mov.w	r0, #4294967295
 801546e:	b00d      	add	sp, #52	; 0x34
 8015470:	ecbd 8b02 	vpop	{d8}
 8015474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015478:	4642      	mov	r2, r8
 801547a:	464b      	mov	r3, r9
 801547c:	4640      	mov	r0, r8
 801547e:	4649      	mov	r1, r9
 8015480:	f7eb fb74 	bl	8000b6c <__aeabi_dcmpun>
 8015484:	b140      	cbz	r0, 8015498 <_printf_float+0xf0>
 8015486:	464b      	mov	r3, r9
 8015488:	2b00      	cmp	r3, #0
 801548a:	bfbc      	itt	lt
 801548c:	232d      	movlt	r3, #45	; 0x2d
 801548e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015492:	487f      	ldr	r0, [pc, #508]	; (8015690 <_printf_float+0x2e8>)
 8015494:	4b7f      	ldr	r3, [pc, #508]	; (8015694 <_printf_float+0x2ec>)
 8015496:	e7d1      	b.n	801543c <_printf_float+0x94>
 8015498:	6863      	ldr	r3, [r4, #4]
 801549a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801549e:	9206      	str	r2, [sp, #24]
 80154a0:	1c5a      	adds	r2, r3, #1
 80154a2:	d13f      	bne.n	8015524 <_printf_float+0x17c>
 80154a4:	2306      	movs	r3, #6
 80154a6:	6063      	str	r3, [r4, #4]
 80154a8:	9b05      	ldr	r3, [sp, #20]
 80154aa:	6861      	ldr	r1, [r4, #4]
 80154ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80154b0:	2300      	movs	r3, #0
 80154b2:	9303      	str	r3, [sp, #12]
 80154b4:	ab0a      	add	r3, sp, #40	; 0x28
 80154b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80154ba:	ab09      	add	r3, sp, #36	; 0x24
 80154bc:	ec49 8b10 	vmov	d0, r8, r9
 80154c0:	9300      	str	r3, [sp, #0]
 80154c2:	6022      	str	r2, [r4, #0]
 80154c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154c8:	4628      	mov	r0, r5
 80154ca:	f7ff fecd 	bl	8015268 <__cvt>
 80154ce:	9b06      	ldr	r3, [sp, #24]
 80154d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154d2:	2b47      	cmp	r3, #71	; 0x47
 80154d4:	4680      	mov	r8, r0
 80154d6:	d108      	bne.n	80154ea <_printf_float+0x142>
 80154d8:	1cc8      	adds	r0, r1, #3
 80154da:	db02      	blt.n	80154e2 <_printf_float+0x13a>
 80154dc:	6863      	ldr	r3, [r4, #4]
 80154de:	4299      	cmp	r1, r3
 80154e0:	dd41      	ble.n	8015566 <_printf_float+0x1be>
 80154e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80154e6:	fa5f fb8b 	uxtb.w	fp, fp
 80154ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80154ee:	d820      	bhi.n	8015532 <_printf_float+0x18a>
 80154f0:	3901      	subs	r1, #1
 80154f2:	465a      	mov	r2, fp
 80154f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154f8:	9109      	str	r1, [sp, #36]	; 0x24
 80154fa:	f7ff ff17 	bl	801532c <__exponent>
 80154fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015500:	1813      	adds	r3, r2, r0
 8015502:	2a01      	cmp	r2, #1
 8015504:	4681      	mov	r9, r0
 8015506:	6123      	str	r3, [r4, #16]
 8015508:	dc02      	bgt.n	8015510 <_printf_float+0x168>
 801550a:	6822      	ldr	r2, [r4, #0]
 801550c:	07d2      	lsls	r2, r2, #31
 801550e:	d501      	bpl.n	8015514 <_printf_float+0x16c>
 8015510:	3301      	adds	r3, #1
 8015512:	6123      	str	r3, [r4, #16]
 8015514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015518:	2b00      	cmp	r3, #0
 801551a:	d09c      	beq.n	8015456 <_printf_float+0xae>
 801551c:	232d      	movs	r3, #45	; 0x2d
 801551e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015522:	e798      	b.n	8015456 <_printf_float+0xae>
 8015524:	9a06      	ldr	r2, [sp, #24]
 8015526:	2a47      	cmp	r2, #71	; 0x47
 8015528:	d1be      	bne.n	80154a8 <_printf_float+0x100>
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1bc      	bne.n	80154a8 <_printf_float+0x100>
 801552e:	2301      	movs	r3, #1
 8015530:	e7b9      	b.n	80154a6 <_printf_float+0xfe>
 8015532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015536:	d118      	bne.n	801556a <_printf_float+0x1c2>
 8015538:	2900      	cmp	r1, #0
 801553a:	6863      	ldr	r3, [r4, #4]
 801553c:	dd0b      	ble.n	8015556 <_printf_float+0x1ae>
 801553e:	6121      	str	r1, [r4, #16]
 8015540:	b913      	cbnz	r3, 8015548 <_printf_float+0x1a0>
 8015542:	6822      	ldr	r2, [r4, #0]
 8015544:	07d0      	lsls	r0, r2, #31
 8015546:	d502      	bpl.n	801554e <_printf_float+0x1a6>
 8015548:	3301      	adds	r3, #1
 801554a:	440b      	add	r3, r1
 801554c:	6123      	str	r3, [r4, #16]
 801554e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015550:	f04f 0900 	mov.w	r9, #0
 8015554:	e7de      	b.n	8015514 <_printf_float+0x16c>
 8015556:	b913      	cbnz	r3, 801555e <_printf_float+0x1b6>
 8015558:	6822      	ldr	r2, [r4, #0]
 801555a:	07d2      	lsls	r2, r2, #31
 801555c:	d501      	bpl.n	8015562 <_printf_float+0x1ba>
 801555e:	3302      	adds	r3, #2
 8015560:	e7f4      	b.n	801554c <_printf_float+0x1a4>
 8015562:	2301      	movs	r3, #1
 8015564:	e7f2      	b.n	801554c <_printf_float+0x1a4>
 8015566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801556a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801556c:	4299      	cmp	r1, r3
 801556e:	db05      	blt.n	801557c <_printf_float+0x1d4>
 8015570:	6823      	ldr	r3, [r4, #0]
 8015572:	6121      	str	r1, [r4, #16]
 8015574:	07d8      	lsls	r0, r3, #31
 8015576:	d5ea      	bpl.n	801554e <_printf_float+0x1a6>
 8015578:	1c4b      	adds	r3, r1, #1
 801557a:	e7e7      	b.n	801554c <_printf_float+0x1a4>
 801557c:	2900      	cmp	r1, #0
 801557e:	bfd4      	ite	le
 8015580:	f1c1 0202 	rsble	r2, r1, #2
 8015584:	2201      	movgt	r2, #1
 8015586:	4413      	add	r3, r2
 8015588:	e7e0      	b.n	801554c <_printf_float+0x1a4>
 801558a:	6823      	ldr	r3, [r4, #0]
 801558c:	055a      	lsls	r2, r3, #21
 801558e:	d407      	bmi.n	80155a0 <_printf_float+0x1f8>
 8015590:	6923      	ldr	r3, [r4, #16]
 8015592:	4642      	mov	r2, r8
 8015594:	4631      	mov	r1, r6
 8015596:	4628      	mov	r0, r5
 8015598:	47b8      	blx	r7
 801559a:	3001      	adds	r0, #1
 801559c:	d12c      	bne.n	80155f8 <_printf_float+0x250>
 801559e:	e764      	b.n	801546a <_printf_float+0xc2>
 80155a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80155a4:	f240 80e0 	bls.w	8015768 <_printf_float+0x3c0>
 80155a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155ac:	2200      	movs	r2, #0
 80155ae:	2300      	movs	r3, #0
 80155b0:	f7eb faaa 	bl	8000b08 <__aeabi_dcmpeq>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d034      	beq.n	8015622 <_printf_float+0x27a>
 80155b8:	4a37      	ldr	r2, [pc, #220]	; (8015698 <_printf_float+0x2f0>)
 80155ba:	2301      	movs	r3, #1
 80155bc:	4631      	mov	r1, r6
 80155be:	4628      	mov	r0, r5
 80155c0:	47b8      	blx	r7
 80155c2:	3001      	adds	r0, #1
 80155c4:	f43f af51 	beq.w	801546a <_printf_float+0xc2>
 80155c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155cc:	429a      	cmp	r2, r3
 80155ce:	db02      	blt.n	80155d6 <_printf_float+0x22e>
 80155d0:	6823      	ldr	r3, [r4, #0]
 80155d2:	07d8      	lsls	r0, r3, #31
 80155d4:	d510      	bpl.n	80155f8 <_printf_float+0x250>
 80155d6:	ee18 3a10 	vmov	r3, s16
 80155da:	4652      	mov	r2, sl
 80155dc:	4631      	mov	r1, r6
 80155de:	4628      	mov	r0, r5
 80155e0:	47b8      	blx	r7
 80155e2:	3001      	adds	r0, #1
 80155e4:	f43f af41 	beq.w	801546a <_printf_float+0xc2>
 80155e8:	f04f 0800 	mov.w	r8, #0
 80155ec:	f104 091a 	add.w	r9, r4, #26
 80155f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155f2:	3b01      	subs	r3, #1
 80155f4:	4543      	cmp	r3, r8
 80155f6:	dc09      	bgt.n	801560c <_printf_float+0x264>
 80155f8:	6823      	ldr	r3, [r4, #0]
 80155fa:	079b      	lsls	r3, r3, #30
 80155fc:	f100 8105 	bmi.w	801580a <_printf_float+0x462>
 8015600:	68e0      	ldr	r0, [r4, #12]
 8015602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015604:	4298      	cmp	r0, r3
 8015606:	bfb8      	it	lt
 8015608:	4618      	movlt	r0, r3
 801560a:	e730      	b.n	801546e <_printf_float+0xc6>
 801560c:	2301      	movs	r3, #1
 801560e:	464a      	mov	r2, r9
 8015610:	4631      	mov	r1, r6
 8015612:	4628      	mov	r0, r5
 8015614:	47b8      	blx	r7
 8015616:	3001      	adds	r0, #1
 8015618:	f43f af27 	beq.w	801546a <_printf_float+0xc2>
 801561c:	f108 0801 	add.w	r8, r8, #1
 8015620:	e7e6      	b.n	80155f0 <_printf_float+0x248>
 8015622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015624:	2b00      	cmp	r3, #0
 8015626:	dc39      	bgt.n	801569c <_printf_float+0x2f4>
 8015628:	4a1b      	ldr	r2, [pc, #108]	; (8015698 <_printf_float+0x2f0>)
 801562a:	2301      	movs	r3, #1
 801562c:	4631      	mov	r1, r6
 801562e:	4628      	mov	r0, r5
 8015630:	47b8      	blx	r7
 8015632:	3001      	adds	r0, #1
 8015634:	f43f af19 	beq.w	801546a <_printf_float+0xc2>
 8015638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801563c:	4313      	orrs	r3, r2
 801563e:	d102      	bne.n	8015646 <_printf_float+0x29e>
 8015640:	6823      	ldr	r3, [r4, #0]
 8015642:	07d9      	lsls	r1, r3, #31
 8015644:	d5d8      	bpl.n	80155f8 <_printf_float+0x250>
 8015646:	ee18 3a10 	vmov	r3, s16
 801564a:	4652      	mov	r2, sl
 801564c:	4631      	mov	r1, r6
 801564e:	4628      	mov	r0, r5
 8015650:	47b8      	blx	r7
 8015652:	3001      	adds	r0, #1
 8015654:	f43f af09 	beq.w	801546a <_printf_float+0xc2>
 8015658:	f04f 0900 	mov.w	r9, #0
 801565c:	f104 0a1a 	add.w	sl, r4, #26
 8015660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015662:	425b      	negs	r3, r3
 8015664:	454b      	cmp	r3, r9
 8015666:	dc01      	bgt.n	801566c <_printf_float+0x2c4>
 8015668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566a:	e792      	b.n	8015592 <_printf_float+0x1ea>
 801566c:	2301      	movs	r3, #1
 801566e:	4652      	mov	r2, sl
 8015670:	4631      	mov	r1, r6
 8015672:	4628      	mov	r0, r5
 8015674:	47b8      	blx	r7
 8015676:	3001      	adds	r0, #1
 8015678:	f43f aef7 	beq.w	801546a <_printf_float+0xc2>
 801567c:	f109 0901 	add.w	r9, r9, #1
 8015680:	e7ee      	b.n	8015660 <_printf_float+0x2b8>
 8015682:	bf00      	nop
 8015684:	7fefffff 	.word	0x7fefffff
 8015688:	08073199 	.word	0x08073199
 801568c:	0807319d 	.word	0x0807319d
 8015690:	080731a5 	.word	0x080731a5
 8015694:	080731a1 	.word	0x080731a1
 8015698:	080736d0 	.word	0x080736d0
 801569c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801569e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80156a0:	429a      	cmp	r2, r3
 80156a2:	bfa8      	it	ge
 80156a4:	461a      	movge	r2, r3
 80156a6:	2a00      	cmp	r2, #0
 80156a8:	4691      	mov	r9, r2
 80156aa:	dc37      	bgt.n	801571c <_printf_float+0x374>
 80156ac:	f04f 0b00 	mov.w	fp, #0
 80156b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156b4:	f104 021a 	add.w	r2, r4, #26
 80156b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80156ba:	9305      	str	r3, [sp, #20]
 80156bc:	eba3 0309 	sub.w	r3, r3, r9
 80156c0:	455b      	cmp	r3, fp
 80156c2:	dc33      	bgt.n	801572c <_printf_float+0x384>
 80156c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156c8:	429a      	cmp	r2, r3
 80156ca:	db3b      	blt.n	8015744 <_printf_float+0x39c>
 80156cc:	6823      	ldr	r3, [r4, #0]
 80156ce:	07da      	lsls	r2, r3, #31
 80156d0:	d438      	bmi.n	8015744 <_printf_float+0x39c>
 80156d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d4:	9a05      	ldr	r2, [sp, #20]
 80156d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156d8:	1a9a      	subs	r2, r3, r2
 80156da:	eba3 0901 	sub.w	r9, r3, r1
 80156de:	4591      	cmp	r9, r2
 80156e0:	bfa8      	it	ge
 80156e2:	4691      	movge	r9, r2
 80156e4:	f1b9 0f00 	cmp.w	r9, #0
 80156e8:	dc35      	bgt.n	8015756 <_printf_float+0x3ae>
 80156ea:	f04f 0800 	mov.w	r8, #0
 80156ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156f2:	f104 0a1a 	add.w	sl, r4, #26
 80156f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156fa:	1a9b      	subs	r3, r3, r2
 80156fc:	eba3 0309 	sub.w	r3, r3, r9
 8015700:	4543      	cmp	r3, r8
 8015702:	f77f af79 	ble.w	80155f8 <_printf_float+0x250>
 8015706:	2301      	movs	r3, #1
 8015708:	4652      	mov	r2, sl
 801570a:	4631      	mov	r1, r6
 801570c:	4628      	mov	r0, r5
 801570e:	47b8      	blx	r7
 8015710:	3001      	adds	r0, #1
 8015712:	f43f aeaa 	beq.w	801546a <_printf_float+0xc2>
 8015716:	f108 0801 	add.w	r8, r8, #1
 801571a:	e7ec      	b.n	80156f6 <_printf_float+0x34e>
 801571c:	4613      	mov	r3, r2
 801571e:	4631      	mov	r1, r6
 8015720:	4642      	mov	r2, r8
 8015722:	4628      	mov	r0, r5
 8015724:	47b8      	blx	r7
 8015726:	3001      	adds	r0, #1
 8015728:	d1c0      	bne.n	80156ac <_printf_float+0x304>
 801572a:	e69e      	b.n	801546a <_printf_float+0xc2>
 801572c:	2301      	movs	r3, #1
 801572e:	4631      	mov	r1, r6
 8015730:	4628      	mov	r0, r5
 8015732:	9205      	str	r2, [sp, #20]
 8015734:	47b8      	blx	r7
 8015736:	3001      	adds	r0, #1
 8015738:	f43f ae97 	beq.w	801546a <_printf_float+0xc2>
 801573c:	9a05      	ldr	r2, [sp, #20]
 801573e:	f10b 0b01 	add.w	fp, fp, #1
 8015742:	e7b9      	b.n	80156b8 <_printf_float+0x310>
 8015744:	ee18 3a10 	vmov	r3, s16
 8015748:	4652      	mov	r2, sl
 801574a:	4631      	mov	r1, r6
 801574c:	4628      	mov	r0, r5
 801574e:	47b8      	blx	r7
 8015750:	3001      	adds	r0, #1
 8015752:	d1be      	bne.n	80156d2 <_printf_float+0x32a>
 8015754:	e689      	b.n	801546a <_printf_float+0xc2>
 8015756:	9a05      	ldr	r2, [sp, #20]
 8015758:	464b      	mov	r3, r9
 801575a:	4442      	add	r2, r8
 801575c:	4631      	mov	r1, r6
 801575e:	4628      	mov	r0, r5
 8015760:	47b8      	blx	r7
 8015762:	3001      	adds	r0, #1
 8015764:	d1c1      	bne.n	80156ea <_printf_float+0x342>
 8015766:	e680      	b.n	801546a <_printf_float+0xc2>
 8015768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801576a:	2a01      	cmp	r2, #1
 801576c:	dc01      	bgt.n	8015772 <_printf_float+0x3ca>
 801576e:	07db      	lsls	r3, r3, #31
 8015770:	d538      	bpl.n	80157e4 <_printf_float+0x43c>
 8015772:	2301      	movs	r3, #1
 8015774:	4642      	mov	r2, r8
 8015776:	4631      	mov	r1, r6
 8015778:	4628      	mov	r0, r5
 801577a:	47b8      	blx	r7
 801577c:	3001      	adds	r0, #1
 801577e:	f43f ae74 	beq.w	801546a <_printf_float+0xc2>
 8015782:	ee18 3a10 	vmov	r3, s16
 8015786:	4652      	mov	r2, sl
 8015788:	4631      	mov	r1, r6
 801578a:	4628      	mov	r0, r5
 801578c:	47b8      	blx	r7
 801578e:	3001      	adds	r0, #1
 8015790:	f43f ae6b 	beq.w	801546a <_printf_float+0xc2>
 8015794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015798:	2200      	movs	r2, #0
 801579a:	2300      	movs	r3, #0
 801579c:	f7eb f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80157a0:	b9d8      	cbnz	r0, 80157da <_printf_float+0x432>
 80157a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a4:	f108 0201 	add.w	r2, r8, #1
 80157a8:	3b01      	subs	r3, #1
 80157aa:	4631      	mov	r1, r6
 80157ac:	4628      	mov	r0, r5
 80157ae:	47b8      	blx	r7
 80157b0:	3001      	adds	r0, #1
 80157b2:	d10e      	bne.n	80157d2 <_printf_float+0x42a>
 80157b4:	e659      	b.n	801546a <_printf_float+0xc2>
 80157b6:	2301      	movs	r3, #1
 80157b8:	4652      	mov	r2, sl
 80157ba:	4631      	mov	r1, r6
 80157bc:	4628      	mov	r0, r5
 80157be:	47b8      	blx	r7
 80157c0:	3001      	adds	r0, #1
 80157c2:	f43f ae52 	beq.w	801546a <_printf_float+0xc2>
 80157c6:	f108 0801 	add.w	r8, r8, #1
 80157ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157cc:	3b01      	subs	r3, #1
 80157ce:	4543      	cmp	r3, r8
 80157d0:	dcf1      	bgt.n	80157b6 <_printf_float+0x40e>
 80157d2:	464b      	mov	r3, r9
 80157d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80157d8:	e6dc      	b.n	8015594 <_printf_float+0x1ec>
 80157da:	f04f 0800 	mov.w	r8, #0
 80157de:	f104 0a1a 	add.w	sl, r4, #26
 80157e2:	e7f2      	b.n	80157ca <_printf_float+0x422>
 80157e4:	2301      	movs	r3, #1
 80157e6:	4642      	mov	r2, r8
 80157e8:	e7df      	b.n	80157aa <_printf_float+0x402>
 80157ea:	2301      	movs	r3, #1
 80157ec:	464a      	mov	r2, r9
 80157ee:	4631      	mov	r1, r6
 80157f0:	4628      	mov	r0, r5
 80157f2:	47b8      	blx	r7
 80157f4:	3001      	adds	r0, #1
 80157f6:	f43f ae38 	beq.w	801546a <_printf_float+0xc2>
 80157fa:	f108 0801 	add.w	r8, r8, #1
 80157fe:	68e3      	ldr	r3, [r4, #12]
 8015800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015802:	1a5b      	subs	r3, r3, r1
 8015804:	4543      	cmp	r3, r8
 8015806:	dcf0      	bgt.n	80157ea <_printf_float+0x442>
 8015808:	e6fa      	b.n	8015600 <_printf_float+0x258>
 801580a:	f04f 0800 	mov.w	r8, #0
 801580e:	f104 0919 	add.w	r9, r4, #25
 8015812:	e7f4      	b.n	80157fe <_printf_float+0x456>

08015814 <_printf_common>:
 8015814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015818:	4616      	mov	r6, r2
 801581a:	4699      	mov	r9, r3
 801581c:	688a      	ldr	r2, [r1, #8]
 801581e:	690b      	ldr	r3, [r1, #16]
 8015820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015824:	4293      	cmp	r3, r2
 8015826:	bfb8      	it	lt
 8015828:	4613      	movlt	r3, r2
 801582a:	6033      	str	r3, [r6, #0]
 801582c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015830:	4607      	mov	r7, r0
 8015832:	460c      	mov	r4, r1
 8015834:	b10a      	cbz	r2, 801583a <_printf_common+0x26>
 8015836:	3301      	adds	r3, #1
 8015838:	6033      	str	r3, [r6, #0]
 801583a:	6823      	ldr	r3, [r4, #0]
 801583c:	0699      	lsls	r1, r3, #26
 801583e:	bf42      	ittt	mi
 8015840:	6833      	ldrmi	r3, [r6, #0]
 8015842:	3302      	addmi	r3, #2
 8015844:	6033      	strmi	r3, [r6, #0]
 8015846:	6825      	ldr	r5, [r4, #0]
 8015848:	f015 0506 	ands.w	r5, r5, #6
 801584c:	d106      	bne.n	801585c <_printf_common+0x48>
 801584e:	f104 0a19 	add.w	sl, r4, #25
 8015852:	68e3      	ldr	r3, [r4, #12]
 8015854:	6832      	ldr	r2, [r6, #0]
 8015856:	1a9b      	subs	r3, r3, r2
 8015858:	42ab      	cmp	r3, r5
 801585a:	dc26      	bgt.n	80158aa <_printf_common+0x96>
 801585c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015860:	1e13      	subs	r3, r2, #0
 8015862:	6822      	ldr	r2, [r4, #0]
 8015864:	bf18      	it	ne
 8015866:	2301      	movne	r3, #1
 8015868:	0692      	lsls	r2, r2, #26
 801586a:	d42b      	bmi.n	80158c4 <_printf_common+0xb0>
 801586c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015870:	4649      	mov	r1, r9
 8015872:	4638      	mov	r0, r7
 8015874:	47c0      	blx	r8
 8015876:	3001      	adds	r0, #1
 8015878:	d01e      	beq.n	80158b8 <_printf_common+0xa4>
 801587a:	6823      	ldr	r3, [r4, #0]
 801587c:	68e5      	ldr	r5, [r4, #12]
 801587e:	6832      	ldr	r2, [r6, #0]
 8015880:	f003 0306 	and.w	r3, r3, #6
 8015884:	2b04      	cmp	r3, #4
 8015886:	bf08      	it	eq
 8015888:	1aad      	subeq	r5, r5, r2
 801588a:	68a3      	ldr	r3, [r4, #8]
 801588c:	6922      	ldr	r2, [r4, #16]
 801588e:	bf0c      	ite	eq
 8015890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015894:	2500      	movne	r5, #0
 8015896:	4293      	cmp	r3, r2
 8015898:	bfc4      	itt	gt
 801589a:	1a9b      	subgt	r3, r3, r2
 801589c:	18ed      	addgt	r5, r5, r3
 801589e:	2600      	movs	r6, #0
 80158a0:	341a      	adds	r4, #26
 80158a2:	42b5      	cmp	r5, r6
 80158a4:	d11a      	bne.n	80158dc <_printf_common+0xc8>
 80158a6:	2000      	movs	r0, #0
 80158a8:	e008      	b.n	80158bc <_printf_common+0xa8>
 80158aa:	2301      	movs	r3, #1
 80158ac:	4652      	mov	r2, sl
 80158ae:	4649      	mov	r1, r9
 80158b0:	4638      	mov	r0, r7
 80158b2:	47c0      	blx	r8
 80158b4:	3001      	adds	r0, #1
 80158b6:	d103      	bne.n	80158c0 <_printf_common+0xac>
 80158b8:	f04f 30ff 	mov.w	r0, #4294967295
 80158bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c0:	3501      	adds	r5, #1
 80158c2:	e7c6      	b.n	8015852 <_printf_common+0x3e>
 80158c4:	18e1      	adds	r1, r4, r3
 80158c6:	1c5a      	adds	r2, r3, #1
 80158c8:	2030      	movs	r0, #48	; 0x30
 80158ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80158ce:	4422      	add	r2, r4
 80158d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80158d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80158d8:	3302      	adds	r3, #2
 80158da:	e7c7      	b.n	801586c <_printf_common+0x58>
 80158dc:	2301      	movs	r3, #1
 80158de:	4622      	mov	r2, r4
 80158e0:	4649      	mov	r1, r9
 80158e2:	4638      	mov	r0, r7
 80158e4:	47c0      	blx	r8
 80158e6:	3001      	adds	r0, #1
 80158e8:	d0e6      	beq.n	80158b8 <_printf_common+0xa4>
 80158ea:	3601      	adds	r6, #1
 80158ec:	e7d9      	b.n	80158a2 <_printf_common+0x8e>
	...

080158f0 <_printf_i>:
 80158f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158f4:	7e0f      	ldrb	r7, [r1, #24]
 80158f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80158f8:	2f78      	cmp	r7, #120	; 0x78
 80158fa:	4691      	mov	r9, r2
 80158fc:	4680      	mov	r8, r0
 80158fe:	460c      	mov	r4, r1
 8015900:	469a      	mov	sl, r3
 8015902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015906:	d807      	bhi.n	8015918 <_printf_i+0x28>
 8015908:	2f62      	cmp	r7, #98	; 0x62
 801590a:	d80a      	bhi.n	8015922 <_printf_i+0x32>
 801590c:	2f00      	cmp	r7, #0
 801590e:	f000 80d8 	beq.w	8015ac2 <_printf_i+0x1d2>
 8015912:	2f58      	cmp	r7, #88	; 0x58
 8015914:	f000 80a3 	beq.w	8015a5e <_printf_i+0x16e>
 8015918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801591c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015920:	e03a      	b.n	8015998 <_printf_i+0xa8>
 8015922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015926:	2b15      	cmp	r3, #21
 8015928:	d8f6      	bhi.n	8015918 <_printf_i+0x28>
 801592a:	a101      	add	r1, pc, #4	; (adr r1, 8015930 <_printf_i+0x40>)
 801592c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015930:	08015989 	.word	0x08015989
 8015934:	0801599d 	.word	0x0801599d
 8015938:	08015919 	.word	0x08015919
 801593c:	08015919 	.word	0x08015919
 8015940:	08015919 	.word	0x08015919
 8015944:	08015919 	.word	0x08015919
 8015948:	0801599d 	.word	0x0801599d
 801594c:	08015919 	.word	0x08015919
 8015950:	08015919 	.word	0x08015919
 8015954:	08015919 	.word	0x08015919
 8015958:	08015919 	.word	0x08015919
 801595c:	08015aa9 	.word	0x08015aa9
 8015960:	080159cd 	.word	0x080159cd
 8015964:	08015a8b 	.word	0x08015a8b
 8015968:	08015919 	.word	0x08015919
 801596c:	08015919 	.word	0x08015919
 8015970:	08015acb 	.word	0x08015acb
 8015974:	08015919 	.word	0x08015919
 8015978:	080159cd 	.word	0x080159cd
 801597c:	08015919 	.word	0x08015919
 8015980:	08015919 	.word	0x08015919
 8015984:	08015a93 	.word	0x08015a93
 8015988:	682b      	ldr	r3, [r5, #0]
 801598a:	1d1a      	adds	r2, r3, #4
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	602a      	str	r2, [r5, #0]
 8015990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015998:	2301      	movs	r3, #1
 801599a:	e0a3      	b.n	8015ae4 <_printf_i+0x1f4>
 801599c:	6820      	ldr	r0, [r4, #0]
 801599e:	6829      	ldr	r1, [r5, #0]
 80159a0:	0606      	lsls	r6, r0, #24
 80159a2:	f101 0304 	add.w	r3, r1, #4
 80159a6:	d50a      	bpl.n	80159be <_printf_i+0xce>
 80159a8:	680e      	ldr	r6, [r1, #0]
 80159aa:	602b      	str	r3, [r5, #0]
 80159ac:	2e00      	cmp	r6, #0
 80159ae:	da03      	bge.n	80159b8 <_printf_i+0xc8>
 80159b0:	232d      	movs	r3, #45	; 0x2d
 80159b2:	4276      	negs	r6, r6
 80159b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159b8:	485e      	ldr	r0, [pc, #376]	; (8015b34 <_printf_i+0x244>)
 80159ba:	230a      	movs	r3, #10
 80159bc:	e019      	b.n	80159f2 <_printf_i+0x102>
 80159be:	680e      	ldr	r6, [r1, #0]
 80159c0:	602b      	str	r3, [r5, #0]
 80159c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80159c6:	bf18      	it	ne
 80159c8:	b236      	sxthne	r6, r6
 80159ca:	e7ef      	b.n	80159ac <_printf_i+0xbc>
 80159cc:	682b      	ldr	r3, [r5, #0]
 80159ce:	6820      	ldr	r0, [r4, #0]
 80159d0:	1d19      	adds	r1, r3, #4
 80159d2:	6029      	str	r1, [r5, #0]
 80159d4:	0601      	lsls	r1, r0, #24
 80159d6:	d501      	bpl.n	80159dc <_printf_i+0xec>
 80159d8:	681e      	ldr	r6, [r3, #0]
 80159da:	e002      	b.n	80159e2 <_printf_i+0xf2>
 80159dc:	0646      	lsls	r6, r0, #25
 80159de:	d5fb      	bpl.n	80159d8 <_printf_i+0xe8>
 80159e0:	881e      	ldrh	r6, [r3, #0]
 80159e2:	4854      	ldr	r0, [pc, #336]	; (8015b34 <_printf_i+0x244>)
 80159e4:	2f6f      	cmp	r7, #111	; 0x6f
 80159e6:	bf0c      	ite	eq
 80159e8:	2308      	moveq	r3, #8
 80159ea:	230a      	movne	r3, #10
 80159ec:	2100      	movs	r1, #0
 80159ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159f2:	6865      	ldr	r5, [r4, #4]
 80159f4:	60a5      	str	r5, [r4, #8]
 80159f6:	2d00      	cmp	r5, #0
 80159f8:	bfa2      	ittt	ge
 80159fa:	6821      	ldrge	r1, [r4, #0]
 80159fc:	f021 0104 	bicge.w	r1, r1, #4
 8015a00:	6021      	strge	r1, [r4, #0]
 8015a02:	b90e      	cbnz	r6, 8015a08 <_printf_i+0x118>
 8015a04:	2d00      	cmp	r5, #0
 8015a06:	d04d      	beq.n	8015aa4 <_printf_i+0x1b4>
 8015a08:	4615      	mov	r5, r2
 8015a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8015a12:	5dc7      	ldrb	r7, [r0, r7]
 8015a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a18:	4637      	mov	r7, r6
 8015a1a:	42bb      	cmp	r3, r7
 8015a1c:	460e      	mov	r6, r1
 8015a1e:	d9f4      	bls.n	8015a0a <_printf_i+0x11a>
 8015a20:	2b08      	cmp	r3, #8
 8015a22:	d10b      	bne.n	8015a3c <_printf_i+0x14c>
 8015a24:	6823      	ldr	r3, [r4, #0]
 8015a26:	07de      	lsls	r6, r3, #31
 8015a28:	d508      	bpl.n	8015a3c <_printf_i+0x14c>
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	6861      	ldr	r1, [r4, #4]
 8015a2e:	4299      	cmp	r1, r3
 8015a30:	bfde      	ittt	le
 8015a32:	2330      	movle	r3, #48	; 0x30
 8015a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a3c:	1b52      	subs	r2, r2, r5
 8015a3e:	6122      	str	r2, [r4, #16]
 8015a40:	f8cd a000 	str.w	sl, [sp]
 8015a44:	464b      	mov	r3, r9
 8015a46:	aa03      	add	r2, sp, #12
 8015a48:	4621      	mov	r1, r4
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	f7ff fee2 	bl	8015814 <_printf_common>
 8015a50:	3001      	adds	r0, #1
 8015a52:	d14c      	bne.n	8015aee <_printf_i+0x1fe>
 8015a54:	f04f 30ff 	mov.w	r0, #4294967295
 8015a58:	b004      	add	sp, #16
 8015a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a5e:	4835      	ldr	r0, [pc, #212]	; (8015b34 <_printf_i+0x244>)
 8015a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015a64:	6829      	ldr	r1, [r5, #0]
 8015a66:	6823      	ldr	r3, [r4, #0]
 8015a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8015a6c:	6029      	str	r1, [r5, #0]
 8015a6e:	061d      	lsls	r5, r3, #24
 8015a70:	d514      	bpl.n	8015a9c <_printf_i+0x1ac>
 8015a72:	07df      	lsls	r7, r3, #31
 8015a74:	bf44      	itt	mi
 8015a76:	f043 0320 	orrmi.w	r3, r3, #32
 8015a7a:	6023      	strmi	r3, [r4, #0]
 8015a7c:	b91e      	cbnz	r6, 8015a86 <_printf_i+0x196>
 8015a7e:	6823      	ldr	r3, [r4, #0]
 8015a80:	f023 0320 	bic.w	r3, r3, #32
 8015a84:	6023      	str	r3, [r4, #0]
 8015a86:	2310      	movs	r3, #16
 8015a88:	e7b0      	b.n	80159ec <_printf_i+0xfc>
 8015a8a:	6823      	ldr	r3, [r4, #0]
 8015a8c:	f043 0320 	orr.w	r3, r3, #32
 8015a90:	6023      	str	r3, [r4, #0]
 8015a92:	2378      	movs	r3, #120	; 0x78
 8015a94:	4828      	ldr	r0, [pc, #160]	; (8015b38 <_printf_i+0x248>)
 8015a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a9a:	e7e3      	b.n	8015a64 <_printf_i+0x174>
 8015a9c:	0659      	lsls	r1, r3, #25
 8015a9e:	bf48      	it	mi
 8015aa0:	b2b6      	uxthmi	r6, r6
 8015aa2:	e7e6      	b.n	8015a72 <_printf_i+0x182>
 8015aa4:	4615      	mov	r5, r2
 8015aa6:	e7bb      	b.n	8015a20 <_printf_i+0x130>
 8015aa8:	682b      	ldr	r3, [r5, #0]
 8015aaa:	6826      	ldr	r6, [r4, #0]
 8015aac:	6961      	ldr	r1, [r4, #20]
 8015aae:	1d18      	adds	r0, r3, #4
 8015ab0:	6028      	str	r0, [r5, #0]
 8015ab2:	0635      	lsls	r5, r6, #24
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	d501      	bpl.n	8015abc <_printf_i+0x1cc>
 8015ab8:	6019      	str	r1, [r3, #0]
 8015aba:	e002      	b.n	8015ac2 <_printf_i+0x1d2>
 8015abc:	0670      	lsls	r0, r6, #25
 8015abe:	d5fb      	bpl.n	8015ab8 <_printf_i+0x1c8>
 8015ac0:	8019      	strh	r1, [r3, #0]
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	6123      	str	r3, [r4, #16]
 8015ac6:	4615      	mov	r5, r2
 8015ac8:	e7ba      	b.n	8015a40 <_printf_i+0x150>
 8015aca:	682b      	ldr	r3, [r5, #0]
 8015acc:	1d1a      	adds	r2, r3, #4
 8015ace:	602a      	str	r2, [r5, #0]
 8015ad0:	681d      	ldr	r5, [r3, #0]
 8015ad2:	6862      	ldr	r2, [r4, #4]
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	f7ea fba2 	bl	8000220 <memchr>
 8015adc:	b108      	cbz	r0, 8015ae2 <_printf_i+0x1f2>
 8015ade:	1b40      	subs	r0, r0, r5
 8015ae0:	6060      	str	r0, [r4, #4]
 8015ae2:	6863      	ldr	r3, [r4, #4]
 8015ae4:	6123      	str	r3, [r4, #16]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aec:	e7a8      	b.n	8015a40 <_printf_i+0x150>
 8015aee:	6923      	ldr	r3, [r4, #16]
 8015af0:	462a      	mov	r2, r5
 8015af2:	4649      	mov	r1, r9
 8015af4:	4640      	mov	r0, r8
 8015af6:	47d0      	blx	sl
 8015af8:	3001      	adds	r0, #1
 8015afa:	d0ab      	beq.n	8015a54 <_printf_i+0x164>
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	079b      	lsls	r3, r3, #30
 8015b00:	d413      	bmi.n	8015b2a <_printf_i+0x23a>
 8015b02:	68e0      	ldr	r0, [r4, #12]
 8015b04:	9b03      	ldr	r3, [sp, #12]
 8015b06:	4298      	cmp	r0, r3
 8015b08:	bfb8      	it	lt
 8015b0a:	4618      	movlt	r0, r3
 8015b0c:	e7a4      	b.n	8015a58 <_printf_i+0x168>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	4632      	mov	r2, r6
 8015b12:	4649      	mov	r1, r9
 8015b14:	4640      	mov	r0, r8
 8015b16:	47d0      	blx	sl
 8015b18:	3001      	adds	r0, #1
 8015b1a:	d09b      	beq.n	8015a54 <_printf_i+0x164>
 8015b1c:	3501      	adds	r5, #1
 8015b1e:	68e3      	ldr	r3, [r4, #12]
 8015b20:	9903      	ldr	r1, [sp, #12]
 8015b22:	1a5b      	subs	r3, r3, r1
 8015b24:	42ab      	cmp	r3, r5
 8015b26:	dcf2      	bgt.n	8015b0e <_printf_i+0x21e>
 8015b28:	e7eb      	b.n	8015b02 <_printf_i+0x212>
 8015b2a:	2500      	movs	r5, #0
 8015b2c:	f104 0619 	add.w	r6, r4, #25
 8015b30:	e7f5      	b.n	8015b1e <_printf_i+0x22e>
 8015b32:	bf00      	nop
 8015b34:	080731a9 	.word	0x080731a9
 8015b38:	080731ba 	.word	0x080731ba

08015b3c <_sbrk_r>:
 8015b3c:	b538      	push	{r3, r4, r5, lr}
 8015b3e:	4d06      	ldr	r5, [pc, #24]	; (8015b58 <_sbrk_r+0x1c>)
 8015b40:	2300      	movs	r3, #0
 8015b42:	4604      	mov	r4, r0
 8015b44:	4608      	mov	r0, r1
 8015b46:	602b      	str	r3, [r5, #0]
 8015b48:	f7ee ffec 	bl	8004b24 <_sbrk>
 8015b4c:	1c43      	adds	r3, r0, #1
 8015b4e:	d102      	bne.n	8015b56 <_sbrk_r+0x1a>
 8015b50:	682b      	ldr	r3, [r5, #0]
 8015b52:	b103      	cbz	r3, 8015b56 <_sbrk_r+0x1a>
 8015b54:	6023      	str	r3, [r4, #0]
 8015b56:	bd38      	pop	{r3, r4, r5, pc}
 8015b58:	20005da8 	.word	0x20005da8

08015b5c <siprintf>:
 8015b5c:	b40e      	push	{r1, r2, r3}
 8015b5e:	b500      	push	{lr}
 8015b60:	b09c      	sub	sp, #112	; 0x70
 8015b62:	ab1d      	add	r3, sp, #116	; 0x74
 8015b64:	9002      	str	r0, [sp, #8]
 8015b66:	9006      	str	r0, [sp, #24]
 8015b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015b6c:	4809      	ldr	r0, [pc, #36]	; (8015b94 <siprintf+0x38>)
 8015b6e:	9107      	str	r1, [sp, #28]
 8015b70:	9104      	str	r1, [sp, #16]
 8015b72:	4909      	ldr	r1, [pc, #36]	; (8015b98 <siprintf+0x3c>)
 8015b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b78:	9105      	str	r1, [sp, #20]
 8015b7a:	6800      	ldr	r0, [r0, #0]
 8015b7c:	9301      	str	r3, [sp, #4]
 8015b7e:	a902      	add	r1, sp, #8
 8015b80:	f003 fd22 	bl	80195c8 <_svfiprintf_r>
 8015b84:	9b02      	ldr	r3, [sp, #8]
 8015b86:	2200      	movs	r2, #0
 8015b88:	701a      	strb	r2, [r3, #0]
 8015b8a:	b01c      	add	sp, #112	; 0x70
 8015b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b90:	b003      	add	sp, #12
 8015b92:	4770      	bx	lr
 8015b94:	20000248 	.word	0x20000248
 8015b98:	ffff0208 	.word	0xffff0208

08015b9c <siscanf>:
 8015b9c:	b40e      	push	{r1, r2, r3}
 8015b9e:	b510      	push	{r4, lr}
 8015ba0:	b09f      	sub	sp, #124	; 0x7c
 8015ba2:	ac21      	add	r4, sp, #132	; 0x84
 8015ba4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015ba8:	f854 2b04 	ldr.w	r2, [r4], #4
 8015bac:	9201      	str	r2, [sp, #4]
 8015bae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015bb2:	9004      	str	r0, [sp, #16]
 8015bb4:	9008      	str	r0, [sp, #32]
 8015bb6:	f7ea fb25 	bl	8000204 <strlen>
 8015bba:	4b0c      	ldr	r3, [pc, #48]	; (8015bec <siscanf+0x50>)
 8015bbc:	9005      	str	r0, [sp, #20]
 8015bbe:	9009      	str	r0, [sp, #36]	; 0x24
 8015bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8015bc2:	480b      	ldr	r0, [pc, #44]	; (8015bf0 <siscanf+0x54>)
 8015bc4:	9a01      	ldr	r2, [sp, #4]
 8015bc6:	6800      	ldr	r0, [r0, #0]
 8015bc8:	9403      	str	r4, [sp, #12]
 8015bca:	2300      	movs	r3, #0
 8015bcc:	9311      	str	r3, [sp, #68]	; 0x44
 8015bce:	9316      	str	r3, [sp, #88]	; 0x58
 8015bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015bd8:	a904      	add	r1, sp, #16
 8015bda:	4623      	mov	r3, r4
 8015bdc:	f003 fe4e 	bl	801987c <__ssvfiscanf_r>
 8015be0:	b01f      	add	sp, #124	; 0x7c
 8015be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015be6:	b003      	add	sp, #12
 8015be8:	4770      	bx	lr
 8015bea:	bf00      	nop
 8015bec:	08015c17 	.word	0x08015c17
 8015bf0:	20000248 	.word	0x20000248

08015bf4 <__sread>:
 8015bf4:	b510      	push	{r4, lr}
 8015bf6:	460c      	mov	r4, r1
 8015bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bfc:	f004 f908 	bl	8019e10 <_read_r>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	bfab      	itete	ge
 8015c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c06:	89a3      	ldrhlt	r3, [r4, #12]
 8015c08:	181b      	addge	r3, r3, r0
 8015c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c0e:	bfac      	ite	ge
 8015c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c12:	81a3      	strhlt	r3, [r4, #12]
 8015c14:	bd10      	pop	{r4, pc}

08015c16 <__seofread>:
 8015c16:	2000      	movs	r0, #0
 8015c18:	4770      	bx	lr

08015c1a <__swrite>:
 8015c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c1e:	461f      	mov	r7, r3
 8015c20:	898b      	ldrh	r3, [r1, #12]
 8015c22:	05db      	lsls	r3, r3, #23
 8015c24:	4605      	mov	r5, r0
 8015c26:	460c      	mov	r4, r1
 8015c28:	4616      	mov	r6, r2
 8015c2a:	d505      	bpl.n	8015c38 <__swrite+0x1e>
 8015c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c30:	2302      	movs	r3, #2
 8015c32:	2200      	movs	r2, #0
 8015c34:	f002 feb6 	bl	80189a4 <_lseek_r>
 8015c38:	89a3      	ldrh	r3, [r4, #12]
 8015c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c42:	81a3      	strh	r3, [r4, #12]
 8015c44:	4632      	mov	r2, r6
 8015c46:	463b      	mov	r3, r7
 8015c48:	4628      	mov	r0, r5
 8015c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c4e:	f001 ba09 	b.w	8017064 <_write_r>

08015c52 <__sseek>:
 8015c52:	b510      	push	{r4, lr}
 8015c54:	460c      	mov	r4, r1
 8015c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c5a:	f002 fea3 	bl	80189a4 <_lseek_r>
 8015c5e:	1c43      	adds	r3, r0, #1
 8015c60:	89a3      	ldrh	r3, [r4, #12]
 8015c62:	bf15      	itete	ne
 8015c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c6e:	81a3      	strheq	r3, [r4, #12]
 8015c70:	bf18      	it	ne
 8015c72:	81a3      	strhne	r3, [r4, #12]
 8015c74:	bd10      	pop	{r4, pc}

08015c76 <__sclose>:
 8015c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c7a:	f001 ba7b 	b.w	8017174 <_close_r>

08015c7e <strcpy>:
 8015c7e:	4603      	mov	r3, r0
 8015c80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c84:	f803 2b01 	strb.w	r2, [r3], #1
 8015c88:	2a00      	cmp	r2, #0
 8015c8a:	d1f9      	bne.n	8015c80 <strcpy+0x2>
 8015c8c:	4770      	bx	lr

08015c8e <strncpy>:
 8015c8e:	b510      	push	{r4, lr}
 8015c90:	3901      	subs	r1, #1
 8015c92:	4603      	mov	r3, r0
 8015c94:	b132      	cbz	r2, 8015ca4 <strncpy+0x16>
 8015c96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015c9a:	f803 4b01 	strb.w	r4, [r3], #1
 8015c9e:	3a01      	subs	r2, #1
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d1f7      	bne.n	8015c94 <strncpy+0x6>
 8015ca4:	441a      	add	r2, r3
 8015ca6:	2100      	movs	r1, #0
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	d100      	bne.n	8015cae <strncpy+0x20>
 8015cac:	bd10      	pop	{r4, pc}
 8015cae:	f803 1b01 	strb.w	r1, [r3], #1
 8015cb2:	e7f9      	b.n	8015ca8 <strncpy+0x1a>

08015cb4 <strpbrk>:
 8015cb4:	b570      	push	{r4, r5, r6, lr}
 8015cb6:	7803      	ldrb	r3, [r0, #0]
 8015cb8:	b1a3      	cbz	r3, 8015ce4 <strpbrk+0x30>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	460c      	mov	r4, r1
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f813 5b01 	ldrb.w	r5, [r3], #1
 8015cc4:	b14d      	cbz	r5, 8015cda <strpbrk+0x26>
 8015cc6:	460a      	mov	r2, r1
 8015cc8:	e001      	b.n	8015cce <strpbrk+0x1a>
 8015cca:	42ae      	cmp	r6, r5
 8015ccc:	d009      	beq.n	8015ce2 <strpbrk+0x2e>
 8015cce:	4614      	mov	r4, r2
 8015cd0:	f812 6b01 	ldrb.w	r6, [r2], #1
 8015cd4:	2e00      	cmp	r6, #0
 8015cd6:	d1f8      	bne.n	8015cca <strpbrk+0x16>
 8015cd8:	e7f1      	b.n	8015cbe <strpbrk+0xa>
 8015cda:	7823      	ldrb	r3, [r4, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	bf08      	it	eq
 8015ce0:	2000      	moveq	r0, #0
 8015ce2:	bd70      	pop	{r4, r5, r6, pc}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	e7fc      	b.n	8015ce2 <strpbrk+0x2e>

08015ce8 <strstr>:
 8015ce8:	780a      	ldrb	r2, [r1, #0]
 8015cea:	b570      	push	{r4, r5, r6, lr}
 8015cec:	b96a      	cbnz	r2, 8015d0a <strstr+0x22>
 8015cee:	bd70      	pop	{r4, r5, r6, pc}
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d109      	bne.n	8015d08 <strstr+0x20>
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	4605      	mov	r5, r0
 8015cf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d0f6      	beq.n	8015cee <strstr+0x6>
 8015d00:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015d04:	429e      	cmp	r6, r3
 8015d06:	d0f7      	beq.n	8015cf8 <strstr+0x10>
 8015d08:	3001      	adds	r0, #1
 8015d0a:	7803      	ldrb	r3, [r0, #0]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d1ef      	bne.n	8015cf0 <strstr+0x8>
 8015d10:	4618      	mov	r0, r3
 8015d12:	e7ec      	b.n	8015cee <strstr+0x6>

08015d14 <sulp>:
 8015d14:	b570      	push	{r4, r5, r6, lr}
 8015d16:	4604      	mov	r4, r0
 8015d18:	460d      	mov	r5, r1
 8015d1a:	ec45 4b10 	vmov	d0, r4, r5
 8015d1e:	4616      	mov	r6, r2
 8015d20:	f003 fa62 	bl	80191e8 <__ulp>
 8015d24:	ec51 0b10 	vmov	r0, r1, d0
 8015d28:	b17e      	cbz	r6, 8015d4a <sulp+0x36>
 8015d2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015d2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	dd09      	ble.n	8015d4a <sulp+0x36>
 8015d36:	051b      	lsls	r3, r3, #20
 8015d38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015d3c:	2400      	movs	r4, #0
 8015d3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015d42:	4622      	mov	r2, r4
 8015d44:	462b      	mov	r3, r5
 8015d46:	f7ea fc77 	bl	8000638 <__aeabi_dmul>
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	0000      	movs	r0, r0
	...

08015d50 <_strtod_l>:
 8015d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d54:	ed2d 8b02 	vpush	{d8}
 8015d58:	b09d      	sub	sp, #116	; 0x74
 8015d5a:	461f      	mov	r7, r3
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	9318      	str	r3, [sp, #96]	; 0x60
 8015d60:	4ba2      	ldr	r3, [pc, #648]	; (8015fec <_strtod_l+0x29c>)
 8015d62:	9213      	str	r2, [sp, #76]	; 0x4c
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	9305      	str	r3, [sp, #20]
 8015d68:	4604      	mov	r4, r0
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	4688      	mov	r8, r1
 8015d6e:	f7ea fa49 	bl	8000204 <strlen>
 8015d72:	f04f 0a00 	mov.w	sl, #0
 8015d76:	4605      	mov	r5, r0
 8015d78:	f04f 0b00 	mov.w	fp, #0
 8015d7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d82:	781a      	ldrb	r2, [r3, #0]
 8015d84:	2a2b      	cmp	r2, #43	; 0x2b
 8015d86:	d04e      	beq.n	8015e26 <_strtod_l+0xd6>
 8015d88:	d83b      	bhi.n	8015e02 <_strtod_l+0xb2>
 8015d8a:	2a0d      	cmp	r2, #13
 8015d8c:	d834      	bhi.n	8015df8 <_strtod_l+0xa8>
 8015d8e:	2a08      	cmp	r2, #8
 8015d90:	d834      	bhi.n	8015dfc <_strtod_l+0xac>
 8015d92:	2a00      	cmp	r2, #0
 8015d94:	d03e      	beq.n	8015e14 <_strtod_l+0xc4>
 8015d96:	2300      	movs	r3, #0
 8015d98:	930a      	str	r3, [sp, #40]	; 0x28
 8015d9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015d9c:	7833      	ldrb	r3, [r6, #0]
 8015d9e:	2b30      	cmp	r3, #48	; 0x30
 8015da0:	f040 80b0 	bne.w	8015f04 <_strtod_l+0x1b4>
 8015da4:	7873      	ldrb	r3, [r6, #1]
 8015da6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015daa:	2b58      	cmp	r3, #88	; 0x58
 8015dac:	d168      	bne.n	8015e80 <_strtod_l+0x130>
 8015dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015db0:	9301      	str	r3, [sp, #4]
 8015db2:	ab18      	add	r3, sp, #96	; 0x60
 8015db4:	9702      	str	r7, [sp, #8]
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	4a8d      	ldr	r2, [pc, #564]	; (8015ff0 <_strtod_l+0x2a0>)
 8015dba:	ab19      	add	r3, sp, #100	; 0x64
 8015dbc:	a917      	add	r1, sp, #92	; 0x5c
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	f002 fa96 	bl	80182f0 <__gethex>
 8015dc4:	f010 0707 	ands.w	r7, r0, #7
 8015dc8:	4605      	mov	r5, r0
 8015dca:	d005      	beq.n	8015dd8 <_strtod_l+0x88>
 8015dcc:	2f06      	cmp	r7, #6
 8015dce:	d12c      	bne.n	8015e2a <_strtod_l+0xda>
 8015dd0:	3601      	adds	r6, #1
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	9617      	str	r6, [sp, #92]	; 0x5c
 8015dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8015dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	f040 8590 	bne.w	8016900 <_strtod_l+0xbb0>
 8015de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de2:	b1eb      	cbz	r3, 8015e20 <_strtod_l+0xd0>
 8015de4:	4652      	mov	r2, sl
 8015de6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015dea:	ec43 2b10 	vmov	d0, r2, r3
 8015dee:	b01d      	add	sp, #116	; 0x74
 8015df0:	ecbd 8b02 	vpop	{d8}
 8015df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df8:	2a20      	cmp	r2, #32
 8015dfa:	d1cc      	bne.n	8015d96 <_strtod_l+0x46>
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e00:	e7be      	b.n	8015d80 <_strtod_l+0x30>
 8015e02:	2a2d      	cmp	r2, #45	; 0x2d
 8015e04:	d1c7      	bne.n	8015d96 <_strtod_l+0x46>
 8015e06:	2201      	movs	r2, #1
 8015e08:	920a      	str	r2, [sp, #40]	; 0x28
 8015e0a:	1c5a      	adds	r2, r3, #1
 8015e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e0e:	785b      	ldrb	r3, [r3, #1]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d1c2      	bne.n	8015d9a <_strtod_l+0x4a>
 8015e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f040 856e 	bne.w	80168fc <_strtod_l+0xbac>
 8015e20:	4652      	mov	r2, sl
 8015e22:	465b      	mov	r3, fp
 8015e24:	e7e1      	b.n	8015dea <_strtod_l+0x9a>
 8015e26:	2200      	movs	r2, #0
 8015e28:	e7ee      	b.n	8015e08 <_strtod_l+0xb8>
 8015e2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e2c:	b13a      	cbz	r2, 8015e3e <_strtod_l+0xee>
 8015e2e:	2135      	movs	r1, #53	; 0x35
 8015e30:	a81a      	add	r0, sp, #104	; 0x68
 8015e32:	f003 fae4 	bl	80193fe <__copybits>
 8015e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f002 fea3 	bl	8018b84 <_Bfree>
 8015e3e:	3f01      	subs	r7, #1
 8015e40:	2f04      	cmp	r7, #4
 8015e42:	d806      	bhi.n	8015e52 <_strtod_l+0x102>
 8015e44:	e8df f007 	tbb	[pc, r7]
 8015e48:	1714030a 	.word	0x1714030a
 8015e4c:	0a          	.byte	0x0a
 8015e4d:	00          	.byte	0x00
 8015e4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015e52:	0728      	lsls	r0, r5, #28
 8015e54:	d5c0      	bpl.n	8015dd8 <_strtod_l+0x88>
 8015e56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015e5a:	e7bd      	b.n	8015dd8 <_strtod_l+0x88>
 8015e5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015e62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015e66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015e6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015e6e:	e7f0      	b.n	8015e52 <_strtod_l+0x102>
 8015e70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8015ff4 <_strtod_l+0x2a4>
 8015e74:	e7ed      	b.n	8015e52 <_strtod_l+0x102>
 8015e76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015e7a:	f04f 3aff 	mov.w	sl, #4294967295
 8015e7e:	e7e8      	b.n	8015e52 <_strtod_l+0x102>
 8015e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e82:	1c5a      	adds	r2, r3, #1
 8015e84:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e86:	785b      	ldrb	r3, [r3, #1]
 8015e88:	2b30      	cmp	r3, #48	; 0x30
 8015e8a:	d0f9      	beq.n	8015e80 <_strtod_l+0x130>
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d0a3      	beq.n	8015dd8 <_strtod_l+0x88>
 8015e90:	2301      	movs	r3, #1
 8015e92:	f04f 0900 	mov.w	r9, #0
 8015e96:	9304      	str	r3, [sp, #16]
 8015e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e9a:	9308      	str	r3, [sp, #32]
 8015e9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8015ea0:	464f      	mov	r7, r9
 8015ea2:	220a      	movs	r2, #10
 8015ea4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015ea6:	7806      	ldrb	r6, [r0, #0]
 8015ea8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015eac:	b2d9      	uxtb	r1, r3
 8015eae:	2909      	cmp	r1, #9
 8015eb0:	d92a      	bls.n	8015f08 <_strtod_l+0x1b8>
 8015eb2:	9905      	ldr	r1, [sp, #20]
 8015eb4:	462a      	mov	r2, r5
 8015eb6:	f004 f843 	bl	8019f40 <strncmp>
 8015eba:	b398      	cbz	r0, 8015f24 <_strtod_l+0x1d4>
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	4632      	mov	r2, r6
 8015ec0:	463d      	mov	r5, r7
 8015ec2:	9005      	str	r0, [sp, #20]
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	2a65      	cmp	r2, #101	; 0x65
 8015ec8:	d001      	beq.n	8015ece <_strtod_l+0x17e>
 8015eca:	2a45      	cmp	r2, #69	; 0x45
 8015ecc:	d118      	bne.n	8015f00 <_strtod_l+0x1b0>
 8015ece:	b91d      	cbnz	r5, 8015ed8 <_strtod_l+0x188>
 8015ed0:	9a04      	ldr	r2, [sp, #16]
 8015ed2:	4302      	orrs	r2, r0
 8015ed4:	d09e      	beq.n	8015e14 <_strtod_l+0xc4>
 8015ed6:	2500      	movs	r5, #0
 8015ed8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8015edc:	f108 0201 	add.w	r2, r8, #1
 8015ee0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015ee2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015ee6:	2a2b      	cmp	r2, #43	; 0x2b
 8015ee8:	d075      	beq.n	8015fd6 <_strtod_l+0x286>
 8015eea:	2a2d      	cmp	r2, #45	; 0x2d
 8015eec:	d07b      	beq.n	8015fe6 <_strtod_l+0x296>
 8015eee:	f04f 0c00 	mov.w	ip, #0
 8015ef2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015ef6:	2909      	cmp	r1, #9
 8015ef8:	f240 8082 	bls.w	8016000 <_strtod_l+0x2b0>
 8015efc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015f00:	2600      	movs	r6, #0
 8015f02:	e09d      	b.n	8016040 <_strtod_l+0x2f0>
 8015f04:	2300      	movs	r3, #0
 8015f06:	e7c4      	b.n	8015e92 <_strtod_l+0x142>
 8015f08:	2f08      	cmp	r7, #8
 8015f0a:	bfd8      	it	le
 8015f0c:	9907      	ldrle	r1, [sp, #28]
 8015f0e:	f100 0001 	add.w	r0, r0, #1
 8015f12:	bfda      	itte	le
 8015f14:	fb02 3301 	mlale	r3, r2, r1, r3
 8015f18:	9307      	strle	r3, [sp, #28]
 8015f1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015f1e:	3701      	adds	r7, #1
 8015f20:	9017      	str	r0, [sp, #92]	; 0x5c
 8015f22:	e7bf      	b.n	8015ea4 <_strtod_l+0x154>
 8015f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f26:	195a      	adds	r2, r3, r5
 8015f28:	9217      	str	r2, [sp, #92]	; 0x5c
 8015f2a:	5d5a      	ldrb	r2, [r3, r5]
 8015f2c:	2f00      	cmp	r7, #0
 8015f2e:	d037      	beq.n	8015fa0 <_strtod_l+0x250>
 8015f30:	9005      	str	r0, [sp, #20]
 8015f32:	463d      	mov	r5, r7
 8015f34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015f38:	2b09      	cmp	r3, #9
 8015f3a:	d912      	bls.n	8015f62 <_strtod_l+0x212>
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	e7c2      	b.n	8015ec6 <_strtod_l+0x176>
 8015f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f42:	1c5a      	adds	r2, r3, #1
 8015f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8015f46:	785a      	ldrb	r2, [r3, #1]
 8015f48:	3001      	adds	r0, #1
 8015f4a:	2a30      	cmp	r2, #48	; 0x30
 8015f4c:	d0f8      	beq.n	8015f40 <_strtod_l+0x1f0>
 8015f4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015f52:	2b08      	cmp	r3, #8
 8015f54:	f200 84d9 	bhi.w	801690a <_strtod_l+0xbba>
 8015f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f5a:	9005      	str	r0, [sp, #20]
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	9308      	str	r3, [sp, #32]
 8015f60:	4605      	mov	r5, r0
 8015f62:	3a30      	subs	r2, #48	; 0x30
 8015f64:	f100 0301 	add.w	r3, r0, #1
 8015f68:	d014      	beq.n	8015f94 <_strtod_l+0x244>
 8015f6a:	9905      	ldr	r1, [sp, #20]
 8015f6c:	4419      	add	r1, r3
 8015f6e:	9105      	str	r1, [sp, #20]
 8015f70:	462b      	mov	r3, r5
 8015f72:	eb00 0e05 	add.w	lr, r0, r5
 8015f76:	210a      	movs	r1, #10
 8015f78:	4573      	cmp	r3, lr
 8015f7a:	d113      	bne.n	8015fa4 <_strtod_l+0x254>
 8015f7c:	182b      	adds	r3, r5, r0
 8015f7e:	2b08      	cmp	r3, #8
 8015f80:	f105 0501 	add.w	r5, r5, #1
 8015f84:	4405      	add	r5, r0
 8015f86:	dc1c      	bgt.n	8015fc2 <_strtod_l+0x272>
 8015f88:	9907      	ldr	r1, [sp, #28]
 8015f8a:	230a      	movs	r3, #10
 8015f8c:	fb03 2301 	mla	r3, r3, r1, r2
 8015f90:	9307      	str	r3, [sp, #28]
 8015f92:	2300      	movs	r3, #0
 8015f94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015f96:	1c51      	adds	r1, r2, #1
 8015f98:	9117      	str	r1, [sp, #92]	; 0x5c
 8015f9a:	7852      	ldrb	r2, [r2, #1]
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	e7c9      	b.n	8015f34 <_strtod_l+0x1e4>
 8015fa0:	4638      	mov	r0, r7
 8015fa2:	e7d2      	b.n	8015f4a <_strtod_l+0x1fa>
 8015fa4:	2b08      	cmp	r3, #8
 8015fa6:	dc04      	bgt.n	8015fb2 <_strtod_l+0x262>
 8015fa8:	9e07      	ldr	r6, [sp, #28]
 8015faa:	434e      	muls	r6, r1
 8015fac:	9607      	str	r6, [sp, #28]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	e7e2      	b.n	8015f78 <_strtod_l+0x228>
 8015fb2:	f103 0c01 	add.w	ip, r3, #1
 8015fb6:	f1bc 0f10 	cmp.w	ip, #16
 8015fba:	bfd8      	it	le
 8015fbc:	fb01 f909 	mulle.w	r9, r1, r9
 8015fc0:	e7f5      	b.n	8015fae <_strtod_l+0x25e>
 8015fc2:	2d10      	cmp	r5, #16
 8015fc4:	bfdc      	itt	le
 8015fc6:	230a      	movle	r3, #10
 8015fc8:	fb03 2909 	mlale	r9, r3, r9, r2
 8015fcc:	e7e1      	b.n	8015f92 <_strtod_l+0x242>
 8015fce:	2300      	movs	r3, #0
 8015fd0:	9305      	str	r3, [sp, #20]
 8015fd2:	2301      	movs	r3, #1
 8015fd4:	e77c      	b.n	8015ed0 <_strtod_l+0x180>
 8015fd6:	f04f 0c00 	mov.w	ip, #0
 8015fda:	f108 0202 	add.w	r2, r8, #2
 8015fde:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fe0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015fe4:	e785      	b.n	8015ef2 <_strtod_l+0x1a2>
 8015fe6:	f04f 0c01 	mov.w	ip, #1
 8015fea:	e7f6      	b.n	8015fda <_strtod_l+0x28a>
 8015fec:	080734fc 	.word	0x080734fc
 8015ff0:	080731cc 	.word	0x080731cc
 8015ff4:	7ff00000 	.word	0x7ff00000
 8015ff8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015ffa:	1c51      	adds	r1, r2, #1
 8015ffc:	9117      	str	r1, [sp, #92]	; 0x5c
 8015ffe:	7852      	ldrb	r2, [r2, #1]
 8016000:	2a30      	cmp	r2, #48	; 0x30
 8016002:	d0f9      	beq.n	8015ff8 <_strtod_l+0x2a8>
 8016004:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016008:	2908      	cmp	r1, #8
 801600a:	f63f af79 	bhi.w	8015f00 <_strtod_l+0x1b0>
 801600e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016014:	9206      	str	r2, [sp, #24]
 8016016:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016018:	1c51      	adds	r1, r2, #1
 801601a:	9117      	str	r1, [sp, #92]	; 0x5c
 801601c:	7852      	ldrb	r2, [r2, #1]
 801601e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016022:	2e09      	cmp	r6, #9
 8016024:	d937      	bls.n	8016096 <_strtod_l+0x346>
 8016026:	9e06      	ldr	r6, [sp, #24]
 8016028:	1b89      	subs	r1, r1, r6
 801602a:	2908      	cmp	r1, #8
 801602c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016030:	dc02      	bgt.n	8016038 <_strtod_l+0x2e8>
 8016032:	4576      	cmp	r6, lr
 8016034:	bfa8      	it	ge
 8016036:	4676      	movge	r6, lr
 8016038:	f1bc 0f00 	cmp.w	ip, #0
 801603c:	d000      	beq.n	8016040 <_strtod_l+0x2f0>
 801603e:	4276      	negs	r6, r6
 8016040:	2d00      	cmp	r5, #0
 8016042:	d14d      	bne.n	80160e0 <_strtod_l+0x390>
 8016044:	9904      	ldr	r1, [sp, #16]
 8016046:	4301      	orrs	r1, r0
 8016048:	f47f aec6 	bne.w	8015dd8 <_strtod_l+0x88>
 801604c:	2b00      	cmp	r3, #0
 801604e:	f47f aee1 	bne.w	8015e14 <_strtod_l+0xc4>
 8016052:	2a69      	cmp	r2, #105	; 0x69
 8016054:	d027      	beq.n	80160a6 <_strtod_l+0x356>
 8016056:	dc24      	bgt.n	80160a2 <_strtod_l+0x352>
 8016058:	2a49      	cmp	r2, #73	; 0x49
 801605a:	d024      	beq.n	80160a6 <_strtod_l+0x356>
 801605c:	2a4e      	cmp	r2, #78	; 0x4e
 801605e:	f47f aed9 	bne.w	8015e14 <_strtod_l+0xc4>
 8016062:	499f      	ldr	r1, [pc, #636]	; (80162e0 <_strtod_l+0x590>)
 8016064:	a817      	add	r0, sp, #92	; 0x5c
 8016066:	f002 fb9b 	bl	80187a0 <__match>
 801606a:	2800      	cmp	r0, #0
 801606c:	f43f aed2 	beq.w	8015e14 <_strtod_l+0xc4>
 8016070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016072:	781b      	ldrb	r3, [r3, #0]
 8016074:	2b28      	cmp	r3, #40	; 0x28
 8016076:	d12d      	bne.n	80160d4 <_strtod_l+0x384>
 8016078:	499a      	ldr	r1, [pc, #616]	; (80162e4 <_strtod_l+0x594>)
 801607a:	aa1a      	add	r2, sp, #104	; 0x68
 801607c:	a817      	add	r0, sp, #92	; 0x5c
 801607e:	f002 fba3 	bl	80187c8 <__hexnan>
 8016082:	2805      	cmp	r0, #5
 8016084:	d126      	bne.n	80160d4 <_strtod_l+0x384>
 8016086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016088:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801608c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016090:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016094:	e6a0      	b.n	8015dd8 <_strtod_l+0x88>
 8016096:	210a      	movs	r1, #10
 8016098:	fb01 2e0e 	mla	lr, r1, lr, r2
 801609c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80160a0:	e7b9      	b.n	8016016 <_strtod_l+0x2c6>
 80160a2:	2a6e      	cmp	r2, #110	; 0x6e
 80160a4:	e7db      	b.n	801605e <_strtod_l+0x30e>
 80160a6:	4990      	ldr	r1, [pc, #576]	; (80162e8 <_strtod_l+0x598>)
 80160a8:	a817      	add	r0, sp, #92	; 0x5c
 80160aa:	f002 fb79 	bl	80187a0 <__match>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	f43f aeb0 	beq.w	8015e14 <_strtod_l+0xc4>
 80160b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160b6:	498d      	ldr	r1, [pc, #564]	; (80162ec <_strtod_l+0x59c>)
 80160b8:	3b01      	subs	r3, #1
 80160ba:	a817      	add	r0, sp, #92	; 0x5c
 80160bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80160be:	f002 fb6f 	bl	80187a0 <__match>
 80160c2:	b910      	cbnz	r0, 80160ca <_strtod_l+0x37a>
 80160c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160c6:	3301      	adds	r3, #1
 80160c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80160ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80162fc <_strtod_l+0x5ac>
 80160ce:	f04f 0a00 	mov.w	sl, #0
 80160d2:	e681      	b.n	8015dd8 <_strtod_l+0x88>
 80160d4:	4886      	ldr	r0, [pc, #536]	; (80162f0 <_strtod_l+0x5a0>)
 80160d6:	f003 feaf 	bl	8019e38 <nan>
 80160da:	ec5b ab10 	vmov	sl, fp, d0
 80160de:	e67b      	b.n	8015dd8 <_strtod_l+0x88>
 80160e0:	9b05      	ldr	r3, [sp, #20]
 80160e2:	9807      	ldr	r0, [sp, #28]
 80160e4:	1af3      	subs	r3, r6, r3
 80160e6:	2f00      	cmp	r7, #0
 80160e8:	bf08      	it	eq
 80160ea:	462f      	moveq	r7, r5
 80160ec:	2d10      	cmp	r5, #16
 80160ee:	9306      	str	r3, [sp, #24]
 80160f0:	46a8      	mov	r8, r5
 80160f2:	bfa8      	it	ge
 80160f4:	f04f 0810 	movge.w	r8, #16
 80160f8:	f7ea fa24 	bl	8000544 <__aeabi_ui2d>
 80160fc:	2d09      	cmp	r5, #9
 80160fe:	4682      	mov	sl, r0
 8016100:	468b      	mov	fp, r1
 8016102:	dd13      	ble.n	801612c <_strtod_l+0x3dc>
 8016104:	4b7b      	ldr	r3, [pc, #492]	; (80162f4 <_strtod_l+0x5a4>)
 8016106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801610a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801610e:	f7ea fa93 	bl	8000638 <__aeabi_dmul>
 8016112:	4682      	mov	sl, r0
 8016114:	4648      	mov	r0, r9
 8016116:	468b      	mov	fp, r1
 8016118:	f7ea fa14 	bl	8000544 <__aeabi_ui2d>
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	4650      	mov	r0, sl
 8016122:	4659      	mov	r1, fp
 8016124:	f7ea f8d2 	bl	80002cc <__adddf3>
 8016128:	4682      	mov	sl, r0
 801612a:	468b      	mov	fp, r1
 801612c:	2d0f      	cmp	r5, #15
 801612e:	dc38      	bgt.n	80161a2 <_strtod_l+0x452>
 8016130:	9b06      	ldr	r3, [sp, #24]
 8016132:	2b00      	cmp	r3, #0
 8016134:	f43f ae50 	beq.w	8015dd8 <_strtod_l+0x88>
 8016138:	dd24      	ble.n	8016184 <_strtod_l+0x434>
 801613a:	2b16      	cmp	r3, #22
 801613c:	dc0b      	bgt.n	8016156 <_strtod_l+0x406>
 801613e:	496d      	ldr	r1, [pc, #436]	; (80162f4 <_strtod_l+0x5a4>)
 8016140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016148:	4652      	mov	r2, sl
 801614a:	465b      	mov	r3, fp
 801614c:	f7ea fa74 	bl	8000638 <__aeabi_dmul>
 8016150:	4682      	mov	sl, r0
 8016152:	468b      	mov	fp, r1
 8016154:	e640      	b.n	8015dd8 <_strtod_l+0x88>
 8016156:	9a06      	ldr	r2, [sp, #24]
 8016158:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801615c:	4293      	cmp	r3, r2
 801615e:	db20      	blt.n	80161a2 <_strtod_l+0x452>
 8016160:	4c64      	ldr	r4, [pc, #400]	; (80162f4 <_strtod_l+0x5a4>)
 8016162:	f1c5 050f 	rsb	r5, r5, #15
 8016166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801616a:	4652      	mov	r2, sl
 801616c:	465b      	mov	r3, fp
 801616e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016172:	f7ea fa61 	bl	8000638 <__aeabi_dmul>
 8016176:	9b06      	ldr	r3, [sp, #24]
 8016178:	1b5d      	subs	r5, r3, r5
 801617a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801617e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016182:	e7e3      	b.n	801614c <_strtod_l+0x3fc>
 8016184:	9b06      	ldr	r3, [sp, #24]
 8016186:	3316      	adds	r3, #22
 8016188:	db0b      	blt.n	80161a2 <_strtod_l+0x452>
 801618a:	9b05      	ldr	r3, [sp, #20]
 801618c:	1b9e      	subs	r6, r3, r6
 801618e:	4b59      	ldr	r3, [pc, #356]	; (80162f4 <_strtod_l+0x5a4>)
 8016190:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8016194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016198:	4650      	mov	r0, sl
 801619a:	4659      	mov	r1, fp
 801619c:	f7ea fb76 	bl	800088c <__aeabi_ddiv>
 80161a0:	e7d6      	b.n	8016150 <_strtod_l+0x400>
 80161a2:	9b06      	ldr	r3, [sp, #24]
 80161a4:	eba5 0808 	sub.w	r8, r5, r8
 80161a8:	4498      	add	r8, r3
 80161aa:	f1b8 0f00 	cmp.w	r8, #0
 80161ae:	dd74      	ble.n	801629a <_strtod_l+0x54a>
 80161b0:	f018 030f 	ands.w	r3, r8, #15
 80161b4:	d00a      	beq.n	80161cc <_strtod_l+0x47c>
 80161b6:	494f      	ldr	r1, [pc, #316]	; (80162f4 <_strtod_l+0x5a4>)
 80161b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80161bc:	4652      	mov	r2, sl
 80161be:	465b      	mov	r3, fp
 80161c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161c4:	f7ea fa38 	bl	8000638 <__aeabi_dmul>
 80161c8:	4682      	mov	sl, r0
 80161ca:	468b      	mov	fp, r1
 80161cc:	f038 080f 	bics.w	r8, r8, #15
 80161d0:	d04f      	beq.n	8016272 <_strtod_l+0x522>
 80161d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80161d6:	dd22      	ble.n	801621e <_strtod_l+0x4ce>
 80161d8:	2500      	movs	r5, #0
 80161da:	462e      	mov	r6, r5
 80161dc:	9507      	str	r5, [sp, #28]
 80161de:	9505      	str	r5, [sp, #20]
 80161e0:	2322      	movs	r3, #34	; 0x22
 80161e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80162fc <_strtod_l+0x5ac>
 80161e6:	6023      	str	r3, [r4, #0]
 80161e8:	f04f 0a00 	mov.w	sl, #0
 80161ec:	9b07      	ldr	r3, [sp, #28]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f43f adf2 	beq.w	8015dd8 <_strtod_l+0x88>
 80161f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80161f6:	4620      	mov	r0, r4
 80161f8:	f002 fcc4 	bl	8018b84 <_Bfree>
 80161fc:	9905      	ldr	r1, [sp, #20]
 80161fe:	4620      	mov	r0, r4
 8016200:	f002 fcc0 	bl	8018b84 <_Bfree>
 8016204:	4631      	mov	r1, r6
 8016206:	4620      	mov	r0, r4
 8016208:	f002 fcbc 	bl	8018b84 <_Bfree>
 801620c:	9907      	ldr	r1, [sp, #28]
 801620e:	4620      	mov	r0, r4
 8016210:	f002 fcb8 	bl	8018b84 <_Bfree>
 8016214:	4629      	mov	r1, r5
 8016216:	4620      	mov	r0, r4
 8016218:	f002 fcb4 	bl	8018b84 <_Bfree>
 801621c:	e5dc      	b.n	8015dd8 <_strtod_l+0x88>
 801621e:	4b36      	ldr	r3, [pc, #216]	; (80162f8 <_strtod_l+0x5a8>)
 8016220:	9304      	str	r3, [sp, #16]
 8016222:	2300      	movs	r3, #0
 8016224:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016228:	4650      	mov	r0, sl
 801622a:	4659      	mov	r1, fp
 801622c:	4699      	mov	r9, r3
 801622e:	f1b8 0f01 	cmp.w	r8, #1
 8016232:	dc21      	bgt.n	8016278 <_strtod_l+0x528>
 8016234:	b10b      	cbz	r3, 801623a <_strtod_l+0x4ea>
 8016236:	4682      	mov	sl, r0
 8016238:	468b      	mov	fp, r1
 801623a:	4b2f      	ldr	r3, [pc, #188]	; (80162f8 <_strtod_l+0x5a8>)
 801623c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016240:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016244:	4652      	mov	r2, sl
 8016246:	465b      	mov	r3, fp
 8016248:	e9d9 0100 	ldrd	r0, r1, [r9]
 801624c:	f7ea f9f4 	bl	8000638 <__aeabi_dmul>
 8016250:	4b2a      	ldr	r3, [pc, #168]	; (80162fc <_strtod_l+0x5ac>)
 8016252:	460a      	mov	r2, r1
 8016254:	400b      	ands	r3, r1
 8016256:	492a      	ldr	r1, [pc, #168]	; (8016300 <_strtod_l+0x5b0>)
 8016258:	428b      	cmp	r3, r1
 801625a:	4682      	mov	sl, r0
 801625c:	d8bc      	bhi.n	80161d8 <_strtod_l+0x488>
 801625e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016262:	428b      	cmp	r3, r1
 8016264:	bf86      	itte	hi
 8016266:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8016304 <_strtod_l+0x5b4>
 801626a:	f04f 3aff 	movhi.w	sl, #4294967295
 801626e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016272:	2300      	movs	r3, #0
 8016274:	9304      	str	r3, [sp, #16]
 8016276:	e084      	b.n	8016382 <_strtod_l+0x632>
 8016278:	f018 0f01 	tst.w	r8, #1
 801627c:	d005      	beq.n	801628a <_strtod_l+0x53a>
 801627e:	9b04      	ldr	r3, [sp, #16]
 8016280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016284:	f7ea f9d8 	bl	8000638 <__aeabi_dmul>
 8016288:	2301      	movs	r3, #1
 801628a:	9a04      	ldr	r2, [sp, #16]
 801628c:	3208      	adds	r2, #8
 801628e:	f109 0901 	add.w	r9, r9, #1
 8016292:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016296:	9204      	str	r2, [sp, #16]
 8016298:	e7c9      	b.n	801622e <_strtod_l+0x4de>
 801629a:	d0ea      	beq.n	8016272 <_strtod_l+0x522>
 801629c:	f1c8 0800 	rsb	r8, r8, #0
 80162a0:	f018 020f 	ands.w	r2, r8, #15
 80162a4:	d00a      	beq.n	80162bc <_strtod_l+0x56c>
 80162a6:	4b13      	ldr	r3, [pc, #76]	; (80162f4 <_strtod_l+0x5a4>)
 80162a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162ac:	4650      	mov	r0, sl
 80162ae:	4659      	mov	r1, fp
 80162b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b4:	f7ea faea 	bl	800088c <__aeabi_ddiv>
 80162b8:	4682      	mov	sl, r0
 80162ba:	468b      	mov	fp, r1
 80162bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80162c0:	d0d7      	beq.n	8016272 <_strtod_l+0x522>
 80162c2:	f1b8 0f1f 	cmp.w	r8, #31
 80162c6:	dd1f      	ble.n	8016308 <_strtod_l+0x5b8>
 80162c8:	2500      	movs	r5, #0
 80162ca:	462e      	mov	r6, r5
 80162cc:	9507      	str	r5, [sp, #28]
 80162ce:	9505      	str	r5, [sp, #20]
 80162d0:	2322      	movs	r3, #34	; 0x22
 80162d2:	f04f 0a00 	mov.w	sl, #0
 80162d6:	f04f 0b00 	mov.w	fp, #0
 80162da:	6023      	str	r3, [r4, #0]
 80162dc:	e786      	b.n	80161ec <_strtod_l+0x49c>
 80162de:	bf00      	nop
 80162e0:	080731a6 	.word	0x080731a6
 80162e4:	080731e0 	.word	0x080731e0
 80162e8:	0807319e 	.word	0x0807319e
 80162ec:	080733bd 	.word	0x080733bd
 80162f0:	080730ae 	.word	0x080730ae
 80162f4:	080735f8 	.word	0x080735f8
 80162f8:	080735d0 	.word	0x080735d0
 80162fc:	7ff00000 	.word	0x7ff00000
 8016300:	7ca00000 	.word	0x7ca00000
 8016304:	7fefffff 	.word	0x7fefffff
 8016308:	f018 0310 	ands.w	r3, r8, #16
 801630c:	bf18      	it	ne
 801630e:	236a      	movne	r3, #106	; 0x6a
 8016310:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80166c0 <_strtod_l+0x970>
 8016314:	9304      	str	r3, [sp, #16]
 8016316:	4650      	mov	r0, sl
 8016318:	4659      	mov	r1, fp
 801631a:	2300      	movs	r3, #0
 801631c:	f018 0f01 	tst.w	r8, #1
 8016320:	d004      	beq.n	801632c <_strtod_l+0x5dc>
 8016322:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016326:	f7ea f987 	bl	8000638 <__aeabi_dmul>
 801632a:	2301      	movs	r3, #1
 801632c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016330:	f109 0908 	add.w	r9, r9, #8
 8016334:	d1f2      	bne.n	801631c <_strtod_l+0x5cc>
 8016336:	b10b      	cbz	r3, 801633c <_strtod_l+0x5ec>
 8016338:	4682      	mov	sl, r0
 801633a:	468b      	mov	fp, r1
 801633c:	9b04      	ldr	r3, [sp, #16]
 801633e:	b1c3      	cbz	r3, 8016372 <_strtod_l+0x622>
 8016340:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016344:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016348:	2b00      	cmp	r3, #0
 801634a:	4659      	mov	r1, fp
 801634c:	dd11      	ble.n	8016372 <_strtod_l+0x622>
 801634e:	2b1f      	cmp	r3, #31
 8016350:	f340 8124 	ble.w	801659c <_strtod_l+0x84c>
 8016354:	2b34      	cmp	r3, #52	; 0x34
 8016356:	bfde      	ittt	le
 8016358:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801635c:	f04f 33ff 	movle.w	r3, #4294967295
 8016360:	fa03 f202 	lslle.w	r2, r3, r2
 8016364:	f04f 0a00 	mov.w	sl, #0
 8016368:	bfcc      	ite	gt
 801636a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801636e:	ea02 0b01 	andle.w	fp, r2, r1
 8016372:	2200      	movs	r2, #0
 8016374:	2300      	movs	r3, #0
 8016376:	4650      	mov	r0, sl
 8016378:	4659      	mov	r1, fp
 801637a:	f7ea fbc5 	bl	8000b08 <__aeabi_dcmpeq>
 801637e:	2800      	cmp	r0, #0
 8016380:	d1a2      	bne.n	80162c8 <_strtod_l+0x578>
 8016382:	9b07      	ldr	r3, [sp, #28]
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	9908      	ldr	r1, [sp, #32]
 8016388:	462b      	mov	r3, r5
 801638a:	463a      	mov	r2, r7
 801638c:	4620      	mov	r0, r4
 801638e:	f002 fc61 	bl	8018c54 <__s2b>
 8016392:	9007      	str	r0, [sp, #28]
 8016394:	2800      	cmp	r0, #0
 8016396:	f43f af1f 	beq.w	80161d8 <_strtod_l+0x488>
 801639a:	9b05      	ldr	r3, [sp, #20]
 801639c:	1b9e      	subs	r6, r3, r6
 801639e:	9b06      	ldr	r3, [sp, #24]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	bfb4      	ite	lt
 80163a4:	4633      	movlt	r3, r6
 80163a6:	2300      	movge	r3, #0
 80163a8:	930c      	str	r3, [sp, #48]	; 0x30
 80163aa:	9b06      	ldr	r3, [sp, #24]
 80163ac:	2500      	movs	r5, #0
 80163ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80163b2:	9312      	str	r3, [sp, #72]	; 0x48
 80163b4:	462e      	mov	r6, r5
 80163b6:	9b07      	ldr	r3, [sp, #28]
 80163b8:	4620      	mov	r0, r4
 80163ba:	6859      	ldr	r1, [r3, #4]
 80163bc:	f002 fba2 	bl	8018b04 <_Balloc>
 80163c0:	9005      	str	r0, [sp, #20]
 80163c2:	2800      	cmp	r0, #0
 80163c4:	f43f af0c 	beq.w	80161e0 <_strtod_l+0x490>
 80163c8:	9b07      	ldr	r3, [sp, #28]
 80163ca:	691a      	ldr	r2, [r3, #16]
 80163cc:	3202      	adds	r2, #2
 80163ce:	f103 010c 	add.w	r1, r3, #12
 80163d2:	0092      	lsls	r2, r2, #2
 80163d4:	300c      	adds	r0, #12
 80163d6:	f7fe fa85 	bl	80148e4 <memcpy>
 80163da:	ec4b ab10 	vmov	d0, sl, fp
 80163de:	aa1a      	add	r2, sp, #104	; 0x68
 80163e0:	a919      	add	r1, sp, #100	; 0x64
 80163e2:	4620      	mov	r0, r4
 80163e4:	f002 ff7c 	bl	80192e0 <__d2b>
 80163e8:	ec4b ab18 	vmov	d8, sl, fp
 80163ec:	9018      	str	r0, [sp, #96]	; 0x60
 80163ee:	2800      	cmp	r0, #0
 80163f0:	f43f aef6 	beq.w	80161e0 <_strtod_l+0x490>
 80163f4:	2101      	movs	r1, #1
 80163f6:	4620      	mov	r0, r4
 80163f8:	f002 fcc6 	bl	8018d88 <__i2b>
 80163fc:	4606      	mov	r6, r0
 80163fe:	2800      	cmp	r0, #0
 8016400:	f43f aeee 	beq.w	80161e0 <_strtod_l+0x490>
 8016404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016406:	9904      	ldr	r1, [sp, #16]
 8016408:	2b00      	cmp	r3, #0
 801640a:	bfab      	itete	ge
 801640c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801640e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8016410:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016412:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8016416:	bfac      	ite	ge
 8016418:	eb03 0902 	addge.w	r9, r3, r2
 801641c:	1ad7      	sublt	r7, r2, r3
 801641e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016420:	eba3 0801 	sub.w	r8, r3, r1
 8016424:	4490      	add	r8, r2
 8016426:	4ba1      	ldr	r3, [pc, #644]	; (80166ac <_strtod_l+0x95c>)
 8016428:	f108 38ff 	add.w	r8, r8, #4294967295
 801642c:	4598      	cmp	r8, r3
 801642e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016432:	f280 80c7 	bge.w	80165c4 <_strtod_l+0x874>
 8016436:	eba3 0308 	sub.w	r3, r3, r8
 801643a:	2b1f      	cmp	r3, #31
 801643c:	eba2 0203 	sub.w	r2, r2, r3
 8016440:	f04f 0101 	mov.w	r1, #1
 8016444:	f300 80b1 	bgt.w	80165aa <_strtod_l+0x85a>
 8016448:	fa01 f303 	lsl.w	r3, r1, r3
 801644c:	930d      	str	r3, [sp, #52]	; 0x34
 801644e:	2300      	movs	r3, #0
 8016450:	9308      	str	r3, [sp, #32]
 8016452:	eb09 0802 	add.w	r8, r9, r2
 8016456:	9b04      	ldr	r3, [sp, #16]
 8016458:	45c1      	cmp	r9, r8
 801645a:	4417      	add	r7, r2
 801645c:	441f      	add	r7, r3
 801645e:	464b      	mov	r3, r9
 8016460:	bfa8      	it	ge
 8016462:	4643      	movge	r3, r8
 8016464:	42bb      	cmp	r3, r7
 8016466:	bfa8      	it	ge
 8016468:	463b      	movge	r3, r7
 801646a:	2b00      	cmp	r3, #0
 801646c:	bfc2      	ittt	gt
 801646e:	eba8 0803 	subgt.w	r8, r8, r3
 8016472:	1aff      	subgt	r7, r7, r3
 8016474:	eba9 0903 	subgt.w	r9, r9, r3
 8016478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801647a:	2b00      	cmp	r3, #0
 801647c:	dd17      	ble.n	80164ae <_strtod_l+0x75e>
 801647e:	4631      	mov	r1, r6
 8016480:	461a      	mov	r2, r3
 8016482:	4620      	mov	r0, r4
 8016484:	f002 fd40 	bl	8018f08 <__pow5mult>
 8016488:	4606      	mov	r6, r0
 801648a:	2800      	cmp	r0, #0
 801648c:	f43f aea8 	beq.w	80161e0 <_strtod_l+0x490>
 8016490:	4601      	mov	r1, r0
 8016492:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016494:	4620      	mov	r0, r4
 8016496:	f002 fc8d 	bl	8018db4 <__multiply>
 801649a:	900b      	str	r0, [sp, #44]	; 0x2c
 801649c:	2800      	cmp	r0, #0
 801649e:	f43f ae9f 	beq.w	80161e0 <_strtod_l+0x490>
 80164a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80164a4:	4620      	mov	r0, r4
 80164a6:	f002 fb6d 	bl	8018b84 <_Bfree>
 80164aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164ac:	9318      	str	r3, [sp, #96]	; 0x60
 80164ae:	f1b8 0f00 	cmp.w	r8, #0
 80164b2:	f300 808c 	bgt.w	80165ce <_strtod_l+0x87e>
 80164b6:	9b06      	ldr	r3, [sp, #24]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	dd08      	ble.n	80164ce <_strtod_l+0x77e>
 80164bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164be:	9905      	ldr	r1, [sp, #20]
 80164c0:	4620      	mov	r0, r4
 80164c2:	f002 fd21 	bl	8018f08 <__pow5mult>
 80164c6:	9005      	str	r0, [sp, #20]
 80164c8:	2800      	cmp	r0, #0
 80164ca:	f43f ae89 	beq.w	80161e0 <_strtod_l+0x490>
 80164ce:	2f00      	cmp	r7, #0
 80164d0:	dd08      	ble.n	80164e4 <_strtod_l+0x794>
 80164d2:	9905      	ldr	r1, [sp, #20]
 80164d4:	463a      	mov	r2, r7
 80164d6:	4620      	mov	r0, r4
 80164d8:	f002 fd70 	bl	8018fbc <__lshift>
 80164dc:	9005      	str	r0, [sp, #20]
 80164de:	2800      	cmp	r0, #0
 80164e0:	f43f ae7e 	beq.w	80161e0 <_strtod_l+0x490>
 80164e4:	f1b9 0f00 	cmp.w	r9, #0
 80164e8:	dd08      	ble.n	80164fc <_strtod_l+0x7ac>
 80164ea:	4631      	mov	r1, r6
 80164ec:	464a      	mov	r2, r9
 80164ee:	4620      	mov	r0, r4
 80164f0:	f002 fd64 	bl	8018fbc <__lshift>
 80164f4:	4606      	mov	r6, r0
 80164f6:	2800      	cmp	r0, #0
 80164f8:	f43f ae72 	beq.w	80161e0 <_strtod_l+0x490>
 80164fc:	9a05      	ldr	r2, [sp, #20]
 80164fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016500:	4620      	mov	r0, r4
 8016502:	f002 fde7 	bl	80190d4 <__mdiff>
 8016506:	4605      	mov	r5, r0
 8016508:	2800      	cmp	r0, #0
 801650a:	f43f ae69 	beq.w	80161e0 <_strtod_l+0x490>
 801650e:	68c3      	ldr	r3, [r0, #12]
 8016510:	930b      	str	r3, [sp, #44]	; 0x2c
 8016512:	2300      	movs	r3, #0
 8016514:	60c3      	str	r3, [r0, #12]
 8016516:	4631      	mov	r1, r6
 8016518:	f002 fdc0 	bl	801909c <__mcmp>
 801651c:	2800      	cmp	r0, #0
 801651e:	da60      	bge.n	80165e2 <_strtod_l+0x892>
 8016520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016522:	ea53 030a 	orrs.w	r3, r3, sl
 8016526:	f040 8082 	bne.w	801662e <_strtod_l+0x8de>
 801652a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801652e:	2b00      	cmp	r3, #0
 8016530:	d17d      	bne.n	801662e <_strtod_l+0x8de>
 8016532:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016536:	0d1b      	lsrs	r3, r3, #20
 8016538:	051b      	lsls	r3, r3, #20
 801653a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801653e:	d976      	bls.n	801662e <_strtod_l+0x8de>
 8016540:	696b      	ldr	r3, [r5, #20]
 8016542:	b913      	cbnz	r3, 801654a <_strtod_l+0x7fa>
 8016544:	692b      	ldr	r3, [r5, #16]
 8016546:	2b01      	cmp	r3, #1
 8016548:	dd71      	ble.n	801662e <_strtod_l+0x8de>
 801654a:	4629      	mov	r1, r5
 801654c:	2201      	movs	r2, #1
 801654e:	4620      	mov	r0, r4
 8016550:	f002 fd34 	bl	8018fbc <__lshift>
 8016554:	4631      	mov	r1, r6
 8016556:	4605      	mov	r5, r0
 8016558:	f002 fda0 	bl	801909c <__mcmp>
 801655c:	2800      	cmp	r0, #0
 801655e:	dd66      	ble.n	801662e <_strtod_l+0x8de>
 8016560:	9904      	ldr	r1, [sp, #16]
 8016562:	4a53      	ldr	r2, [pc, #332]	; (80166b0 <_strtod_l+0x960>)
 8016564:	465b      	mov	r3, fp
 8016566:	2900      	cmp	r1, #0
 8016568:	f000 8081 	beq.w	801666e <_strtod_l+0x91e>
 801656c:	ea02 010b 	and.w	r1, r2, fp
 8016570:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016574:	dc7b      	bgt.n	801666e <_strtod_l+0x91e>
 8016576:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801657a:	f77f aea9 	ble.w	80162d0 <_strtod_l+0x580>
 801657e:	4b4d      	ldr	r3, [pc, #308]	; (80166b4 <_strtod_l+0x964>)
 8016580:	4650      	mov	r0, sl
 8016582:	4659      	mov	r1, fp
 8016584:	2200      	movs	r2, #0
 8016586:	f7ea f857 	bl	8000638 <__aeabi_dmul>
 801658a:	460b      	mov	r3, r1
 801658c:	4303      	orrs	r3, r0
 801658e:	bf08      	it	eq
 8016590:	2322      	moveq	r3, #34	; 0x22
 8016592:	4682      	mov	sl, r0
 8016594:	468b      	mov	fp, r1
 8016596:	bf08      	it	eq
 8016598:	6023      	streq	r3, [r4, #0]
 801659a:	e62b      	b.n	80161f4 <_strtod_l+0x4a4>
 801659c:	f04f 32ff 	mov.w	r2, #4294967295
 80165a0:	fa02 f303 	lsl.w	r3, r2, r3
 80165a4:	ea03 0a0a 	and.w	sl, r3, sl
 80165a8:	e6e3      	b.n	8016372 <_strtod_l+0x622>
 80165aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80165ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80165b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80165b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80165ba:	fa01 f308 	lsl.w	r3, r1, r8
 80165be:	9308      	str	r3, [sp, #32]
 80165c0:	910d      	str	r1, [sp, #52]	; 0x34
 80165c2:	e746      	b.n	8016452 <_strtod_l+0x702>
 80165c4:	2300      	movs	r3, #0
 80165c6:	9308      	str	r3, [sp, #32]
 80165c8:	2301      	movs	r3, #1
 80165ca:	930d      	str	r3, [sp, #52]	; 0x34
 80165cc:	e741      	b.n	8016452 <_strtod_l+0x702>
 80165ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165d0:	4642      	mov	r2, r8
 80165d2:	4620      	mov	r0, r4
 80165d4:	f002 fcf2 	bl	8018fbc <__lshift>
 80165d8:	9018      	str	r0, [sp, #96]	; 0x60
 80165da:	2800      	cmp	r0, #0
 80165dc:	f47f af6b 	bne.w	80164b6 <_strtod_l+0x766>
 80165e0:	e5fe      	b.n	80161e0 <_strtod_l+0x490>
 80165e2:	465f      	mov	r7, fp
 80165e4:	d16e      	bne.n	80166c4 <_strtod_l+0x974>
 80165e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80165e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165ec:	b342      	cbz	r2, 8016640 <_strtod_l+0x8f0>
 80165ee:	4a32      	ldr	r2, [pc, #200]	; (80166b8 <_strtod_l+0x968>)
 80165f0:	4293      	cmp	r3, r2
 80165f2:	d128      	bne.n	8016646 <_strtod_l+0x8f6>
 80165f4:	9b04      	ldr	r3, [sp, #16]
 80165f6:	4651      	mov	r1, sl
 80165f8:	b1eb      	cbz	r3, 8016636 <_strtod_l+0x8e6>
 80165fa:	4b2d      	ldr	r3, [pc, #180]	; (80166b0 <_strtod_l+0x960>)
 80165fc:	403b      	ands	r3, r7
 80165fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016602:	f04f 32ff 	mov.w	r2, #4294967295
 8016606:	d819      	bhi.n	801663c <_strtod_l+0x8ec>
 8016608:	0d1b      	lsrs	r3, r3, #20
 801660a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801660e:	fa02 f303 	lsl.w	r3, r2, r3
 8016612:	4299      	cmp	r1, r3
 8016614:	d117      	bne.n	8016646 <_strtod_l+0x8f6>
 8016616:	4b29      	ldr	r3, [pc, #164]	; (80166bc <_strtod_l+0x96c>)
 8016618:	429f      	cmp	r7, r3
 801661a:	d102      	bne.n	8016622 <_strtod_l+0x8d2>
 801661c:	3101      	adds	r1, #1
 801661e:	f43f addf 	beq.w	80161e0 <_strtod_l+0x490>
 8016622:	4b23      	ldr	r3, [pc, #140]	; (80166b0 <_strtod_l+0x960>)
 8016624:	403b      	ands	r3, r7
 8016626:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801662a:	f04f 0a00 	mov.w	sl, #0
 801662e:	9b04      	ldr	r3, [sp, #16]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d1a4      	bne.n	801657e <_strtod_l+0x82e>
 8016634:	e5de      	b.n	80161f4 <_strtod_l+0x4a4>
 8016636:	f04f 33ff 	mov.w	r3, #4294967295
 801663a:	e7ea      	b.n	8016612 <_strtod_l+0x8c2>
 801663c:	4613      	mov	r3, r2
 801663e:	e7e8      	b.n	8016612 <_strtod_l+0x8c2>
 8016640:	ea53 030a 	orrs.w	r3, r3, sl
 8016644:	d08c      	beq.n	8016560 <_strtod_l+0x810>
 8016646:	9b08      	ldr	r3, [sp, #32]
 8016648:	b1db      	cbz	r3, 8016682 <_strtod_l+0x932>
 801664a:	423b      	tst	r3, r7
 801664c:	d0ef      	beq.n	801662e <_strtod_l+0x8de>
 801664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016650:	9a04      	ldr	r2, [sp, #16]
 8016652:	4650      	mov	r0, sl
 8016654:	4659      	mov	r1, fp
 8016656:	b1c3      	cbz	r3, 801668a <_strtod_l+0x93a>
 8016658:	f7ff fb5c 	bl	8015d14 <sulp>
 801665c:	4602      	mov	r2, r0
 801665e:	460b      	mov	r3, r1
 8016660:	ec51 0b18 	vmov	r0, r1, d8
 8016664:	f7e9 fe32 	bl	80002cc <__adddf3>
 8016668:	4682      	mov	sl, r0
 801666a:	468b      	mov	fp, r1
 801666c:	e7df      	b.n	801662e <_strtod_l+0x8de>
 801666e:	4013      	ands	r3, r2
 8016670:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016674:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016678:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801667c:	f04f 3aff 	mov.w	sl, #4294967295
 8016680:	e7d5      	b.n	801662e <_strtod_l+0x8de>
 8016682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016684:	ea13 0f0a 	tst.w	r3, sl
 8016688:	e7e0      	b.n	801664c <_strtod_l+0x8fc>
 801668a:	f7ff fb43 	bl	8015d14 <sulp>
 801668e:	4602      	mov	r2, r0
 8016690:	460b      	mov	r3, r1
 8016692:	ec51 0b18 	vmov	r0, r1, d8
 8016696:	f7e9 fe17 	bl	80002c8 <__aeabi_dsub>
 801669a:	2200      	movs	r2, #0
 801669c:	2300      	movs	r3, #0
 801669e:	4682      	mov	sl, r0
 80166a0:	468b      	mov	fp, r1
 80166a2:	f7ea fa31 	bl	8000b08 <__aeabi_dcmpeq>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	d0c1      	beq.n	801662e <_strtod_l+0x8de>
 80166aa:	e611      	b.n	80162d0 <_strtod_l+0x580>
 80166ac:	fffffc02 	.word	0xfffffc02
 80166b0:	7ff00000 	.word	0x7ff00000
 80166b4:	39500000 	.word	0x39500000
 80166b8:	000fffff 	.word	0x000fffff
 80166bc:	7fefffff 	.word	0x7fefffff
 80166c0:	080731f8 	.word	0x080731f8
 80166c4:	4631      	mov	r1, r6
 80166c6:	4628      	mov	r0, r5
 80166c8:	f002 fe66 	bl	8019398 <__ratio>
 80166cc:	ec59 8b10 	vmov	r8, r9, d0
 80166d0:	ee10 0a10 	vmov	r0, s0
 80166d4:	2200      	movs	r2, #0
 80166d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80166da:	4649      	mov	r1, r9
 80166dc:	f7ea fa28 	bl	8000b30 <__aeabi_dcmple>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d07a      	beq.n	80167da <_strtod_l+0xa8a>
 80166e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d04a      	beq.n	8016780 <_strtod_l+0xa30>
 80166ea:	4b95      	ldr	r3, [pc, #596]	; (8016940 <_strtod_l+0xbf0>)
 80166ec:	2200      	movs	r2, #0
 80166ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80166f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016940 <_strtod_l+0xbf0>
 80166f6:	f04f 0800 	mov.w	r8, #0
 80166fa:	4b92      	ldr	r3, [pc, #584]	; (8016944 <_strtod_l+0xbf4>)
 80166fc:	403b      	ands	r3, r7
 80166fe:	930d      	str	r3, [sp, #52]	; 0x34
 8016700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016702:	4b91      	ldr	r3, [pc, #580]	; (8016948 <_strtod_l+0xbf8>)
 8016704:	429a      	cmp	r2, r3
 8016706:	f040 80b0 	bne.w	801686a <_strtod_l+0xb1a>
 801670a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801670e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016712:	ec4b ab10 	vmov	d0, sl, fp
 8016716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801671a:	f002 fd65 	bl	80191e8 <__ulp>
 801671e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016722:	ec53 2b10 	vmov	r2, r3, d0
 8016726:	f7e9 ff87 	bl	8000638 <__aeabi_dmul>
 801672a:	4652      	mov	r2, sl
 801672c:	465b      	mov	r3, fp
 801672e:	f7e9 fdcd 	bl	80002cc <__adddf3>
 8016732:	460b      	mov	r3, r1
 8016734:	4983      	ldr	r1, [pc, #524]	; (8016944 <_strtod_l+0xbf4>)
 8016736:	4a85      	ldr	r2, [pc, #532]	; (801694c <_strtod_l+0xbfc>)
 8016738:	4019      	ands	r1, r3
 801673a:	4291      	cmp	r1, r2
 801673c:	4682      	mov	sl, r0
 801673e:	d960      	bls.n	8016802 <_strtod_l+0xab2>
 8016740:	ee18 3a90 	vmov	r3, s17
 8016744:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016748:	4293      	cmp	r3, r2
 801674a:	d104      	bne.n	8016756 <_strtod_l+0xa06>
 801674c:	ee18 3a10 	vmov	r3, s16
 8016750:	3301      	adds	r3, #1
 8016752:	f43f ad45 	beq.w	80161e0 <_strtod_l+0x490>
 8016756:	f8df b200 	ldr.w	fp, [pc, #512]	; 8016958 <_strtod_l+0xc08>
 801675a:	f04f 3aff 	mov.w	sl, #4294967295
 801675e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016760:	4620      	mov	r0, r4
 8016762:	f002 fa0f 	bl	8018b84 <_Bfree>
 8016766:	9905      	ldr	r1, [sp, #20]
 8016768:	4620      	mov	r0, r4
 801676a:	f002 fa0b 	bl	8018b84 <_Bfree>
 801676e:	4631      	mov	r1, r6
 8016770:	4620      	mov	r0, r4
 8016772:	f002 fa07 	bl	8018b84 <_Bfree>
 8016776:	4629      	mov	r1, r5
 8016778:	4620      	mov	r0, r4
 801677a:	f002 fa03 	bl	8018b84 <_Bfree>
 801677e:	e61a      	b.n	80163b6 <_strtod_l+0x666>
 8016780:	f1ba 0f00 	cmp.w	sl, #0
 8016784:	d11b      	bne.n	80167be <_strtod_l+0xa6e>
 8016786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801678a:	b9f3      	cbnz	r3, 80167ca <_strtod_l+0xa7a>
 801678c:	4b6c      	ldr	r3, [pc, #432]	; (8016940 <_strtod_l+0xbf0>)
 801678e:	2200      	movs	r2, #0
 8016790:	4640      	mov	r0, r8
 8016792:	4649      	mov	r1, r9
 8016794:	f7ea f9c2 	bl	8000b1c <__aeabi_dcmplt>
 8016798:	b9d0      	cbnz	r0, 80167d0 <_strtod_l+0xa80>
 801679a:	4640      	mov	r0, r8
 801679c:	4649      	mov	r1, r9
 801679e:	4b6c      	ldr	r3, [pc, #432]	; (8016950 <_strtod_l+0xc00>)
 80167a0:	2200      	movs	r2, #0
 80167a2:	f7e9 ff49 	bl	8000638 <__aeabi_dmul>
 80167a6:	4680      	mov	r8, r0
 80167a8:	4689      	mov	r9, r1
 80167aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80167ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80167b2:	9315      	str	r3, [sp, #84]	; 0x54
 80167b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80167b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80167bc:	e79d      	b.n	80166fa <_strtod_l+0x9aa>
 80167be:	f1ba 0f01 	cmp.w	sl, #1
 80167c2:	d102      	bne.n	80167ca <_strtod_l+0xa7a>
 80167c4:	2f00      	cmp	r7, #0
 80167c6:	f43f ad83 	beq.w	80162d0 <_strtod_l+0x580>
 80167ca:	4b62      	ldr	r3, [pc, #392]	; (8016954 <_strtod_l+0xc04>)
 80167cc:	2200      	movs	r2, #0
 80167ce:	e78e      	b.n	80166ee <_strtod_l+0x99e>
 80167d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8016950 <_strtod_l+0xc00>
 80167d4:	f04f 0800 	mov.w	r8, #0
 80167d8:	e7e7      	b.n	80167aa <_strtod_l+0xa5a>
 80167da:	4b5d      	ldr	r3, [pc, #372]	; (8016950 <_strtod_l+0xc00>)
 80167dc:	4640      	mov	r0, r8
 80167de:	4649      	mov	r1, r9
 80167e0:	2200      	movs	r2, #0
 80167e2:	f7e9 ff29 	bl	8000638 <__aeabi_dmul>
 80167e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167e8:	4680      	mov	r8, r0
 80167ea:	4689      	mov	r9, r1
 80167ec:	b933      	cbnz	r3, 80167fc <_strtod_l+0xaac>
 80167ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167f2:	900e      	str	r0, [sp, #56]	; 0x38
 80167f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80167f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80167fa:	e7dd      	b.n	80167b8 <_strtod_l+0xa68>
 80167fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8016800:	e7f9      	b.n	80167f6 <_strtod_l+0xaa6>
 8016802:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016806:	9b04      	ldr	r3, [sp, #16]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d1a8      	bne.n	801675e <_strtod_l+0xa0e>
 801680c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016812:	0d1b      	lsrs	r3, r3, #20
 8016814:	051b      	lsls	r3, r3, #20
 8016816:	429a      	cmp	r2, r3
 8016818:	d1a1      	bne.n	801675e <_strtod_l+0xa0e>
 801681a:	4640      	mov	r0, r8
 801681c:	4649      	mov	r1, r9
 801681e:	f7ea fa6b 	bl	8000cf8 <__aeabi_d2lz>
 8016822:	f7e9 fedb 	bl	80005dc <__aeabi_l2d>
 8016826:	4602      	mov	r2, r0
 8016828:	460b      	mov	r3, r1
 801682a:	4640      	mov	r0, r8
 801682c:	4649      	mov	r1, r9
 801682e:	f7e9 fd4b 	bl	80002c8 <__aeabi_dsub>
 8016832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016838:	ea43 030a 	orr.w	r3, r3, sl
 801683c:	4313      	orrs	r3, r2
 801683e:	4680      	mov	r8, r0
 8016840:	4689      	mov	r9, r1
 8016842:	d055      	beq.n	80168f0 <_strtod_l+0xba0>
 8016844:	a336      	add	r3, pc, #216	; (adr r3, 8016920 <_strtod_l+0xbd0>)
 8016846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801684a:	f7ea f967 	bl	8000b1c <__aeabi_dcmplt>
 801684e:	2800      	cmp	r0, #0
 8016850:	f47f acd0 	bne.w	80161f4 <_strtod_l+0x4a4>
 8016854:	a334      	add	r3, pc, #208	; (adr r3, 8016928 <_strtod_l+0xbd8>)
 8016856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685a:	4640      	mov	r0, r8
 801685c:	4649      	mov	r1, r9
 801685e:	f7ea f97b 	bl	8000b58 <__aeabi_dcmpgt>
 8016862:	2800      	cmp	r0, #0
 8016864:	f43f af7b 	beq.w	801675e <_strtod_l+0xa0e>
 8016868:	e4c4      	b.n	80161f4 <_strtod_l+0x4a4>
 801686a:	9b04      	ldr	r3, [sp, #16]
 801686c:	b333      	cbz	r3, 80168bc <_strtod_l+0xb6c>
 801686e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016870:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016874:	d822      	bhi.n	80168bc <_strtod_l+0xb6c>
 8016876:	a32e      	add	r3, pc, #184	; (adr r3, 8016930 <_strtod_l+0xbe0>)
 8016878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687c:	4640      	mov	r0, r8
 801687e:	4649      	mov	r1, r9
 8016880:	f7ea f956 	bl	8000b30 <__aeabi_dcmple>
 8016884:	b1a0      	cbz	r0, 80168b0 <_strtod_l+0xb60>
 8016886:	4649      	mov	r1, r9
 8016888:	4640      	mov	r0, r8
 801688a:	f7ea f9ad 	bl	8000be8 <__aeabi_d2uiz>
 801688e:	2801      	cmp	r0, #1
 8016890:	bf38      	it	cc
 8016892:	2001      	movcc	r0, #1
 8016894:	f7e9 fe56 	bl	8000544 <__aeabi_ui2d>
 8016898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801689a:	4680      	mov	r8, r0
 801689c:	4689      	mov	r9, r1
 801689e:	bb23      	cbnz	r3, 80168ea <_strtod_l+0xb9a>
 80168a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168a4:	9010      	str	r0, [sp, #64]	; 0x40
 80168a6:	9311      	str	r3, [sp, #68]	; 0x44
 80168a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80168b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80168b8:	1a9b      	subs	r3, r3, r2
 80168ba:	9309      	str	r3, [sp, #36]	; 0x24
 80168bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168c0:	eeb0 0a48 	vmov.f32	s0, s16
 80168c4:	eef0 0a68 	vmov.f32	s1, s17
 80168c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80168cc:	f002 fc8c 	bl	80191e8 <__ulp>
 80168d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168d4:	ec53 2b10 	vmov	r2, r3, d0
 80168d8:	f7e9 feae 	bl	8000638 <__aeabi_dmul>
 80168dc:	ec53 2b18 	vmov	r2, r3, d8
 80168e0:	f7e9 fcf4 	bl	80002cc <__adddf3>
 80168e4:	4682      	mov	sl, r0
 80168e6:	468b      	mov	fp, r1
 80168e8:	e78d      	b.n	8016806 <_strtod_l+0xab6>
 80168ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80168ee:	e7db      	b.n	80168a8 <_strtod_l+0xb58>
 80168f0:	a311      	add	r3, pc, #68	; (adr r3, 8016938 <_strtod_l+0xbe8>)
 80168f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f6:	f7ea f911 	bl	8000b1c <__aeabi_dcmplt>
 80168fa:	e7b2      	b.n	8016862 <_strtod_l+0xb12>
 80168fc:	2300      	movs	r3, #0
 80168fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016904:	6013      	str	r3, [r2, #0]
 8016906:	f7ff ba6b 	b.w	8015de0 <_strtod_l+0x90>
 801690a:	2a65      	cmp	r2, #101	; 0x65
 801690c:	f43f ab5f 	beq.w	8015fce <_strtod_l+0x27e>
 8016910:	2a45      	cmp	r2, #69	; 0x45
 8016912:	f43f ab5c 	beq.w	8015fce <_strtod_l+0x27e>
 8016916:	2301      	movs	r3, #1
 8016918:	f7ff bb94 	b.w	8016044 <_strtod_l+0x2f4>
 801691c:	f3af 8000 	nop.w
 8016920:	94a03595 	.word	0x94a03595
 8016924:	3fdfffff 	.word	0x3fdfffff
 8016928:	35afe535 	.word	0x35afe535
 801692c:	3fe00000 	.word	0x3fe00000
 8016930:	ffc00000 	.word	0xffc00000
 8016934:	41dfffff 	.word	0x41dfffff
 8016938:	94a03595 	.word	0x94a03595
 801693c:	3fcfffff 	.word	0x3fcfffff
 8016940:	3ff00000 	.word	0x3ff00000
 8016944:	7ff00000 	.word	0x7ff00000
 8016948:	7fe00000 	.word	0x7fe00000
 801694c:	7c9fffff 	.word	0x7c9fffff
 8016950:	3fe00000 	.word	0x3fe00000
 8016954:	bff00000 	.word	0xbff00000
 8016958:	7fefffff 	.word	0x7fefffff

0801695c <strtod>:
 801695c:	460a      	mov	r2, r1
 801695e:	4601      	mov	r1, r0
 8016960:	4802      	ldr	r0, [pc, #8]	; (801696c <strtod+0x10>)
 8016962:	4b03      	ldr	r3, [pc, #12]	; (8016970 <strtod+0x14>)
 8016964:	6800      	ldr	r0, [r0, #0]
 8016966:	f7ff b9f3 	b.w	8015d50 <_strtod_l>
 801696a:	bf00      	nop
 801696c:	20000248 	.word	0x20000248
 8016970:	20000314 	.word	0x20000314

08016974 <strtok>:
 8016974:	4b16      	ldr	r3, [pc, #88]	; (80169d0 <strtok+0x5c>)
 8016976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016978:	681e      	ldr	r6, [r3, #0]
 801697a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801697c:	4605      	mov	r5, r0
 801697e:	b9fc      	cbnz	r4, 80169c0 <strtok+0x4c>
 8016980:	2050      	movs	r0, #80	; 0x50
 8016982:	9101      	str	r1, [sp, #4]
 8016984:	f7fd ff9e 	bl	80148c4 <malloc>
 8016988:	9901      	ldr	r1, [sp, #4]
 801698a:	65b0      	str	r0, [r6, #88]	; 0x58
 801698c:	4602      	mov	r2, r0
 801698e:	b920      	cbnz	r0, 801699a <strtok+0x26>
 8016990:	4b10      	ldr	r3, [pc, #64]	; (80169d4 <strtok+0x60>)
 8016992:	4811      	ldr	r0, [pc, #68]	; (80169d8 <strtok+0x64>)
 8016994:	2157      	movs	r1, #87	; 0x57
 8016996:	f7fd ff33 	bl	8014800 <__assert_func>
 801699a:	e9c0 4400 	strd	r4, r4, [r0]
 801699e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80169a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80169a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80169aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80169ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80169b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80169b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80169ba:	6184      	str	r4, [r0, #24]
 80169bc:	7704      	strb	r4, [r0, #28]
 80169be:	6244      	str	r4, [r0, #36]	; 0x24
 80169c0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80169c2:	2301      	movs	r3, #1
 80169c4:	4628      	mov	r0, r5
 80169c6:	b002      	add	sp, #8
 80169c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169cc:	f000 b806 	b.w	80169dc <__strtok_r>
 80169d0:	20000248 	.word	0x20000248
 80169d4:	0807301c 	.word	0x0807301c
 80169d8:	08073220 	.word	0x08073220

080169dc <__strtok_r>:
 80169dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169de:	b908      	cbnz	r0, 80169e4 <__strtok_r+0x8>
 80169e0:	6810      	ldr	r0, [r2, #0]
 80169e2:	b188      	cbz	r0, 8016a08 <__strtok_r+0x2c>
 80169e4:	4604      	mov	r4, r0
 80169e6:	4620      	mov	r0, r4
 80169e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80169ec:	460f      	mov	r7, r1
 80169ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80169f2:	b91e      	cbnz	r6, 80169fc <__strtok_r+0x20>
 80169f4:	b965      	cbnz	r5, 8016a10 <__strtok_r+0x34>
 80169f6:	6015      	str	r5, [r2, #0]
 80169f8:	4628      	mov	r0, r5
 80169fa:	e005      	b.n	8016a08 <__strtok_r+0x2c>
 80169fc:	42b5      	cmp	r5, r6
 80169fe:	d1f6      	bne.n	80169ee <__strtok_r+0x12>
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d1f0      	bne.n	80169e6 <__strtok_r+0xa>
 8016a04:	6014      	str	r4, [r2, #0]
 8016a06:	7003      	strb	r3, [r0, #0]
 8016a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a0a:	461c      	mov	r4, r3
 8016a0c:	e00c      	b.n	8016a28 <__strtok_r+0x4c>
 8016a0e:	b915      	cbnz	r5, 8016a16 <__strtok_r+0x3a>
 8016a10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016a14:	460e      	mov	r6, r1
 8016a16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016a1a:	42ab      	cmp	r3, r5
 8016a1c:	d1f7      	bne.n	8016a0e <__strtok_r+0x32>
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d0f3      	beq.n	8016a0a <__strtok_r+0x2e>
 8016a22:	2300      	movs	r3, #0
 8016a24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016a28:	6014      	str	r4, [r2, #0]
 8016a2a:	e7ed      	b.n	8016a08 <__strtok_r+0x2c>

08016a2c <_strtol_l.constprop.0>:
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a32:	d001      	beq.n	8016a38 <_strtol_l.constprop.0+0xc>
 8016a34:	2b24      	cmp	r3, #36	; 0x24
 8016a36:	d906      	bls.n	8016a46 <_strtol_l.constprop.0+0x1a>
 8016a38:	f7fd ff08 	bl	801484c <__errno>
 8016a3c:	2316      	movs	r3, #22
 8016a3e:	6003      	str	r3, [r0, #0]
 8016a40:	2000      	movs	r0, #0
 8016a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016b2c <_strtol_l.constprop.0+0x100>
 8016a4a:	460d      	mov	r5, r1
 8016a4c:	462e      	mov	r6, r5
 8016a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a52:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016a56:	f017 0708 	ands.w	r7, r7, #8
 8016a5a:	d1f7      	bne.n	8016a4c <_strtol_l.constprop.0+0x20>
 8016a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8016a5e:	d132      	bne.n	8016ac6 <_strtol_l.constprop.0+0x9a>
 8016a60:	782c      	ldrb	r4, [r5, #0]
 8016a62:	2701      	movs	r7, #1
 8016a64:	1cb5      	adds	r5, r6, #2
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d05b      	beq.n	8016b22 <_strtol_l.constprop.0+0xf6>
 8016a6a:	2b10      	cmp	r3, #16
 8016a6c:	d109      	bne.n	8016a82 <_strtol_l.constprop.0+0x56>
 8016a6e:	2c30      	cmp	r4, #48	; 0x30
 8016a70:	d107      	bne.n	8016a82 <_strtol_l.constprop.0+0x56>
 8016a72:	782c      	ldrb	r4, [r5, #0]
 8016a74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016a78:	2c58      	cmp	r4, #88	; 0x58
 8016a7a:	d14d      	bne.n	8016b18 <_strtol_l.constprop.0+0xec>
 8016a7c:	786c      	ldrb	r4, [r5, #1]
 8016a7e:	2310      	movs	r3, #16
 8016a80:	3502      	adds	r5, #2
 8016a82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016a86:	f108 38ff 	add.w	r8, r8, #4294967295
 8016a8a:	f04f 0c00 	mov.w	ip, #0
 8016a8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8016a92:	4666      	mov	r6, ip
 8016a94:	fb03 8a19 	mls	sl, r3, r9, r8
 8016a98:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016a9c:	f1be 0f09 	cmp.w	lr, #9
 8016aa0:	d816      	bhi.n	8016ad0 <_strtol_l.constprop.0+0xa4>
 8016aa2:	4674      	mov	r4, lr
 8016aa4:	42a3      	cmp	r3, r4
 8016aa6:	dd24      	ble.n	8016af2 <_strtol_l.constprop.0+0xc6>
 8016aa8:	f1bc 0f00 	cmp.w	ip, #0
 8016aac:	db1e      	blt.n	8016aec <_strtol_l.constprop.0+0xc0>
 8016aae:	45b1      	cmp	r9, r6
 8016ab0:	d31c      	bcc.n	8016aec <_strtol_l.constprop.0+0xc0>
 8016ab2:	d101      	bne.n	8016ab8 <_strtol_l.constprop.0+0x8c>
 8016ab4:	45a2      	cmp	sl, r4
 8016ab6:	db19      	blt.n	8016aec <_strtol_l.constprop.0+0xc0>
 8016ab8:	fb06 4603 	mla	r6, r6, r3, r4
 8016abc:	f04f 0c01 	mov.w	ip, #1
 8016ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ac4:	e7e8      	b.n	8016a98 <_strtol_l.constprop.0+0x6c>
 8016ac6:	2c2b      	cmp	r4, #43	; 0x2b
 8016ac8:	bf04      	itt	eq
 8016aca:	782c      	ldrbeq	r4, [r5, #0]
 8016acc:	1cb5      	addeq	r5, r6, #2
 8016ace:	e7ca      	b.n	8016a66 <_strtol_l.constprop.0+0x3a>
 8016ad0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016ad4:	f1be 0f19 	cmp.w	lr, #25
 8016ad8:	d801      	bhi.n	8016ade <_strtol_l.constprop.0+0xb2>
 8016ada:	3c37      	subs	r4, #55	; 0x37
 8016adc:	e7e2      	b.n	8016aa4 <_strtol_l.constprop.0+0x78>
 8016ade:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016ae2:	f1be 0f19 	cmp.w	lr, #25
 8016ae6:	d804      	bhi.n	8016af2 <_strtol_l.constprop.0+0xc6>
 8016ae8:	3c57      	subs	r4, #87	; 0x57
 8016aea:	e7db      	b.n	8016aa4 <_strtol_l.constprop.0+0x78>
 8016aec:	f04f 3cff 	mov.w	ip, #4294967295
 8016af0:	e7e6      	b.n	8016ac0 <_strtol_l.constprop.0+0x94>
 8016af2:	f1bc 0f00 	cmp.w	ip, #0
 8016af6:	da05      	bge.n	8016b04 <_strtol_l.constprop.0+0xd8>
 8016af8:	2322      	movs	r3, #34	; 0x22
 8016afa:	6003      	str	r3, [r0, #0]
 8016afc:	4646      	mov	r6, r8
 8016afe:	b942      	cbnz	r2, 8016b12 <_strtol_l.constprop.0+0xe6>
 8016b00:	4630      	mov	r0, r6
 8016b02:	e79e      	b.n	8016a42 <_strtol_l.constprop.0+0x16>
 8016b04:	b107      	cbz	r7, 8016b08 <_strtol_l.constprop.0+0xdc>
 8016b06:	4276      	negs	r6, r6
 8016b08:	2a00      	cmp	r2, #0
 8016b0a:	d0f9      	beq.n	8016b00 <_strtol_l.constprop.0+0xd4>
 8016b0c:	f1bc 0f00 	cmp.w	ip, #0
 8016b10:	d000      	beq.n	8016b14 <_strtol_l.constprop.0+0xe8>
 8016b12:	1e69      	subs	r1, r5, #1
 8016b14:	6011      	str	r1, [r2, #0]
 8016b16:	e7f3      	b.n	8016b00 <_strtol_l.constprop.0+0xd4>
 8016b18:	2430      	movs	r4, #48	; 0x30
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1b1      	bne.n	8016a82 <_strtol_l.constprop.0+0x56>
 8016b1e:	2308      	movs	r3, #8
 8016b20:	e7af      	b.n	8016a82 <_strtol_l.constprop.0+0x56>
 8016b22:	2c30      	cmp	r4, #48	; 0x30
 8016b24:	d0a5      	beq.n	8016a72 <_strtol_l.constprop.0+0x46>
 8016b26:	230a      	movs	r3, #10
 8016b28:	e7ab      	b.n	8016a82 <_strtol_l.constprop.0+0x56>
 8016b2a:	bf00      	nop
 8016b2c:	080732ba 	.word	0x080732ba

08016b30 <_strtol_r>:
 8016b30:	f7ff bf7c 	b.w	8016a2c <_strtol_l.constprop.0>

08016b34 <strtol>:
 8016b34:	4613      	mov	r3, r2
 8016b36:	460a      	mov	r2, r1
 8016b38:	4601      	mov	r1, r0
 8016b3a:	4802      	ldr	r0, [pc, #8]	; (8016b44 <strtol+0x10>)
 8016b3c:	6800      	ldr	r0, [r0, #0]
 8016b3e:	f7ff bf75 	b.w	8016a2c <_strtol_l.constprop.0>
 8016b42:	bf00      	nop
 8016b44:	20000248 	.word	0x20000248

08016b48 <__tzcalc_limits>:
 8016b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	f001 ff1b 	bl	8018988 <__gettzinfo>
 8016b52:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8016b56:	429d      	cmp	r5, r3
 8016b58:	f340 8099 	ble.w	8016c8e <__tzcalc_limits+0x146>
 8016b5c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8016b60:	18ac      	adds	r4, r5, r2
 8016b62:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8016b66:	f240 126d 	movw	r2, #365	; 0x16d
 8016b6a:	10a4      	asrs	r4, r4, #2
 8016b6c:	fb02 4403 	mla	r4, r2, r3, r4
 8016b70:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8016b74:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8016b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b7c:	441c      	add	r4, r3
 8016b7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016b82:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8016b86:	fb95 fcf3 	sdiv	ip, r5, r3
 8016b8a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8016b8e:	186a      	adds	r2, r5, r1
 8016b90:	fabc f68c 	clz	r6, ip
 8016b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8016b98:	f005 0303 	and.w	r3, r5, #3
 8016b9c:	4414      	add	r4, r2
 8016b9e:	2264      	movs	r2, #100	; 0x64
 8016ba0:	6045      	str	r5, [r0, #4]
 8016ba2:	fb95 f7f2 	sdiv	r7, r5, r2
 8016ba6:	0976      	lsrs	r6, r6, #5
 8016ba8:	fb02 5717 	mls	r7, r2, r7, r5
 8016bac:	4601      	mov	r1, r0
 8016bae:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8016bb2:	9300      	str	r3, [sp, #0]
 8016bb4:	f04f 0a07 	mov.w	sl, #7
 8016bb8:	7a0d      	ldrb	r5, [r1, #8]
 8016bba:	694b      	ldr	r3, [r1, #20]
 8016bbc:	2d4a      	cmp	r5, #74	; 0x4a
 8016bbe:	d12d      	bne.n	8016c1c <__tzcalc_limits+0xd4>
 8016bc0:	9a00      	ldr	r2, [sp, #0]
 8016bc2:	eb04 0e03 	add.w	lr, r4, r3
 8016bc6:	b902      	cbnz	r2, 8016bca <__tzcalc_limits+0x82>
 8016bc8:	b917      	cbnz	r7, 8016bd0 <__tzcalc_limits+0x88>
 8016bca:	f1bc 0f00 	cmp.w	ip, #0
 8016bce:	d123      	bne.n	8016c18 <__tzcalc_limits+0xd0>
 8016bd0:	2b3b      	cmp	r3, #59	; 0x3b
 8016bd2:	bfd4      	ite	le
 8016bd4:	2300      	movle	r3, #0
 8016bd6:	2301      	movgt	r3, #1
 8016bd8:	4473      	add	r3, lr
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	698d      	ldr	r5, [r1, #24]
 8016bde:	4a2d      	ldr	r2, [pc, #180]	; (8016c94 <__tzcalc_limits+0x14c>)
 8016be0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8016be4:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8016be8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8016bea:	18ed      	adds	r5, r5, r3
 8016bec:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8016bf0:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8016bf4:	3128      	adds	r1, #40	; 0x28
 8016bf6:	458b      	cmp	fp, r1
 8016bf8:	d1de      	bne.n	8016bb8 <__tzcalc_limits+0x70>
 8016bfa:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8016bfe:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8016c02:	428c      	cmp	r4, r1
 8016c04:	eb72 0303 	sbcs.w	r3, r2, r3
 8016c08:	bfb4      	ite	lt
 8016c0a:	2301      	movlt	r3, #1
 8016c0c:	2300      	movge	r3, #0
 8016c0e:	6003      	str	r3, [r0, #0]
 8016c10:	2001      	movs	r0, #1
 8016c12:	b003      	add	sp, #12
 8016c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c18:	2300      	movs	r3, #0
 8016c1a:	e7dd      	b.n	8016bd8 <__tzcalc_limits+0x90>
 8016c1c:	2d44      	cmp	r5, #68	; 0x44
 8016c1e:	d101      	bne.n	8016c24 <__tzcalc_limits+0xdc>
 8016c20:	4423      	add	r3, r4
 8016c22:	e7db      	b.n	8016bdc <__tzcalc_limits+0x94>
 8016c24:	9a00      	ldr	r2, [sp, #0]
 8016c26:	bb62      	cbnz	r2, 8016c82 <__tzcalc_limits+0x13a>
 8016c28:	2f00      	cmp	r7, #0
 8016c2a:	bf0c      	ite	eq
 8016c2c:	4635      	moveq	r5, r6
 8016c2e:	2501      	movne	r5, #1
 8016c30:	68ca      	ldr	r2, [r1, #12]
 8016c32:	9201      	str	r2, [sp, #4]
 8016c34:	4a18      	ldr	r2, [pc, #96]	; (8016c98 <__tzcalc_limits+0x150>)
 8016c36:	f04f 0930 	mov.w	r9, #48	; 0x30
 8016c3a:	fb09 2505 	mla	r5, r9, r5, r2
 8016c3e:	46a6      	mov	lr, r4
 8016c40:	f04f 0800 	mov.w	r8, #0
 8016c44:	3d04      	subs	r5, #4
 8016c46:	9a01      	ldr	r2, [sp, #4]
 8016c48:	f108 0801 	add.w	r8, r8, #1
 8016c4c:	4542      	cmp	r2, r8
 8016c4e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8016c52:	dc18      	bgt.n	8016c86 <__tzcalc_limits+0x13e>
 8016c54:	f10e 0504 	add.w	r5, lr, #4
 8016c58:	fb95 f8fa 	sdiv	r8, r5, sl
 8016c5c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8016c60:	eba5 0808 	sub.w	r8, r5, r8
 8016c64:	ebb3 0808 	subs.w	r8, r3, r8
 8016c68:	690b      	ldr	r3, [r1, #16]
 8016c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c6e:	bf48      	it	mi
 8016c70:	f108 0807 	addmi.w	r8, r8, #7
 8016c74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8016c78:	4443      	add	r3, r8
 8016c7a:	454b      	cmp	r3, r9
 8016c7c:	da05      	bge.n	8016c8a <__tzcalc_limits+0x142>
 8016c7e:	4473      	add	r3, lr
 8016c80:	e7ac      	b.n	8016bdc <__tzcalc_limits+0x94>
 8016c82:	4635      	mov	r5, r6
 8016c84:	e7d4      	b.n	8016c30 <__tzcalc_limits+0xe8>
 8016c86:	44ce      	add	lr, r9
 8016c88:	e7dd      	b.n	8016c46 <__tzcalc_limits+0xfe>
 8016c8a:	3b07      	subs	r3, #7
 8016c8c:	e7f5      	b.n	8016c7a <__tzcalc_limits+0x132>
 8016c8e:	2000      	movs	r0, #0
 8016c90:	e7bf      	b.n	8016c12 <__tzcalc_limits+0xca>
 8016c92:	bf00      	nop
 8016c94:	00015180 	.word	0x00015180
 8016c98:	08073510 	.word	0x08073510

08016c9c <__tz_lock>:
 8016c9c:	4801      	ldr	r0, [pc, #4]	; (8016ca4 <__tz_lock+0x8>)
 8016c9e:	f001 be7c 	b.w	801899a <__retarget_lock_acquire>
 8016ca2:	bf00      	nop
 8016ca4:	20005da4 	.word	0x20005da4

08016ca8 <__tz_unlock>:
 8016ca8:	4801      	ldr	r0, [pc, #4]	; (8016cb0 <__tz_unlock+0x8>)
 8016caa:	f001 be78 	b.w	801899e <__retarget_lock_release>
 8016cae:	bf00      	nop
 8016cb0:	20005da4 	.word	0x20005da4

08016cb4 <_tzset_unlocked>:
 8016cb4:	4b01      	ldr	r3, [pc, #4]	; (8016cbc <_tzset_unlocked+0x8>)
 8016cb6:	6818      	ldr	r0, [r3, #0]
 8016cb8:	f000 b802 	b.w	8016cc0 <_tzset_unlocked_r>
 8016cbc:	20000248 	.word	0x20000248

08016cc0 <_tzset_unlocked_r>:
 8016cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc4:	b08d      	sub	sp, #52	; 0x34
 8016cc6:	4607      	mov	r7, r0
 8016cc8:	f001 fe5e 	bl	8018988 <__gettzinfo>
 8016ccc:	49b0      	ldr	r1, [pc, #704]	; (8016f90 <_tzset_unlocked_r+0x2d0>)
 8016cce:	4eb1      	ldr	r6, [pc, #708]	; (8016f94 <_tzset_unlocked_r+0x2d4>)
 8016cd0:	4605      	mov	r5, r0
 8016cd2:	4638      	mov	r0, r7
 8016cd4:	f001 fe50 	bl	8018978 <_getenv_r>
 8016cd8:	4604      	mov	r4, r0
 8016cda:	b970      	cbnz	r0, 8016cfa <_tzset_unlocked_r+0x3a>
 8016cdc:	4bae      	ldr	r3, [pc, #696]	; (8016f98 <_tzset_unlocked_r+0x2d8>)
 8016cde:	4aaf      	ldr	r2, [pc, #700]	; (8016f9c <_tzset_unlocked_r+0x2dc>)
 8016ce0:	6018      	str	r0, [r3, #0]
 8016ce2:	4baf      	ldr	r3, [pc, #700]	; (8016fa0 <_tzset_unlocked_r+0x2e0>)
 8016ce4:	6018      	str	r0, [r3, #0]
 8016ce6:	4baf      	ldr	r3, [pc, #700]	; (8016fa4 <_tzset_unlocked_r+0x2e4>)
 8016ce8:	6830      	ldr	r0, [r6, #0]
 8016cea:	e9c3 2200 	strd	r2, r2, [r3]
 8016cee:	f7fd fdf1 	bl	80148d4 <free>
 8016cf2:	6034      	str	r4, [r6, #0]
 8016cf4:	b00d      	add	sp, #52	; 0x34
 8016cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cfa:	6831      	ldr	r1, [r6, #0]
 8016cfc:	2900      	cmp	r1, #0
 8016cfe:	d162      	bne.n	8016dc6 <_tzset_unlocked_r+0x106>
 8016d00:	6830      	ldr	r0, [r6, #0]
 8016d02:	f7fd fde7 	bl	80148d4 <free>
 8016d06:	4620      	mov	r0, r4
 8016d08:	f7e9 fa7c 	bl	8000204 <strlen>
 8016d0c:	1c41      	adds	r1, r0, #1
 8016d0e:	4638      	mov	r0, r7
 8016d10:	f7fe f8dc 	bl	8014ecc <_malloc_r>
 8016d14:	6030      	str	r0, [r6, #0]
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d15a      	bne.n	8016dd0 <_tzset_unlocked_r+0x110>
 8016d1a:	7823      	ldrb	r3, [r4, #0]
 8016d1c:	4aa2      	ldr	r2, [pc, #648]	; (8016fa8 <_tzset_unlocked_r+0x2e8>)
 8016d1e:	49a3      	ldr	r1, [pc, #652]	; (8016fac <_tzset_unlocked_r+0x2ec>)
 8016d20:	2b3a      	cmp	r3, #58	; 0x3a
 8016d22:	bf08      	it	eq
 8016d24:	3401      	addeq	r4, #1
 8016d26:	ae0a      	add	r6, sp, #40	; 0x28
 8016d28:	4633      	mov	r3, r6
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f7fe ff36 	bl	8015b9c <siscanf>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	dddf      	ble.n	8016cf4 <_tzset_unlocked_r+0x34>
 8016d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d36:	18e7      	adds	r7, r4, r3
 8016d38:	5ce3      	ldrb	r3, [r4, r3]
 8016d3a:	2b2d      	cmp	r3, #45	; 0x2d
 8016d3c:	d14c      	bne.n	8016dd8 <_tzset_unlocked_r+0x118>
 8016d3e:	3701      	adds	r7, #1
 8016d40:	f04f 38ff 	mov.w	r8, #4294967295
 8016d44:	f10d 0a20 	add.w	sl, sp, #32
 8016d48:	f10d 0b1e 	add.w	fp, sp, #30
 8016d4c:	2400      	movs	r4, #0
 8016d4e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8016d52:	4997      	ldr	r1, [pc, #604]	; (8016fb0 <_tzset_unlocked_r+0x2f0>)
 8016d54:	9603      	str	r6, [sp, #12]
 8016d56:	f8cd b000 	str.w	fp, [sp]
 8016d5a:	4633      	mov	r3, r6
 8016d5c:	aa07      	add	r2, sp, #28
 8016d5e:	4638      	mov	r0, r7
 8016d60:	f8ad 401e 	strh.w	r4, [sp, #30]
 8016d64:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016d68:	f7fe ff18 	bl	8015b9c <siscanf>
 8016d6c:	42a0      	cmp	r0, r4
 8016d6e:	ddc1      	ble.n	8016cf4 <_tzset_unlocked_r+0x34>
 8016d70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016d74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016d78:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8016fbc <_tzset_unlocked_r+0x2fc>
 8016d7c:	213c      	movs	r1, #60	; 0x3c
 8016d7e:	fb01 3302 	mla	r3, r1, r2, r3
 8016d82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016d86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016d8a:	fb01 3302 	mla	r3, r1, r2, r3
 8016d8e:	fb08 f303 	mul.w	r3, r8, r3
 8016d92:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8016fa4 <_tzset_unlocked_r+0x2e4>
 8016d96:	62ab      	str	r3, [r5, #40]	; 0x28
 8016d98:	4b83      	ldr	r3, [pc, #524]	; (8016fa8 <_tzset_unlocked_r+0x2e8>)
 8016d9a:	f8c8 3000 	str.w	r3, [r8]
 8016d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016da0:	4982      	ldr	r1, [pc, #520]	; (8016fac <_tzset_unlocked_r+0x2ec>)
 8016da2:	441f      	add	r7, r3
 8016da4:	464a      	mov	r2, r9
 8016da6:	4633      	mov	r3, r6
 8016da8:	4638      	mov	r0, r7
 8016daa:	f7fe fef7 	bl	8015b9c <siscanf>
 8016dae:	42a0      	cmp	r0, r4
 8016db0:	dc18      	bgt.n	8016de4 <_tzset_unlocked_r+0x124>
 8016db2:	f8d8 3000 	ldr.w	r3, [r8]
 8016db6:	f8c8 3004 	str.w	r3, [r8, #4]
 8016dba:	4b77      	ldr	r3, [pc, #476]	; (8016f98 <_tzset_unlocked_r+0x2d8>)
 8016dbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016dbe:	601a      	str	r2, [r3, #0]
 8016dc0:	4b77      	ldr	r3, [pc, #476]	; (8016fa0 <_tzset_unlocked_r+0x2e0>)
 8016dc2:	601c      	str	r4, [r3, #0]
 8016dc4:	e796      	b.n	8016cf4 <_tzset_unlocked_r+0x34>
 8016dc6:	f7e9 fa13 	bl	80001f0 <strcmp>
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	d198      	bne.n	8016d00 <_tzset_unlocked_r+0x40>
 8016dce:	e791      	b.n	8016cf4 <_tzset_unlocked_r+0x34>
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	f7fe ff54 	bl	8015c7e <strcpy>
 8016dd6:	e7a0      	b.n	8016d1a <_tzset_unlocked_r+0x5a>
 8016dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8016dda:	bf08      	it	eq
 8016ddc:	3701      	addeq	r7, #1
 8016dde:	f04f 0801 	mov.w	r8, #1
 8016de2:	e7af      	b.n	8016d44 <_tzset_unlocked_r+0x84>
 8016de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016de6:	f8c8 9004 	str.w	r9, [r8, #4]
 8016dea:	18fc      	adds	r4, r7, r3
 8016dec:	5cfb      	ldrb	r3, [r7, r3]
 8016dee:	2b2d      	cmp	r3, #45	; 0x2d
 8016df0:	f040 808b 	bne.w	8016f0a <_tzset_unlocked_r+0x24a>
 8016df4:	3401      	adds	r4, #1
 8016df6:	f04f 37ff 	mov.w	r7, #4294967295
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016e04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e08:	930a      	str	r3, [sp, #40]	; 0x28
 8016e0a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016e0e:	e9cd b600 	strd	fp, r6, [sp]
 8016e12:	4967      	ldr	r1, [pc, #412]	; (8016fb0 <_tzset_unlocked_r+0x2f0>)
 8016e14:	4633      	mov	r3, r6
 8016e16:	aa07      	add	r2, sp, #28
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f7fe febf 	bl	8015b9c <siscanf>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	dc78      	bgt.n	8016f14 <_tzset_unlocked_r+0x254>
 8016e22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016e24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8016e28:	652b      	str	r3, [r5, #80]	; 0x50
 8016e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2c:	462f      	mov	r7, r5
 8016e2e:	441c      	add	r4, r3
 8016e30:	f04f 0900 	mov.w	r9, #0
 8016e34:	7823      	ldrb	r3, [r4, #0]
 8016e36:	2b2c      	cmp	r3, #44	; 0x2c
 8016e38:	bf08      	it	eq
 8016e3a:	3401      	addeq	r4, #1
 8016e3c:	f894 8000 	ldrb.w	r8, [r4]
 8016e40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8016e44:	d178      	bne.n	8016f38 <_tzset_unlocked_r+0x278>
 8016e46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8016e4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016e4e:	ab09      	add	r3, sp, #36	; 0x24
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	4958      	ldr	r1, [pc, #352]	; (8016fb4 <_tzset_unlocked_r+0x2f4>)
 8016e54:	9603      	str	r6, [sp, #12]
 8016e56:	4633      	mov	r3, r6
 8016e58:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f7fe fe9d 	bl	8015b9c <siscanf>
 8016e62:	2803      	cmp	r0, #3
 8016e64:	f47f af46 	bne.w	8016cf4 <_tzset_unlocked_r+0x34>
 8016e68:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016e6c:	1e4b      	subs	r3, r1, #1
 8016e6e:	2b0b      	cmp	r3, #11
 8016e70:	f63f af40 	bhi.w	8016cf4 <_tzset_unlocked_r+0x34>
 8016e74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8016e78:	1e53      	subs	r3, r2, #1
 8016e7a:	2b04      	cmp	r3, #4
 8016e7c:	f63f af3a 	bhi.w	8016cf4 <_tzset_unlocked_r+0x34>
 8016e80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8016e84:	2b06      	cmp	r3, #6
 8016e86:	f63f af35 	bhi.w	8016cf4 <_tzset_unlocked_r+0x34>
 8016e8a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8016e8e:	f887 8008 	strb.w	r8, [r7, #8]
 8016e92:	617b      	str	r3, [r7, #20]
 8016e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e96:	eb04 0803 	add.w	r8, r4, r3
 8016e9a:	2302      	movs	r3, #2
 8016e9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016ea6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8016eac:	f898 3000 	ldrb.w	r3, [r8]
 8016eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8016eb2:	d109      	bne.n	8016ec8 <_tzset_unlocked_r+0x208>
 8016eb4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8016eb8:	e9cd b600 	strd	fp, r6, [sp]
 8016ebc:	493e      	ldr	r1, [pc, #248]	; (8016fb8 <_tzset_unlocked_r+0x2f8>)
 8016ebe:	4633      	mov	r3, r6
 8016ec0:	aa07      	add	r2, sp, #28
 8016ec2:	4640      	mov	r0, r8
 8016ec4:	f7fe fe6a 	bl	8015b9c <siscanf>
 8016ec8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016ecc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016ed0:	213c      	movs	r1, #60	; 0x3c
 8016ed2:	fb01 3302 	mla	r3, r1, r2, r3
 8016ed6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016eda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016ede:	fb01 3302 	mla	r3, r1, r2, r3
 8016ee2:	61bb      	str	r3, [r7, #24]
 8016ee4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016ee6:	3728      	adds	r7, #40	; 0x28
 8016ee8:	4444      	add	r4, r8
 8016eea:	f1b9 0f00 	cmp.w	r9, #0
 8016eee:	d020      	beq.n	8016f32 <_tzset_unlocked_r+0x272>
 8016ef0:	6868      	ldr	r0, [r5, #4]
 8016ef2:	f7ff fe29 	bl	8016b48 <__tzcalc_limits>
 8016ef6:	4b28      	ldr	r3, [pc, #160]	; (8016f98 <_tzset_unlocked_r+0x2d8>)
 8016ef8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016efa:	601a      	str	r2, [r3, #0]
 8016efc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8016efe:	1a9b      	subs	r3, r3, r2
 8016f00:	4a27      	ldr	r2, [pc, #156]	; (8016fa0 <_tzset_unlocked_r+0x2e0>)
 8016f02:	bf18      	it	ne
 8016f04:	2301      	movne	r3, #1
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	e6f4      	b.n	8016cf4 <_tzset_unlocked_r+0x34>
 8016f0a:	2b2b      	cmp	r3, #43	; 0x2b
 8016f0c:	bf08      	it	eq
 8016f0e:	3401      	addeq	r4, #1
 8016f10:	2701      	movs	r7, #1
 8016f12:	e772      	b.n	8016dfa <_tzset_unlocked_r+0x13a>
 8016f14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016f18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016f1c:	213c      	movs	r1, #60	; 0x3c
 8016f1e:	fb01 3302 	mla	r3, r1, r2, r3
 8016f22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8016f26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016f2a:	fb01 3302 	mla	r3, r1, r2, r3
 8016f2e:	437b      	muls	r3, r7
 8016f30:	e77a      	b.n	8016e28 <_tzset_unlocked_r+0x168>
 8016f32:	f04f 0901 	mov.w	r9, #1
 8016f36:	e77d      	b.n	8016e34 <_tzset_unlocked_r+0x174>
 8016f38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8016f3c:	bf06      	itte	eq
 8016f3e:	3401      	addeq	r4, #1
 8016f40:	4643      	moveq	r3, r8
 8016f42:	2344      	movne	r3, #68	; 0x44
 8016f44:	220a      	movs	r2, #10
 8016f46:	a90b      	add	r1, sp, #44	; 0x2c
 8016f48:	4620      	mov	r0, r4
 8016f4a:	9305      	str	r3, [sp, #20]
 8016f4c:	f003 f880 	bl	801a050 <strtoul>
 8016f50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8016f54:	9b05      	ldr	r3, [sp, #20]
 8016f56:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8016f5a:	45a0      	cmp	r8, r4
 8016f5c:	d114      	bne.n	8016f88 <_tzset_unlocked_r+0x2c8>
 8016f5e:	234d      	movs	r3, #77	; 0x4d
 8016f60:	f1b9 0f00 	cmp.w	r9, #0
 8016f64:	d107      	bne.n	8016f76 <_tzset_unlocked_r+0x2b6>
 8016f66:	722b      	strb	r3, [r5, #8]
 8016f68:	2103      	movs	r1, #3
 8016f6a:	2302      	movs	r3, #2
 8016f6c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8016f70:	f8c5 9014 	str.w	r9, [r5, #20]
 8016f74:	e791      	b.n	8016e9a <_tzset_unlocked_r+0x1da>
 8016f76:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8016f7a:	220b      	movs	r2, #11
 8016f7c:	2301      	movs	r3, #1
 8016f7e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8016f82:	2300      	movs	r3, #0
 8016f84:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016f86:	e788      	b.n	8016e9a <_tzset_unlocked_r+0x1da>
 8016f88:	b280      	uxth	r0, r0
 8016f8a:	723b      	strb	r3, [r7, #8]
 8016f8c:	6178      	str	r0, [r7, #20]
 8016f8e:	e784      	b.n	8016e9a <_tzset_unlocked_r+0x1da>
 8016f90:	0807327d 	.word	0x0807327d
 8016f94:	20005d94 	.word	0x20005d94
 8016f98:	20005d9c 	.word	0x20005d9c
 8016f9c:	08073280 	.word	0x08073280
 8016fa0:	20005d98 	.word	0x20005d98
 8016fa4:	200002ac 	.word	0x200002ac
 8016fa8:	20005d87 	.word	0x20005d87
 8016fac:	08073284 	.word	0x08073284
 8016fb0:	080732a7 	.word	0x080732a7
 8016fb4:	08073293 	.word	0x08073293
 8016fb8:	080732a6 	.word	0x080732a6
 8016fbc:	20005d7c 	.word	0x20005d7c

08016fc0 <__swbuf_r>:
 8016fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc2:	460e      	mov	r6, r1
 8016fc4:	4614      	mov	r4, r2
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	b118      	cbz	r0, 8016fd2 <__swbuf_r+0x12>
 8016fca:	6983      	ldr	r3, [r0, #24]
 8016fcc:	b90b      	cbnz	r3, 8016fd2 <__swbuf_r+0x12>
 8016fce:	f001 f88b 	bl	80180e8 <__sinit>
 8016fd2:	4b21      	ldr	r3, [pc, #132]	; (8017058 <__swbuf_r+0x98>)
 8016fd4:	429c      	cmp	r4, r3
 8016fd6:	d12b      	bne.n	8017030 <__swbuf_r+0x70>
 8016fd8:	686c      	ldr	r4, [r5, #4]
 8016fda:	69a3      	ldr	r3, [r4, #24]
 8016fdc:	60a3      	str	r3, [r4, #8]
 8016fde:	89a3      	ldrh	r3, [r4, #12]
 8016fe0:	071a      	lsls	r2, r3, #28
 8016fe2:	d52f      	bpl.n	8017044 <__swbuf_r+0x84>
 8016fe4:	6923      	ldr	r3, [r4, #16]
 8016fe6:	b36b      	cbz	r3, 8017044 <__swbuf_r+0x84>
 8016fe8:	6923      	ldr	r3, [r4, #16]
 8016fea:	6820      	ldr	r0, [r4, #0]
 8016fec:	1ac0      	subs	r0, r0, r3
 8016fee:	6963      	ldr	r3, [r4, #20]
 8016ff0:	b2f6      	uxtb	r6, r6
 8016ff2:	4283      	cmp	r3, r0
 8016ff4:	4637      	mov	r7, r6
 8016ff6:	dc04      	bgt.n	8017002 <__swbuf_r+0x42>
 8016ff8:	4621      	mov	r1, r4
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	f000 ffe0 	bl	8017fc0 <_fflush_r>
 8017000:	bb30      	cbnz	r0, 8017050 <__swbuf_r+0x90>
 8017002:	68a3      	ldr	r3, [r4, #8]
 8017004:	3b01      	subs	r3, #1
 8017006:	60a3      	str	r3, [r4, #8]
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	1c5a      	adds	r2, r3, #1
 801700c:	6022      	str	r2, [r4, #0]
 801700e:	701e      	strb	r6, [r3, #0]
 8017010:	6963      	ldr	r3, [r4, #20]
 8017012:	3001      	adds	r0, #1
 8017014:	4283      	cmp	r3, r0
 8017016:	d004      	beq.n	8017022 <__swbuf_r+0x62>
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	07db      	lsls	r3, r3, #31
 801701c:	d506      	bpl.n	801702c <__swbuf_r+0x6c>
 801701e:	2e0a      	cmp	r6, #10
 8017020:	d104      	bne.n	801702c <__swbuf_r+0x6c>
 8017022:	4621      	mov	r1, r4
 8017024:	4628      	mov	r0, r5
 8017026:	f000 ffcb 	bl	8017fc0 <_fflush_r>
 801702a:	b988      	cbnz	r0, 8017050 <__swbuf_r+0x90>
 801702c:	4638      	mov	r0, r7
 801702e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017030:	4b0a      	ldr	r3, [pc, #40]	; (801705c <__swbuf_r+0x9c>)
 8017032:	429c      	cmp	r4, r3
 8017034:	d101      	bne.n	801703a <__swbuf_r+0x7a>
 8017036:	68ac      	ldr	r4, [r5, #8]
 8017038:	e7cf      	b.n	8016fda <__swbuf_r+0x1a>
 801703a:	4b09      	ldr	r3, [pc, #36]	; (8017060 <__swbuf_r+0xa0>)
 801703c:	429c      	cmp	r4, r3
 801703e:	bf08      	it	eq
 8017040:	68ec      	ldreq	r4, [r5, #12]
 8017042:	e7ca      	b.n	8016fda <__swbuf_r+0x1a>
 8017044:	4621      	mov	r1, r4
 8017046:	4628      	mov	r0, r5
 8017048:	f000 f81e 	bl	8017088 <__swsetup_r>
 801704c:	2800      	cmp	r0, #0
 801704e:	d0cb      	beq.n	8016fe8 <__swbuf_r+0x28>
 8017050:	f04f 37ff 	mov.w	r7, #4294967295
 8017054:	e7ea      	b.n	801702c <__swbuf_r+0x6c>
 8017056:	bf00      	nop
 8017058:	08073454 	.word	0x08073454
 801705c:	08073474 	.word	0x08073474
 8017060:	08073434 	.word	0x08073434

08017064 <_write_r>:
 8017064:	b538      	push	{r3, r4, r5, lr}
 8017066:	4d07      	ldr	r5, [pc, #28]	; (8017084 <_write_r+0x20>)
 8017068:	4604      	mov	r4, r0
 801706a:	4608      	mov	r0, r1
 801706c:	4611      	mov	r1, r2
 801706e:	2200      	movs	r2, #0
 8017070:	602a      	str	r2, [r5, #0]
 8017072:	461a      	mov	r2, r3
 8017074:	f7ed fd05 	bl	8004a82 <_write>
 8017078:	1c43      	adds	r3, r0, #1
 801707a:	d102      	bne.n	8017082 <_write_r+0x1e>
 801707c:	682b      	ldr	r3, [r5, #0]
 801707e:	b103      	cbz	r3, 8017082 <_write_r+0x1e>
 8017080:	6023      	str	r3, [r4, #0]
 8017082:	bd38      	pop	{r3, r4, r5, pc}
 8017084:	20005da8 	.word	0x20005da8

08017088 <__swsetup_r>:
 8017088:	4b32      	ldr	r3, [pc, #200]	; (8017154 <__swsetup_r+0xcc>)
 801708a:	b570      	push	{r4, r5, r6, lr}
 801708c:	681d      	ldr	r5, [r3, #0]
 801708e:	4606      	mov	r6, r0
 8017090:	460c      	mov	r4, r1
 8017092:	b125      	cbz	r5, 801709e <__swsetup_r+0x16>
 8017094:	69ab      	ldr	r3, [r5, #24]
 8017096:	b913      	cbnz	r3, 801709e <__swsetup_r+0x16>
 8017098:	4628      	mov	r0, r5
 801709a:	f001 f825 	bl	80180e8 <__sinit>
 801709e:	4b2e      	ldr	r3, [pc, #184]	; (8017158 <__swsetup_r+0xd0>)
 80170a0:	429c      	cmp	r4, r3
 80170a2:	d10f      	bne.n	80170c4 <__swsetup_r+0x3c>
 80170a4:	686c      	ldr	r4, [r5, #4]
 80170a6:	89a3      	ldrh	r3, [r4, #12]
 80170a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170ac:	0719      	lsls	r1, r3, #28
 80170ae:	d42c      	bmi.n	801710a <__swsetup_r+0x82>
 80170b0:	06dd      	lsls	r5, r3, #27
 80170b2:	d411      	bmi.n	80170d8 <__swsetup_r+0x50>
 80170b4:	2309      	movs	r3, #9
 80170b6:	6033      	str	r3, [r6, #0]
 80170b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80170bc:	81a3      	strh	r3, [r4, #12]
 80170be:	f04f 30ff 	mov.w	r0, #4294967295
 80170c2:	e03e      	b.n	8017142 <__swsetup_r+0xba>
 80170c4:	4b25      	ldr	r3, [pc, #148]	; (801715c <__swsetup_r+0xd4>)
 80170c6:	429c      	cmp	r4, r3
 80170c8:	d101      	bne.n	80170ce <__swsetup_r+0x46>
 80170ca:	68ac      	ldr	r4, [r5, #8]
 80170cc:	e7eb      	b.n	80170a6 <__swsetup_r+0x1e>
 80170ce:	4b24      	ldr	r3, [pc, #144]	; (8017160 <__swsetup_r+0xd8>)
 80170d0:	429c      	cmp	r4, r3
 80170d2:	bf08      	it	eq
 80170d4:	68ec      	ldreq	r4, [r5, #12]
 80170d6:	e7e6      	b.n	80170a6 <__swsetup_r+0x1e>
 80170d8:	0758      	lsls	r0, r3, #29
 80170da:	d512      	bpl.n	8017102 <__swsetup_r+0x7a>
 80170dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170de:	b141      	cbz	r1, 80170f2 <__swsetup_r+0x6a>
 80170e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170e4:	4299      	cmp	r1, r3
 80170e6:	d002      	beq.n	80170ee <__swsetup_r+0x66>
 80170e8:	4630      	mov	r0, r6
 80170ea:	f7fd fe83 	bl	8014df4 <_free_r>
 80170ee:	2300      	movs	r3, #0
 80170f0:	6363      	str	r3, [r4, #52]	; 0x34
 80170f2:	89a3      	ldrh	r3, [r4, #12]
 80170f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80170f8:	81a3      	strh	r3, [r4, #12]
 80170fa:	2300      	movs	r3, #0
 80170fc:	6063      	str	r3, [r4, #4]
 80170fe:	6923      	ldr	r3, [r4, #16]
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	89a3      	ldrh	r3, [r4, #12]
 8017104:	f043 0308 	orr.w	r3, r3, #8
 8017108:	81a3      	strh	r3, [r4, #12]
 801710a:	6923      	ldr	r3, [r4, #16]
 801710c:	b94b      	cbnz	r3, 8017122 <__swsetup_r+0x9a>
 801710e:	89a3      	ldrh	r3, [r4, #12]
 8017110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017118:	d003      	beq.n	8017122 <__swsetup_r+0x9a>
 801711a:	4621      	mov	r1, r4
 801711c:	4630      	mov	r0, r6
 801711e:	f001 fc79 	bl	8018a14 <__smakebuf_r>
 8017122:	89a0      	ldrh	r0, [r4, #12]
 8017124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017128:	f010 0301 	ands.w	r3, r0, #1
 801712c:	d00a      	beq.n	8017144 <__swsetup_r+0xbc>
 801712e:	2300      	movs	r3, #0
 8017130:	60a3      	str	r3, [r4, #8]
 8017132:	6963      	ldr	r3, [r4, #20]
 8017134:	425b      	negs	r3, r3
 8017136:	61a3      	str	r3, [r4, #24]
 8017138:	6923      	ldr	r3, [r4, #16]
 801713a:	b943      	cbnz	r3, 801714e <__swsetup_r+0xc6>
 801713c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017140:	d1ba      	bne.n	80170b8 <__swsetup_r+0x30>
 8017142:	bd70      	pop	{r4, r5, r6, pc}
 8017144:	0781      	lsls	r1, r0, #30
 8017146:	bf58      	it	pl
 8017148:	6963      	ldrpl	r3, [r4, #20]
 801714a:	60a3      	str	r3, [r4, #8]
 801714c:	e7f4      	b.n	8017138 <__swsetup_r+0xb0>
 801714e:	2000      	movs	r0, #0
 8017150:	e7f7      	b.n	8017142 <__swsetup_r+0xba>
 8017152:	bf00      	nop
 8017154:	20000248 	.word	0x20000248
 8017158:	08073454 	.word	0x08073454
 801715c:	08073474 	.word	0x08073474
 8017160:	08073434 	.word	0x08073434

08017164 <abort>:
 8017164:	b508      	push	{r3, lr}
 8017166:	2006      	movs	r0, #6
 8017168:	f002 fece 	bl	8019f08 <raise>
 801716c:	2001      	movs	r0, #1
 801716e:	f7ed fc61 	bl	8004a34 <_exit>
	...

08017174 <_close_r>:
 8017174:	b538      	push	{r3, r4, r5, lr}
 8017176:	4d06      	ldr	r5, [pc, #24]	; (8017190 <_close_r+0x1c>)
 8017178:	2300      	movs	r3, #0
 801717a:	4604      	mov	r4, r0
 801717c:	4608      	mov	r0, r1
 801717e:	602b      	str	r3, [r5, #0]
 8017180:	f7ed fc9b 	bl	8004aba <_close>
 8017184:	1c43      	adds	r3, r0, #1
 8017186:	d102      	bne.n	801718e <_close_r+0x1a>
 8017188:	682b      	ldr	r3, [r5, #0]
 801718a:	b103      	cbz	r3, 801718e <_close_r+0x1a>
 801718c:	6023      	str	r3, [r4, #0]
 801718e:	bd38      	pop	{r3, r4, r5, pc}
 8017190:	20005da8 	.word	0x20005da8

08017194 <div>:
 8017194:	2900      	cmp	r1, #0
 8017196:	b510      	push	{r4, lr}
 8017198:	fb91 f4f2 	sdiv	r4, r1, r2
 801719c:	fb02 1314 	mls	r3, r2, r4, r1
 80171a0:	db06      	blt.n	80171b0 <div+0x1c>
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	da01      	bge.n	80171aa <div+0x16>
 80171a6:	3401      	adds	r4, #1
 80171a8:	1a9b      	subs	r3, r3, r2
 80171aa:	e9c0 4300 	strd	r4, r3, [r0]
 80171ae:	bd10      	pop	{r4, pc}
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	bfc4      	itt	gt
 80171b4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80171b8:	189b      	addgt	r3, r3, r2
 80171ba:	e7f6      	b.n	80171aa <div+0x16>

080171bc <quorem>:
 80171bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c0:	6903      	ldr	r3, [r0, #16]
 80171c2:	690c      	ldr	r4, [r1, #16]
 80171c4:	42a3      	cmp	r3, r4
 80171c6:	4607      	mov	r7, r0
 80171c8:	f2c0 8081 	blt.w	80172ce <quorem+0x112>
 80171cc:	3c01      	subs	r4, #1
 80171ce:	f101 0814 	add.w	r8, r1, #20
 80171d2:	f100 0514 	add.w	r5, r0, #20
 80171d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171da:	9301      	str	r3, [sp, #4]
 80171dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171e4:	3301      	adds	r3, #1
 80171e6:	429a      	cmp	r2, r3
 80171e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80171ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80171f4:	d331      	bcc.n	801725a <quorem+0x9e>
 80171f6:	f04f 0e00 	mov.w	lr, #0
 80171fa:	4640      	mov	r0, r8
 80171fc:	46ac      	mov	ip, r5
 80171fe:	46f2      	mov	sl, lr
 8017200:	f850 2b04 	ldr.w	r2, [r0], #4
 8017204:	b293      	uxth	r3, r2
 8017206:	fb06 e303 	mla	r3, r6, r3, lr
 801720a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801720e:	b29b      	uxth	r3, r3
 8017210:	ebaa 0303 	sub.w	r3, sl, r3
 8017214:	f8dc a000 	ldr.w	sl, [ip]
 8017218:	0c12      	lsrs	r2, r2, #16
 801721a:	fa13 f38a 	uxtah	r3, r3, sl
 801721e:	fb06 e202 	mla	r2, r6, r2, lr
 8017222:	9300      	str	r3, [sp, #0]
 8017224:	9b00      	ldr	r3, [sp, #0]
 8017226:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801722a:	b292      	uxth	r2, r2
 801722c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017234:	f8bd 3000 	ldrh.w	r3, [sp]
 8017238:	4581      	cmp	r9, r0
 801723a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801723e:	f84c 3b04 	str.w	r3, [ip], #4
 8017242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017246:	d2db      	bcs.n	8017200 <quorem+0x44>
 8017248:	f855 300b 	ldr.w	r3, [r5, fp]
 801724c:	b92b      	cbnz	r3, 801725a <quorem+0x9e>
 801724e:	9b01      	ldr	r3, [sp, #4]
 8017250:	3b04      	subs	r3, #4
 8017252:	429d      	cmp	r5, r3
 8017254:	461a      	mov	r2, r3
 8017256:	d32e      	bcc.n	80172b6 <quorem+0xfa>
 8017258:	613c      	str	r4, [r7, #16]
 801725a:	4638      	mov	r0, r7
 801725c:	f001 ff1e 	bl	801909c <__mcmp>
 8017260:	2800      	cmp	r0, #0
 8017262:	db24      	blt.n	80172ae <quorem+0xf2>
 8017264:	3601      	adds	r6, #1
 8017266:	4628      	mov	r0, r5
 8017268:	f04f 0c00 	mov.w	ip, #0
 801726c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017270:	f8d0 e000 	ldr.w	lr, [r0]
 8017274:	b293      	uxth	r3, r2
 8017276:	ebac 0303 	sub.w	r3, ip, r3
 801727a:	0c12      	lsrs	r2, r2, #16
 801727c:	fa13 f38e 	uxtah	r3, r3, lr
 8017280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017288:	b29b      	uxth	r3, r3
 801728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801728e:	45c1      	cmp	r9, r8
 8017290:	f840 3b04 	str.w	r3, [r0], #4
 8017294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017298:	d2e8      	bcs.n	801726c <quorem+0xb0>
 801729a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801729e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172a2:	b922      	cbnz	r2, 80172ae <quorem+0xf2>
 80172a4:	3b04      	subs	r3, #4
 80172a6:	429d      	cmp	r5, r3
 80172a8:	461a      	mov	r2, r3
 80172aa:	d30a      	bcc.n	80172c2 <quorem+0x106>
 80172ac:	613c      	str	r4, [r7, #16]
 80172ae:	4630      	mov	r0, r6
 80172b0:	b003      	add	sp, #12
 80172b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b6:	6812      	ldr	r2, [r2, #0]
 80172b8:	3b04      	subs	r3, #4
 80172ba:	2a00      	cmp	r2, #0
 80172bc:	d1cc      	bne.n	8017258 <quorem+0x9c>
 80172be:	3c01      	subs	r4, #1
 80172c0:	e7c7      	b.n	8017252 <quorem+0x96>
 80172c2:	6812      	ldr	r2, [r2, #0]
 80172c4:	3b04      	subs	r3, #4
 80172c6:	2a00      	cmp	r2, #0
 80172c8:	d1f0      	bne.n	80172ac <quorem+0xf0>
 80172ca:	3c01      	subs	r4, #1
 80172cc:	e7eb      	b.n	80172a6 <quorem+0xea>
 80172ce:	2000      	movs	r0, #0
 80172d0:	e7ee      	b.n	80172b0 <quorem+0xf4>
 80172d2:	0000      	movs	r0, r0
 80172d4:	0000      	movs	r0, r0
	...

080172d8 <_dtoa_r>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	ed2d 8b04 	vpush	{d8-d9}
 80172e0:	ec57 6b10 	vmov	r6, r7, d0
 80172e4:	b093      	sub	sp, #76	; 0x4c
 80172e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80172e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80172ec:	9106      	str	r1, [sp, #24]
 80172ee:	ee10 aa10 	vmov	sl, s0
 80172f2:	4604      	mov	r4, r0
 80172f4:	9209      	str	r2, [sp, #36]	; 0x24
 80172f6:	930c      	str	r3, [sp, #48]	; 0x30
 80172f8:	46bb      	mov	fp, r7
 80172fa:	b975      	cbnz	r5, 801731a <_dtoa_r+0x42>
 80172fc:	2010      	movs	r0, #16
 80172fe:	f7fd fae1 	bl	80148c4 <malloc>
 8017302:	4602      	mov	r2, r0
 8017304:	6260      	str	r0, [r4, #36]	; 0x24
 8017306:	b920      	cbnz	r0, 8017312 <_dtoa_r+0x3a>
 8017308:	4ba7      	ldr	r3, [pc, #668]	; (80175a8 <_dtoa_r+0x2d0>)
 801730a:	21ea      	movs	r1, #234	; 0xea
 801730c:	48a7      	ldr	r0, [pc, #668]	; (80175ac <_dtoa_r+0x2d4>)
 801730e:	f7fd fa77 	bl	8014800 <__assert_func>
 8017312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017316:	6005      	str	r5, [r0, #0]
 8017318:	60c5      	str	r5, [r0, #12]
 801731a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801731c:	6819      	ldr	r1, [r3, #0]
 801731e:	b151      	cbz	r1, 8017336 <_dtoa_r+0x5e>
 8017320:	685a      	ldr	r2, [r3, #4]
 8017322:	604a      	str	r2, [r1, #4]
 8017324:	2301      	movs	r3, #1
 8017326:	4093      	lsls	r3, r2
 8017328:	608b      	str	r3, [r1, #8]
 801732a:	4620      	mov	r0, r4
 801732c:	f001 fc2a 	bl	8018b84 <_Bfree>
 8017330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017332:	2200      	movs	r2, #0
 8017334:	601a      	str	r2, [r3, #0]
 8017336:	1e3b      	subs	r3, r7, #0
 8017338:	bfaa      	itet	ge
 801733a:	2300      	movge	r3, #0
 801733c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017340:	f8c8 3000 	strge.w	r3, [r8]
 8017344:	4b9a      	ldr	r3, [pc, #616]	; (80175b0 <_dtoa_r+0x2d8>)
 8017346:	bfbc      	itt	lt
 8017348:	2201      	movlt	r2, #1
 801734a:	f8c8 2000 	strlt.w	r2, [r8]
 801734e:	ea33 030b 	bics.w	r3, r3, fp
 8017352:	d11b      	bne.n	801738c <_dtoa_r+0xb4>
 8017354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017356:	f242 730f 	movw	r3, #9999	; 0x270f
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017360:	4333      	orrs	r3, r6
 8017362:	f000 8592 	beq.w	8017e8a <_dtoa_r+0xbb2>
 8017366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017368:	b963      	cbnz	r3, 8017384 <_dtoa_r+0xac>
 801736a:	4b92      	ldr	r3, [pc, #584]	; (80175b4 <_dtoa_r+0x2dc>)
 801736c:	e022      	b.n	80173b4 <_dtoa_r+0xdc>
 801736e:	4b92      	ldr	r3, [pc, #584]	; (80175b8 <_dtoa_r+0x2e0>)
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	3308      	adds	r3, #8
 8017374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017376:	6013      	str	r3, [r2, #0]
 8017378:	9801      	ldr	r0, [sp, #4]
 801737a:	b013      	add	sp, #76	; 0x4c
 801737c:	ecbd 8b04 	vpop	{d8-d9}
 8017380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017384:	4b8b      	ldr	r3, [pc, #556]	; (80175b4 <_dtoa_r+0x2dc>)
 8017386:	9301      	str	r3, [sp, #4]
 8017388:	3303      	adds	r3, #3
 801738a:	e7f3      	b.n	8017374 <_dtoa_r+0x9c>
 801738c:	2200      	movs	r2, #0
 801738e:	2300      	movs	r3, #0
 8017390:	4650      	mov	r0, sl
 8017392:	4659      	mov	r1, fp
 8017394:	f7e9 fbb8 	bl	8000b08 <__aeabi_dcmpeq>
 8017398:	ec4b ab19 	vmov	d9, sl, fp
 801739c:	4680      	mov	r8, r0
 801739e:	b158      	cbz	r0, 80173b8 <_dtoa_r+0xe0>
 80173a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173a2:	2301      	movs	r3, #1
 80173a4:	6013      	str	r3, [r2, #0]
 80173a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	f000 856b 	beq.w	8017e84 <_dtoa_r+0xbac>
 80173ae:	4883      	ldr	r0, [pc, #524]	; (80175bc <_dtoa_r+0x2e4>)
 80173b0:	6018      	str	r0, [r3, #0]
 80173b2:	1e43      	subs	r3, r0, #1
 80173b4:	9301      	str	r3, [sp, #4]
 80173b6:	e7df      	b.n	8017378 <_dtoa_r+0xa0>
 80173b8:	ec4b ab10 	vmov	d0, sl, fp
 80173bc:	aa10      	add	r2, sp, #64	; 0x40
 80173be:	a911      	add	r1, sp, #68	; 0x44
 80173c0:	4620      	mov	r0, r4
 80173c2:	f001 ff8d 	bl	80192e0 <__d2b>
 80173c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80173ca:	ee08 0a10 	vmov	s16, r0
 80173ce:	2d00      	cmp	r5, #0
 80173d0:	f000 8084 	beq.w	80174dc <_dtoa_r+0x204>
 80173d4:	ee19 3a90 	vmov	r3, s19
 80173d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80173e0:	4656      	mov	r6, sl
 80173e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80173e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80173ee:	4b74      	ldr	r3, [pc, #464]	; (80175c0 <_dtoa_r+0x2e8>)
 80173f0:	2200      	movs	r2, #0
 80173f2:	4630      	mov	r0, r6
 80173f4:	4639      	mov	r1, r7
 80173f6:	f7e8 ff67 	bl	80002c8 <__aeabi_dsub>
 80173fa:	a365      	add	r3, pc, #404	; (adr r3, 8017590 <_dtoa_r+0x2b8>)
 80173fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017400:	f7e9 f91a 	bl	8000638 <__aeabi_dmul>
 8017404:	a364      	add	r3, pc, #400	; (adr r3, 8017598 <_dtoa_r+0x2c0>)
 8017406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740a:	f7e8 ff5f 	bl	80002cc <__adddf3>
 801740e:	4606      	mov	r6, r0
 8017410:	4628      	mov	r0, r5
 8017412:	460f      	mov	r7, r1
 8017414:	f7e9 f8a6 	bl	8000564 <__aeabi_i2d>
 8017418:	a361      	add	r3, pc, #388	; (adr r3, 80175a0 <_dtoa_r+0x2c8>)
 801741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801741e:	f7e9 f90b 	bl	8000638 <__aeabi_dmul>
 8017422:	4602      	mov	r2, r0
 8017424:	460b      	mov	r3, r1
 8017426:	4630      	mov	r0, r6
 8017428:	4639      	mov	r1, r7
 801742a:	f7e8 ff4f 	bl	80002cc <__adddf3>
 801742e:	4606      	mov	r6, r0
 8017430:	460f      	mov	r7, r1
 8017432:	f7e9 fbb1 	bl	8000b98 <__aeabi_d2iz>
 8017436:	2200      	movs	r2, #0
 8017438:	9000      	str	r0, [sp, #0]
 801743a:	2300      	movs	r3, #0
 801743c:	4630      	mov	r0, r6
 801743e:	4639      	mov	r1, r7
 8017440:	f7e9 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8017444:	b150      	cbz	r0, 801745c <_dtoa_r+0x184>
 8017446:	9800      	ldr	r0, [sp, #0]
 8017448:	f7e9 f88c 	bl	8000564 <__aeabi_i2d>
 801744c:	4632      	mov	r2, r6
 801744e:	463b      	mov	r3, r7
 8017450:	f7e9 fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8017454:	b910      	cbnz	r0, 801745c <_dtoa_r+0x184>
 8017456:	9b00      	ldr	r3, [sp, #0]
 8017458:	3b01      	subs	r3, #1
 801745a:	9300      	str	r3, [sp, #0]
 801745c:	9b00      	ldr	r3, [sp, #0]
 801745e:	2b16      	cmp	r3, #22
 8017460:	d85a      	bhi.n	8017518 <_dtoa_r+0x240>
 8017462:	9a00      	ldr	r2, [sp, #0]
 8017464:	4b57      	ldr	r3, [pc, #348]	; (80175c4 <_dtoa_r+0x2ec>)
 8017466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746e:	ec51 0b19 	vmov	r0, r1, d9
 8017472:	f7e9 fb53 	bl	8000b1c <__aeabi_dcmplt>
 8017476:	2800      	cmp	r0, #0
 8017478:	d050      	beq.n	801751c <_dtoa_r+0x244>
 801747a:	9b00      	ldr	r3, [sp, #0]
 801747c:	3b01      	subs	r3, #1
 801747e:	9300      	str	r3, [sp, #0]
 8017480:	2300      	movs	r3, #0
 8017482:	930b      	str	r3, [sp, #44]	; 0x2c
 8017484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017486:	1b5d      	subs	r5, r3, r5
 8017488:	1e6b      	subs	r3, r5, #1
 801748a:	9305      	str	r3, [sp, #20]
 801748c:	bf45      	ittet	mi
 801748e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017492:	9304      	strmi	r3, [sp, #16]
 8017494:	2300      	movpl	r3, #0
 8017496:	2300      	movmi	r3, #0
 8017498:	bf4c      	ite	mi
 801749a:	9305      	strmi	r3, [sp, #20]
 801749c:	9304      	strpl	r3, [sp, #16]
 801749e:	9b00      	ldr	r3, [sp, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	db3d      	blt.n	8017520 <_dtoa_r+0x248>
 80174a4:	9b05      	ldr	r3, [sp, #20]
 80174a6:	9a00      	ldr	r2, [sp, #0]
 80174a8:	920a      	str	r2, [sp, #40]	; 0x28
 80174aa:	4413      	add	r3, r2
 80174ac:	9305      	str	r3, [sp, #20]
 80174ae:	2300      	movs	r3, #0
 80174b0:	9307      	str	r3, [sp, #28]
 80174b2:	9b06      	ldr	r3, [sp, #24]
 80174b4:	2b09      	cmp	r3, #9
 80174b6:	f200 8089 	bhi.w	80175cc <_dtoa_r+0x2f4>
 80174ba:	2b05      	cmp	r3, #5
 80174bc:	bfc4      	itt	gt
 80174be:	3b04      	subgt	r3, #4
 80174c0:	9306      	strgt	r3, [sp, #24]
 80174c2:	9b06      	ldr	r3, [sp, #24]
 80174c4:	f1a3 0302 	sub.w	r3, r3, #2
 80174c8:	bfcc      	ite	gt
 80174ca:	2500      	movgt	r5, #0
 80174cc:	2501      	movle	r5, #1
 80174ce:	2b03      	cmp	r3, #3
 80174d0:	f200 8087 	bhi.w	80175e2 <_dtoa_r+0x30a>
 80174d4:	e8df f003 	tbb	[pc, r3]
 80174d8:	59383a2d 	.word	0x59383a2d
 80174dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80174e0:	441d      	add	r5, r3
 80174e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80174e6:	2b20      	cmp	r3, #32
 80174e8:	bfc1      	itttt	gt
 80174ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80174ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80174f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80174f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80174fa:	bfda      	itte	le
 80174fc:	f1c3 0320 	rsble	r3, r3, #32
 8017500:	fa06 f003 	lslle.w	r0, r6, r3
 8017504:	4318      	orrgt	r0, r3
 8017506:	f7e9 f81d 	bl	8000544 <__aeabi_ui2d>
 801750a:	2301      	movs	r3, #1
 801750c:	4606      	mov	r6, r0
 801750e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017512:	3d01      	subs	r5, #1
 8017514:	930e      	str	r3, [sp, #56]	; 0x38
 8017516:	e76a      	b.n	80173ee <_dtoa_r+0x116>
 8017518:	2301      	movs	r3, #1
 801751a:	e7b2      	b.n	8017482 <_dtoa_r+0x1aa>
 801751c:	900b      	str	r0, [sp, #44]	; 0x2c
 801751e:	e7b1      	b.n	8017484 <_dtoa_r+0x1ac>
 8017520:	9b04      	ldr	r3, [sp, #16]
 8017522:	9a00      	ldr	r2, [sp, #0]
 8017524:	1a9b      	subs	r3, r3, r2
 8017526:	9304      	str	r3, [sp, #16]
 8017528:	4253      	negs	r3, r2
 801752a:	9307      	str	r3, [sp, #28]
 801752c:	2300      	movs	r3, #0
 801752e:	930a      	str	r3, [sp, #40]	; 0x28
 8017530:	e7bf      	b.n	80174b2 <_dtoa_r+0x1da>
 8017532:	2300      	movs	r3, #0
 8017534:	9308      	str	r3, [sp, #32]
 8017536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017538:	2b00      	cmp	r3, #0
 801753a:	dc55      	bgt.n	80175e8 <_dtoa_r+0x310>
 801753c:	2301      	movs	r3, #1
 801753e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017542:	461a      	mov	r2, r3
 8017544:	9209      	str	r2, [sp, #36]	; 0x24
 8017546:	e00c      	b.n	8017562 <_dtoa_r+0x28a>
 8017548:	2301      	movs	r3, #1
 801754a:	e7f3      	b.n	8017534 <_dtoa_r+0x25c>
 801754c:	2300      	movs	r3, #0
 801754e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017550:	9308      	str	r3, [sp, #32]
 8017552:	9b00      	ldr	r3, [sp, #0]
 8017554:	4413      	add	r3, r2
 8017556:	9302      	str	r3, [sp, #8]
 8017558:	3301      	adds	r3, #1
 801755a:	2b01      	cmp	r3, #1
 801755c:	9303      	str	r3, [sp, #12]
 801755e:	bfb8      	it	lt
 8017560:	2301      	movlt	r3, #1
 8017562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017564:	2200      	movs	r2, #0
 8017566:	6042      	str	r2, [r0, #4]
 8017568:	2204      	movs	r2, #4
 801756a:	f102 0614 	add.w	r6, r2, #20
 801756e:	429e      	cmp	r6, r3
 8017570:	6841      	ldr	r1, [r0, #4]
 8017572:	d93d      	bls.n	80175f0 <_dtoa_r+0x318>
 8017574:	4620      	mov	r0, r4
 8017576:	f001 fac5 	bl	8018b04 <_Balloc>
 801757a:	9001      	str	r0, [sp, #4]
 801757c:	2800      	cmp	r0, #0
 801757e:	d13b      	bne.n	80175f8 <_dtoa_r+0x320>
 8017580:	4b11      	ldr	r3, [pc, #68]	; (80175c8 <_dtoa_r+0x2f0>)
 8017582:	4602      	mov	r2, r0
 8017584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017588:	e6c0      	b.n	801730c <_dtoa_r+0x34>
 801758a:	2301      	movs	r3, #1
 801758c:	e7df      	b.n	801754e <_dtoa_r+0x276>
 801758e:	bf00      	nop
 8017590:	636f4361 	.word	0x636f4361
 8017594:	3fd287a7 	.word	0x3fd287a7
 8017598:	8b60c8b3 	.word	0x8b60c8b3
 801759c:	3fc68a28 	.word	0x3fc68a28
 80175a0:	509f79fb 	.word	0x509f79fb
 80175a4:	3fd34413 	.word	0x3fd34413
 80175a8:	0807301c 	.word	0x0807301c
 80175ac:	080733c7 	.word	0x080733c7
 80175b0:	7ff00000 	.word	0x7ff00000
 80175b4:	080733c3 	.word	0x080733c3
 80175b8:	080733ba 	.word	0x080733ba
 80175bc:	080736d1 	.word	0x080736d1
 80175c0:	3ff80000 	.word	0x3ff80000
 80175c4:	080735f8 	.word	0x080735f8
 80175c8:	08073422 	.word	0x08073422
 80175cc:	2501      	movs	r5, #1
 80175ce:	2300      	movs	r3, #0
 80175d0:	9306      	str	r3, [sp, #24]
 80175d2:	9508      	str	r5, [sp, #32]
 80175d4:	f04f 33ff 	mov.w	r3, #4294967295
 80175d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80175dc:	2200      	movs	r2, #0
 80175de:	2312      	movs	r3, #18
 80175e0:	e7b0      	b.n	8017544 <_dtoa_r+0x26c>
 80175e2:	2301      	movs	r3, #1
 80175e4:	9308      	str	r3, [sp, #32]
 80175e6:	e7f5      	b.n	80175d4 <_dtoa_r+0x2fc>
 80175e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80175ee:	e7b8      	b.n	8017562 <_dtoa_r+0x28a>
 80175f0:	3101      	adds	r1, #1
 80175f2:	6041      	str	r1, [r0, #4]
 80175f4:	0052      	lsls	r2, r2, #1
 80175f6:	e7b8      	b.n	801756a <_dtoa_r+0x292>
 80175f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175fa:	9a01      	ldr	r2, [sp, #4]
 80175fc:	601a      	str	r2, [r3, #0]
 80175fe:	9b03      	ldr	r3, [sp, #12]
 8017600:	2b0e      	cmp	r3, #14
 8017602:	f200 809d 	bhi.w	8017740 <_dtoa_r+0x468>
 8017606:	2d00      	cmp	r5, #0
 8017608:	f000 809a 	beq.w	8017740 <_dtoa_r+0x468>
 801760c:	9b00      	ldr	r3, [sp, #0]
 801760e:	2b00      	cmp	r3, #0
 8017610:	dd32      	ble.n	8017678 <_dtoa_r+0x3a0>
 8017612:	4ab7      	ldr	r2, [pc, #732]	; (80178f0 <_dtoa_r+0x618>)
 8017614:	f003 030f 	and.w	r3, r3, #15
 8017618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801761c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017620:	9b00      	ldr	r3, [sp, #0]
 8017622:	05d8      	lsls	r0, r3, #23
 8017624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017628:	d516      	bpl.n	8017658 <_dtoa_r+0x380>
 801762a:	4bb2      	ldr	r3, [pc, #712]	; (80178f4 <_dtoa_r+0x61c>)
 801762c:	ec51 0b19 	vmov	r0, r1, d9
 8017630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017634:	f7e9 f92a 	bl	800088c <__aeabi_ddiv>
 8017638:	f007 070f 	and.w	r7, r7, #15
 801763c:	4682      	mov	sl, r0
 801763e:	468b      	mov	fp, r1
 8017640:	2503      	movs	r5, #3
 8017642:	4eac      	ldr	r6, [pc, #688]	; (80178f4 <_dtoa_r+0x61c>)
 8017644:	b957      	cbnz	r7, 801765c <_dtoa_r+0x384>
 8017646:	4642      	mov	r2, r8
 8017648:	464b      	mov	r3, r9
 801764a:	4650      	mov	r0, sl
 801764c:	4659      	mov	r1, fp
 801764e:	f7e9 f91d 	bl	800088c <__aeabi_ddiv>
 8017652:	4682      	mov	sl, r0
 8017654:	468b      	mov	fp, r1
 8017656:	e028      	b.n	80176aa <_dtoa_r+0x3d2>
 8017658:	2502      	movs	r5, #2
 801765a:	e7f2      	b.n	8017642 <_dtoa_r+0x36a>
 801765c:	07f9      	lsls	r1, r7, #31
 801765e:	d508      	bpl.n	8017672 <_dtoa_r+0x39a>
 8017660:	4640      	mov	r0, r8
 8017662:	4649      	mov	r1, r9
 8017664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017668:	f7e8 ffe6 	bl	8000638 <__aeabi_dmul>
 801766c:	3501      	adds	r5, #1
 801766e:	4680      	mov	r8, r0
 8017670:	4689      	mov	r9, r1
 8017672:	107f      	asrs	r7, r7, #1
 8017674:	3608      	adds	r6, #8
 8017676:	e7e5      	b.n	8017644 <_dtoa_r+0x36c>
 8017678:	f000 809b 	beq.w	80177b2 <_dtoa_r+0x4da>
 801767c:	9b00      	ldr	r3, [sp, #0]
 801767e:	4f9d      	ldr	r7, [pc, #628]	; (80178f4 <_dtoa_r+0x61c>)
 8017680:	425e      	negs	r6, r3
 8017682:	4b9b      	ldr	r3, [pc, #620]	; (80178f0 <_dtoa_r+0x618>)
 8017684:	f006 020f 	and.w	r2, r6, #15
 8017688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017690:	ec51 0b19 	vmov	r0, r1, d9
 8017694:	f7e8 ffd0 	bl	8000638 <__aeabi_dmul>
 8017698:	1136      	asrs	r6, r6, #4
 801769a:	4682      	mov	sl, r0
 801769c:	468b      	mov	fp, r1
 801769e:	2300      	movs	r3, #0
 80176a0:	2502      	movs	r5, #2
 80176a2:	2e00      	cmp	r6, #0
 80176a4:	d17a      	bne.n	801779c <_dtoa_r+0x4c4>
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d1d3      	bne.n	8017652 <_dtoa_r+0x37a>
 80176aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 8082 	beq.w	80177b6 <_dtoa_r+0x4de>
 80176b2:	4b91      	ldr	r3, [pc, #580]	; (80178f8 <_dtoa_r+0x620>)
 80176b4:	2200      	movs	r2, #0
 80176b6:	4650      	mov	r0, sl
 80176b8:	4659      	mov	r1, fp
 80176ba:	f7e9 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 80176be:	2800      	cmp	r0, #0
 80176c0:	d079      	beq.n	80177b6 <_dtoa_r+0x4de>
 80176c2:	9b03      	ldr	r3, [sp, #12]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d076      	beq.n	80177b6 <_dtoa_r+0x4de>
 80176c8:	9b02      	ldr	r3, [sp, #8]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	dd36      	ble.n	801773c <_dtoa_r+0x464>
 80176ce:	9b00      	ldr	r3, [sp, #0]
 80176d0:	4650      	mov	r0, sl
 80176d2:	4659      	mov	r1, fp
 80176d4:	1e5f      	subs	r7, r3, #1
 80176d6:	2200      	movs	r2, #0
 80176d8:	4b88      	ldr	r3, [pc, #544]	; (80178fc <_dtoa_r+0x624>)
 80176da:	f7e8 ffad 	bl	8000638 <__aeabi_dmul>
 80176de:	9e02      	ldr	r6, [sp, #8]
 80176e0:	4682      	mov	sl, r0
 80176e2:	468b      	mov	fp, r1
 80176e4:	3501      	adds	r5, #1
 80176e6:	4628      	mov	r0, r5
 80176e8:	f7e8 ff3c 	bl	8000564 <__aeabi_i2d>
 80176ec:	4652      	mov	r2, sl
 80176ee:	465b      	mov	r3, fp
 80176f0:	f7e8 ffa2 	bl	8000638 <__aeabi_dmul>
 80176f4:	4b82      	ldr	r3, [pc, #520]	; (8017900 <_dtoa_r+0x628>)
 80176f6:	2200      	movs	r2, #0
 80176f8:	f7e8 fde8 	bl	80002cc <__adddf3>
 80176fc:	46d0      	mov	r8, sl
 80176fe:	46d9      	mov	r9, fp
 8017700:	4682      	mov	sl, r0
 8017702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017706:	2e00      	cmp	r6, #0
 8017708:	d158      	bne.n	80177bc <_dtoa_r+0x4e4>
 801770a:	4b7e      	ldr	r3, [pc, #504]	; (8017904 <_dtoa_r+0x62c>)
 801770c:	2200      	movs	r2, #0
 801770e:	4640      	mov	r0, r8
 8017710:	4649      	mov	r1, r9
 8017712:	f7e8 fdd9 	bl	80002c8 <__aeabi_dsub>
 8017716:	4652      	mov	r2, sl
 8017718:	465b      	mov	r3, fp
 801771a:	4680      	mov	r8, r0
 801771c:	4689      	mov	r9, r1
 801771e:	f7e9 fa1b 	bl	8000b58 <__aeabi_dcmpgt>
 8017722:	2800      	cmp	r0, #0
 8017724:	f040 8295 	bne.w	8017c52 <_dtoa_r+0x97a>
 8017728:	4652      	mov	r2, sl
 801772a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801772e:	4640      	mov	r0, r8
 8017730:	4649      	mov	r1, r9
 8017732:	f7e9 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8017736:	2800      	cmp	r0, #0
 8017738:	f040 8289 	bne.w	8017c4e <_dtoa_r+0x976>
 801773c:	ec5b ab19 	vmov	sl, fp, d9
 8017740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017742:	2b00      	cmp	r3, #0
 8017744:	f2c0 8148 	blt.w	80179d8 <_dtoa_r+0x700>
 8017748:	9a00      	ldr	r2, [sp, #0]
 801774a:	2a0e      	cmp	r2, #14
 801774c:	f300 8144 	bgt.w	80179d8 <_dtoa_r+0x700>
 8017750:	4b67      	ldr	r3, [pc, #412]	; (80178f0 <_dtoa_r+0x618>)
 8017752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017756:	e9d3 8900 	ldrd	r8, r9, [r3]
 801775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801775c:	2b00      	cmp	r3, #0
 801775e:	f280 80d5 	bge.w	801790c <_dtoa_r+0x634>
 8017762:	9b03      	ldr	r3, [sp, #12]
 8017764:	2b00      	cmp	r3, #0
 8017766:	f300 80d1 	bgt.w	801790c <_dtoa_r+0x634>
 801776a:	f040 826f 	bne.w	8017c4c <_dtoa_r+0x974>
 801776e:	4b65      	ldr	r3, [pc, #404]	; (8017904 <_dtoa_r+0x62c>)
 8017770:	2200      	movs	r2, #0
 8017772:	4640      	mov	r0, r8
 8017774:	4649      	mov	r1, r9
 8017776:	f7e8 ff5f 	bl	8000638 <__aeabi_dmul>
 801777a:	4652      	mov	r2, sl
 801777c:	465b      	mov	r3, fp
 801777e:	f7e9 f9e1 	bl	8000b44 <__aeabi_dcmpge>
 8017782:	9e03      	ldr	r6, [sp, #12]
 8017784:	4637      	mov	r7, r6
 8017786:	2800      	cmp	r0, #0
 8017788:	f040 8245 	bne.w	8017c16 <_dtoa_r+0x93e>
 801778c:	9d01      	ldr	r5, [sp, #4]
 801778e:	2331      	movs	r3, #49	; 0x31
 8017790:	f805 3b01 	strb.w	r3, [r5], #1
 8017794:	9b00      	ldr	r3, [sp, #0]
 8017796:	3301      	adds	r3, #1
 8017798:	9300      	str	r3, [sp, #0]
 801779a:	e240      	b.n	8017c1e <_dtoa_r+0x946>
 801779c:	07f2      	lsls	r2, r6, #31
 801779e:	d505      	bpl.n	80177ac <_dtoa_r+0x4d4>
 80177a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177a4:	f7e8 ff48 	bl	8000638 <__aeabi_dmul>
 80177a8:	3501      	adds	r5, #1
 80177aa:	2301      	movs	r3, #1
 80177ac:	1076      	asrs	r6, r6, #1
 80177ae:	3708      	adds	r7, #8
 80177b0:	e777      	b.n	80176a2 <_dtoa_r+0x3ca>
 80177b2:	2502      	movs	r5, #2
 80177b4:	e779      	b.n	80176aa <_dtoa_r+0x3d2>
 80177b6:	9f00      	ldr	r7, [sp, #0]
 80177b8:	9e03      	ldr	r6, [sp, #12]
 80177ba:	e794      	b.n	80176e6 <_dtoa_r+0x40e>
 80177bc:	9901      	ldr	r1, [sp, #4]
 80177be:	4b4c      	ldr	r3, [pc, #304]	; (80178f0 <_dtoa_r+0x618>)
 80177c0:	4431      	add	r1, r6
 80177c2:	910d      	str	r1, [sp, #52]	; 0x34
 80177c4:	9908      	ldr	r1, [sp, #32]
 80177c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80177ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80177ce:	2900      	cmp	r1, #0
 80177d0:	d043      	beq.n	801785a <_dtoa_r+0x582>
 80177d2:	494d      	ldr	r1, [pc, #308]	; (8017908 <_dtoa_r+0x630>)
 80177d4:	2000      	movs	r0, #0
 80177d6:	f7e9 f859 	bl	800088c <__aeabi_ddiv>
 80177da:	4652      	mov	r2, sl
 80177dc:	465b      	mov	r3, fp
 80177de:	f7e8 fd73 	bl	80002c8 <__aeabi_dsub>
 80177e2:	9d01      	ldr	r5, [sp, #4]
 80177e4:	4682      	mov	sl, r0
 80177e6:	468b      	mov	fp, r1
 80177e8:	4649      	mov	r1, r9
 80177ea:	4640      	mov	r0, r8
 80177ec:	f7e9 f9d4 	bl	8000b98 <__aeabi_d2iz>
 80177f0:	4606      	mov	r6, r0
 80177f2:	f7e8 feb7 	bl	8000564 <__aeabi_i2d>
 80177f6:	4602      	mov	r2, r0
 80177f8:	460b      	mov	r3, r1
 80177fa:	4640      	mov	r0, r8
 80177fc:	4649      	mov	r1, r9
 80177fe:	f7e8 fd63 	bl	80002c8 <__aeabi_dsub>
 8017802:	3630      	adds	r6, #48	; 0x30
 8017804:	f805 6b01 	strb.w	r6, [r5], #1
 8017808:	4652      	mov	r2, sl
 801780a:	465b      	mov	r3, fp
 801780c:	4680      	mov	r8, r0
 801780e:	4689      	mov	r9, r1
 8017810:	f7e9 f984 	bl	8000b1c <__aeabi_dcmplt>
 8017814:	2800      	cmp	r0, #0
 8017816:	d163      	bne.n	80178e0 <_dtoa_r+0x608>
 8017818:	4642      	mov	r2, r8
 801781a:	464b      	mov	r3, r9
 801781c:	4936      	ldr	r1, [pc, #216]	; (80178f8 <_dtoa_r+0x620>)
 801781e:	2000      	movs	r0, #0
 8017820:	f7e8 fd52 	bl	80002c8 <__aeabi_dsub>
 8017824:	4652      	mov	r2, sl
 8017826:	465b      	mov	r3, fp
 8017828:	f7e9 f978 	bl	8000b1c <__aeabi_dcmplt>
 801782c:	2800      	cmp	r0, #0
 801782e:	f040 80b5 	bne.w	801799c <_dtoa_r+0x6c4>
 8017832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017834:	429d      	cmp	r5, r3
 8017836:	d081      	beq.n	801773c <_dtoa_r+0x464>
 8017838:	4b30      	ldr	r3, [pc, #192]	; (80178fc <_dtoa_r+0x624>)
 801783a:	2200      	movs	r2, #0
 801783c:	4650      	mov	r0, sl
 801783e:	4659      	mov	r1, fp
 8017840:	f7e8 fefa 	bl	8000638 <__aeabi_dmul>
 8017844:	4b2d      	ldr	r3, [pc, #180]	; (80178fc <_dtoa_r+0x624>)
 8017846:	4682      	mov	sl, r0
 8017848:	468b      	mov	fp, r1
 801784a:	4640      	mov	r0, r8
 801784c:	4649      	mov	r1, r9
 801784e:	2200      	movs	r2, #0
 8017850:	f7e8 fef2 	bl	8000638 <__aeabi_dmul>
 8017854:	4680      	mov	r8, r0
 8017856:	4689      	mov	r9, r1
 8017858:	e7c6      	b.n	80177e8 <_dtoa_r+0x510>
 801785a:	4650      	mov	r0, sl
 801785c:	4659      	mov	r1, fp
 801785e:	f7e8 feeb 	bl	8000638 <__aeabi_dmul>
 8017862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017864:	9d01      	ldr	r5, [sp, #4]
 8017866:	930f      	str	r3, [sp, #60]	; 0x3c
 8017868:	4682      	mov	sl, r0
 801786a:	468b      	mov	fp, r1
 801786c:	4649      	mov	r1, r9
 801786e:	4640      	mov	r0, r8
 8017870:	f7e9 f992 	bl	8000b98 <__aeabi_d2iz>
 8017874:	4606      	mov	r6, r0
 8017876:	f7e8 fe75 	bl	8000564 <__aeabi_i2d>
 801787a:	3630      	adds	r6, #48	; 0x30
 801787c:	4602      	mov	r2, r0
 801787e:	460b      	mov	r3, r1
 8017880:	4640      	mov	r0, r8
 8017882:	4649      	mov	r1, r9
 8017884:	f7e8 fd20 	bl	80002c8 <__aeabi_dsub>
 8017888:	f805 6b01 	strb.w	r6, [r5], #1
 801788c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801788e:	429d      	cmp	r5, r3
 8017890:	4680      	mov	r8, r0
 8017892:	4689      	mov	r9, r1
 8017894:	f04f 0200 	mov.w	r2, #0
 8017898:	d124      	bne.n	80178e4 <_dtoa_r+0x60c>
 801789a:	4b1b      	ldr	r3, [pc, #108]	; (8017908 <_dtoa_r+0x630>)
 801789c:	4650      	mov	r0, sl
 801789e:	4659      	mov	r1, fp
 80178a0:	f7e8 fd14 	bl	80002cc <__adddf3>
 80178a4:	4602      	mov	r2, r0
 80178a6:	460b      	mov	r3, r1
 80178a8:	4640      	mov	r0, r8
 80178aa:	4649      	mov	r1, r9
 80178ac:	f7e9 f954 	bl	8000b58 <__aeabi_dcmpgt>
 80178b0:	2800      	cmp	r0, #0
 80178b2:	d173      	bne.n	801799c <_dtoa_r+0x6c4>
 80178b4:	4652      	mov	r2, sl
 80178b6:	465b      	mov	r3, fp
 80178b8:	4913      	ldr	r1, [pc, #76]	; (8017908 <_dtoa_r+0x630>)
 80178ba:	2000      	movs	r0, #0
 80178bc:	f7e8 fd04 	bl	80002c8 <__aeabi_dsub>
 80178c0:	4602      	mov	r2, r0
 80178c2:	460b      	mov	r3, r1
 80178c4:	4640      	mov	r0, r8
 80178c6:	4649      	mov	r1, r9
 80178c8:	f7e9 f928 	bl	8000b1c <__aeabi_dcmplt>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	f43f af35 	beq.w	801773c <_dtoa_r+0x464>
 80178d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80178d4:	1e6b      	subs	r3, r5, #1
 80178d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80178d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178dc:	2b30      	cmp	r3, #48	; 0x30
 80178de:	d0f8      	beq.n	80178d2 <_dtoa_r+0x5fa>
 80178e0:	9700      	str	r7, [sp, #0]
 80178e2:	e049      	b.n	8017978 <_dtoa_r+0x6a0>
 80178e4:	4b05      	ldr	r3, [pc, #20]	; (80178fc <_dtoa_r+0x624>)
 80178e6:	f7e8 fea7 	bl	8000638 <__aeabi_dmul>
 80178ea:	4680      	mov	r8, r0
 80178ec:	4689      	mov	r9, r1
 80178ee:	e7bd      	b.n	801786c <_dtoa_r+0x594>
 80178f0:	080735f8 	.word	0x080735f8
 80178f4:	080735d0 	.word	0x080735d0
 80178f8:	3ff00000 	.word	0x3ff00000
 80178fc:	40240000 	.word	0x40240000
 8017900:	401c0000 	.word	0x401c0000
 8017904:	40140000 	.word	0x40140000
 8017908:	3fe00000 	.word	0x3fe00000
 801790c:	9d01      	ldr	r5, [sp, #4]
 801790e:	4656      	mov	r6, sl
 8017910:	465f      	mov	r7, fp
 8017912:	4642      	mov	r2, r8
 8017914:	464b      	mov	r3, r9
 8017916:	4630      	mov	r0, r6
 8017918:	4639      	mov	r1, r7
 801791a:	f7e8 ffb7 	bl	800088c <__aeabi_ddiv>
 801791e:	f7e9 f93b 	bl	8000b98 <__aeabi_d2iz>
 8017922:	4682      	mov	sl, r0
 8017924:	f7e8 fe1e 	bl	8000564 <__aeabi_i2d>
 8017928:	4642      	mov	r2, r8
 801792a:	464b      	mov	r3, r9
 801792c:	f7e8 fe84 	bl	8000638 <__aeabi_dmul>
 8017930:	4602      	mov	r2, r0
 8017932:	460b      	mov	r3, r1
 8017934:	4630      	mov	r0, r6
 8017936:	4639      	mov	r1, r7
 8017938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801793c:	f7e8 fcc4 	bl	80002c8 <__aeabi_dsub>
 8017940:	f805 6b01 	strb.w	r6, [r5], #1
 8017944:	9e01      	ldr	r6, [sp, #4]
 8017946:	9f03      	ldr	r7, [sp, #12]
 8017948:	1bae      	subs	r6, r5, r6
 801794a:	42b7      	cmp	r7, r6
 801794c:	4602      	mov	r2, r0
 801794e:	460b      	mov	r3, r1
 8017950:	d135      	bne.n	80179be <_dtoa_r+0x6e6>
 8017952:	f7e8 fcbb 	bl	80002cc <__adddf3>
 8017956:	4642      	mov	r2, r8
 8017958:	464b      	mov	r3, r9
 801795a:	4606      	mov	r6, r0
 801795c:	460f      	mov	r7, r1
 801795e:	f7e9 f8fb 	bl	8000b58 <__aeabi_dcmpgt>
 8017962:	b9d0      	cbnz	r0, 801799a <_dtoa_r+0x6c2>
 8017964:	4642      	mov	r2, r8
 8017966:	464b      	mov	r3, r9
 8017968:	4630      	mov	r0, r6
 801796a:	4639      	mov	r1, r7
 801796c:	f7e9 f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 8017970:	b110      	cbz	r0, 8017978 <_dtoa_r+0x6a0>
 8017972:	f01a 0f01 	tst.w	sl, #1
 8017976:	d110      	bne.n	801799a <_dtoa_r+0x6c2>
 8017978:	4620      	mov	r0, r4
 801797a:	ee18 1a10 	vmov	r1, s16
 801797e:	f001 f901 	bl	8018b84 <_Bfree>
 8017982:	2300      	movs	r3, #0
 8017984:	9800      	ldr	r0, [sp, #0]
 8017986:	702b      	strb	r3, [r5, #0]
 8017988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801798a:	3001      	adds	r0, #1
 801798c:	6018      	str	r0, [r3, #0]
 801798e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017990:	2b00      	cmp	r3, #0
 8017992:	f43f acf1 	beq.w	8017378 <_dtoa_r+0xa0>
 8017996:	601d      	str	r5, [r3, #0]
 8017998:	e4ee      	b.n	8017378 <_dtoa_r+0xa0>
 801799a:	9f00      	ldr	r7, [sp, #0]
 801799c:	462b      	mov	r3, r5
 801799e:	461d      	mov	r5, r3
 80179a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179a4:	2a39      	cmp	r2, #57	; 0x39
 80179a6:	d106      	bne.n	80179b6 <_dtoa_r+0x6de>
 80179a8:	9a01      	ldr	r2, [sp, #4]
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d1f7      	bne.n	801799e <_dtoa_r+0x6c6>
 80179ae:	9901      	ldr	r1, [sp, #4]
 80179b0:	2230      	movs	r2, #48	; 0x30
 80179b2:	3701      	adds	r7, #1
 80179b4:	700a      	strb	r2, [r1, #0]
 80179b6:	781a      	ldrb	r2, [r3, #0]
 80179b8:	3201      	adds	r2, #1
 80179ba:	701a      	strb	r2, [r3, #0]
 80179bc:	e790      	b.n	80178e0 <_dtoa_r+0x608>
 80179be:	4ba6      	ldr	r3, [pc, #664]	; (8017c58 <_dtoa_r+0x980>)
 80179c0:	2200      	movs	r2, #0
 80179c2:	f7e8 fe39 	bl	8000638 <__aeabi_dmul>
 80179c6:	2200      	movs	r2, #0
 80179c8:	2300      	movs	r3, #0
 80179ca:	4606      	mov	r6, r0
 80179cc:	460f      	mov	r7, r1
 80179ce:	f7e9 f89b 	bl	8000b08 <__aeabi_dcmpeq>
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d09d      	beq.n	8017912 <_dtoa_r+0x63a>
 80179d6:	e7cf      	b.n	8017978 <_dtoa_r+0x6a0>
 80179d8:	9a08      	ldr	r2, [sp, #32]
 80179da:	2a00      	cmp	r2, #0
 80179dc:	f000 80d7 	beq.w	8017b8e <_dtoa_r+0x8b6>
 80179e0:	9a06      	ldr	r2, [sp, #24]
 80179e2:	2a01      	cmp	r2, #1
 80179e4:	f300 80ba 	bgt.w	8017b5c <_dtoa_r+0x884>
 80179e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ea:	2a00      	cmp	r2, #0
 80179ec:	f000 80b2 	beq.w	8017b54 <_dtoa_r+0x87c>
 80179f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80179f4:	9e07      	ldr	r6, [sp, #28]
 80179f6:	9d04      	ldr	r5, [sp, #16]
 80179f8:	9a04      	ldr	r2, [sp, #16]
 80179fa:	441a      	add	r2, r3
 80179fc:	9204      	str	r2, [sp, #16]
 80179fe:	9a05      	ldr	r2, [sp, #20]
 8017a00:	2101      	movs	r1, #1
 8017a02:	441a      	add	r2, r3
 8017a04:	4620      	mov	r0, r4
 8017a06:	9205      	str	r2, [sp, #20]
 8017a08:	f001 f9be 	bl	8018d88 <__i2b>
 8017a0c:	4607      	mov	r7, r0
 8017a0e:	2d00      	cmp	r5, #0
 8017a10:	dd0c      	ble.n	8017a2c <_dtoa_r+0x754>
 8017a12:	9b05      	ldr	r3, [sp, #20]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	dd09      	ble.n	8017a2c <_dtoa_r+0x754>
 8017a18:	42ab      	cmp	r3, r5
 8017a1a:	9a04      	ldr	r2, [sp, #16]
 8017a1c:	bfa8      	it	ge
 8017a1e:	462b      	movge	r3, r5
 8017a20:	1ad2      	subs	r2, r2, r3
 8017a22:	9204      	str	r2, [sp, #16]
 8017a24:	9a05      	ldr	r2, [sp, #20]
 8017a26:	1aed      	subs	r5, r5, r3
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	9305      	str	r3, [sp, #20]
 8017a2c:	9b07      	ldr	r3, [sp, #28]
 8017a2e:	b31b      	cbz	r3, 8017a78 <_dtoa_r+0x7a0>
 8017a30:	9b08      	ldr	r3, [sp, #32]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 80af 	beq.w	8017b96 <_dtoa_r+0x8be>
 8017a38:	2e00      	cmp	r6, #0
 8017a3a:	dd13      	ble.n	8017a64 <_dtoa_r+0x78c>
 8017a3c:	4639      	mov	r1, r7
 8017a3e:	4632      	mov	r2, r6
 8017a40:	4620      	mov	r0, r4
 8017a42:	f001 fa61 	bl	8018f08 <__pow5mult>
 8017a46:	ee18 2a10 	vmov	r2, s16
 8017a4a:	4601      	mov	r1, r0
 8017a4c:	4607      	mov	r7, r0
 8017a4e:	4620      	mov	r0, r4
 8017a50:	f001 f9b0 	bl	8018db4 <__multiply>
 8017a54:	ee18 1a10 	vmov	r1, s16
 8017a58:	4680      	mov	r8, r0
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f001 f892 	bl	8018b84 <_Bfree>
 8017a60:	ee08 8a10 	vmov	s16, r8
 8017a64:	9b07      	ldr	r3, [sp, #28]
 8017a66:	1b9a      	subs	r2, r3, r6
 8017a68:	d006      	beq.n	8017a78 <_dtoa_r+0x7a0>
 8017a6a:	ee18 1a10 	vmov	r1, s16
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f001 fa4a 	bl	8018f08 <__pow5mult>
 8017a74:	ee08 0a10 	vmov	s16, r0
 8017a78:	2101      	movs	r1, #1
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f001 f984 	bl	8018d88 <__i2b>
 8017a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	4606      	mov	r6, r0
 8017a86:	f340 8088 	ble.w	8017b9a <_dtoa_r+0x8c2>
 8017a8a:	461a      	mov	r2, r3
 8017a8c:	4601      	mov	r1, r0
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f001 fa3a 	bl	8018f08 <__pow5mult>
 8017a94:	9b06      	ldr	r3, [sp, #24]
 8017a96:	2b01      	cmp	r3, #1
 8017a98:	4606      	mov	r6, r0
 8017a9a:	f340 8081 	ble.w	8017ba0 <_dtoa_r+0x8c8>
 8017a9e:	f04f 0800 	mov.w	r8, #0
 8017aa2:	6933      	ldr	r3, [r6, #16]
 8017aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017aa8:	6918      	ldr	r0, [r3, #16]
 8017aaa:	f001 f91d 	bl	8018ce8 <__hi0bits>
 8017aae:	f1c0 0020 	rsb	r0, r0, #32
 8017ab2:	9b05      	ldr	r3, [sp, #20]
 8017ab4:	4418      	add	r0, r3
 8017ab6:	f010 001f 	ands.w	r0, r0, #31
 8017aba:	f000 8092 	beq.w	8017be2 <_dtoa_r+0x90a>
 8017abe:	f1c0 0320 	rsb	r3, r0, #32
 8017ac2:	2b04      	cmp	r3, #4
 8017ac4:	f340 808a 	ble.w	8017bdc <_dtoa_r+0x904>
 8017ac8:	f1c0 001c 	rsb	r0, r0, #28
 8017acc:	9b04      	ldr	r3, [sp, #16]
 8017ace:	4403      	add	r3, r0
 8017ad0:	9304      	str	r3, [sp, #16]
 8017ad2:	9b05      	ldr	r3, [sp, #20]
 8017ad4:	4403      	add	r3, r0
 8017ad6:	4405      	add	r5, r0
 8017ad8:	9305      	str	r3, [sp, #20]
 8017ada:	9b04      	ldr	r3, [sp, #16]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	dd07      	ble.n	8017af0 <_dtoa_r+0x818>
 8017ae0:	ee18 1a10 	vmov	r1, s16
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	f001 fa68 	bl	8018fbc <__lshift>
 8017aec:	ee08 0a10 	vmov	s16, r0
 8017af0:	9b05      	ldr	r3, [sp, #20]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	dd05      	ble.n	8017b02 <_dtoa_r+0x82a>
 8017af6:	4631      	mov	r1, r6
 8017af8:	461a      	mov	r2, r3
 8017afa:	4620      	mov	r0, r4
 8017afc:	f001 fa5e 	bl	8018fbc <__lshift>
 8017b00:	4606      	mov	r6, r0
 8017b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d06e      	beq.n	8017be6 <_dtoa_r+0x90e>
 8017b08:	ee18 0a10 	vmov	r0, s16
 8017b0c:	4631      	mov	r1, r6
 8017b0e:	f001 fac5 	bl	801909c <__mcmp>
 8017b12:	2800      	cmp	r0, #0
 8017b14:	da67      	bge.n	8017be6 <_dtoa_r+0x90e>
 8017b16:	9b00      	ldr	r3, [sp, #0]
 8017b18:	3b01      	subs	r3, #1
 8017b1a:	ee18 1a10 	vmov	r1, s16
 8017b1e:	9300      	str	r3, [sp, #0]
 8017b20:	220a      	movs	r2, #10
 8017b22:	2300      	movs	r3, #0
 8017b24:	4620      	mov	r0, r4
 8017b26:	f001 f84f 	bl	8018bc8 <__multadd>
 8017b2a:	9b08      	ldr	r3, [sp, #32]
 8017b2c:	ee08 0a10 	vmov	s16, r0
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	f000 81b1 	beq.w	8017e98 <_dtoa_r+0xbc0>
 8017b36:	2300      	movs	r3, #0
 8017b38:	4639      	mov	r1, r7
 8017b3a:	220a      	movs	r2, #10
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f001 f843 	bl	8018bc8 <__multadd>
 8017b42:	9b02      	ldr	r3, [sp, #8]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	4607      	mov	r7, r0
 8017b48:	f300 808e 	bgt.w	8017c68 <_dtoa_r+0x990>
 8017b4c:	9b06      	ldr	r3, [sp, #24]
 8017b4e:	2b02      	cmp	r3, #2
 8017b50:	dc51      	bgt.n	8017bf6 <_dtoa_r+0x91e>
 8017b52:	e089      	b.n	8017c68 <_dtoa_r+0x990>
 8017b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b5a:	e74b      	b.n	80179f4 <_dtoa_r+0x71c>
 8017b5c:	9b03      	ldr	r3, [sp, #12]
 8017b5e:	1e5e      	subs	r6, r3, #1
 8017b60:	9b07      	ldr	r3, [sp, #28]
 8017b62:	42b3      	cmp	r3, r6
 8017b64:	bfbf      	itttt	lt
 8017b66:	9b07      	ldrlt	r3, [sp, #28]
 8017b68:	9607      	strlt	r6, [sp, #28]
 8017b6a:	1af2      	sublt	r2, r6, r3
 8017b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017b6e:	bfb6      	itet	lt
 8017b70:	189b      	addlt	r3, r3, r2
 8017b72:	1b9e      	subge	r6, r3, r6
 8017b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8017b76:	9b03      	ldr	r3, [sp, #12]
 8017b78:	bfb8      	it	lt
 8017b7a:	2600      	movlt	r6, #0
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	bfb7      	itett	lt
 8017b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017b88:	1a9d      	sublt	r5, r3, r2
 8017b8a:	2300      	movlt	r3, #0
 8017b8c:	e734      	b.n	80179f8 <_dtoa_r+0x720>
 8017b8e:	9e07      	ldr	r6, [sp, #28]
 8017b90:	9d04      	ldr	r5, [sp, #16]
 8017b92:	9f08      	ldr	r7, [sp, #32]
 8017b94:	e73b      	b.n	8017a0e <_dtoa_r+0x736>
 8017b96:	9a07      	ldr	r2, [sp, #28]
 8017b98:	e767      	b.n	8017a6a <_dtoa_r+0x792>
 8017b9a:	9b06      	ldr	r3, [sp, #24]
 8017b9c:	2b01      	cmp	r3, #1
 8017b9e:	dc18      	bgt.n	8017bd2 <_dtoa_r+0x8fa>
 8017ba0:	f1ba 0f00 	cmp.w	sl, #0
 8017ba4:	d115      	bne.n	8017bd2 <_dtoa_r+0x8fa>
 8017ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017baa:	b993      	cbnz	r3, 8017bd2 <_dtoa_r+0x8fa>
 8017bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017bb0:	0d1b      	lsrs	r3, r3, #20
 8017bb2:	051b      	lsls	r3, r3, #20
 8017bb4:	b183      	cbz	r3, 8017bd8 <_dtoa_r+0x900>
 8017bb6:	9b04      	ldr	r3, [sp, #16]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	9304      	str	r3, [sp, #16]
 8017bbc:	9b05      	ldr	r3, [sp, #20]
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	9305      	str	r3, [sp, #20]
 8017bc2:	f04f 0801 	mov.w	r8, #1
 8017bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f47f af6a 	bne.w	8017aa2 <_dtoa_r+0x7ca>
 8017bce:	2001      	movs	r0, #1
 8017bd0:	e76f      	b.n	8017ab2 <_dtoa_r+0x7da>
 8017bd2:	f04f 0800 	mov.w	r8, #0
 8017bd6:	e7f6      	b.n	8017bc6 <_dtoa_r+0x8ee>
 8017bd8:	4698      	mov	r8, r3
 8017bda:	e7f4      	b.n	8017bc6 <_dtoa_r+0x8ee>
 8017bdc:	f43f af7d 	beq.w	8017ada <_dtoa_r+0x802>
 8017be0:	4618      	mov	r0, r3
 8017be2:	301c      	adds	r0, #28
 8017be4:	e772      	b.n	8017acc <_dtoa_r+0x7f4>
 8017be6:	9b03      	ldr	r3, [sp, #12]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	dc37      	bgt.n	8017c5c <_dtoa_r+0x984>
 8017bec:	9b06      	ldr	r3, [sp, #24]
 8017bee:	2b02      	cmp	r3, #2
 8017bf0:	dd34      	ble.n	8017c5c <_dtoa_r+0x984>
 8017bf2:	9b03      	ldr	r3, [sp, #12]
 8017bf4:	9302      	str	r3, [sp, #8]
 8017bf6:	9b02      	ldr	r3, [sp, #8]
 8017bf8:	b96b      	cbnz	r3, 8017c16 <_dtoa_r+0x93e>
 8017bfa:	4631      	mov	r1, r6
 8017bfc:	2205      	movs	r2, #5
 8017bfe:	4620      	mov	r0, r4
 8017c00:	f000 ffe2 	bl	8018bc8 <__multadd>
 8017c04:	4601      	mov	r1, r0
 8017c06:	4606      	mov	r6, r0
 8017c08:	ee18 0a10 	vmov	r0, s16
 8017c0c:	f001 fa46 	bl	801909c <__mcmp>
 8017c10:	2800      	cmp	r0, #0
 8017c12:	f73f adbb 	bgt.w	801778c <_dtoa_r+0x4b4>
 8017c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c18:	9d01      	ldr	r5, [sp, #4]
 8017c1a:	43db      	mvns	r3, r3
 8017c1c:	9300      	str	r3, [sp, #0]
 8017c1e:	f04f 0800 	mov.w	r8, #0
 8017c22:	4631      	mov	r1, r6
 8017c24:	4620      	mov	r0, r4
 8017c26:	f000 ffad 	bl	8018b84 <_Bfree>
 8017c2a:	2f00      	cmp	r7, #0
 8017c2c:	f43f aea4 	beq.w	8017978 <_dtoa_r+0x6a0>
 8017c30:	f1b8 0f00 	cmp.w	r8, #0
 8017c34:	d005      	beq.n	8017c42 <_dtoa_r+0x96a>
 8017c36:	45b8      	cmp	r8, r7
 8017c38:	d003      	beq.n	8017c42 <_dtoa_r+0x96a>
 8017c3a:	4641      	mov	r1, r8
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	f000 ffa1 	bl	8018b84 <_Bfree>
 8017c42:	4639      	mov	r1, r7
 8017c44:	4620      	mov	r0, r4
 8017c46:	f000 ff9d 	bl	8018b84 <_Bfree>
 8017c4a:	e695      	b.n	8017978 <_dtoa_r+0x6a0>
 8017c4c:	2600      	movs	r6, #0
 8017c4e:	4637      	mov	r7, r6
 8017c50:	e7e1      	b.n	8017c16 <_dtoa_r+0x93e>
 8017c52:	9700      	str	r7, [sp, #0]
 8017c54:	4637      	mov	r7, r6
 8017c56:	e599      	b.n	801778c <_dtoa_r+0x4b4>
 8017c58:	40240000 	.word	0x40240000
 8017c5c:	9b08      	ldr	r3, [sp, #32]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f000 80ca 	beq.w	8017df8 <_dtoa_r+0xb20>
 8017c64:	9b03      	ldr	r3, [sp, #12]
 8017c66:	9302      	str	r3, [sp, #8]
 8017c68:	2d00      	cmp	r5, #0
 8017c6a:	dd05      	ble.n	8017c78 <_dtoa_r+0x9a0>
 8017c6c:	4639      	mov	r1, r7
 8017c6e:	462a      	mov	r2, r5
 8017c70:	4620      	mov	r0, r4
 8017c72:	f001 f9a3 	bl	8018fbc <__lshift>
 8017c76:	4607      	mov	r7, r0
 8017c78:	f1b8 0f00 	cmp.w	r8, #0
 8017c7c:	d05b      	beq.n	8017d36 <_dtoa_r+0xa5e>
 8017c7e:	6879      	ldr	r1, [r7, #4]
 8017c80:	4620      	mov	r0, r4
 8017c82:	f000 ff3f 	bl	8018b04 <_Balloc>
 8017c86:	4605      	mov	r5, r0
 8017c88:	b928      	cbnz	r0, 8017c96 <_dtoa_r+0x9be>
 8017c8a:	4b87      	ldr	r3, [pc, #540]	; (8017ea8 <_dtoa_r+0xbd0>)
 8017c8c:	4602      	mov	r2, r0
 8017c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017c92:	f7ff bb3b 	b.w	801730c <_dtoa_r+0x34>
 8017c96:	693a      	ldr	r2, [r7, #16]
 8017c98:	3202      	adds	r2, #2
 8017c9a:	0092      	lsls	r2, r2, #2
 8017c9c:	f107 010c 	add.w	r1, r7, #12
 8017ca0:	300c      	adds	r0, #12
 8017ca2:	f7fc fe1f 	bl	80148e4 <memcpy>
 8017ca6:	2201      	movs	r2, #1
 8017ca8:	4629      	mov	r1, r5
 8017caa:	4620      	mov	r0, r4
 8017cac:	f001 f986 	bl	8018fbc <__lshift>
 8017cb0:	9b01      	ldr	r3, [sp, #4]
 8017cb2:	f103 0901 	add.w	r9, r3, #1
 8017cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017cba:	4413      	add	r3, r2
 8017cbc:	9305      	str	r3, [sp, #20]
 8017cbe:	f00a 0301 	and.w	r3, sl, #1
 8017cc2:	46b8      	mov	r8, r7
 8017cc4:	9304      	str	r3, [sp, #16]
 8017cc6:	4607      	mov	r7, r0
 8017cc8:	4631      	mov	r1, r6
 8017cca:	ee18 0a10 	vmov	r0, s16
 8017cce:	f7ff fa75 	bl	80171bc <quorem>
 8017cd2:	4641      	mov	r1, r8
 8017cd4:	9002      	str	r0, [sp, #8]
 8017cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017cda:	ee18 0a10 	vmov	r0, s16
 8017cde:	f001 f9dd 	bl	801909c <__mcmp>
 8017ce2:	463a      	mov	r2, r7
 8017ce4:	9003      	str	r0, [sp, #12]
 8017ce6:	4631      	mov	r1, r6
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f001 f9f3 	bl	80190d4 <__mdiff>
 8017cee:	68c2      	ldr	r2, [r0, #12]
 8017cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	bb02      	cbnz	r2, 8017d3a <_dtoa_r+0xa62>
 8017cf8:	4601      	mov	r1, r0
 8017cfa:	ee18 0a10 	vmov	r0, s16
 8017cfe:	f001 f9cd 	bl	801909c <__mcmp>
 8017d02:	4602      	mov	r2, r0
 8017d04:	4629      	mov	r1, r5
 8017d06:	4620      	mov	r0, r4
 8017d08:	9207      	str	r2, [sp, #28]
 8017d0a:	f000 ff3b 	bl	8018b84 <_Bfree>
 8017d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017d12:	ea43 0102 	orr.w	r1, r3, r2
 8017d16:	9b04      	ldr	r3, [sp, #16]
 8017d18:	430b      	orrs	r3, r1
 8017d1a:	464d      	mov	r5, r9
 8017d1c:	d10f      	bne.n	8017d3e <_dtoa_r+0xa66>
 8017d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017d22:	d02a      	beq.n	8017d7a <_dtoa_r+0xaa2>
 8017d24:	9b03      	ldr	r3, [sp, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	dd02      	ble.n	8017d30 <_dtoa_r+0xa58>
 8017d2a:	9b02      	ldr	r3, [sp, #8]
 8017d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017d30:	f88b a000 	strb.w	sl, [fp]
 8017d34:	e775      	b.n	8017c22 <_dtoa_r+0x94a>
 8017d36:	4638      	mov	r0, r7
 8017d38:	e7ba      	b.n	8017cb0 <_dtoa_r+0x9d8>
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	e7e2      	b.n	8017d04 <_dtoa_r+0xa2c>
 8017d3e:	9b03      	ldr	r3, [sp, #12]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	db04      	blt.n	8017d4e <_dtoa_r+0xa76>
 8017d44:	9906      	ldr	r1, [sp, #24]
 8017d46:	430b      	orrs	r3, r1
 8017d48:	9904      	ldr	r1, [sp, #16]
 8017d4a:	430b      	orrs	r3, r1
 8017d4c:	d122      	bne.n	8017d94 <_dtoa_r+0xabc>
 8017d4e:	2a00      	cmp	r2, #0
 8017d50:	ddee      	ble.n	8017d30 <_dtoa_r+0xa58>
 8017d52:	ee18 1a10 	vmov	r1, s16
 8017d56:	2201      	movs	r2, #1
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f001 f92f 	bl	8018fbc <__lshift>
 8017d5e:	4631      	mov	r1, r6
 8017d60:	ee08 0a10 	vmov	s16, r0
 8017d64:	f001 f99a 	bl	801909c <__mcmp>
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	dc03      	bgt.n	8017d74 <_dtoa_r+0xa9c>
 8017d6c:	d1e0      	bne.n	8017d30 <_dtoa_r+0xa58>
 8017d6e:	f01a 0f01 	tst.w	sl, #1
 8017d72:	d0dd      	beq.n	8017d30 <_dtoa_r+0xa58>
 8017d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017d78:	d1d7      	bne.n	8017d2a <_dtoa_r+0xa52>
 8017d7a:	2339      	movs	r3, #57	; 0x39
 8017d7c:	f88b 3000 	strb.w	r3, [fp]
 8017d80:	462b      	mov	r3, r5
 8017d82:	461d      	mov	r5, r3
 8017d84:	3b01      	subs	r3, #1
 8017d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d8a:	2a39      	cmp	r2, #57	; 0x39
 8017d8c:	d071      	beq.n	8017e72 <_dtoa_r+0xb9a>
 8017d8e:	3201      	adds	r2, #1
 8017d90:	701a      	strb	r2, [r3, #0]
 8017d92:	e746      	b.n	8017c22 <_dtoa_r+0x94a>
 8017d94:	2a00      	cmp	r2, #0
 8017d96:	dd07      	ble.n	8017da8 <_dtoa_r+0xad0>
 8017d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017d9c:	d0ed      	beq.n	8017d7a <_dtoa_r+0xaa2>
 8017d9e:	f10a 0301 	add.w	r3, sl, #1
 8017da2:	f88b 3000 	strb.w	r3, [fp]
 8017da6:	e73c      	b.n	8017c22 <_dtoa_r+0x94a>
 8017da8:	9b05      	ldr	r3, [sp, #20]
 8017daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017dae:	4599      	cmp	r9, r3
 8017db0:	d047      	beq.n	8017e42 <_dtoa_r+0xb6a>
 8017db2:	ee18 1a10 	vmov	r1, s16
 8017db6:	2300      	movs	r3, #0
 8017db8:	220a      	movs	r2, #10
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f000 ff04 	bl	8018bc8 <__multadd>
 8017dc0:	45b8      	cmp	r8, r7
 8017dc2:	ee08 0a10 	vmov	s16, r0
 8017dc6:	f04f 0300 	mov.w	r3, #0
 8017dca:	f04f 020a 	mov.w	r2, #10
 8017dce:	4641      	mov	r1, r8
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	d106      	bne.n	8017de2 <_dtoa_r+0xb0a>
 8017dd4:	f000 fef8 	bl	8018bc8 <__multadd>
 8017dd8:	4680      	mov	r8, r0
 8017dda:	4607      	mov	r7, r0
 8017ddc:	f109 0901 	add.w	r9, r9, #1
 8017de0:	e772      	b.n	8017cc8 <_dtoa_r+0x9f0>
 8017de2:	f000 fef1 	bl	8018bc8 <__multadd>
 8017de6:	4639      	mov	r1, r7
 8017de8:	4680      	mov	r8, r0
 8017dea:	2300      	movs	r3, #0
 8017dec:	220a      	movs	r2, #10
 8017dee:	4620      	mov	r0, r4
 8017df0:	f000 feea 	bl	8018bc8 <__multadd>
 8017df4:	4607      	mov	r7, r0
 8017df6:	e7f1      	b.n	8017ddc <_dtoa_r+0xb04>
 8017df8:	9b03      	ldr	r3, [sp, #12]
 8017dfa:	9302      	str	r3, [sp, #8]
 8017dfc:	9d01      	ldr	r5, [sp, #4]
 8017dfe:	ee18 0a10 	vmov	r0, s16
 8017e02:	4631      	mov	r1, r6
 8017e04:	f7ff f9da 	bl	80171bc <quorem>
 8017e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017e0c:	9b01      	ldr	r3, [sp, #4]
 8017e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8017e12:	1aea      	subs	r2, r5, r3
 8017e14:	9b02      	ldr	r3, [sp, #8]
 8017e16:	4293      	cmp	r3, r2
 8017e18:	dd09      	ble.n	8017e2e <_dtoa_r+0xb56>
 8017e1a:	ee18 1a10 	vmov	r1, s16
 8017e1e:	2300      	movs	r3, #0
 8017e20:	220a      	movs	r2, #10
 8017e22:	4620      	mov	r0, r4
 8017e24:	f000 fed0 	bl	8018bc8 <__multadd>
 8017e28:	ee08 0a10 	vmov	s16, r0
 8017e2c:	e7e7      	b.n	8017dfe <_dtoa_r+0xb26>
 8017e2e:	9b02      	ldr	r3, [sp, #8]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	bfc8      	it	gt
 8017e34:	461d      	movgt	r5, r3
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	bfd8      	it	le
 8017e3a:	2501      	movle	r5, #1
 8017e3c:	441d      	add	r5, r3
 8017e3e:	f04f 0800 	mov.w	r8, #0
 8017e42:	ee18 1a10 	vmov	r1, s16
 8017e46:	2201      	movs	r2, #1
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f001 f8b7 	bl	8018fbc <__lshift>
 8017e4e:	4631      	mov	r1, r6
 8017e50:	ee08 0a10 	vmov	s16, r0
 8017e54:	f001 f922 	bl	801909c <__mcmp>
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	dc91      	bgt.n	8017d80 <_dtoa_r+0xaa8>
 8017e5c:	d102      	bne.n	8017e64 <_dtoa_r+0xb8c>
 8017e5e:	f01a 0f01 	tst.w	sl, #1
 8017e62:	d18d      	bne.n	8017d80 <_dtoa_r+0xaa8>
 8017e64:	462b      	mov	r3, r5
 8017e66:	461d      	mov	r5, r3
 8017e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e6c:	2a30      	cmp	r2, #48	; 0x30
 8017e6e:	d0fa      	beq.n	8017e66 <_dtoa_r+0xb8e>
 8017e70:	e6d7      	b.n	8017c22 <_dtoa_r+0x94a>
 8017e72:	9a01      	ldr	r2, [sp, #4]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d184      	bne.n	8017d82 <_dtoa_r+0xaaa>
 8017e78:	9b00      	ldr	r3, [sp, #0]
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	2331      	movs	r3, #49	; 0x31
 8017e80:	7013      	strb	r3, [r2, #0]
 8017e82:	e6ce      	b.n	8017c22 <_dtoa_r+0x94a>
 8017e84:	4b09      	ldr	r3, [pc, #36]	; (8017eac <_dtoa_r+0xbd4>)
 8017e86:	f7ff ba95 	b.w	80173b4 <_dtoa_r+0xdc>
 8017e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f47f aa6e 	bne.w	801736e <_dtoa_r+0x96>
 8017e92:	4b07      	ldr	r3, [pc, #28]	; (8017eb0 <_dtoa_r+0xbd8>)
 8017e94:	f7ff ba8e 	b.w	80173b4 <_dtoa_r+0xdc>
 8017e98:	9b02      	ldr	r3, [sp, #8]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	dcae      	bgt.n	8017dfc <_dtoa_r+0xb24>
 8017e9e:	9b06      	ldr	r3, [sp, #24]
 8017ea0:	2b02      	cmp	r3, #2
 8017ea2:	f73f aea8 	bgt.w	8017bf6 <_dtoa_r+0x91e>
 8017ea6:	e7a9      	b.n	8017dfc <_dtoa_r+0xb24>
 8017ea8:	08073422 	.word	0x08073422
 8017eac:	080736d0 	.word	0x080736d0
 8017eb0:	080733ba 	.word	0x080733ba

08017eb4 <__sflush_r>:
 8017eb4:	898a      	ldrh	r2, [r1, #12]
 8017eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eba:	4605      	mov	r5, r0
 8017ebc:	0710      	lsls	r0, r2, #28
 8017ebe:	460c      	mov	r4, r1
 8017ec0:	d458      	bmi.n	8017f74 <__sflush_r+0xc0>
 8017ec2:	684b      	ldr	r3, [r1, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	dc05      	bgt.n	8017ed4 <__sflush_r+0x20>
 8017ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	dc02      	bgt.n	8017ed4 <__sflush_r+0x20>
 8017ece:	2000      	movs	r0, #0
 8017ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ed6:	2e00      	cmp	r6, #0
 8017ed8:	d0f9      	beq.n	8017ece <__sflush_r+0x1a>
 8017eda:	2300      	movs	r3, #0
 8017edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ee0:	682f      	ldr	r7, [r5, #0]
 8017ee2:	602b      	str	r3, [r5, #0]
 8017ee4:	d032      	beq.n	8017f4c <__sflush_r+0x98>
 8017ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017ee8:	89a3      	ldrh	r3, [r4, #12]
 8017eea:	075a      	lsls	r2, r3, #29
 8017eec:	d505      	bpl.n	8017efa <__sflush_r+0x46>
 8017eee:	6863      	ldr	r3, [r4, #4]
 8017ef0:	1ac0      	subs	r0, r0, r3
 8017ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ef4:	b10b      	cbz	r3, 8017efa <__sflush_r+0x46>
 8017ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ef8:	1ac0      	subs	r0, r0, r3
 8017efa:	2300      	movs	r3, #0
 8017efc:	4602      	mov	r2, r0
 8017efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f00:	6a21      	ldr	r1, [r4, #32]
 8017f02:	4628      	mov	r0, r5
 8017f04:	47b0      	blx	r6
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	d106      	bne.n	8017f1a <__sflush_r+0x66>
 8017f0c:	6829      	ldr	r1, [r5, #0]
 8017f0e:	291d      	cmp	r1, #29
 8017f10:	d82c      	bhi.n	8017f6c <__sflush_r+0xb8>
 8017f12:	4a2a      	ldr	r2, [pc, #168]	; (8017fbc <__sflush_r+0x108>)
 8017f14:	40ca      	lsrs	r2, r1
 8017f16:	07d6      	lsls	r6, r2, #31
 8017f18:	d528      	bpl.n	8017f6c <__sflush_r+0xb8>
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	6062      	str	r2, [r4, #4]
 8017f1e:	04d9      	lsls	r1, r3, #19
 8017f20:	6922      	ldr	r2, [r4, #16]
 8017f22:	6022      	str	r2, [r4, #0]
 8017f24:	d504      	bpl.n	8017f30 <__sflush_r+0x7c>
 8017f26:	1c42      	adds	r2, r0, #1
 8017f28:	d101      	bne.n	8017f2e <__sflush_r+0x7a>
 8017f2a:	682b      	ldr	r3, [r5, #0]
 8017f2c:	b903      	cbnz	r3, 8017f30 <__sflush_r+0x7c>
 8017f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8017f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f32:	602f      	str	r7, [r5, #0]
 8017f34:	2900      	cmp	r1, #0
 8017f36:	d0ca      	beq.n	8017ece <__sflush_r+0x1a>
 8017f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f3c:	4299      	cmp	r1, r3
 8017f3e:	d002      	beq.n	8017f46 <__sflush_r+0x92>
 8017f40:	4628      	mov	r0, r5
 8017f42:	f7fc ff57 	bl	8014df4 <_free_r>
 8017f46:	2000      	movs	r0, #0
 8017f48:	6360      	str	r0, [r4, #52]	; 0x34
 8017f4a:	e7c1      	b.n	8017ed0 <__sflush_r+0x1c>
 8017f4c:	6a21      	ldr	r1, [r4, #32]
 8017f4e:	2301      	movs	r3, #1
 8017f50:	4628      	mov	r0, r5
 8017f52:	47b0      	blx	r6
 8017f54:	1c41      	adds	r1, r0, #1
 8017f56:	d1c7      	bne.n	8017ee8 <__sflush_r+0x34>
 8017f58:	682b      	ldr	r3, [r5, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d0c4      	beq.n	8017ee8 <__sflush_r+0x34>
 8017f5e:	2b1d      	cmp	r3, #29
 8017f60:	d001      	beq.n	8017f66 <__sflush_r+0xb2>
 8017f62:	2b16      	cmp	r3, #22
 8017f64:	d101      	bne.n	8017f6a <__sflush_r+0xb6>
 8017f66:	602f      	str	r7, [r5, #0]
 8017f68:	e7b1      	b.n	8017ece <__sflush_r+0x1a>
 8017f6a:	89a3      	ldrh	r3, [r4, #12]
 8017f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f70:	81a3      	strh	r3, [r4, #12]
 8017f72:	e7ad      	b.n	8017ed0 <__sflush_r+0x1c>
 8017f74:	690f      	ldr	r7, [r1, #16]
 8017f76:	2f00      	cmp	r7, #0
 8017f78:	d0a9      	beq.n	8017ece <__sflush_r+0x1a>
 8017f7a:	0793      	lsls	r3, r2, #30
 8017f7c:	680e      	ldr	r6, [r1, #0]
 8017f7e:	bf08      	it	eq
 8017f80:	694b      	ldreq	r3, [r1, #20]
 8017f82:	600f      	str	r7, [r1, #0]
 8017f84:	bf18      	it	ne
 8017f86:	2300      	movne	r3, #0
 8017f88:	eba6 0807 	sub.w	r8, r6, r7
 8017f8c:	608b      	str	r3, [r1, #8]
 8017f8e:	f1b8 0f00 	cmp.w	r8, #0
 8017f92:	dd9c      	ble.n	8017ece <__sflush_r+0x1a>
 8017f94:	6a21      	ldr	r1, [r4, #32]
 8017f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f98:	4643      	mov	r3, r8
 8017f9a:	463a      	mov	r2, r7
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	47b0      	blx	r6
 8017fa0:	2800      	cmp	r0, #0
 8017fa2:	dc06      	bgt.n	8017fb2 <__sflush_r+0xfe>
 8017fa4:	89a3      	ldrh	r3, [r4, #12]
 8017fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017faa:	81a3      	strh	r3, [r4, #12]
 8017fac:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb0:	e78e      	b.n	8017ed0 <__sflush_r+0x1c>
 8017fb2:	4407      	add	r7, r0
 8017fb4:	eba8 0800 	sub.w	r8, r8, r0
 8017fb8:	e7e9      	b.n	8017f8e <__sflush_r+0xda>
 8017fba:	bf00      	nop
 8017fbc:	20400001 	.word	0x20400001

08017fc0 <_fflush_r>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	690b      	ldr	r3, [r1, #16]
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b913      	cbnz	r3, 8017fd0 <_fflush_r+0x10>
 8017fca:	2500      	movs	r5, #0
 8017fcc:	4628      	mov	r0, r5
 8017fce:	bd38      	pop	{r3, r4, r5, pc}
 8017fd0:	b118      	cbz	r0, 8017fda <_fflush_r+0x1a>
 8017fd2:	6983      	ldr	r3, [r0, #24]
 8017fd4:	b90b      	cbnz	r3, 8017fda <_fflush_r+0x1a>
 8017fd6:	f000 f887 	bl	80180e8 <__sinit>
 8017fda:	4b14      	ldr	r3, [pc, #80]	; (801802c <_fflush_r+0x6c>)
 8017fdc:	429c      	cmp	r4, r3
 8017fde:	d11b      	bne.n	8018018 <_fflush_r+0x58>
 8017fe0:	686c      	ldr	r4, [r5, #4]
 8017fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d0ef      	beq.n	8017fca <_fflush_r+0xa>
 8017fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fec:	07d0      	lsls	r0, r2, #31
 8017fee:	d404      	bmi.n	8017ffa <_fflush_r+0x3a>
 8017ff0:	0599      	lsls	r1, r3, #22
 8017ff2:	d402      	bmi.n	8017ffa <_fflush_r+0x3a>
 8017ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ff6:	f000 fcd1 	bl	801899c <__retarget_lock_acquire_recursive>
 8017ffa:	4628      	mov	r0, r5
 8017ffc:	4621      	mov	r1, r4
 8017ffe:	f7ff ff59 	bl	8017eb4 <__sflush_r>
 8018002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018004:	07da      	lsls	r2, r3, #31
 8018006:	4605      	mov	r5, r0
 8018008:	d4e0      	bmi.n	8017fcc <_fflush_r+0xc>
 801800a:	89a3      	ldrh	r3, [r4, #12]
 801800c:	059b      	lsls	r3, r3, #22
 801800e:	d4dd      	bmi.n	8017fcc <_fflush_r+0xc>
 8018010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018012:	f000 fcc5 	bl	80189a0 <__retarget_lock_release_recursive>
 8018016:	e7d9      	b.n	8017fcc <_fflush_r+0xc>
 8018018:	4b05      	ldr	r3, [pc, #20]	; (8018030 <_fflush_r+0x70>)
 801801a:	429c      	cmp	r4, r3
 801801c:	d101      	bne.n	8018022 <_fflush_r+0x62>
 801801e:	68ac      	ldr	r4, [r5, #8]
 8018020:	e7df      	b.n	8017fe2 <_fflush_r+0x22>
 8018022:	4b04      	ldr	r3, [pc, #16]	; (8018034 <_fflush_r+0x74>)
 8018024:	429c      	cmp	r4, r3
 8018026:	bf08      	it	eq
 8018028:	68ec      	ldreq	r4, [r5, #12]
 801802a:	e7da      	b.n	8017fe2 <_fflush_r+0x22>
 801802c:	08073454 	.word	0x08073454
 8018030:	08073474 	.word	0x08073474
 8018034:	08073434 	.word	0x08073434

08018038 <std>:
 8018038:	2300      	movs	r3, #0
 801803a:	b510      	push	{r4, lr}
 801803c:	4604      	mov	r4, r0
 801803e:	e9c0 3300 	strd	r3, r3, [r0]
 8018042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018046:	6083      	str	r3, [r0, #8]
 8018048:	8181      	strh	r1, [r0, #12]
 801804a:	6643      	str	r3, [r0, #100]	; 0x64
 801804c:	81c2      	strh	r2, [r0, #14]
 801804e:	6183      	str	r3, [r0, #24]
 8018050:	4619      	mov	r1, r3
 8018052:	2208      	movs	r2, #8
 8018054:	305c      	adds	r0, #92	; 0x5c
 8018056:	f7fc fc53 	bl	8014900 <memset>
 801805a:	4b05      	ldr	r3, [pc, #20]	; (8018070 <std+0x38>)
 801805c:	6263      	str	r3, [r4, #36]	; 0x24
 801805e:	4b05      	ldr	r3, [pc, #20]	; (8018074 <std+0x3c>)
 8018060:	62a3      	str	r3, [r4, #40]	; 0x28
 8018062:	4b05      	ldr	r3, [pc, #20]	; (8018078 <std+0x40>)
 8018064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018066:	4b05      	ldr	r3, [pc, #20]	; (801807c <std+0x44>)
 8018068:	6224      	str	r4, [r4, #32]
 801806a:	6323      	str	r3, [r4, #48]	; 0x30
 801806c:	bd10      	pop	{r4, pc}
 801806e:	bf00      	nop
 8018070:	08015bf5 	.word	0x08015bf5
 8018074:	08015c1b 	.word	0x08015c1b
 8018078:	08015c53 	.word	0x08015c53
 801807c:	08015c77 	.word	0x08015c77

08018080 <_cleanup_r>:
 8018080:	4901      	ldr	r1, [pc, #4]	; (8018088 <_cleanup_r+0x8>)
 8018082:	f000 b8af 	b.w	80181e4 <_fwalk_reent>
 8018086:	bf00      	nop
 8018088:	08017fc1 	.word	0x08017fc1

0801808c <__sfmoreglue>:
 801808c:	b570      	push	{r4, r5, r6, lr}
 801808e:	2268      	movs	r2, #104	; 0x68
 8018090:	1e4d      	subs	r5, r1, #1
 8018092:	4355      	muls	r5, r2
 8018094:	460e      	mov	r6, r1
 8018096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801809a:	f7fc ff17 	bl	8014ecc <_malloc_r>
 801809e:	4604      	mov	r4, r0
 80180a0:	b140      	cbz	r0, 80180b4 <__sfmoreglue+0x28>
 80180a2:	2100      	movs	r1, #0
 80180a4:	e9c0 1600 	strd	r1, r6, [r0]
 80180a8:	300c      	adds	r0, #12
 80180aa:	60a0      	str	r0, [r4, #8]
 80180ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80180b0:	f7fc fc26 	bl	8014900 <memset>
 80180b4:	4620      	mov	r0, r4
 80180b6:	bd70      	pop	{r4, r5, r6, pc}

080180b8 <__sfp_lock_acquire>:
 80180b8:	4801      	ldr	r0, [pc, #4]	; (80180c0 <__sfp_lock_acquire+0x8>)
 80180ba:	f000 bc6f 	b.w	801899c <__retarget_lock_acquire_recursive>
 80180be:	bf00      	nop
 80180c0:	20005da2 	.word	0x20005da2

080180c4 <__sfp_lock_release>:
 80180c4:	4801      	ldr	r0, [pc, #4]	; (80180cc <__sfp_lock_release+0x8>)
 80180c6:	f000 bc6b 	b.w	80189a0 <__retarget_lock_release_recursive>
 80180ca:	bf00      	nop
 80180cc:	20005da2 	.word	0x20005da2

080180d0 <__sinit_lock_acquire>:
 80180d0:	4801      	ldr	r0, [pc, #4]	; (80180d8 <__sinit_lock_acquire+0x8>)
 80180d2:	f000 bc63 	b.w	801899c <__retarget_lock_acquire_recursive>
 80180d6:	bf00      	nop
 80180d8:	20005da3 	.word	0x20005da3

080180dc <__sinit_lock_release>:
 80180dc:	4801      	ldr	r0, [pc, #4]	; (80180e4 <__sinit_lock_release+0x8>)
 80180de:	f000 bc5f 	b.w	80189a0 <__retarget_lock_release_recursive>
 80180e2:	bf00      	nop
 80180e4:	20005da3 	.word	0x20005da3

080180e8 <__sinit>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	4604      	mov	r4, r0
 80180ec:	f7ff fff0 	bl	80180d0 <__sinit_lock_acquire>
 80180f0:	69a3      	ldr	r3, [r4, #24]
 80180f2:	b11b      	cbz	r3, 80180fc <__sinit+0x14>
 80180f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180f8:	f7ff bff0 	b.w	80180dc <__sinit_lock_release>
 80180fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018100:	6523      	str	r3, [r4, #80]	; 0x50
 8018102:	4b13      	ldr	r3, [pc, #76]	; (8018150 <__sinit+0x68>)
 8018104:	4a13      	ldr	r2, [pc, #76]	; (8018154 <__sinit+0x6c>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	62a2      	str	r2, [r4, #40]	; 0x28
 801810a:	42a3      	cmp	r3, r4
 801810c:	bf04      	itt	eq
 801810e:	2301      	moveq	r3, #1
 8018110:	61a3      	streq	r3, [r4, #24]
 8018112:	4620      	mov	r0, r4
 8018114:	f000 f820 	bl	8018158 <__sfp>
 8018118:	6060      	str	r0, [r4, #4]
 801811a:	4620      	mov	r0, r4
 801811c:	f000 f81c 	bl	8018158 <__sfp>
 8018120:	60a0      	str	r0, [r4, #8]
 8018122:	4620      	mov	r0, r4
 8018124:	f000 f818 	bl	8018158 <__sfp>
 8018128:	2200      	movs	r2, #0
 801812a:	60e0      	str	r0, [r4, #12]
 801812c:	2104      	movs	r1, #4
 801812e:	6860      	ldr	r0, [r4, #4]
 8018130:	f7ff ff82 	bl	8018038 <std>
 8018134:	68a0      	ldr	r0, [r4, #8]
 8018136:	2201      	movs	r2, #1
 8018138:	2109      	movs	r1, #9
 801813a:	f7ff ff7d 	bl	8018038 <std>
 801813e:	68e0      	ldr	r0, [r4, #12]
 8018140:	2202      	movs	r2, #2
 8018142:	2112      	movs	r1, #18
 8018144:	f7ff ff78 	bl	8018038 <std>
 8018148:	2301      	movs	r3, #1
 801814a:	61a3      	str	r3, [r4, #24]
 801814c:	e7d2      	b.n	80180f4 <__sinit+0xc>
 801814e:	bf00      	nop
 8018150:	08073124 	.word	0x08073124
 8018154:	08018081 	.word	0x08018081

08018158 <__sfp>:
 8018158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801815a:	4607      	mov	r7, r0
 801815c:	f7ff ffac 	bl	80180b8 <__sfp_lock_acquire>
 8018160:	4b1e      	ldr	r3, [pc, #120]	; (80181dc <__sfp+0x84>)
 8018162:	681e      	ldr	r6, [r3, #0]
 8018164:	69b3      	ldr	r3, [r6, #24]
 8018166:	b913      	cbnz	r3, 801816e <__sfp+0x16>
 8018168:	4630      	mov	r0, r6
 801816a:	f7ff ffbd 	bl	80180e8 <__sinit>
 801816e:	3648      	adds	r6, #72	; 0x48
 8018170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018174:	3b01      	subs	r3, #1
 8018176:	d503      	bpl.n	8018180 <__sfp+0x28>
 8018178:	6833      	ldr	r3, [r6, #0]
 801817a:	b30b      	cbz	r3, 80181c0 <__sfp+0x68>
 801817c:	6836      	ldr	r6, [r6, #0]
 801817e:	e7f7      	b.n	8018170 <__sfp+0x18>
 8018180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018184:	b9d5      	cbnz	r5, 80181bc <__sfp+0x64>
 8018186:	4b16      	ldr	r3, [pc, #88]	; (80181e0 <__sfp+0x88>)
 8018188:	60e3      	str	r3, [r4, #12]
 801818a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801818e:	6665      	str	r5, [r4, #100]	; 0x64
 8018190:	f000 fc02 	bl	8018998 <__retarget_lock_init_recursive>
 8018194:	f7ff ff96 	bl	80180c4 <__sfp_lock_release>
 8018198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801819c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80181a0:	6025      	str	r5, [r4, #0]
 80181a2:	61a5      	str	r5, [r4, #24]
 80181a4:	2208      	movs	r2, #8
 80181a6:	4629      	mov	r1, r5
 80181a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80181ac:	f7fc fba8 	bl	8014900 <memset>
 80181b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80181b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80181b8:	4620      	mov	r0, r4
 80181ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181bc:	3468      	adds	r4, #104	; 0x68
 80181be:	e7d9      	b.n	8018174 <__sfp+0x1c>
 80181c0:	2104      	movs	r1, #4
 80181c2:	4638      	mov	r0, r7
 80181c4:	f7ff ff62 	bl	801808c <__sfmoreglue>
 80181c8:	4604      	mov	r4, r0
 80181ca:	6030      	str	r0, [r6, #0]
 80181cc:	2800      	cmp	r0, #0
 80181ce:	d1d5      	bne.n	801817c <__sfp+0x24>
 80181d0:	f7ff ff78 	bl	80180c4 <__sfp_lock_release>
 80181d4:	230c      	movs	r3, #12
 80181d6:	603b      	str	r3, [r7, #0]
 80181d8:	e7ee      	b.n	80181b8 <__sfp+0x60>
 80181da:	bf00      	nop
 80181dc:	08073124 	.word	0x08073124
 80181e0:	ffff0001 	.word	0xffff0001

080181e4 <_fwalk_reent>:
 80181e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e8:	4606      	mov	r6, r0
 80181ea:	4688      	mov	r8, r1
 80181ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80181f0:	2700      	movs	r7, #0
 80181f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181f6:	f1b9 0901 	subs.w	r9, r9, #1
 80181fa:	d505      	bpl.n	8018208 <_fwalk_reent+0x24>
 80181fc:	6824      	ldr	r4, [r4, #0]
 80181fe:	2c00      	cmp	r4, #0
 8018200:	d1f7      	bne.n	80181f2 <_fwalk_reent+0xe>
 8018202:	4638      	mov	r0, r7
 8018204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018208:	89ab      	ldrh	r3, [r5, #12]
 801820a:	2b01      	cmp	r3, #1
 801820c:	d907      	bls.n	801821e <_fwalk_reent+0x3a>
 801820e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018212:	3301      	adds	r3, #1
 8018214:	d003      	beq.n	801821e <_fwalk_reent+0x3a>
 8018216:	4629      	mov	r1, r5
 8018218:	4630      	mov	r0, r6
 801821a:	47c0      	blx	r8
 801821c:	4307      	orrs	r7, r0
 801821e:	3568      	adds	r5, #104	; 0x68
 8018220:	e7e9      	b.n	80181f6 <_fwalk_reent+0x12>

08018222 <rshift>:
 8018222:	6903      	ldr	r3, [r0, #16]
 8018224:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801822c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018230:	f100 0414 	add.w	r4, r0, #20
 8018234:	dd45      	ble.n	80182c2 <rshift+0xa0>
 8018236:	f011 011f 	ands.w	r1, r1, #31
 801823a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801823e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018242:	d10c      	bne.n	801825e <rshift+0x3c>
 8018244:	f100 0710 	add.w	r7, r0, #16
 8018248:	4629      	mov	r1, r5
 801824a:	42b1      	cmp	r1, r6
 801824c:	d334      	bcc.n	80182b8 <rshift+0x96>
 801824e:	1a9b      	subs	r3, r3, r2
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	1eea      	subs	r2, r5, #3
 8018254:	4296      	cmp	r6, r2
 8018256:	bf38      	it	cc
 8018258:	2300      	movcc	r3, #0
 801825a:	4423      	add	r3, r4
 801825c:	e015      	b.n	801828a <rshift+0x68>
 801825e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018262:	f1c1 0820 	rsb	r8, r1, #32
 8018266:	40cf      	lsrs	r7, r1
 8018268:	f105 0e04 	add.w	lr, r5, #4
 801826c:	46a1      	mov	r9, r4
 801826e:	4576      	cmp	r6, lr
 8018270:	46f4      	mov	ip, lr
 8018272:	d815      	bhi.n	80182a0 <rshift+0x7e>
 8018274:	1a9a      	subs	r2, r3, r2
 8018276:	0092      	lsls	r2, r2, #2
 8018278:	3a04      	subs	r2, #4
 801827a:	3501      	adds	r5, #1
 801827c:	42ae      	cmp	r6, r5
 801827e:	bf38      	it	cc
 8018280:	2200      	movcc	r2, #0
 8018282:	18a3      	adds	r3, r4, r2
 8018284:	50a7      	str	r7, [r4, r2]
 8018286:	b107      	cbz	r7, 801828a <rshift+0x68>
 8018288:	3304      	adds	r3, #4
 801828a:	1b1a      	subs	r2, r3, r4
 801828c:	42a3      	cmp	r3, r4
 801828e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018292:	bf08      	it	eq
 8018294:	2300      	moveq	r3, #0
 8018296:	6102      	str	r2, [r0, #16]
 8018298:	bf08      	it	eq
 801829a:	6143      	streq	r3, [r0, #20]
 801829c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182a0:	f8dc c000 	ldr.w	ip, [ip]
 80182a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80182a8:	ea4c 0707 	orr.w	r7, ip, r7
 80182ac:	f849 7b04 	str.w	r7, [r9], #4
 80182b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80182b4:	40cf      	lsrs	r7, r1
 80182b6:	e7da      	b.n	801826e <rshift+0x4c>
 80182b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80182bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80182c0:	e7c3      	b.n	801824a <rshift+0x28>
 80182c2:	4623      	mov	r3, r4
 80182c4:	e7e1      	b.n	801828a <rshift+0x68>

080182c6 <__hexdig_fun>:
 80182c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80182ca:	2b09      	cmp	r3, #9
 80182cc:	d802      	bhi.n	80182d4 <__hexdig_fun+0xe>
 80182ce:	3820      	subs	r0, #32
 80182d0:	b2c0      	uxtb	r0, r0
 80182d2:	4770      	bx	lr
 80182d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80182d8:	2b05      	cmp	r3, #5
 80182da:	d801      	bhi.n	80182e0 <__hexdig_fun+0x1a>
 80182dc:	3847      	subs	r0, #71	; 0x47
 80182de:	e7f7      	b.n	80182d0 <__hexdig_fun+0xa>
 80182e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80182e4:	2b05      	cmp	r3, #5
 80182e6:	d801      	bhi.n	80182ec <__hexdig_fun+0x26>
 80182e8:	3827      	subs	r0, #39	; 0x27
 80182ea:	e7f1      	b.n	80182d0 <__hexdig_fun+0xa>
 80182ec:	2000      	movs	r0, #0
 80182ee:	4770      	bx	lr

080182f0 <__gethex>:
 80182f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f4:	ed2d 8b02 	vpush	{d8}
 80182f8:	b089      	sub	sp, #36	; 0x24
 80182fa:	ee08 0a10 	vmov	s16, r0
 80182fe:	9304      	str	r3, [sp, #16]
 8018300:	4bb4      	ldr	r3, [pc, #720]	; (80185d4 <__gethex+0x2e4>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	9301      	str	r3, [sp, #4]
 8018306:	4618      	mov	r0, r3
 8018308:	468b      	mov	fp, r1
 801830a:	4690      	mov	r8, r2
 801830c:	f7e7 ff7a 	bl	8000204 <strlen>
 8018310:	9b01      	ldr	r3, [sp, #4]
 8018312:	f8db 2000 	ldr.w	r2, [fp]
 8018316:	4403      	add	r3, r0
 8018318:	4682      	mov	sl, r0
 801831a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801831e:	9305      	str	r3, [sp, #20]
 8018320:	1c93      	adds	r3, r2, #2
 8018322:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801832a:	32fe      	adds	r2, #254	; 0xfe
 801832c:	18d1      	adds	r1, r2, r3
 801832e:	461f      	mov	r7, r3
 8018330:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018334:	9100      	str	r1, [sp, #0]
 8018336:	2830      	cmp	r0, #48	; 0x30
 8018338:	d0f8      	beq.n	801832c <__gethex+0x3c>
 801833a:	f7ff ffc4 	bl	80182c6 <__hexdig_fun>
 801833e:	4604      	mov	r4, r0
 8018340:	2800      	cmp	r0, #0
 8018342:	d13a      	bne.n	80183ba <__gethex+0xca>
 8018344:	9901      	ldr	r1, [sp, #4]
 8018346:	4652      	mov	r2, sl
 8018348:	4638      	mov	r0, r7
 801834a:	f001 fdf9 	bl	8019f40 <strncmp>
 801834e:	4605      	mov	r5, r0
 8018350:	2800      	cmp	r0, #0
 8018352:	d168      	bne.n	8018426 <__gethex+0x136>
 8018354:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018358:	eb07 060a 	add.w	r6, r7, sl
 801835c:	f7ff ffb3 	bl	80182c6 <__hexdig_fun>
 8018360:	2800      	cmp	r0, #0
 8018362:	d062      	beq.n	801842a <__gethex+0x13a>
 8018364:	4633      	mov	r3, r6
 8018366:	7818      	ldrb	r0, [r3, #0]
 8018368:	2830      	cmp	r0, #48	; 0x30
 801836a:	461f      	mov	r7, r3
 801836c:	f103 0301 	add.w	r3, r3, #1
 8018370:	d0f9      	beq.n	8018366 <__gethex+0x76>
 8018372:	f7ff ffa8 	bl	80182c6 <__hexdig_fun>
 8018376:	2301      	movs	r3, #1
 8018378:	fab0 f480 	clz	r4, r0
 801837c:	0964      	lsrs	r4, r4, #5
 801837e:	4635      	mov	r5, r6
 8018380:	9300      	str	r3, [sp, #0]
 8018382:	463a      	mov	r2, r7
 8018384:	4616      	mov	r6, r2
 8018386:	3201      	adds	r2, #1
 8018388:	7830      	ldrb	r0, [r6, #0]
 801838a:	f7ff ff9c 	bl	80182c6 <__hexdig_fun>
 801838e:	2800      	cmp	r0, #0
 8018390:	d1f8      	bne.n	8018384 <__gethex+0x94>
 8018392:	9901      	ldr	r1, [sp, #4]
 8018394:	4652      	mov	r2, sl
 8018396:	4630      	mov	r0, r6
 8018398:	f001 fdd2 	bl	8019f40 <strncmp>
 801839c:	b980      	cbnz	r0, 80183c0 <__gethex+0xd0>
 801839e:	b94d      	cbnz	r5, 80183b4 <__gethex+0xc4>
 80183a0:	eb06 050a 	add.w	r5, r6, sl
 80183a4:	462a      	mov	r2, r5
 80183a6:	4616      	mov	r6, r2
 80183a8:	3201      	adds	r2, #1
 80183aa:	7830      	ldrb	r0, [r6, #0]
 80183ac:	f7ff ff8b 	bl	80182c6 <__hexdig_fun>
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d1f8      	bne.n	80183a6 <__gethex+0xb6>
 80183b4:	1bad      	subs	r5, r5, r6
 80183b6:	00ad      	lsls	r5, r5, #2
 80183b8:	e004      	b.n	80183c4 <__gethex+0xd4>
 80183ba:	2400      	movs	r4, #0
 80183bc:	4625      	mov	r5, r4
 80183be:	e7e0      	b.n	8018382 <__gethex+0x92>
 80183c0:	2d00      	cmp	r5, #0
 80183c2:	d1f7      	bne.n	80183b4 <__gethex+0xc4>
 80183c4:	7833      	ldrb	r3, [r6, #0]
 80183c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80183ca:	2b50      	cmp	r3, #80	; 0x50
 80183cc:	d13b      	bne.n	8018446 <__gethex+0x156>
 80183ce:	7873      	ldrb	r3, [r6, #1]
 80183d0:	2b2b      	cmp	r3, #43	; 0x2b
 80183d2:	d02c      	beq.n	801842e <__gethex+0x13e>
 80183d4:	2b2d      	cmp	r3, #45	; 0x2d
 80183d6:	d02e      	beq.n	8018436 <__gethex+0x146>
 80183d8:	1c71      	adds	r1, r6, #1
 80183da:	f04f 0900 	mov.w	r9, #0
 80183de:	7808      	ldrb	r0, [r1, #0]
 80183e0:	f7ff ff71 	bl	80182c6 <__hexdig_fun>
 80183e4:	1e43      	subs	r3, r0, #1
 80183e6:	b2db      	uxtb	r3, r3
 80183e8:	2b18      	cmp	r3, #24
 80183ea:	d82c      	bhi.n	8018446 <__gethex+0x156>
 80183ec:	f1a0 0210 	sub.w	r2, r0, #16
 80183f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80183f4:	f7ff ff67 	bl	80182c6 <__hexdig_fun>
 80183f8:	1e43      	subs	r3, r0, #1
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	2b18      	cmp	r3, #24
 80183fe:	d91d      	bls.n	801843c <__gethex+0x14c>
 8018400:	f1b9 0f00 	cmp.w	r9, #0
 8018404:	d000      	beq.n	8018408 <__gethex+0x118>
 8018406:	4252      	negs	r2, r2
 8018408:	4415      	add	r5, r2
 801840a:	f8cb 1000 	str.w	r1, [fp]
 801840e:	b1e4      	cbz	r4, 801844a <__gethex+0x15a>
 8018410:	9b00      	ldr	r3, [sp, #0]
 8018412:	2b00      	cmp	r3, #0
 8018414:	bf14      	ite	ne
 8018416:	2700      	movne	r7, #0
 8018418:	2706      	moveq	r7, #6
 801841a:	4638      	mov	r0, r7
 801841c:	b009      	add	sp, #36	; 0x24
 801841e:	ecbd 8b02 	vpop	{d8}
 8018422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018426:	463e      	mov	r6, r7
 8018428:	4625      	mov	r5, r4
 801842a:	2401      	movs	r4, #1
 801842c:	e7ca      	b.n	80183c4 <__gethex+0xd4>
 801842e:	f04f 0900 	mov.w	r9, #0
 8018432:	1cb1      	adds	r1, r6, #2
 8018434:	e7d3      	b.n	80183de <__gethex+0xee>
 8018436:	f04f 0901 	mov.w	r9, #1
 801843a:	e7fa      	b.n	8018432 <__gethex+0x142>
 801843c:	230a      	movs	r3, #10
 801843e:	fb03 0202 	mla	r2, r3, r2, r0
 8018442:	3a10      	subs	r2, #16
 8018444:	e7d4      	b.n	80183f0 <__gethex+0x100>
 8018446:	4631      	mov	r1, r6
 8018448:	e7df      	b.n	801840a <__gethex+0x11a>
 801844a:	1bf3      	subs	r3, r6, r7
 801844c:	3b01      	subs	r3, #1
 801844e:	4621      	mov	r1, r4
 8018450:	2b07      	cmp	r3, #7
 8018452:	dc0b      	bgt.n	801846c <__gethex+0x17c>
 8018454:	ee18 0a10 	vmov	r0, s16
 8018458:	f000 fb54 	bl	8018b04 <_Balloc>
 801845c:	4604      	mov	r4, r0
 801845e:	b940      	cbnz	r0, 8018472 <__gethex+0x182>
 8018460:	4b5d      	ldr	r3, [pc, #372]	; (80185d8 <__gethex+0x2e8>)
 8018462:	4602      	mov	r2, r0
 8018464:	21de      	movs	r1, #222	; 0xde
 8018466:	485d      	ldr	r0, [pc, #372]	; (80185dc <__gethex+0x2ec>)
 8018468:	f7fc f9ca 	bl	8014800 <__assert_func>
 801846c:	3101      	adds	r1, #1
 801846e:	105b      	asrs	r3, r3, #1
 8018470:	e7ee      	b.n	8018450 <__gethex+0x160>
 8018472:	f100 0914 	add.w	r9, r0, #20
 8018476:	f04f 0b00 	mov.w	fp, #0
 801847a:	f1ca 0301 	rsb	r3, sl, #1
 801847e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018482:	f8cd b000 	str.w	fp, [sp]
 8018486:	9306      	str	r3, [sp, #24]
 8018488:	42b7      	cmp	r7, r6
 801848a:	d340      	bcc.n	801850e <__gethex+0x21e>
 801848c:	9802      	ldr	r0, [sp, #8]
 801848e:	9b00      	ldr	r3, [sp, #0]
 8018490:	f840 3b04 	str.w	r3, [r0], #4
 8018494:	eba0 0009 	sub.w	r0, r0, r9
 8018498:	1080      	asrs	r0, r0, #2
 801849a:	0146      	lsls	r6, r0, #5
 801849c:	6120      	str	r0, [r4, #16]
 801849e:	4618      	mov	r0, r3
 80184a0:	f000 fc22 	bl	8018ce8 <__hi0bits>
 80184a4:	1a30      	subs	r0, r6, r0
 80184a6:	f8d8 6000 	ldr.w	r6, [r8]
 80184aa:	42b0      	cmp	r0, r6
 80184ac:	dd63      	ble.n	8018576 <__gethex+0x286>
 80184ae:	1b87      	subs	r7, r0, r6
 80184b0:	4639      	mov	r1, r7
 80184b2:	4620      	mov	r0, r4
 80184b4:	f000 ffc6 	bl	8019444 <__any_on>
 80184b8:	4682      	mov	sl, r0
 80184ba:	b1a8      	cbz	r0, 80184e8 <__gethex+0x1f8>
 80184bc:	1e7b      	subs	r3, r7, #1
 80184be:	1159      	asrs	r1, r3, #5
 80184c0:	f003 021f 	and.w	r2, r3, #31
 80184c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80184c8:	f04f 0a01 	mov.w	sl, #1
 80184cc:	fa0a f202 	lsl.w	r2, sl, r2
 80184d0:	420a      	tst	r2, r1
 80184d2:	d009      	beq.n	80184e8 <__gethex+0x1f8>
 80184d4:	4553      	cmp	r3, sl
 80184d6:	dd05      	ble.n	80184e4 <__gethex+0x1f4>
 80184d8:	1eb9      	subs	r1, r7, #2
 80184da:	4620      	mov	r0, r4
 80184dc:	f000 ffb2 	bl	8019444 <__any_on>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	d145      	bne.n	8018570 <__gethex+0x280>
 80184e4:	f04f 0a02 	mov.w	sl, #2
 80184e8:	4639      	mov	r1, r7
 80184ea:	4620      	mov	r0, r4
 80184ec:	f7ff fe99 	bl	8018222 <rshift>
 80184f0:	443d      	add	r5, r7
 80184f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184f6:	42ab      	cmp	r3, r5
 80184f8:	da4c      	bge.n	8018594 <__gethex+0x2a4>
 80184fa:	ee18 0a10 	vmov	r0, s16
 80184fe:	4621      	mov	r1, r4
 8018500:	f000 fb40 	bl	8018b84 <_Bfree>
 8018504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018506:	2300      	movs	r3, #0
 8018508:	6013      	str	r3, [r2, #0]
 801850a:	27a3      	movs	r7, #163	; 0xa3
 801850c:	e785      	b.n	801841a <__gethex+0x12a>
 801850e:	1e73      	subs	r3, r6, #1
 8018510:	9a05      	ldr	r2, [sp, #20]
 8018512:	9303      	str	r3, [sp, #12]
 8018514:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018518:	4293      	cmp	r3, r2
 801851a:	d019      	beq.n	8018550 <__gethex+0x260>
 801851c:	f1bb 0f20 	cmp.w	fp, #32
 8018520:	d107      	bne.n	8018532 <__gethex+0x242>
 8018522:	9b02      	ldr	r3, [sp, #8]
 8018524:	9a00      	ldr	r2, [sp, #0]
 8018526:	f843 2b04 	str.w	r2, [r3], #4
 801852a:	9302      	str	r3, [sp, #8]
 801852c:	2300      	movs	r3, #0
 801852e:	9300      	str	r3, [sp, #0]
 8018530:	469b      	mov	fp, r3
 8018532:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018536:	f7ff fec6 	bl	80182c6 <__hexdig_fun>
 801853a:	9b00      	ldr	r3, [sp, #0]
 801853c:	f000 000f 	and.w	r0, r0, #15
 8018540:	fa00 f00b 	lsl.w	r0, r0, fp
 8018544:	4303      	orrs	r3, r0
 8018546:	9300      	str	r3, [sp, #0]
 8018548:	f10b 0b04 	add.w	fp, fp, #4
 801854c:	9b03      	ldr	r3, [sp, #12]
 801854e:	e00d      	b.n	801856c <__gethex+0x27c>
 8018550:	9b03      	ldr	r3, [sp, #12]
 8018552:	9a06      	ldr	r2, [sp, #24]
 8018554:	4413      	add	r3, r2
 8018556:	42bb      	cmp	r3, r7
 8018558:	d3e0      	bcc.n	801851c <__gethex+0x22c>
 801855a:	4618      	mov	r0, r3
 801855c:	9901      	ldr	r1, [sp, #4]
 801855e:	9307      	str	r3, [sp, #28]
 8018560:	4652      	mov	r2, sl
 8018562:	f001 fced 	bl	8019f40 <strncmp>
 8018566:	9b07      	ldr	r3, [sp, #28]
 8018568:	2800      	cmp	r0, #0
 801856a:	d1d7      	bne.n	801851c <__gethex+0x22c>
 801856c:	461e      	mov	r6, r3
 801856e:	e78b      	b.n	8018488 <__gethex+0x198>
 8018570:	f04f 0a03 	mov.w	sl, #3
 8018574:	e7b8      	b.n	80184e8 <__gethex+0x1f8>
 8018576:	da0a      	bge.n	801858e <__gethex+0x29e>
 8018578:	1a37      	subs	r7, r6, r0
 801857a:	4621      	mov	r1, r4
 801857c:	ee18 0a10 	vmov	r0, s16
 8018580:	463a      	mov	r2, r7
 8018582:	f000 fd1b 	bl	8018fbc <__lshift>
 8018586:	1bed      	subs	r5, r5, r7
 8018588:	4604      	mov	r4, r0
 801858a:	f100 0914 	add.w	r9, r0, #20
 801858e:	f04f 0a00 	mov.w	sl, #0
 8018592:	e7ae      	b.n	80184f2 <__gethex+0x202>
 8018594:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018598:	42a8      	cmp	r0, r5
 801859a:	dd72      	ble.n	8018682 <__gethex+0x392>
 801859c:	1b45      	subs	r5, r0, r5
 801859e:	42ae      	cmp	r6, r5
 80185a0:	dc36      	bgt.n	8018610 <__gethex+0x320>
 80185a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185a6:	2b02      	cmp	r3, #2
 80185a8:	d02a      	beq.n	8018600 <__gethex+0x310>
 80185aa:	2b03      	cmp	r3, #3
 80185ac:	d02c      	beq.n	8018608 <__gethex+0x318>
 80185ae:	2b01      	cmp	r3, #1
 80185b0:	d11c      	bne.n	80185ec <__gethex+0x2fc>
 80185b2:	42ae      	cmp	r6, r5
 80185b4:	d11a      	bne.n	80185ec <__gethex+0x2fc>
 80185b6:	2e01      	cmp	r6, #1
 80185b8:	d112      	bne.n	80185e0 <__gethex+0x2f0>
 80185ba:	9a04      	ldr	r2, [sp, #16]
 80185bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80185c0:	6013      	str	r3, [r2, #0]
 80185c2:	2301      	movs	r3, #1
 80185c4:	6123      	str	r3, [r4, #16]
 80185c6:	f8c9 3000 	str.w	r3, [r9]
 80185ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80185cc:	2762      	movs	r7, #98	; 0x62
 80185ce:	601c      	str	r4, [r3, #0]
 80185d0:	e723      	b.n	801841a <__gethex+0x12a>
 80185d2:	bf00      	nop
 80185d4:	080734fc 	.word	0x080734fc
 80185d8:	08073422 	.word	0x08073422
 80185dc:	08073494 	.word	0x08073494
 80185e0:	1e71      	subs	r1, r6, #1
 80185e2:	4620      	mov	r0, r4
 80185e4:	f000 ff2e 	bl	8019444 <__any_on>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	d1e6      	bne.n	80185ba <__gethex+0x2ca>
 80185ec:	ee18 0a10 	vmov	r0, s16
 80185f0:	4621      	mov	r1, r4
 80185f2:	f000 fac7 	bl	8018b84 <_Bfree>
 80185f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80185f8:	2300      	movs	r3, #0
 80185fa:	6013      	str	r3, [r2, #0]
 80185fc:	2750      	movs	r7, #80	; 0x50
 80185fe:	e70c      	b.n	801841a <__gethex+0x12a>
 8018600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018602:	2b00      	cmp	r3, #0
 8018604:	d1f2      	bne.n	80185ec <__gethex+0x2fc>
 8018606:	e7d8      	b.n	80185ba <__gethex+0x2ca>
 8018608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801860a:	2b00      	cmp	r3, #0
 801860c:	d1d5      	bne.n	80185ba <__gethex+0x2ca>
 801860e:	e7ed      	b.n	80185ec <__gethex+0x2fc>
 8018610:	1e6f      	subs	r7, r5, #1
 8018612:	f1ba 0f00 	cmp.w	sl, #0
 8018616:	d131      	bne.n	801867c <__gethex+0x38c>
 8018618:	b127      	cbz	r7, 8018624 <__gethex+0x334>
 801861a:	4639      	mov	r1, r7
 801861c:	4620      	mov	r0, r4
 801861e:	f000 ff11 	bl	8019444 <__any_on>
 8018622:	4682      	mov	sl, r0
 8018624:	117b      	asrs	r3, r7, #5
 8018626:	2101      	movs	r1, #1
 8018628:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801862c:	f007 071f 	and.w	r7, r7, #31
 8018630:	fa01 f707 	lsl.w	r7, r1, r7
 8018634:	421f      	tst	r7, r3
 8018636:	4629      	mov	r1, r5
 8018638:	4620      	mov	r0, r4
 801863a:	bf18      	it	ne
 801863c:	f04a 0a02 	orrne.w	sl, sl, #2
 8018640:	1b76      	subs	r6, r6, r5
 8018642:	f7ff fdee 	bl	8018222 <rshift>
 8018646:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801864a:	2702      	movs	r7, #2
 801864c:	f1ba 0f00 	cmp.w	sl, #0
 8018650:	d048      	beq.n	80186e4 <__gethex+0x3f4>
 8018652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018656:	2b02      	cmp	r3, #2
 8018658:	d015      	beq.n	8018686 <__gethex+0x396>
 801865a:	2b03      	cmp	r3, #3
 801865c:	d017      	beq.n	801868e <__gethex+0x39e>
 801865e:	2b01      	cmp	r3, #1
 8018660:	d109      	bne.n	8018676 <__gethex+0x386>
 8018662:	f01a 0f02 	tst.w	sl, #2
 8018666:	d006      	beq.n	8018676 <__gethex+0x386>
 8018668:	f8d9 0000 	ldr.w	r0, [r9]
 801866c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018670:	f01a 0f01 	tst.w	sl, #1
 8018674:	d10e      	bne.n	8018694 <__gethex+0x3a4>
 8018676:	f047 0710 	orr.w	r7, r7, #16
 801867a:	e033      	b.n	80186e4 <__gethex+0x3f4>
 801867c:	f04f 0a01 	mov.w	sl, #1
 8018680:	e7d0      	b.n	8018624 <__gethex+0x334>
 8018682:	2701      	movs	r7, #1
 8018684:	e7e2      	b.n	801864c <__gethex+0x35c>
 8018686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018688:	f1c3 0301 	rsb	r3, r3, #1
 801868c:	9315      	str	r3, [sp, #84]	; 0x54
 801868e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018690:	2b00      	cmp	r3, #0
 8018692:	d0f0      	beq.n	8018676 <__gethex+0x386>
 8018694:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018698:	f104 0314 	add.w	r3, r4, #20
 801869c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80186a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80186a4:	f04f 0c00 	mov.w	ip, #0
 80186a8:	4618      	mov	r0, r3
 80186aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80186ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80186b2:	d01c      	beq.n	80186ee <__gethex+0x3fe>
 80186b4:	3201      	adds	r2, #1
 80186b6:	6002      	str	r2, [r0, #0]
 80186b8:	2f02      	cmp	r7, #2
 80186ba:	f104 0314 	add.w	r3, r4, #20
 80186be:	d13f      	bne.n	8018740 <__gethex+0x450>
 80186c0:	f8d8 2000 	ldr.w	r2, [r8]
 80186c4:	3a01      	subs	r2, #1
 80186c6:	42b2      	cmp	r2, r6
 80186c8:	d10a      	bne.n	80186e0 <__gethex+0x3f0>
 80186ca:	1171      	asrs	r1, r6, #5
 80186cc:	2201      	movs	r2, #1
 80186ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80186d2:	f006 061f 	and.w	r6, r6, #31
 80186d6:	fa02 f606 	lsl.w	r6, r2, r6
 80186da:	421e      	tst	r6, r3
 80186dc:	bf18      	it	ne
 80186de:	4617      	movne	r7, r2
 80186e0:	f047 0720 	orr.w	r7, r7, #32
 80186e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186e6:	601c      	str	r4, [r3, #0]
 80186e8:	9b04      	ldr	r3, [sp, #16]
 80186ea:	601d      	str	r5, [r3, #0]
 80186ec:	e695      	b.n	801841a <__gethex+0x12a>
 80186ee:	4299      	cmp	r1, r3
 80186f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80186f4:	d8d8      	bhi.n	80186a8 <__gethex+0x3b8>
 80186f6:	68a3      	ldr	r3, [r4, #8]
 80186f8:	459b      	cmp	fp, r3
 80186fa:	db19      	blt.n	8018730 <__gethex+0x440>
 80186fc:	6861      	ldr	r1, [r4, #4]
 80186fe:	ee18 0a10 	vmov	r0, s16
 8018702:	3101      	adds	r1, #1
 8018704:	f000 f9fe 	bl	8018b04 <_Balloc>
 8018708:	4681      	mov	r9, r0
 801870a:	b918      	cbnz	r0, 8018714 <__gethex+0x424>
 801870c:	4b1a      	ldr	r3, [pc, #104]	; (8018778 <__gethex+0x488>)
 801870e:	4602      	mov	r2, r0
 8018710:	2184      	movs	r1, #132	; 0x84
 8018712:	e6a8      	b.n	8018466 <__gethex+0x176>
 8018714:	6922      	ldr	r2, [r4, #16]
 8018716:	3202      	adds	r2, #2
 8018718:	f104 010c 	add.w	r1, r4, #12
 801871c:	0092      	lsls	r2, r2, #2
 801871e:	300c      	adds	r0, #12
 8018720:	f7fc f8e0 	bl	80148e4 <memcpy>
 8018724:	4621      	mov	r1, r4
 8018726:	ee18 0a10 	vmov	r0, s16
 801872a:	f000 fa2b 	bl	8018b84 <_Bfree>
 801872e:	464c      	mov	r4, r9
 8018730:	6923      	ldr	r3, [r4, #16]
 8018732:	1c5a      	adds	r2, r3, #1
 8018734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018738:	6122      	str	r2, [r4, #16]
 801873a:	2201      	movs	r2, #1
 801873c:	615a      	str	r2, [r3, #20]
 801873e:	e7bb      	b.n	80186b8 <__gethex+0x3c8>
 8018740:	6922      	ldr	r2, [r4, #16]
 8018742:	455a      	cmp	r2, fp
 8018744:	dd0b      	ble.n	801875e <__gethex+0x46e>
 8018746:	2101      	movs	r1, #1
 8018748:	4620      	mov	r0, r4
 801874a:	f7ff fd6a 	bl	8018222 <rshift>
 801874e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018752:	3501      	adds	r5, #1
 8018754:	42ab      	cmp	r3, r5
 8018756:	f6ff aed0 	blt.w	80184fa <__gethex+0x20a>
 801875a:	2701      	movs	r7, #1
 801875c:	e7c0      	b.n	80186e0 <__gethex+0x3f0>
 801875e:	f016 061f 	ands.w	r6, r6, #31
 8018762:	d0fa      	beq.n	801875a <__gethex+0x46a>
 8018764:	4453      	add	r3, sl
 8018766:	f1c6 0620 	rsb	r6, r6, #32
 801876a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801876e:	f000 fabb 	bl	8018ce8 <__hi0bits>
 8018772:	42b0      	cmp	r0, r6
 8018774:	dbe7      	blt.n	8018746 <__gethex+0x456>
 8018776:	e7f0      	b.n	801875a <__gethex+0x46a>
 8018778:	08073422 	.word	0x08073422

0801877c <L_shift>:
 801877c:	f1c2 0208 	rsb	r2, r2, #8
 8018780:	0092      	lsls	r2, r2, #2
 8018782:	b570      	push	{r4, r5, r6, lr}
 8018784:	f1c2 0620 	rsb	r6, r2, #32
 8018788:	6843      	ldr	r3, [r0, #4]
 801878a:	6804      	ldr	r4, [r0, #0]
 801878c:	fa03 f506 	lsl.w	r5, r3, r6
 8018790:	432c      	orrs	r4, r5
 8018792:	40d3      	lsrs	r3, r2
 8018794:	6004      	str	r4, [r0, #0]
 8018796:	f840 3f04 	str.w	r3, [r0, #4]!
 801879a:	4288      	cmp	r0, r1
 801879c:	d3f4      	bcc.n	8018788 <L_shift+0xc>
 801879e:	bd70      	pop	{r4, r5, r6, pc}

080187a0 <__match>:
 80187a0:	b530      	push	{r4, r5, lr}
 80187a2:	6803      	ldr	r3, [r0, #0]
 80187a4:	3301      	adds	r3, #1
 80187a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187aa:	b914      	cbnz	r4, 80187b2 <__match+0x12>
 80187ac:	6003      	str	r3, [r0, #0]
 80187ae:	2001      	movs	r0, #1
 80187b0:	bd30      	pop	{r4, r5, pc}
 80187b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80187ba:	2d19      	cmp	r5, #25
 80187bc:	bf98      	it	ls
 80187be:	3220      	addls	r2, #32
 80187c0:	42a2      	cmp	r2, r4
 80187c2:	d0f0      	beq.n	80187a6 <__match+0x6>
 80187c4:	2000      	movs	r0, #0
 80187c6:	e7f3      	b.n	80187b0 <__match+0x10>

080187c8 <__hexnan>:
 80187c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187cc:	680b      	ldr	r3, [r1, #0]
 80187ce:	115e      	asrs	r6, r3, #5
 80187d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80187d4:	f013 031f 	ands.w	r3, r3, #31
 80187d8:	b087      	sub	sp, #28
 80187da:	bf18      	it	ne
 80187dc:	3604      	addne	r6, #4
 80187de:	2500      	movs	r5, #0
 80187e0:	1f37      	subs	r7, r6, #4
 80187e2:	4690      	mov	r8, r2
 80187e4:	6802      	ldr	r2, [r0, #0]
 80187e6:	9301      	str	r3, [sp, #4]
 80187e8:	4682      	mov	sl, r0
 80187ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80187ee:	46b9      	mov	r9, r7
 80187f0:	463c      	mov	r4, r7
 80187f2:	9502      	str	r5, [sp, #8]
 80187f4:	46ab      	mov	fp, r5
 80187f6:	7851      	ldrb	r1, [r2, #1]
 80187f8:	1c53      	adds	r3, r2, #1
 80187fa:	9303      	str	r3, [sp, #12]
 80187fc:	b341      	cbz	r1, 8018850 <__hexnan+0x88>
 80187fe:	4608      	mov	r0, r1
 8018800:	9205      	str	r2, [sp, #20]
 8018802:	9104      	str	r1, [sp, #16]
 8018804:	f7ff fd5f 	bl	80182c6 <__hexdig_fun>
 8018808:	2800      	cmp	r0, #0
 801880a:	d14f      	bne.n	80188ac <__hexnan+0xe4>
 801880c:	9904      	ldr	r1, [sp, #16]
 801880e:	9a05      	ldr	r2, [sp, #20]
 8018810:	2920      	cmp	r1, #32
 8018812:	d818      	bhi.n	8018846 <__hexnan+0x7e>
 8018814:	9b02      	ldr	r3, [sp, #8]
 8018816:	459b      	cmp	fp, r3
 8018818:	dd13      	ble.n	8018842 <__hexnan+0x7a>
 801881a:	454c      	cmp	r4, r9
 801881c:	d206      	bcs.n	801882c <__hexnan+0x64>
 801881e:	2d07      	cmp	r5, #7
 8018820:	dc04      	bgt.n	801882c <__hexnan+0x64>
 8018822:	462a      	mov	r2, r5
 8018824:	4649      	mov	r1, r9
 8018826:	4620      	mov	r0, r4
 8018828:	f7ff ffa8 	bl	801877c <L_shift>
 801882c:	4544      	cmp	r4, r8
 801882e:	d950      	bls.n	80188d2 <__hexnan+0x10a>
 8018830:	2300      	movs	r3, #0
 8018832:	f1a4 0904 	sub.w	r9, r4, #4
 8018836:	f844 3c04 	str.w	r3, [r4, #-4]
 801883a:	f8cd b008 	str.w	fp, [sp, #8]
 801883e:	464c      	mov	r4, r9
 8018840:	461d      	mov	r5, r3
 8018842:	9a03      	ldr	r2, [sp, #12]
 8018844:	e7d7      	b.n	80187f6 <__hexnan+0x2e>
 8018846:	2929      	cmp	r1, #41	; 0x29
 8018848:	d156      	bne.n	80188f8 <__hexnan+0x130>
 801884a:	3202      	adds	r2, #2
 801884c:	f8ca 2000 	str.w	r2, [sl]
 8018850:	f1bb 0f00 	cmp.w	fp, #0
 8018854:	d050      	beq.n	80188f8 <__hexnan+0x130>
 8018856:	454c      	cmp	r4, r9
 8018858:	d206      	bcs.n	8018868 <__hexnan+0xa0>
 801885a:	2d07      	cmp	r5, #7
 801885c:	dc04      	bgt.n	8018868 <__hexnan+0xa0>
 801885e:	462a      	mov	r2, r5
 8018860:	4649      	mov	r1, r9
 8018862:	4620      	mov	r0, r4
 8018864:	f7ff ff8a 	bl	801877c <L_shift>
 8018868:	4544      	cmp	r4, r8
 801886a:	d934      	bls.n	80188d6 <__hexnan+0x10e>
 801886c:	f1a8 0204 	sub.w	r2, r8, #4
 8018870:	4623      	mov	r3, r4
 8018872:	f853 1b04 	ldr.w	r1, [r3], #4
 8018876:	f842 1f04 	str.w	r1, [r2, #4]!
 801887a:	429f      	cmp	r7, r3
 801887c:	d2f9      	bcs.n	8018872 <__hexnan+0xaa>
 801887e:	1b3b      	subs	r3, r7, r4
 8018880:	f023 0303 	bic.w	r3, r3, #3
 8018884:	3304      	adds	r3, #4
 8018886:	3401      	adds	r4, #1
 8018888:	3e03      	subs	r6, #3
 801888a:	42b4      	cmp	r4, r6
 801888c:	bf88      	it	hi
 801888e:	2304      	movhi	r3, #4
 8018890:	4443      	add	r3, r8
 8018892:	2200      	movs	r2, #0
 8018894:	f843 2b04 	str.w	r2, [r3], #4
 8018898:	429f      	cmp	r7, r3
 801889a:	d2fb      	bcs.n	8018894 <__hexnan+0xcc>
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	b91b      	cbnz	r3, 80188a8 <__hexnan+0xe0>
 80188a0:	4547      	cmp	r7, r8
 80188a2:	d127      	bne.n	80188f4 <__hexnan+0x12c>
 80188a4:	2301      	movs	r3, #1
 80188a6:	603b      	str	r3, [r7, #0]
 80188a8:	2005      	movs	r0, #5
 80188aa:	e026      	b.n	80188fa <__hexnan+0x132>
 80188ac:	3501      	adds	r5, #1
 80188ae:	2d08      	cmp	r5, #8
 80188b0:	f10b 0b01 	add.w	fp, fp, #1
 80188b4:	dd06      	ble.n	80188c4 <__hexnan+0xfc>
 80188b6:	4544      	cmp	r4, r8
 80188b8:	d9c3      	bls.n	8018842 <__hexnan+0x7a>
 80188ba:	2300      	movs	r3, #0
 80188bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80188c0:	2501      	movs	r5, #1
 80188c2:	3c04      	subs	r4, #4
 80188c4:	6822      	ldr	r2, [r4, #0]
 80188c6:	f000 000f 	and.w	r0, r0, #15
 80188ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80188ce:	6022      	str	r2, [r4, #0]
 80188d0:	e7b7      	b.n	8018842 <__hexnan+0x7a>
 80188d2:	2508      	movs	r5, #8
 80188d4:	e7b5      	b.n	8018842 <__hexnan+0x7a>
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d0df      	beq.n	801889c <__hexnan+0xd4>
 80188dc:	f04f 32ff 	mov.w	r2, #4294967295
 80188e0:	f1c3 0320 	rsb	r3, r3, #32
 80188e4:	fa22 f303 	lsr.w	r3, r2, r3
 80188e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80188ec:	401a      	ands	r2, r3
 80188ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80188f2:	e7d3      	b.n	801889c <__hexnan+0xd4>
 80188f4:	3f04      	subs	r7, #4
 80188f6:	e7d1      	b.n	801889c <__hexnan+0xd4>
 80188f8:	2004      	movs	r0, #4
 80188fa:	b007      	add	sp, #28
 80188fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018900 <_findenv_r>:
 8018900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018904:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8018974 <_findenv_r+0x74>
 8018908:	4607      	mov	r7, r0
 801890a:	4689      	mov	r9, r1
 801890c:	4616      	mov	r6, r2
 801890e:	f001 fbf1 	bl	801a0f4 <__env_lock>
 8018912:	f8da 4000 	ldr.w	r4, [sl]
 8018916:	b134      	cbz	r4, 8018926 <_findenv_r+0x26>
 8018918:	464b      	mov	r3, r9
 801891a:	4698      	mov	r8, r3
 801891c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018920:	b13a      	cbz	r2, 8018932 <_findenv_r+0x32>
 8018922:	2a3d      	cmp	r2, #61	; 0x3d
 8018924:	d1f9      	bne.n	801891a <_findenv_r+0x1a>
 8018926:	4638      	mov	r0, r7
 8018928:	f001 fbea 	bl	801a100 <__env_unlock>
 801892c:	2000      	movs	r0, #0
 801892e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018932:	eba8 0809 	sub.w	r8, r8, r9
 8018936:	46a3      	mov	fp, r4
 8018938:	f854 0b04 	ldr.w	r0, [r4], #4
 801893c:	2800      	cmp	r0, #0
 801893e:	d0f2      	beq.n	8018926 <_findenv_r+0x26>
 8018940:	4642      	mov	r2, r8
 8018942:	4649      	mov	r1, r9
 8018944:	f001 fafc 	bl	8019f40 <strncmp>
 8018948:	2800      	cmp	r0, #0
 801894a:	d1f4      	bne.n	8018936 <_findenv_r+0x36>
 801894c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018950:	eb03 0508 	add.w	r5, r3, r8
 8018954:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018958:	2b3d      	cmp	r3, #61	; 0x3d
 801895a:	d1ec      	bne.n	8018936 <_findenv_r+0x36>
 801895c:	f8da 3000 	ldr.w	r3, [sl]
 8018960:	ebab 0303 	sub.w	r3, fp, r3
 8018964:	109b      	asrs	r3, r3, #2
 8018966:	4638      	mov	r0, r7
 8018968:	6033      	str	r3, [r6, #0]
 801896a:	f001 fbc9 	bl	801a100 <__env_unlock>
 801896e:	1c68      	adds	r0, r5, #1
 8018970:	e7dd      	b.n	801892e <_findenv_r+0x2e>
 8018972:	bf00      	nop
 8018974:	200000a4 	.word	0x200000a4

08018978 <_getenv_r>:
 8018978:	b507      	push	{r0, r1, r2, lr}
 801897a:	aa01      	add	r2, sp, #4
 801897c:	f7ff ffc0 	bl	8018900 <_findenv_r>
 8018980:	b003      	add	sp, #12
 8018982:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018988 <__gettzinfo>:
 8018988:	4800      	ldr	r0, [pc, #0]	; (801898c <__gettzinfo+0x4>)
 801898a:	4770      	bx	lr
 801898c:	200002b8 	.word	0x200002b8

08018990 <_localeconv_r>:
 8018990:	4800      	ldr	r0, [pc, #0]	; (8018994 <_localeconv_r+0x4>)
 8018992:	4770      	bx	lr
 8018994:	20000404 	.word	0x20000404

08018998 <__retarget_lock_init_recursive>:
 8018998:	4770      	bx	lr

0801899a <__retarget_lock_acquire>:
 801899a:	4770      	bx	lr

0801899c <__retarget_lock_acquire_recursive>:
 801899c:	4770      	bx	lr

0801899e <__retarget_lock_release>:
 801899e:	4770      	bx	lr

080189a0 <__retarget_lock_release_recursive>:
 80189a0:	4770      	bx	lr
	...

080189a4 <_lseek_r>:
 80189a4:	b538      	push	{r3, r4, r5, lr}
 80189a6:	4d07      	ldr	r5, [pc, #28]	; (80189c4 <_lseek_r+0x20>)
 80189a8:	4604      	mov	r4, r0
 80189aa:	4608      	mov	r0, r1
 80189ac:	4611      	mov	r1, r2
 80189ae:	2200      	movs	r2, #0
 80189b0:	602a      	str	r2, [r5, #0]
 80189b2:	461a      	mov	r2, r3
 80189b4:	f7ec f8a8 	bl	8004b08 <_lseek>
 80189b8:	1c43      	adds	r3, r0, #1
 80189ba:	d102      	bne.n	80189c2 <_lseek_r+0x1e>
 80189bc:	682b      	ldr	r3, [r5, #0]
 80189be:	b103      	cbz	r3, 80189c2 <_lseek_r+0x1e>
 80189c0:	6023      	str	r3, [r4, #0]
 80189c2:	bd38      	pop	{r3, r4, r5, pc}
 80189c4:	20005da8 	.word	0x20005da8

080189c8 <__swhatbuf_r>:
 80189c8:	b570      	push	{r4, r5, r6, lr}
 80189ca:	460e      	mov	r6, r1
 80189cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189d0:	2900      	cmp	r1, #0
 80189d2:	b096      	sub	sp, #88	; 0x58
 80189d4:	4614      	mov	r4, r2
 80189d6:	461d      	mov	r5, r3
 80189d8:	da08      	bge.n	80189ec <__swhatbuf_r+0x24>
 80189da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80189de:	2200      	movs	r2, #0
 80189e0:	602a      	str	r2, [r5, #0]
 80189e2:	061a      	lsls	r2, r3, #24
 80189e4:	d410      	bmi.n	8018a08 <__swhatbuf_r+0x40>
 80189e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80189ea:	e00e      	b.n	8018a0a <__swhatbuf_r+0x42>
 80189ec:	466a      	mov	r2, sp
 80189ee:	f001 fb8d 	bl	801a10c <_fstat_r>
 80189f2:	2800      	cmp	r0, #0
 80189f4:	dbf1      	blt.n	80189da <__swhatbuf_r+0x12>
 80189f6:	9a01      	ldr	r2, [sp, #4]
 80189f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80189fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018a00:	425a      	negs	r2, r3
 8018a02:	415a      	adcs	r2, r3
 8018a04:	602a      	str	r2, [r5, #0]
 8018a06:	e7ee      	b.n	80189e6 <__swhatbuf_r+0x1e>
 8018a08:	2340      	movs	r3, #64	; 0x40
 8018a0a:	2000      	movs	r0, #0
 8018a0c:	6023      	str	r3, [r4, #0]
 8018a0e:	b016      	add	sp, #88	; 0x58
 8018a10:	bd70      	pop	{r4, r5, r6, pc}
	...

08018a14 <__smakebuf_r>:
 8018a14:	898b      	ldrh	r3, [r1, #12]
 8018a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018a18:	079d      	lsls	r5, r3, #30
 8018a1a:	4606      	mov	r6, r0
 8018a1c:	460c      	mov	r4, r1
 8018a1e:	d507      	bpl.n	8018a30 <__smakebuf_r+0x1c>
 8018a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018a24:	6023      	str	r3, [r4, #0]
 8018a26:	6123      	str	r3, [r4, #16]
 8018a28:	2301      	movs	r3, #1
 8018a2a:	6163      	str	r3, [r4, #20]
 8018a2c:	b002      	add	sp, #8
 8018a2e:	bd70      	pop	{r4, r5, r6, pc}
 8018a30:	ab01      	add	r3, sp, #4
 8018a32:	466a      	mov	r2, sp
 8018a34:	f7ff ffc8 	bl	80189c8 <__swhatbuf_r>
 8018a38:	9900      	ldr	r1, [sp, #0]
 8018a3a:	4605      	mov	r5, r0
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f7fc fa45 	bl	8014ecc <_malloc_r>
 8018a42:	b948      	cbnz	r0, 8018a58 <__smakebuf_r+0x44>
 8018a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a48:	059a      	lsls	r2, r3, #22
 8018a4a:	d4ef      	bmi.n	8018a2c <__smakebuf_r+0x18>
 8018a4c:	f023 0303 	bic.w	r3, r3, #3
 8018a50:	f043 0302 	orr.w	r3, r3, #2
 8018a54:	81a3      	strh	r3, [r4, #12]
 8018a56:	e7e3      	b.n	8018a20 <__smakebuf_r+0xc>
 8018a58:	4b0d      	ldr	r3, [pc, #52]	; (8018a90 <__smakebuf_r+0x7c>)
 8018a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018a5c:	89a3      	ldrh	r3, [r4, #12]
 8018a5e:	6020      	str	r0, [r4, #0]
 8018a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a64:	81a3      	strh	r3, [r4, #12]
 8018a66:	9b00      	ldr	r3, [sp, #0]
 8018a68:	6163      	str	r3, [r4, #20]
 8018a6a:	9b01      	ldr	r3, [sp, #4]
 8018a6c:	6120      	str	r0, [r4, #16]
 8018a6e:	b15b      	cbz	r3, 8018a88 <__smakebuf_r+0x74>
 8018a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a74:	4630      	mov	r0, r6
 8018a76:	f001 fb5b 	bl	801a130 <_isatty_r>
 8018a7a:	b128      	cbz	r0, 8018a88 <__smakebuf_r+0x74>
 8018a7c:	89a3      	ldrh	r3, [r4, #12]
 8018a7e:	f023 0303 	bic.w	r3, r3, #3
 8018a82:	f043 0301 	orr.w	r3, r3, #1
 8018a86:	81a3      	strh	r3, [r4, #12]
 8018a88:	89a0      	ldrh	r0, [r4, #12]
 8018a8a:	4305      	orrs	r5, r0
 8018a8c:	81a5      	strh	r5, [r4, #12]
 8018a8e:	e7cd      	b.n	8018a2c <__smakebuf_r+0x18>
 8018a90:	08018081 	.word	0x08018081

08018a94 <__ascii_mbtowc>:
 8018a94:	b082      	sub	sp, #8
 8018a96:	b901      	cbnz	r1, 8018a9a <__ascii_mbtowc+0x6>
 8018a98:	a901      	add	r1, sp, #4
 8018a9a:	b142      	cbz	r2, 8018aae <__ascii_mbtowc+0x1a>
 8018a9c:	b14b      	cbz	r3, 8018ab2 <__ascii_mbtowc+0x1e>
 8018a9e:	7813      	ldrb	r3, [r2, #0]
 8018aa0:	600b      	str	r3, [r1, #0]
 8018aa2:	7812      	ldrb	r2, [r2, #0]
 8018aa4:	1e10      	subs	r0, r2, #0
 8018aa6:	bf18      	it	ne
 8018aa8:	2001      	movne	r0, #1
 8018aaa:	b002      	add	sp, #8
 8018aac:	4770      	bx	lr
 8018aae:	4610      	mov	r0, r2
 8018ab0:	e7fb      	b.n	8018aaa <__ascii_mbtowc+0x16>
 8018ab2:	f06f 0001 	mvn.w	r0, #1
 8018ab6:	e7f8      	b.n	8018aaa <__ascii_mbtowc+0x16>

08018ab8 <memmove>:
 8018ab8:	4288      	cmp	r0, r1
 8018aba:	b510      	push	{r4, lr}
 8018abc:	eb01 0402 	add.w	r4, r1, r2
 8018ac0:	d902      	bls.n	8018ac8 <memmove+0x10>
 8018ac2:	4284      	cmp	r4, r0
 8018ac4:	4623      	mov	r3, r4
 8018ac6:	d807      	bhi.n	8018ad8 <memmove+0x20>
 8018ac8:	1e43      	subs	r3, r0, #1
 8018aca:	42a1      	cmp	r1, r4
 8018acc:	d008      	beq.n	8018ae0 <memmove+0x28>
 8018ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ad6:	e7f8      	b.n	8018aca <memmove+0x12>
 8018ad8:	4402      	add	r2, r0
 8018ada:	4601      	mov	r1, r0
 8018adc:	428a      	cmp	r2, r1
 8018ade:	d100      	bne.n	8018ae2 <memmove+0x2a>
 8018ae0:	bd10      	pop	{r4, pc}
 8018ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018aea:	e7f7      	b.n	8018adc <memmove+0x24>

08018aec <__malloc_lock>:
 8018aec:	4801      	ldr	r0, [pc, #4]	; (8018af4 <__malloc_lock+0x8>)
 8018aee:	f7ff bf55 	b.w	801899c <__retarget_lock_acquire_recursive>
 8018af2:	bf00      	nop
 8018af4:	20005da1 	.word	0x20005da1

08018af8 <__malloc_unlock>:
 8018af8:	4801      	ldr	r0, [pc, #4]	; (8018b00 <__malloc_unlock+0x8>)
 8018afa:	f7ff bf51 	b.w	80189a0 <__retarget_lock_release_recursive>
 8018afe:	bf00      	nop
 8018b00:	20005da1 	.word	0x20005da1

08018b04 <_Balloc>:
 8018b04:	b570      	push	{r4, r5, r6, lr}
 8018b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018b08:	4604      	mov	r4, r0
 8018b0a:	460d      	mov	r5, r1
 8018b0c:	b976      	cbnz	r6, 8018b2c <_Balloc+0x28>
 8018b0e:	2010      	movs	r0, #16
 8018b10:	f7fb fed8 	bl	80148c4 <malloc>
 8018b14:	4602      	mov	r2, r0
 8018b16:	6260      	str	r0, [r4, #36]	; 0x24
 8018b18:	b920      	cbnz	r0, 8018b24 <_Balloc+0x20>
 8018b1a:	4b18      	ldr	r3, [pc, #96]	; (8018b7c <_Balloc+0x78>)
 8018b1c:	4818      	ldr	r0, [pc, #96]	; (8018b80 <_Balloc+0x7c>)
 8018b1e:	2166      	movs	r1, #102	; 0x66
 8018b20:	f7fb fe6e 	bl	8014800 <__assert_func>
 8018b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018b28:	6006      	str	r6, [r0, #0]
 8018b2a:	60c6      	str	r6, [r0, #12]
 8018b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018b2e:	68f3      	ldr	r3, [r6, #12]
 8018b30:	b183      	cbz	r3, 8018b54 <_Balloc+0x50>
 8018b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018b3a:	b9b8      	cbnz	r0, 8018b6c <_Balloc+0x68>
 8018b3c:	2101      	movs	r1, #1
 8018b3e:	fa01 f605 	lsl.w	r6, r1, r5
 8018b42:	1d72      	adds	r2, r6, #5
 8018b44:	0092      	lsls	r2, r2, #2
 8018b46:	4620      	mov	r0, r4
 8018b48:	f000 fc9d 	bl	8019486 <_calloc_r>
 8018b4c:	b160      	cbz	r0, 8018b68 <_Balloc+0x64>
 8018b4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018b52:	e00e      	b.n	8018b72 <_Balloc+0x6e>
 8018b54:	2221      	movs	r2, #33	; 0x21
 8018b56:	2104      	movs	r1, #4
 8018b58:	4620      	mov	r0, r4
 8018b5a:	f000 fc94 	bl	8019486 <_calloc_r>
 8018b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b60:	60f0      	str	r0, [r6, #12]
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1e4      	bne.n	8018b32 <_Balloc+0x2e>
 8018b68:	2000      	movs	r0, #0
 8018b6a:	bd70      	pop	{r4, r5, r6, pc}
 8018b6c:	6802      	ldr	r2, [r0, #0]
 8018b6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018b72:	2300      	movs	r3, #0
 8018b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018b78:	e7f7      	b.n	8018b6a <_Balloc+0x66>
 8018b7a:	bf00      	nop
 8018b7c:	0807301c 	.word	0x0807301c
 8018b80:	08073570 	.word	0x08073570

08018b84 <_Bfree>:
 8018b84:	b570      	push	{r4, r5, r6, lr}
 8018b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018b88:	4605      	mov	r5, r0
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	b976      	cbnz	r6, 8018bac <_Bfree+0x28>
 8018b8e:	2010      	movs	r0, #16
 8018b90:	f7fb fe98 	bl	80148c4 <malloc>
 8018b94:	4602      	mov	r2, r0
 8018b96:	6268      	str	r0, [r5, #36]	; 0x24
 8018b98:	b920      	cbnz	r0, 8018ba4 <_Bfree+0x20>
 8018b9a:	4b09      	ldr	r3, [pc, #36]	; (8018bc0 <_Bfree+0x3c>)
 8018b9c:	4809      	ldr	r0, [pc, #36]	; (8018bc4 <_Bfree+0x40>)
 8018b9e:	218a      	movs	r1, #138	; 0x8a
 8018ba0:	f7fb fe2e 	bl	8014800 <__assert_func>
 8018ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ba8:	6006      	str	r6, [r0, #0]
 8018baa:	60c6      	str	r6, [r0, #12]
 8018bac:	b13c      	cbz	r4, 8018bbe <_Bfree+0x3a>
 8018bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018bb0:	6862      	ldr	r2, [r4, #4]
 8018bb2:	68db      	ldr	r3, [r3, #12]
 8018bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018bb8:	6021      	str	r1, [r4, #0]
 8018bba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
 8018bc0:	0807301c 	.word	0x0807301c
 8018bc4:	08073570 	.word	0x08073570

08018bc8 <__multadd>:
 8018bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bcc:	690d      	ldr	r5, [r1, #16]
 8018bce:	4607      	mov	r7, r0
 8018bd0:	460c      	mov	r4, r1
 8018bd2:	461e      	mov	r6, r3
 8018bd4:	f101 0c14 	add.w	ip, r1, #20
 8018bd8:	2000      	movs	r0, #0
 8018bda:	f8dc 3000 	ldr.w	r3, [ip]
 8018bde:	b299      	uxth	r1, r3
 8018be0:	fb02 6101 	mla	r1, r2, r1, r6
 8018be4:	0c1e      	lsrs	r6, r3, #16
 8018be6:	0c0b      	lsrs	r3, r1, #16
 8018be8:	fb02 3306 	mla	r3, r2, r6, r3
 8018bec:	b289      	uxth	r1, r1
 8018bee:	3001      	adds	r0, #1
 8018bf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018bf4:	4285      	cmp	r5, r0
 8018bf6:	f84c 1b04 	str.w	r1, [ip], #4
 8018bfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018bfe:	dcec      	bgt.n	8018bda <__multadd+0x12>
 8018c00:	b30e      	cbz	r6, 8018c46 <__multadd+0x7e>
 8018c02:	68a3      	ldr	r3, [r4, #8]
 8018c04:	42ab      	cmp	r3, r5
 8018c06:	dc19      	bgt.n	8018c3c <__multadd+0x74>
 8018c08:	6861      	ldr	r1, [r4, #4]
 8018c0a:	4638      	mov	r0, r7
 8018c0c:	3101      	adds	r1, #1
 8018c0e:	f7ff ff79 	bl	8018b04 <_Balloc>
 8018c12:	4680      	mov	r8, r0
 8018c14:	b928      	cbnz	r0, 8018c22 <__multadd+0x5a>
 8018c16:	4602      	mov	r2, r0
 8018c18:	4b0c      	ldr	r3, [pc, #48]	; (8018c4c <__multadd+0x84>)
 8018c1a:	480d      	ldr	r0, [pc, #52]	; (8018c50 <__multadd+0x88>)
 8018c1c:	21b5      	movs	r1, #181	; 0xb5
 8018c1e:	f7fb fdef 	bl	8014800 <__assert_func>
 8018c22:	6922      	ldr	r2, [r4, #16]
 8018c24:	3202      	adds	r2, #2
 8018c26:	f104 010c 	add.w	r1, r4, #12
 8018c2a:	0092      	lsls	r2, r2, #2
 8018c2c:	300c      	adds	r0, #12
 8018c2e:	f7fb fe59 	bl	80148e4 <memcpy>
 8018c32:	4621      	mov	r1, r4
 8018c34:	4638      	mov	r0, r7
 8018c36:	f7ff ffa5 	bl	8018b84 <_Bfree>
 8018c3a:	4644      	mov	r4, r8
 8018c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018c40:	3501      	adds	r5, #1
 8018c42:	615e      	str	r6, [r3, #20]
 8018c44:	6125      	str	r5, [r4, #16]
 8018c46:	4620      	mov	r0, r4
 8018c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c4c:	08073422 	.word	0x08073422
 8018c50:	08073570 	.word	0x08073570

08018c54 <__s2b>:
 8018c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c58:	460c      	mov	r4, r1
 8018c5a:	4615      	mov	r5, r2
 8018c5c:	461f      	mov	r7, r3
 8018c5e:	2209      	movs	r2, #9
 8018c60:	3308      	adds	r3, #8
 8018c62:	4606      	mov	r6, r0
 8018c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c68:	2100      	movs	r1, #0
 8018c6a:	2201      	movs	r2, #1
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	db09      	blt.n	8018c84 <__s2b+0x30>
 8018c70:	4630      	mov	r0, r6
 8018c72:	f7ff ff47 	bl	8018b04 <_Balloc>
 8018c76:	b940      	cbnz	r0, 8018c8a <__s2b+0x36>
 8018c78:	4602      	mov	r2, r0
 8018c7a:	4b19      	ldr	r3, [pc, #100]	; (8018ce0 <__s2b+0x8c>)
 8018c7c:	4819      	ldr	r0, [pc, #100]	; (8018ce4 <__s2b+0x90>)
 8018c7e:	21ce      	movs	r1, #206	; 0xce
 8018c80:	f7fb fdbe 	bl	8014800 <__assert_func>
 8018c84:	0052      	lsls	r2, r2, #1
 8018c86:	3101      	adds	r1, #1
 8018c88:	e7f0      	b.n	8018c6c <__s2b+0x18>
 8018c8a:	9b08      	ldr	r3, [sp, #32]
 8018c8c:	6143      	str	r3, [r0, #20]
 8018c8e:	2d09      	cmp	r5, #9
 8018c90:	f04f 0301 	mov.w	r3, #1
 8018c94:	6103      	str	r3, [r0, #16]
 8018c96:	dd16      	ble.n	8018cc6 <__s2b+0x72>
 8018c98:	f104 0909 	add.w	r9, r4, #9
 8018c9c:	46c8      	mov	r8, r9
 8018c9e:	442c      	add	r4, r5
 8018ca0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018ca4:	4601      	mov	r1, r0
 8018ca6:	3b30      	subs	r3, #48	; 0x30
 8018ca8:	220a      	movs	r2, #10
 8018caa:	4630      	mov	r0, r6
 8018cac:	f7ff ff8c 	bl	8018bc8 <__multadd>
 8018cb0:	45a0      	cmp	r8, r4
 8018cb2:	d1f5      	bne.n	8018ca0 <__s2b+0x4c>
 8018cb4:	f1a5 0408 	sub.w	r4, r5, #8
 8018cb8:	444c      	add	r4, r9
 8018cba:	1b2d      	subs	r5, r5, r4
 8018cbc:	1963      	adds	r3, r4, r5
 8018cbe:	42bb      	cmp	r3, r7
 8018cc0:	db04      	blt.n	8018ccc <__s2b+0x78>
 8018cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cc6:	340a      	adds	r4, #10
 8018cc8:	2509      	movs	r5, #9
 8018cca:	e7f6      	b.n	8018cba <__s2b+0x66>
 8018ccc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018cd0:	4601      	mov	r1, r0
 8018cd2:	3b30      	subs	r3, #48	; 0x30
 8018cd4:	220a      	movs	r2, #10
 8018cd6:	4630      	mov	r0, r6
 8018cd8:	f7ff ff76 	bl	8018bc8 <__multadd>
 8018cdc:	e7ee      	b.n	8018cbc <__s2b+0x68>
 8018cde:	bf00      	nop
 8018ce0:	08073422 	.word	0x08073422
 8018ce4:	08073570 	.word	0x08073570

08018ce8 <__hi0bits>:
 8018ce8:	0c03      	lsrs	r3, r0, #16
 8018cea:	041b      	lsls	r3, r3, #16
 8018cec:	b9d3      	cbnz	r3, 8018d24 <__hi0bits+0x3c>
 8018cee:	0400      	lsls	r0, r0, #16
 8018cf0:	2310      	movs	r3, #16
 8018cf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018cf6:	bf04      	itt	eq
 8018cf8:	0200      	lsleq	r0, r0, #8
 8018cfa:	3308      	addeq	r3, #8
 8018cfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018d00:	bf04      	itt	eq
 8018d02:	0100      	lsleq	r0, r0, #4
 8018d04:	3304      	addeq	r3, #4
 8018d06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018d0a:	bf04      	itt	eq
 8018d0c:	0080      	lsleq	r0, r0, #2
 8018d0e:	3302      	addeq	r3, #2
 8018d10:	2800      	cmp	r0, #0
 8018d12:	db05      	blt.n	8018d20 <__hi0bits+0x38>
 8018d14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018d18:	f103 0301 	add.w	r3, r3, #1
 8018d1c:	bf08      	it	eq
 8018d1e:	2320      	moveq	r3, #32
 8018d20:	4618      	mov	r0, r3
 8018d22:	4770      	bx	lr
 8018d24:	2300      	movs	r3, #0
 8018d26:	e7e4      	b.n	8018cf2 <__hi0bits+0xa>

08018d28 <__lo0bits>:
 8018d28:	6803      	ldr	r3, [r0, #0]
 8018d2a:	f013 0207 	ands.w	r2, r3, #7
 8018d2e:	4601      	mov	r1, r0
 8018d30:	d00b      	beq.n	8018d4a <__lo0bits+0x22>
 8018d32:	07da      	lsls	r2, r3, #31
 8018d34:	d423      	bmi.n	8018d7e <__lo0bits+0x56>
 8018d36:	0798      	lsls	r0, r3, #30
 8018d38:	bf49      	itett	mi
 8018d3a:	085b      	lsrmi	r3, r3, #1
 8018d3c:	089b      	lsrpl	r3, r3, #2
 8018d3e:	2001      	movmi	r0, #1
 8018d40:	600b      	strmi	r3, [r1, #0]
 8018d42:	bf5c      	itt	pl
 8018d44:	600b      	strpl	r3, [r1, #0]
 8018d46:	2002      	movpl	r0, #2
 8018d48:	4770      	bx	lr
 8018d4a:	b298      	uxth	r0, r3
 8018d4c:	b9a8      	cbnz	r0, 8018d7a <__lo0bits+0x52>
 8018d4e:	0c1b      	lsrs	r3, r3, #16
 8018d50:	2010      	movs	r0, #16
 8018d52:	b2da      	uxtb	r2, r3
 8018d54:	b90a      	cbnz	r2, 8018d5a <__lo0bits+0x32>
 8018d56:	3008      	adds	r0, #8
 8018d58:	0a1b      	lsrs	r3, r3, #8
 8018d5a:	071a      	lsls	r2, r3, #28
 8018d5c:	bf04      	itt	eq
 8018d5e:	091b      	lsreq	r3, r3, #4
 8018d60:	3004      	addeq	r0, #4
 8018d62:	079a      	lsls	r2, r3, #30
 8018d64:	bf04      	itt	eq
 8018d66:	089b      	lsreq	r3, r3, #2
 8018d68:	3002      	addeq	r0, #2
 8018d6a:	07da      	lsls	r2, r3, #31
 8018d6c:	d403      	bmi.n	8018d76 <__lo0bits+0x4e>
 8018d6e:	085b      	lsrs	r3, r3, #1
 8018d70:	f100 0001 	add.w	r0, r0, #1
 8018d74:	d005      	beq.n	8018d82 <__lo0bits+0x5a>
 8018d76:	600b      	str	r3, [r1, #0]
 8018d78:	4770      	bx	lr
 8018d7a:	4610      	mov	r0, r2
 8018d7c:	e7e9      	b.n	8018d52 <__lo0bits+0x2a>
 8018d7e:	2000      	movs	r0, #0
 8018d80:	4770      	bx	lr
 8018d82:	2020      	movs	r0, #32
 8018d84:	4770      	bx	lr
	...

08018d88 <__i2b>:
 8018d88:	b510      	push	{r4, lr}
 8018d8a:	460c      	mov	r4, r1
 8018d8c:	2101      	movs	r1, #1
 8018d8e:	f7ff feb9 	bl	8018b04 <_Balloc>
 8018d92:	4602      	mov	r2, r0
 8018d94:	b928      	cbnz	r0, 8018da2 <__i2b+0x1a>
 8018d96:	4b05      	ldr	r3, [pc, #20]	; (8018dac <__i2b+0x24>)
 8018d98:	4805      	ldr	r0, [pc, #20]	; (8018db0 <__i2b+0x28>)
 8018d9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018d9e:	f7fb fd2f 	bl	8014800 <__assert_func>
 8018da2:	2301      	movs	r3, #1
 8018da4:	6144      	str	r4, [r0, #20]
 8018da6:	6103      	str	r3, [r0, #16]
 8018da8:	bd10      	pop	{r4, pc}
 8018daa:	bf00      	nop
 8018dac:	08073422 	.word	0x08073422
 8018db0:	08073570 	.word	0x08073570

08018db4 <__multiply>:
 8018db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018db8:	4691      	mov	r9, r2
 8018dba:	690a      	ldr	r2, [r1, #16]
 8018dbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	bfb8      	it	lt
 8018dc4:	460b      	movlt	r3, r1
 8018dc6:	460c      	mov	r4, r1
 8018dc8:	bfbc      	itt	lt
 8018dca:	464c      	movlt	r4, r9
 8018dcc:	4699      	movlt	r9, r3
 8018dce:	6927      	ldr	r7, [r4, #16]
 8018dd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018dd4:	68a3      	ldr	r3, [r4, #8]
 8018dd6:	6861      	ldr	r1, [r4, #4]
 8018dd8:	eb07 060a 	add.w	r6, r7, sl
 8018ddc:	42b3      	cmp	r3, r6
 8018dde:	b085      	sub	sp, #20
 8018de0:	bfb8      	it	lt
 8018de2:	3101      	addlt	r1, #1
 8018de4:	f7ff fe8e 	bl	8018b04 <_Balloc>
 8018de8:	b930      	cbnz	r0, 8018df8 <__multiply+0x44>
 8018dea:	4602      	mov	r2, r0
 8018dec:	4b44      	ldr	r3, [pc, #272]	; (8018f00 <__multiply+0x14c>)
 8018dee:	4845      	ldr	r0, [pc, #276]	; (8018f04 <__multiply+0x150>)
 8018df0:	f240 115d 	movw	r1, #349	; 0x15d
 8018df4:	f7fb fd04 	bl	8014800 <__assert_func>
 8018df8:	f100 0514 	add.w	r5, r0, #20
 8018dfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018e00:	462b      	mov	r3, r5
 8018e02:	2200      	movs	r2, #0
 8018e04:	4543      	cmp	r3, r8
 8018e06:	d321      	bcc.n	8018e4c <__multiply+0x98>
 8018e08:	f104 0314 	add.w	r3, r4, #20
 8018e0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018e10:	f109 0314 	add.w	r3, r9, #20
 8018e14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018e18:	9202      	str	r2, [sp, #8]
 8018e1a:	1b3a      	subs	r2, r7, r4
 8018e1c:	3a15      	subs	r2, #21
 8018e1e:	f022 0203 	bic.w	r2, r2, #3
 8018e22:	3204      	adds	r2, #4
 8018e24:	f104 0115 	add.w	r1, r4, #21
 8018e28:	428f      	cmp	r7, r1
 8018e2a:	bf38      	it	cc
 8018e2c:	2204      	movcc	r2, #4
 8018e2e:	9201      	str	r2, [sp, #4]
 8018e30:	9a02      	ldr	r2, [sp, #8]
 8018e32:	9303      	str	r3, [sp, #12]
 8018e34:	429a      	cmp	r2, r3
 8018e36:	d80c      	bhi.n	8018e52 <__multiply+0x9e>
 8018e38:	2e00      	cmp	r6, #0
 8018e3a:	dd03      	ble.n	8018e44 <__multiply+0x90>
 8018e3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d05a      	beq.n	8018efa <__multiply+0x146>
 8018e44:	6106      	str	r6, [r0, #16]
 8018e46:	b005      	add	sp, #20
 8018e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e4c:	f843 2b04 	str.w	r2, [r3], #4
 8018e50:	e7d8      	b.n	8018e04 <__multiply+0x50>
 8018e52:	f8b3 a000 	ldrh.w	sl, [r3]
 8018e56:	f1ba 0f00 	cmp.w	sl, #0
 8018e5a:	d024      	beq.n	8018ea6 <__multiply+0xf2>
 8018e5c:	f104 0e14 	add.w	lr, r4, #20
 8018e60:	46a9      	mov	r9, r5
 8018e62:	f04f 0c00 	mov.w	ip, #0
 8018e66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018e6a:	f8d9 1000 	ldr.w	r1, [r9]
 8018e6e:	fa1f fb82 	uxth.w	fp, r2
 8018e72:	b289      	uxth	r1, r1
 8018e74:	fb0a 110b 	mla	r1, sl, fp, r1
 8018e78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8018e80:	4461      	add	r1, ip
 8018e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018e86:	fb0a c20b 	mla	r2, sl, fp, ip
 8018e8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e8e:	b289      	uxth	r1, r1
 8018e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018e94:	4577      	cmp	r7, lr
 8018e96:	f849 1b04 	str.w	r1, [r9], #4
 8018e9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018e9e:	d8e2      	bhi.n	8018e66 <__multiply+0xb2>
 8018ea0:	9a01      	ldr	r2, [sp, #4]
 8018ea2:	f845 c002 	str.w	ip, [r5, r2]
 8018ea6:	9a03      	ldr	r2, [sp, #12]
 8018ea8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018eac:	3304      	adds	r3, #4
 8018eae:	f1b9 0f00 	cmp.w	r9, #0
 8018eb2:	d020      	beq.n	8018ef6 <__multiply+0x142>
 8018eb4:	6829      	ldr	r1, [r5, #0]
 8018eb6:	f104 0c14 	add.w	ip, r4, #20
 8018eba:	46ae      	mov	lr, r5
 8018ebc:	f04f 0a00 	mov.w	sl, #0
 8018ec0:	f8bc b000 	ldrh.w	fp, [ip]
 8018ec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018ec8:	fb09 220b 	mla	r2, r9, fp, r2
 8018ecc:	4492      	add	sl, r2
 8018ece:	b289      	uxth	r1, r1
 8018ed0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018ed4:	f84e 1b04 	str.w	r1, [lr], #4
 8018ed8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018edc:	f8be 1000 	ldrh.w	r1, [lr]
 8018ee0:	0c12      	lsrs	r2, r2, #16
 8018ee2:	fb09 1102 	mla	r1, r9, r2, r1
 8018ee6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018eea:	4567      	cmp	r7, ip
 8018eec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018ef0:	d8e6      	bhi.n	8018ec0 <__multiply+0x10c>
 8018ef2:	9a01      	ldr	r2, [sp, #4]
 8018ef4:	50a9      	str	r1, [r5, r2]
 8018ef6:	3504      	adds	r5, #4
 8018ef8:	e79a      	b.n	8018e30 <__multiply+0x7c>
 8018efa:	3e01      	subs	r6, #1
 8018efc:	e79c      	b.n	8018e38 <__multiply+0x84>
 8018efe:	bf00      	nop
 8018f00:	08073422 	.word	0x08073422
 8018f04:	08073570 	.word	0x08073570

08018f08 <__pow5mult>:
 8018f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f0c:	4615      	mov	r5, r2
 8018f0e:	f012 0203 	ands.w	r2, r2, #3
 8018f12:	4606      	mov	r6, r0
 8018f14:	460f      	mov	r7, r1
 8018f16:	d007      	beq.n	8018f28 <__pow5mult+0x20>
 8018f18:	4c25      	ldr	r4, [pc, #148]	; (8018fb0 <__pow5mult+0xa8>)
 8018f1a:	3a01      	subs	r2, #1
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f22:	f7ff fe51 	bl	8018bc8 <__multadd>
 8018f26:	4607      	mov	r7, r0
 8018f28:	10ad      	asrs	r5, r5, #2
 8018f2a:	d03d      	beq.n	8018fa8 <__pow5mult+0xa0>
 8018f2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018f2e:	b97c      	cbnz	r4, 8018f50 <__pow5mult+0x48>
 8018f30:	2010      	movs	r0, #16
 8018f32:	f7fb fcc7 	bl	80148c4 <malloc>
 8018f36:	4602      	mov	r2, r0
 8018f38:	6270      	str	r0, [r6, #36]	; 0x24
 8018f3a:	b928      	cbnz	r0, 8018f48 <__pow5mult+0x40>
 8018f3c:	4b1d      	ldr	r3, [pc, #116]	; (8018fb4 <__pow5mult+0xac>)
 8018f3e:	481e      	ldr	r0, [pc, #120]	; (8018fb8 <__pow5mult+0xb0>)
 8018f40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018f44:	f7fb fc5c 	bl	8014800 <__assert_func>
 8018f48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f4c:	6004      	str	r4, [r0, #0]
 8018f4e:	60c4      	str	r4, [r0, #12]
 8018f50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018f54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f58:	b94c      	cbnz	r4, 8018f6e <__pow5mult+0x66>
 8018f5a:	f240 2171 	movw	r1, #625	; 0x271
 8018f5e:	4630      	mov	r0, r6
 8018f60:	f7ff ff12 	bl	8018d88 <__i2b>
 8018f64:	2300      	movs	r3, #0
 8018f66:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	6003      	str	r3, [r0, #0]
 8018f6e:	f04f 0900 	mov.w	r9, #0
 8018f72:	07eb      	lsls	r3, r5, #31
 8018f74:	d50a      	bpl.n	8018f8c <__pow5mult+0x84>
 8018f76:	4639      	mov	r1, r7
 8018f78:	4622      	mov	r2, r4
 8018f7a:	4630      	mov	r0, r6
 8018f7c:	f7ff ff1a 	bl	8018db4 <__multiply>
 8018f80:	4639      	mov	r1, r7
 8018f82:	4680      	mov	r8, r0
 8018f84:	4630      	mov	r0, r6
 8018f86:	f7ff fdfd 	bl	8018b84 <_Bfree>
 8018f8a:	4647      	mov	r7, r8
 8018f8c:	106d      	asrs	r5, r5, #1
 8018f8e:	d00b      	beq.n	8018fa8 <__pow5mult+0xa0>
 8018f90:	6820      	ldr	r0, [r4, #0]
 8018f92:	b938      	cbnz	r0, 8018fa4 <__pow5mult+0x9c>
 8018f94:	4622      	mov	r2, r4
 8018f96:	4621      	mov	r1, r4
 8018f98:	4630      	mov	r0, r6
 8018f9a:	f7ff ff0b 	bl	8018db4 <__multiply>
 8018f9e:	6020      	str	r0, [r4, #0]
 8018fa0:	f8c0 9000 	str.w	r9, [r0]
 8018fa4:	4604      	mov	r4, r0
 8018fa6:	e7e4      	b.n	8018f72 <__pow5mult+0x6a>
 8018fa8:	4638      	mov	r0, r7
 8018faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fae:	bf00      	nop
 8018fb0:	080736c0 	.word	0x080736c0
 8018fb4:	0807301c 	.word	0x0807301c
 8018fb8:	08073570 	.word	0x08073570

08018fbc <__lshift>:
 8018fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fc0:	460c      	mov	r4, r1
 8018fc2:	6849      	ldr	r1, [r1, #4]
 8018fc4:	6923      	ldr	r3, [r4, #16]
 8018fc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018fca:	68a3      	ldr	r3, [r4, #8]
 8018fcc:	4607      	mov	r7, r0
 8018fce:	4691      	mov	r9, r2
 8018fd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018fd4:	f108 0601 	add.w	r6, r8, #1
 8018fd8:	42b3      	cmp	r3, r6
 8018fda:	db0b      	blt.n	8018ff4 <__lshift+0x38>
 8018fdc:	4638      	mov	r0, r7
 8018fde:	f7ff fd91 	bl	8018b04 <_Balloc>
 8018fe2:	4605      	mov	r5, r0
 8018fe4:	b948      	cbnz	r0, 8018ffa <__lshift+0x3e>
 8018fe6:	4602      	mov	r2, r0
 8018fe8:	4b2a      	ldr	r3, [pc, #168]	; (8019094 <__lshift+0xd8>)
 8018fea:	482b      	ldr	r0, [pc, #172]	; (8019098 <__lshift+0xdc>)
 8018fec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018ff0:	f7fb fc06 	bl	8014800 <__assert_func>
 8018ff4:	3101      	adds	r1, #1
 8018ff6:	005b      	lsls	r3, r3, #1
 8018ff8:	e7ee      	b.n	8018fd8 <__lshift+0x1c>
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	f100 0114 	add.w	r1, r0, #20
 8019000:	f100 0210 	add.w	r2, r0, #16
 8019004:	4618      	mov	r0, r3
 8019006:	4553      	cmp	r3, sl
 8019008:	db37      	blt.n	801907a <__lshift+0xbe>
 801900a:	6920      	ldr	r0, [r4, #16]
 801900c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019010:	f104 0314 	add.w	r3, r4, #20
 8019014:	f019 091f 	ands.w	r9, r9, #31
 8019018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801901c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019020:	d02f      	beq.n	8019082 <__lshift+0xc6>
 8019022:	f1c9 0e20 	rsb	lr, r9, #32
 8019026:	468a      	mov	sl, r1
 8019028:	f04f 0c00 	mov.w	ip, #0
 801902c:	681a      	ldr	r2, [r3, #0]
 801902e:	fa02 f209 	lsl.w	r2, r2, r9
 8019032:	ea42 020c 	orr.w	r2, r2, ip
 8019036:	f84a 2b04 	str.w	r2, [sl], #4
 801903a:	f853 2b04 	ldr.w	r2, [r3], #4
 801903e:	4298      	cmp	r0, r3
 8019040:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019044:	d8f2      	bhi.n	801902c <__lshift+0x70>
 8019046:	1b03      	subs	r3, r0, r4
 8019048:	3b15      	subs	r3, #21
 801904a:	f023 0303 	bic.w	r3, r3, #3
 801904e:	3304      	adds	r3, #4
 8019050:	f104 0215 	add.w	r2, r4, #21
 8019054:	4290      	cmp	r0, r2
 8019056:	bf38      	it	cc
 8019058:	2304      	movcc	r3, #4
 801905a:	f841 c003 	str.w	ip, [r1, r3]
 801905e:	f1bc 0f00 	cmp.w	ip, #0
 8019062:	d001      	beq.n	8019068 <__lshift+0xac>
 8019064:	f108 0602 	add.w	r6, r8, #2
 8019068:	3e01      	subs	r6, #1
 801906a:	4638      	mov	r0, r7
 801906c:	612e      	str	r6, [r5, #16]
 801906e:	4621      	mov	r1, r4
 8019070:	f7ff fd88 	bl	8018b84 <_Bfree>
 8019074:	4628      	mov	r0, r5
 8019076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801907a:	f842 0f04 	str.w	r0, [r2, #4]!
 801907e:	3301      	adds	r3, #1
 8019080:	e7c1      	b.n	8019006 <__lshift+0x4a>
 8019082:	3904      	subs	r1, #4
 8019084:	f853 2b04 	ldr.w	r2, [r3], #4
 8019088:	f841 2f04 	str.w	r2, [r1, #4]!
 801908c:	4298      	cmp	r0, r3
 801908e:	d8f9      	bhi.n	8019084 <__lshift+0xc8>
 8019090:	e7ea      	b.n	8019068 <__lshift+0xac>
 8019092:	bf00      	nop
 8019094:	08073422 	.word	0x08073422
 8019098:	08073570 	.word	0x08073570

0801909c <__mcmp>:
 801909c:	b530      	push	{r4, r5, lr}
 801909e:	6902      	ldr	r2, [r0, #16]
 80190a0:	690c      	ldr	r4, [r1, #16]
 80190a2:	1b12      	subs	r2, r2, r4
 80190a4:	d10e      	bne.n	80190c4 <__mcmp+0x28>
 80190a6:	f100 0314 	add.w	r3, r0, #20
 80190aa:	3114      	adds	r1, #20
 80190ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80190b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80190b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80190b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80190bc:	42a5      	cmp	r5, r4
 80190be:	d003      	beq.n	80190c8 <__mcmp+0x2c>
 80190c0:	d305      	bcc.n	80190ce <__mcmp+0x32>
 80190c2:	2201      	movs	r2, #1
 80190c4:	4610      	mov	r0, r2
 80190c6:	bd30      	pop	{r4, r5, pc}
 80190c8:	4283      	cmp	r3, r0
 80190ca:	d3f3      	bcc.n	80190b4 <__mcmp+0x18>
 80190cc:	e7fa      	b.n	80190c4 <__mcmp+0x28>
 80190ce:	f04f 32ff 	mov.w	r2, #4294967295
 80190d2:	e7f7      	b.n	80190c4 <__mcmp+0x28>

080190d4 <__mdiff>:
 80190d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d8:	460c      	mov	r4, r1
 80190da:	4606      	mov	r6, r0
 80190dc:	4611      	mov	r1, r2
 80190de:	4620      	mov	r0, r4
 80190e0:	4690      	mov	r8, r2
 80190e2:	f7ff ffdb 	bl	801909c <__mcmp>
 80190e6:	1e05      	subs	r5, r0, #0
 80190e8:	d110      	bne.n	801910c <__mdiff+0x38>
 80190ea:	4629      	mov	r1, r5
 80190ec:	4630      	mov	r0, r6
 80190ee:	f7ff fd09 	bl	8018b04 <_Balloc>
 80190f2:	b930      	cbnz	r0, 8019102 <__mdiff+0x2e>
 80190f4:	4b3a      	ldr	r3, [pc, #232]	; (80191e0 <__mdiff+0x10c>)
 80190f6:	4602      	mov	r2, r0
 80190f8:	f240 2132 	movw	r1, #562	; 0x232
 80190fc:	4839      	ldr	r0, [pc, #228]	; (80191e4 <__mdiff+0x110>)
 80190fe:	f7fb fb7f 	bl	8014800 <__assert_func>
 8019102:	2301      	movs	r3, #1
 8019104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801910c:	bfa4      	itt	ge
 801910e:	4643      	movge	r3, r8
 8019110:	46a0      	movge	r8, r4
 8019112:	4630      	mov	r0, r6
 8019114:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019118:	bfa6      	itte	ge
 801911a:	461c      	movge	r4, r3
 801911c:	2500      	movge	r5, #0
 801911e:	2501      	movlt	r5, #1
 8019120:	f7ff fcf0 	bl	8018b04 <_Balloc>
 8019124:	b920      	cbnz	r0, 8019130 <__mdiff+0x5c>
 8019126:	4b2e      	ldr	r3, [pc, #184]	; (80191e0 <__mdiff+0x10c>)
 8019128:	4602      	mov	r2, r0
 801912a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801912e:	e7e5      	b.n	80190fc <__mdiff+0x28>
 8019130:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019134:	6926      	ldr	r6, [r4, #16]
 8019136:	60c5      	str	r5, [r0, #12]
 8019138:	f104 0914 	add.w	r9, r4, #20
 801913c:	f108 0514 	add.w	r5, r8, #20
 8019140:	f100 0e14 	add.w	lr, r0, #20
 8019144:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019148:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801914c:	f108 0210 	add.w	r2, r8, #16
 8019150:	46f2      	mov	sl, lr
 8019152:	2100      	movs	r1, #0
 8019154:	f859 3b04 	ldr.w	r3, [r9], #4
 8019158:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801915c:	fa1f f883 	uxth.w	r8, r3
 8019160:	fa11 f18b 	uxtah	r1, r1, fp
 8019164:	0c1b      	lsrs	r3, r3, #16
 8019166:	eba1 0808 	sub.w	r8, r1, r8
 801916a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801916e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019172:	fa1f f888 	uxth.w	r8, r8
 8019176:	1419      	asrs	r1, r3, #16
 8019178:	454e      	cmp	r6, r9
 801917a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801917e:	f84a 3b04 	str.w	r3, [sl], #4
 8019182:	d8e7      	bhi.n	8019154 <__mdiff+0x80>
 8019184:	1b33      	subs	r3, r6, r4
 8019186:	3b15      	subs	r3, #21
 8019188:	f023 0303 	bic.w	r3, r3, #3
 801918c:	3304      	adds	r3, #4
 801918e:	3415      	adds	r4, #21
 8019190:	42a6      	cmp	r6, r4
 8019192:	bf38      	it	cc
 8019194:	2304      	movcc	r3, #4
 8019196:	441d      	add	r5, r3
 8019198:	4473      	add	r3, lr
 801919a:	469e      	mov	lr, r3
 801919c:	462e      	mov	r6, r5
 801919e:	4566      	cmp	r6, ip
 80191a0:	d30e      	bcc.n	80191c0 <__mdiff+0xec>
 80191a2:	f10c 0203 	add.w	r2, ip, #3
 80191a6:	1b52      	subs	r2, r2, r5
 80191a8:	f022 0203 	bic.w	r2, r2, #3
 80191ac:	3d03      	subs	r5, #3
 80191ae:	45ac      	cmp	ip, r5
 80191b0:	bf38      	it	cc
 80191b2:	2200      	movcc	r2, #0
 80191b4:	441a      	add	r2, r3
 80191b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80191ba:	b17b      	cbz	r3, 80191dc <__mdiff+0x108>
 80191bc:	6107      	str	r7, [r0, #16]
 80191be:	e7a3      	b.n	8019108 <__mdiff+0x34>
 80191c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80191c4:	fa11 f288 	uxtah	r2, r1, r8
 80191c8:	1414      	asrs	r4, r2, #16
 80191ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80191ce:	b292      	uxth	r2, r2
 80191d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80191d4:	f84e 2b04 	str.w	r2, [lr], #4
 80191d8:	1421      	asrs	r1, r4, #16
 80191da:	e7e0      	b.n	801919e <__mdiff+0xca>
 80191dc:	3f01      	subs	r7, #1
 80191de:	e7ea      	b.n	80191b6 <__mdiff+0xe2>
 80191e0:	08073422 	.word	0x08073422
 80191e4:	08073570 	.word	0x08073570

080191e8 <__ulp>:
 80191e8:	b082      	sub	sp, #8
 80191ea:	ed8d 0b00 	vstr	d0, [sp]
 80191ee:	9b01      	ldr	r3, [sp, #4]
 80191f0:	4912      	ldr	r1, [pc, #72]	; (801923c <__ulp+0x54>)
 80191f2:	4019      	ands	r1, r3
 80191f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80191f8:	2900      	cmp	r1, #0
 80191fa:	dd05      	ble.n	8019208 <__ulp+0x20>
 80191fc:	2200      	movs	r2, #0
 80191fe:	460b      	mov	r3, r1
 8019200:	ec43 2b10 	vmov	d0, r2, r3
 8019204:	b002      	add	sp, #8
 8019206:	4770      	bx	lr
 8019208:	4249      	negs	r1, r1
 801920a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801920e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019212:	f04f 0200 	mov.w	r2, #0
 8019216:	f04f 0300 	mov.w	r3, #0
 801921a:	da04      	bge.n	8019226 <__ulp+0x3e>
 801921c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019220:	fa41 f300 	asr.w	r3, r1, r0
 8019224:	e7ec      	b.n	8019200 <__ulp+0x18>
 8019226:	f1a0 0114 	sub.w	r1, r0, #20
 801922a:	291e      	cmp	r1, #30
 801922c:	bfda      	itte	le
 801922e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019232:	fa20 f101 	lsrle.w	r1, r0, r1
 8019236:	2101      	movgt	r1, #1
 8019238:	460a      	mov	r2, r1
 801923a:	e7e1      	b.n	8019200 <__ulp+0x18>
 801923c:	7ff00000 	.word	0x7ff00000

08019240 <__b2d>:
 8019240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019242:	6905      	ldr	r5, [r0, #16]
 8019244:	f100 0714 	add.w	r7, r0, #20
 8019248:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801924c:	1f2e      	subs	r6, r5, #4
 801924e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019252:	4620      	mov	r0, r4
 8019254:	f7ff fd48 	bl	8018ce8 <__hi0bits>
 8019258:	f1c0 0320 	rsb	r3, r0, #32
 801925c:	280a      	cmp	r0, #10
 801925e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80192dc <__b2d+0x9c>
 8019262:	600b      	str	r3, [r1, #0]
 8019264:	dc14      	bgt.n	8019290 <__b2d+0x50>
 8019266:	f1c0 0e0b 	rsb	lr, r0, #11
 801926a:	fa24 f10e 	lsr.w	r1, r4, lr
 801926e:	42b7      	cmp	r7, r6
 8019270:	ea41 030c 	orr.w	r3, r1, ip
 8019274:	bf34      	ite	cc
 8019276:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801927a:	2100      	movcs	r1, #0
 801927c:	3015      	adds	r0, #21
 801927e:	fa04 f000 	lsl.w	r0, r4, r0
 8019282:	fa21 f10e 	lsr.w	r1, r1, lr
 8019286:	ea40 0201 	orr.w	r2, r0, r1
 801928a:	ec43 2b10 	vmov	d0, r2, r3
 801928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019290:	42b7      	cmp	r7, r6
 8019292:	bf3a      	itte	cc
 8019294:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019298:	f1a5 0608 	subcc.w	r6, r5, #8
 801929c:	2100      	movcs	r1, #0
 801929e:	380b      	subs	r0, #11
 80192a0:	d017      	beq.n	80192d2 <__b2d+0x92>
 80192a2:	f1c0 0c20 	rsb	ip, r0, #32
 80192a6:	fa04 f500 	lsl.w	r5, r4, r0
 80192aa:	42be      	cmp	r6, r7
 80192ac:	fa21 f40c 	lsr.w	r4, r1, ip
 80192b0:	ea45 0504 	orr.w	r5, r5, r4
 80192b4:	bf8c      	ite	hi
 80192b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80192ba:	2400      	movls	r4, #0
 80192bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80192c0:	fa01 f000 	lsl.w	r0, r1, r0
 80192c4:	fa24 f40c 	lsr.w	r4, r4, ip
 80192c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80192cc:	ea40 0204 	orr.w	r2, r0, r4
 80192d0:	e7db      	b.n	801928a <__b2d+0x4a>
 80192d2:	ea44 030c 	orr.w	r3, r4, ip
 80192d6:	460a      	mov	r2, r1
 80192d8:	e7d7      	b.n	801928a <__b2d+0x4a>
 80192da:	bf00      	nop
 80192dc:	3ff00000 	.word	0x3ff00000

080192e0 <__d2b>:
 80192e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80192e4:	4689      	mov	r9, r1
 80192e6:	2101      	movs	r1, #1
 80192e8:	ec57 6b10 	vmov	r6, r7, d0
 80192ec:	4690      	mov	r8, r2
 80192ee:	f7ff fc09 	bl	8018b04 <_Balloc>
 80192f2:	4604      	mov	r4, r0
 80192f4:	b930      	cbnz	r0, 8019304 <__d2b+0x24>
 80192f6:	4602      	mov	r2, r0
 80192f8:	4b25      	ldr	r3, [pc, #148]	; (8019390 <__d2b+0xb0>)
 80192fa:	4826      	ldr	r0, [pc, #152]	; (8019394 <__d2b+0xb4>)
 80192fc:	f240 310a 	movw	r1, #778	; 0x30a
 8019300:	f7fb fa7e 	bl	8014800 <__assert_func>
 8019304:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801930c:	bb35      	cbnz	r5, 801935c <__d2b+0x7c>
 801930e:	2e00      	cmp	r6, #0
 8019310:	9301      	str	r3, [sp, #4]
 8019312:	d028      	beq.n	8019366 <__d2b+0x86>
 8019314:	4668      	mov	r0, sp
 8019316:	9600      	str	r6, [sp, #0]
 8019318:	f7ff fd06 	bl	8018d28 <__lo0bits>
 801931c:	9900      	ldr	r1, [sp, #0]
 801931e:	b300      	cbz	r0, 8019362 <__d2b+0x82>
 8019320:	9a01      	ldr	r2, [sp, #4]
 8019322:	f1c0 0320 	rsb	r3, r0, #32
 8019326:	fa02 f303 	lsl.w	r3, r2, r3
 801932a:	430b      	orrs	r3, r1
 801932c:	40c2      	lsrs	r2, r0
 801932e:	6163      	str	r3, [r4, #20]
 8019330:	9201      	str	r2, [sp, #4]
 8019332:	9b01      	ldr	r3, [sp, #4]
 8019334:	61a3      	str	r3, [r4, #24]
 8019336:	2b00      	cmp	r3, #0
 8019338:	bf14      	ite	ne
 801933a:	2202      	movne	r2, #2
 801933c:	2201      	moveq	r2, #1
 801933e:	6122      	str	r2, [r4, #16]
 8019340:	b1d5      	cbz	r5, 8019378 <__d2b+0x98>
 8019342:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019346:	4405      	add	r5, r0
 8019348:	f8c9 5000 	str.w	r5, [r9]
 801934c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019350:	f8c8 0000 	str.w	r0, [r8]
 8019354:	4620      	mov	r0, r4
 8019356:	b003      	add	sp, #12
 8019358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801935c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019360:	e7d5      	b.n	801930e <__d2b+0x2e>
 8019362:	6161      	str	r1, [r4, #20]
 8019364:	e7e5      	b.n	8019332 <__d2b+0x52>
 8019366:	a801      	add	r0, sp, #4
 8019368:	f7ff fcde 	bl	8018d28 <__lo0bits>
 801936c:	9b01      	ldr	r3, [sp, #4]
 801936e:	6163      	str	r3, [r4, #20]
 8019370:	2201      	movs	r2, #1
 8019372:	6122      	str	r2, [r4, #16]
 8019374:	3020      	adds	r0, #32
 8019376:	e7e3      	b.n	8019340 <__d2b+0x60>
 8019378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801937c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019380:	f8c9 0000 	str.w	r0, [r9]
 8019384:	6918      	ldr	r0, [r3, #16]
 8019386:	f7ff fcaf 	bl	8018ce8 <__hi0bits>
 801938a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801938e:	e7df      	b.n	8019350 <__d2b+0x70>
 8019390:	08073422 	.word	0x08073422
 8019394:	08073570 	.word	0x08073570

08019398 <__ratio>:
 8019398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801939c:	4688      	mov	r8, r1
 801939e:	4669      	mov	r1, sp
 80193a0:	4681      	mov	r9, r0
 80193a2:	f7ff ff4d 	bl	8019240 <__b2d>
 80193a6:	a901      	add	r1, sp, #4
 80193a8:	4640      	mov	r0, r8
 80193aa:	ec55 4b10 	vmov	r4, r5, d0
 80193ae:	f7ff ff47 	bl	8019240 <__b2d>
 80193b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80193b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80193ba:	eba3 0c02 	sub.w	ip, r3, r2
 80193be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80193c2:	1a9b      	subs	r3, r3, r2
 80193c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80193c8:	ec51 0b10 	vmov	r0, r1, d0
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	bfd6      	itet	le
 80193d0:	460a      	movle	r2, r1
 80193d2:	462a      	movgt	r2, r5
 80193d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80193d8:	468b      	mov	fp, r1
 80193da:	462f      	mov	r7, r5
 80193dc:	bfd4      	ite	le
 80193de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80193e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80193e6:	4620      	mov	r0, r4
 80193e8:	ee10 2a10 	vmov	r2, s0
 80193ec:	465b      	mov	r3, fp
 80193ee:	4639      	mov	r1, r7
 80193f0:	f7e7 fa4c 	bl	800088c <__aeabi_ddiv>
 80193f4:	ec41 0b10 	vmov	d0, r0, r1
 80193f8:	b003      	add	sp, #12
 80193fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080193fe <__copybits>:
 80193fe:	3901      	subs	r1, #1
 8019400:	b570      	push	{r4, r5, r6, lr}
 8019402:	1149      	asrs	r1, r1, #5
 8019404:	6914      	ldr	r4, [r2, #16]
 8019406:	3101      	adds	r1, #1
 8019408:	f102 0314 	add.w	r3, r2, #20
 801940c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019410:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019414:	1f05      	subs	r5, r0, #4
 8019416:	42a3      	cmp	r3, r4
 8019418:	d30c      	bcc.n	8019434 <__copybits+0x36>
 801941a:	1aa3      	subs	r3, r4, r2
 801941c:	3b11      	subs	r3, #17
 801941e:	f023 0303 	bic.w	r3, r3, #3
 8019422:	3211      	adds	r2, #17
 8019424:	42a2      	cmp	r2, r4
 8019426:	bf88      	it	hi
 8019428:	2300      	movhi	r3, #0
 801942a:	4418      	add	r0, r3
 801942c:	2300      	movs	r3, #0
 801942e:	4288      	cmp	r0, r1
 8019430:	d305      	bcc.n	801943e <__copybits+0x40>
 8019432:	bd70      	pop	{r4, r5, r6, pc}
 8019434:	f853 6b04 	ldr.w	r6, [r3], #4
 8019438:	f845 6f04 	str.w	r6, [r5, #4]!
 801943c:	e7eb      	b.n	8019416 <__copybits+0x18>
 801943e:	f840 3b04 	str.w	r3, [r0], #4
 8019442:	e7f4      	b.n	801942e <__copybits+0x30>

08019444 <__any_on>:
 8019444:	f100 0214 	add.w	r2, r0, #20
 8019448:	6900      	ldr	r0, [r0, #16]
 801944a:	114b      	asrs	r3, r1, #5
 801944c:	4298      	cmp	r0, r3
 801944e:	b510      	push	{r4, lr}
 8019450:	db11      	blt.n	8019476 <__any_on+0x32>
 8019452:	dd0a      	ble.n	801946a <__any_on+0x26>
 8019454:	f011 011f 	ands.w	r1, r1, #31
 8019458:	d007      	beq.n	801946a <__any_on+0x26>
 801945a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801945e:	fa24 f001 	lsr.w	r0, r4, r1
 8019462:	fa00 f101 	lsl.w	r1, r0, r1
 8019466:	428c      	cmp	r4, r1
 8019468:	d10b      	bne.n	8019482 <__any_on+0x3e>
 801946a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801946e:	4293      	cmp	r3, r2
 8019470:	d803      	bhi.n	801947a <__any_on+0x36>
 8019472:	2000      	movs	r0, #0
 8019474:	bd10      	pop	{r4, pc}
 8019476:	4603      	mov	r3, r0
 8019478:	e7f7      	b.n	801946a <__any_on+0x26>
 801947a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801947e:	2900      	cmp	r1, #0
 8019480:	d0f5      	beq.n	801946e <__any_on+0x2a>
 8019482:	2001      	movs	r0, #1
 8019484:	e7f6      	b.n	8019474 <__any_on+0x30>

08019486 <_calloc_r>:
 8019486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019488:	fba1 2402 	umull	r2, r4, r1, r2
 801948c:	b94c      	cbnz	r4, 80194a2 <_calloc_r+0x1c>
 801948e:	4611      	mov	r1, r2
 8019490:	9201      	str	r2, [sp, #4]
 8019492:	f7fb fd1b 	bl	8014ecc <_malloc_r>
 8019496:	9a01      	ldr	r2, [sp, #4]
 8019498:	4605      	mov	r5, r0
 801949a:	b930      	cbnz	r0, 80194aa <_calloc_r+0x24>
 801949c:	4628      	mov	r0, r5
 801949e:	b003      	add	sp, #12
 80194a0:	bd30      	pop	{r4, r5, pc}
 80194a2:	220c      	movs	r2, #12
 80194a4:	6002      	str	r2, [r0, #0]
 80194a6:	2500      	movs	r5, #0
 80194a8:	e7f8      	b.n	801949c <_calloc_r+0x16>
 80194aa:	4621      	mov	r1, r4
 80194ac:	f7fb fa28 	bl	8014900 <memset>
 80194b0:	e7f4      	b.n	801949c <_calloc_r+0x16>

080194b2 <_realloc_r>:
 80194b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194b6:	4680      	mov	r8, r0
 80194b8:	4614      	mov	r4, r2
 80194ba:	460e      	mov	r6, r1
 80194bc:	b921      	cbnz	r1, 80194c8 <_realloc_r+0x16>
 80194be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194c2:	4611      	mov	r1, r2
 80194c4:	f7fb bd02 	b.w	8014ecc <_malloc_r>
 80194c8:	b92a      	cbnz	r2, 80194d6 <_realloc_r+0x24>
 80194ca:	f7fb fc93 	bl	8014df4 <_free_r>
 80194ce:	4625      	mov	r5, r4
 80194d0:	4628      	mov	r0, r5
 80194d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194d6:	f000 fe3b 	bl	801a150 <_malloc_usable_size_r>
 80194da:	4284      	cmp	r4, r0
 80194dc:	4607      	mov	r7, r0
 80194de:	d802      	bhi.n	80194e6 <_realloc_r+0x34>
 80194e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80194e4:	d812      	bhi.n	801950c <_realloc_r+0x5a>
 80194e6:	4621      	mov	r1, r4
 80194e8:	4640      	mov	r0, r8
 80194ea:	f7fb fcef 	bl	8014ecc <_malloc_r>
 80194ee:	4605      	mov	r5, r0
 80194f0:	2800      	cmp	r0, #0
 80194f2:	d0ed      	beq.n	80194d0 <_realloc_r+0x1e>
 80194f4:	42bc      	cmp	r4, r7
 80194f6:	4622      	mov	r2, r4
 80194f8:	4631      	mov	r1, r6
 80194fa:	bf28      	it	cs
 80194fc:	463a      	movcs	r2, r7
 80194fe:	f7fb f9f1 	bl	80148e4 <memcpy>
 8019502:	4631      	mov	r1, r6
 8019504:	4640      	mov	r0, r8
 8019506:	f7fb fc75 	bl	8014df4 <_free_r>
 801950a:	e7e1      	b.n	80194d0 <_realloc_r+0x1e>
 801950c:	4635      	mov	r5, r6
 801950e:	e7df      	b.n	80194d0 <_realloc_r+0x1e>

08019510 <__ssputs_r>:
 8019510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019514:	688e      	ldr	r6, [r1, #8]
 8019516:	429e      	cmp	r6, r3
 8019518:	4682      	mov	sl, r0
 801951a:	460c      	mov	r4, r1
 801951c:	4690      	mov	r8, r2
 801951e:	461f      	mov	r7, r3
 8019520:	d838      	bhi.n	8019594 <__ssputs_r+0x84>
 8019522:	898a      	ldrh	r2, [r1, #12]
 8019524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019528:	d032      	beq.n	8019590 <__ssputs_r+0x80>
 801952a:	6825      	ldr	r5, [r4, #0]
 801952c:	6909      	ldr	r1, [r1, #16]
 801952e:	eba5 0901 	sub.w	r9, r5, r1
 8019532:	6965      	ldr	r5, [r4, #20]
 8019534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801953c:	3301      	adds	r3, #1
 801953e:	444b      	add	r3, r9
 8019540:	106d      	asrs	r5, r5, #1
 8019542:	429d      	cmp	r5, r3
 8019544:	bf38      	it	cc
 8019546:	461d      	movcc	r5, r3
 8019548:	0553      	lsls	r3, r2, #21
 801954a:	d531      	bpl.n	80195b0 <__ssputs_r+0xa0>
 801954c:	4629      	mov	r1, r5
 801954e:	f7fb fcbd 	bl	8014ecc <_malloc_r>
 8019552:	4606      	mov	r6, r0
 8019554:	b950      	cbnz	r0, 801956c <__ssputs_r+0x5c>
 8019556:	230c      	movs	r3, #12
 8019558:	f8ca 3000 	str.w	r3, [sl]
 801955c:	89a3      	ldrh	r3, [r4, #12]
 801955e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019562:	81a3      	strh	r3, [r4, #12]
 8019564:	f04f 30ff 	mov.w	r0, #4294967295
 8019568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801956c:	6921      	ldr	r1, [r4, #16]
 801956e:	464a      	mov	r2, r9
 8019570:	f7fb f9b8 	bl	80148e4 <memcpy>
 8019574:	89a3      	ldrh	r3, [r4, #12]
 8019576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801957a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801957e:	81a3      	strh	r3, [r4, #12]
 8019580:	6126      	str	r6, [r4, #16]
 8019582:	6165      	str	r5, [r4, #20]
 8019584:	444e      	add	r6, r9
 8019586:	eba5 0509 	sub.w	r5, r5, r9
 801958a:	6026      	str	r6, [r4, #0]
 801958c:	60a5      	str	r5, [r4, #8]
 801958e:	463e      	mov	r6, r7
 8019590:	42be      	cmp	r6, r7
 8019592:	d900      	bls.n	8019596 <__ssputs_r+0x86>
 8019594:	463e      	mov	r6, r7
 8019596:	6820      	ldr	r0, [r4, #0]
 8019598:	4632      	mov	r2, r6
 801959a:	4641      	mov	r1, r8
 801959c:	f7ff fa8c 	bl	8018ab8 <memmove>
 80195a0:	68a3      	ldr	r3, [r4, #8]
 80195a2:	1b9b      	subs	r3, r3, r6
 80195a4:	60a3      	str	r3, [r4, #8]
 80195a6:	6823      	ldr	r3, [r4, #0]
 80195a8:	4433      	add	r3, r6
 80195aa:	6023      	str	r3, [r4, #0]
 80195ac:	2000      	movs	r0, #0
 80195ae:	e7db      	b.n	8019568 <__ssputs_r+0x58>
 80195b0:	462a      	mov	r2, r5
 80195b2:	f7ff ff7e 	bl	80194b2 <_realloc_r>
 80195b6:	4606      	mov	r6, r0
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d1e1      	bne.n	8019580 <__ssputs_r+0x70>
 80195bc:	6921      	ldr	r1, [r4, #16]
 80195be:	4650      	mov	r0, sl
 80195c0:	f7fb fc18 	bl	8014df4 <_free_r>
 80195c4:	e7c7      	b.n	8019556 <__ssputs_r+0x46>
	...

080195c8 <_svfiprintf_r>:
 80195c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195cc:	4698      	mov	r8, r3
 80195ce:	898b      	ldrh	r3, [r1, #12]
 80195d0:	061b      	lsls	r3, r3, #24
 80195d2:	b09d      	sub	sp, #116	; 0x74
 80195d4:	4607      	mov	r7, r0
 80195d6:	460d      	mov	r5, r1
 80195d8:	4614      	mov	r4, r2
 80195da:	d50e      	bpl.n	80195fa <_svfiprintf_r+0x32>
 80195dc:	690b      	ldr	r3, [r1, #16]
 80195de:	b963      	cbnz	r3, 80195fa <_svfiprintf_r+0x32>
 80195e0:	2140      	movs	r1, #64	; 0x40
 80195e2:	f7fb fc73 	bl	8014ecc <_malloc_r>
 80195e6:	6028      	str	r0, [r5, #0]
 80195e8:	6128      	str	r0, [r5, #16]
 80195ea:	b920      	cbnz	r0, 80195f6 <_svfiprintf_r+0x2e>
 80195ec:	230c      	movs	r3, #12
 80195ee:	603b      	str	r3, [r7, #0]
 80195f0:	f04f 30ff 	mov.w	r0, #4294967295
 80195f4:	e0d1      	b.n	801979a <_svfiprintf_r+0x1d2>
 80195f6:	2340      	movs	r3, #64	; 0x40
 80195f8:	616b      	str	r3, [r5, #20]
 80195fa:	2300      	movs	r3, #0
 80195fc:	9309      	str	r3, [sp, #36]	; 0x24
 80195fe:	2320      	movs	r3, #32
 8019600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019604:	f8cd 800c 	str.w	r8, [sp, #12]
 8019608:	2330      	movs	r3, #48	; 0x30
 801960a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80197b4 <_svfiprintf_r+0x1ec>
 801960e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019612:	f04f 0901 	mov.w	r9, #1
 8019616:	4623      	mov	r3, r4
 8019618:	469a      	mov	sl, r3
 801961a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801961e:	b10a      	cbz	r2, 8019624 <_svfiprintf_r+0x5c>
 8019620:	2a25      	cmp	r2, #37	; 0x25
 8019622:	d1f9      	bne.n	8019618 <_svfiprintf_r+0x50>
 8019624:	ebba 0b04 	subs.w	fp, sl, r4
 8019628:	d00b      	beq.n	8019642 <_svfiprintf_r+0x7a>
 801962a:	465b      	mov	r3, fp
 801962c:	4622      	mov	r2, r4
 801962e:	4629      	mov	r1, r5
 8019630:	4638      	mov	r0, r7
 8019632:	f7ff ff6d 	bl	8019510 <__ssputs_r>
 8019636:	3001      	adds	r0, #1
 8019638:	f000 80aa 	beq.w	8019790 <_svfiprintf_r+0x1c8>
 801963c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801963e:	445a      	add	r2, fp
 8019640:	9209      	str	r2, [sp, #36]	; 0x24
 8019642:	f89a 3000 	ldrb.w	r3, [sl]
 8019646:	2b00      	cmp	r3, #0
 8019648:	f000 80a2 	beq.w	8019790 <_svfiprintf_r+0x1c8>
 801964c:	2300      	movs	r3, #0
 801964e:	f04f 32ff 	mov.w	r2, #4294967295
 8019652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019656:	f10a 0a01 	add.w	sl, sl, #1
 801965a:	9304      	str	r3, [sp, #16]
 801965c:	9307      	str	r3, [sp, #28]
 801965e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019662:	931a      	str	r3, [sp, #104]	; 0x68
 8019664:	4654      	mov	r4, sl
 8019666:	2205      	movs	r2, #5
 8019668:	f814 1b01 	ldrb.w	r1, [r4], #1
 801966c:	4851      	ldr	r0, [pc, #324]	; (80197b4 <_svfiprintf_r+0x1ec>)
 801966e:	f7e6 fdd7 	bl	8000220 <memchr>
 8019672:	9a04      	ldr	r2, [sp, #16]
 8019674:	b9d8      	cbnz	r0, 80196ae <_svfiprintf_r+0xe6>
 8019676:	06d0      	lsls	r0, r2, #27
 8019678:	bf44      	itt	mi
 801967a:	2320      	movmi	r3, #32
 801967c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019680:	0711      	lsls	r1, r2, #28
 8019682:	bf44      	itt	mi
 8019684:	232b      	movmi	r3, #43	; 0x2b
 8019686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801968a:	f89a 3000 	ldrb.w	r3, [sl]
 801968e:	2b2a      	cmp	r3, #42	; 0x2a
 8019690:	d015      	beq.n	80196be <_svfiprintf_r+0xf6>
 8019692:	9a07      	ldr	r2, [sp, #28]
 8019694:	4654      	mov	r4, sl
 8019696:	2000      	movs	r0, #0
 8019698:	f04f 0c0a 	mov.w	ip, #10
 801969c:	4621      	mov	r1, r4
 801969e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196a2:	3b30      	subs	r3, #48	; 0x30
 80196a4:	2b09      	cmp	r3, #9
 80196a6:	d94e      	bls.n	8019746 <_svfiprintf_r+0x17e>
 80196a8:	b1b0      	cbz	r0, 80196d8 <_svfiprintf_r+0x110>
 80196aa:	9207      	str	r2, [sp, #28]
 80196ac:	e014      	b.n	80196d8 <_svfiprintf_r+0x110>
 80196ae:	eba0 0308 	sub.w	r3, r0, r8
 80196b2:	fa09 f303 	lsl.w	r3, r9, r3
 80196b6:	4313      	orrs	r3, r2
 80196b8:	9304      	str	r3, [sp, #16]
 80196ba:	46a2      	mov	sl, r4
 80196bc:	e7d2      	b.n	8019664 <_svfiprintf_r+0x9c>
 80196be:	9b03      	ldr	r3, [sp, #12]
 80196c0:	1d19      	adds	r1, r3, #4
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	9103      	str	r1, [sp, #12]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	bfbb      	ittet	lt
 80196ca:	425b      	neglt	r3, r3
 80196cc:	f042 0202 	orrlt.w	r2, r2, #2
 80196d0:	9307      	strge	r3, [sp, #28]
 80196d2:	9307      	strlt	r3, [sp, #28]
 80196d4:	bfb8      	it	lt
 80196d6:	9204      	strlt	r2, [sp, #16]
 80196d8:	7823      	ldrb	r3, [r4, #0]
 80196da:	2b2e      	cmp	r3, #46	; 0x2e
 80196dc:	d10c      	bne.n	80196f8 <_svfiprintf_r+0x130>
 80196de:	7863      	ldrb	r3, [r4, #1]
 80196e0:	2b2a      	cmp	r3, #42	; 0x2a
 80196e2:	d135      	bne.n	8019750 <_svfiprintf_r+0x188>
 80196e4:	9b03      	ldr	r3, [sp, #12]
 80196e6:	1d1a      	adds	r2, r3, #4
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	9203      	str	r2, [sp, #12]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	bfb8      	it	lt
 80196f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80196f4:	3402      	adds	r4, #2
 80196f6:	9305      	str	r3, [sp, #20]
 80196f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80197c4 <_svfiprintf_r+0x1fc>
 80196fc:	7821      	ldrb	r1, [r4, #0]
 80196fe:	2203      	movs	r2, #3
 8019700:	4650      	mov	r0, sl
 8019702:	f7e6 fd8d 	bl	8000220 <memchr>
 8019706:	b140      	cbz	r0, 801971a <_svfiprintf_r+0x152>
 8019708:	2340      	movs	r3, #64	; 0x40
 801970a:	eba0 000a 	sub.w	r0, r0, sl
 801970e:	fa03 f000 	lsl.w	r0, r3, r0
 8019712:	9b04      	ldr	r3, [sp, #16]
 8019714:	4303      	orrs	r3, r0
 8019716:	3401      	adds	r4, #1
 8019718:	9304      	str	r3, [sp, #16]
 801971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801971e:	4826      	ldr	r0, [pc, #152]	; (80197b8 <_svfiprintf_r+0x1f0>)
 8019720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019724:	2206      	movs	r2, #6
 8019726:	f7e6 fd7b 	bl	8000220 <memchr>
 801972a:	2800      	cmp	r0, #0
 801972c:	d038      	beq.n	80197a0 <_svfiprintf_r+0x1d8>
 801972e:	4b23      	ldr	r3, [pc, #140]	; (80197bc <_svfiprintf_r+0x1f4>)
 8019730:	bb1b      	cbnz	r3, 801977a <_svfiprintf_r+0x1b2>
 8019732:	9b03      	ldr	r3, [sp, #12]
 8019734:	3307      	adds	r3, #7
 8019736:	f023 0307 	bic.w	r3, r3, #7
 801973a:	3308      	adds	r3, #8
 801973c:	9303      	str	r3, [sp, #12]
 801973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019740:	4433      	add	r3, r6
 8019742:	9309      	str	r3, [sp, #36]	; 0x24
 8019744:	e767      	b.n	8019616 <_svfiprintf_r+0x4e>
 8019746:	fb0c 3202 	mla	r2, ip, r2, r3
 801974a:	460c      	mov	r4, r1
 801974c:	2001      	movs	r0, #1
 801974e:	e7a5      	b.n	801969c <_svfiprintf_r+0xd4>
 8019750:	2300      	movs	r3, #0
 8019752:	3401      	adds	r4, #1
 8019754:	9305      	str	r3, [sp, #20]
 8019756:	4619      	mov	r1, r3
 8019758:	f04f 0c0a 	mov.w	ip, #10
 801975c:	4620      	mov	r0, r4
 801975e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019762:	3a30      	subs	r2, #48	; 0x30
 8019764:	2a09      	cmp	r2, #9
 8019766:	d903      	bls.n	8019770 <_svfiprintf_r+0x1a8>
 8019768:	2b00      	cmp	r3, #0
 801976a:	d0c5      	beq.n	80196f8 <_svfiprintf_r+0x130>
 801976c:	9105      	str	r1, [sp, #20]
 801976e:	e7c3      	b.n	80196f8 <_svfiprintf_r+0x130>
 8019770:	fb0c 2101 	mla	r1, ip, r1, r2
 8019774:	4604      	mov	r4, r0
 8019776:	2301      	movs	r3, #1
 8019778:	e7f0      	b.n	801975c <_svfiprintf_r+0x194>
 801977a:	ab03      	add	r3, sp, #12
 801977c:	9300      	str	r3, [sp, #0]
 801977e:	462a      	mov	r2, r5
 8019780:	4b0f      	ldr	r3, [pc, #60]	; (80197c0 <_svfiprintf_r+0x1f8>)
 8019782:	a904      	add	r1, sp, #16
 8019784:	4638      	mov	r0, r7
 8019786:	f7fb fe0f 	bl	80153a8 <_printf_float>
 801978a:	1c42      	adds	r2, r0, #1
 801978c:	4606      	mov	r6, r0
 801978e:	d1d6      	bne.n	801973e <_svfiprintf_r+0x176>
 8019790:	89ab      	ldrh	r3, [r5, #12]
 8019792:	065b      	lsls	r3, r3, #25
 8019794:	f53f af2c 	bmi.w	80195f0 <_svfiprintf_r+0x28>
 8019798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801979a:	b01d      	add	sp, #116	; 0x74
 801979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a0:	ab03      	add	r3, sp, #12
 80197a2:	9300      	str	r3, [sp, #0]
 80197a4:	462a      	mov	r2, r5
 80197a6:	4b06      	ldr	r3, [pc, #24]	; (80197c0 <_svfiprintf_r+0x1f8>)
 80197a8:	a904      	add	r1, sp, #16
 80197aa:	4638      	mov	r0, r7
 80197ac:	f7fc f8a0 	bl	80158f0 <_printf_i>
 80197b0:	e7eb      	b.n	801978a <_svfiprintf_r+0x1c2>
 80197b2:	bf00      	nop
 80197b4:	08073188 	.word	0x08073188
 80197b8:	08073192 	.word	0x08073192
 80197bc:	080153a9 	.word	0x080153a9
 80197c0:	08019511 	.word	0x08019511
 80197c4:	0807318e 	.word	0x0807318e

080197c8 <_sungetc_r>:
 80197c8:	b538      	push	{r3, r4, r5, lr}
 80197ca:	1c4b      	adds	r3, r1, #1
 80197cc:	4614      	mov	r4, r2
 80197ce:	d103      	bne.n	80197d8 <_sungetc_r+0x10>
 80197d0:	f04f 35ff 	mov.w	r5, #4294967295
 80197d4:	4628      	mov	r0, r5
 80197d6:	bd38      	pop	{r3, r4, r5, pc}
 80197d8:	8993      	ldrh	r3, [r2, #12]
 80197da:	f023 0320 	bic.w	r3, r3, #32
 80197de:	8193      	strh	r3, [r2, #12]
 80197e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80197e2:	6852      	ldr	r2, [r2, #4]
 80197e4:	b2cd      	uxtb	r5, r1
 80197e6:	b18b      	cbz	r3, 801980c <_sungetc_r+0x44>
 80197e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80197ea:	4293      	cmp	r3, r2
 80197ec:	dd08      	ble.n	8019800 <_sungetc_r+0x38>
 80197ee:	6823      	ldr	r3, [r4, #0]
 80197f0:	1e5a      	subs	r2, r3, #1
 80197f2:	6022      	str	r2, [r4, #0]
 80197f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80197f8:	6863      	ldr	r3, [r4, #4]
 80197fa:	3301      	adds	r3, #1
 80197fc:	6063      	str	r3, [r4, #4]
 80197fe:	e7e9      	b.n	80197d4 <_sungetc_r+0xc>
 8019800:	4621      	mov	r1, r4
 8019802:	f000 fc2f 	bl	801a064 <__submore>
 8019806:	2800      	cmp	r0, #0
 8019808:	d0f1      	beq.n	80197ee <_sungetc_r+0x26>
 801980a:	e7e1      	b.n	80197d0 <_sungetc_r+0x8>
 801980c:	6921      	ldr	r1, [r4, #16]
 801980e:	6823      	ldr	r3, [r4, #0]
 8019810:	b151      	cbz	r1, 8019828 <_sungetc_r+0x60>
 8019812:	4299      	cmp	r1, r3
 8019814:	d208      	bcs.n	8019828 <_sungetc_r+0x60>
 8019816:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801981a:	42a9      	cmp	r1, r5
 801981c:	d104      	bne.n	8019828 <_sungetc_r+0x60>
 801981e:	3b01      	subs	r3, #1
 8019820:	3201      	adds	r2, #1
 8019822:	6023      	str	r3, [r4, #0]
 8019824:	6062      	str	r2, [r4, #4]
 8019826:	e7d5      	b.n	80197d4 <_sungetc_r+0xc>
 8019828:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801982c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019830:	6363      	str	r3, [r4, #52]	; 0x34
 8019832:	2303      	movs	r3, #3
 8019834:	63a3      	str	r3, [r4, #56]	; 0x38
 8019836:	4623      	mov	r3, r4
 8019838:	f803 5f46 	strb.w	r5, [r3, #70]!
 801983c:	6023      	str	r3, [r4, #0]
 801983e:	2301      	movs	r3, #1
 8019840:	e7dc      	b.n	80197fc <_sungetc_r+0x34>

08019842 <__ssrefill_r>:
 8019842:	b510      	push	{r4, lr}
 8019844:	460c      	mov	r4, r1
 8019846:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019848:	b169      	cbz	r1, 8019866 <__ssrefill_r+0x24>
 801984a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801984e:	4299      	cmp	r1, r3
 8019850:	d001      	beq.n	8019856 <__ssrefill_r+0x14>
 8019852:	f7fb facf 	bl	8014df4 <_free_r>
 8019856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019858:	6063      	str	r3, [r4, #4]
 801985a:	2000      	movs	r0, #0
 801985c:	6360      	str	r0, [r4, #52]	; 0x34
 801985e:	b113      	cbz	r3, 8019866 <__ssrefill_r+0x24>
 8019860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019862:	6023      	str	r3, [r4, #0]
 8019864:	bd10      	pop	{r4, pc}
 8019866:	6923      	ldr	r3, [r4, #16]
 8019868:	6023      	str	r3, [r4, #0]
 801986a:	2300      	movs	r3, #0
 801986c:	6063      	str	r3, [r4, #4]
 801986e:	89a3      	ldrh	r3, [r4, #12]
 8019870:	f043 0320 	orr.w	r3, r3, #32
 8019874:	81a3      	strh	r3, [r4, #12]
 8019876:	f04f 30ff 	mov.w	r0, #4294967295
 801987a:	e7f3      	b.n	8019864 <__ssrefill_r+0x22>

0801987c <__ssvfiscanf_r>:
 801987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019880:	460c      	mov	r4, r1
 8019882:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019886:	2100      	movs	r1, #0
 8019888:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801988c:	49a6      	ldr	r1, [pc, #664]	; (8019b28 <__ssvfiscanf_r+0x2ac>)
 801988e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019890:	f10d 0804 	add.w	r8, sp, #4
 8019894:	49a5      	ldr	r1, [pc, #660]	; (8019b2c <__ssvfiscanf_r+0x2b0>)
 8019896:	4fa6      	ldr	r7, [pc, #664]	; (8019b30 <__ssvfiscanf_r+0x2b4>)
 8019898:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8019b34 <__ssvfiscanf_r+0x2b8>
 801989c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80198a0:	4606      	mov	r6, r0
 80198a2:	91a1      	str	r1, [sp, #644]	; 0x284
 80198a4:	9300      	str	r3, [sp, #0]
 80198a6:	7813      	ldrb	r3, [r2, #0]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	f000 815a 	beq.w	8019b62 <__ssvfiscanf_r+0x2e6>
 80198ae:	5dd9      	ldrb	r1, [r3, r7]
 80198b0:	f011 0108 	ands.w	r1, r1, #8
 80198b4:	f102 0501 	add.w	r5, r2, #1
 80198b8:	d019      	beq.n	80198ee <__ssvfiscanf_r+0x72>
 80198ba:	6863      	ldr	r3, [r4, #4]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	dd0f      	ble.n	80198e0 <__ssvfiscanf_r+0x64>
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	781a      	ldrb	r2, [r3, #0]
 80198c4:	5cba      	ldrb	r2, [r7, r2]
 80198c6:	0712      	lsls	r2, r2, #28
 80198c8:	d401      	bmi.n	80198ce <__ssvfiscanf_r+0x52>
 80198ca:	462a      	mov	r2, r5
 80198cc:	e7eb      	b.n	80198a6 <__ssvfiscanf_r+0x2a>
 80198ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198d0:	3201      	adds	r2, #1
 80198d2:	9245      	str	r2, [sp, #276]	; 0x114
 80198d4:	6862      	ldr	r2, [r4, #4]
 80198d6:	3301      	adds	r3, #1
 80198d8:	3a01      	subs	r2, #1
 80198da:	6062      	str	r2, [r4, #4]
 80198dc:	6023      	str	r3, [r4, #0]
 80198de:	e7ec      	b.n	80198ba <__ssvfiscanf_r+0x3e>
 80198e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198e2:	4621      	mov	r1, r4
 80198e4:	4630      	mov	r0, r6
 80198e6:	4798      	blx	r3
 80198e8:	2800      	cmp	r0, #0
 80198ea:	d0e9      	beq.n	80198c0 <__ssvfiscanf_r+0x44>
 80198ec:	e7ed      	b.n	80198ca <__ssvfiscanf_r+0x4e>
 80198ee:	2b25      	cmp	r3, #37	; 0x25
 80198f0:	d012      	beq.n	8019918 <__ssvfiscanf_r+0x9c>
 80198f2:	469a      	mov	sl, r3
 80198f4:	6863      	ldr	r3, [r4, #4]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	f340 8091 	ble.w	8019a1e <__ssvfiscanf_r+0x1a2>
 80198fc:	6822      	ldr	r2, [r4, #0]
 80198fe:	7813      	ldrb	r3, [r2, #0]
 8019900:	4553      	cmp	r3, sl
 8019902:	f040 812e 	bne.w	8019b62 <__ssvfiscanf_r+0x2e6>
 8019906:	6863      	ldr	r3, [r4, #4]
 8019908:	3b01      	subs	r3, #1
 801990a:	6063      	str	r3, [r4, #4]
 801990c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801990e:	3201      	adds	r2, #1
 8019910:	3301      	adds	r3, #1
 8019912:	6022      	str	r2, [r4, #0]
 8019914:	9345      	str	r3, [sp, #276]	; 0x114
 8019916:	e7d8      	b.n	80198ca <__ssvfiscanf_r+0x4e>
 8019918:	9141      	str	r1, [sp, #260]	; 0x104
 801991a:	9143      	str	r1, [sp, #268]	; 0x10c
 801991c:	7853      	ldrb	r3, [r2, #1]
 801991e:	2b2a      	cmp	r3, #42	; 0x2a
 8019920:	bf02      	ittt	eq
 8019922:	2310      	moveq	r3, #16
 8019924:	1c95      	addeq	r5, r2, #2
 8019926:	9341      	streq	r3, [sp, #260]	; 0x104
 8019928:	220a      	movs	r2, #10
 801992a:	46aa      	mov	sl, r5
 801992c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019930:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019934:	2b09      	cmp	r3, #9
 8019936:	d91d      	bls.n	8019974 <__ssvfiscanf_r+0xf8>
 8019938:	487e      	ldr	r0, [pc, #504]	; (8019b34 <__ssvfiscanf_r+0x2b8>)
 801993a:	2203      	movs	r2, #3
 801993c:	f7e6 fc70 	bl	8000220 <memchr>
 8019940:	b140      	cbz	r0, 8019954 <__ssvfiscanf_r+0xd8>
 8019942:	2301      	movs	r3, #1
 8019944:	eba0 0009 	sub.w	r0, r0, r9
 8019948:	fa03 f000 	lsl.w	r0, r3, r0
 801994c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801994e:	4318      	orrs	r0, r3
 8019950:	9041      	str	r0, [sp, #260]	; 0x104
 8019952:	4655      	mov	r5, sl
 8019954:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019958:	2b78      	cmp	r3, #120	; 0x78
 801995a:	d806      	bhi.n	801996a <__ssvfiscanf_r+0xee>
 801995c:	2b57      	cmp	r3, #87	; 0x57
 801995e:	d810      	bhi.n	8019982 <__ssvfiscanf_r+0x106>
 8019960:	2b25      	cmp	r3, #37	; 0x25
 8019962:	d0c6      	beq.n	80198f2 <__ssvfiscanf_r+0x76>
 8019964:	d856      	bhi.n	8019a14 <__ssvfiscanf_r+0x198>
 8019966:	2b00      	cmp	r3, #0
 8019968:	d064      	beq.n	8019a34 <__ssvfiscanf_r+0x1b8>
 801996a:	2303      	movs	r3, #3
 801996c:	9347      	str	r3, [sp, #284]	; 0x11c
 801996e:	230a      	movs	r3, #10
 8019970:	9342      	str	r3, [sp, #264]	; 0x108
 8019972:	e071      	b.n	8019a58 <__ssvfiscanf_r+0x1dc>
 8019974:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019976:	fb02 1103 	mla	r1, r2, r3, r1
 801997a:	3930      	subs	r1, #48	; 0x30
 801997c:	9143      	str	r1, [sp, #268]	; 0x10c
 801997e:	4655      	mov	r5, sl
 8019980:	e7d3      	b.n	801992a <__ssvfiscanf_r+0xae>
 8019982:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019986:	2a20      	cmp	r2, #32
 8019988:	d8ef      	bhi.n	801996a <__ssvfiscanf_r+0xee>
 801998a:	a101      	add	r1, pc, #4	; (adr r1, 8019990 <__ssvfiscanf_r+0x114>)
 801998c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019990:	08019a43 	.word	0x08019a43
 8019994:	0801996b 	.word	0x0801996b
 8019998:	0801996b 	.word	0x0801996b
 801999c:	08019aa1 	.word	0x08019aa1
 80199a0:	0801996b 	.word	0x0801996b
 80199a4:	0801996b 	.word	0x0801996b
 80199a8:	0801996b 	.word	0x0801996b
 80199ac:	0801996b 	.word	0x0801996b
 80199b0:	0801996b 	.word	0x0801996b
 80199b4:	0801996b 	.word	0x0801996b
 80199b8:	0801996b 	.word	0x0801996b
 80199bc:	08019ab7 	.word	0x08019ab7
 80199c0:	08019a8d 	.word	0x08019a8d
 80199c4:	08019a1b 	.word	0x08019a1b
 80199c8:	08019a1b 	.word	0x08019a1b
 80199cc:	08019a1b 	.word	0x08019a1b
 80199d0:	0801996b 	.word	0x0801996b
 80199d4:	08019a91 	.word	0x08019a91
 80199d8:	0801996b 	.word	0x0801996b
 80199dc:	0801996b 	.word	0x0801996b
 80199e0:	0801996b 	.word	0x0801996b
 80199e4:	0801996b 	.word	0x0801996b
 80199e8:	08019ac7 	.word	0x08019ac7
 80199ec:	08019a99 	.word	0x08019a99
 80199f0:	08019a3b 	.word	0x08019a3b
 80199f4:	0801996b 	.word	0x0801996b
 80199f8:	0801996b 	.word	0x0801996b
 80199fc:	08019ac3 	.word	0x08019ac3
 8019a00:	0801996b 	.word	0x0801996b
 8019a04:	08019a8d 	.word	0x08019a8d
 8019a08:	0801996b 	.word	0x0801996b
 8019a0c:	0801996b 	.word	0x0801996b
 8019a10:	08019a43 	.word	0x08019a43
 8019a14:	3b45      	subs	r3, #69	; 0x45
 8019a16:	2b02      	cmp	r3, #2
 8019a18:	d8a7      	bhi.n	801996a <__ssvfiscanf_r+0xee>
 8019a1a:	2305      	movs	r3, #5
 8019a1c:	e01b      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019a1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019a20:	4621      	mov	r1, r4
 8019a22:	4630      	mov	r0, r6
 8019a24:	4798      	blx	r3
 8019a26:	2800      	cmp	r0, #0
 8019a28:	f43f af68 	beq.w	80198fc <__ssvfiscanf_r+0x80>
 8019a2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f040 808d 	bne.w	8019b4e <__ssvfiscanf_r+0x2d2>
 8019a34:	f04f 30ff 	mov.w	r0, #4294967295
 8019a38:	e08f      	b.n	8019b5a <__ssvfiscanf_r+0x2de>
 8019a3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019a3c:	f042 0220 	orr.w	r2, r2, #32
 8019a40:	9241      	str	r2, [sp, #260]	; 0x104
 8019a42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a48:	9241      	str	r2, [sp, #260]	; 0x104
 8019a4a:	2210      	movs	r2, #16
 8019a4c:	2b6f      	cmp	r3, #111	; 0x6f
 8019a4e:	9242      	str	r2, [sp, #264]	; 0x108
 8019a50:	bf34      	ite	cc
 8019a52:	2303      	movcc	r3, #3
 8019a54:	2304      	movcs	r3, #4
 8019a56:	9347      	str	r3, [sp, #284]	; 0x11c
 8019a58:	6863      	ldr	r3, [r4, #4]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	dd42      	ble.n	8019ae4 <__ssvfiscanf_r+0x268>
 8019a5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019a60:	0659      	lsls	r1, r3, #25
 8019a62:	d404      	bmi.n	8019a6e <__ssvfiscanf_r+0x1f2>
 8019a64:	6823      	ldr	r3, [r4, #0]
 8019a66:	781a      	ldrb	r2, [r3, #0]
 8019a68:	5cba      	ldrb	r2, [r7, r2]
 8019a6a:	0712      	lsls	r2, r2, #28
 8019a6c:	d441      	bmi.n	8019af2 <__ssvfiscanf_r+0x276>
 8019a6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019a70:	2b02      	cmp	r3, #2
 8019a72:	dc50      	bgt.n	8019b16 <__ssvfiscanf_r+0x29a>
 8019a74:	466b      	mov	r3, sp
 8019a76:	4622      	mov	r2, r4
 8019a78:	a941      	add	r1, sp, #260	; 0x104
 8019a7a:	4630      	mov	r0, r6
 8019a7c:	f000 f876 	bl	8019b6c <_scanf_chars>
 8019a80:	2801      	cmp	r0, #1
 8019a82:	d06e      	beq.n	8019b62 <__ssvfiscanf_r+0x2e6>
 8019a84:	2802      	cmp	r0, #2
 8019a86:	f47f af20 	bne.w	80198ca <__ssvfiscanf_r+0x4e>
 8019a8a:	e7cf      	b.n	8019a2c <__ssvfiscanf_r+0x1b0>
 8019a8c:	220a      	movs	r2, #10
 8019a8e:	e7dd      	b.n	8019a4c <__ssvfiscanf_r+0x1d0>
 8019a90:	2300      	movs	r3, #0
 8019a92:	9342      	str	r3, [sp, #264]	; 0x108
 8019a94:	2303      	movs	r3, #3
 8019a96:	e7de      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019a98:	2308      	movs	r3, #8
 8019a9a:	9342      	str	r3, [sp, #264]	; 0x108
 8019a9c:	2304      	movs	r3, #4
 8019a9e:	e7da      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	4640      	mov	r0, r8
 8019aa4:	f000 f9d0 	bl	8019e48 <__sccl>
 8019aa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aae:	9341      	str	r3, [sp, #260]	; 0x104
 8019ab0:	4605      	mov	r5, r0
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	e7cf      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019abc:	9341      	str	r3, [sp, #260]	; 0x104
 8019abe:	2300      	movs	r3, #0
 8019ac0:	e7c9      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019ac2:	2302      	movs	r3, #2
 8019ac4:	e7c7      	b.n	8019a56 <__ssvfiscanf_r+0x1da>
 8019ac6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019ac8:	06c3      	lsls	r3, r0, #27
 8019aca:	f53f aefe 	bmi.w	80198ca <__ssvfiscanf_r+0x4e>
 8019ace:	9b00      	ldr	r3, [sp, #0]
 8019ad0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019ad2:	1d19      	adds	r1, r3, #4
 8019ad4:	9100      	str	r1, [sp, #0]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f010 0f01 	tst.w	r0, #1
 8019adc:	bf14      	ite	ne
 8019ade:	801a      	strhne	r2, [r3, #0]
 8019ae0:	601a      	streq	r2, [r3, #0]
 8019ae2:	e6f2      	b.n	80198ca <__ssvfiscanf_r+0x4e>
 8019ae4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019ae6:	4621      	mov	r1, r4
 8019ae8:	4630      	mov	r0, r6
 8019aea:	4798      	blx	r3
 8019aec:	2800      	cmp	r0, #0
 8019aee:	d0b6      	beq.n	8019a5e <__ssvfiscanf_r+0x1e2>
 8019af0:	e79c      	b.n	8019a2c <__ssvfiscanf_r+0x1b0>
 8019af2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019af4:	3201      	adds	r2, #1
 8019af6:	9245      	str	r2, [sp, #276]	; 0x114
 8019af8:	6862      	ldr	r2, [r4, #4]
 8019afa:	3a01      	subs	r2, #1
 8019afc:	2a00      	cmp	r2, #0
 8019afe:	6062      	str	r2, [r4, #4]
 8019b00:	dd02      	ble.n	8019b08 <__ssvfiscanf_r+0x28c>
 8019b02:	3301      	adds	r3, #1
 8019b04:	6023      	str	r3, [r4, #0]
 8019b06:	e7ad      	b.n	8019a64 <__ssvfiscanf_r+0x1e8>
 8019b08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b0a:	4621      	mov	r1, r4
 8019b0c:	4630      	mov	r0, r6
 8019b0e:	4798      	blx	r3
 8019b10:	2800      	cmp	r0, #0
 8019b12:	d0a7      	beq.n	8019a64 <__ssvfiscanf_r+0x1e8>
 8019b14:	e78a      	b.n	8019a2c <__ssvfiscanf_r+0x1b0>
 8019b16:	2b04      	cmp	r3, #4
 8019b18:	dc0e      	bgt.n	8019b38 <__ssvfiscanf_r+0x2bc>
 8019b1a:	466b      	mov	r3, sp
 8019b1c:	4622      	mov	r2, r4
 8019b1e:	a941      	add	r1, sp, #260	; 0x104
 8019b20:	4630      	mov	r0, r6
 8019b22:	f000 f87d 	bl	8019c20 <_scanf_i>
 8019b26:	e7ab      	b.n	8019a80 <__ssvfiscanf_r+0x204>
 8019b28:	080197c9 	.word	0x080197c9
 8019b2c:	08019843 	.word	0x08019843
 8019b30:	080732ba 	.word	0x080732ba
 8019b34:	0807318e 	.word	0x0807318e
 8019b38:	4b0b      	ldr	r3, [pc, #44]	; (8019b68 <__ssvfiscanf_r+0x2ec>)
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	f43f aec5 	beq.w	80198ca <__ssvfiscanf_r+0x4e>
 8019b40:	466b      	mov	r3, sp
 8019b42:	4622      	mov	r2, r4
 8019b44:	a941      	add	r1, sp, #260	; 0x104
 8019b46:	4630      	mov	r0, r6
 8019b48:	f3af 8000 	nop.w
 8019b4c:	e798      	b.n	8019a80 <__ssvfiscanf_r+0x204>
 8019b4e:	89a3      	ldrh	r3, [r4, #12]
 8019b50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019b54:	bf18      	it	ne
 8019b56:	f04f 30ff 	movne.w	r0, #4294967295
 8019b5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8019b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b62:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019b64:	e7f9      	b.n	8019b5a <__ssvfiscanf_r+0x2de>
 8019b66:	bf00      	nop
 8019b68:	00000000 	.word	0x00000000

08019b6c <_scanf_chars>:
 8019b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b70:	4615      	mov	r5, r2
 8019b72:	688a      	ldr	r2, [r1, #8]
 8019b74:	4680      	mov	r8, r0
 8019b76:	460c      	mov	r4, r1
 8019b78:	b932      	cbnz	r2, 8019b88 <_scanf_chars+0x1c>
 8019b7a:	698a      	ldr	r2, [r1, #24]
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	bf0c      	ite	eq
 8019b80:	2201      	moveq	r2, #1
 8019b82:	f04f 32ff 	movne.w	r2, #4294967295
 8019b86:	608a      	str	r2, [r1, #8]
 8019b88:	6822      	ldr	r2, [r4, #0]
 8019b8a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8019c1c <_scanf_chars+0xb0>
 8019b8e:	06d1      	lsls	r1, r2, #27
 8019b90:	bf5f      	itttt	pl
 8019b92:	681a      	ldrpl	r2, [r3, #0]
 8019b94:	1d11      	addpl	r1, r2, #4
 8019b96:	6019      	strpl	r1, [r3, #0]
 8019b98:	6816      	ldrpl	r6, [r2, #0]
 8019b9a:	2700      	movs	r7, #0
 8019b9c:	69a0      	ldr	r0, [r4, #24]
 8019b9e:	b188      	cbz	r0, 8019bc4 <_scanf_chars+0x58>
 8019ba0:	2801      	cmp	r0, #1
 8019ba2:	d107      	bne.n	8019bb4 <_scanf_chars+0x48>
 8019ba4:	682a      	ldr	r2, [r5, #0]
 8019ba6:	7811      	ldrb	r1, [r2, #0]
 8019ba8:	6962      	ldr	r2, [r4, #20]
 8019baa:	5c52      	ldrb	r2, [r2, r1]
 8019bac:	b952      	cbnz	r2, 8019bc4 <_scanf_chars+0x58>
 8019bae:	2f00      	cmp	r7, #0
 8019bb0:	d031      	beq.n	8019c16 <_scanf_chars+0xaa>
 8019bb2:	e022      	b.n	8019bfa <_scanf_chars+0x8e>
 8019bb4:	2802      	cmp	r0, #2
 8019bb6:	d120      	bne.n	8019bfa <_scanf_chars+0x8e>
 8019bb8:	682b      	ldr	r3, [r5, #0]
 8019bba:	781b      	ldrb	r3, [r3, #0]
 8019bbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019bc0:	071b      	lsls	r3, r3, #28
 8019bc2:	d41a      	bmi.n	8019bfa <_scanf_chars+0x8e>
 8019bc4:	6823      	ldr	r3, [r4, #0]
 8019bc6:	06da      	lsls	r2, r3, #27
 8019bc8:	bf5e      	ittt	pl
 8019bca:	682b      	ldrpl	r3, [r5, #0]
 8019bcc:	781b      	ldrbpl	r3, [r3, #0]
 8019bce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019bd2:	682a      	ldr	r2, [r5, #0]
 8019bd4:	686b      	ldr	r3, [r5, #4]
 8019bd6:	3201      	adds	r2, #1
 8019bd8:	602a      	str	r2, [r5, #0]
 8019bda:	68a2      	ldr	r2, [r4, #8]
 8019bdc:	3b01      	subs	r3, #1
 8019bde:	3a01      	subs	r2, #1
 8019be0:	606b      	str	r3, [r5, #4]
 8019be2:	3701      	adds	r7, #1
 8019be4:	60a2      	str	r2, [r4, #8]
 8019be6:	b142      	cbz	r2, 8019bfa <_scanf_chars+0x8e>
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	dcd7      	bgt.n	8019b9c <_scanf_chars+0x30>
 8019bec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	4640      	mov	r0, r8
 8019bf4:	4798      	blx	r3
 8019bf6:	2800      	cmp	r0, #0
 8019bf8:	d0d0      	beq.n	8019b9c <_scanf_chars+0x30>
 8019bfa:	6823      	ldr	r3, [r4, #0]
 8019bfc:	f013 0310 	ands.w	r3, r3, #16
 8019c00:	d105      	bne.n	8019c0e <_scanf_chars+0xa2>
 8019c02:	68e2      	ldr	r2, [r4, #12]
 8019c04:	3201      	adds	r2, #1
 8019c06:	60e2      	str	r2, [r4, #12]
 8019c08:	69a2      	ldr	r2, [r4, #24]
 8019c0a:	b102      	cbz	r2, 8019c0e <_scanf_chars+0xa2>
 8019c0c:	7033      	strb	r3, [r6, #0]
 8019c0e:	6923      	ldr	r3, [r4, #16]
 8019c10:	443b      	add	r3, r7
 8019c12:	6123      	str	r3, [r4, #16]
 8019c14:	2000      	movs	r0, #0
 8019c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c1a:	bf00      	nop
 8019c1c:	080732ba 	.word	0x080732ba

08019c20 <_scanf_i>:
 8019c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c24:	4698      	mov	r8, r3
 8019c26:	4b76      	ldr	r3, [pc, #472]	; (8019e00 <_scanf_i+0x1e0>)
 8019c28:	460c      	mov	r4, r1
 8019c2a:	4682      	mov	sl, r0
 8019c2c:	4616      	mov	r6, r2
 8019c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019c32:	b087      	sub	sp, #28
 8019c34:	ab03      	add	r3, sp, #12
 8019c36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c3a:	4b72      	ldr	r3, [pc, #456]	; (8019e04 <_scanf_i+0x1e4>)
 8019c3c:	69a1      	ldr	r1, [r4, #24]
 8019c3e:	4a72      	ldr	r2, [pc, #456]	; (8019e08 <_scanf_i+0x1e8>)
 8019c40:	2903      	cmp	r1, #3
 8019c42:	bf18      	it	ne
 8019c44:	461a      	movne	r2, r3
 8019c46:	68a3      	ldr	r3, [r4, #8]
 8019c48:	9201      	str	r2, [sp, #4]
 8019c4a:	1e5a      	subs	r2, r3, #1
 8019c4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019c50:	bf88      	it	hi
 8019c52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019c56:	4627      	mov	r7, r4
 8019c58:	bf82      	ittt	hi
 8019c5a:	eb03 0905 	addhi.w	r9, r3, r5
 8019c5e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019c62:	60a3      	strhi	r3, [r4, #8]
 8019c64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019c68:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019c6c:	bf98      	it	ls
 8019c6e:	f04f 0900 	movls.w	r9, #0
 8019c72:	6023      	str	r3, [r4, #0]
 8019c74:	463d      	mov	r5, r7
 8019c76:	f04f 0b00 	mov.w	fp, #0
 8019c7a:	6831      	ldr	r1, [r6, #0]
 8019c7c:	ab03      	add	r3, sp, #12
 8019c7e:	7809      	ldrb	r1, [r1, #0]
 8019c80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019c84:	2202      	movs	r2, #2
 8019c86:	f7e6 facb 	bl	8000220 <memchr>
 8019c8a:	b328      	cbz	r0, 8019cd8 <_scanf_i+0xb8>
 8019c8c:	f1bb 0f01 	cmp.w	fp, #1
 8019c90:	d159      	bne.n	8019d46 <_scanf_i+0x126>
 8019c92:	6862      	ldr	r2, [r4, #4]
 8019c94:	b92a      	cbnz	r2, 8019ca2 <_scanf_i+0x82>
 8019c96:	6822      	ldr	r2, [r4, #0]
 8019c98:	2308      	movs	r3, #8
 8019c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c9e:	6063      	str	r3, [r4, #4]
 8019ca0:	6022      	str	r2, [r4, #0]
 8019ca2:	6822      	ldr	r2, [r4, #0]
 8019ca4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019ca8:	6022      	str	r2, [r4, #0]
 8019caa:	68a2      	ldr	r2, [r4, #8]
 8019cac:	1e51      	subs	r1, r2, #1
 8019cae:	60a1      	str	r1, [r4, #8]
 8019cb0:	b192      	cbz	r2, 8019cd8 <_scanf_i+0xb8>
 8019cb2:	6832      	ldr	r2, [r6, #0]
 8019cb4:	1c51      	adds	r1, r2, #1
 8019cb6:	6031      	str	r1, [r6, #0]
 8019cb8:	7812      	ldrb	r2, [r2, #0]
 8019cba:	f805 2b01 	strb.w	r2, [r5], #1
 8019cbe:	6872      	ldr	r2, [r6, #4]
 8019cc0:	3a01      	subs	r2, #1
 8019cc2:	2a00      	cmp	r2, #0
 8019cc4:	6072      	str	r2, [r6, #4]
 8019cc6:	dc07      	bgt.n	8019cd8 <_scanf_i+0xb8>
 8019cc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019ccc:	4631      	mov	r1, r6
 8019cce:	4650      	mov	r0, sl
 8019cd0:	4790      	blx	r2
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	f040 8085 	bne.w	8019de2 <_scanf_i+0x1c2>
 8019cd8:	f10b 0b01 	add.w	fp, fp, #1
 8019cdc:	f1bb 0f03 	cmp.w	fp, #3
 8019ce0:	d1cb      	bne.n	8019c7a <_scanf_i+0x5a>
 8019ce2:	6863      	ldr	r3, [r4, #4]
 8019ce4:	b90b      	cbnz	r3, 8019cea <_scanf_i+0xca>
 8019ce6:	230a      	movs	r3, #10
 8019ce8:	6063      	str	r3, [r4, #4]
 8019cea:	6863      	ldr	r3, [r4, #4]
 8019cec:	4947      	ldr	r1, [pc, #284]	; (8019e0c <_scanf_i+0x1ec>)
 8019cee:	6960      	ldr	r0, [r4, #20]
 8019cf0:	1ac9      	subs	r1, r1, r3
 8019cf2:	f000 f8a9 	bl	8019e48 <__sccl>
 8019cf6:	f04f 0b00 	mov.w	fp, #0
 8019cfa:	68a3      	ldr	r3, [r4, #8]
 8019cfc:	6822      	ldr	r2, [r4, #0]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d03d      	beq.n	8019d7e <_scanf_i+0x15e>
 8019d02:	6831      	ldr	r1, [r6, #0]
 8019d04:	6960      	ldr	r0, [r4, #20]
 8019d06:	f891 c000 	ldrb.w	ip, [r1]
 8019d0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	d035      	beq.n	8019d7e <_scanf_i+0x15e>
 8019d12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019d16:	d124      	bne.n	8019d62 <_scanf_i+0x142>
 8019d18:	0510      	lsls	r0, r2, #20
 8019d1a:	d522      	bpl.n	8019d62 <_scanf_i+0x142>
 8019d1c:	f10b 0b01 	add.w	fp, fp, #1
 8019d20:	f1b9 0f00 	cmp.w	r9, #0
 8019d24:	d003      	beq.n	8019d2e <_scanf_i+0x10e>
 8019d26:	3301      	adds	r3, #1
 8019d28:	f109 39ff 	add.w	r9, r9, #4294967295
 8019d2c:	60a3      	str	r3, [r4, #8]
 8019d2e:	6873      	ldr	r3, [r6, #4]
 8019d30:	3b01      	subs	r3, #1
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	6073      	str	r3, [r6, #4]
 8019d36:	dd1b      	ble.n	8019d70 <_scanf_i+0x150>
 8019d38:	6833      	ldr	r3, [r6, #0]
 8019d3a:	3301      	adds	r3, #1
 8019d3c:	6033      	str	r3, [r6, #0]
 8019d3e:	68a3      	ldr	r3, [r4, #8]
 8019d40:	3b01      	subs	r3, #1
 8019d42:	60a3      	str	r3, [r4, #8]
 8019d44:	e7d9      	b.n	8019cfa <_scanf_i+0xda>
 8019d46:	f1bb 0f02 	cmp.w	fp, #2
 8019d4a:	d1ae      	bne.n	8019caa <_scanf_i+0x8a>
 8019d4c:	6822      	ldr	r2, [r4, #0]
 8019d4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019d52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019d56:	d1bf      	bne.n	8019cd8 <_scanf_i+0xb8>
 8019d58:	2310      	movs	r3, #16
 8019d5a:	6063      	str	r3, [r4, #4]
 8019d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019d60:	e7a2      	b.n	8019ca8 <_scanf_i+0x88>
 8019d62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019d66:	6022      	str	r2, [r4, #0]
 8019d68:	780b      	ldrb	r3, [r1, #0]
 8019d6a:	f805 3b01 	strb.w	r3, [r5], #1
 8019d6e:	e7de      	b.n	8019d2e <_scanf_i+0x10e>
 8019d70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019d74:	4631      	mov	r1, r6
 8019d76:	4650      	mov	r0, sl
 8019d78:	4798      	blx	r3
 8019d7a:	2800      	cmp	r0, #0
 8019d7c:	d0df      	beq.n	8019d3e <_scanf_i+0x11e>
 8019d7e:	6823      	ldr	r3, [r4, #0]
 8019d80:	05db      	lsls	r3, r3, #23
 8019d82:	d50d      	bpl.n	8019da0 <_scanf_i+0x180>
 8019d84:	42bd      	cmp	r5, r7
 8019d86:	d909      	bls.n	8019d9c <_scanf_i+0x17c>
 8019d88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d90:	4632      	mov	r2, r6
 8019d92:	4650      	mov	r0, sl
 8019d94:	4798      	blx	r3
 8019d96:	f105 39ff 	add.w	r9, r5, #4294967295
 8019d9a:	464d      	mov	r5, r9
 8019d9c:	42bd      	cmp	r5, r7
 8019d9e:	d02d      	beq.n	8019dfc <_scanf_i+0x1dc>
 8019da0:	6822      	ldr	r2, [r4, #0]
 8019da2:	f012 0210 	ands.w	r2, r2, #16
 8019da6:	d113      	bne.n	8019dd0 <_scanf_i+0x1b0>
 8019da8:	702a      	strb	r2, [r5, #0]
 8019daa:	6863      	ldr	r3, [r4, #4]
 8019dac:	9e01      	ldr	r6, [sp, #4]
 8019dae:	4639      	mov	r1, r7
 8019db0:	4650      	mov	r0, sl
 8019db2:	47b0      	blx	r6
 8019db4:	6821      	ldr	r1, [r4, #0]
 8019db6:	f8d8 3000 	ldr.w	r3, [r8]
 8019dba:	f011 0f20 	tst.w	r1, #32
 8019dbe:	d013      	beq.n	8019de8 <_scanf_i+0x1c8>
 8019dc0:	1d1a      	adds	r2, r3, #4
 8019dc2:	f8c8 2000 	str.w	r2, [r8]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	6018      	str	r0, [r3, #0]
 8019dca:	68e3      	ldr	r3, [r4, #12]
 8019dcc:	3301      	adds	r3, #1
 8019dce:	60e3      	str	r3, [r4, #12]
 8019dd0:	1bed      	subs	r5, r5, r7
 8019dd2:	44ab      	add	fp, r5
 8019dd4:	6925      	ldr	r5, [r4, #16]
 8019dd6:	445d      	add	r5, fp
 8019dd8:	6125      	str	r5, [r4, #16]
 8019dda:	2000      	movs	r0, #0
 8019ddc:	b007      	add	sp, #28
 8019dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de2:	f04f 0b00 	mov.w	fp, #0
 8019de6:	e7ca      	b.n	8019d7e <_scanf_i+0x15e>
 8019de8:	1d1a      	adds	r2, r3, #4
 8019dea:	f8c8 2000 	str.w	r2, [r8]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	f011 0f01 	tst.w	r1, #1
 8019df4:	bf14      	ite	ne
 8019df6:	8018      	strhne	r0, [r3, #0]
 8019df8:	6018      	streq	r0, [r3, #0]
 8019dfa:	e7e6      	b.n	8019dca <_scanf_i+0x1aa>
 8019dfc:	2001      	movs	r0, #1
 8019dfe:	e7ed      	b.n	8019ddc <_scanf_i+0x1bc>
 8019e00:	0801de54 	.word	0x0801de54
 8019e04:	0801a04d 	.word	0x0801a04d
 8019e08:	08016b31 	.word	0x08016b31
 8019e0c:	080736e5 	.word	0x080736e5

08019e10 <_read_r>:
 8019e10:	b538      	push	{r3, r4, r5, lr}
 8019e12:	4d07      	ldr	r5, [pc, #28]	; (8019e30 <_read_r+0x20>)
 8019e14:	4604      	mov	r4, r0
 8019e16:	4608      	mov	r0, r1
 8019e18:	4611      	mov	r1, r2
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	602a      	str	r2, [r5, #0]
 8019e1e:	461a      	mov	r2, r3
 8019e20:	f7ea fe12 	bl	8004a48 <_read>
 8019e24:	1c43      	adds	r3, r0, #1
 8019e26:	d102      	bne.n	8019e2e <_read_r+0x1e>
 8019e28:	682b      	ldr	r3, [r5, #0]
 8019e2a:	b103      	cbz	r3, 8019e2e <_read_r+0x1e>
 8019e2c:	6023      	str	r3, [r4, #0]
 8019e2e:	bd38      	pop	{r3, r4, r5, pc}
 8019e30:	20005da8 	.word	0x20005da8
 8019e34:	00000000 	.word	0x00000000

08019e38 <nan>:
 8019e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e40 <nan+0x8>
 8019e3c:	4770      	bx	lr
 8019e3e:	bf00      	nop
 8019e40:	00000000 	.word	0x00000000
 8019e44:	7ff80000 	.word	0x7ff80000

08019e48 <__sccl>:
 8019e48:	b570      	push	{r4, r5, r6, lr}
 8019e4a:	780b      	ldrb	r3, [r1, #0]
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	2b5e      	cmp	r3, #94	; 0x5e
 8019e50:	bf0b      	itete	eq
 8019e52:	784b      	ldrbeq	r3, [r1, #1]
 8019e54:	1c48      	addne	r0, r1, #1
 8019e56:	1c88      	addeq	r0, r1, #2
 8019e58:	2200      	movne	r2, #0
 8019e5a:	bf08      	it	eq
 8019e5c:	2201      	moveq	r2, #1
 8019e5e:	1e61      	subs	r1, r4, #1
 8019e60:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019e64:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019e68:	42a9      	cmp	r1, r5
 8019e6a:	d1fb      	bne.n	8019e64 <__sccl+0x1c>
 8019e6c:	b90b      	cbnz	r3, 8019e72 <__sccl+0x2a>
 8019e6e:	3801      	subs	r0, #1
 8019e70:	bd70      	pop	{r4, r5, r6, pc}
 8019e72:	f082 0201 	eor.w	r2, r2, #1
 8019e76:	54e2      	strb	r2, [r4, r3]
 8019e78:	4605      	mov	r5, r0
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019e80:	292d      	cmp	r1, #45	; 0x2d
 8019e82:	d006      	beq.n	8019e92 <__sccl+0x4a>
 8019e84:	295d      	cmp	r1, #93	; 0x5d
 8019e86:	d0f3      	beq.n	8019e70 <__sccl+0x28>
 8019e88:	b909      	cbnz	r1, 8019e8e <__sccl+0x46>
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	e7f0      	b.n	8019e70 <__sccl+0x28>
 8019e8e:	460b      	mov	r3, r1
 8019e90:	e7f1      	b.n	8019e76 <__sccl+0x2e>
 8019e92:	786e      	ldrb	r6, [r5, #1]
 8019e94:	2e5d      	cmp	r6, #93	; 0x5d
 8019e96:	d0fa      	beq.n	8019e8e <__sccl+0x46>
 8019e98:	42b3      	cmp	r3, r6
 8019e9a:	dcf8      	bgt.n	8019e8e <__sccl+0x46>
 8019e9c:	3502      	adds	r5, #2
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	3101      	adds	r1, #1
 8019ea2:	428e      	cmp	r6, r1
 8019ea4:	5462      	strb	r2, [r4, r1]
 8019ea6:	dcfb      	bgt.n	8019ea0 <__sccl+0x58>
 8019ea8:	1af1      	subs	r1, r6, r3
 8019eaa:	3901      	subs	r1, #1
 8019eac:	1c58      	adds	r0, r3, #1
 8019eae:	42b3      	cmp	r3, r6
 8019eb0:	bfa8      	it	ge
 8019eb2:	2100      	movge	r1, #0
 8019eb4:	1843      	adds	r3, r0, r1
 8019eb6:	e7e0      	b.n	8019e7a <__sccl+0x32>

08019eb8 <_raise_r>:
 8019eb8:	291f      	cmp	r1, #31
 8019eba:	b538      	push	{r3, r4, r5, lr}
 8019ebc:	4604      	mov	r4, r0
 8019ebe:	460d      	mov	r5, r1
 8019ec0:	d904      	bls.n	8019ecc <_raise_r+0x14>
 8019ec2:	2316      	movs	r3, #22
 8019ec4:	6003      	str	r3, [r0, #0]
 8019ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8019eca:	bd38      	pop	{r3, r4, r5, pc}
 8019ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019ece:	b112      	cbz	r2, 8019ed6 <_raise_r+0x1e>
 8019ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ed4:	b94b      	cbnz	r3, 8019eea <_raise_r+0x32>
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f000 f830 	bl	8019f3c <_getpid_r>
 8019edc:	462a      	mov	r2, r5
 8019ede:	4601      	mov	r1, r0
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ee6:	f000 b817 	b.w	8019f18 <_kill_r>
 8019eea:	2b01      	cmp	r3, #1
 8019eec:	d00a      	beq.n	8019f04 <_raise_r+0x4c>
 8019eee:	1c59      	adds	r1, r3, #1
 8019ef0:	d103      	bne.n	8019efa <_raise_r+0x42>
 8019ef2:	2316      	movs	r3, #22
 8019ef4:	6003      	str	r3, [r0, #0]
 8019ef6:	2001      	movs	r0, #1
 8019ef8:	e7e7      	b.n	8019eca <_raise_r+0x12>
 8019efa:	2400      	movs	r4, #0
 8019efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019f00:	4628      	mov	r0, r5
 8019f02:	4798      	blx	r3
 8019f04:	2000      	movs	r0, #0
 8019f06:	e7e0      	b.n	8019eca <_raise_r+0x12>

08019f08 <raise>:
 8019f08:	4b02      	ldr	r3, [pc, #8]	; (8019f14 <raise+0xc>)
 8019f0a:	4601      	mov	r1, r0
 8019f0c:	6818      	ldr	r0, [r3, #0]
 8019f0e:	f7ff bfd3 	b.w	8019eb8 <_raise_r>
 8019f12:	bf00      	nop
 8019f14:	20000248 	.word	0x20000248

08019f18 <_kill_r>:
 8019f18:	b538      	push	{r3, r4, r5, lr}
 8019f1a:	4d07      	ldr	r5, [pc, #28]	; (8019f38 <_kill_r+0x20>)
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	4604      	mov	r4, r0
 8019f20:	4608      	mov	r0, r1
 8019f22:	4611      	mov	r1, r2
 8019f24:	602b      	str	r3, [r5, #0]
 8019f26:	f7ea fd75 	bl	8004a14 <_kill>
 8019f2a:	1c43      	adds	r3, r0, #1
 8019f2c:	d102      	bne.n	8019f34 <_kill_r+0x1c>
 8019f2e:	682b      	ldr	r3, [r5, #0]
 8019f30:	b103      	cbz	r3, 8019f34 <_kill_r+0x1c>
 8019f32:	6023      	str	r3, [r4, #0]
 8019f34:	bd38      	pop	{r3, r4, r5, pc}
 8019f36:	bf00      	nop
 8019f38:	20005da8 	.word	0x20005da8

08019f3c <_getpid_r>:
 8019f3c:	f7ea bd62 	b.w	8004a04 <_getpid>

08019f40 <strncmp>:
 8019f40:	b510      	push	{r4, lr}
 8019f42:	b17a      	cbz	r2, 8019f64 <strncmp+0x24>
 8019f44:	4603      	mov	r3, r0
 8019f46:	3901      	subs	r1, #1
 8019f48:	1884      	adds	r4, r0, r2
 8019f4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019f4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019f52:	4290      	cmp	r0, r2
 8019f54:	d101      	bne.n	8019f5a <strncmp+0x1a>
 8019f56:	42a3      	cmp	r3, r4
 8019f58:	d101      	bne.n	8019f5e <strncmp+0x1e>
 8019f5a:	1a80      	subs	r0, r0, r2
 8019f5c:	bd10      	pop	{r4, pc}
 8019f5e:	2800      	cmp	r0, #0
 8019f60:	d1f3      	bne.n	8019f4a <strncmp+0xa>
 8019f62:	e7fa      	b.n	8019f5a <strncmp+0x1a>
 8019f64:	4610      	mov	r0, r2
 8019f66:	e7f9      	b.n	8019f5c <strncmp+0x1c>

08019f68 <_strtoul_l.constprop.0>:
 8019f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f6c:	4f36      	ldr	r7, [pc, #216]	; (801a048 <_strtoul_l.constprop.0+0xe0>)
 8019f6e:	4686      	mov	lr, r0
 8019f70:	460d      	mov	r5, r1
 8019f72:	4628      	mov	r0, r5
 8019f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f78:	5de6      	ldrb	r6, [r4, r7]
 8019f7a:	f016 0608 	ands.w	r6, r6, #8
 8019f7e:	d1f8      	bne.n	8019f72 <_strtoul_l.constprop.0+0xa>
 8019f80:	2c2d      	cmp	r4, #45	; 0x2d
 8019f82:	d12f      	bne.n	8019fe4 <_strtoul_l.constprop.0+0x7c>
 8019f84:	782c      	ldrb	r4, [r5, #0]
 8019f86:	2601      	movs	r6, #1
 8019f88:	1c85      	adds	r5, r0, #2
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d057      	beq.n	801a03e <_strtoul_l.constprop.0+0xd6>
 8019f8e:	2b10      	cmp	r3, #16
 8019f90:	d109      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 8019f92:	2c30      	cmp	r4, #48	; 0x30
 8019f94:	d107      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 8019f96:	7828      	ldrb	r0, [r5, #0]
 8019f98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019f9c:	2858      	cmp	r0, #88	; 0x58
 8019f9e:	d149      	bne.n	801a034 <_strtoul_l.constprop.0+0xcc>
 8019fa0:	786c      	ldrb	r4, [r5, #1]
 8019fa2:	2310      	movs	r3, #16
 8019fa4:	3502      	adds	r5, #2
 8019fa6:	f04f 38ff 	mov.w	r8, #4294967295
 8019faa:	2700      	movs	r7, #0
 8019fac:	fbb8 f8f3 	udiv	r8, r8, r3
 8019fb0:	fb03 f908 	mul.w	r9, r3, r8
 8019fb4:	ea6f 0909 	mvn.w	r9, r9
 8019fb8:	4638      	mov	r0, r7
 8019fba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019fbe:	f1bc 0f09 	cmp.w	ip, #9
 8019fc2:	d814      	bhi.n	8019fee <_strtoul_l.constprop.0+0x86>
 8019fc4:	4664      	mov	r4, ip
 8019fc6:	42a3      	cmp	r3, r4
 8019fc8:	dd22      	ble.n	801a010 <_strtoul_l.constprop.0+0xa8>
 8019fca:	2f00      	cmp	r7, #0
 8019fcc:	db1d      	blt.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fce:	4580      	cmp	r8, r0
 8019fd0:	d31b      	bcc.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fd2:	d101      	bne.n	8019fd8 <_strtoul_l.constprop.0+0x70>
 8019fd4:	45a1      	cmp	r9, r4
 8019fd6:	db18      	blt.n	801a00a <_strtoul_l.constprop.0+0xa2>
 8019fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8019fdc:	2701      	movs	r7, #1
 8019fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fe2:	e7ea      	b.n	8019fba <_strtoul_l.constprop.0+0x52>
 8019fe4:	2c2b      	cmp	r4, #43	; 0x2b
 8019fe6:	bf04      	itt	eq
 8019fe8:	782c      	ldrbeq	r4, [r5, #0]
 8019fea:	1c85      	addeq	r5, r0, #2
 8019fec:	e7cd      	b.n	8019f8a <_strtoul_l.constprop.0+0x22>
 8019fee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019ff2:	f1bc 0f19 	cmp.w	ip, #25
 8019ff6:	d801      	bhi.n	8019ffc <_strtoul_l.constprop.0+0x94>
 8019ff8:	3c37      	subs	r4, #55	; 0x37
 8019ffa:	e7e4      	b.n	8019fc6 <_strtoul_l.constprop.0+0x5e>
 8019ffc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a000:	f1bc 0f19 	cmp.w	ip, #25
 801a004:	d804      	bhi.n	801a010 <_strtoul_l.constprop.0+0xa8>
 801a006:	3c57      	subs	r4, #87	; 0x57
 801a008:	e7dd      	b.n	8019fc6 <_strtoul_l.constprop.0+0x5e>
 801a00a:	f04f 37ff 	mov.w	r7, #4294967295
 801a00e:	e7e6      	b.n	8019fde <_strtoul_l.constprop.0+0x76>
 801a010:	2f00      	cmp	r7, #0
 801a012:	da07      	bge.n	801a024 <_strtoul_l.constprop.0+0xbc>
 801a014:	2322      	movs	r3, #34	; 0x22
 801a016:	f8ce 3000 	str.w	r3, [lr]
 801a01a:	f04f 30ff 	mov.w	r0, #4294967295
 801a01e:	b932      	cbnz	r2, 801a02e <_strtoul_l.constprop.0+0xc6>
 801a020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a024:	b106      	cbz	r6, 801a028 <_strtoul_l.constprop.0+0xc0>
 801a026:	4240      	negs	r0, r0
 801a028:	2a00      	cmp	r2, #0
 801a02a:	d0f9      	beq.n	801a020 <_strtoul_l.constprop.0+0xb8>
 801a02c:	b107      	cbz	r7, 801a030 <_strtoul_l.constprop.0+0xc8>
 801a02e:	1e69      	subs	r1, r5, #1
 801a030:	6011      	str	r1, [r2, #0]
 801a032:	e7f5      	b.n	801a020 <_strtoul_l.constprop.0+0xb8>
 801a034:	2430      	movs	r4, #48	; 0x30
 801a036:	2b00      	cmp	r3, #0
 801a038:	d1b5      	bne.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a03a:	2308      	movs	r3, #8
 801a03c:	e7b3      	b.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a03e:	2c30      	cmp	r4, #48	; 0x30
 801a040:	d0a9      	beq.n	8019f96 <_strtoul_l.constprop.0+0x2e>
 801a042:	230a      	movs	r3, #10
 801a044:	e7af      	b.n	8019fa6 <_strtoul_l.constprop.0+0x3e>
 801a046:	bf00      	nop
 801a048:	080732ba 	.word	0x080732ba

0801a04c <_strtoul_r>:
 801a04c:	f7ff bf8c 	b.w	8019f68 <_strtoul_l.constprop.0>

0801a050 <strtoul>:
 801a050:	4613      	mov	r3, r2
 801a052:	460a      	mov	r2, r1
 801a054:	4601      	mov	r1, r0
 801a056:	4802      	ldr	r0, [pc, #8]	; (801a060 <strtoul+0x10>)
 801a058:	6800      	ldr	r0, [r0, #0]
 801a05a:	f7ff bf85 	b.w	8019f68 <_strtoul_l.constprop.0>
 801a05e:	bf00      	nop
 801a060:	20000248 	.word	0x20000248

0801a064 <__submore>:
 801a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a068:	460c      	mov	r4, r1
 801a06a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a070:	4299      	cmp	r1, r3
 801a072:	d11d      	bne.n	801a0b0 <__submore+0x4c>
 801a074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a078:	f7fa ff28 	bl	8014ecc <_malloc_r>
 801a07c:	b918      	cbnz	r0, 801a086 <__submore+0x22>
 801a07e:	f04f 30ff 	mov.w	r0, #4294967295
 801a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a08a:	63a3      	str	r3, [r4, #56]	; 0x38
 801a08c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a090:	6360      	str	r0, [r4, #52]	; 0x34
 801a092:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a096:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a09a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a09e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a0a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a0a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a0aa:	6020      	str	r0, [r4, #0]
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	e7e8      	b.n	801a082 <__submore+0x1e>
 801a0b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a0b2:	0077      	lsls	r7, r6, #1
 801a0b4:	463a      	mov	r2, r7
 801a0b6:	f7ff f9fc 	bl	80194b2 <_realloc_r>
 801a0ba:	4605      	mov	r5, r0
 801a0bc:	2800      	cmp	r0, #0
 801a0be:	d0de      	beq.n	801a07e <__submore+0x1a>
 801a0c0:	eb00 0806 	add.w	r8, r0, r6
 801a0c4:	4601      	mov	r1, r0
 801a0c6:	4632      	mov	r2, r6
 801a0c8:	4640      	mov	r0, r8
 801a0ca:	f7fa fc0b 	bl	80148e4 <memcpy>
 801a0ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a0d2:	f8c4 8000 	str.w	r8, [r4]
 801a0d6:	e7e9      	b.n	801a0ac <__submore+0x48>

0801a0d8 <__ascii_wctomb>:
 801a0d8:	b149      	cbz	r1, 801a0ee <__ascii_wctomb+0x16>
 801a0da:	2aff      	cmp	r2, #255	; 0xff
 801a0dc:	bf85      	ittet	hi
 801a0de:	238a      	movhi	r3, #138	; 0x8a
 801a0e0:	6003      	strhi	r3, [r0, #0]
 801a0e2:	700a      	strbls	r2, [r1, #0]
 801a0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 801a0e8:	bf98      	it	ls
 801a0ea:	2001      	movls	r0, #1
 801a0ec:	4770      	bx	lr
 801a0ee:	4608      	mov	r0, r1
 801a0f0:	4770      	bx	lr
	...

0801a0f4 <__env_lock>:
 801a0f4:	4801      	ldr	r0, [pc, #4]	; (801a0fc <__env_lock+0x8>)
 801a0f6:	f7fe bc51 	b.w	801899c <__retarget_lock_acquire_recursive>
 801a0fa:	bf00      	nop
 801a0fc:	20005da0 	.word	0x20005da0

0801a100 <__env_unlock>:
 801a100:	4801      	ldr	r0, [pc, #4]	; (801a108 <__env_unlock+0x8>)
 801a102:	f7fe bc4d 	b.w	80189a0 <__retarget_lock_release_recursive>
 801a106:	bf00      	nop
 801a108:	20005da0 	.word	0x20005da0

0801a10c <_fstat_r>:
 801a10c:	b538      	push	{r3, r4, r5, lr}
 801a10e:	4d07      	ldr	r5, [pc, #28]	; (801a12c <_fstat_r+0x20>)
 801a110:	2300      	movs	r3, #0
 801a112:	4604      	mov	r4, r0
 801a114:	4608      	mov	r0, r1
 801a116:	4611      	mov	r1, r2
 801a118:	602b      	str	r3, [r5, #0]
 801a11a:	f7ea fcda 	bl	8004ad2 <_fstat>
 801a11e:	1c43      	adds	r3, r0, #1
 801a120:	d102      	bne.n	801a128 <_fstat_r+0x1c>
 801a122:	682b      	ldr	r3, [r5, #0]
 801a124:	b103      	cbz	r3, 801a128 <_fstat_r+0x1c>
 801a126:	6023      	str	r3, [r4, #0]
 801a128:	bd38      	pop	{r3, r4, r5, pc}
 801a12a:	bf00      	nop
 801a12c:	20005da8 	.word	0x20005da8

0801a130 <_isatty_r>:
 801a130:	b538      	push	{r3, r4, r5, lr}
 801a132:	4d06      	ldr	r5, [pc, #24]	; (801a14c <_isatty_r+0x1c>)
 801a134:	2300      	movs	r3, #0
 801a136:	4604      	mov	r4, r0
 801a138:	4608      	mov	r0, r1
 801a13a:	602b      	str	r3, [r5, #0]
 801a13c:	f7ea fcd9 	bl	8004af2 <_isatty>
 801a140:	1c43      	adds	r3, r0, #1
 801a142:	d102      	bne.n	801a14a <_isatty_r+0x1a>
 801a144:	682b      	ldr	r3, [r5, #0]
 801a146:	b103      	cbz	r3, 801a14a <_isatty_r+0x1a>
 801a148:	6023      	str	r3, [r4, #0]
 801a14a:	bd38      	pop	{r3, r4, r5, pc}
 801a14c:	20005da8 	.word	0x20005da8

0801a150 <_malloc_usable_size_r>:
 801a150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a154:	1f18      	subs	r0, r3, #4
 801a156:	2b00      	cmp	r3, #0
 801a158:	bfbc      	itt	lt
 801a15a:	580b      	ldrlt	r3, [r1, r0]
 801a15c:	18c0      	addlt	r0, r0, r3
 801a15e:	4770      	bx	lr

0801a160 <cos>:
 801a160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a162:	ec53 2b10 	vmov	r2, r3, d0
 801a166:	4826      	ldr	r0, [pc, #152]	; (801a200 <cos+0xa0>)
 801a168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a16c:	4281      	cmp	r1, r0
 801a16e:	dc06      	bgt.n	801a17e <cos+0x1e>
 801a170:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a1f8 <cos+0x98>
 801a174:	b005      	add	sp, #20
 801a176:	f85d eb04 	ldr.w	lr, [sp], #4
 801a17a:	f001 bbf1 	b.w	801b960 <__kernel_cos>
 801a17e:	4821      	ldr	r0, [pc, #132]	; (801a204 <cos+0xa4>)
 801a180:	4281      	cmp	r1, r0
 801a182:	dd09      	ble.n	801a198 <cos+0x38>
 801a184:	ee10 0a10 	vmov	r0, s0
 801a188:	4619      	mov	r1, r3
 801a18a:	f7e6 f89d 	bl	80002c8 <__aeabi_dsub>
 801a18e:	ec41 0b10 	vmov	d0, r0, r1
 801a192:	b005      	add	sp, #20
 801a194:	f85d fb04 	ldr.w	pc, [sp], #4
 801a198:	4668      	mov	r0, sp
 801a19a:	f001 f921 	bl	801b3e0 <__ieee754_rem_pio2>
 801a19e:	f000 0003 	and.w	r0, r0, #3
 801a1a2:	2801      	cmp	r0, #1
 801a1a4:	d00b      	beq.n	801a1be <cos+0x5e>
 801a1a6:	2802      	cmp	r0, #2
 801a1a8:	d016      	beq.n	801a1d8 <cos+0x78>
 801a1aa:	b9e0      	cbnz	r0, 801a1e6 <cos+0x86>
 801a1ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1b0:	ed9d 0b00 	vldr	d0, [sp]
 801a1b4:	f001 fbd4 	bl	801b960 <__kernel_cos>
 801a1b8:	ec51 0b10 	vmov	r0, r1, d0
 801a1bc:	e7e7      	b.n	801a18e <cos+0x2e>
 801a1be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1c2:	ed9d 0b00 	vldr	d0, [sp]
 801a1c6:	f001 ffe3 	bl	801c190 <__kernel_sin>
 801a1ca:	ec53 2b10 	vmov	r2, r3, d0
 801a1ce:	ee10 0a10 	vmov	r0, s0
 801a1d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a1d6:	e7da      	b.n	801a18e <cos+0x2e>
 801a1d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1dc:	ed9d 0b00 	vldr	d0, [sp]
 801a1e0:	f001 fbbe 	bl	801b960 <__kernel_cos>
 801a1e4:	e7f1      	b.n	801a1ca <cos+0x6a>
 801a1e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1ea:	ed9d 0b00 	vldr	d0, [sp]
 801a1ee:	2001      	movs	r0, #1
 801a1f0:	f001 ffce 	bl	801c190 <__kernel_sin>
 801a1f4:	e7e0      	b.n	801a1b8 <cos+0x58>
 801a1f6:	bf00      	nop
	...
 801a200:	3fe921fb 	.word	0x3fe921fb
 801a204:	7fefffff 	.word	0x7fefffff

0801a208 <sin>:
 801a208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a20a:	ec53 2b10 	vmov	r2, r3, d0
 801a20e:	4828      	ldr	r0, [pc, #160]	; (801a2b0 <sin+0xa8>)
 801a210:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a214:	4281      	cmp	r1, r0
 801a216:	dc07      	bgt.n	801a228 <sin+0x20>
 801a218:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a2a8 <sin+0xa0>
 801a21c:	2000      	movs	r0, #0
 801a21e:	b005      	add	sp, #20
 801a220:	f85d eb04 	ldr.w	lr, [sp], #4
 801a224:	f001 bfb4 	b.w	801c190 <__kernel_sin>
 801a228:	4822      	ldr	r0, [pc, #136]	; (801a2b4 <sin+0xac>)
 801a22a:	4281      	cmp	r1, r0
 801a22c:	dd09      	ble.n	801a242 <sin+0x3a>
 801a22e:	ee10 0a10 	vmov	r0, s0
 801a232:	4619      	mov	r1, r3
 801a234:	f7e6 f848 	bl	80002c8 <__aeabi_dsub>
 801a238:	ec41 0b10 	vmov	d0, r0, r1
 801a23c:	b005      	add	sp, #20
 801a23e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a242:	4668      	mov	r0, sp
 801a244:	f001 f8cc 	bl	801b3e0 <__ieee754_rem_pio2>
 801a248:	f000 0003 	and.w	r0, r0, #3
 801a24c:	2801      	cmp	r0, #1
 801a24e:	d00c      	beq.n	801a26a <sin+0x62>
 801a250:	2802      	cmp	r0, #2
 801a252:	d011      	beq.n	801a278 <sin+0x70>
 801a254:	b9f0      	cbnz	r0, 801a294 <sin+0x8c>
 801a256:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a25a:	ed9d 0b00 	vldr	d0, [sp]
 801a25e:	2001      	movs	r0, #1
 801a260:	f001 ff96 	bl	801c190 <__kernel_sin>
 801a264:	ec51 0b10 	vmov	r0, r1, d0
 801a268:	e7e6      	b.n	801a238 <sin+0x30>
 801a26a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a26e:	ed9d 0b00 	vldr	d0, [sp]
 801a272:	f001 fb75 	bl	801b960 <__kernel_cos>
 801a276:	e7f5      	b.n	801a264 <sin+0x5c>
 801a278:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a27c:	ed9d 0b00 	vldr	d0, [sp]
 801a280:	2001      	movs	r0, #1
 801a282:	f001 ff85 	bl	801c190 <__kernel_sin>
 801a286:	ec53 2b10 	vmov	r2, r3, d0
 801a28a:	ee10 0a10 	vmov	r0, s0
 801a28e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a292:	e7d1      	b.n	801a238 <sin+0x30>
 801a294:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a298:	ed9d 0b00 	vldr	d0, [sp]
 801a29c:	f001 fb60 	bl	801b960 <__kernel_cos>
 801a2a0:	e7f1      	b.n	801a286 <sin+0x7e>
 801a2a2:	bf00      	nop
 801a2a4:	f3af 8000 	nop.w
	...
 801a2b0:	3fe921fb 	.word	0x3fe921fb
 801a2b4:	7fefffff 	.word	0x7fefffff

0801a2b8 <tan>:
 801a2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2ba:	ec53 2b10 	vmov	r2, r3, d0
 801a2be:	4816      	ldr	r0, [pc, #88]	; (801a318 <tan+0x60>)
 801a2c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a2c4:	4281      	cmp	r1, r0
 801a2c6:	dc07      	bgt.n	801a2d8 <tan+0x20>
 801a2c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801a310 <tan+0x58>
 801a2cc:	2001      	movs	r0, #1
 801a2ce:	b005      	add	sp, #20
 801a2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2d4:	f002 b81c 	b.w	801c310 <__kernel_tan>
 801a2d8:	4810      	ldr	r0, [pc, #64]	; (801a31c <tan+0x64>)
 801a2da:	4281      	cmp	r1, r0
 801a2dc:	dd09      	ble.n	801a2f2 <tan+0x3a>
 801a2de:	ee10 0a10 	vmov	r0, s0
 801a2e2:	4619      	mov	r1, r3
 801a2e4:	f7e5 fff0 	bl	80002c8 <__aeabi_dsub>
 801a2e8:	ec41 0b10 	vmov	d0, r0, r1
 801a2ec:	b005      	add	sp, #20
 801a2ee:	f85d fb04 	ldr.w	pc, [sp], #4
 801a2f2:	4668      	mov	r0, sp
 801a2f4:	f001 f874 	bl	801b3e0 <__ieee754_rem_pio2>
 801a2f8:	0040      	lsls	r0, r0, #1
 801a2fa:	f000 0002 	and.w	r0, r0, #2
 801a2fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a302:	ed9d 0b00 	vldr	d0, [sp]
 801a306:	f1c0 0001 	rsb	r0, r0, #1
 801a30a:	f002 f801 	bl	801c310 <__kernel_tan>
 801a30e:	e7ed      	b.n	801a2ec <tan+0x34>
	...
 801a318:	3fe921fb 	.word	0x3fe921fb
 801a31c:	7fefffff 	.word	0x7fefffff

0801a320 <acos>:
 801a320:	b538      	push	{r3, r4, r5, lr}
 801a322:	ed2d 8b02 	vpush	{d8}
 801a326:	ec55 4b10 	vmov	r4, r5, d0
 801a32a:	f000 f8c9 	bl	801a4c0 <__ieee754_acos>
 801a32e:	4622      	mov	r2, r4
 801a330:	462b      	mov	r3, r5
 801a332:	4620      	mov	r0, r4
 801a334:	4629      	mov	r1, r5
 801a336:	eeb0 8a40 	vmov.f32	s16, s0
 801a33a:	eef0 8a60 	vmov.f32	s17, s1
 801a33e:	f7e6 fc15 	bl	8000b6c <__aeabi_dcmpun>
 801a342:	b9a8      	cbnz	r0, 801a370 <acos+0x50>
 801a344:	ec45 4b10 	vmov	d0, r4, r5
 801a348:	f002 fa1c 	bl	801c784 <fabs>
 801a34c:	4b0c      	ldr	r3, [pc, #48]	; (801a380 <acos+0x60>)
 801a34e:	ec51 0b10 	vmov	r0, r1, d0
 801a352:	2200      	movs	r2, #0
 801a354:	f7e6 fc00 	bl	8000b58 <__aeabi_dcmpgt>
 801a358:	b150      	cbz	r0, 801a370 <acos+0x50>
 801a35a:	f7fa fa77 	bl	801484c <__errno>
 801a35e:	ecbd 8b02 	vpop	{d8}
 801a362:	2321      	movs	r3, #33	; 0x21
 801a364:	6003      	str	r3, [r0, #0]
 801a366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a36a:	4806      	ldr	r0, [pc, #24]	; (801a384 <acos+0x64>)
 801a36c:	f7ff bd64 	b.w	8019e38 <nan>
 801a370:	eeb0 0a48 	vmov.f32	s0, s16
 801a374:	eef0 0a68 	vmov.f32	s1, s17
 801a378:	ecbd 8b02 	vpop	{d8}
 801a37c:	bd38      	pop	{r3, r4, r5, pc}
 801a37e:	bf00      	nop
 801a380:	3ff00000 	.word	0x3ff00000
 801a384:	080730ae 	.word	0x080730ae

0801a388 <pow>:
 801a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a38a:	ed2d 8b02 	vpush	{d8}
 801a38e:	eeb0 8a40 	vmov.f32	s16, s0
 801a392:	eef0 8a60 	vmov.f32	s17, s1
 801a396:	ec55 4b11 	vmov	r4, r5, d1
 801a39a:	f000 faf1 	bl	801a980 <__ieee754_pow>
 801a39e:	4622      	mov	r2, r4
 801a3a0:	462b      	mov	r3, r5
 801a3a2:	4620      	mov	r0, r4
 801a3a4:	4629      	mov	r1, r5
 801a3a6:	ec57 6b10 	vmov	r6, r7, d0
 801a3aa:	f7e6 fbdf 	bl	8000b6c <__aeabi_dcmpun>
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	d13b      	bne.n	801a42a <pow+0xa2>
 801a3b2:	ec51 0b18 	vmov	r0, r1, d8
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	f7e6 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 801a3be:	b1b8      	cbz	r0, 801a3f0 <pow+0x68>
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	4629      	mov	r1, r5
 801a3c8:	f7e6 fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d146      	bne.n	801a45e <pow+0xd6>
 801a3d0:	ec45 4b10 	vmov	d0, r4, r5
 801a3d4:	f002 f9df 	bl	801c796 <finite>
 801a3d8:	b338      	cbz	r0, 801a42a <pow+0xa2>
 801a3da:	2200      	movs	r2, #0
 801a3dc:	2300      	movs	r3, #0
 801a3de:	4620      	mov	r0, r4
 801a3e0:	4629      	mov	r1, r5
 801a3e2:	f7e6 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 801a3e6:	b300      	cbz	r0, 801a42a <pow+0xa2>
 801a3e8:	f7fa fa30 	bl	801484c <__errno>
 801a3ec:	2322      	movs	r3, #34	; 0x22
 801a3ee:	e01b      	b.n	801a428 <pow+0xa0>
 801a3f0:	ec47 6b10 	vmov	d0, r6, r7
 801a3f4:	f002 f9cf 	bl	801c796 <finite>
 801a3f8:	b9e0      	cbnz	r0, 801a434 <pow+0xac>
 801a3fa:	eeb0 0a48 	vmov.f32	s0, s16
 801a3fe:	eef0 0a68 	vmov.f32	s1, s17
 801a402:	f002 f9c8 	bl	801c796 <finite>
 801a406:	b1a8      	cbz	r0, 801a434 <pow+0xac>
 801a408:	ec45 4b10 	vmov	d0, r4, r5
 801a40c:	f002 f9c3 	bl	801c796 <finite>
 801a410:	b180      	cbz	r0, 801a434 <pow+0xac>
 801a412:	4632      	mov	r2, r6
 801a414:	463b      	mov	r3, r7
 801a416:	4630      	mov	r0, r6
 801a418:	4639      	mov	r1, r7
 801a41a:	f7e6 fba7 	bl	8000b6c <__aeabi_dcmpun>
 801a41e:	2800      	cmp	r0, #0
 801a420:	d0e2      	beq.n	801a3e8 <pow+0x60>
 801a422:	f7fa fa13 	bl	801484c <__errno>
 801a426:	2321      	movs	r3, #33	; 0x21
 801a428:	6003      	str	r3, [r0, #0]
 801a42a:	ecbd 8b02 	vpop	{d8}
 801a42e:	ec47 6b10 	vmov	d0, r6, r7
 801a432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a434:	2200      	movs	r2, #0
 801a436:	2300      	movs	r3, #0
 801a438:	4630      	mov	r0, r6
 801a43a:	4639      	mov	r1, r7
 801a43c:	f7e6 fb64 	bl	8000b08 <__aeabi_dcmpeq>
 801a440:	2800      	cmp	r0, #0
 801a442:	d0f2      	beq.n	801a42a <pow+0xa2>
 801a444:	eeb0 0a48 	vmov.f32	s0, s16
 801a448:	eef0 0a68 	vmov.f32	s1, s17
 801a44c:	f002 f9a3 	bl	801c796 <finite>
 801a450:	2800      	cmp	r0, #0
 801a452:	d0ea      	beq.n	801a42a <pow+0xa2>
 801a454:	ec45 4b10 	vmov	d0, r4, r5
 801a458:	f002 f99d 	bl	801c796 <finite>
 801a45c:	e7c3      	b.n	801a3e6 <pow+0x5e>
 801a45e:	4f01      	ldr	r7, [pc, #4]	; (801a464 <pow+0xdc>)
 801a460:	2600      	movs	r6, #0
 801a462:	e7e2      	b.n	801a42a <pow+0xa2>
 801a464:	3ff00000 	.word	0x3ff00000

0801a468 <sqrt>:
 801a468:	b538      	push	{r3, r4, r5, lr}
 801a46a:	ed2d 8b02 	vpush	{d8}
 801a46e:	ec55 4b10 	vmov	r4, r5, d0
 801a472:	f001 f9c1 	bl	801b7f8 <__ieee754_sqrt>
 801a476:	4622      	mov	r2, r4
 801a478:	462b      	mov	r3, r5
 801a47a:	4620      	mov	r0, r4
 801a47c:	4629      	mov	r1, r5
 801a47e:	eeb0 8a40 	vmov.f32	s16, s0
 801a482:	eef0 8a60 	vmov.f32	s17, s1
 801a486:	f7e6 fb71 	bl	8000b6c <__aeabi_dcmpun>
 801a48a:	b990      	cbnz	r0, 801a4b2 <sqrt+0x4a>
 801a48c:	2200      	movs	r2, #0
 801a48e:	2300      	movs	r3, #0
 801a490:	4620      	mov	r0, r4
 801a492:	4629      	mov	r1, r5
 801a494:	f7e6 fb42 	bl	8000b1c <__aeabi_dcmplt>
 801a498:	b158      	cbz	r0, 801a4b2 <sqrt+0x4a>
 801a49a:	f7fa f9d7 	bl	801484c <__errno>
 801a49e:	2321      	movs	r3, #33	; 0x21
 801a4a0:	6003      	str	r3, [r0, #0]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	4610      	mov	r0, r2
 801a4a8:	4619      	mov	r1, r3
 801a4aa:	f7e6 f9ef 	bl	800088c <__aeabi_ddiv>
 801a4ae:	ec41 0b18 	vmov	d8, r0, r1
 801a4b2:	eeb0 0a48 	vmov.f32	s0, s16
 801a4b6:	eef0 0a68 	vmov.f32	s1, s17
 801a4ba:	ecbd 8b02 	vpop	{d8}
 801a4be:	bd38      	pop	{r3, r4, r5, pc}

0801a4c0 <__ieee754_acos>:
 801a4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c4:	ec55 4b10 	vmov	r4, r5, d0
 801a4c8:	49b7      	ldr	r1, [pc, #732]	; (801a7a8 <__ieee754_acos+0x2e8>)
 801a4ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a4ce:	428b      	cmp	r3, r1
 801a4d0:	dd1b      	ble.n	801a50a <__ieee754_acos+0x4a>
 801a4d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a4d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a4da:	4323      	orrs	r3, r4
 801a4dc:	d106      	bne.n	801a4ec <__ieee754_acos+0x2c>
 801a4de:	2d00      	cmp	r5, #0
 801a4e0:	f300 8211 	bgt.w	801a906 <__ieee754_acos+0x446>
 801a4e4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801a740 <__ieee754_acos+0x280>
 801a4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ec:	ee10 2a10 	vmov	r2, s0
 801a4f0:	462b      	mov	r3, r5
 801a4f2:	ee10 0a10 	vmov	r0, s0
 801a4f6:	4629      	mov	r1, r5
 801a4f8:	f7e5 fee6 	bl	80002c8 <__aeabi_dsub>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	460b      	mov	r3, r1
 801a500:	f7e6 f9c4 	bl	800088c <__aeabi_ddiv>
 801a504:	ec41 0b10 	vmov	d0, r0, r1
 801a508:	e7ee      	b.n	801a4e8 <__ieee754_acos+0x28>
 801a50a:	49a8      	ldr	r1, [pc, #672]	; (801a7ac <__ieee754_acos+0x2ec>)
 801a50c:	428b      	cmp	r3, r1
 801a50e:	f300 8087 	bgt.w	801a620 <__ieee754_acos+0x160>
 801a512:	4aa7      	ldr	r2, [pc, #668]	; (801a7b0 <__ieee754_acos+0x2f0>)
 801a514:	4293      	cmp	r3, r2
 801a516:	f340 81f9 	ble.w	801a90c <__ieee754_acos+0x44c>
 801a51a:	ee10 2a10 	vmov	r2, s0
 801a51e:	ee10 0a10 	vmov	r0, s0
 801a522:	462b      	mov	r3, r5
 801a524:	4629      	mov	r1, r5
 801a526:	f7e6 f887 	bl	8000638 <__aeabi_dmul>
 801a52a:	a387      	add	r3, pc, #540	; (adr r3, 801a748 <__ieee754_acos+0x288>)
 801a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a530:	4606      	mov	r6, r0
 801a532:	460f      	mov	r7, r1
 801a534:	f7e6 f880 	bl	8000638 <__aeabi_dmul>
 801a538:	a385      	add	r3, pc, #532	; (adr r3, 801a750 <__ieee754_acos+0x290>)
 801a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53e:	f7e5 fec5 	bl	80002cc <__adddf3>
 801a542:	4632      	mov	r2, r6
 801a544:	463b      	mov	r3, r7
 801a546:	f7e6 f877 	bl	8000638 <__aeabi_dmul>
 801a54a:	a383      	add	r3, pc, #524	; (adr r3, 801a758 <__ieee754_acos+0x298>)
 801a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a550:	f7e5 feba 	bl	80002c8 <__aeabi_dsub>
 801a554:	4632      	mov	r2, r6
 801a556:	463b      	mov	r3, r7
 801a558:	f7e6 f86e 	bl	8000638 <__aeabi_dmul>
 801a55c:	a380      	add	r3, pc, #512	; (adr r3, 801a760 <__ieee754_acos+0x2a0>)
 801a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a562:	f7e5 feb3 	bl	80002cc <__adddf3>
 801a566:	4632      	mov	r2, r6
 801a568:	463b      	mov	r3, r7
 801a56a:	f7e6 f865 	bl	8000638 <__aeabi_dmul>
 801a56e:	a37e      	add	r3, pc, #504	; (adr r3, 801a768 <__ieee754_acos+0x2a8>)
 801a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a574:	f7e5 fea8 	bl	80002c8 <__aeabi_dsub>
 801a578:	4632      	mov	r2, r6
 801a57a:	463b      	mov	r3, r7
 801a57c:	f7e6 f85c 	bl	8000638 <__aeabi_dmul>
 801a580:	a37b      	add	r3, pc, #492	; (adr r3, 801a770 <__ieee754_acos+0x2b0>)
 801a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a586:	f7e5 fea1 	bl	80002cc <__adddf3>
 801a58a:	4632      	mov	r2, r6
 801a58c:	463b      	mov	r3, r7
 801a58e:	f7e6 f853 	bl	8000638 <__aeabi_dmul>
 801a592:	a379      	add	r3, pc, #484	; (adr r3, 801a778 <__ieee754_acos+0x2b8>)
 801a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a598:	4680      	mov	r8, r0
 801a59a:	4689      	mov	r9, r1
 801a59c:	4630      	mov	r0, r6
 801a59e:	4639      	mov	r1, r7
 801a5a0:	f7e6 f84a 	bl	8000638 <__aeabi_dmul>
 801a5a4:	a376      	add	r3, pc, #472	; (adr r3, 801a780 <__ieee754_acos+0x2c0>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	f7e5 fe8d 	bl	80002c8 <__aeabi_dsub>
 801a5ae:	4632      	mov	r2, r6
 801a5b0:	463b      	mov	r3, r7
 801a5b2:	f7e6 f841 	bl	8000638 <__aeabi_dmul>
 801a5b6:	a374      	add	r3, pc, #464	; (adr r3, 801a788 <__ieee754_acos+0x2c8>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	f7e5 fe86 	bl	80002cc <__adddf3>
 801a5c0:	4632      	mov	r2, r6
 801a5c2:	463b      	mov	r3, r7
 801a5c4:	f7e6 f838 	bl	8000638 <__aeabi_dmul>
 801a5c8:	a371      	add	r3, pc, #452	; (adr r3, 801a790 <__ieee754_acos+0x2d0>)
 801a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ce:	f7e5 fe7b 	bl	80002c8 <__aeabi_dsub>
 801a5d2:	4632      	mov	r2, r6
 801a5d4:	463b      	mov	r3, r7
 801a5d6:	f7e6 f82f 	bl	8000638 <__aeabi_dmul>
 801a5da:	4b76      	ldr	r3, [pc, #472]	; (801a7b4 <__ieee754_acos+0x2f4>)
 801a5dc:	2200      	movs	r2, #0
 801a5de:	f7e5 fe75 	bl	80002cc <__adddf3>
 801a5e2:	4602      	mov	r2, r0
 801a5e4:	460b      	mov	r3, r1
 801a5e6:	4640      	mov	r0, r8
 801a5e8:	4649      	mov	r1, r9
 801a5ea:	f7e6 f94f 	bl	800088c <__aeabi_ddiv>
 801a5ee:	4622      	mov	r2, r4
 801a5f0:	462b      	mov	r3, r5
 801a5f2:	f7e6 f821 	bl	8000638 <__aeabi_dmul>
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	460b      	mov	r3, r1
 801a5fa:	a167      	add	r1, pc, #412	; (adr r1, 801a798 <__ieee754_acos+0x2d8>)
 801a5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a600:	f7e5 fe62 	bl	80002c8 <__aeabi_dsub>
 801a604:	4602      	mov	r2, r0
 801a606:	460b      	mov	r3, r1
 801a608:	4620      	mov	r0, r4
 801a60a:	4629      	mov	r1, r5
 801a60c:	f7e5 fe5c 	bl	80002c8 <__aeabi_dsub>
 801a610:	4602      	mov	r2, r0
 801a612:	460b      	mov	r3, r1
 801a614:	a162      	add	r1, pc, #392	; (adr r1, 801a7a0 <__ieee754_acos+0x2e0>)
 801a616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a61a:	f7e5 fe55 	bl	80002c8 <__aeabi_dsub>
 801a61e:	e771      	b.n	801a504 <__ieee754_acos+0x44>
 801a620:	2d00      	cmp	r5, #0
 801a622:	f280 80cb 	bge.w	801a7bc <__ieee754_acos+0x2fc>
 801a626:	ee10 0a10 	vmov	r0, s0
 801a62a:	4b62      	ldr	r3, [pc, #392]	; (801a7b4 <__ieee754_acos+0x2f4>)
 801a62c:	2200      	movs	r2, #0
 801a62e:	4629      	mov	r1, r5
 801a630:	f7e5 fe4c 	bl	80002cc <__adddf3>
 801a634:	4b60      	ldr	r3, [pc, #384]	; (801a7b8 <__ieee754_acos+0x2f8>)
 801a636:	2200      	movs	r2, #0
 801a638:	f7e5 fffe 	bl	8000638 <__aeabi_dmul>
 801a63c:	a342      	add	r3, pc, #264	; (adr r3, 801a748 <__ieee754_acos+0x288>)
 801a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a642:	4604      	mov	r4, r0
 801a644:	460d      	mov	r5, r1
 801a646:	f7e5 fff7 	bl	8000638 <__aeabi_dmul>
 801a64a:	a341      	add	r3, pc, #260	; (adr r3, 801a750 <__ieee754_acos+0x290>)
 801a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a650:	f7e5 fe3c 	bl	80002cc <__adddf3>
 801a654:	4622      	mov	r2, r4
 801a656:	462b      	mov	r3, r5
 801a658:	f7e5 ffee 	bl	8000638 <__aeabi_dmul>
 801a65c:	a33e      	add	r3, pc, #248	; (adr r3, 801a758 <__ieee754_acos+0x298>)
 801a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a662:	f7e5 fe31 	bl	80002c8 <__aeabi_dsub>
 801a666:	4622      	mov	r2, r4
 801a668:	462b      	mov	r3, r5
 801a66a:	f7e5 ffe5 	bl	8000638 <__aeabi_dmul>
 801a66e:	a33c      	add	r3, pc, #240	; (adr r3, 801a760 <__ieee754_acos+0x2a0>)
 801a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a674:	f7e5 fe2a 	bl	80002cc <__adddf3>
 801a678:	4622      	mov	r2, r4
 801a67a:	462b      	mov	r3, r5
 801a67c:	f7e5 ffdc 	bl	8000638 <__aeabi_dmul>
 801a680:	a339      	add	r3, pc, #228	; (adr r3, 801a768 <__ieee754_acos+0x2a8>)
 801a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a686:	f7e5 fe1f 	bl	80002c8 <__aeabi_dsub>
 801a68a:	4622      	mov	r2, r4
 801a68c:	462b      	mov	r3, r5
 801a68e:	f7e5 ffd3 	bl	8000638 <__aeabi_dmul>
 801a692:	a337      	add	r3, pc, #220	; (adr r3, 801a770 <__ieee754_acos+0x2b0>)
 801a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a698:	f7e5 fe18 	bl	80002cc <__adddf3>
 801a69c:	4622      	mov	r2, r4
 801a69e:	462b      	mov	r3, r5
 801a6a0:	f7e5 ffca 	bl	8000638 <__aeabi_dmul>
 801a6a4:	ec45 4b10 	vmov	d0, r4, r5
 801a6a8:	4680      	mov	r8, r0
 801a6aa:	4689      	mov	r9, r1
 801a6ac:	f001 f8a4 	bl	801b7f8 <__ieee754_sqrt>
 801a6b0:	a331      	add	r3, pc, #196	; (adr r3, 801a778 <__ieee754_acos+0x2b8>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	ec57 6b10 	vmov	r6, r7, d0
 801a6be:	f7e5 ffbb 	bl	8000638 <__aeabi_dmul>
 801a6c2:	a32f      	add	r3, pc, #188	; (adr r3, 801a780 <__ieee754_acos+0x2c0>)
 801a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c8:	f7e5 fdfe 	bl	80002c8 <__aeabi_dsub>
 801a6cc:	4622      	mov	r2, r4
 801a6ce:	462b      	mov	r3, r5
 801a6d0:	f7e5 ffb2 	bl	8000638 <__aeabi_dmul>
 801a6d4:	a32c      	add	r3, pc, #176	; (adr r3, 801a788 <__ieee754_acos+0x2c8>)
 801a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6da:	f7e5 fdf7 	bl	80002cc <__adddf3>
 801a6de:	4622      	mov	r2, r4
 801a6e0:	462b      	mov	r3, r5
 801a6e2:	f7e5 ffa9 	bl	8000638 <__aeabi_dmul>
 801a6e6:	a32a      	add	r3, pc, #168	; (adr r3, 801a790 <__ieee754_acos+0x2d0>)
 801a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ec:	f7e5 fdec 	bl	80002c8 <__aeabi_dsub>
 801a6f0:	4622      	mov	r2, r4
 801a6f2:	462b      	mov	r3, r5
 801a6f4:	f7e5 ffa0 	bl	8000638 <__aeabi_dmul>
 801a6f8:	4b2e      	ldr	r3, [pc, #184]	; (801a7b4 <__ieee754_acos+0x2f4>)
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	f7e5 fde6 	bl	80002cc <__adddf3>
 801a700:	4602      	mov	r2, r0
 801a702:	460b      	mov	r3, r1
 801a704:	4640      	mov	r0, r8
 801a706:	4649      	mov	r1, r9
 801a708:	f7e6 f8c0 	bl	800088c <__aeabi_ddiv>
 801a70c:	4632      	mov	r2, r6
 801a70e:	463b      	mov	r3, r7
 801a710:	f7e5 ff92 	bl	8000638 <__aeabi_dmul>
 801a714:	a320      	add	r3, pc, #128	; (adr r3, 801a798 <__ieee754_acos+0x2d8>)
 801a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71a:	f7e5 fdd5 	bl	80002c8 <__aeabi_dsub>
 801a71e:	4632      	mov	r2, r6
 801a720:	463b      	mov	r3, r7
 801a722:	f7e5 fdd3 	bl	80002cc <__adddf3>
 801a726:	4602      	mov	r2, r0
 801a728:	460b      	mov	r3, r1
 801a72a:	f7e5 fdcf 	bl	80002cc <__adddf3>
 801a72e:	4602      	mov	r2, r0
 801a730:	460b      	mov	r3, r1
 801a732:	a103      	add	r1, pc, #12	; (adr r1, 801a740 <__ieee754_acos+0x280>)
 801a734:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a738:	e76f      	b.n	801a61a <__ieee754_acos+0x15a>
 801a73a:	bf00      	nop
 801a73c:	f3af 8000 	nop.w
 801a740:	54442d18 	.word	0x54442d18
 801a744:	400921fb 	.word	0x400921fb
 801a748:	0dfdf709 	.word	0x0dfdf709
 801a74c:	3f023de1 	.word	0x3f023de1
 801a750:	7501b288 	.word	0x7501b288
 801a754:	3f49efe0 	.word	0x3f49efe0
 801a758:	b5688f3b 	.word	0xb5688f3b
 801a75c:	3fa48228 	.word	0x3fa48228
 801a760:	0e884455 	.word	0x0e884455
 801a764:	3fc9c155 	.word	0x3fc9c155
 801a768:	03eb6f7d 	.word	0x03eb6f7d
 801a76c:	3fd4d612 	.word	0x3fd4d612
 801a770:	55555555 	.word	0x55555555
 801a774:	3fc55555 	.word	0x3fc55555
 801a778:	b12e9282 	.word	0xb12e9282
 801a77c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a780:	1b8d0159 	.word	0x1b8d0159
 801a784:	3fe6066c 	.word	0x3fe6066c
 801a788:	9c598ac8 	.word	0x9c598ac8
 801a78c:	40002ae5 	.word	0x40002ae5
 801a790:	1c8a2d4b 	.word	0x1c8a2d4b
 801a794:	40033a27 	.word	0x40033a27
 801a798:	33145c07 	.word	0x33145c07
 801a79c:	3c91a626 	.word	0x3c91a626
 801a7a0:	54442d18 	.word	0x54442d18
 801a7a4:	3ff921fb 	.word	0x3ff921fb
 801a7a8:	3fefffff 	.word	0x3fefffff
 801a7ac:	3fdfffff 	.word	0x3fdfffff
 801a7b0:	3c600000 	.word	0x3c600000
 801a7b4:	3ff00000 	.word	0x3ff00000
 801a7b8:	3fe00000 	.word	0x3fe00000
 801a7bc:	ee10 2a10 	vmov	r2, s0
 801a7c0:	462b      	mov	r3, r5
 801a7c2:	496d      	ldr	r1, [pc, #436]	; (801a978 <__ieee754_acos+0x4b8>)
 801a7c4:	2000      	movs	r0, #0
 801a7c6:	f7e5 fd7f 	bl	80002c8 <__aeabi_dsub>
 801a7ca:	4b6c      	ldr	r3, [pc, #432]	; (801a97c <__ieee754_acos+0x4bc>)
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	f7e5 ff33 	bl	8000638 <__aeabi_dmul>
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	460d      	mov	r5, r1
 801a7d6:	ec45 4b10 	vmov	d0, r4, r5
 801a7da:	f001 f80d 	bl	801b7f8 <__ieee754_sqrt>
 801a7de:	a34e      	add	r3, pc, #312	; (adr r3, 801a918 <__ieee754_acos+0x458>)
 801a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	4629      	mov	r1, r5
 801a7e8:	ec59 8b10 	vmov	r8, r9, d0
 801a7ec:	f7e5 ff24 	bl	8000638 <__aeabi_dmul>
 801a7f0:	a34b      	add	r3, pc, #300	; (adr r3, 801a920 <__ieee754_acos+0x460>)
 801a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f6:	f7e5 fd69 	bl	80002cc <__adddf3>
 801a7fa:	4622      	mov	r2, r4
 801a7fc:	462b      	mov	r3, r5
 801a7fe:	f7e5 ff1b 	bl	8000638 <__aeabi_dmul>
 801a802:	a349      	add	r3, pc, #292	; (adr r3, 801a928 <__ieee754_acos+0x468>)
 801a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a808:	f7e5 fd5e 	bl	80002c8 <__aeabi_dsub>
 801a80c:	4622      	mov	r2, r4
 801a80e:	462b      	mov	r3, r5
 801a810:	f7e5 ff12 	bl	8000638 <__aeabi_dmul>
 801a814:	a346      	add	r3, pc, #280	; (adr r3, 801a930 <__ieee754_acos+0x470>)
 801a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a81a:	f7e5 fd57 	bl	80002cc <__adddf3>
 801a81e:	4622      	mov	r2, r4
 801a820:	462b      	mov	r3, r5
 801a822:	f7e5 ff09 	bl	8000638 <__aeabi_dmul>
 801a826:	a344      	add	r3, pc, #272	; (adr r3, 801a938 <__ieee754_acos+0x478>)
 801a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a82c:	f7e5 fd4c 	bl	80002c8 <__aeabi_dsub>
 801a830:	4622      	mov	r2, r4
 801a832:	462b      	mov	r3, r5
 801a834:	f7e5 ff00 	bl	8000638 <__aeabi_dmul>
 801a838:	a341      	add	r3, pc, #260	; (adr r3, 801a940 <__ieee754_acos+0x480>)
 801a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a83e:	f7e5 fd45 	bl	80002cc <__adddf3>
 801a842:	4622      	mov	r2, r4
 801a844:	462b      	mov	r3, r5
 801a846:	f7e5 fef7 	bl	8000638 <__aeabi_dmul>
 801a84a:	a33f      	add	r3, pc, #252	; (adr r3, 801a948 <__ieee754_acos+0x488>)
 801a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a850:	4682      	mov	sl, r0
 801a852:	468b      	mov	fp, r1
 801a854:	4620      	mov	r0, r4
 801a856:	4629      	mov	r1, r5
 801a858:	f7e5 feee 	bl	8000638 <__aeabi_dmul>
 801a85c:	a33c      	add	r3, pc, #240	; (adr r3, 801a950 <__ieee754_acos+0x490>)
 801a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a862:	f7e5 fd31 	bl	80002c8 <__aeabi_dsub>
 801a866:	4622      	mov	r2, r4
 801a868:	462b      	mov	r3, r5
 801a86a:	f7e5 fee5 	bl	8000638 <__aeabi_dmul>
 801a86e:	a33a      	add	r3, pc, #232	; (adr r3, 801a958 <__ieee754_acos+0x498>)
 801a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a874:	f7e5 fd2a 	bl	80002cc <__adddf3>
 801a878:	4622      	mov	r2, r4
 801a87a:	462b      	mov	r3, r5
 801a87c:	f7e5 fedc 	bl	8000638 <__aeabi_dmul>
 801a880:	a337      	add	r3, pc, #220	; (adr r3, 801a960 <__ieee754_acos+0x4a0>)
 801a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a886:	f7e5 fd1f 	bl	80002c8 <__aeabi_dsub>
 801a88a:	4622      	mov	r2, r4
 801a88c:	462b      	mov	r3, r5
 801a88e:	f7e5 fed3 	bl	8000638 <__aeabi_dmul>
 801a892:	4b39      	ldr	r3, [pc, #228]	; (801a978 <__ieee754_acos+0x4b8>)
 801a894:	2200      	movs	r2, #0
 801a896:	f7e5 fd19 	bl	80002cc <__adddf3>
 801a89a:	4602      	mov	r2, r0
 801a89c:	460b      	mov	r3, r1
 801a89e:	4650      	mov	r0, sl
 801a8a0:	4659      	mov	r1, fp
 801a8a2:	f7e5 fff3 	bl	800088c <__aeabi_ddiv>
 801a8a6:	4642      	mov	r2, r8
 801a8a8:	464b      	mov	r3, r9
 801a8aa:	f7e5 fec5 	bl	8000638 <__aeabi_dmul>
 801a8ae:	2600      	movs	r6, #0
 801a8b0:	4682      	mov	sl, r0
 801a8b2:	468b      	mov	fp, r1
 801a8b4:	4632      	mov	r2, r6
 801a8b6:	464b      	mov	r3, r9
 801a8b8:	4630      	mov	r0, r6
 801a8ba:	4649      	mov	r1, r9
 801a8bc:	f7e5 febc 	bl	8000638 <__aeabi_dmul>
 801a8c0:	4602      	mov	r2, r0
 801a8c2:	460b      	mov	r3, r1
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	4629      	mov	r1, r5
 801a8c8:	f7e5 fcfe 	bl	80002c8 <__aeabi_dsub>
 801a8cc:	4632      	mov	r2, r6
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	460d      	mov	r5, r1
 801a8d2:	464b      	mov	r3, r9
 801a8d4:	4640      	mov	r0, r8
 801a8d6:	4649      	mov	r1, r9
 801a8d8:	f7e5 fcf8 	bl	80002cc <__adddf3>
 801a8dc:	4602      	mov	r2, r0
 801a8de:	460b      	mov	r3, r1
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	4629      	mov	r1, r5
 801a8e4:	f7e5 ffd2 	bl	800088c <__aeabi_ddiv>
 801a8e8:	4602      	mov	r2, r0
 801a8ea:	460b      	mov	r3, r1
 801a8ec:	4650      	mov	r0, sl
 801a8ee:	4659      	mov	r1, fp
 801a8f0:	f7e5 fcec 	bl	80002cc <__adddf3>
 801a8f4:	4632      	mov	r2, r6
 801a8f6:	464b      	mov	r3, r9
 801a8f8:	f7e5 fce8 	bl	80002cc <__adddf3>
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	460b      	mov	r3, r1
 801a900:	f7e5 fce4 	bl	80002cc <__adddf3>
 801a904:	e5fe      	b.n	801a504 <__ieee754_acos+0x44>
 801a906:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801a968 <__ieee754_acos+0x4a8>
 801a90a:	e5ed      	b.n	801a4e8 <__ieee754_acos+0x28>
 801a90c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801a970 <__ieee754_acos+0x4b0>
 801a910:	e5ea      	b.n	801a4e8 <__ieee754_acos+0x28>
 801a912:	bf00      	nop
 801a914:	f3af 8000 	nop.w
 801a918:	0dfdf709 	.word	0x0dfdf709
 801a91c:	3f023de1 	.word	0x3f023de1
 801a920:	7501b288 	.word	0x7501b288
 801a924:	3f49efe0 	.word	0x3f49efe0
 801a928:	b5688f3b 	.word	0xb5688f3b
 801a92c:	3fa48228 	.word	0x3fa48228
 801a930:	0e884455 	.word	0x0e884455
 801a934:	3fc9c155 	.word	0x3fc9c155
 801a938:	03eb6f7d 	.word	0x03eb6f7d
 801a93c:	3fd4d612 	.word	0x3fd4d612
 801a940:	55555555 	.word	0x55555555
 801a944:	3fc55555 	.word	0x3fc55555
 801a948:	b12e9282 	.word	0xb12e9282
 801a94c:	3fb3b8c5 	.word	0x3fb3b8c5
 801a950:	1b8d0159 	.word	0x1b8d0159
 801a954:	3fe6066c 	.word	0x3fe6066c
 801a958:	9c598ac8 	.word	0x9c598ac8
 801a95c:	40002ae5 	.word	0x40002ae5
 801a960:	1c8a2d4b 	.word	0x1c8a2d4b
 801a964:	40033a27 	.word	0x40033a27
	...
 801a970:	54442d18 	.word	0x54442d18
 801a974:	3ff921fb 	.word	0x3ff921fb
 801a978:	3ff00000 	.word	0x3ff00000
 801a97c:	3fe00000 	.word	0x3fe00000

0801a980 <__ieee754_pow>:
 801a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a984:	ed2d 8b06 	vpush	{d8-d10}
 801a988:	b089      	sub	sp, #36	; 0x24
 801a98a:	ed8d 1b00 	vstr	d1, [sp]
 801a98e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a992:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a996:	ea58 0102 	orrs.w	r1, r8, r2
 801a99a:	ec57 6b10 	vmov	r6, r7, d0
 801a99e:	d115      	bne.n	801a9cc <__ieee754_pow+0x4c>
 801a9a0:	19b3      	adds	r3, r6, r6
 801a9a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801a9a6:	4152      	adcs	r2, r2
 801a9a8:	4299      	cmp	r1, r3
 801a9aa:	4b89      	ldr	r3, [pc, #548]	; (801abd0 <__ieee754_pow+0x250>)
 801a9ac:	4193      	sbcs	r3, r2
 801a9ae:	f080 84d2 	bcs.w	801b356 <__ieee754_pow+0x9d6>
 801a9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	4639      	mov	r1, r7
 801a9ba:	f7e5 fc87 	bl	80002cc <__adddf3>
 801a9be:	ec41 0b10 	vmov	d0, r0, r1
 801a9c2:	b009      	add	sp, #36	; 0x24
 801a9c4:	ecbd 8b06 	vpop	{d8-d10}
 801a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9cc:	4b81      	ldr	r3, [pc, #516]	; (801abd4 <__ieee754_pow+0x254>)
 801a9ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a9d2:	429c      	cmp	r4, r3
 801a9d4:	ee10 aa10 	vmov	sl, s0
 801a9d8:	463d      	mov	r5, r7
 801a9da:	dc06      	bgt.n	801a9ea <__ieee754_pow+0x6a>
 801a9dc:	d101      	bne.n	801a9e2 <__ieee754_pow+0x62>
 801a9de:	2e00      	cmp	r6, #0
 801a9e0:	d1e7      	bne.n	801a9b2 <__ieee754_pow+0x32>
 801a9e2:	4598      	cmp	r8, r3
 801a9e4:	dc01      	bgt.n	801a9ea <__ieee754_pow+0x6a>
 801a9e6:	d10f      	bne.n	801aa08 <__ieee754_pow+0x88>
 801a9e8:	b172      	cbz	r2, 801aa08 <__ieee754_pow+0x88>
 801a9ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801a9ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801a9f2:	ea55 050a 	orrs.w	r5, r5, sl
 801a9f6:	d1dc      	bne.n	801a9b2 <__ieee754_pow+0x32>
 801a9f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a9fc:	18db      	adds	r3, r3, r3
 801a9fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801aa02:	4152      	adcs	r2, r2
 801aa04:	429d      	cmp	r5, r3
 801aa06:	e7d0      	b.n	801a9aa <__ieee754_pow+0x2a>
 801aa08:	2d00      	cmp	r5, #0
 801aa0a:	da3b      	bge.n	801aa84 <__ieee754_pow+0x104>
 801aa0c:	4b72      	ldr	r3, [pc, #456]	; (801abd8 <__ieee754_pow+0x258>)
 801aa0e:	4598      	cmp	r8, r3
 801aa10:	dc51      	bgt.n	801aab6 <__ieee754_pow+0x136>
 801aa12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801aa16:	4598      	cmp	r8, r3
 801aa18:	f340 84ac 	ble.w	801b374 <__ieee754_pow+0x9f4>
 801aa1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801aa20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801aa24:	2b14      	cmp	r3, #20
 801aa26:	dd0f      	ble.n	801aa48 <__ieee754_pow+0xc8>
 801aa28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801aa2c:	fa22 f103 	lsr.w	r1, r2, r3
 801aa30:	fa01 f303 	lsl.w	r3, r1, r3
 801aa34:	4293      	cmp	r3, r2
 801aa36:	f040 849d 	bne.w	801b374 <__ieee754_pow+0x9f4>
 801aa3a:	f001 0101 	and.w	r1, r1, #1
 801aa3e:	f1c1 0302 	rsb	r3, r1, #2
 801aa42:	9304      	str	r3, [sp, #16]
 801aa44:	b182      	cbz	r2, 801aa68 <__ieee754_pow+0xe8>
 801aa46:	e05f      	b.n	801ab08 <__ieee754_pow+0x188>
 801aa48:	2a00      	cmp	r2, #0
 801aa4a:	d15b      	bne.n	801ab04 <__ieee754_pow+0x184>
 801aa4c:	f1c3 0314 	rsb	r3, r3, #20
 801aa50:	fa48 f103 	asr.w	r1, r8, r3
 801aa54:	fa01 f303 	lsl.w	r3, r1, r3
 801aa58:	4543      	cmp	r3, r8
 801aa5a:	f040 8488 	bne.w	801b36e <__ieee754_pow+0x9ee>
 801aa5e:	f001 0101 	and.w	r1, r1, #1
 801aa62:	f1c1 0302 	rsb	r3, r1, #2
 801aa66:	9304      	str	r3, [sp, #16]
 801aa68:	4b5c      	ldr	r3, [pc, #368]	; (801abdc <__ieee754_pow+0x25c>)
 801aa6a:	4598      	cmp	r8, r3
 801aa6c:	d132      	bne.n	801aad4 <__ieee754_pow+0x154>
 801aa6e:	f1b9 0f00 	cmp.w	r9, #0
 801aa72:	f280 8478 	bge.w	801b366 <__ieee754_pow+0x9e6>
 801aa76:	4959      	ldr	r1, [pc, #356]	; (801abdc <__ieee754_pow+0x25c>)
 801aa78:	4632      	mov	r2, r6
 801aa7a:	463b      	mov	r3, r7
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	f7e5 ff05 	bl	800088c <__aeabi_ddiv>
 801aa82:	e79c      	b.n	801a9be <__ieee754_pow+0x3e>
 801aa84:	2300      	movs	r3, #0
 801aa86:	9304      	str	r3, [sp, #16]
 801aa88:	2a00      	cmp	r2, #0
 801aa8a:	d13d      	bne.n	801ab08 <__ieee754_pow+0x188>
 801aa8c:	4b51      	ldr	r3, [pc, #324]	; (801abd4 <__ieee754_pow+0x254>)
 801aa8e:	4598      	cmp	r8, r3
 801aa90:	d1ea      	bne.n	801aa68 <__ieee754_pow+0xe8>
 801aa92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801aa96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801aa9a:	ea53 030a 	orrs.w	r3, r3, sl
 801aa9e:	f000 845a 	beq.w	801b356 <__ieee754_pow+0x9d6>
 801aaa2:	4b4f      	ldr	r3, [pc, #316]	; (801abe0 <__ieee754_pow+0x260>)
 801aaa4:	429c      	cmp	r4, r3
 801aaa6:	dd08      	ble.n	801aaba <__ieee754_pow+0x13a>
 801aaa8:	f1b9 0f00 	cmp.w	r9, #0
 801aaac:	f2c0 8457 	blt.w	801b35e <__ieee754_pow+0x9de>
 801aab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aab4:	e783      	b.n	801a9be <__ieee754_pow+0x3e>
 801aab6:	2302      	movs	r3, #2
 801aab8:	e7e5      	b.n	801aa86 <__ieee754_pow+0x106>
 801aaba:	f1b9 0f00 	cmp.w	r9, #0
 801aabe:	f04f 0000 	mov.w	r0, #0
 801aac2:	f04f 0100 	mov.w	r1, #0
 801aac6:	f6bf af7a 	bge.w	801a9be <__ieee754_pow+0x3e>
 801aaca:	e9dd 0300 	ldrd	r0, r3, [sp]
 801aace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801aad2:	e774      	b.n	801a9be <__ieee754_pow+0x3e>
 801aad4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801aad8:	d106      	bne.n	801aae8 <__ieee754_pow+0x168>
 801aada:	4632      	mov	r2, r6
 801aadc:	463b      	mov	r3, r7
 801aade:	4630      	mov	r0, r6
 801aae0:	4639      	mov	r1, r7
 801aae2:	f7e5 fda9 	bl	8000638 <__aeabi_dmul>
 801aae6:	e76a      	b.n	801a9be <__ieee754_pow+0x3e>
 801aae8:	4b3e      	ldr	r3, [pc, #248]	; (801abe4 <__ieee754_pow+0x264>)
 801aaea:	4599      	cmp	r9, r3
 801aaec:	d10c      	bne.n	801ab08 <__ieee754_pow+0x188>
 801aaee:	2d00      	cmp	r5, #0
 801aaf0:	db0a      	blt.n	801ab08 <__ieee754_pow+0x188>
 801aaf2:	ec47 6b10 	vmov	d0, r6, r7
 801aaf6:	b009      	add	sp, #36	; 0x24
 801aaf8:	ecbd 8b06 	vpop	{d8-d10}
 801aafc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab00:	f000 be7a 	b.w	801b7f8 <__ieee754_sqrt>
 801ab04:	2300      	movs	r3, #0
 801ab06:	9304      	str	r3, [sp, #16]
 801ab08:	ec47 6b10 	vmov	d0, r6, r7
 801ab0c:	f001 fe3a 	bl	801c784 <fabs>
 801ab10:	ec51 0b10 	vmov	r0, r1, d0
 801ab14:	f1ba 0f00 	cmp.w	sl, #0
 801ab18:	d129      	bne.n	801ab6e <__ieee754_pow+0x1ee>
 801ab1a:	b124      	cbz	r4, 801ab26 <__ieee754_pow+0x1a6>
 801ab1c:	4b2f      	ldr	r3, [pc, #188]	; (801abdc <__ieee754_pow+0x25c>)
 801ab1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d123      	bne.n	801ab6e <__ieee754_pow+0x1ee>
 801ab26:	f1b9 0f00 	cmp.w	r9, #0
 801ab2a:	da05      	bge.n	801ab38 <__ieee754_pow+0x1b8>
 801ab2c:	4602      	mov	r2, r0
 801ab2e:	460b      	mov	r3, r1
 801ab30:	2000      	movs	r0, #0
 801ab32:	492a      	ldr	r1, [pc, #168]	; (801abdc <__ieee754_pow+0x25c>)
 801ab34:	f7e5 feaa 	bl	800088c <__aeabi_ddiv>
 801ab38:	2d00      	cmp	r5, #0
 801ab3a:	f6bf af40 	bge.w	801a9be <__ieee754_pow+0x3e>
 801ab3e:	9b04      	ldr	r3, [sp, #16]
 801ab40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ab44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ab48:	4323      	orrs	r3, r4
 801ab4a:	d108      	bne.n	801ab5e <__ieee754_pow+0x1de>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	460b      	mov	r3, r1
 801ab50:	4610      	mov	r0, r2
 801ab52:	4619      	mov	r1, r3
 801ab54:	f7e5 fbb8 	bl	80002c8 <__aeabi_dsub>
 801ab58:	4602      	mov	r2, r0
 801ab5a:	460b      	mov	r3, r1
 801ab5c:	e78f      	b.n	801aa7e <__ieee754_pow+0xfe>
 801ab5e:	9b04      	ldr	r3, [sp, #16]
 801ab60:	2b01      	cmp	r3, #1
 801ab62:	f47f af2c 	bne.w	801a9be <__ieee754_pow+0x3e>
 801ab66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab6a:	4619      	mov	r1, r3
 801ab6c:	e727      	b.n	801a9be <__ieee754_pow+0x3e>
 801ab6e:	0feb      	lsrs	r3, r5, #31
 801ab70:	3b01      	subs	r3, #1
 801ab72:	9306      	str	r3, [sp, #24]
 801ab74:	9a06      	ldr	r2, [sp, #24]
 801ab76:	9b04      	ldr	r3, [sp, #16]
 801ab78:	4313      	orrs	r3, r2
 801ab7a:	d102      	bne.n	801ab82 <__ieee754_pow+0x202>
 801ab7c:	4632      	mov	r2, r6
 801ab7e:	463b      	mov	r3, r7
 801ab80:	e7e6      	b.n	801ab50 <__ieee754_pow+0x1d0>
 801ab82:	4b19      	ldr	r3, [pc, #100]	; (801abe8 <__ieee754_pow+0x268>)
 801ab84:	4598      	cmp	r8, r3
 801ab86:	f340 80fb 	ble.w	801ad80 <__ieee754_pow+0x400>
 801ab8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ab8e:	4598      	cmp	r8, r3
 801ab90:	4b13      	ldr	r3, [pc, #76]	; (801abe0 <__ieee754_pow+0x260>)
 801ab92:	dd0c      	ble.n	801abae <__ieee754_pow+0x22e>
 801ab94:	429c      	cmp	r4, r3
 801ab96:	dc0f      	bgt.n	801abb8 <__ieee754_pow+0x238>
 801ab98:	f1b9 0f00 	cmp.w	r9, #0
 801ab9c:	da0f      	bge.n	801abbe <__ieee754_pow+0x23e>
 801ab9e:	2000      	movs	r0, #0
 801aba0:	b009      	add	sp, #36	; 0x24
 801aba2:	ecbd 8b06 	vpop	{d8-d10}
 801aba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abaa:	f001 bde2 	b.w	801c772 <__math_oflow>
 801abae:	429c      	cmp	r4, r3
 801abb0:	dbf2      	blt.n	801ab98 <__ieee754_pow+0x218>
 801abb2:	4b0a      	ldr	r3, [pc, #40]	; (801abdc <__ieee754_pow+0x25c>)
 801abb4:	429c      	cmp	r4, r3
 801abb6:	dd19      	ble.n	801abec <__ieee754_pow+0x26c>
 801abb8:	f1b9 0f00 	cmp.w	r9, #0
 801abbc:	dcef      	bgt.n	801ab9e <__ieee754_pow+0x21e>
 801abbe:	2000      	movs	r0, #0
 801abc0:	b009      	add	sp, #36	; 0x24
 801abc2:	ecbd 8b06 	vpop	{d8-d10}
 801abc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abca:	f001 bdc9 	b.w	801c760 <__math_uflow>
 801abce:	bf00      	nop
 801abd0:	fff00000 	.word	0xfff00000
 801abd4:	7ff00000 	.word	0x7ff00000
 801abd8:	433fffff 	.word	0x433fffff
 801abdc:	3ff00000 	.word	0x3ff00000
 801abe0:	3fefffff 	.word	0x3fefffff
 801abe4:	3fe00000 	.word	0x3fe00000
 801abe8:	41e00000 	.word	0x41e00000
 801abec:	4b60      	ldr	r3, [pc, #384]	; (801ad70 <__ieee754_pow+0x3f0>)
 801abee:	2200      	movs	r2, #0
 801abf0:	f7e5 fb6a 	bl	80002c8 <__aeabi_dsub>
 801abf4:	a354      	add	r3, pc, #336	; (adr r3, 801ad48 <__ieee754_pow+0x3c8>)
 801abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfa:	4604      	mov	r4, r0
 801abfc:	460d      	mov	r5, r1
 801abfe:	f7e5 fd1b 	bl	8000638 <__aeabi_dmul>
 801ac02:	a353      	add	r3, pc, #332	; (adr r3, 801ad50 <__ieee754_pow+0x3d0>)
 801ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac08:	4606      	mov	r6, r0
 801ac0a:	460f      	mov	r7, r1
 801ac0c:	4620      	mov	r0, r4
 801ac0e:	4629      	mov	r1, r5
 801ac10:	f7e5 fd12 	bl	8000638 <__aeabi_dmul>
 801ac14:	4b57      	ldr	r3, [pc, #348]	; (801ad74 <__ieee754_pow+0x3f4>)
 801ac16:	4682      	mov	sl, r0
 801ac18:	468b      	mov	fp, r1
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	4629      	mov	r1, r5
 801ac20:	f7e5 fd0a 	bl	8000638 <__aeabi_dmul>
 801ac24:	4602      	mov	r2, r0
 801ac26:	460b      	mov	r3, r1
 801ac28:	a14b      	add	r1, pc, #300	; (adr r1, 801ad58 <__ieee754_pow+0x3d8>)
 801ac2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac2e:	f7e5 fb4b 	bl	80002c8 <__aeabi_dsub>
 801ac32:	4622      	mov	r2, r4
 801ac34:	462b      	mov	r3, r5
 801ac36:	f7e5 fcff 	bl	8000638 <__aeabi_dmul>
 801ac3a:	4602      	mov	r2, r0
 801ac3c:	460b      	mov	r3, r1
 801ac3e:	2000      	movs	r0, #0
 801ac40:	494d      	ldr	r1, [pc, #308]	; (801ad78 <__ieee754_pow+0x3f8>)
 801ac42:	f7e5 fb41 	bl	80002c8 <__aeabi_dsub>
 801ac46:	4622      	mov	r2, r4
 801ac48:	4680      	mov	r8, r0
 801ac4a:	4689      	mov	r9, r1
 801ac4c:	462b      	mov	r3, r5
 801ac4e:	4620      	mov	r0, r4
 801ac50:	4629      	mov	r1, r5
 801ac52:	f7e5 fcf1 	bl	8000638 <__aeabi_dmul>
 801ac56:	4602      	mov	r2, r0
 801ac58:	460b      	mov	r3, r1
 801ac5a:	4640      	mov	r0, r8
 801ac5c:	4649      	mov	r1, r9
 801ac5e:	f7e5 fceb 	bl	8000638 <__aeabi_dmul>
 801ac62:	a33f      	add	r3, pc, #252	; (adr r3, 801ad60 <__ieee754_pow+0x3e0>)
 801ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac68:	f7e5 fce6 	bl	8000638 <__aeabi_dmul>
 801ac6c:	4602      	mov	r2, r0
 801ac6e:	460b      	mov	r3, r1
 801ac70:	4650      	mov	r0, sl
 801ac72:	4659      	mov	r1, fp
 801ac74:	f7e5 fb28 	bl	80002c8 <__aeabi_dsub>
 801ac78:	4602      	mov	r2, r0
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	4680      	mov	r8, r0
 801ac7e:	4689      	mov	r9, r1
 801ac80:	4630      	mov	r0, r6
 801ac82:	4639      	mov	r1, r7
 801ac84:	f7e5 fb22 	bl	80002cc <__adddf3>
 801ac88:	2000      	movs	r0, #0
 801ac8a:	4632      	mov	r2, r6
 801ac8c:	463b      	mov	r3, r7
 801ac8e:	4604      	mov	r4, r0
 801ac90:	460d      	mov	r5, r1
 801ac92:	f7e5 fb19 	bl	80002c8 <__aeabi_dsub>
 801ac96:	4602      	mov	r2, r0
 801ac98:	460b      	mov	r3, r1
 801ac9a:	4640      	mov	r0, r8
 801ac9c:	4649      	mov	r1, r9
 801ac9e:	f7e5 fb13 	bl	80002c8 <__aeabi_dsub>
 801aca2:	9b04      	ldr	r3, [sp, #16]
 801aca4:	9a06      	ldr	r2, [sp, #24]
 801aca6:	3b01      	subs	r3, #1
 801aca8:	4313      	orrs	r3, r2
 801acaa:	4682      	mov	sl, r0
 801acac:	468b      	mov	fp, r1
 801acae:	f040 81e7 	bne.w	801b080 <__ieee754_pow+0x700>
 801acb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801ad68 <__ieee754_pow+0x3e8>
 801acb6:	eeb0 8a47 	vmov.f32	s16, s14
 801acba:	eef0 8a67 	vmov.f32	s17, s15
 801acbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 801acc2:	2600      	movs	r6, #0
 801acc4:	4632      	mov	r2, r6
 801acc6:	463b      	mov	r3, r7
 801acc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801accc:	f7e5 fafc 	bl	80002c8 <__aeabi_dsub>
 801acd0:	4622      	mov	r2, r4
 801acd2:	462b      	mov	r3, r5
 801acd4:	f7e5 fcb0 	bl	8000638 <__aeabi_dmul>
 801acd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801acdc:	4680      	mov	r8, r0
 801acde:	4689      	mov	r9, r1
 801ace0:	4650      	mov	r0, sl
 801ace2:	4659      	mov	r1, fp
 801ace4:	f7e5 fca8 	bl	8000638 <__aeabi_dmul>
 801ace8:	4602      	mov	r2, r0
 801acea:	460b      	mov	r3, r1
 801acec:	4640      	mov	r0, r8
 801acee:	4649      	mov	r1, r9
 801acf0:	f7e5 faec 	bl	80002cc <__adddf3>
 801acf4:	4632      	mov	r2, r6
 801acf6:	463b      	mov	r3, r7
 801acf8:	4680      	mov	r8, r0
 801acfa:	4689      	mov	r9, r1
 801acfc:	4620      	mov	r0, r4
 801acfe:	4629      	mov	r1, r5
 801ad00:	f7e5 fc9a 	bl	8000638 <__aeabi_dmul>
 801ad04:	460b      	mov	r3, r1
 801ad06:	4604      	mov	r4, r0
 801ad08:	460d      	mov	r5, r1
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	4649      	mov	r1, r9
 801ad0e:	4640      	mov	r0, r8
 801ad10:	f7e5 fadc 	bl	80002cc <__adddf3>
 801ad14:	4b19      	ldr	r3, [pc, #100]	; (801ad7c <__ieee754_pow+0x3fc>)
 801ad16:	4299      	cmp	r1, r3
 801ad18:	ec45 4b19 	vmov	d9, r4, r5
 801ad1c:	4606      	mov	r6, r0
 801ad1e:	460f      	mov	r7, r1
 801ad20:	468b      	mov	fp, r1
 801ad22:	f340 82f1 	ble.w	801b308 <__ieee754_pow+0x988>
 801ad26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ad2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ad2e:	4303      	orrs	r3, r0
 801ad30:	f000 81e4 	beq.w	801b0fc <__ieee754_pow+0x77c>
 801ad34:	ec51 0b18 	vmov	r0, r1, d8
 801ad38:	2200      	movs	r2, #0
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	f7e5 feee 	bl	8000b1c <__aeabi_dcmplt>
 801ad40:	3800      	subs	r0, #0
 801ad42:	bf18      	it	ne
 801ad44:	2001      	movne	r0, #1
 801ad46:	e72b      	b.n	801aba0 <__ieee754_pow+0x220>
 801ad48:	60000000 	.word	0x60000000
 801ad4c:	3ff71547 	.word	0x3ff71547
 801ad50:	f85ddf44 	.word	0xf85ddf44
 801ad54:	3e54ae0b 	.word	0x3e54ae0b
 801ad58:	55555555 	.word	0x55555555
 801ad5c:	3fd55555 	.word	0x3fd55555
 801ad60:	652b82fe 	.word	0x652b82fe
 801ad64:	3ff71547 	.word	0x3ff71547
 801ad68:	00000000 	.word	0x00000000
 801ad6c:	bff00000 	.word	0xbff00000
 801ad70:	3ff00000 	.word	0x3ff00000
 801ad74:	3fd00000 	.word	0x3fd00000
 801ad78:	3fe00000 	.word	0x3fe00000
 801ad7c:	408fffff 	.word	0x408fffff
 801ad80:	4bd5      	ldr	r3, [pc, #852]	; (801b0d8 <__ieee754_pow+0x758>)
 801ad82:	402b      	ands	r3, r5
 801ad84:	2200      	movs	r2, #0
 801ad86:	b92b      	cbnz	r3, 801ad94 <__ieee754_pow+0x414>
 801ad88:	4bd4      	ldr	r3, [pc, #848]	; (801b0dc <__ieee754_pow+0x75c>)
 801ad8a:	f7e5 fc55 	bl	8000638 <__aeabi_dmul>
 801ad8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ad92:	460c      	mov	r4, r1
 801ad94:	1523      	asrs	r3, r4, #20
 801ad96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ad9a:	4413      	add	r3, r2
 801ad9c:	9305      	str	r3, [sp, #20]
 801ad9e:	4bd0      	ldr	r3, [pc, #832]	; (801b0e0 <__ieee754_pow+0x760>)
 801ada0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ada4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ada8:	429c      	cmp	r4, r3
 801adaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801adae:	dd08      	ble.n	801adc2 <__ieee754_pow+0x442>
 801adb0:	4bcc      	ldr	r3, [pc, #816]	; (801b0e4 <__ieee754_pow+0x764>)
 801adb2:	429c      	cmp	r4, r3
 801adb4:	f340 8162 	ble.w	801b07c <__ieee754_pow+0x6fc>
 801adb8:	9b05      	ldr	r3, [sp, #20]
 801adba:	3301      	adds	r3, #1
 801adbc:	9305      	str	r3, [sp, #20]
 801adbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801adc2:	2400      	movs	r4, #0
 801adc4:	00e3      	lsls	r3, r4, #3
 801adc6:	9307      	str	r3, [sp, #28]
 801adc8:	4bc7      	ldr	r3, [pc, #796]	; (801b0e8 <__ieee754_pow+0x768>)
 801adca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801adce:	ed93 7b00 	vldr	d7, [r3]
 801add2:	4629      	mov	r1, r5
 801add4:	ec53 2b17 	vmov	r2, r3, d7
 801add8:	eeb0 9a47 	vmov.f32	s18, s14
 801addc:	eef0 9a67 	vmov.f32	s19, s15
 801ade0:	4682      	mov	sl, r0
 801ade2:	f7e5 fa71 	bl	80002c8 <__aeabi_dsub>
 801ade6:	4652      	mov	r2, sl
 801ade8:	4606      	mov	r6, r0
 801adea:	460f      	mov	r7, r1
 801adec:	462b      	mov	r3, r5
 801adee:	ec51 0b19 	vmov	r0, r1, d9
 801adf2:	f7e5 fa6b 	bl	80002cc <__adddf3>
 801adf6:	4602      	mov	r2, r0
 801adf8:	460b      	mov	r3, r1
 801adfa:	2000      	movs	r0, #0
 801adfc:	49bb      	ldr	r1, [pc, #748]	; (801b0ec <__ieee754_pow+0x76c>)
 801adfe:	f7e5 fd45 	bl	800088c <__aeabi_ddiv>
 801ae02:	ec41 0b1a 	vmov	d10, r0, r1
 801ae06:	4602      	mov	r2, r0
 801ae08:	460b      	mov	r3, r1
 801ae0a:	4630      	mov	r0, r6
 801ae0c:	4639      	mov	r1, r7
 801ae0e:	f7e5 fc13 	bl	8000638 <__aeabi_dmul>
 801ae12:	2300      	movs	r3, #0
 801ae14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae18:	9302      	str	r3, [sp, #8]
 801ae1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ae1e:	46ab      	mov	fp, r5
 801ae20:	106d      	asrs	r5, r5, #1
 801ae22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ae26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ae2a:	ec41 0b18 	vmov	d8, r0, r1
 801ae2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ae32:	2200      	movs	r2, #0
 801ae34:	4640      	mov	r0, r8
 801ae36:	4649      	mov	r1, r9
 801ae38:	4614      	mov	r4, r2
 801ae3a:	461d      	mov	r5, r3
 801ae3c:	f7e5 fbfc 	bl	8000638 <__aeabi_dmul>
 801ae40:	4602      	mov	r2, r0
 801ae42:	460b      	mov	r3, r1
 801ae44:	4630      	mov	r0, r6
 801ae46:	4639      	mov	r1, r7
 801ae48:	f7e5 fa3e 	bl	80002c8 <__aeabi_dsub>
 801ae4c:	ec53 2b19 	vmov	r2, r3, d9
 801ae50:	4606      	mov	r6, r0
 801ae52:	460f      	mov	r7, r1
 801ae54:	4620      	mov	r0, r4
 801ae56:	4629      	mov	r1, r5
 801ae58:	f7e5 fa36 	bl	80002c8 <__aeabi_dsub>
 801ae5c:	4602      	mov	r2, r0
 801ae5e:	460b      	mov	r3, r1
 801ae60:	4650      	mov	r0, sl
 801ae62:	4659      	mov	r1, fp
 801ae64:	f7e5 fa30 	bl	80002c8 <__aeabi_dsub>
 801ae68:	4642      	mov	r2, r8
 801ae6a:	464b      	mov	r3, r9
 801ae6c:	f7e5 fbe4 	bl	8000638 <__aeabi_dmul>
 801ae70:	4602      	mov	r2, r0
 801ae72:	460b      	mov	r3, r1
 801ae74:	4630      	mov	r0, r6
 801ae76:	4639      	mov	r1, r7
 801ae78:	f7e5 fa26 	bl	80002c8 <__aeabi_dsub>
 801ae7c:	ec53 2b1a 	vmov	r2, r3, d10
 801ae80:	f7e5 fbda 	bl	8000638 <__aeabi_dmul>
 801ae84:	ec53 2b18 	vmov	r2, r3, d8
 801ae88:	ec41 0b19 	vmov	d9, r0, r1
 801ae8c:	ec51 0b18 	vmov	r0, r1, d8
 801ae90:	f7e5 fbd2 	bl	8000638 <__aeabi_dmul>
 801ae94:	a37c      	add	r3, pc, #496	; (adr r3, 801b088 <__ieee754_pow+0x708>)
 801ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	460d      	mov	r5, r1
 801ae9e:	f7e5 fbcb 	bl	8000638 <__aeabi_dmul>
 801aea2:	a37b      	add	r3, pc, #492	; (adr r3, 801b090 <__ieee754_pow+0x710>)
 801aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea8:	f7e5 fa10 	bl	80002cc <__adddf3>
 801aeac:	4622      	mov	r2, r4
 801aeae:	462b      	mov	r3, r5
 801aeb0:	f7e5 fbc2 	bl	8000638 <__aeabi_dmul>
 801aeb4:	a378      	add	r3, pc, #480	; (adr r3, 801b098 <__ieee754_pow+0x718>)
 801aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeba:	f7e5 fa07 	bl	80002cc <__adddf3>
 801aebe:	4622      	mov	r2, r4
 801aec0:	462b      	mov	r3, r5
 801aec2:	f7e5 fbb9 	bl	8000638 <__aeabi_dmul>
 801aec6:	a376      	add	r3, pc, #472	; (adr r3, 801b0a0 <__ieee754_pow+0x720>)
 801aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aecc:	f7e5 f9fe 	bl	80002cc <__adddf3>
 801aed0:	4622      	mov	r2, r4
 801aed2:	462b      	mov	r3, r5
 801aed4:	f7e5 fbb0 	bl	8000638 <__aeabi_dmul>
 801aed8:	a373      	add	r3, pc, #460	; (adr r3, 801b0a8 <__ieee754_pow+0x728>)
 801aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aede:	f7e5 f9f5 	bl	80002cc <__adddf3>
 801aee2:	4622      	mov	r2, r4
 801aee4:	462b      	mov	r3, r5
 801aee6:	f7e5 fba7 	bl	8000638 <__aeabi_dmul>
 801aeea:	a371      	add	r3, pc, #452	; (adr r3, 801b0b0 <__ieee754_pow+0x730>)
 801aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef0:	f7e5 f9ec 	bl	80002cc <__adddf3>
 801aef4:	4622      	mov	r2, r4
 801aef6:	4606      	mov	r6, r0
 801aef8:	460f      	mov	r7, r1
 801aefa:	462b      	mov	r3, r5
 801aefc:	4620      	mov	r0, r4
 801aefe:	4629      	mov	r1, r5
 801af00:	f7e5 fb9a 	bl	8000638 <__aeabi_dmul>
 801af04:	4602      	mov	r2, r0
 801af06:	460b      	mov	r3, r1
 801af08:	4630      	mov	r0, r6
 801af0a:	4639      	mov	r1, r7
 801af0c:	f7e5 fb94 	bl	8000638 <__aeabi_dmul>
 801af10:	4642      	mov	r2, r8
 801af12:	4604      	mov	r4, r0
 801af14:	460d      	mov	r5, r1
 801af16:	464b      	mov	r3, r9
 801af18:	ec51 0b18 	vmov	r0, r1, d8
 801af1c:	f7e5 f9d6 	bl	80002cc <__adddf3>
 801af20:	ec53 2b19 	vmov	r2, r3, d9
 801af24:	f7e5 fb88 	bl	8000638 <__aeabi_dmul>
 801af28:	4622      	mov	r2, r4
 801af2a:	462b      	mov	r3, r5
 801af2c:	f7e5 f9ce 	bl	80002cc <__adddf3>
 801af30:	4642      	mov	r2, r8
 801af32:	4682      	mov	sl, r0
 801af34:	468b      	mov	fp, r1
 801af36:	464b      	mov	r3, r9
 801af38:	4640      	mov	r0, r8
 801af3a:	4649      	mov	r1, r9
 801af3c:	f7e5 fb7c 	bl	8000638 <__aeabi_dmul>
 801af40:	4b6b      	ldr	r3, [pc, #428]	; (801b0f0 <__ieee754_pow+0x770>)
 801af42:	2200      	movs	r2, #0
 801af44:	4606      	mov	r6, r0
 801af46:	460f      	mov	r7, r1
 801af48:	f7e5 f9c0 	bl	80002cc <__adddf3>
 801af4c:	4652      	mov	r2, sl
 801af4e:	465b      	mov	r3, fp
 801af50:	f7e5 f9bc 	bl	80002cc <__adddf3>
 801af54:	2000      	movs	r0, #0
 801af56:	4604      	mov	r4, r0
 801af58:	460d      	mov	r5, r1
 801af5a:	4602      	mov	r2, r0
 801af5c:	460b      	mov	r3, r1
 801af5e:	4640      	mov	r0, r8
 801af60:	4649      	mov	r1, r9
 801af62:	f7e5 fb69 	bl	8000638 <__aeabi_dmul>
 801af66:	4b62      	ldr	r3, [pc, #392]	; (801b0f0 <__ieee754_pow+0x770>)
 801af68:	4680      	mov	r8, r0
 801af6a:	4689      	mov	r9, r1
 801af6c:	2200      	movs	r2, #0
 801af6e:	4620      	mov	r0, r4
 801af70:	4629      	mov	r1, r5
 801af72:	f7e5 f9a9 	bl	80002c8 <__aeabi_dsub>
 801af76:	4632      	mov	r2, r6
 801af78:	463b      	mov	r3, r7
 801af7a:	f7e5 f9a5 	bl	80002c8 <__aeabi_dsub>
 801af7e:	4602      	mov	r2, r0
 801af80:	460b      	mov	r3, r1
 801af82:	4650      	mov	r0, sl
 801af84:	4659      	mov	r1, fp
 801af86:	f7e5 f99f 	bl	80002c8 <__aeabi_dsub>
 801af8a:	ec53 2b18 	vmov	r2, r3, d8
 801af8e:	f7e5 fb53 	bl	8000638 <__aeabi_dmul>
 801af92:	4622      	mov	r2, r4
 801af94:	4606      	mov	r6, r0
 801af96:	460f      	mov	r7, r1
 801af98:	462b      	mov	r3, r5
 801af9a:	ec51 0b19 	vmov	r0, r1, d9
 801af9e:	f7e5 fb4b 	bl	8000638 <__aeabi_dmul>
 801afa2:	4602      	mov	r2, r0
 801afa4:	460b      	mov	r3, r1
 801afa6:	4630      	mov	r0, r6
 801afa8:	4639      	mov	r1, r7
 801afaa:	f7e5 f98f 	bl	80002cc <__adddf3>
 801afae:	4606      	mov	r6, r0
 801afb0:	460f      	mov	r7, r1
 801afb2:	4602      	mov	r2, r0
 801afb4:	460b      	mov	r3, r1
 801afb6:	4640      	mov	r0, r8
 801afb8:	4649      	mov	r1, r9
 801afba:	f7e5 f987 	bl	80002cc <__adddf3>
 801afbe:	a33e      	add	r3, pc, #248	; (adr r3, 801b0b8 <__ieee754_pow+0x738>)
 801afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc4:	2000      	movs	r0, #0
 801afc6:	4604      	mov	r4, r0
 801afc8:	460d      	mov	r5, r1
 801afca:	f7e5 fb35 	bl	8000638 <__aeabi_dmul>
 801afce:	4642      	mov	r2, r8
 801afd0:	ec41 0b18 	vmov	d8, r0, r1
 801afd4:	464b      	mov	r3, r9
 801afd6:	4620      	mov	r0, r4
 801afd8:	4629      	mov	r1, r5
 801afda:	f7e5 f975 	bl	80002c8 <__aeabi_dsub>
 801afde:	4602      	mov	r2, r0
 801afe0:	460b      	mov	r3, r1
 801afe2:	4630      	mov	r0, r6
 801afe4:	4639      	mov	r1, r7
 801afe6:	f7e5 f96f 	bl	80002c8 <__aeabi_dsub>
 801afea:	a335      	add	r3, pc, #212	; (adr r3, 801b0c0 <__ieee754_pow+0x740>)
 801afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff0:	f7e5 fb22 	bl	8000638 <__aeabi_dmul>
 801aff4:	a334      	add	r3, pc, #208	; (adr r3, 801b0c8 <__ieee754_pow+0x748>)
 801aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affa:	4606      	mov	r6, r0
 801affc:	460f      	mov	r7, r1
 801affe:	4620      	mov	r0, r4
 801b000:	4629      	mov	r1, r5
 801b002:	f7e5 fb19 	bl	8000638 <__aeabi_dmul>
 801b006:	4602      	mov	r2, r0
 801b008:	460b      	mov	r3, r1
 801b00a:	4630      	mov	r0, r6
 801b00c:	4639      	mov	r1, r7
 801b00e:	f7e5 f95d 	bl	80002cc <__adddf3>
 801b012:	9a07      	ldr	r2, [sp, #28]
 801b014:	4b37      	ldr	r3, [pc, #220]	; (801b0f4 <__ieee754_pow+0x774>)
 801b016:	4413      	add	r3, r2
 801b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01c:	f7e5 f956 	bl	80002cc <__adddf3>
 801b020:	4682      	mov	sl, r0
 801b022:	9805      	ldr	r0, [sp, #20]
 801b024:	468b      	mov	fp, r1
 801b026:	f7e5 fa9d 	bl	8000564 <__aeabi_i2d>
 801b02a:	9a07      	ldr	r2, [sp, #28]
 801b02c:	4b32      	ldr	r3, [pc, #200]	; (801b0f8 <__ieee754_pow+0x778>)
 801b02e:	4413      	add	r3, r2
 801b030:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b034:	4606      	mov	r6, r0
 801b036:	460f      	mov	r7, r1
 801b038:	4652      	mov	r2, sl
 801b03a:	465b      	mov	r3, fp
 801b03c:	ec51 0b18 	vmov	r0, r1, d8
 801b040:	f7e5 f944 	bl	80002cc <__adddf3>
 801b044:	4642      	mov	r2, r8
 801b046:	464b      	mov	r3, r9
 801b048:	f7e5 f940 	bl	80002cc <__adddf3>
 801b04c:	4632      	mov	r2, r6
 801b04e:	463b      	mov	r3, r7
 801b050:	f7e5 f93c 	bl	80002cc <__adddf3>
 801b054:	2000      	movs	r0, #0
 801b056:	4632      	mov	r2, r6
 801b058:	463b      	mov	r3, r7
 801b05a:	4604      	mov	r4, r0
 801b05c:	460d      	mov	r5, r1
 801b05e:	f7e5 f933 	bl	80002c8 <__aeabi_dsub>
 801b062:	4642      	mov	r2, r8
 801b064:	464b      	mov	r3, r9
 801b066:	f7e5 f92f 	bl	80002c8 <__aeabi_dsub>
 801b06a:	ec53 2b18 	vmov	r2, r3, d8
 801b06e:	f7e5 f92b 	bl	80002c8 <__aeabi_dsub>
 801b072:	4602      	mov	r2, r0
 801b074:	460b      	mov	r3, r1
 801b076:	4650      	mov	r0, sl
 801b078:	4659      	mov	r1, fp
 801b07a:	e610      	b.n	801ac9e <__ieee754_pow+0x31e>
 801b07c:	2401      	movs	r4, #1
 801b07e:	e6a1      	b.n	801adc4 <__ieee754_pow+0x444>
 801b080:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801b0d0 <__ieee754_pow+0x750>
 801b084:	e617      	b.n	801acb6 <__ieee754_pow+0x336>
 801b086:	bf00      	nop
 801b088:	4a454eef 	.word	0x4a454eef
 801b08c:	3fca7e28 	.word	0x3fca7e28
 801b090:	93c9db65 	.word	0x93c9db65
 801b094:	3fcd864a 	.word	0x3fcd864a
 801b098:	a91d4101 	.word	0xa91d4101
 801b09c:	3fd17460 	.word	0x3fd17460
 801b0a0:	518f264d 	.word	0x518f264d
 801b0a4:	3fd55555 	.word	0x3fd55555
 801b0a8:	db6fabff 	.word	0xdb6fabff
 801b0ac:	3fdb6db6 	.word	0x3fdb6db6
 801b0b0:	33333303 	.word	0x33333303
 801b0b4:	3fe33333 	.word	0x3fe33333
 801b0b8:	e0000000 	.word	0xe0000000
 801b0bc:	3feec709 	.word	0x3feec709
 801b0c0:	dc3a03fd 	.word	0xdc3a03fd
 801b0c4:	3feec709 	.word	0x3feec709
 801b0c8:	145b01f5 	.word	0x145b01f5
 801b0cc:	be3e2fe0 	.word	0xbe3e2fe0
 801b0d0:	00000000 	.word	0x00000000
 801b0d4:	3ff00000 	.word	0x3ff00000
 801b0d8:	7ff00000 	.word	0x7ff00000
 801b0dc:	43400000 	.word	0x43400000
 801b0e0:	0003988e 	.word	0x0003988e
 801b0e4:	000bb679 	.word	0x000bb679
 801b0e8:	080736e8 	.word	0x080736e8
 801b0ec:	3ff00000 	.word	0x3ff00000
 801b0f0:	40080000 	.word	0x40080000
 801b0f4:	08073708 	.word	0x08073708
 801b0f8:	080736f8 	.word	0x080736f8
 801b0fc:	a3b5      	add	r3, pc, #724	; (adr r3, 801b3d4 <__ieee754_pow+0xa54>)
 801b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b102:	4640      	mov	r0, r8
 801b104:	4649      	mov	r1, r9
 801b106:	f7e5 f8e1 	bl	80002cc <__adddf3>
 801b10a:	4622      	mov	r2, r4
 801b10c:	ec41 0b1a 	vmov	d10, r0, r1
 801b110:	462b      	mov	r3, r5
 801b112:	4630      	mov	r0, r6
 801b114:	4639      	mov	r1, r7
 801b116:	f7e5 f8d7 	bl	80002c8 <__aeabi_dsub>
 801b11a:	4602      	mov	r2, r0
 801b11c:	460b      	mov	r3, r1
 801b11e:	ec51 0b1a 	vmov	r0, r1, d10
 801b122:	f7e5 fd19 	bl	8000b58 <__aeabi_dcmpgt>
 801b126:	2800      	cmp	r0, #0
 801b128:	f47f ae04 	bne.w	801ad34 <__ieee754_pow+0x3b4>
 801b12c:	4aa4      	ldr	r2, [pc, #656]	; (801b3c0 <__ieee754_pow+0xa40>)
 801b12e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b132:	4293      	cmp	r3, r2
 801b134:	f340 8108 	ble.w	801b348 <__ieee754_pow+0x9c8>
 801b138:	151b      	asrs	r3, r3, #20
 801b13a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b13e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b142:	fa4a f303 	asr.w	r3, sl, r3
 801b146:	445b      	add	r3, fp
 801b148:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b14c:	4e9d      	ldr	r6, [pc, #628]	; (801b3c4 <__ieee754_pow+0xa44>)
 801b14e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b152:	4116      	asrs	r6, r2
 801b154:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b158:	2000      	movs	r0, #0
 801b15a:	ea23 0106 	bic.w	r1, r3, r6
 801b15e:	f1c2 0214 	rsb	r2, r2, #20
 801b162:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b166:	fa4a fa02 	asr.w	sl, sl, r2
 801b16a:	f1bb 0f00 	cmp.w	fp, #0
 801b16e:	4602      	mov	r2, r0
 801b170:	460b      	mov	r3, r1
 801b172:	4620      	mov	r0, r4
 801b174:	4629      	mov	r1, r5
 801b176:	bfb8      	it	lt
 801b178:	f1ca 0a00 	rsblt	sl, sl, #0
 801b17c:	f7e5 f8a4 	bl	80002c8 <__aeabi_dsub>
 801b180:	ec41 0b19 	vmov	d9, r0, r1
 801b184:	4642      	mov	r2, r8
 801b186:	464b      	mov	r3, r9
 801b188:	ec51 0b19 	vmov	r0, r1, d9
 801b18c:	f7e5 f89e 	bl	80002cc <__adddf3>
 801b190:	a37b      	add	r3, pc, #492	; (adr r3, 801b380 <__ieee754_pow+0xa00>)
 801b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b196:	2000      	movs	r0, #0
 801b198:	4604      	mov	r4, r0
 801b19a:	460d      	mov	r5, r1
 801b19c:	f7e5 fa4c 	bl	8000638 <__aeabi_dmul>
 801b1a0:	ec53 2b19 	vmov	r2, r3, d9
 801b1a4:	4606      	mov	r6, r0
 801b1a6:	460f      	mov	r7, r1
 801b1a8:	4620      	mov	r0, r4
 801b1aa:	4629      	mov	r1, r5
 801b1ac:	f7e5 f88c 	bl	80002c8 <__aeabi_dsub>
 801b1b0:	4602      	mov	r2, r0
 801b1b2:	460b      	mov	r3, r1
 801b1b4:	4640      	mov	r0, r8
 801b1b6:	4649      	mov	r1, r9
 801b1b8:	f7e5 f886 	bl	80002c8 <__aeabi_dsub>
 801b1bc:	a372      	add	r3, pc, #456	; (adr r3, 801b388 <__ieee754_pow+0xa08>)
 801b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c2:	f7e5 fa39 	bl	8000638 <__aeabi_dmul>
 801b1c6:	a372      	add	r3, pc, #456	; (adr r3, 801b390 <__ieee754_pow+0xa10>)
 801b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1cc:	4680      	mov	r8, r0
 801b1ce:	4689      	mov	r9, r1
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	4629      	mov	r1, r5
 801b1d4:	f7e5 fa30 	bl	8000638 <__aeabi_dmul>
 801b1d8:	4602      	mov	r2, r0
 801b1da:	460b      	mov	r3, r1
 801b1dc:	4640      	mov	r0, r8
 801b1de:	4649      	mov	r1, r9
 801b1e0:	f7e5 f874 	bl	80002cc <__adddf3>
 801b1e4:	4604      	mov	r4, r0
 801b1e6:	460d      	mov	r5, r1
 801b1e8:	4602      	mov	r2, r0
 801b1ea:	460b      	mov	r3, r1
 801b1ec:	4630      	mov	r0, r6
 801b1ee:	4639      	mov	r1, r7
 801b1f0:	f7e5 f86c 	bl	80002cc <__adddf3>
 801b1f4:	4632      	mov	r2, r6
 801b1f6:	463b      	mov	r3, r7
 801b1f8:	4680      	mov	r8, r0
 801b1fa:	4689      	mov	r9, r1
 801b1fc:	f7e5 f864 	bl	80002c8 <__aeabi_dsub>
 801b200:	4602      	mov	r2, r0
 801b202:	460b      	mov	r3, r1
 801b204:	4620      	mov	r0, r4
 801b206:	4629      	mov	r1, r5
 801b208:	f7e5 f85e 	bl	80002c8 <__aeabi_dsub>
 801b20c:	4642      	mov	r2, r8
 801b20e:	4606      	mov	r6, r0
 801b210:	460f      	mov	r7, r1
 801b212:	464b      	mov	r3, r9
 801b214:	4640      	mov	r0, r8
 801b216:	4649      	mov	r1, r9
 801b218:	f7e5 fa0e 	bl	8000638 <__aeabi_dmul>
 801b21c:	a35e      	add	r3, pc, #376	; (adr r3, 801b398 <__ieee754_pow+0xa18>)
 801b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b222:	4604      	mov	r4, r0
 801b224:	460d      	mov	r5, r1
 801b226:	f7e5 fa07 	bl	8000638 <__aeabi_dmul>
 801b22a:	a35d      	add	r3, pc, #372	; (adr r3, 801b3a0 <__ieee754_pow+0xa20>)
 801b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b230:	f7e5 f84a 	bl	80002c8 <__aeabi_dsub>
 801b234:	4622      	mov	r2, r4
 801b236:	462b      	mov	r3, r5
 801b238:	f7e5 f9fe 	bl	8000638 <__aeabi_dmul>
 801b23c:	a35a      	add	r3, pc, #360	; (adr r3, 801b3a8 <__ieee754_pow+0xa28>)
 801b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b242:	f7e5 f843 	bl	80002cc <__adddf3>
 801b246:	4622      	mov	r2, r4
 801b248:	462b      	mov	r3, r5
 801b24a:	f7e5 f9f5 	bl	8000638 <__aeabi_dmul>
 801b24e:	a358      	add	r3, pc, #352	; (adr r3, 801b3b0 <__ieee754_pow+0xa30>)
 801b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b254:	f7e5 f838 	bl	80002c8 <__aeabi_dsub>
 801b258:	4622      	mov	r2, r4
 801b25a:	462b      	mov	r3, r5
 801b25c:	f7e5 f9ec 	bl	8000638 <__aeabi_dmul>
 801b260:	a355      	add	r3, pc, #340	; (adr r3, 801b3b8 <__ieee754_pow+0xa38>)
 801b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b266:	f7e5 f831 	bl	80002cc <__adddf3>
 801b26a:	4622      	mov	r2, r4
 801b26c:	462b      	mov	r3, r5
 801b26e:	f7e5 f9e3 	bl	8000638 <__aeabi_dmul>
 801b272:	4602      	mov	r2, r0
 801b274:	460b      	mov	r3, r1
 801b276:	4640      	mov	r0, r8
 801b278:	4649      	mov	r1, r9
 801b27a:	f7e5 f825 	bl	80002c8 <__aeabi_dsub>
 801b27e:	4604      	mov	r4, r0
 801b280:	460d      	mov	r5, r1
 801b282:	4602      	mov	r2, r0
 801b284:	460b      	mov	r3, r1
 801b286:	4640      	mov	r0, r8
 801b288:	4649      	mov	r1, r9
 801b28a:	f7e5 f9d5 	bl	8000638 <__aeabi_dmul>
 801b28e:	2200      	movs	r2, #0
 801b290:	ec41 0b19 	vmov	d9, r0, r1
 801b294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b298:	4620      	mov	r0, r4
 801b29a:	4629      	mov	r1, r5
 801b29c:	f7e5 f814 	bl	80002c8 <__aeabi_dsub>
 801b2a0:	4602      	mov	r2, r0
 801b2a2:	460b      	mov	r3, r1
 801b2a4:	ec51 0b19 	vmov	r0, r1, d9
 801b2a8:	f7e5 faf0 	bl	800088c <__aeabi_ddiv>
 801b2ac:	4632      	mov	r2, r6
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	463b      	mov	r3, r7
 801b2b4:	4640      	mov	r0, r8
 801b2b6:	4649      	mov	r1, r9
 801b2b8:	f7e5 f9be 	bl	8000638 <__aeabi_dmul>
 801b2bc:	4632      	mov	r2, r6
 801b2be:	463b      	mov	r3, r7
 801b2c0:	f7e5 f804 	bl	80002cc <__adddf3>
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	4629      	mov	r1, r5
 801b2cc:	f7e4 fffc 	bl	80002c8 <__aeabi_dsub>
 801b2d0:	4642      	mov	r2, r8
 801b2d2:	464b      	mov	r3, r9
 801b2d4:	f7e4 fff8 	bl	80002c8 <__aeabi_dsub>
 801b2d8:	460b      	mov	r3, r1
 801b2da:	4602      	mov	r2, r0
 801b2dc:	493a      	ldr	r1, [pc, #232]	; (801b3c8 <__ieee754_pow+0xa48>)
 801b2de:	2000      	movs	r0, #0
 801b2e0:	f7e4 fff2 	bl	80002c8 <__aeabi_dsub>
 801b2e4:	ec41 0b10 	vmov	d0, r0, r1
 801b2e8:	ee10 3a90 	vmov	r3, s1
 801b2ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b2f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b2f4:	da2b      	bge.n	801b34e <__ieee754_pow+0x9ce>
 801b2f6:	4650      	mov	r0, sl
 801b2f8:	f001 fada 	bl	801c8b0 <scalbn>
 801b2fc:	ec51 0b10 	vmov	r0, r1, d0
 801b300:	ec53 2b18 	vmov	r2, r3, d8
 801b304:	f7ff bbed 	b.w	801aae2 <__ieee754_pow+0x162>
 801b308:	4b30      	ldr	r3, [pc, #192]	; (801b3cc <__ieee754_pow+0xa4c>)
 801b30a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b30e:	429e      	cmp	r6, r3
 801b310:	f77f af0c 	ble.w	801b12c <__ieee754_pow+0x7ac>
 801b314:	4b2e      	ldr	r3, [pc, #184]	; (801b3d0 <__ieee754_pow+0xa50>)
 801b316:	440b      	add	r3, r1
 801b318:	4303      	orrs	r3, r0
 801b31a:	d009      	beq.n	801b330 <__ieee754_pow+0x9b0>
 801b31c:	ec51 0b18 	vmov	r0, r1, d8
 801b320:	2200      	movs	r2, #0
 801b322:	2300      	movs	r3, #0
 801b324:	f7e5 fbfa 	bl	8000b1c <__aeabi_dcmplt>
 801b328:	3800      	subs	r0, #0
 801b32a:	bf18      	it	ne
 801b32c:	2001      	movne	r0, #1
 801b32e:	e447      	b.n	801abc0 <__ieee754_pow+0x240>
 801b330:	4622      	mov	r2, r4
 801b332:	462b      	mov	r3, r5
 801b334:	f7e4 ffc8 	bl	80002c8 <__aeabi_dsub>
 801b338:	4642      	mov	r2, r8
 801b33a:	464b      	mov	r3, r9
 801b33c:	f7e5 fc02 	bl	8000b44 <__aeabi_dcmpge>
 801b340:	2800      	cmp	r0, #0
 801b342:	f43f aef3 	beq.w	801b12c <__ieee754_pow+0x7ac>
 801b346:	e7e9      	b.n	801b31c <__ieee754_pow+0x99c>
 801b348:	f04f 0a00 	mov.w	sl, #0
 801b34c:	e71a      	b.n	801b184 <__ieee754_pow+0x804>
 801b34e:	ec51 0b10 	vmov	r0, r1, d0
 801b352:	4619      	mov	r1, r3
 801b354:	e7d4      	b.n	801b300 <__ieee754_pow+0x980>
 801b356:	491c      	ldr	r1, [pc, #112]	; (801b3c8 <__ieee754_pow+0xa48>)
 801b358:	2000      	movs	r0, #0
 801b35a:	f7ff bb30 	b.w	801a9be <__ieee754_pow+0x3e>
 801b35e:	2000      	movs	r0, #0
 801b360:	2100      	movs	r1, #0
 801b362:	f7ff bb2c 	b.w	801a9be <__ieee754_pow+0x3e>
 801b366:	4630      	mov	r0, r6
 801b368:	4639      	mov	r1, r7
 801b36a:	f7ff bb28 	b.w	801a9be <__ieee754_pow+0x3e>
 801b36e:	9204      	str	r2, [sp, #16]
 801b370:	f7ff bb7a 	b.w	801aa68 <__ieee754_pow+0xe8>
 801b374:	2300      	movs	r3, #0
 801b376:	f7ff bb64 	b.w	801aa42 <__ieee754_pow+0xc2>
 801b37a:	bf00      	nop
 801b37c:	f3af 8000 	nop.w
 801b380:	00000000 	.word	0x00000000
 801b384:	3fe62e43 	.word	0x3fe62e43
 801b388:	fefa39ef 	.word	0xfefa39ef
 801b38c:	3fe62e42 	.word	0x3fe62e42
 801b390:	0ca86c39 	.word	0x0ca86c39
 801b394:	be205c61 	.word	0xbe205c61
 801b398:	72bea4d0 	.word	0x72bea4d0
 801b39c:	3e663769 	.word	0x3e663769
 801b3a0:	c5d26bf1 	.word	0xc5d26bf1
 801b3a4:	3ebbbd41 	.word	0x3ebbbd41
 801b3a8:	af25de2c 	.word	0xaf25de2c
 801b3ac:	3f11566a 	.word	0x3f11566a
 801b3b0:	16bebd93 	.word	0x16bebd93
 801b3b4:	3f66c16c 	.word	0x3f66c16c
 801b3b8:	5555553e 	.word	0x5555553e
 801b3bc:	3fc55555 	.word	0x3fc55555
 801b3c0:	3fe00000 	.word	0x3fe00000
 801b3c4:	000fffff 	.word	0x000fffff
 801b3c8:	3ff00000 	.word	0x3ff00000
 801b3cc:	4090cbff 	.word	0x4090cbff
 801b3d0:	3f6f3400 	.word	0x3f6f3400
 801b3d4:	652b82fe 	.word	0x652b82fe
 801b3d8:	3c971547 	.word	0x3c971547
 801b3dc:	00000000 	.word	0x00000000

0801b3e0 <__ieee754_rem_pio2>:
 801b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3e4:	ed2d 8b02 	vpush	{d8}
 801b3e8:	ec55 4b10 	vmov	r4, r5, d0
 801b3ec:	4bca      	ldr	r3, [pc, #808]	; (801b718 <__ieee754_rem_pio2+0x338>)
 801b3ee:	b08b      	sub	sp, #44	; 0x2c
 801b3f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b3f4:	4598      	cmp	r8, r3
 801b3f6:	4682      	mov	sl, r0
 801b3f8:	9502      	str	r5, [sp, #8]
 801b3fa:	dc08      	bgt.n	801b40e <__ieee754_rem_pio2+0x2e>
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	2300      	movs	r3, #0
 801b400:	ed80 0b00 	vstr	d0, [r0]
 801b404:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b408:	f04f 0b00 	mov.w	fp, #0
 801b40c:	e028      	b.n	801b460 <__ieee754_rem_pio2+0x80>
 801b40e:	4bc3      	ldr	r3, [pc, #780]	; (801b71c <__ieee754_rem_pio2+0x33c>)
 801b410:	4598      	cmp	r8, r3
 801b412:	dc78      	bgt.n	801b506 <__ieee754_rem_pio2+0x126>
 801b414:	9b02      	ldr	r3, [sp, #8]
 801b416:	4ec2      	ldr	r6, [pc, #776]	; (801b720 <__ieee754_rem_pio2+0x340>)
 801b418:	2b00      	cmp	r3, #0
 801b41a:	ee10 0a10 	vmov	r0, s0
 801b41e:	a3b0      	add	r3, pc, #704	; (adr r3, 801b6e0 <__ieee754_rem_pio2+0x300>)
 801b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b424:	4629      	mov	r1, r5
 801b426:	dd39      	ble.n	801b49c <__ieee754_rem_pio2+0xbc>
 801b428:	f7e4 ff4e 	bl	80002c8 <__aeabi_dsub>
 801b42c:	45b0      	cmp	r8, r6
 801b42e:	4604      	mov	r4, r0
 801b430:	460d      	mov	r5, r1
 801b432:	d01b      	beq.n	801b46c <__ieee754_rem_pio2+0x8c>
 801b434:	a3ac      	add	r3, pc, #688	; (adr r3, 801b6e8 <__ieee754_rem_pio2+0x308>)
 801b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b43a:	f7e4 ff45 	bl	80002c8 <__aeabi_dsub>
 801b43e:	4602      	mov	r2, r0
 801b440:	460b      	mov	r3, r1
 801b442:	e9ca 2300 	strd	r2, r3, [sl]
 801b446:	4620      	mov	r0, r4
 801b448:	4629      	mov	r1, r5
 801b44a:	f7e4 ff3d 	bl	80002c8 <__aeabi_dsub>
 801b44e:	a3a6      	add	r3, pc, #664	; (adr r3, 801b6e8 <__ieee754_rem_pio2+0x308>)
 801b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b454:	f7e4 ff38 	bl	80002c8 <__aeabi_dsub>
 801b458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b45c:	f04f 0b01 	mov.w	fp, #1
 801b460:	4658      	mov	r0, fp
 801b462:	b00b      	add	sp, #44	; 0x2c
 801b464:	ecbd 8b02 	vpop	{d8}
 801b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46c:	a3a0      	add	r3, pc, #640	; (adr r3, 801b6f0 <__ieee754_rem_pio2+0x310>)
 801b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b472:	f7e4 ff29 	bl	80002c8 <__aeabi_dsub>
 801b476:	a3a0      	add	r3, pc, #640	; (adr r3, 801b6f8 <__ieee754_rem_pio2+0x318>)
 801b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b47c:	4604      	mov	r4, r0
 801b47e:	460d      	mov	r5, r1
 801b480:	f7e4 ff22 	bl	80002c8 <__aeabi_dsub>
 801b484:	4602      	mov	r2, r0
 801b486:	460b      	mov	r3, r1
 801b488:	e9ca 2300 	strd	r2, r3, [sl]
 801b48c:	4620      	mov	r0, r4
 801b48e:	4629      	mov	r1, r5
 801b490:	f7e4 ff1a 	bl	80002c8 <__aeabi_dsub>
 801b494:	a398      	add	r3, pc, #608	; (adr r3, 801b6f8 <__ieee754_rem_pio2+0x318>)
 801b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b49a:	e7db      	b.n	801b454 <__ieee754_rem_pio2+0x74>
 801b49c:	f7e4 ff16 	bl	80002cc <__adddf3>
 801b4a0:	45b0      	cmp	r8, r6
 801b4a2:	4604      	mov	r4, r0
 801b4a4:	460d      	mov	r5, r1
 801b4a6:	d016      	beq.n	801b4d6 <__ieee754_rem_pio2+0xf6>
 801b4a8:	a38f      	add	r3, pc, #572	; (adr r3, 801b6e8 <__ieee754_rem_pio2+0x308>)
 801b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ae:	f7e4 ff0d 	bl	80002cc <__adddf3>
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	460b      	mov	r3, r1
 801b4b6:	e9ca 2300 	strd	r2, r3, [sl]
 801b4ba:	4620      	mov	r0, r4
 801b4bc:	4629      	mov	r1, r5
 801b4be:	f7e4 ff03 	bl	80002c8 <__aeabi_dsub>
 801b4c2:	a389      	add	r3, pc, #548	; (adr r3, 801b6e8 <__ieee754_rem_pio2+0x308>)
 801b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c8:	f7e4 ff00 	bl	80002cc <__adddf3>
 801b4cc:	f04f 3bff 	mov.w	fp, #4294967295
 801b4d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b4d4:	e7c4      	b.n	801b460 <__ieee754_rem_pio2+0x80>
 801b4d6:	a386      	add	r3, pc, #536	; (adr r3, 801b6f0 <__ieee754_rem_pio2+0x310>)
 801b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4dc:	f7e4 fef6 	bl	80002cc <__adddf3>
 801b4e0:	a385      	add	r3, pc, #532	; (adr r3, 801b6f8 <__ieee754_rem_pio2+0x318>)
 801b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4e6:	4604      	mov	r4, r0
 801b4e8:	460d      	mov	r5, r1
 801b4ea:	f7e4 feef 	bl	80002cc <__adddf3>
 801b4ee:	4602      	mov	r2, r0
 801b4f0:	460b      	mov	r3, r1
 801b4f2:	e9ca 2300 	strd	r2, r3, [sl]
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	4629      	mov	r1, r5
 801b4fa:	f7e4 fee5 	bl	80002c8 <__aeabi_dsub>
 801b4fe:	a37e      	add	r3, pc, #504	; (adr r3, 801b6f8 <__ieee754_rem_pio2+0x318>)
 801b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b504:	e7e0      	b.n	801b4c8 <__ieee754_rem_pio2+0xe8>
 801b506:	4b87      	ldr	r3, [pc, #540]	; (801b724 <__ieee754_rem_pio2+0x344>)
 801b508:	4598      	cmp	r8, r3
 801b50a:	f300 80d9 	bgt.w	801b6c0 <__ieee754_rem_pio2+0x2e0>
 801b50e:	f001 f939 	bl	801c784 <fabs>
 801b512:	ec55 4b10 	vmov	r4, r5, d0
 801b516:	ee10 0a10 	vmov	r0, s0
 801b51a:	a379      	add	r3, pc, #484	; (adr r3, 801b700 <__ieee754_rem_pio2+0x320>)
 801b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b520:	4629      	mov	r1, r5
 801b522:	f7e5 f889 	bl	8000638 <__aeabi_dmul>
 801b526:	4b80      	ldr	r3, [pc, #512]	; (801b728 <__ieee754_rem_pio2+0x348>)
 801b528:	2200      	movs	r2, #0
 801b52a:	f7e4 fecf 	bl	80002cc <__adddf3>
 801b52e:	f7e5 fb33 	bl	8000b98 <__aeabi_d2iz>
 801b532:	4683      	mov	fp, r0
 801b534:	f7e5 f816 	bl	8000564 <__aeabi_i2d>
 801b538:	4602      	mov	r2, r0
 801b53a:	460b      	mov	r3, r1
 801b53c:	ec43 2b18 	vmov	d8, r2, r3
 801b540:	a367      	add	r3, pc, #412	; (adr r3, 801b6e0 <__ieee754_rem_pio2+0x300>)
 801b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b546:	f7e5 f877 	bl	8000638 <__aeabi_dmul>
 801b54a:	4602      	mov	r2, r0
 801b54c:	460b      	mov	r3, r1
 801b54e:	4620      	mov	r0, r4
 801b550:	4629      	mov	r1, r5
 801b552:	f7e4 feb9 	bl	80002c8 <__aeabi_dsub>
 801b556:	a364      	add	r3, pc, #400	; (adr r3, 801b6e8 <__ieee754_rem_pio2+0x308>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	4606      	mov	r6, r0
 801b55e:	460f      	mov	r7, r1
 801b560:	ec51 0b18 	vmov	r0, r1, d8
 801b564:	f7e5 f868 	bl	8000638 <__aeabi_dmul>
 801b568:	f1bb 0f1f 	cmp.w	fp, #31
 801b56c:	4604      	mov	r4, r0
 801b56e:	460d      	mov	r5, r1
 801b570:	dc0d      	bgt.n	801b58e <__ieee754_rem_pio2+0x1ae>
 801b572:	4b6e      	ldr	r3, [pc, #440]	; (801b72c <__ieee754_rem_pio2+0x34c>)
 801b574:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b57c:	4543      	cmp	r3, r8
 801b57e:	d006      	beq.n	801b58e <__ieee754_rem_pio2+0x1ae>
 801b580:	4622      	mov	r2, r4
 801b582:	462b      	mov	r3, r5
 801b584:	4630      	mov	r0, r6
 801b586:	4639      	mov	r1, r7
 801b588:	f7e4 fe9e 	bl	80002c8 <__aeabi_dsub>
 801b58c:	e00f      	b.n	801b5ae <__ieee754_rem_pio2+0x1ce>
 801b58e:	462b      	mov	r3, r5
 801b590:	4622      	mov	r2, r4
 801b592:	4630      	mov	r0, r6
 801b594:	4639      	mov	r1, r7
 801b596:	f7e4 fe97 	bl	80002c8 <__aeabi_dsub>
 801b59a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b59e:	9303      	str	r3, [sp, #12]
 801b5a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b5a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b5a8:	f1b8 0f10 	cmp.w	r8, #16
 801b5ac:	dc02      	bgt.n	801b5b4 <__ieee754_rem_pio2+0x1d4>
 801b5ae:	e9ca 0100 	strd	r0, r1, [sl]
 801b5b2:	e039      	b.n	801b628 <__ieee754_rem_pio2+0x248>
 801b5b4:	a34e      	add	r3, pc, #312	; (adr r3, 801b6f0 <__ieee754_rem_pio2+0x310>)
 801b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ba:	ec51 0b18 	vmov	r0, r1, d8
 801b5be:	f7e5 f83b 	bl	8000638 <__aeabi_dmul>
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	460d      	mov	r5, r1
 801b5c6:	4602      	mov	r2, r0
 801b5c8:	460b      	mov	r3, r1
 801b5ca:	4630      	mov	r0, r6
 801b5cc:	4639      	mov	r1, r7
 801b5ce:	f7e4 fe7b 	bl	80002c8 <__aeabi_dsub>
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	460b      	mov	r3, r1
 801b5d6:	4680      	mov	r8, r0
 801b5d8:	4689      	mov	r9, r1
 801b5da:	4630      	mov	r0, r6
 801b5dc:	4639      	mov	r1, r7
 801b5de:	f7e4 fe73 	bl	80002c8 <__aeabi_dsub>
 801b5e2:	4622      	mov	r2, r4
 801b5e4:	462b      	mov	r3, r5
 801b5e6:	f7e4 fe6f 	bl	80002c8 <__aeabi_dsub>
 801b5ea:	a343      	add	r3, pc, #268	; (adr r3, 801b6f8 <__ieee754_rem_pio2+0x318>)
 801b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f0:	4604      	mov	r4, r0
 801b5f2:	460d      	mov	r5, r1
 801b5f4:	ec51 0b18 	vmov	r0, r1, d8
 801b5f8:	f7e5 f81e 	bl	8000638 <__aeabi_dmul>
 801b5fc:	4622      	mov	r2, r4
 801b5fe:	462b      	mov	r3, r5
 801b600:	f7e4 fe62 	bl	80002c8 <__aeabi_dsub>
 801b604:	4602      	mov	r2, r0
 801b606:	460b      	mov	r3, r1
 801b608:	4604      	mov	r4, r0
 801b60a:	460d      	mov	r5, r1
 801b60c:	4640      	mov	r0, r8
 801b60e:	4649      	mov	r1, r9
 801b610:	f7e4 fe5a 	bl	80002c8 <__aeabi_dsub>
 801b614:	9a03      	ldr	r2, [sp, #12]
 801b616:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b61a:	1ad3      	subs	r3, r2, r3
 801b61c:	2b31      	cmp	r3, #49	; 0x31
 801b61e:	dc24      	bgt.n	801b66a <__ieee754_rem_pio2+0x28a>
 801b620:	e9ca 0100 	strd	r0, r1, [sl]
 801b624:	4646      	mov	r6, r8
 801b626:	464f      	mov	r7, r9
 801b628:	e9da 8900 	ldrd	r8, r9, [sl]
 801b62c:	4630      	mov	r0, r6
 801b62e:	4642      	mov	r2, r8
 801b630:	464b      	mov	r3, r9
 801b632:	4639      	mov	r1, r7
 801b634:	f7e4 fe48 	bl	80002c8 <__aeabi_dsub>
 801b638:	462b      	mov	r3, r5
 801b63a:	4622      	mov	r2, r4
 801b63c:	f7e4 fe44 	bl	80002c8 <__aeabi_dsub>
 801b640:	9b02      	ldr	r3, [sp, #8]
 801b642:	2b00      	cmp	r3, #0
 801b644:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b648:	f6bf af0a 	bge.w	801b460 <__ieee754_rem_pio2+0x80>
 801b64c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b650:	f8ca 3004 	str.w	r3, [sl, #4]
 801b654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b658:	f8ca 8000 	str.w	r8, [sl]
 801b65c:	f8ca 0008 	str.w	r0, [sl, #8]
 801b660:	f8ca 300c 	str.w	r3, [sl, #12]
 801b664:	f1cb 0b00 	rsb	fp, fp, #0
 801b668:	e6fa      	b.n	801b460 <__ieee754_rem_pio2+0x80>
 801b66a:	a327      	add	r3, pc, #156	; (adr r3, 801b708 <__ieee754_rem_pio2+0x328>)
 801b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b670:	ec51 0b18 	vmov	r0, r1, d8
 801b674:	f7e4 ffe0 	bl	8000638 <__aeabi_dmul>
 801b678:	4604      	mov	r4, r0
 801b67a:	460d      	mov	r5, r1
 801b67c:	4602      	mov	r2, r0
 801b67e:	460b      	mov	r3, r1
 801b680:	4640      	mov	r0, r8
 801b682:	4649      	mov	r1, r9
 801b684:	f7e4 fe20 	bl	80002c8 <__aeabi_dsub>
 801b688:	4602      	mov	r2, r0
 801b68a:	460b      	mov	r3, r1
 801b68c:	4606      	mov	r6, r0
 801b68e:	460f      	mov	r7, r1
 801b690:	4640      	mov	r0, r8
 801b692:	4649      	mov	r1, r9
 801b694:	f7e4 fe18 	bl	80002c8 <__aeabi_dsub>
 801b698:	4622      	mov	r2, r4
 801b69a:	462b      	mov	r3, r5
 801b69c:	f7e4 fe14 	bl	80002c8 <__aeabi_dsub>
 801b6a0:	a31b      	add	r3, pc, #108	; (adr r3, 801b710 <__ieee754_rem_pio2+0x330>)
 801b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a6:	4604      	mov	r4, r0
 801b6a8:	460d      	mov	r5, r1
 801b6aa:	ec51 0b18 	vmov	r0, r1, d8
 801b6ae:	f7e4 ffc3 	bl	8000638 <__aeabi_dmul>
 801b6b2:	4622      	mov	r2, r4
 801b6b4:	462b      	mov	r3, r5
 801b6b6:	f7e4 fe07 	bl	80002c8 <__aeabi_dsub>
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	460d      	mov	r5, r1
 801b6be:	e75f      	b.n	801b580 <__ieee754_rem_pio2+0x1a0>
 801b6c0:	4b1b      	ldr	r3, [pc, #108]	; (801b730 <__ieee754_rem_pio2+0x350>)
 801b6c2:	4598      	cmp	r8, r3
 801b6c4:	dd36      	ble.n	801b734 <__ieee754_rem_pio2+0x354>
 801b6c6:	ee10 2a10 	vmov	r2, s0
 801b6ca:	462b      	mov	r3, r5
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	4629      	mov	r1, r5
 801b6d0:	f7e4 fdfa 	bl	80002c8 <__aeabi_dsub>
 801b6d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b6d8:	e9ca 0100 	strd	r0, r1, [sl]
 801b6dc:	e694      	b.n	801b408 <__ieee754_rem_pio2+0x28>
 801b6de:	bf00      	nop
 801b6e0:	54400000 	.word	0x54400000
 801b6e4:	3ff921fb 	.word	0x3ff921fb
 801b6e8:	1a626331 	.word	0x1a626331
 801b6ec:	3dd0b461 	.word	0x3dd0b461
 801b6f0:	1a600000 	.word	0x1a600000
 801b6f4:	3dd0b461 	.word	0x3dd0b461
 801b6f8:	2e037073 	.word	0x2e037073
 801b6fc:	3ba3198a 	.word	0x3ba3198a
 801b700:	6dc9c883 	.word	0x6dc9c883
 801b704:	3fe45f30 	.word	0x3fe45f30
 801b708:	2e000000 	.word	0x2e000000
 801b70c:	3ba3198a 	.word	0x3ba3198a
 801b710:	252049c1 	.word	0x252049c1
 801b714:	397b839a 	.word	0x397b839a
 801b718:	3fe921fb 	.word	0x3fe921fb
 801b71c:	4002d97b 	.word	0x4002d97b
 801b720:	3ff921fb 	.word	0x3ff921fb
 801b724:	413921fb 	.word	0x413921fb
 801b728:	3fe00000 	.word	0x3fe00000
 801b72c:	08073718 	.word	0x08073718
 801b730:	7fefffff 	.word	0x7fefffff
 801b734:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b738:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b73c:	ee10 0a10 	vmov	r0, s0
 801b740:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b744:	ee10 6a10 	vmov	r6, s0
 801b748:	460f      	mov	r7, r1
 801b74a:	f7e5 fa25 	bl	8000b98 <__aeabi_d2iz>
 801b74e:	f7e4 ff09 	bl	8000564 <__aeabi_i2d>
 801b752:	4602      	mov	r2, r0
 801b754:	460b      	mov	r3, r1
 801b756:	4630      	mov	r0, r6
 801b758:	4639      	mov	r1, r7
 801b75a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b75e:	f7e4 fdb3 	bl	80002c8 <__aeabi_dsub>
 801b762:	4b23      	ldr	r3, [pc, #140]	; (801b7f0 <__ieee754_rem_pio2+0x410>)
 801b764:	2200      	movs	r2, #0
 801b766:	f7e4 ff67 	bl	8000638 <__aeabi_dmul>
 801b76a:	460f      	mov	r7, r1
 801b76c:	4606      	mov	r6, r0
 801b76e:	f7e5 fa13 	bl	8000b98 <__aeabi_d2iz>
 801b772:	f7e4 fef7 	bl	8000564 <__aeabi_i2d>
 801b776:	4602      	mov	r2, r0
 801b778:	460b      	mov	r3, r1
 801b77a:	4630      	mov	r0, r6
 801b77c:	4639      	mov	r1, r7
 801b77e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b782:	f7e4 fda1 	bl	80002c8 <__aeabi_dsub>
 801b786:	4b1a      	ldr	r3, [pc, #104]	; (801b7f0 <__ieee754_rem_pio2+0x410>)
 801b788:	2200      	movs	r2, #0
 801b78a:	f7e4 ff55 	bl	8000638 <__aeabi_dmul>
 801b78e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b792:	ad04      	add	r5, sp, #16
 801b794:	f04f 0803 	mov.w	r8, #3
 801b798:	46a9      	mov	r9, r5
 801b79a:	2600      	movs	r6, #0
 801b79c:	2700      	movs	r7, #0
 801b79e:	4632      	mov	r2, r6
 801b7a0:	463b      	mov	r3, r7
 801b7a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b7a6:	46c3      	mov	fp, r8
 801b7a8:	3d08      	subs	r5, #8
 801b7aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801b7ae:	f7e5 f9ab 	bl	8000b08 <__aeabi_dcmpeq>
 801b7b2:	2800      	cmp	r0, #0
 801b7b4:	d1f3      	bne.n	801b79e <__ieee754_rem_pio2+0x3be>
 801b7b6:	4b0f      	ldr	r3, [pc, #60]	; (801b7f4 <__ieee754_rem_pio2+0x414>)
 801b7b8:	9301      	str	r3, [sp, #4]
 801b7ba:	2302      	movs	r3, #2
 801b7bc:	9300      	str	r3, [sp, #0]
 801b7be:	4622      	mov	r2, r4
 801b7c0:	465b      	mov	r3, fp
 801b7c2:	4651      	mov	r1, sl
 801b7c4:	4648      	mov	r0, r9
 801b7c6:	f000 f993 	bl	801baf0 <__kernel_rem_pio2>
 801b7ca:	9b02      	ldr	r3, [sp, #8]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	4683      	mov	fp, r0
 801b7d0:	f6bf ae46 	bge.w	801b460 <__ieee754_rem_pio2+0x80>
 801b7d4:	e9da 2100 	ldrd	r2, r1, [sl]
 801b7d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7dc:	e9ca 2300 	strd	r2, r3, [sl]
 801b7e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b7e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b7ec:	e73a      	b.n	801b664 <__ieee754_rem_pio2+0x284>
 801b7ee:	bf00      	nop
 801b7f0:	41700000 	.word	0x41700000
 801b7f4:	08073798 	.word	0x08073798

0801b7f8 <__ieee754_sqrt>:
 801b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7fc:	ec55 4b10 	vmov	r4, r5, d0
 801b800:	4e55      	ldr	r6, [pc, #340]	; (801b958 <__ieee754_sqrt+0x160>)
 801b802:	43ae      	bics	r6, r5
 801b804:	ee10 0a10 	vmov	r0, s0
 801b808:	ee10 3a10 	vmov	r3, s0
 801b80c:	462a      	mov	r2, r5
 801b80e:	4629      	mov	r1, r5
 801b810:	d110      	bne.n	801b834 <__ieee754_sqrt+0x3c>
 801b812:	ee10 2a10 	vmov	r2, s0
 801b816:	462b      	mov	r3, r5
 801b818:	f7e4 ff0e 	bl	8000638 <__aeabi_dmul>
 801b81c:	4602      	mov	r2, r0
 801b81e:	460b      	mov	r3, r1
 801b820:	4620      	mov	r0, r4
 801b822:	4629      	mov	r1, r5
 801b824:	f7e4 fd52 	bl	80002cc <__adddf3>
 801b828:	4604      	mov	r4, r0
 801b82a:	460d      	mov	r5, r1
 801b82c:	ec45 4b10 	vmov	d0, r4, r5
 801b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b834:	2d00      	cmp	r5, #0
 801b836:	dc10      	bgt.n	801b85a <__ieee754_sqrt+0x62>
 801b838:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b83c:	4330      	orrs	r0, r6
 801b83e:	d0f5      	beq.n	801b82c <__ieee754_sqrt+0x34>
 801b840:	b15d      	cbz	r5, 801b85a <__ieee754_sqrt+0x62>
 801b842:	ee10 2a10 	vmov	r2, s0
 801b846:	462b      	mov	r3, r5
 801b848:	ee10 0a10 	vmov	r0, s0
 801b84c:	f7e4 fd3c 	bl	80002c8 <__aeabi_dsub>
 801b850:	4602      	mov	r2, r0
 801b852:	460b      	mov	r3, r1
 801b854:	f7e5 f81a 	bl	800088c <__aeabi_ddiv>
 801b858:	e7e6      	b.n	801b828 <__ieee754_sqrt+0x30>
 801b85a:	1512      	asrs	r2, r2, #20
 801b85c:	d074      	beq.n	801b948 <__ieee754_sqrt+0x150>
 801b85e:	07d4      	lsls	r4, r2, #31
 801b860:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b864:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801b868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b86c:	bf5e      	ittt	pl
 801b86e:	0fda      	lsrpl	r2, r3, #31
 801b870:	005b      	lslpl	r3, r3, #1
 801b872:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801b876:	2400      	movs	r4, #0
 801b878:	0fda      	lsrs	r2, r3, #31
 801b87a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b87e:	107f      	asrs	r7, r7, #1
 801b880:	005b      	lsls	r3, r3, #1
 801b882:	2516      	movs	r5, #22
 801b884:	4620      	mov	r0, r4
 801b886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801b88a:	1886      	adds	r6, r0, r2
 801b88c:	428e      	cmp	r6, r1
 801b88e:	bfde      	ittt	le
 801b890:	1b89      	suble	r1, r1, r6
 801b892:	18b0      	addle	r0, r6, r2
 801b894:	18a4      	addle	r4, r4, r2
 801b896:	0049      	lsls	r1, r1, #1
 801b898:	3d01      	subs	r5, #1
 801b89a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801b89e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801b8a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b8a6:	d1f0      	bne.n	801b88a <__ieee754_sqrt+0x92>
 801b8a8:	462a      	mov	r2, r5
 801b8aa:	f04f 0e20 	mov.w	lr, #32
 801b8ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801b8b2:	4281      	cmp	r1, r0
 801b8b4:	eb06 0c05 	add.w	ip, r6, r5
 801b8b8:	dc02      	bgt.n	801b8c0 <__ieee754_sqrt+0xc8>
 801b8ba:	d113      	bne.n	801b8e4 <__ieee754_sqrt+0xec>
 801b8bc:	459c      	cmp	ip, r3
 801b8be:	d811      	bhi.n	801b8e4 <__ieee754_sqrt+0xec>
 801b8c0:	f1bc 0f00 	cmp.w	ip, #0
 801b8c4:	eb0c 0506 	add.w	r5, ip, r6
 801b8c8:	da43      	bge.n	801b952 <__ieee754_sqrt+0x15a>
 801b8ca:	2d00      	cmp	r5, #0
 801b8cc:	db41      	blt.n	801b952 <__ieee754_sqrt+0x15a>
 801b8ce:	f100 0801 	add.w	r8, r0, #1
 801b8d2:	1a09      	subs	r1, r1, r0
 801b8d4:	459c      	cmp	ip, r3
 801b8d6:	bf88      	it	hi
 801b8d8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801b8dc:	eba3 030c 	sub.w	r3, r3, ip
 801b8e0:	4432      	add	r2, r6
 801b8e2:	4640      	mov	r0, r8
 801b8e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801b8e8:	f1be 0e01 	subs.w	lr, lr, #1
 801b8ec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801b8f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b8f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801b8f8:	d1db      	bne.n	801b8b2 <__ieee754_sqrt+0xba>
 801b8fa:	430b      	orrs	r3, r1
 801b8fc:	d006      	beq.n	801b90c <__ieee754_sqrt+0x114>
 801b8fe:	1c50      	adds	r0, r2, #1
 801b900:	bf13      	iteet	ne
 801b902:	3201      	addne	r2, #1
 801b904:	3401      	addeq	r4, #1
 801b906:	4672      	moveq	r2, lr
 801b908:	f022 0201 	bicne.w	r2, r2, #1
 801b90c:	1063      	asrs	r3, r4, #1
 801b90e:	0852      	lsrs	r2, r2, #1
 801b910:	07e1      	lsls	r1, r4, #31
 801b912:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b916:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b91a:	bf48      	it	mi
 801b91c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801b920:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801b924:	4614      	mov	r4, r2
 801b926:	e781      	b.n	801b82c <__ieee754_sqrt+0x34>
 801b928:	0ad9      	lsrs	r1, r3, #11
 801b92a:	3815      	subs	r0, #21
 801b92c:	055b      	lsls	r3, r3, #21
 801b92e:	2900      	cmp	r1, #0
 801b930:	d0fa      	beq.n	801b928 <__ieee754_sqrt+0x130>
 801b932:	02cd      	lsls	r5, r1, #11
 801b934:	d50a      	bpl.n	801b94c <__ieee754_sqrt+0x154>
 801b936:	f1c2 0420 	rsb	r4, r2, #32
 801b93a:	fa23 f404 	lsr.w	r4, r3, r4
 801b93e:	1e55      	subs	r5, r2, #1
 801b940:	4093      	lsls	r3, r2
 801b942:	4321      	orrs	r1, r4
 801b944:	1b42      	subs	r2, r0, r5
 801b946:	e78a      	b.n	801b85e <__ieee754_sqrt+0x66>
 801b948:	4610      	mov	r0, r2
 801b94a:	e7f0      	b.n	801b92e <__ieee754_sqrt+0x136>
 801b94c:	0049      	lsls	r1, r1, #1
 801b94e:	3201      	adds	r2, #1
 801b950:	e7ef      	b.n	801b932 <__ieee754_sqrt+0x13a>
 801b952:	4680      	mov	r8, r0
 801b954:	e7bd      	b.n	801b8d2 <__ieee754_sqrt+0xda>
 801b956:	bf00      	nop
 801b958:	7ff00000 	.word	0x7ff00000
 801b95c:	00000000 	.word	0x00000000

0801b960 <__kernel_cos>:
 801b960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	ec57 6b10 	vmov	r6, r7, d0
 801b968:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b96c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b970:	ed8d 1b00 	vstr	d1, [sp]
 801b974:	da07      	bge.n	801b986 <__kernel_cos+0x26>
 801b976:	ee10 0a10 	vmov	r0, s0
 801b97a:	4639      	mov	r1, r7
 801b97c:	f7e5 f90c 	bl	8000b98 <__aeabi_d2iz>
 801b980:	2800      	cmp	r0, #0
 801b982:	f000 8088 	beq.w	801ba96 <__kernel_cos+0x136>
 801b986:	4632      	mov	r2, r6
 801b988:	463b      	mov	r3, r7
 801b98a:	4630      	mov	r0, r6
 801b98c:	4639      	mov	r1, r7
 801b98e:	f7e4 fe53 	bl	8000638 <__aeabi_dmul>
 801b992:	4b51      	ldr	r3, [pc, #324]	; (801bad8 <__kernel_cos+0x178>)
 801b994:	2200      	movs	r2, #0
 801b996:	4604      	mov	r4, r0
 801b998:	460d      	mov	r5, r1
 801b99a:	f7e4 fe4d 	bl	8000638 <__aeabi_dmul>
 801b99e:	a340      	add	r3, pc, #256	; (adr r3, 801baa0 <__kernel_cos+0x140>)
 801b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9a4:	4682      	mov	sl, r0
 801b9a6:	468b      	mov	fp, r1
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	4629      	mov	r1, r5
 801b9ac:	f7e4 fe44 	bl	8000638 <__aeabi_dmul>
 801b9b0:	a33d      	add	r3, pc, #244	; (adr r3, 801baa8 <__kernel_cos+0x148>)
 801b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b6:	f7e4 fc89 	bl	80002cc <__adddf3>
 801b9ba:	4622      	mov	r2, r4
 801b9bc:	462b      	mov	r3, r5
 801b9be:	f7e4 fe3b 	bl	8000638 <__aeabi_dmul>
 801b9c2:	a33b      	add	r3, pc, #236	; (adr r3, 801bab0 <__kernel_cos+0x150>)
 801b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c8:	f7e4 fc7e 	bl	80002c8 <__aeabi_dsub>
 801b9cc:	4622      	mov	r2, r4
 801b9ce:	462b      	mov	r3, r5
 801b9d0:	f7e4 fe32 	bl	8000638 <__aeabi_dmul>
 801b9d4:	a338      	add	r3, pc, #224	; (adr r3, 801bab8 <__kernel_cos+0x158>)
 801b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9da:	f7e4 fc77 	bl	80002cc <__adddf3>
 801b9de:	4622      	mov	r2, r4
 801b9e0:	462b      	mov	r3, r5
 801b9e2:	f7e4 fe29 	bl	8000638 <__aeabi_dmul>
 801b9e6:	a336      	add	r3, pc, #216	; (adr r3, 801bac0 <__kernel_cos+0x160>)
 801b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ec:	f7e4 fc6c 	bl	80002c8 <__aeabi_dsub>
 801b9f0:	4622      	mov	r2, r4
 801b9f2:	462b      	mov	r3, r5
 801b9f4:	f7e4 fe20 	bl	8000638 <__aeabi_dmul>
 801b9f8:	a333      	add	r3, pc, #204	; (adr r3, 801bac8 <__kernel_cos+0x168>)
 801b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9fe:	f7e4 fc65 	bl	80002cc <__adddf3>
 801ba02:	4622      	mov	r2, r4
 801ba04:	462b      	mov	r3, r5
 801ba06:	f7e4 fe17 	bl	8000638 <__aeabi_dmul>
 801ba0a:	4622      	mov	r2, r4
 801ba0c:	462b      	mov	r3, r5
 801ba0e:	f7e4 fe13 	bl	8000638 <__aeabi_dmul>
 801ba12:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba16:	4604      	mov	r4, r0
 801ba18:	460d      	mov	r5, r1
 801ba1a:	4630      	mov	r0, r6
 801ba1c:	4639      	mov	r1, r7
 801ba1e:	f7e4 fe0b 	bl	8000638 <__aeabi_dmul>
 801ba22:	460b      	mov	r3, r1
 801ba24:	4602      	mov	r2, r0
 801ba26:	4629      	mov	r1, r5
 801ba28:	4620      	mov	r0, r4
 801ba2a:	f7e4 fc4d 	bl	80002c8 <__aeabi_dsub>
 801ba2e:	4b2b      	ldr	r3, [pc, #172]	; (801badc <__kernel_cos+0x17c>)
 801ba30:	4598      	cmp	r8, r3
 801ba32:	4606      	mov	r6, r0
 801ba34:	460f      	mov	r7, r1
 801ba36:	dc10      	bgt.n	801ba5a <__kernel_cos+0xfa>
 801ba38:	4602      	mov	r2, r0
 801ba3a:	460b      	mov	r3, r1
 801ba3c:	4650      	mov	r0, sl
 801ba3e:	4659      	mov	r1, fp
 801ba40:	f7e4 fc42 	bl	80002c8 <__aeabi_dsub>
 801ba44:	460b      	mov	r3, r1
 801ba46:	4926      	ldr	r1, [pc, #152]	; (801bae0 <__kernel_cos+0x180>)
 801ba48:	4602      	mov	r2, r0
 801ba4a:	2000      	movs	r0, #0
 801ba4c:	f7e4 fc3c 	bl	80002c8 <__aeabi_dsub>
 801ba50:	ec41 0b10 	vmov	d0, r0, r1
 801ba54:	b003      	add	sp, #12
 801ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba5a:	4b22      	ldr	r3, [pc, #136]	; (801bae4 <__kernel_cos+0x184>)
 801ba5c:	4920      	ldr	r1, [pc, #128]	; (801bae0 <__kernel_cos+0x180>)
 801ba5e:	4598      	cmp	r8, r3
 801ba60:	bfcc      	ite	gt
 801ba62:	4d21      	ldrgt	r5, [pc, #132]	; (801bae8 <__kernel_cos+0x188>)
 801ba64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801ba68:	2400      	movs	r4, #0
 801ba6a:	4622      	mov	r2, r4
 801ba6c:	462b      	mov	r3, r5
 801ba6e:	2000      	movs	r0, #0
 801ba70:	f7e4 fc2a 	bl	80002c8 <__aeabi_dsub>
 801ba74:	4622      	mov	r2, r4
 801ba76:	4680      	mov	r8, r0
 801ba78:	4689      	mov	r9, r1
 801ba7a:	462b      	mov	r3, r5
 801ba7c:	4650      	mov	r0, sl
 801ba7e:	4659      	mov	r1, fp
 801ba80:	f7e4 fc22 	bl	80002c8 <__aeabi_dsub>
 801ba84:	4632      	mov	r2, r6
 801ba86:	463b      	mov	r3, r7
 801ba88:	f7e4 fc1e 	bl	80002c8 <__aeabi_dsub>
 801ba8c:	4602      	mov	r2, r0
 801ba8e:	460b      	mov	r3, r1
 801ba90:	4640      	mov	r0, r8
 801ba92:	4649      	mov	r1, r9
 801ba94:	e7da      	b.n	801ba4c <__kernel_cos+0xec>
 801ba96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801bad0 <__kernel_cos+0x170>
 801ba9a:	e7db      	b.n	801ba54 <__kernel_cos+0xf4>
 801ba9c:	f3af 8000 	nop.w
 801baa0:	be8838d4 	.word	0xbe8838d4
 801baa4:	bda8fae9 	.word	0xbda8fae9
 801baa8:	bdb4b1c4 	.word	0xbdb4b1c4
 801baac:	3e21ee9e 	.word	0x3e21ee9e
 801bab0:	809c52ad 	.word	0x809c52ad
 801bab4:	3e927e4f 	.word	0x3e927e4f
 801bab8:	19cb1590 	.word	0x19cb1590
 801babc:	3efa01a0 	.word	0x3efa01a0
 801bac0:	16c15177 	.word	0x16c15177
 801bac4:	3f56c16c 	.word	0x3f56c16c
 801bac8:	5555554c 	.word	0x5555554c
 801bacc:	3fa55555 	.word	0x3fa55555
 801bad0:	00000000 	.word	0x00000000
 801bad4:	3ff00000 	.word	0x3ff00000
 801bad8:	3fe00000 	.word	0x3fe00000
 801badc:	3fd33332 	.word	0x3fd33332
 801bae0:	3ff00000 	.word	0x3ff00000
 801bae4:	3fe90000 	.word	0x3fe90000
 801bae8:	3fd20000 	.word	0x3fd20000
 801baec:	00000000 	.word	0x00000000

0801baf0 <__kernel_rem_pio2>:
 801baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baf4:	ed2d 8b02 	vpush	{d8}
 801baf8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801bafc:	f112 0f14 	cmn.w	r2, #20
 801bb00:	9308      	str	r3, [sp, #32]
 801bb02:	9101      	str	r1, [sp, #4]
 801bb04:	4bc4      	ldr	r3, [pc, #784]	; (801be18 <__kernel_rem_pio2+0x328>)
 801bb06:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801bb08:	900b      	str	r0, [sp, #44]	; 0x2c
 801bb0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bb0e:	9302      	str	r3, [sp, #8]
 801bb10:	9b08      	ldr	r3, [sp, #32]
 801bb12:	f103 33ff 	add.w	r3, r3, #4294967295
 801bb16:	bfa8      	it	ge
 801bb18:	1ed4      	subge	r4, r2, #3
 801bb1a:	9306      	str	r3, [sp, #24]
 801bb1c:	bfb2      	itee	lt
 801bb1e:	2400      	movlt	r4, #0
 801bb20:	2318      	movge	r3, #24
 801bb22:	fb94 f4f3 	sdivge	r4, r4, r3
 801bb26:	f06f 0317 	mvn.w	r3, #23
 801bb2a:	fb04 3303 	mla	r3, r4, r3, r3
 801bb2e:	eb03 0a02 	add.w	sl, r3, r2
 801bb32:	9b02      	ldr	r3, [sp, #8]
 801bb34:	9a06      	ldr	r2, [sp, #24]
 801bb36:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801be08 <__kernel_rem_pio2+0x318>
 801bb3a:	eb03 0802 	add.w	r8, r3, r2
 801bb3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801bb40:	1aa7      	subs	r7, r4, r2
 801bb42:	ae22      	add	r6, sp, #136	; 0x88
 801bb44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801bb48:	2500      	movs	r5, #0
 801bb4a:	4545      	cmp	r5, r8
 801bb4c:	dd13      	ble.n	801bb76 <__kernel_rem_pio2+0x86>
 801bb4e:	9b08      	ldr	r3, [sp, #32]
 801bb50:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801be08 <__kernel_rem_pio2+0x318>
 801bb54:	aa22      	add	r2, sp, #136	; 0x88
 801bb56:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801bb5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801bb5e:	f04f 0800 	mov.w	r8, #0
 801bb62:	9b02      	ldr	r3, [sp, #8]
 801bb64:	4598      	cmp	r8, r3
 801bb66:	dc2f      	bgt.n	801bbc8 <__kernel_rem_pio2+0xd8>
 801bb68:	ed8d 8b04 	vstr	d8, [sp, #16]
 801bb6c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801bb70:	462f      	mov	r7, r5
 801bb72:	2600      	movs	r6, #0
 801bb74:	e01b      	b.n	801bbae <__kernel_rem_pio2+0xbe>
 801bb76:	42ef      	cmn	r7, r5
 801bb78:	d407      	bmi.n	801bb8a <__kernel_rem_pio2+0x9a>
 801bb7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801bb7e:	f7e4 fcf1 	bl	8000564 <__aeabi_i2d>
 801bb82:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bb86:	3501      	adds	r5, #1
 801bb88:	e7df      	b.n	801bb4a <__kernel_rem_pio2+0x5a>
 801bb8a:	ec51 0b18 	vmov	r0, r1, d8
 801bb8e:	e7f8      	b.n	801bb82 <__kernel_rem_pio2+0x92>
 801bb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801bb98:	f7e4 fd4e 	bl	8000638 <__aeabi_dmul>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	460b      	mov	r3, r1
 801bba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bba4:	f7e4 fb92 	bl	80002cc <__adddf3>
 801bba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bbac:	3601      	adds	r6, #1
 801bbae:	9b06      	ldr	r3, [sp, #24]
 801bbb0:	429e      	cmp	r6, r3
 801bbb2:	f1a7 0708 	sub.w	r7, r7, #8
 801bbb6:	ddeb      	ble.n	801bb90 <__kernel_rem_pio2+0xa0>
 801bbb8:	ed9d 7b04 	vldr	d7, [sp, #16]
 801bbbc:	f108 0801 	add.w	r8, r8, #1
 801bbc0:	ecab 7b02 	vstmia	fp!, {d7}
 801bbc4:	3508      	adds	r5, #8
 801bbc6:	e7cc      	b.n	801bb62 <__kernel_rem_pio2+0x72>
 801bbc8:	9b02      	ldr	r3, [sp, #8]
 801bbca:	aa0e      	add	r2, sp, #56	; 0x38
 801bbcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bbd0:	930d      	str	r3, [sp, #52]	; 0x34
 801bbd2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801bbd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bbd8:	9c02      	ldr	r4, [sp, #8]
 801bbda:	930c      	str	r3, [sp, #48]	; 0x30
 801bbdc:	00e3      	lsls	r3, r4, #3
 801bbde:	930a      	str	r3, [sp, #40]	; 0x28
 801bbe0:	ab9a      	add	r3, sp, #616	; 0x268
 801bbe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bbe6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801bbea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801bbee:	ab72      	add	r3, sp, #456	; 0x1c8
 801bbf0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801bbf4:	46c3      	mov	fp, r8
 801bbf6:	46a1      	mov	r9, r4
 801bbf8:	f1b9 0f00 	cmp.w	r9, #0
 801bbfc:	f1a5 0508 	sub.w	r5, r5, #8
 801bc00:	dc77      	bgt.n	801bcf2 <__kernel_rem_pio2+0x202>
 801bc02:	ec47 6b10 	vmov	d0, r6, r7
 801bc06:	4650      	mov	r0, sl
 801bc08:	f000 fe52 	bl	801c8b0 <scalbn>
 801bc0c:	ec57 6b10 	vmov	r6, r7, d0
 801bc10:	2200      	movs	r2, #0
 801bc12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bc16:	ee10 0a10 	vmov	r0, s0
 801bc1a:	4639      	mov	r1, r7
 801bc1c:	f7e4 fd0c 	bl	8000638 <__aeabi_dmul>
 801bc20:	ec41 0b10 	vmov	d0, r0, r1
 801bc24:	f000 fdc4 	bl	801c7b0 <floor>
 801bc28:	4b7c      	ldr	r3, [pc, #496]	; (801be1c <__kernel_rem_pio2+0x32c>)
 801bc2a:	ec51 0b10 	vmov	r0, r1, d0
 801bc2e:	2200      	movs	r2, #0
 801bc30:	f7e4 fd02 	bl	8000638 <__aeabi_dmul>
 801bc34:	4602      	mov	r2, r0
 801bc36:	460b      	mov	r3, r1
 801bc38:	4630      	mov	r0, r6
 801bc3a:	4639      	mov	r1, r7
 801bc3c:	f7e4 fb44 	bl	80002c8 <__aeabi_dsub>
 801bc40:	460f      	mov	r7, r1
 801bc42:	4606      	mov	r6, r0
 801bc44:	f7e4 ffa8 	bl	8000b98 <__aeabi_d2iz>
 801bc48:	9004      	str	r0, [sp, #16]
 801bc4a:	f7e4 fc8b 	bl	8000564 <__aeabi_i2d>
 801bc4e:	4602      	mov	r2, r0
 801bc50:	460b      	mov	r3, r1
 801bc52:	4630      	mov	r0, r6
 801bc54:	4639      	mov	r1, r7
 801bc56:	f7e4 fb37 	bl	80002c8 <__aeabi_dsub>
 801bc5a:	f1ba 0f00 	cmp.w	sl, #0
 801bc5e:	4606      	mov	r6, r0
 801bc60:	460f      	mov	r7, r1
 801bc62:	dd6d      	ble.n	801bd40 <__kernel_rem_pio2+0x250>
 801bc64:	1e62      	subs	r2, r4, #1
 801bc66:	ab0e      	add	r3, sp, #56	; 0x38
 801bc68:	9d04      	ldr	r5, [sp, #16]
 801bc6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bc6e:	f1ca 0118 	rsb	r1, sl, #24
 801bc72:	fa40 f301 	asr.w	r3, r0, r1
 801bc76:	441d      	add	r5, r3
 801bc78:	408b      	lsls	r3, r1
 801bc7a:	1ac0      	subs	r0, r0, r3
 801bc7c:	ab0e      	add	r3, sp, #56	; 0x38
 801bc7e:	9504      	str	r5, [sp, #16]
 801bc80:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801bc84:	f1ca 0317 	rsb	r3, sl, #23
 801bc88:	fa40 fb03 	asr.w	fp, r0, r3
 801bc8c:	f1bb 0f00 	cmp.w	fp, #0
 801bc90:	dd65      	ble.n	801bd5e <__kernel_rem_pio2+0x26e>
 801bc92:	9b04      	ldr	r3, [sp, #16]
 801bc94:	2200      	movs	r2, #0
 801bc96:	3301      	adds	r3, #1
 801bc98:	9304      	str	r3, [sp, #16]
 801bc9a:	4615      	mov	r5, r2
 801bc9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bca0:	4294      	cmp	r4, r2
 801bca2:	f300 809c 	bgt.w	801bdde <__kernel_rem_pio2+0x2ee>
 801bca6:	f1ba 0f00 	cmp.w	sl, #0
 801bcaa:	dd07      	ble.n	801bcbc <__kernel_rem_pio2+0x1cc>
 801bcac:	f1ba 0f01 	cmp.w	sl, #1
 801bcb0:	f000 80c0 	beq.w	801be34 <__kernel_rem_pio2+0x344>
 801bcb4:	f1ba 0f02 	cmp.w	sl, #2
 801bcb8:	f000 80c6 	beq.w	801be48 <__kernel_rem_pio2+0x358>
 801bcbc:	f1bb 0f02 	cmp.w	fp, #2
 801bcc0:	d14d      	bne.n	801bd5e <__kernel_rem_pio2+0x26e>
 801bcc2:	4632      	mov	r2, r6
 801bcc4:	463b      	mov	r3, r7
 801bcc6:	4956      	ldr	r1, [pc, #344]	; (801be20 <__kernel_rem_pio2+0x330>)
 801bcc8:	2000      	movs	r0, #0
 801bcca:	f7e4 fafd 	bl	80002c8 <__aeabi_dsub>
 801bcce:	4606      	mov	r6, r0
 801bcd0:	460f      	mov	r7, r1
 801bcd2:	2d00      	cmp	r5, #0
 801bcd4:	d043      	beq.n	801bd5e <__kernel_rem_pio2+0x26e>
 801bcd6:	4650      	mov	r0, sl
 801bcd8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801be10 <__kernel_rem_pio2+0x320>
 801bcdc:	f000 fde8 	bl	801c8b0 <scalbn>
 801bce0:	4630      	mov	r0, r6
 801bce2:	4639      	mov	r1, r7
 801bce4:	ec53 2b10 	vmov	r2, r3, d0
 801bce8:	f7e4 faee 	bl	80002c8 <__aeabi_dsub>
 801bcec:	4606      	mov	r6, r0
 801bcee:	460f      	mov	r7, r1
 801bcf0:	e035      	b.n	801bd5e <__kernel_rem_pio2+0x26e>
 801bcf2:	4b4c      	ldr	r3, [pc, #304]	; (801be24 <__kernel_rem_pio2+0x334>)
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	4630      	mov	r0, r6
 801bcf8:	4639      	mov	r1, r7
 801bcfa:	f7e4 fc9d 	bl	8000638 <__aeabi_dmul>
 801bcfe:	f7e4 ff4b 	bl	8000b98 <__aeabi_d2iz>
 801bd02:	f7e4 fc2f 	bl	8000564 <__aeabi_i2d>
 801bd06:	4602      	mov	r2, r0
 801bd08:	460b      	mov	r3, r1
 801bd0a:	ec43 2b18 	vmov	d8, r2, r3
 801bd0e:	4b46      	ldr	r3, [pc, #280]	; (801be28 <__kernel_rem_pio2+0x338>)
 801bd10:	2200      	movs	r2, #0
 801bd12:	f7e4 fc91 	bl	8000638 <__aeabi_dmul>
 801bd16:	4602      	mov	r2, r0
 801bd18:	460b      	mov	r3, r1
 801bd1a:	4630      	mov	r0, r6
 801bd1c:	4639      	mov	r1, r7
 801bd1e:	f7e4 fad3 	bl	80002c8 <__aeabi_dsub>
 801bd22:	f7e4 ff39 	bl	8000b98 <__aeabi_d2iz>
 801bd26:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd2a:	f84b 0b04 	str.w	r0, [fp], #4
 801bd2e:	ec51 0b18 	vmov	r0, r1, d8
 801bd32:	f7e4 facb 	bl	80002cc <__adddf3>
 801bd36:	f109 39ff 	add.w	r9, r9, #4294967295
 801bd3a:	4606      	mov	r6, r0
 801bd3c:	460f      	mov	r7, r1
 801bd3e:	e75b      	b.n	801bbf8 <__kernel_rem_pio2+0x108>
 801bd40:	d106      	bne.n	801bd50 <__kernel_rem_pio2+0x260>
 801bd42:	1e63      	subs	r3, r4, #1
 801bd44:	aa0e      	add	r2, sp, #56	; 0x38
 801bd46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd4a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801bd4e:	e79d      	b.n	801bc8c <__kernel_rem_pio2+0x19c>
 801bd50:	4b36      	ldr	r3, [pc, #216]	; (801be2c <__kernel_rem_pio2+0x33c>)
 801bd52:	2200      	movs	r2, #0
 801bd54:	f7e4 fef6 	bl	8000b44 <__aeabi_dcmpge>
 801bd58:	2800      	cmp	r0, #0
 801bd5a:	d13d      	bne.n	801bdd8 <__kernel_rem_pio2+0x2e8>
 801bd5c:	4683      	mov	fp, r0
 801bd5e:	2200      	movs	r2, #0
 801bd60:	2300      	movs	r3, #0
 801bd62:	4630      	mov	r0, r6
 801bd64:	4639      	mov	r1, r7
 801bd66:	f7e4 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	f000 80c0 	beq.w	801bef0 <__kernel_rem_pio2+0x400>
 801bd70:	1e65      	subs	r5, r4, #1
 801bd72:	462b      	mov	r3, r5
 801bd74:	2200      	movs	r2, #0
 801bd76:	9902      	ldr	r1, [sp, #8]
 801bd78:	428b      	cmp	r3, r1
 801bd7a:	da6c      	bge.n	801be56 <__kernel_rem_pio2+0x366>
 801bd7c:	2a00      	cmp	r2, #0
 801bd7e:	f000 8089 	beq.w	801be94 <__kernel_rem_pio2+0x3a4>
 801bd82:	ab0e      	add	r3, sp, #56	; 0x38
 801bd84:	f1aa 0a18 	sub.w	sl, sl, #24
 801bd88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	f000 80ad 	beq.w	801beec <__kernel_rem_pio2+0x3fc>
 801bd92:	4650      	mov	r0, sl
 801bd94:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801be10 <__kernel_rem_pio2+0x320>
 801bd98:	f000 fd8a 	bl	801c8b0 <scalbn>
 801bd9c:	ab9a      	add	r3, sp, #616	; 0x268
 801bd9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bda2:	ec57 6b10 	vmov	r6, r7, d0
 801bda6:	00ec      	lsls	r4, r5, #3
 801bda8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801bdac:	46aa      	mov	sl, r5
 801bdae:	f1ba 0f00 	cmp.w	sl, #0
 801bdb2:	f280 80d6 	bge.w	801bf62 <__kernel_rem_pio2+0x472>
 801bdb6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801be08 <__kernel_rem_pio2+0x318>
 801bdba:	462e      	mov	r6, r5
 801bdbc:	2e00      	cmp	r6, #0
 801bdbe:	f2c0 8104 	blt.w	801bfca <__kernel_rem_pio2+0x4da>
 801bdc2:	ab72      	add	r3, sp, #456	; 0x1c8
 801bdc4:	ed8d 8b06 	vstr	d8, [sp, #24]
 801bdc8:	f8df a064 	ldr.w	sl, [pc, #100]	; 801be30 <__kernel_rem_pio2+0x340>
 801bdcc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801bdd0:	f04f 0800 	mov.w	r8, #0
 801bdd4:	1baf      	subs	r7, r5, r6
 801bdd6:	e0ea      	b.n	801bfae <__kernel_rem_pio2+0x4be>
 801bdd8:	f04f 0b02 	mov.w	fp, #2
 801bddc:	e759      	b.n	801bc92 <__kernel_rem_pio2+0x1a2>
 801bdde:	f8d8 3000 	ldr.w	r3, [r8]
 801bde2:	b955      	cbnz	r5, 801bdfa <__kernel_rem_pio2+0x30a>
 801bde4:	b123      	cbz	r3, 801bdf0 <__kernel_rem_pio2+0x300>
 801bde6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bdea:	f8c8 3000 	str.w	r3, [r8]
 801bdee:	2301      	movs	r3, #1
 801bdf0:	3201      	adds	r2, #1
 801bdf2:	f108 0804 	add.w	r8, r8, #4
 801bdf6:	461d      	mov	r5, r3
 801bdf8:	e752      	b.n	801bca0 <__kernel_rem_pio2+0x1b0>
 801bdfa:	1acb      	subs	r3, r1, r3
 801bdfc:	f8c8 3000 	str.w	r3, [r8]
 801be00:	462b      	mov	r3, r5
 801be02:	e7f5      	b.n	801bdf0 <__kernel_rem_pio2+0x300>
 801be04:	f3af 8000 	nop.w
	...
 801be14:	3ff00000 	.word	0x3ff00000
 801be18:	080738e0 	.word	0x080738e0
 801be1c:	40200000 	.word	0x40200000
 801be20:	3ff00000 	.word	0x3ff00000
 801be24:	3e700000 	.word	0x3e700000
 801be28:	41700000 	.word	0x41700000
 801be2c:	3fe00000 	.word	0x3fe00000
 801be30:	080738a0 	.word	0x080738a0
 801be34:	1e62      	subs	r2, r4, #1
 801be36:	ab0e      	add	r3, sp, #56	; 0x38
 801be38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801be40:	a90e      	add	r1, sp, #56	; 0x38
 801be42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801be46:	e739      	b.n	801bcbc <__kernel_rem_pio2+0x1cc>
 801be48:	1e62      	subs	r2, r4, #1
 801be4a:	ab0e      	add	r3, sp, #56	; 0x38
 801be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801be54:	e7f4      	b.n	801be40 <__kernel_rem_pio2+0x350>
 801be56:	a90e      	add	r1, sp, #56	; 0x38
 801be58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801be5c:	3b01      	subs	r3, #1
 801be5e:	430a      	orrs	r2, r1
 801be60:	e789      	b.n	801bd76 <__kernel_rem_pio2+0x286>
 801be62:	3301      	adds	r3, #1
 801be64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801be68:	2900      	cmp	r1, #0
 801be6a:	d0fa      	beq.n	801be62 <__kernel_rem_pio2+0x372>
 801be6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801be72:	446a      	add	r2, sp
 801be74:	3a98      	subs	r2, #152	; 0x98
 801be76:	920a      	str	r2, [sp, #40]	; 0x28
 801be78:	9a08      	ldr	r2, [sp, #32]
 801be7a:	18e3      	adds	r3, r4, r3
 801be7c:	18a5      	adds	r5, r4, r2
 801be7e:	aa22      	add	r2, sp, #136	; 0x88
 801be80:	f104 0801 	add.w	r8, r4, #1
 801be84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801be88:	9304      	str	r3, [sp, #16]
 801be8a:	9b04      	ldr	r3, [sp, #16]
 801be8c:	4543      	cmp	r3, r8
 801be8e:	da04      	bge.n	801be9a <__kernel_rem_pio2+0x3aa>
 801be90:	461c      	mov	r4, r3
 801be92:	e6a3      	b.n	801bbdc <__kernel_rem_pio2+0xec>
 801be94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801be96:	2301      	movs	r3, #1
 801be98:	e7e4      	b.n	801be64 <__kernel_rem_pio2+0x374>
 801be9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bea0:	f7e4 fb60 	bl	8000564 <__aeabi_i2d>
 801bea4:	e8e5 0102 	strd	r0, r1, [r5], #8
 801bea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801beaa:	46ab      	mov	fp, r5
 801beac:	461c      	mov	r4, r3
 801beae:	f04f 0900 	mov.w	r9, #0
 801beb2:	2600      	movs	r6, #0
 801beb4:	2700      	movs	r7, #0
 801beb6:	9b06      	ldr	r3, [sp, #24]
 801beb8:	4599      	cmp	r9, r3
 801beba:	dd06      	ble.n	801beca <__kernel_rem_pio2+0x3da>
 801bebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bebe:	e8e3 6702 	strd	r6, r7, [r3], #8
 801bec2:	f108 0801 	add.w	r8, r8, #1
 801bec6:	930a      	str	r3, [sp, #40]	; 0x28
 801bec8:	e7df      	b.n	801be8a <__kernel_rem_pio2+0x39a>
 801beca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bece:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bed2:	f7e4 fbb1 	bl	8000638 <__aeabi_dmul>
 801bed6:	4602      	mov	r2, r0
 801bed8:	460b      	mov	r3, r1
 801beda:	4630      	mov	r0, r6
 801bedc:	4639      	mov	r1, r7
 801bede:	f7e4 f9f5 	bl	80002cc <__adddf3>
 801bee2:	f109 0901 	add.w	r9, r9, #1
 801bee6:	4606      	mov	r6, r0
 801bee8:	460f      	mov	r7, r1
 801beea:	e7e4      	b.n	801beb6 <__kernel_rem_pio2+0x3c6>
 801beec:	3d01      	subs	r5, #1
 801beee:	e748      	b.n	801bd82 <__kernel_rem_pio2+0x292>
 801bef0:	ec47 6b10 	vmov	d0, r6, r7
 801bef4:	f1ca 0000 	rsb	r0, sl, #0
 801bef8:	f000 fcda 	bl	801c8b0 <scalbn>
 801befc:	ec57 6b10 	vmov	r6, r7, d0
 801bf00:	4ba0      	ldr	r3, [pc, #640]	; (801c184 <__kernel_rem_pio2+0x694>)
 801bf02:	ee10 0a10 	vmov	r0, s0
 801bf06:	2200      	movs	r2, #0
 801bf08:	4639      	mov	r1, r7
 801bf0a:	f7e4 fe1b 	bl	8000b44 <__aeabi_dcmpge>
 801bf0e:	b1f8      	cbz	r0, 801bf50 <__kernel_rem_pio2+0x460>
 801bf10:	4b9d      	ldr	r3, [pc, #628]	; (801c188 <__kernel_rem_pio2+0x698>)
 801bf12:	2200      	movs	r2, #0
 801bf14:	4630      	mov	r0, r6
 801bf16:	4639      	mov	r1, r7
 801bf18:	f7e4 fb8e 	bl	8000638 <__aeabi_dmul>
 801bf1c:	f7e4 fe3c 	bl	8000b98 <__aeabi_d2iz>
 801bf20:	4680      	mov	r8, r0
 801bf22:	f7e4 fb1f 	bl	8000564 <__aeabi_i2d>
 801bf26:	4b97      	ldr	r3, [pc, #604]	; (801c184 <__kernel_rem_pio2+0x694>)
 801bf28:	2200      	movs	r2, #0
 801bf2a:	f7e4 fb85 	bl	8000638 <__aeabi_dmul>
 801bf2e:	460b      	mov	r3, r1
 801bf30:	4602      	mov	r2, r0
 801bf32:	4639      	mov	r1, r7
 801bf34:	4630      	mov	r0, r6
 801bf36:	f7e4 f9c7 	bl	80002c8 <__aeabi_dsub>
 801bf3a:	f7e4 fe2d 	bl	8000b98 <__aeabi_d2iz>
 801bf3e:	1c65      	adds	r5, r4, #1
 801bf40:	ab0e      	add	r3, sp, #56	; 0x38
 801bf42:	f10a 0a18 	add.w	sl, sl, #24
 801bf46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bf4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801bf4e:	e720      	b.n	801bd92 <__kernel_rem_pio2+0x2a2>
 801bf50:	4630      	mov	r0, r6
 801bf52:	4639      	mov	r1, r7
 801bf54:	f7e4 fe20 	bl	8000b98 <__aeabi_d2iz>
 801bf58:	ab0e      	add	r3, sp, #56	; 0x38
 801bf5a:	4625      	mov	r5, r4
 801bf5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bf60:	e717      	b.n	801bd92 <__kernel_rem_pio2+0x2a2>
 801bf62:	ab0e      	add	r3, sp, #56	; 0x38
 801bf64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801bf68:	f7e4 fafc 	bl	8000564 <__aeabi_i2d>
 801bf6c:	4632      	mov	r2, r6
 801bf6e:	463b      	mov	r3, r7
 801bf70:	f7e4 fb62 	bl	8000638 <__aeabi_dmul>
 801bf74:	4b84      	ldr	r3, [pc, #528]	; (801c188 <__kernel_rem_pio2+0x698>)
 801bf76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	4630      	mov	r0, r6
 801bf7e:	4639      	mov	r1, r7
 801bf80:	f7e4 fb5a 	bl	8000638 <__aeabi_dmul>
 801bf84:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf88:	4606      	mov	r6, r0
 801bf8a:	460f      	mov	r7, r1
 801bf8c:	e70f      	b.n	801bdae <__kernel_rem_pio2+0x2be>
 801bf8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801bf92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801bf96:	f7e4 fb4f 	bl	8000638 <__aeabi_dmul>
 801bf9a:	4602      	mov	r2, r0
 801bf9c:	460b      	mov	r3, r1
 801bf9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bfa2:	f7e4 f993 	bl	80002cc <__adddf3>
 801bfa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bfaa:	f108 0801 	add.w	r8, r8, #1
 801bfae:	9b02      	ldr	r3, [sp, #8]
 801bfb0:	4598      	cmp	r8, r3
 801bfb2:	dc01      	bgt.n	801bfb8 <__kernel_rem_pio2+0x4c8>
 801bfb4:	45b8      	cmp	r8, r7
 801bfb6:	ddea      	ble.n	801bf8e <__kernel_rem_pio2+0x49e>
 801bfb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 801bfbc:	ab4a      	add	r3, sp, #296	; 0x128
 801bfbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801bfc2:	ed87 7b00 	vstr	d7, [r7]
 801bfc6:	3e01      	subs	r6, #1
 801bfc8:	e6f8      	b.n	801bdbc <__kernel_rem_pio2+0x2cc>
 801bfca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801bfcc:	2b02      	cmp	r3, #2
 801bfce:	dc0b      	bgt.n	801bfe8 <__kernel_rem_pio2+0x4f8>
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	dc35      	bgt.n	801c040 <__kernel_rem_pio2+0x550>
 801bfd4:	d059      	beq.n	801c08a <__kernel_rem_pio2+0x59a>
 801bfd6:	9b04      	ldr	r3, [sp, #16]
 801bfd8:	f003 0007 	and.w	r0, r3, #7
 801bfdc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801bfe0:	ecbd 8b02 	vpop	{d8}
 801bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfe8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801bfea:	2b03      	cmp	r3, #3
 801bfec:	d1f3      	bne.n	801bfd6 <__kernel_rem_pio2+0x4e6>
 801bfee:	ab4a      	add	r3, sp, #296	; 0x128
 801bff0:	4423      	add	r3, r4
 801bff2:	9306      	str	r3, [sp, #24]
 801bff4:	461c      	mov	r4, r3
 801bff6:	469a      	mov	sl, r3
 801bff8:	9502      	str	r5, [sp, #8]
 801bffa:	9b02      	ldr	r3, [sp, #8]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	f1aa 0a08 	sub.w	sl, sl, #8
 801c002:	dc6b      	bgt.n	801c0dc <__kernel_rem_pio2+0x5ec>
 801c004:	46aa      	mov	sl, r5
 801c006:	f1ba 0f01 	cmp.w	sl, #1
 801c00a:	f1a4 0408 	sub.w	r4, r4, #8
 801c00e:	f300 8085 	bgt.w	801c11c <__kernel_rem_pio2+0x62c>
 801c012:	9c06      	ldr	r4, [sp, #24]
 801c014:	2000      	movs	r0, #0
 801c016:	3408      	adds	r4, #8
 801c018:	2100      	movs	r1, #0
 801c01a:	2d01      	cmp	r5, #1
 801c01c:	f300 809d 	bgt.w	801c15a <__kernel_rem_pio2+0x66a>
 801c020:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801c024:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801c028:	f1bb 0f00 	cmp.w	fp, #0
 801c02c:	f040 809b 	bne.w	801c166 <__kernel_rem_pio2+0x676>
 801c030:	9b01      	ldr	r3, [sp, #4]
 801c032:	e9c3 5600 	strd	r5, r6, [r3]
 801c036:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801c03a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c03e:	e7ca      	b.n	801bfd6 <__kernel_rem_pio2+0x4e6>
 801c040:	3408      	adds	r4, #8
 801c042:	ab4a      	add	r3, sp, #296	; 0x128
 801c044:	441c      	add	r4, r3
 801c046:	462e      	mov	r6, r5
 801c048:	2000      	movs	r0, #0
 801c04a:	2100      	movs	r1, #0
 801c04c:	2e00      	cmp	r6, #0
 801c04e:	da36      	bge.n	801c0be <__kernel_rem_pio2+0x5ce>
 801c050:	f1bb 0f00 	cmp.w	fp, #0
 801c054:	d039      	beq.n	801c0ca <__kernel_rem_pio2+0x5da>
 801c056:	4602      	mov	r2, r0
 801c058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c05c:	9c01      	ldr	r4, [sp, #4]
 801c05e:	e9c4 2300 	strd	r2, r3, [r4]
 801c062:	4602      	mov	r2, r0
 801c064:	460b      	mov	r3, r1
 801c066:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801c06a:	f7e4 f92d 	bl	80002c8 <__aeabi_dsub>
 801c06e:	ae4c      	add	r6, sp, #304	; 0x130
 801c070:	2401      	movs	r4, #1
 801c072:	42a5      	cmp	r5, r4
 801c074:	da2c      	bge.n	801c0d0 <__kernel_rem_pio2+0x5e0>
 801c076:	f1bb 0f00 	cmp.w	fp, #0
 801c07a:	d002      	beq.n	801c082 <__kernel_rem_pio2+0x592>
 801c07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c080:	4619      	mov	r1, r3
 801c082:	9b01      	ldr	r3, [sp, #4]
 801c084:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c088:	e7a5      	b.n	801bfd6 <__kernel_rem_pio2+0x4e6>
 801c08a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801c08e:	eb0d 0403 	add.w	r4, sp, r3
 801c092:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801c096:	2000      	movs	r0, #0
 801c098:	2100      	movs	r1, #0
 801c09a:	2d00      	cmp	r5, #0
 801c09c:	da09      	bge.n	801c0b2 <__kernel_rem_pio2+0x5c2>
 801c09e:	f1bb 0f00 	cmp.w	fp, #0
 801c0a2:	d002      	beq.n	801c0aa <__kernel_rem_pio2+0x5ba>
 801c0a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	9b01      	ldr	r3, [sp, #4]
 801c0ac:	e9c3 0100 	strd	r0, r1, [r3]
 801c0b0:	e791      	b.n	801bfd6 <__kernel_rem_pio2+0x4e6>
 801c0b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c0b6:	f7e4 f909 	bl	80002cc <__adddf3>
 801c0ba:	3d01      	subs	r5, #1
 801c0bc:	e7ed      	b.n	801c09a <__kernel_rem_pio2+0x5aa>
 801c0be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c0c2:	f7e4 f903 	bl	80002cc <__adddf3>
 801c0c6:	3e01      	subs	r6, #1
 801c0c8:	e7c0      	b.n	801c04c <__kernel_rem_pio2+0x55c>
 801c0ca:	4602      	mov	r2, r0
 801c0cc:	460b      	mov	r3, r1
 801c0ce:	e7c5      	b.n	801c05c <__kernel_rem_pio2+0x56c>
 801c0d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801c0d4:	f7e4 f8fa 	bl	80002cc <__adddf3>
 801c0d8:	3401      	adds	r4, #1
 801c0da:	e7ca      	b.n	801c072 <__kernel_rem_pio2+0x582>
 801c0dc:	e9da 8900 	ldrd	r8, r9, [sl]
 801c0e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c0e4:	9b02      	ldr	r3, [sp, #8]
 801c0e6:	3b01      	subs	r3, #1
 801c0e8:	9302      	str	r3, [sp, #8]
 801c0ea:	4632      	mov	r2, r6
 801c0ec:	463b      	mov	r3, r7
 801c0ee:	4640      	mov	r0, r8
 801c0f0:	4649      	mov	r1, r9
 801c0f2:	f7e4 f8eb 	bl	80002cc <__adddf3>
 801c0f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c0fa:	4602      	mov	r2, r0
 801c0fc:	460b      	mov	r3, r1
 801c0fe:	4640      	mov	r0, r8
 801c100:	4649      	mov	r1, r9
 801c102:	f7e4 f8e1 	bl	80002c8 <__aeabi_dsub>
 801c106:	4632      	mov	r2, r6
 801c108:	463b      	mov	r3, r7
 801c10a:	f7e4 f8df 	bl	80002cc <__adddf3>
 801c10e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c112:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c116:	ed8a 7b00 	vstr	d7, [sl]
 801c11a:	e76e      	b.n	801bffa <__kernel_rem_pio2+0x50a>
 801c11c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c120:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801c124:	4640      	mov	r0, r8
 801c126:	4632      	mov	r2, r6
 801c128:	463b      	mov	r3, r7
 801c12a:	4649      	mov	r1, r9
 801c12c:	f7e4 f8ce 	bl	80002cc <__adddf3>
 801c130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c134:	4602      	mov	r2, r0
 801c136:	460b      	mov	r3, r1
 801c138:	4640      	mov	r0, r8
 801c13a:	4649      	mov	r1, r9
 801c13c:	f7e4 f8c4 	bl	80002c8 <__aeabi_dsub>
 801c140:	4632      	mov	r2, r6
 801c142:	463b      	mov	r3, r7
 801c144:	f7e4 f8c2 	bl	80002cc <__adddf3>
 801c148:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c14c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c150:	ed84 7b00 	vstr	d7, [r4]
 801c154:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c158:	e755      	b.n	801c006 <__kernel_rem_pio2+0x516>
 801c15a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c15e:	f7e4 f8b5 	bl	80002cc <__adddf3>
 801c162:	3d01      	subs	r5, #1
 801c164:	e759      	b.n	801c01a <__kernel_rem_pio2+0x52a>
 801c166:	9b01      	ldr	r3, [sp, #4]
 801c168:	9a01      	ldr	r2, [sp, #4]
 801c16a:	601d      	str	r5, [r3, #0]
 801c16c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801c170:	605c      	str	r4, [r3, #4]
 801c172:	609f      	str	r7, [r3, #8]
 801c174:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801c178:	60d3      	str	r3, [r2, #12]
 801c17a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c17e:	6110      	str	r0, [r2, #16]
 801c180:	6153      	str	r3, [r2, #20]
 801c182:	e728      	b.n	801bfd6 <__kernel_rem_pio2+0x4e6>
 801c184:	41700000 	.word	0x41700000
 801c188:	3e700000 	.word	0x3e700000
 801c18c:	00000000 	.word	0x00000000

0801c190 <__kernel_sin>:
 801c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c194:	ed2d 8b04 	vpush	{d8-d9}
 801c198:	eeb0 8a41 	vmov.f32	s16, s2
 801c19c:	eef0 8a61 	vmov.f32	s17, s3
 801c1a0:	ec55 4b10 	vmov	r4, r5, d0
 801c1a4:	b083      	sub	sp, #12
 801c1a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c1aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801c1ae:	9001      	str	r0, [sp, #4]
 801c1b0:	da06      	bge.n	801c1c0 <__kernel_sin+0x30>
 801c1b2:	ee10 0a10 	vmov	r0, s0
 801c1b6:	4629      	mov	r1, r5
 801c1b8:	f7e4 fcee 	bl	8000b98 <__aeabi_d2iz>
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	d051      	beq.n	801c264 <__kernel_sin+0xd4>
 801c1c0:	4622      	mov	r2, r4
 801c1c2:	462b      	mov	r3, r5
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	4629      	mov	r1, r5
 801c1c8:	f7e4 fa36 	bl	8000638 <__aeabi_dmul>
 801c1cc:	4682      	mov	sl, r0
 801c1ce:	468b      	mov	fp, r1
 801c1d0:	4602      	mov	r2, r0
 801c1d2:	460b      	mov	r3, r1
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	4629      	mov	r1, r5
 801c1d8:	f7e4 fa2e 	bl	8000638 <__aeabi_dmul>
 801c1dc:	a341      	add	r3, pc, #260	; (adr r3, 801c2e4 <__kernel_sin+0x154>)
 801c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e2:	4680      	mov	r8, r0
 801c1e4:	4689      	mov	r9, r1
 801c1e6:	4650      	mov	r0, sl
 801c1e8:	4659      	mov	r1, fp
 801c1ea:	f7e4 fa25 	bl	8000638 <__aeabi_dmul>
 801c1ee:	a33f      	add	r3, pc, #252	; (adr r3, 801c2ec <__kernel_sin+0x15c>)
 801c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f4:	f7e4 f868 	bl	80002c8 <__aeabi_dsub>
 801c1f8:	4652      	mov	r2, sl
 801c1fa:	465b      	mov	r3, fp
 801c1fc:	f7e4 fa1c 	bl	8000638 <__aeabi_dmul>
 801c200:	a33c      	add	r3, pc, #240	; (adr r3, 801c2f4 <__kernel_sin+0x164>)
 801c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c206:	f7e4 f861 	bl	80002cc <__adddf3>
 801c20a:	4652      	mov	r2, sl
 801c20c:	465b      	mov	r3, fp
 801c20e:	f7e4 fa13 	bl	8000638 <__aeabi_dmul>
 801c212:	a33a      	add	r3, pc, #232	; (adr r3, 801c2fc <__kernel_sin+0x16c>)
 801c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c218:	f7e4 f856 	bl	80002c8 <__aeabi_dsub>
 801c21c:	4652      	mov	r2, sl
 801c21e:	465b      	mov	r3, fp
 801c220:	f7e4 fa0a 	bl	8000638 <__aeabi_dmul>
 801c224:	a337      	add	r3, pc, #220	; (adr r3, 801c304 <__kernel_sin+0x174>)
 801c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c22a:	f7e4 f84f 	bl	80002cc <__adddf3>
 801c22e:	9b01      	ldr	r3, [sp, #4]
 801c230:	4606      	mov	r6, r0
 801c232:	460f      	mov	r7, r1
 801c234:	b9eb      	cbnz	r3, 801c272 <__kernel_sin+0xe2>
 801c236:	4602      	mov	r2, r0
 801c238:	460b      	mov	r3, r1
 801c23a:	4650      	mov	r0, sl
 801c23c:	4659      	mov	r1, fp
 801c23e:	f7e4 f9fb 	bl	8000638 <__aeabi_dmul>
 801c242:	a325      	add	r3, pc, #148	; (adr r3, 801c2d8 <__kernel_sin+0x148>)
 801c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c248:	f7e4 f83e 	bl	80002c8 <__aeabi_dsub>
 801c24c:	4642      	mov	r2, r8
 801c24e:	464b      	mov	r3, r9
 801c250:	f7e4 f9f2 	bl	8000638 <__aeabi_dmul>
 801c254:	4602      	mov	r2, r0
 801c256:	460b      	mov	r3, r1
 801c258:	4620      	mov	r0, r4
 801c25a:	4629      	mov	r1, r5
 801c25c:	f7e4 f836 	bl	80002cc <__adddf3>
 801c260:	4604      	mov	r4, r0
 801c262:	460d      	mov	r5, r1
 801c264:	ec45 4b10 	vmov	d0, r4, r5
 801c268:	b003      	add	sp, #12
 801c26a:	ecbd 8b04 	vpop	{d8-d9}
 801c26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c272:	4b1b      	ldr	r3, [pc, #108]	; (801c2e0 <__kernel_sin+0x150>)
 801c274:	ec51 0b18 	vmov	r0, r1, d8
 801c278:	2200      	movs	r2, #0
 801c27a:	f7e4 f9dd 	bl	8000638 <__aeabi_dmul>
 801c27e:	4632      	mov	r2, r6
 801c280:	ec41 0b19 	vmov	d9, r0, r1
 801c284:	463b      	mov	r3, r7
 801c286:	4640      	mov	r0, r8
 801c288:	4649      	mov	r1, r9
 801c28a:	f7e4 f9d5 	bl	8000638 <__aeabi_dmul>
 801c28e:	4602      	mov	r2, r0
 801c290:	460b      	mov	r3, r1
 801c292:	ec51 0b19 	vmov	r0, r1, d9
 801c296:	f7e4 f817 	bl	80002c8 <__aeabi_dsub>
 801c29a:	4652      	mov	r2, sl
 801c29c:	465b      	mov	r3, fp
 801c29e:	f7e4 f9cb 	bl	8000638 <__aeabi_dmul>
 801c2a2:	ec53 2b18 	vmov	r2, r3, d8
 801c2a6:	f7e4 f80f 	bl	80002c8 <__aeabi_dsub>
 801c2aa:	a30b      	add	r3, pc, #44	; (adr r3, 801c2d8 <__kernel_sin+0x148>)
 801c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b0:	4606      	mov	r6, r0
 801c2b2:	460f      	mov	r7, r1
 801c2b4:	4640      	mov	r0, r8
 801c2b6:	4649      	mov	r1, r9
 801c2b8:	f7e4 f9be 	bl	8000638 <__aeabi_dmul>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	460b      	mov	r3, r1
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	4639      	mov	r1, r7
 801c2c4:	f7e4 f802 	bl	80002cc <__adddf3>
 801c2c8:	4602      	mov	r2, r0
 801c2ca:	460b      	mov	r3, r1
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	4629      	mov	r1, r5
 801c2d0:	f7e3 fffa 	bl	80002c8 <__aeabi_dsub>
 801c2d4:	e7c4      	b.n	801c260 <__kernel_sin+0xd0>
 801c2d6:	bf00      	nop
 801c2d8:	55555549 	.word	0x55555549
 801c2dc:	3fc55555 	.word	0x3fc55555
 801c2e0:	3fe00000 	.word	0x3fe00000
 801c2e4:	5acfd57c 	.word	0x5acfd57c
 801c2e8:	3de5d93a 	.word	0x3de5d93a
 801c2ec:	8a2b9ceb 	.word	0x8a2b9ceb
 801c2f0:	3e5ae5e6 	.word	0x3e5ae5e6
 801c2f4:	57b1fe7d 	.word	0x57b1fe7d
 801c2f8:	3ec71de3 	.word	0x3ec71de3
 801c2fc:	19c161d5 	.word	0x19c161d5
 801c300:	3f2a01a0 	.word	0x3f2a01a0
 801c304:	1110f8a6 	.word	0x1110f8a6
 801c308:	3f811111 	.word	0x3f811111
 801c30c:	00000000 	.word	0x00000000

0801c310 <__kernel_tan>:
 801c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c314:	ed2d 8b06 	vpush	{d8-d10}
 801c318:	ec5b ab10 	vmov	sl, fp, d0
 801c31c:	4be0      	ldr	r3, [pc, #896]	; (801c6a0 <__kernel_tan+0x390>)
 801c31e:	b083      	sub	sp, #12
 801c320:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801c324:	429f      	cmp	r7, r3
 801c326:	ec59 8b11 	vmov	r8, r9, d1
 801c32a:	4606      	mov	r6, r0
 801c32c:	f8cd b000 	str.w	fp, [sp]
 801c330:	dc61      	bgt.n	801c3f6 <__kernel_tan+0xe6>
 801c332:	ee10 0a10 	vmov	r0, s0
 801c336:	4659      	mov	r1, fp
 801c338:	f7e4 fc2e 	bl	8000b98 <__aeabi_d2iz>
 801c33c:	4605      	mov	r5, r0
 801c33e:	2800      	cmp	r0, #0
 801c340:	f040 8083 	bne.w	801c44a <__kernel_tan+0x13a>
 801c344:	1c73      	adds	r3, r6, #1
 801c346:	4652      	mov	r2, sl
 801c348:	4313      	orrs	r3, r2
 801c34a:	433b      	orrs	r3, r7
 801c34c:	d112      	bne.n	801c374 <__kernel_tan+0x64>
 801c34e:	ec4b ab10 	vmov	d0, sl, fp
 801c352:	f000 fa17 	bl	801c784 <fabs>
 801c356:	49d3      	ldr	r1, [pc, #844]	; (801c6a4 <__kernel_tan+0x394>)
 801c358:	ec53 2b10 	vmov	r2, r3, d0
 801c35c:	2000      	movs	r0, #0
 801c35e:	f7e4 fa95 	bl	800088c <__aeabi_ddiv>
 801c362:	4682      	mov	sl, r0
 801c364:	468b      	mov	fp, r1
 801c366:	ec4b ab10 	vmov	d0, sl, fp
 801c36a:	b003      	add	sp, #12
 801c36c:	ecbd 8b06 	vpop	{d8-d10}
 801c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c374:	2e01      	cmp	r6, #1
 801c376:	d0f6      	beq.n	801c366 <__kernel_tan+0x56>
 801c378:	4642      	mov	r2, r8
 801c37a:	464b      	mov	r3, r9
 801c37c:	4650      	mov	r0, sl
 801c37e:	4659      	mov	r1, fp
 801c380:	f7e3 ffa4 	bl	80002cc <__adddf3>
 801c384:	4602      	mov	r2, r0
 801c386:	460b      	mov	r3, r1
 801c388:	460f      	mov	r7, r1
 801c38a:	2000      	movs	r0, #0
 801c38c:	49c6      	ldr	r1, [pc, #792]	; (801c6a8 <__kernel_tan+0x398>)
 801c38e:	f7e4 fa7d 	bl	800088c <__aeabi_ddiv>
 801c392:	e9cd 0100 	strd	r0, r1, [sp]
 801c396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c39a:	462e      	mov	r6, r5
 801c39c:	4652      	mov	r2, sl
 801c39e:	462c      	mov	r4, r5
 801c3a0:	4630      	mov	r0, r6
 801c3a2:	461d      	mov	r5, r3
 801c3a4:	4639      	mov	r1, r7
 801c3a6:	465b      	mov	r3, fp
 801c3a8:	f7e3 ff8e 	bl	80002c8 <__aeabi_dsub>
 801c3ac:	4602      	mov	r2, r0
 801c3ae:	460b      	mov	r3, r1
 801c3b0:	4640      	mov	r0, r8
 801c3b2:	4649      	mov	r1, r9
 801c3b4:	f7e3 ff88 	bl	80002c8 <__aeabi_dsub>
 801c3b8:	4632      	mov	r2, r6
 801c3ba:	462b      	mov	r3, r5
 801c3bc:	f7e4 f93c 	bl	8000638 <__aeabi_dmul>
 801c3c0:	4632      	mov	r2, r6
 801c3c2:	4680      	mov	r8, r0
 801c3c4:	4689      	mov	r9, r1
 801c3c6:	462b      	mov	r3, r5
 801c3c8:	4630      	mov	r0, r6
 801c3ca:	4639      	mov	r1, r7
 801c3cc:	f7e4 f934 	bl	8000638 <__aeabi_dmul>
 801c3d0:	4bb4      	ldr	r3, [pc, #720]	; (801c6a4 <__kernel_tan+0x394>)
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	f7e3 ff7a 	bl	80002cc <__adddf3>
 801c3d8:	4602      	mov	r2, r0
 801c3da:	460b      	mov	r3, r1
 801c3dc:	4640      	mov	r0, r8
 801c3de:	4649      	mov	r1, r9
 801c3e0:	f7e3 ff74 	bl	80002cc <__adddf3>
 801c3e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c3e8:	f7e4 f926 	bl	8000638 <__aeabi_dmul>
 801c3ec:	4622      	mov	r2, r4
 801c3ee:	462b      	mov	r3, r5
 801c3f0:	f7e3 ff6c 	bl	80002cc <__adddf3>
 801c3f4:	e7b5      	b.n	801c362 <__kernel_tan+0x52>
 801c3f6:	4bad      	ldr	r3, [pc, #692]	; (801c6ac <__kernel_tan+0x39c>)
 801c3f8:	429f      	cmp	r7, r3
 801c3fa:	dd26      	ble.n	801c44a <__kernel_tan+0x13a>
 801c3fc:	9b00      	ldr	r3, [sp, #0]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	da09      	bge.n	801c416 <__kernel_tan+0x106>
 801c402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c406:	469b      	mov	fp, r3
 801c408:	ee10 aa10 	vmov	sl, s0
 801c40c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c410:	ee11 8a10 	vmov	r8, s2
 801c414:	4699      	mov	r9, r3
 801c416:	4652      	mov	r2, sl
 801c418:	465b      	mov	r3, fp
 801c41a:	a183      	add	r1, pc, #524	; (adr r1, 801c628 <__kernel_tan+0x318>)
 801c41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c420:	f7e3 ff52 	bl	80002c8 <__aeabi_dsub>
 801c424:	4642      	mov	r2, r8
 801c426:	464b      	mov	r3, r9
 801c428:	4604      	mov	r4, r0
 801c42a:	460d      	mov	r5, r1
 801c42c:	a180      	add	r1, pc, #512	; (adr r1, 801c630 <__kernel_tan+0x320>)
 801c42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c432:	f7e3 ff49 	bl	80002c8 <__aeabi_dsub>
 801c436:	4622      	mov	r2, r4
 801c438:	462b      	mov	r3, r5
 801c43a:	f7e3 ff47 	bl	80002cc <__adddf3>
 801c43e:	f04f 0800 	mov.w	r8, #0
 801c442:	4682      	mov	sl, r0
 801c444:	468b      	mov	fp, r1
 801c446:	f04f 0900 	mov.w	r9, #0
 801c44a:	4652      	mov	r2, sl
 801c44c:	465b      	mov	r3, fp
 801c44e:	4650      	mov	r0, sl
 801c450:	4659      	mov	r1, fp
 801c452:	f7e4 f8f1 	bl	8000638 <__aeabi_dmul>
 801c456:	4602      	mov	r2, r0
 801c458:	460b      	mov	r3, r1
 801c45a:	ec43 2b18 	vmov	d8, r2, r3
 801c45e:	f7e4 f8eb 	bl	8000638 <__aeabi_dmul>
 801c462:	ec53 2b18 	vmov	r2, r3, d8
 801c466:	4604      	mov	r4, r0
 801c468:	460d      	mov	r5, r1
 801c46a:	4650      	mov	r0, sl
 801c46c:	4659      	mov	r1, fp
 801c46e:	f7e4 f8e3 	bl	8000638 <__aeabi_dmul>
 801c472:	a371      	add	r3, pc, #452	; (adr r3, 801c638 <__kernel_tan+0x328>)
 801c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c478:	ec41 0b19 	vmov	d9, r0, r1
 801c47c:	4620      	mov	r0, r4
 801c47e:	4629      	mov	r1, r5
 801c480:	f7e4 f8da 	bl	8000638 <__aeabi_dmul>
 801c484:	a36e      	add	r3, pc, #440	; (adr r3, 801c640 <__kernel_tan+0x330>)
 801c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c48a:	f7e3 ff1f 	bl	80002cc <__adddf3>
 801c48e:	4622      	mov	r2, r4
 801c490:	462b      	mov	r3, r5
 801c492:	f7e4 f8d1 	bl	8000638 <__aeabi_dmul>
 801c496:	a36c      	add	r3, pc, #432	; (adr r3, 801c648 <__kernel_tan+0x338>)
 801c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49c:	f7e3 ff16 	bl	80002cc <__adddf3>
 801c4a0:	4622      	mov	r2, r4
 801c4a2:	462b      	mov	r3, r5
 801c4a4:	f7e4 f8c8 	bl	8000638 <__aeabi_dmul>
 801c4a8:	a369      	add	r3, pc, #420	; (adr r3, 801c650 <__kernel_tan+0x340>)
 801c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4ae:	f7e3 ff0d 	bl	80002cc <__adddf3>
 801c4b2:	4622      	mov	r2, r4
 801c4b4:	462b      	mov	r3, r5
 801c4b6:	f7e4 f8bf 	bl	8000638 <__aeabi_dmul>
 801c4ba:	a367      	add	r3, pc, #412	; (adr r3, 801c658 <__kernel_tan+0x348>)
 801c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4c0:	f7e3 ff04 	bl	80002cc <__adddf3>
 801c4c4:	4622      	mov	r2, r4
 801c4c6:	462b      	mov	r3, r5
 801c4c8:	f7e4 f8b6 	bl	8000638 <__aeabi_dmul>
 801c4cc:	a364      	add	r3, pc, #400	; (adr r3, 801c660 <__kernel_tan+0x350>)
 801c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d2:	f7e3 fefb 	bl	80002cc <__adddf3>
 801c4d6:	ec53 2b18 	vmov	r2, r3, d8
 801c4da:	f7e4 f8ad 	bl	8000638 <__aeabi_dmul>
 801c4de:	a362      	add	r3, pc, #392	; (adr r3, 801c668 <__kernel_tan+0x358>)
 801c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4e4:	ec41 0b1a 	vmov	d10, r0, r1
 801c4e8:	4620      	mov	r0, r4
 801c4ea:	4629      	mov	r1, r5
 801c4ec:	f7e4 f8a4 	bl	8000638 <__aeabi_dmul>
 801c4f0:	a35f      	add	r3, pc, #380	; (adr r3, 801c670 <__kernel_tan+0x360>)
 801c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f6:	f7e3 fee9 	bl	80002cc <__adddf3>
 801c4fa:	4622      	mov	r2, r4
 801c4fc:	462b      	mov	r3, r5
 801c4fe:	f7e4 f89b 	bl	8000638 <__aeabi_dmul>
 801c502:	a35d      	add	r3, pc, #372	; (adr r3, 801c678 <__kernel_tan+0x368>)
 801c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c508:	f7e3 fee0 	bl	80002cc <__adddf3>
 801c50c:	4622      	mov	r2, r4
 801c50e:	462b      	mov	r3, r5
 801c510:	f7e4 f892 	bl	8000638 <__aeabi_dmul>
 801c514:	a35a      	add	r3, pc, #360	; (adr r3, 801c680 <__kernel_tan+0x370>)
 801c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51a:	f7e3 fed7 	bl	80002cc <__adddf3>
 801c51e:	4622      	mov	r2, r4
 801c520:	462b      	mov	r3, r5
 801c522:	f7e4 f889 	bl	8000638 <__aeabi_dmul>
 801c526:	a358      	add	r3, pc, #352	; (adr r3, 801c688 <__kernel_tan+0x378>)
 801c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c52c:	f7e3 fece 	bl	80002cc <__adddf3>
 801c530:	4622      	mov	r2, r4
 801c532:	462b      	mov	r3, r5
 801c534:	f7e4 f880 	bl	8000638 <__aeabi_dmul>
 801c538:	a355      	add	r3, pc, #340	; (adr r3, 801c690 <__kernel_tan+0x380>)
 801c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c53e:	f7e3 fec5 	bl	80002cc <__adddf3>
 801c542:	4602      	mov	r2, r0
 801c544:	460b      	mov	r3, r1
 801c546:	ec51 0b1a 	vmov	r0, r1, d10
 801c54a:	f7e3 febf 	bl	80002cc <__adddf3>
 801c54e:	ec53 2b19 	vmov	r2, r3, d9
 801c552:	f7e4 f871 	bl	8000638 <__aeabi_dmul>
 801c556:	4642      	mov	r2, r8
 801c558:	464b      	mov	r3, r9
 801c55a:	f7e3 feb7 	bl	80002cc <__adddf3>
 801c55e:	ec53 2b18 	vmov	r2, r3, d8
 801c562:	f7e4 f869 	bl	8000638 <__aeabi_dmul>
 801c566:	4642      	mov	r2, r8
 801c568:	464b      	mov	r3, r9
 801c56a:	f7e3 feaf 	bl	80002cc <__adddf3>
 801c56e:	a34a      	add	r3, pc, #296	; (adr r3, 801c698 <__kernel_tan+0x388>)
 801c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c574:	4604      	mov	r4, r0
 801c576:	460d      	mov	r5, r1
 801c578:	ec51 0b19 	vmov	r0, r1, d9
 801c57c:	f7e4 f85c 	bl	8000638 <__aeabi_dmul>
 801c580:	4622      	mov	r2, r4
 801c582:	462b      	mov	r3, r5
 801c584:	f7e3 fea2 	bl	80002cc <__adddf3>
 801c588:	460b      	mov	r3, r1
 801c58a:	ec41 0b18 	vmov	d8, r0, r1
 801c58e:	4602      	mov	r2, r0
 801c590:	4659      	mov	r1, fp
 801c592:	4650      	mov	r0, sl
 801c594:	f7e3 fe9a 	bl	80002cc <__adddf3>
 801c598:	4b44      	ldr	r3, [pc, #272]	; (801c6ac <__kernel_tan+0x39c>)
 801c59a:	429f      	cmp	r7, r3
 801c59c:	4604      	mov	r4, r0
 801c59e:	460d      	mov	r5, r1
 801c5a0:	f340 8086 	ble.w	801c6b0 <__kernel_tan+0x3a0>
 801c5a4:	4630      	mov	r0, r6
 801c5a6:	f7e3 ffdd 	bl	8000564 <__aeabi_i2d>
 801c5aa:	4622      	mov	r2, r4
 801c5ac:	4680      	mov	r8, r0
 801c5ae:	4689      	mov	r9, r1
 801c5b0:	462b      	mov	r3, r5
 801c5b2:	4620      	mov	r0, r4
 801c5b4:	4629      	mov	r1, r5
 801c5b6:	f7e4 f83f 	bl	8000638 <__aeabi_dmul>
 801c5ba:	4642      	mov	r2, r8
 801c5bc:	4606      	mov	r6, r0
 801c5be:	460f      	mov	r7, r1
 801c5c0:	464b      	mov	r3, r9
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	4629      	mov	r1, r5
 801c5c6:	f7e3 fe81 	bl	80002cc <__adddf3>
 801c5ca:	4602      	mov	r2, r0
 801c5cc:	460b      	mov	r3, r1
 801c5ce:	4630      	mov	r0, r6
 801c5d0:	4639      	mov	r1, r7
 801c5d2:	f7e4 f95b 	bl	800088c <__aeabi_ddiv>
 801c5d6:	ec53 2b18 	vmov	r2, r3, d8
 801c5da:	f7e3 fe75 	bl	80002c8 <__aeabi_dsub>
 801c5de:	4602      	mov	r2, r0
 801c5e0:	460b      	mov	r3, r1
 801c5e2:	4650      	mov	r0, sl
 801c5e4:	4659      	mov	r1, fp
 801c5e6:	f7e3 fe6f 	bl	80002c8 <__aeabi_dsub>
 801c5ea:	4602      	mov	r2, r0
 801c5ec:	460b      	mov	r3, r1
 801c5ee:	f7e3 fe6d 	bl	80002cc <__adddf3>
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	4640      	mov	r0, r8
 801c5f8:	4649      	mov	r1, r9
 801c5fa:	f7e3 fe65 	bl	80002c8 <__aeabi_dsub>
 801c5fe:	9b00      	ldr	r3, [sp, #0]
 801c600:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801c604:	f00a 0a02 	and.w	sl, sl, #2
 801c608:	4604      	mov	r4, r0
 801c60a:	f1ca 0001 	rsb	r0, sl, #1
 801c60e:	460d      	mov	r5, r1
 801c610:	f7e3 ffa8 	bl	8000564 <__aeabi_i2d>
 801c614:	4602      	mov	r2, r0
 801c616:	460b      	mov	r3, r1
 801c618:	4620      	mov	r0, r4
 801c61a:	4629      	mov	r1, r5
 801c61c:	f7e4 f80c 	bl	8000638 <__aeabi_dmul>
 801c620:	e69f      	b.n	801c362 <__kernel_tan+0x52>
 801c622:	bf00      	nop
 801c624:	f3af 8000 	nop.w
 801c628:	54442d18 	.word	0x54442d18
 801c62c:	3fe921fb 	.word	0x3fe921fb
 801c630:	33145c07 	.word	0x33145c07
 801c634:	3c81a626 	.word	0x3c81a626
 801c638:	74bf7ad4 	.word	0x74bf7ad4
 801c63c:	3efb2a70 	.word	0x3efb2a70
 801c640:	32f0a7e9 	.word	0x32f0a7e9
 801c644:	3f12b80f 	.word	0x3f12b80f
 801c648:	1a8d1068 	.word	0x1a8d1068
 801c64c:	3f3026f7 	.word	0x3f3026f7
 801c650:	fee08315 	.word	0xfee08315
 801c654:	3f57dbc8 	.word	0x3f57dbc8
 801c658:	e96e8493 	.word	0xe96e8493
 801c65c:	3f8226e3 	.word	0x3f8226e3
 801c660:	1bb341fe 	.word	0x1bb341fe
 801c664:	3faba1ba 	.word	0x3faba1ba
 801c668:	db605373 	.word	0xdb605373
 801c66c:	bef375cb 	.word	0xbef375cb
 801c670:	a03792a6 	.word	0xa03792a6
 801c674:	3f147e88 	.word	0x3f147e88
 801c678:	f2f26501 	.word	0xf2f26501
 801c67c:	3f4344d8 	.word	0x3f4344d8
 801c680:	c9560328 	.word	0xc9560328
 801c684:	3f6d6d22 	.word	0x3f6d6d22
 801c688:	8406d637 	.word	0x8406d637
 801c68c:	3f9664f4 	.word	0x3f9664f4
 801c690:	1110fe7a 	.word	0x1110fe7a
 801c694:	3fc11111 	.word	0x3fc11111
 801c698:	55555563 	.word	0x55555563
 801c69c:	3fd55555 	.word	0x3fd55555
 801c6a0:	3e2fffff 	.word	0x3e2fffff
 801c6a4:	3ff00000 	.word	0x3ff00000
 801c6a8:	bff00000 	.word	0xbff00000
 801c6ac:	3fe59427 	.word	0x3fe59427
 801c6b0:	2e01      	cmp	r6, #1
 801c6b2:	d02f      	beq.n	801c714 <__kernel_tan+0x404>
 801c6b4:	460f      	mov	r7, r1
 801c6b6:	4602      	mov	r2, r0
 801c6b8:	460b      	mov	r3, r1
 801c6ba:	4689      	mov	r9, r1
 801c6bc:	2000      	movs	r0, #0
 801c6be:	4917      	ldr	r1, [pc, #92]	; (801c71c <__kernel_tan+0x40c>)
 801c6c0:	f7e4 f8e4 	bl	800088c <__aeabi_ddiv>
 801c6c4:	2600      	movs	r6, #0
 801c6c6:	e9cd 0100 	strd	r0, r1, [sp]
 801c6ca:	4652      	mov	r2, sl
 801c6cc:	465b      	mov	r3, fp
 801c6ce:	4630      	mov	r0, r6
 801c6d0:	4639      	mov	r1, r7
 801c6d2:	f7e3 fdf9 	bl	80002c8 <__aeabi_dsub>
 801c6d6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c6da:	4602      	mov	r2, r0
 801c6dc:	460b      	mov	r3, r1
 801c6de:	ec51 0b18 	vmov	r0, r1, d8
 801c6e2:	f7e3 fdf1 	bl	80002c8 <__aeabi_dsub>
 801c6e6:	4632      	mov	r2, r6
 801c6e8:	462b      	mov	r3, r5
 801c6ea:	f7e3 ffa5 	bl	8000638 <__aeabi_dmul>
 801c6ee:	46b0      	mov	r8, r6
 801c6f0:	460f      	mov	r7, r1
 801c6f2:	4642      	mov	r2, r8
 801c6f4:	462b      	mov	r3, r5
 801c6f6:	4634      	mov	r4, r6
 801c6f8:	4649      	mov	r1, r9
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	4640      	mov	r0, r8
 801c6fe:	f7e3 ff9b 	bl	8000638 <__aeabi_dmul>
 801c702:	4b07      	ldr	r3, [pc, #28]	; (801c720 <__kernel_tan+0x410>)
 801c704:	2200      	movs	r2, #0
 801c706:	f7e3 fde1 	bl	80002cc <__adddf3>
 801c70a:	4602      	mov	r2, r0
 801c70c:	460b      	mov	r3, r1
 801c70e:	4630      	mov	r0, r6
 801c710:	4639      	mov	r1, r7
 801c712:	e665      	b.n	801c3e0 <__kernel_tan+0xd0>
 801c714:	4682      	mov	sl, r0
 801c716:	468b      	mov	fp, r1
 801c718:	e625      	b.n	801c366 <__kernel_tan+0x56>
 801c71a:	bf00      	nop
 801c71c:	bff00000 	.word	0xbff00000
 801c720:	3ff00000 	.word	0x3ff00000

0801c724 <with_errno>:
 801c724:	b570      	push	{r4, r5, r6, lr}
 801c726:	4604      	mov	r4, r0
 801c728:	460d      	mov	r5, r1
 801c72a:	4616      	mov	r6, r2
 801c72c:	f7f8 f88e 	bl	801484c <__errno>
 801c730:	4629      	mov	r1, r5
 801c732:	6006      	str	r6, [r0, #0]
 801c734:	4620      	mov	r0, r4
 801c736:	bd70      	pop	{r4, r5, r6, pc}

0801c738 <xflow>:
 801c738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c73a:	4614      	mov	r4, r2
 801c73c:	461d      	mov	r5, r3
 801c73e:	b108      	cbz	r0, 801c744 <xflow+0xc>
 801c740:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c744:	e9cd 2300 	strd	r2, r3, [sp]
 801c748:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c74c:	4620      	mov	r0, r4
 801c74e:	4629      	mov	r1, r5
 801c750:	f7e3 ff72 	bl	8000638 <__aeabi_dmul>
 801c754:	2222      	movs	r2, #34	; 0x22
 801c756:	b003      	add	sp, #12
 801c758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c75c:	f7ff bfe2 	b.w	801c724 <with_errno>

0801c760 <__math_uflow>:
 801c760:	b508      	push	{r3, lr}
 801c762:	2200      	movs	r2, #0
 801c764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c768:	f7ff ffe6 	bl	801c738 <xflow>
 801c76c:	ec41 0b10 	vmov	d0, r0, r1
 801c770:	bd08      	pop	{r3, pc}

0801c772 <__math_oflow>:
 801c772:	b508      	push	{r3, lr}
 801c774:	2200      	movs	r2, #0
 801c776:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c77a:	f7ff ffdd 	bl	801c738 <xflow>
 801c77e:	ec41 0b10 	vmov	d0, r0, r1
 801c782:	bd08      	pop	{r3, pc}

0801c784 <fabs>:
 801c784:	ec51 0b10 	vmov	r0, r1, d0
 801c788:	ee10 2a10 	vmov	r2, s0
 801c78c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c790:	ec43 2b10 	vmov	d0, r2, r3
 801c794:	4770      	bx	lr

0801c796 <finite>:
 801c796:	b082      	sub	sp, #8
 801c798:	ed8d 0b00 	vstr	d0, [sp]
 801c79c:	9801      	ldr	r0, [sp, #4]
 801c79e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c7a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c7a6:	0fc0      	lsrs	r0, r0, #31
 801c7a8:	b002      	add	sp, #8
 801c7aa:	4770      	bx	lr
 801c7ac:	0000      	movs	r0, r0
	...

0801c7b0 <floor>:
 801c7b0:	ec51 0b10 	vmov	r0, r1, d0
 801c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c7bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c7c0:	2e13      	cmp	r6, #19
 801c7c2:	ee10 5a10 	vmov	r5, s0
 801c7c6:	ee10 8a10 	vmov	r8, s0
 801c7ca:	460c      	mov	r4, r1
 801c7cc:	dc32      	bgt.n	801c834 <floor+0x84>
 801c7ce:	2e00      	cmp	r6, #0
 801c7d0:	da14      	bge.n	801c7fc <floor+0x4c>
 801c7d2:	a333      	add	r3, pc, #204	; (adr r3, 801c8a0 <floor+0xf0>)
 801c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d8:	f7e3 fd78 	bl	80002cc <__adddf3>
 801c7dc:	2200      	movs	r2, #0
 801c7de:	2300      	movs	r3, #0
 801c7e0:	f7e4 f9ba 	bl	8000b58 <__aeabi_dcmpgt>
 801c7e4:	b138      	cbz	r0, 801c7f6 <floor+0x46>
 801c7e6:	2c00      	cmp	r4, #0
 801c7e8:	da57      	bge.n	801c89a <floor+0xea>
 801c7ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c7ee:	431d      	orrs	r5, r3
 801c7f0:	d001      	beq.n	801c7f6 <floor+0x46>
 801c7f2:	4c2d      	ldr	r4, [pc, #180]	; (801c8a8 <floor+0xf8>)
 801c7f4:	2500      	movs	r5, #0
 801c7f6:	4621      	mov	r1, r4
 801c7f8:	4628      	mov	r0, r5
 801c7fa:	e025      	b.n	801c848 <floor+0x98>
 801c7fc:	4f2b      	ldr	r7, [pc, #172]	; (801c8ac <floor+0xfc>)
 801c7fe:	4137      	asrs	r7, r6
 801c800:	ea01 0307 	and.w	r3, r1, r7
 801c804:	4303      	orrs	r3, r0
 801c806:	d01f      	beq.n	801c848 <floor+0x98>
 801c808:	a325      	add	r3, pc, #148	; (adr r3, 801c8a0 <floor+0xf0>)
 801c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80e:	f7e3 fd5d 	bl	80002cc <__adddf3>
 801c812:	2200      	movs	r2, #0
 801c814:	2300      	movs	r3, #0
 801c816:	f7e4 f99f 	bl	8000b58 <__aeabi_dcmpgt>
 801c81a:	2800      	cmp	r0, #0
 801c81c:	d0eb      	beq.n	801c7f6 <floor+0x46>
 801c81e:	2c00      	cmp	r4, #0
 801c820:	bfbe      	ittt	lt
 801c822:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c826:	fa43 f606 	asrlt.w	r6, r3, r6
 801c82a:	19a4      	addlt	r4, r4, r6
 801c82c:	ea24 0407 	bic.w	r4, r4, r7
 801c830:	2500      	movs	r5, #0
 801c832:	e7e0      	b.n	801c7f6 <floor+0x46>
 801c834:	2e33      	cmp	r6, #51	; 0x33
 801c836:	dd0b      	ble.n	801c850 <floor+0xa0>
 801c838:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c83c:	d104      	bne.n	801c848 <floor+0x98>
 801c83e:	ee10 2a10 	vmov	r2, s0
 801c842:	460b      	mov	r3, r1
 801c844:	f7e3 fd42 	bl	80002cc <__adddf3>
 801c848:	ec41 0b10 	vmov	d0, r0, r1
 801c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c850:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c854:	f04f 33ff 	mov.w	r3, #4294967295
 801c858:	fa23 f707 	lsr.w	r7, r3, r7
 801c85c:	4207      	tst	r7, r0
 801c85e:	d0f3      	beq.n	801c848 <floor+0x98>
 801c860:	a30f      	add	r3, pc, #60	; (adr r3, 801c8a0 <floor+0xf0>)
 801c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c866:	f7e3 fd31 	bl	80002cc <__adddf3>
 801c86a:	2200      	movs	r2, #0
 801c86c:	2300      	movs	r3, #0
 801c86e:	f7e4 f973 	bl	8000b58 <__aeabi_dcmpgt>
 801c872:	2800      	cmp	r0, #0
 801c874:	d0bf      	beq.n	801c7f6 <floor+0x46>
 801c876:	2c00      	cmp	r4, #0
 801c878:	da02      	bge.n	801c880 <floor+0xd0>
 801c87a:	2e14      	cmp	r6, #20
 801c87c:	d103      	bne.n	801c886 <floor+0xd6>
 801c87e:	3401      	adds	r4, #1
 801c880:	ea25 0507 	bic.w	r5, r5, r7
 801c884:	e7b7      	b.n	801c7f6 <floor+0x46>
 801c886:	2301      	movs	r3, #1
 801c888:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c88c:	fa03 f606 	lsl.w	r6, r3, r6
 801c890:	4435      	add	r5, r6
 801c892:	4545      	cmp	r5, r8
 801c894:	bf38      	it	cc
 801c896:	18e4      	addcc	r4, r4, r3
 801c898:	e7f2      	b.n	801c880 <floor+0xd0>
 801c89a:	2500      	movs	r5, #0
 801c89c:	462c      	mov	r4, r5
 801c89e:	e7aa      	b.n	801c7f6 <floor+0x46>
 801c8a0:	8800759c 	.word	0x8800759c
 801c8a4:	7e37e43c 	.word	0x7e37e43c
 801c8a8:	bff00000 	.word	0xbff00000
 801c8ac:	000fffff 	.word	0x000fffff

0801c8b0 <scalbn>:
 801c8b0:	b570      	push	{r4, r5, r6, lr}
 801c8b2:	ec55 4b10 	vmov	r4, r5, d0
 801c8b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c8ba:	4606      	mov	r6, r0
 801c8bc:	462b      	mov	r3, r5
 801c8be:	b99a      	cbnz	r2, 801c8e8 <scalbn+0x38>
 801c8c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c8c4:	4323      	orrs	r3, r4
 801c8c6:	d036      	beq.n	801c936 <scalbn+0x86>
 801c8c8:	4b39      	ldr	r3, [pc, #228]	; (801c9b0 <scalbn+0x100>)
 801c8ca:	4629      	mov	r1, r5
 801c8cc:	ee10 0a10 	vmov	r0, s0
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	f7e3 feb1 	bl	8000638 <__aeabi_dmul>
 801c8d6:	4b37      	ldr	r3, [pc, #220]	; (801c9b4 <scalbn+0x104>)
 801c8d8:	429e      	cmp	r6, r3
 801c8da:	4604      	mov	r4, r0
 801c8dc:	460d      	mov	r5, r1
 801c8de:	da10      	bge.n	801c902 <scalbn+0x52>
 801c8e0:	a32b      	add	r3, pc, #172	; (adr r3, 801c990 <scalbn+0xe0>)
 801c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e6:	e03a      	b.n	801c95e <scalbn+0xae>
 801c8e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c8ec:	428a      	cmp	r2, r1
 801c8ee:	d10c      	bne.n	801c90a <scalbn+0x5a>
 801c8f0:	ee10 2a10 	vmov	r2, s0
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	4629      	mov	r1, r5
 801c8f8:	f7e3 fce8 	bl	80002cc <__adddf3>
 801c8fc:	4604      	mov	r4, r0
 801c8fe:	460d      	mov	r5, r1
 801c900:	e019      	b.n	801c936 <scalbn+0x86>
 801c902:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c906:	460b      	mov	r3, r1
 801c908:	3a36      	subs	r2, #54	; 0x36
 801c90a:	4432      	add	r2, r6
 801c90c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c910:	428a      	cmp	r2, r1
 801c912:	dd08      	ble.n	801c926 <scalbn+0x76>
 801c914:	2d00      	cmp	r5, #0
 801c916:	a120      	add	r1, pc, #128	; (adr r1, 801c998 <scalbn+0xe8>)
 801c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c91c:	da1c      	bge.n	801c958 <scalbn+0xa8>
 801c91e:	a120      	add	r1, pc, #128	; (adr r1, 801c9a0 <scalbn+0xf0>)
 801c920:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c924:	e018      	b.n	801c958 <scalbn+0xa8>
 801c926:	2a00      	cmp	r2, #0
 801c928:	dd08      	ble.n	801c93c <scalbn+0x8c>
 801c92a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c92e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c932:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c936:	ec45 4b10 	vmov	d0, r4, r5
 801c93a:	bd70      	pop	{r4, r5, r6, pc}
 801c93c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c940:	da19      	bge.n	801c976 <scalbn+0xc6>
 801c942:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c946:	429e      	cmp	r6, r3
 801c948:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c94c:	dd0a      	ble.n	801c964 <scalbn+0xb4>
 801c94e:	a112      	add	r1, pc, #72	; (adr r1, 801c998 <scalbn+0xe8>)
 801c950:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d1e2      	bne.n	801c91e <scalbn+0x6e>
 801c958:	a30f      	add	r3, pc, #60	; (adr r3, 801c998 <scalbn+0xe8>)
 801c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c95e:	f7e3 fe6b 	bl	8000638 <__aeabi_dmul>
 801c962:	e7cb      	b.n	801c8fc <scalbn+0x4c>
 801c964:	a10a      	add	r1, pc, #40	; (adr r1, 801c990 <scalbn+0xe0>)
 801c966:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d0b8      	beq.n	801c8e0 <scalbn+0x30>
 801c96e:	a10e      	add	r1, pc, #56	; (adr r1, 801c9a8 <scalbn+0xf8>)
 801c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c974:	e7b4      	b.n	801c8e0 <scalbn+0x30>
 801c976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c97a:	3236      	adds	r2, #54	; 0x36
 801c97c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c980:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c984:	4620      	mov	r0, r4
 801c986:	4b0c      	ldr	r3, [pc, #48]	; (801c9b8 <scalbn+0x108>)
 801c988:	2200      	movs	r2, #0
 801c98a:	e7e8      	b.n	801c95e <scalbn+0xae>
 801c98c:	f3af 8000 	nop.w
 801c990:	c2f8f359 	.word	0xc2f8f359
 801c994:	01a56e1f 	.word	0x01a56e1f
 801c998:	8800759c 	.word	0x8800759c
 801c99c:	7e37e43c 	.word	0x7e37e43c
 801c9a0:	8800759c 	.word	0x8800759c
 801c9a4:	fe37e43c 	.word	0xfe37e43c
 801c9a8:	c2f8f359 	.word	0xc2f8f359
 801c9ac:	81a56e1f 	.word	0x81a56e1f
 801c9b0:	43500000 	.word	0x43500000
 801c9b4:	ffff3cb0 	.word	0xffff3cb0
 801c9b8:	3c900000 	.word	0x3c900000

0801c9bc <_init>:
 801c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9be:	bf00      	nop
 801c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9c2:	bc08      	pop	{r3}
 801c9c4:	469e      	mov	lr, r3
 801c9c6:	4770      	bx	lr

0801c9c8 <_fini>:
 801c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ca:	bf00      	nop
 801c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9ce:	bc08      	pop	{r3}
 801c9d0:	469e      	mov	lr, r3
 801c9d2:	4770      	bx	lr
